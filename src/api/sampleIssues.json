[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17909",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17909/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17909/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17909/events",
    "html_url": "https://github.com/facebook/react/issues/17909",
    "id": 555074919,
    "node_id": "MDU6SXNzdWU1NTUwNzQ5MTk=",
    "number": 17909,
    "title": "Bug: Events from an <input> in the <legend> of a disabled <fieldset> get supressed",
    "user": {
      "login": "MatthijsMud",
      "id": 11519728,
      "node_id": "MDQ6VXNlcjExNTE5NzI4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11519728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MatthijsMud",
      "html_url": "https://github.com/MatthijsMud",
      "followers_url": "https://api.github.com/users/MatthijsMud/followers",
      "following_url": "https://api.github.com/users/MatthijsMud/following{/other_user}",
      "gists_url": "https://api.github.com/users/MatthijsMud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MatthijsMud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MatthijsMud/subscriptions",
      "organizations_url": "https://api.github.com/users/MatthijsMud/orgs",
      "repos_url": "https://api.github.com/users/MatthijsMud/repos",
      "events_url": "https://api.github.com/users/MatthijsMud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MatthijsMud/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-25T11:35:42Z",
    "updated_at": "2020-01-25T11:35:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "The closest related issue I could, is somewhat of the inverse of this one: #7711\r\n\r\nReact version: 16.12 (older versions as well)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component\r\n2. Add state indicating whether it is enabled or disabled (advised to start as enabled)\r\n3. On render, let the component return a `<fieldset>` with: a `<legend>` containing an `<input>` (checkbox) element, and another form element (`<select>`, `<input>`, `<textarea>`).\r\n4. Add the `disabled` attribute that follows the aforementioned state to the `<fieldset>`.\r\n5. Make the `onChange` event of the `<input>` in the `<fieldset>` responsible for modifying the state of the component (enabled/disabled). \r\n6. Run an app that uses the described component.\r\n7. Disable the `<fieldset>` using the `<input>` in its `<legend>`.\r\n8. (Try to) enable the `<fieldset>`.\r\n\r\nLink to code example: [Sandbox](https://codesandbox.io/s/wizardly-ellis-45sel?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\n```jsx\r\nimport React from \"react\";\r\n\r\nexport default function App() {\r\n  const [enabled, setEnabled] = React.useState(true);\r\n  return <React.Fragment>\r\n    <fieldset disabled={!enabled}>\r\n      <legend>\r\n        <input \r\n          type=\"checkbox\"\r\n          checked={enabled}\r\n          onChange={(evt)=>{setEnabled(evt.target.checked);}}/>\r\n      </legend>\r\n      <textarea></textarea>\r\n    </fieldset>\r\n    <p>\r\n      Disable the above fieldset by unchecking the checkbox. Checking the box once again does not re-enable the fieldset however.\r\n    </p>\r\n  </React.Fragment>;\r\n}\r\n\r\n```\r\n\r\n## The current behavior\r\nEnabling the `<fieldset>` using the `<input>` in its `<legend>` changes the state of the `<input>` in unchecked fashion; it does not fire its `onChange` event and its value does thus no longer match the state of the component.\r\n\r\n## The expected behavior\r\nBased on the [W3C](https://www.w3.org/html/wiki/Elements/fieldset) and [WHATWG](https://html.spec.whatwg.org/multipage/form-elements.html#the-fieldset-element) spec, the contents of the first `<legend>` of a `<fieldset>` should not be disabled when that fieldset is disabled. \r\n\r\nOne would expect that if an element does not appear disabled, its events will be triggered. "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17908",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17908/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17908/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17908/events",
    "html_url": "https://github.com/facebook/react/pull/17908",
    "id": 554992002,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY3MDQ2ODk4",
    "number": 17908,
    "title": "Rewrite useTransition to better handle overlapping transitions",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-24T22:52:51Z",
    "updated_at": "2020-01-25T01:20:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17908",
      "html_url": "https://github.com/facebook/react/pull/17908",
      "diff_url": "https://github.com/facebook/react/pull/17908.diff",
      "patch_url": "https://github.com/facebook/react/pull/17908.patch"
    },
    "body": "When the user interacts with the UI more quickly than it can respond, you usually don't want to update the screen with anything that isn't the last thing the user requested.\r\n\r\nFor example, if you click on multiple tabs in, we should not switch to any tab that isn't the last one you clicked. The last tab navigation supersedes all the previous ones.\r\n\r\nHowever, this only applies to transitions that update the same part of the UI. For example, if you click a new tab, and in the meantime you click a drop-down menu, it doesn't matter whether the tab or the menu appears first. They are independent, parallel transitions.\r\n\r\nTo implement this behavior, we will treat transitions as **overlapping** if they share at least one state queue between them. The result of the most recent transition in an overlapping sequence is considered the **terminal** state. The rest are considered **intermediate** states. We will avoid showing intermediate states by batching them together with the terminal one.\r\n\r\nWhen there are overlapping transitions, the `isPending` states of the `useTransition` hooks that correspond to the intermediate states are turned off (unless they happen to be the same `useTransition` hook as the terminal one).\r\n\r\n---\r\n\r\nI iterated on the implementation several times. I've squashed most of the commits to reduce noise when reviewing. You can see some of the unsquashed steps in https://github.com/facebook/react/pull/17418. If this is too much to review in a single PR, I can split the commits back up again; however, I don't think it's worth landing in more than two steps because there are only two useful features here. Increasing the granularity would increase the risk of landing without much benefit.\r\n\r\n## Example (demo)\r\n\r\nThe example demo is a tab switcher. Pay attention to when the pending spinner disappears, and when the tab content is allowed to switch.\r\n\r\nBefore this PR: https://codesandbox.io/s/elastic-hawking-69381\r\nAfter this PR: https://codesandbox.io/s/beautiful-goldstine-u157u"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17902",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17902/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17902/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17902/events",
    "html_url": "https://github.com/facebook/react/pull/17902",
    "id": 554441785,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY2NTk2MTkx",
    "number": 17902,
    "title": "Update google-closure-compiler",
    "user": {
      "login": "necolas",
      "id": 239676,
      "node_id": "MDQ6VXNlcjIzOTY3Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/239676?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/necolas",
      "html_url": "https://github.com/necolas",
      "followers_url": "https://api.github.com/users/necolas/followers",
      "following_url": "https://api.github.com/users/necolas/following{/other_user}",
      "gists_url": "https://api.github.com/users/necolas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/necolas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/necolas/subscriptions",
      "organizations_url": "https://api.github.com/users/necolas/orgs",
      "repos_url": "https://api.github.com/users/necolas/repos",
      "events_url": "https://api.github.com/users/necolas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/necolas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-23T22:22:30Z",
    "updated_at": "2020-01-24T18:43:50Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17902",
      "html_url": "https://github.com/facebook/react/pull/17902",
      "diff_url": "https://github.com/facebook/react/pull/17902.diff",
      "patch_url": "https://github.com/facebook/react/pull/17902.patch"
    },
    "body": "## Summary\r\n\r\nUpdates the google-closure-compiler dependency\r\n\r\n## Test Plan\r\n\r\nCI\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17899",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17899/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17899/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17899/events",
    "html_url": "https://github.com/facebook/react/issues/17899",
    "id": 554247999,
    "node_id": "MDU6SXNzdWU1NTQyNDc5OTk=",
    "number": 17899,
    "title": "Bug: styles object using css variables and both a shorthand and a specific property renders incorrectly",
    "user": {
      "login": "joaomoleiro",
      "id": 23476208,
      "node_id": "MDQ6VXNlcjIzNDc2MjA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/23476208?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaomoleiro",
      "html_url": "https://github.com/joaomoleiro",
      "followers_url": "https://api.github.com/users/joaomoleiro/followers",
      "following_url": "https://api.github.com/users/joaomoleiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaomoleiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaomoleiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaomoleiro/subscriptions",
      "organizations_url": "https://api.github.com/users/joaomoleiro/orgs",
      "repos_url": "https://api.github.com/users/joaomoleiro/repos",
      "events_url": "https://api.github.com/users/joaomoleiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaomoleiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-01-23T15:58:13Z",
    "updated_at": "2020-01-23T22:00:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "React does not produce the correct css inline styles when using css variables for both the shorthand property and another specific one (like `padding` and `paddingRight`).\r\n\r\nThe styles object:\r\n\r\n```js\r\n{\r\n  padding: \"calc(var(--spacing) * 1)\",\r\n  paddingRight: \"calc(var(--spacing) * 3)\",\r\n  paddingBottom: \"calc(var(--spacing) * 4)\"\r\n};\r\n```\r\nproduces the following styles:\r\n\r\n![image](https://user-images.githubusercontent.com/23476208/72995030-1d39e400-3df0-11ea-9235-0e6ad00718b2.png)\r\n\r\nand the following html:\r\n```html\r\n<span style=\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\">App</span>\r\n```\r\n\r\neven though the computed properties tab of the dev-tools appear to be correct and the padding is properly rendered in the screen:\r\n\r\n![image](https://user-images.githubusercontent.com/23476208/72995225-6e49d800-3df0-11ea-9770-98f062008ca3.png)\r\n\r\nIf I remove the css-variable, everything works as expected.\r\n\r\n**React version**: From v15.0.0 to 16.12.0\r\n\r\n_Note_: Below v15.0.0 the styles are correctly produced:\r\n\r\n```html\r\n<span style=\"padding:calc(var(--spacing) * 1);padding-right:calc(var(--spacing) * 3);padding-bottom:calc(var(--spacing) * 4);\">App</span>\r\n```\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Add a style object to a component that has both a property shorthand and a specific one (like `padding` and `paddingRight`) and uses a css variable (like `var(--spacing)`.\r\n2. Render that component and inspect using dev-tools.\r\n\r\nLink to code example: https://codesandbox.io/s/heuristic-wood-bjr1y\r\n\r\nstyles object:\r\n```js\r\n{\r\n  padding: \"calc(var(--spacing) * 1)\",\r\n  paddingRight: \"calc(var(--spacing) * 3)\",\r\n  paddingBottom: \"calc(var(--spacing) * 4)\"\r\n};\r\n```\r\n## The current behavior\r\n\r\nReact does not produces the correct css inline styles when using css variables for both the shorthand property and another specific one:\r\n\r\n```html\r\n<span style=\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\">App</span>\r\n```\r\n\r\n## The expected behavior\r\n\r\nInline styles using css variables that have both a shorthand and a specific one should produce the correct styles.\r\n```html\r\n<span style=\"padding: calc(var(--spacing) * 1); padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4);\">App</span>\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17898",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17898/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17898/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17898/events",
    "html_url": "https://github.com/facebook/react/pull/17898",
    "id": 554225756,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY2NDE4NDA5",
    "number": 17898,
    "title": "[Do not merge] Provide React Element introspection warning",
    "user": {
      "login": "trueadm",
      "id": 1519870,
      "node_id": "MDQ6VXNlcjE1MTk4NzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trueadm",
      "html_url": "https://github.com/trueadm",
      "followers_url": "https://api.github.com/users/trueadm/followers",
      "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
      "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
      "organizations_url": "https://api.github.com/users/trueadm/orgs",
      "repos_url": "https://api.github.com/users/trueadm/repos",
      "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trueadm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-23T15:21:36Z",
    "updated_at": "2020-01-23T19:03:10Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17898",
      "html_url": "https://github.com/facebook/react/pull/17898",
      "diff_url": "https://github.com/facebook/react/pull/17898.diff",
      "patch_url": "https://github.com/facebook/react/pull/17898.patch"
    },
    "body": "Example of how we might warn on React Element introspection"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17896",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17896/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17896/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17896/events",
    "html_url": "https://github.com/facebook/react/pull/17896",
    "id": 554176616,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY2Mzc3NzE4",
    "number": 17896,
    "title": "chore: upgrade to jest 25",
    "user": {
      "login": "SimenB",
      "id": 1404810,
      "node_id": "MDQ6VXNlcjE0MDQ4MTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1404810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SimenB",
      "html_url": "https://github.com/SimenB",
      "followers_url": "https://api.github.com/users/SimenB/followers",
      "following_url": "https://api.github.com/users/SimenB/following{/other_user}",
      "gists_url": "https://api.github.com/users/SimenB/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SimenB/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SimenB/subscriptions",
      "organizations_url": "https://api.github.com/users/SimenB/orgs",
      "repos_url": "https://api.github.com/users/SimenB/repos",
      "events_url": "https://api.github.com/users/SimenB/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SimenB/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 20,
    "created_at": "2020-01-23T14:02:28Z",
    "updated_at": "2020-01-25T13:26:35Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17896",
      "html_url": "https://github.com/facebook/react/pull/17896",
      "diff_url": "https://github.com/facebook/react/pull/17896.diff",
      "patch_url": "https://github.com/facebook/react/pull/17896.patch"
    },
    "body": "## Summary\r\n\r\nThe changes to the test code relate to changes in JSDOM that come with Jest 25:\r\n\r\n* Several JSDOM workarounds are no longer needed.\r\n* Several tests made assertions to match incorrect JSDOM behavior (e.g. `setAttribute` calls) that JSDOM has now patched to match browsers.\r\n  * https://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh\r\n* JSDOM no longer triggers default actions when dispatching click events. \r\n  * https://codesandbox.io/s/beautiful-cdn-ugn8f\r\n* JSDOM fixed (jsdom/jsdom#2700) a bug so that calling `focus()` on an already focused element does not dispatch a `FocusEvent`.\r\n* JSDOM now supports passive events.\r\n* JSDOM has improved support for custom CSS properties.\r\n  * But requires jsdom/cssstyle#112 to land to support webkit prefixed properties.\r\n\r\nCloses #17012\r\n\r\n## Test Plan\r\n\r\n`yarn test`\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17895",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17895/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17895/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17895/events",
    "html_url": "https://github.com/facebook/react/issues/17895",
    "id": 554113672,
    "node_id": "MDU6SXNzdWU1NTQxMTM2NzI=",
    "number": 17895,
    "title": "Bug: fix BigInt in copyElementPath in react-devtools",
    "user": {
      "login": "leidegre",
      "id": 63085,
      "node_id": "MDQ6VXNlcjYzMDg1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63085?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leidegre",
      "html_url": "https://github.com/leidegre",
      "followers_url": "https://api.github.com/users/leidegre/followers",
      "following_url": "https://api.github.com/users/leidegre/following{/other_user}",
      "gists_url": "https://api.github.com/users/leidegre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leidegre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leidegre/subscriptions",
      "organizations_url": "https://api.github.com/users/leidegre/orgs",
      "repos_url": "https://api.github.com/users/leidegre/repos",
      "events_url": "https://api.github.com/users/leidegre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leidegre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-23T11:59:29Z",
    "updated_at": "2020-01-23T22:52:22Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "This is a continuation of an previous issue to add support for the BigInt data type in React DevTools.\r\n\r\nOriginal PR https://github.com/facebook/react/pull/17233 (merged)\r\n\r\nThis happens when you try to copy a BigInt value to clipboard via React DevTools.\r\n\r\n![](https://image.prntscr.com/image/c4SnNIPXR1GlSXIt49FOlw.png)\r\n\r\nWould @nutboltu mind taking a look?\r\n\r\n```\r\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\r\n    at JSON.stringify (<anonymous>)\r\n    at c (backend.js:1)\r\n    at Object.copyElementPath (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\nc @ backend.js:1\r\ncopyElementPath @ backend.js:6\r\n(anonymous) @ backend.js:6\r\nr.emit @ backend.js:6\r\n(anonymous) @ backend.js:32\r\nt @ backend.js:8\r\npostMessage (async)\r\n(anonymous) @ contentScript.js:1\r\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null\r\n    at trackError (<./app-insights/app-insights>:50)\r\n    at eval (<./app-insights/app-insights>:22)\r\ntrackError @ <./app-insights/app-insights>:50\r\neval @ <./app-insights/app-insights>:22\r\nsetTimeout (async)\r\neval @ <./app-insights/app-insights>:21\r\nerror (async)\r\ninitAppInsights @ <./app-insights/app-insights>:17\r\nmain @ VM70658 client>:101\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31\r\nasync function (async)\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27\r\n(anonymous) @ 219:3435\r\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\r\n    at JSON.stringify (<anonymous>)\r\n    at c (backend.js:1)\r\n    at Object.copyElementPath (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\nc @ backend.js:1\r\ncopyElementPath @ backend.js:6\r\n(anonymous) @ backend.js:6\r\nr.emit @ backend.js:6\r\n(anonymous) @ backend.js:32\r\nt @ backend.js:8\r\npostMessage (async)\r\n(anonymous) @ contentScript.js:1\r\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null\r\n    at trackError (<./app-insights/app-insights>:50)\r\n    at eval (<./app-insights/app-insights>:22)\r\ntrackError @ <./app-insights/app-insights>:50\r\neval @ <./app-insights/app-insights>:22\r\nsetTimeout (async)\r\neval @ <./app-insights/app-insights>:21\r\nerror (async)\r\ninitAppInsights @ <./app-insights/app-insights>:17\r\nmain @ VM70658 client>:101\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31\r\nasync function (async)\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27\r\n(anonymous) @ 219:3435\r\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\r\n    at JSON.stringify (<anonymous>)\r\n    at c (backend.js:1)\r\n    at Object.copyElementPath (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\nc @ backend.js:1\r\ncopyElementPath @ backend.js:6\r\n(anonymous) @ backend.js:6\r\nr.emit @ backend.js:6\r\n(anonymous) @ backend.js:32\r\nt @ backend.js:8\r\npostMessage (async)\r\n(anonymous) @ contentScript.js:1\r\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null\r\n    at trackError (<./app-insights/app-insights>:50)\r\n    at eval (<./app-insights/app-insights>:22)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17894",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17894/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17894/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17894/events",
    "html_url": "https://github.com/facebook/react/issues/17894",
    "id": 553946628,
    "node_id": "MDU6SXNzdWU1NTM5NDY2Mjg=",
    "number": 17894,
    "title": "Bug: button onFocus not called when focus() called from useEffect cleanup",
    "user": {
      "login": "fyodore82",
      "id": 29746153,
      "node_id": "MDQ6VXNlcjI5NzQ2MTUz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29746153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyodore82",
      "html_url": "https://github.com/fyodore82",
      "followers_url": "https://api.github.com/users/fyodore82/followers",
      "following_url": "https://api.github.com/users/fyodore82/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyodore82/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyodore82/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyodore82/subscriptions",
      "organizations_url": "https://api.github.com/users/fyodore82/orgs",
      "repos_url": "https://api.github.com/users/fyodore82/repos",
      "events_url": "https://api.github.com/users/fyodore82/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyodore82/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-23T05:30:23Z",
    "updated_at": "2020-01-23T12:01:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a `<button/>` HTML element with `onFocus` event handler defined\r\n```\r\n<button ref={btnRef} onFocus={() => console.log(\"I'm in focus\")}>Focus Target</button>\r\n```\r\n2. Have another component with `useEffect` cleanup code which will call `focus()`\r\n```\r\nReact.useEffect(() => {\r\n  const ref = btnRef.current;  // btnRef is a ref to the button component above\r\n  return () => {\r\n    console.log(\"effect cleanup \", new Date().toISOString());\r\n    ref.focus();\r\n  };\r\n}, []);\r\n```\r\n\r\nWhen the cleanup code from `useEffect` is called, `onFocus` event handler of the `button` is not called. The `button` is rendered in a component which is mounted when `useEffect` cleanup executes. For example it can be in the parent component.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/onfocus-not-called-from-useeffect-cleanup-npw7k\r\n\r\n1. Open example in browser (tested in Chrome 79.0.3945.88 and in Firefox 72.0.1).\r\n2. Open dev console\r\n3. Click on Focus target button. See another component below it with two buttons.\r\n4. Remove focus from Focus target button by setting it in adjacent input field \r\n5. Click on Set focus button. Observe that focus is set to Focus target button and in console see message 'I'm in focus...'. This message is logged from `onFocus` event handler\r\n6. Remove focus from Focus target button.\r\n7. Click Close me button. Observe that focus is set to Focus target button but no message in console from `onFocus` event handler\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`onFocus` is not called\r\n\r\n## The expected behavior\r\n`onFocus` is called"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17893",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17893/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17893/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17893/events",
    "html_url": "https://github.com/facebook/react/issues/17893",
    "id": 553833058,
    "node_id": "MDU6SXNzdWU1NTM4MzMwNTg=",
    "number": 17893,
    "title": "[react-test-renderer]: Cannot read property 'current' of undefined",
    "user": {
      "login": "sahibjotsaggu",
      "id": 8991960,
      "node_id": "MDQ6VXNlcjg5OTE5NjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8991960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sahibjotsaggu",
      "html_url": "https://github.com/sahibjotsaggu",
      "followers_url": "https://api.github.com/users/sahibjotsaggu/followers",
      "following_url": "https://api.github.com/users/sahibjotsaggu/following{/other_user}",
      "gists_url": "https://api.github.com/users/sahibjotsaggu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sahibjotsaggu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sahibjotsaggu/subscriptions",
      "organizations_url": "https://api.github.com/users/sahibjotsaggu/orgs",
      "repos_url": "https://api.github.com/users/sahibjotsaggu/repos",
      "events_url": "https://api.github.com/users/sahibjotsaggu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sahibjotsaggu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      },
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "sahibjotsaggu",
      "id": 8991960,
      "node_id": "MDQ6VXNlcjg5OTE5NjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8991960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sahibjotsaggu",
      "html_url": "https://github.com/sahibjotsaggu",
      "followers_url": "https://api.github.com/users/sahibjotsaggu/followers",
      "following_url": "https://api.github.com/users/sahibjotsaggu/following{/other_user}",
      "gists_url": "https://api.github.com/users/sahibjotsaggu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sahibjotsaggu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sahibjotsaggu/subscriptions",
      "organizations_url": "https://api.github.com/users/sahibjotsaggu/orgs",
      "repos_url": "https://api.github.com/users/sahibjotsaggu/repos",
      "events_url": "https://api.github.com/users/sahibjotsaggu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sahibjotsaggu/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "sahibjotsaggu",
        "id": 8991960,
        "node_id": "MDQ6VXNlcjg5OTE5NjA=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/8991960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sahibjotsaggu",
        "html_url": "https://github.com/sahibjotsaggu",
        "followers_url": "https://api.github.com/users/sahibjotsaggu/followers",
        "following_url": "https://api.github.com/users/sahibjotsaggu/following{/other_user}",
        "gists_url": "https://api.github.com/users/sahibjotsaggu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sahibjotsaggu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sahibjotsaggu/subscriptions",
        "organizations_url": "https://api.github.com/users/sahibjotsaggu/orgs",
        "repos_url": "https://api.github.com/users/sahibjotsaggu/repos",
        "events_url": "https://api.github.com/users/sahibjotsaggu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sahibjotsaggu/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-22T22:31:31Z",
    "updated_at": "2020-01-22T22:52:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Searched online and the only solution was to keep react, react-dom, and react-test-renderer packages the same version. I have those three packages as the same version (^16.8.6) but I'm still getting the error.\r\n\r\nReact version: 16.8.6\r\nReact DOM version: 16.8.6\r\nReact Test Renderer: 16.8.6\r\n\r\nMy test script is `jest --env=jsdom`\r\n\r\nUsing Babel v7.\r\n\r\n<img width=\"866\" alt=\"Screen Shot 2020-01-22 at 5 28 39 PM\" src=\"https://user-images.githubusercontent.com/8991960/72940334-b4ddfa80-3d3c-11ea-811c-36b8e6ad0052.png\">\r\n\r\nThis is my test code:\r\n\r\n<img width=\"401\" alt=\"Screen Shot 2020-01-22 at 5 29 39 PM\" src=\"https://user-images.githubusercontent.com/8991960/72940386-ce7f4200-3d3c-11ea-8b9b-ad98073b4fe8.png\">\r\n\r\n.babelrc:\r\n\r\n<img width=\"433\" alt=\"Screen Shot 2020-01-22 at 5 30 01 PM\" src=\"https://user-images.githubusercontent.com/8991960/72940404-db039a80-3d3c-11ea-85f1-30e71da90390.png\">\r\n\r\njest.config.js\r\n\r\n<img width=\"679\" alt=\"Screen Shot 2020-01-22 at 5 30 24 PM\" src=\"https://user-images.githubusercontent.com/8991960/72940429-e787f300-3d3c-11ea-8ed9-fcf99f4efc67.png\">\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17891",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17891/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17891/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17891/events",
    "html_url": "https://github.com/facebook/react/issues/17891",
    "id": 553674013,
    "node_id": "MDU6SXNzdWU1NTM2NzQwMTM=",
    "number": 17891,
    "title": "Bug: Cannot download experimental React build from CI",
    "user": {
      "login": "ahmehri",
      "id": 3668245,
      "node_id": "MDQ6VXNlcjM2NjgyNDU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3668245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmehri",
      "html_url": "https://github.com/ahmehri",
      "followers_url": "https://api.github.com/users/ahmehri/followers",
      "following_url": "https://api.github.com/users/ahmehri/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmehri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmehri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmehri/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmehri/orgs",
      "repos_url": "https://api.github.com/users/ahmehri/repos",
      "events_url": "https://api.github.com/users/ahmehri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmehri/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-22T17:03:39Z",
    "updated_at": "2020-01-22T17:15:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nFollowing the [instructions](https://github.com/facebook/react/tree/master/packages/react-devtools#download-from-ci) for local development of react-devtools, it's not possible to download the experimental build from CI.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Run the `./scripts/release/download-experimental-build.js` command from the root of the repository.\r\n2. The following error will be thrown\r\n```\r\nCannot read property 'build_num' of undefined\r\n\r\nTypeError: \r\n    at run (facebook/react/scripts/release/shared-commands/get-latest-master-build-number.js:21:4)\r\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\r\n    at async facebook/react/scripts/release/node_modules/progress-estimator/src/logger.js:58:27\r\n    at async run (facebook/react/scripts/release/download-experimental-build.js:21:22)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17889",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17889/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17889/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17889/events",
    "html_url": "https://github.com/facebook/react/pull/17889",
    "id": 553404369,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY1NzQyMjA1",
    "number": 17889,
    "title": "Remove call to finishHooks when doing a static render.",
    "user": {
      "login": "ijxsid",
      "id": 31647210,
      "node_id": "MDQ6VXNlcjMxNjQ3MjEw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/31647210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ijxsid",
      "html_url": "https://github.com/ijxsid",
      "followers_url": "https://api.github.com/users/ijxsid/followers",
      "following_url": "https://api.github.com/users/ijxsid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ijxsid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ijxsid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ijxsid/subscriptions",
      "organizations_url": "https://api.github.com/users/ijxsid/orgs",
      "repos_url": "https://api.github.com/users/ijxsid/repos",
      "events_url": "https://api.github.com/users/ijxsid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ijxsid/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-22T09:13:00Z",
    "updated_at": "2020-01-22T16:46:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17889",
      "html_url": "https://github.com/facebook/react/pull/17889",
      "diff_url": "https://github.com/facebook/react/pull/17889.diff",
      "patch_url": "https://github.com/facebook/react/pull/17889.patch"
    },
    "body": "<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nFixes #16416 . If you had a `renderToStaticMarkup` or `renderToString` inside the hook, it would cause all the hooks to finish and set `workInProgressHook` to `null`. In this PR, I am trying to call the `finishHooks` only when we're not doing a static markup. \r\n\r\n\r\n## Test Plan\r\nIts my first issue so I might have missed something. I ran `yarn test`, `yarn linc` and `yarn flow`, they are all passing. Also, I am not sure how to add a test for this.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17885",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17885/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17885/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17885/events",
    "html_url": "https://github.com/facebook/react/issues/17885",
    "id": 553070324,
    "node_id": "MDU6SXNzdWU1NTMwNzAzMjQ=",
    "number": 17885,
    "title": "Enable a lint rule not to define after return and fix existing callsites",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984225,
        "node_id": "MDU6TGFiZWwxNTU5ODQyMjU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20New",
        "name": "Status: New",
        "color": "006b75",
        "default": false,
        "description": null
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "M-Izadmehr",
      "id": 28848972,
      "node_id": "MDQ6VXNlcjI4ODQ4OTcy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28848972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/M-Izadmehr",
      "html_url": "https://github.com/M-Izadmehr",
      "followers_url": "https://api.github.com/users/M-Izadmehr/followers",
      "following_url": "https://api.github.com/users/M-Izadmehr/following{/other_user}",
      "gists_url": "https://api.github.com/users/M-Izadmehr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/M-Izadmehr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/M-Izadmehr/subscriptions",
      "organizations_url": "https://api.github.com/users/M-Izadmehr/orgs",
      "repos_url": "https://api.github.com/users/M-Izadmehr/repos",
      "events_url": "https://api.github.com/users/M-Izadmehr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/M-Izadmehr/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "M-Izadmehr",
        "id": 28848972,
        "node_id": "MDQ6VXNlcjI4ODQ4OTcy",
        "avatar_url": "https://avatars0.githubusercontent.com/u/28848972?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/M-Izadmehr",
        "html_url": "https://github.com/M-Izadmehr",
        "followers_url": "https://api.github.com/users/M-Izadmehr/followers",
        "following_url": "https://api.github.com/users/M-Izadmehr/following{/other_user}",
        "gists_url": "https://api.github.com/users/M-Izadmehr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/M-Izadmehr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/M-Izadmehr/subscriptions",
        "organizations_url": "https://api.github.com/users/M-Izadmehr/orgs",
        "repos_url": "https://api.github.com/users/M-Izadmehr/repos",
        "events_url": "https://api.github.com/users/M-Izadmehr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/M-Izadmehr/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-21T19:07:16Z",
    "updated_at": "2020-01-21T19:17:53Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "https://twitter.com/therealyashsriv/status/1219691914523545601\r\n\r\nWe shouldn't generate code that might cause browser or linting to complain.\r\n\r\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/legacy-events/SyntheticEvent.js#L259\r\n\r\nIt's also just a confusing pattern at best."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17883",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17883/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17883/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17883/events",
    "html_url": "https://github.com/facebook/react/issues/17883",
    "id": 553048226,
    "node_id": "MDU6SXNzdWU1NTMwNDgyMjY=",
    "number": 17883,
    "title": "Bug: onPointerEnterCapture and onPointerLeaveCapture result in `unknown event handler property`",
    "user": {
      "login": "tommedema",
      "id": 331833,
      "node_id": "MDQ6VXNlcjMzMTgzMw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/331833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tommedema",
      "html_url": "https://github.com/tommedema",
      "followers_url": "https://api.github.com/users/tommedema/followers",
      "following_url": "https://api.github.com/users/tommedema/following{/other_user}",
      "gists_url": "https://api.github.com/users/tommedema/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tommedema/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tommedema/subscriptions",
      "organizations_url": "https://api.github.com/users/tommedema/orgs",
      "repos_url": "https://api.github.com/users/tommedema/repos",
      "events_url": "https://api.github.com/users/tommedema/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tommedema/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-21T18:19:58Z",
    "updated_at": "2020-01-24T22:48:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: v16.12.0 from https://unpkg.com/react/umd/react.development.js\r\n\r\n## Steps To Reproduce\r\n\r\n1. attach onPointerEnterCapture to a JSX element\r\n2. observe `unknown event handler property` error in console\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://jsfiddle.net/tommedema/1uqoemxs/2/\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIt displays a `unknown event handler property` warning\r\n\r\n## The expected behavior\r\n\r\nThe capturing phase of the onPointerEnter and onPointerLeave events should be supported"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17881",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17881/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17881/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17881/events",
    "html_url": "https://github.com/facebook/react/issues/17881",
    "id": 553001408,
    "node_id": "MDU6SXNzdWU1NTMwMDE0MDg=",
    "number": 17881,
    "title": "Bug: standalone react devtools can't save settings",
    "user": {
      "login": "tjx666",
      "id": 41773861,
      "node_id": "MDQ6VXNlcjQxNzczODYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/41773861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjx666",
      "html_url": "https://github.com/tjx666",
      "followers_url": "https://api.github.com/users/tjx666/followers",
      "following_url": "https://api.github.com/users/tjx666/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjx666/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjx666/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjx666/subscriptions",
      "organizations_url": "https://api.github.com/users/tjx666/orgs",
      "repos_url": "https://api.github.com/users/tjx666/repos",
      "events_url": "https://api.github.com/users/tjx666/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjx666/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-21T16:50:10Z",
    "updated_at": "2020-01-22T04:50:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI don’t know if save settings are not supported in standalone react devtools, but I think it's a very basic function.\r\nI use it to debug react project in electron, the repository is [coo](https://github.com/tjx666/coo). You may need to fallback the code to commit id: 44726520aa417b82712b5a4d91e14100048f23c3\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.start standalone react devtools and set theme dark\r\n2.restart standalone react devtools, but the theme is still auto\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\ncan't save settings\r\n## The expected behavior\r\nsupport save settings\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17877",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17877/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17877/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17877/events",
    "html_url": "https://github.com/facebook/react/issues/17877",
    "id": 552711153,
    "node_id": "MDU6SXNzdWU1NTI3MTExNTM=",
    "number": 17877,
    "title": "Bug: Child event listener is called after parent's one when rendered conditionally",
    "user": {
      "login": "michalak111",
      "id": 9253631,
      "node_id": "MDQ6VXNlcjkyNTM2MzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9253631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michalak111",
      "html_url": "https://github.com/michalak111",
      "followers_url": "https://api.github.com/users/michalak111/followers",
      "following_url": "https://api.github.com/users/michalak111/following{/other_user}",
      "gists_url": "https://api.github.com/users/michalak111/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michalak111/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michalak111/subscriptions",
      "organizations_url": "https://api.github.com/users/michalak111/orgs",
      "repos_url": "https://api.github.com/users/michalak111/repos",
      "events_url": "https://api.github.com/users/michalak111/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michalak111/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-21T08:59:01Z",
    "updated_at": "2020-01-21T09:05:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "React version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\nIf we have some `Parent` component which has event listener `document.addEventListener('mousedown', cb)` in `useEffect` or `cDM` and `Children` component which is rendered conditionally with element which has a listener on `onMouseDown` too then after Child is rendered callback action on `Parent` listener is called first.\r\n\r\nLink to code example: https://codesandbox.io/s/throbbing-sun-ub2kd\r\n\r\n## The current behavior\r\n\r\nconsole.log output\r\n\r\n```\r\napp \r\nchild \r\napp \r\nchild \r\n```\r\n\r\n## The expected behavior\r\n\r\nconsole.log output\r\n```\r\nchild \r\napp \r\nchild \r\napp \r\n```\r\n\r\nNot 100% this is bug or expected - I already find a way how to hack this.\r\n\r\nBut if we treat this as a bug I've made some debugging which hopefully may be helpful (ofc I may be wrong, I'm not enough familiar with library code). \r\n\r\nAs I noticed this happens because `addEventBubbleListener` action which adds listeners to document, and in this particular situation listener to Child element is added after parents one because is rendered later on because of some users action ."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17872",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17872/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17872/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17872/events",
    "html_url": "https://github.com/facebook/react/issues/17872",
    "id": 552164654,
    "node_id": "MDU6SXNzdWU1NTIxNjQ2NTQ=",
    "number": 17872,
    "title": "Error: \"Could not find node with id \"2153\" in commit tree\"",
    "user": {
      "login": "cristinamarin22",
      "id": 15689587,
      "node_id": "MDQ6VXNlcjE1Njg5NTg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15689587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cristinamarin22",
      "html_url": "https://github.com/cristinamarin22",
      "followers_url": "https://api.github.com/users/cristinamarin22/followers",
      "following_url": "https://api.github.com/users/cristinamarin22/following{/other_user}",
      "gists_url": "https://api.github.com/users/cristinamarin22/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cristinamarin22/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cristinamarin22/subscriptions",
      "organizations_url": "https://api.github.com/users/cristinamarin22/orgs",
      "repos_url": "https://api.github.com/users/cristinamarin22/repos",
      "events_url": "https://api.github.com/users/cristinamarin22/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cristinamarin22/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "cristinamarin22",
      "id": 15689587,
      "node_id": "MDQ6VXNlcjE1Njg5NTg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15689587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cristinamarin22",
      "html_url": "https://github.com/cristinamarin22",
      "followers_url": "https://api.github.com/users/cristinamarin22/followers",
      "following_url": "https://api.github.com/users/cristinamarin22/following{/other_user}",
      "gists_url": "https://api.github.com/users/cristinamarin22/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cristinamarin22/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cristinamarin22/subscriptions",
      "organizations_url": "https://api.github.com/users/cristinamarin22/orgs",
      "repos_url": "https://api.github.com/users/cristinamarin22/repos",
      "events_url": "https://api.github.com/users/cristinamarin22/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cristinamarin22/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "cristinamarin22",
        "id": 15689587,
        "node_id": "MDQ6VXNlcjE1Njg5NTg3",
        "avatar_url": "https://avatars3.githubusercontent.com/u/15689587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cristinamarin22",
        "html_url": "https://github.com/cristinamarin22",
        "followers_url": "https://api.github.com/users/cristinamarin22/followers",
        "following_url": "https://api.github.com/users/cristinamarin22/following{/other_user}",
        "gists_url": "https://api.github.com/users/cristinamarin22/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cristinamarin22/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cristinamarin22/subscriptions",
        "organizations_url": "https://api.github.com/users/cristinamarin22/orgs",
        "repos_url": "https://api.github.com/users/cristinamarin22/repos",
        "events_url": "https://api.github.com/users/cristinamarin22/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cristinamarin22/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-20T09:09:40Z",
    "updated_at": "2020-01-20T18:38:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.4.0-f749045a5\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159909\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159855)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160378)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:323092)\r\n    at ei (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58864)\r\n    at yl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:106932)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99474)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99399)\r\n    at fc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96173)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17865",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17865/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17865/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17865/events",
    "html_url": "https://github.com/facebook/react/pull/17865",
    "id": 551688408,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY0MzY1ODgx",
    "number": 17865,
    "title": "[DO-NOT-MERGE][Native] Migrate focus/blur to call TextInputState with the host component",
    "user": {
      "login": "TheSavior",
      "id": 249164,
      "node_id": "MDQ6VXNlcjI0OTE2NA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/249164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheSavior",
      "html_url": "https://github.com/TheSavior",
      "followers_url": "https://api.github.com/users/TheSavior/followers",
      "following_url": "https://api.github.com/users/TheSavior/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheSavior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheSavior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheSavior/subscriptions",
      "organizations_url": "https://api.github.com/users/TheSavior/orgs",
      "repos_url": "https://api.github.com/users/TheSavior/repos",
      "events_url": "https://api.github.com/users/TheSavior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheSavior/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-18T00:10:59Z",
    "updated_at": "2020-01-18T00:28:07Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17865",
      "html_url": "https://github.com/facebook/react/pull/17865",
      "diff_url": "https://github.com/facebook/react/pull/17865.diff",
      "patch_url": "https://github.com/facebook/react/pull/17865.patch"
    },
    "body": "In order to make focus/blur work for Fabric we need to make event targets be a component instance instead of a react tag. \r\n\r\nThat PR has landed behind a feature flag. Before we can land this we need that to roll out completely and flip the feature flag on by default.\r\n\r\nThis PR then updates the Renderer integration with TextInputState to handle instances instead of reactTag.\r\n\r\nIn order to make that work, we have to have an instance. Which means that components with NativeMethodsMixin and ReactNative.NativeComponent will no longer be able to call `.focus` or `.blur`. This is a breaking change but we are okay with that. For Fabric components implemented with those aren't supported anyways.\r\n\r\nThis changes the HostComponents, making them pass themselves to TextInputState.\r\n\r\nAlso added tests.\r\n\r\nFor Facebook employees: \r\nThis PR will need to land and by synced in conjunction with D19458214"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17857",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17857/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17857/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17857/events",
    "html_url": "https://github.com/facebook/react/pull/17857",
    "id": 551324853,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY0MDY2NTU4",
    "number": 17857,
    "title": "chore: update istanbul-reports to remove handlebars dependency",
    "user": {
      "login": "SimenB",
      "id": 1404810,
      "node_id": "MDQ6VXNlcjE0MDQ4MTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1404810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SimenB",
      "html_url": "https://github.com/SimenB",
      "followers_url": "https://api.github.com/users/SimenB/followers",
      "following_url": "https://api.github.com/users/SimenB/following{/other_user}",
      "gists_url": "https://api.github.com/users/SimenB/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SimenB/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SimenB/subscriptions",
      "organizations_url": "https://api.github.com/users/SimenB/orgs",
      "repos_url": "https://api.github.com/users/SimenB/repos",
      "events_url": "https://api.github.com/users/SimenB/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SimenB/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-17T10:14:31Z",
    "updated_at": "2020-01-17T10:20:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17857",
      "html_url": "https://github.com/facebook/react/pull/17857",
      "diff_url": "https://github.com/facebook/react/pull/17857.diff",
      "patch_url": "https://github.com/facebook/react/pull/17857.patch"
    },
    "body": "<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nMakes `yarn audit` happier\r\n\r\n## Test Plan\r\n\r\nHTML coverage report still works"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17855",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17855/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17855/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17855/events",
    "html_url": "https://github.com/facebook/react/issues/17855",
    "id": 550945196,
    "node_id": "MDU6SXNzdWU1NTA5NDUxOTY=",
    "number": 17855,
    "title": "Bug: DevTools DOM highlighting gets stuck after a prolonged hover",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-16T17:16:35Z",
    "updated_at": "2020-01-18T02:51:27Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "## Steps To Reproduce\r\n\r\n1. Hover a component in DevTools\r\n2. *Keep hovering it for a second or so*\r\n3. Quickly move the cursor out of the DevTools without hovering anything else\r\n\r\nExpected: DOM highlighting goes away.\r\nActual: DOM highlighting gets stuck.\r\n\r\n![](https://d1sz9tkli0lfjq.cloudfront.net/items/2o2r240l0o3i1B0d1n3J/Screen%20Recording%202020-01-16%20at%2005.14%20PM.gif?v=e1a91e13)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17848",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17848/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17848/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17848/events",
    "html_url": "https://github.com/facebook/react/pull/17848",
    "id": 550322497,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYzMjQ5NjA2",
    "number": 17848,
    "title": "Fix Cannot read property 'sub' of undefined when navigating to plain-text pages",
    "user": {
      "login": "wfnuser",
      "id": 8191686,
      "node_id": "MDQ6VXNlcjgxOTE2ODY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8191686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wfnuser",
      "html_url": "https://github.com/wfnuser",
      "followers_url": "https://api.github.com/users/wfnuser/followers",
      "following_url": "https://api.github.com/users/wfnuser/following{/other_user}",
      "gists_url": "https://api.github.com/users/wfnuser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wfnuser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wfnuser/subscriptions",
      "organizations_url": "https://api.github.com/users/wfnuser/orgs",
      "repos_url": "https://api.github.com/users/wfnuser/repos",
      "events_url": "https://api.github.com/users/wfnuser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wfnuser/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-01-15T17:18:24Z",
    "updated_at": "2020-01-17T16:33:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17848",
      "html_url": "https://github.com/facebook/react/pull/17848",
      "diff_url": "https://github.com/facebook/react/pull/17848.diff",
      "patch_url": "https://github.com/facebook/react/pull/17848.patch"
    },
    "body": "This PR fixes: #17832\r\n\r\n* Still inject Global Hook Code in text/plain case. It hasn't been ignored unintentionally in #17739\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17846",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17846/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17846/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17846/events",
    "html_url": "https://github.com/facebook/react/issues/17846",
    "id": 550266030,
    "node_id": "MDU6SXNzdWU1NTAyNjYwMzA=",
    "number": 17846,
    "title": "Warning: Did not expect server HTML to contain the [first prerendered] text node \"[chinese characters]\"",
    "user": {
      "login": "Arlen22",
      "id": 439872,
      "node_id": "MDQ6VXNlcjQzOTg3Mg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/439872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arlen22",
      "html_url": "https://github.com/Arlen22",
      "followers_url": "https://api.github.com/users/Arlen22/followers",
      "following_url": "https://api.github.com/users/Arlen22/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arlen22/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arlen22/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arlen22/subscriptions",
      "organizations_url": "https://api.github.com/users/Arlen22/orgs",
      "repos_url": "https://api.github.com/users/Arlen22/repos",
      "events_url": "https://api.github.com/users/Arlen22/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arlen22/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "Arlen22",
      "id": 439872,
      "node_id": "MDQ6VXNlcjQzOTg3Mg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/439872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arlen22",
      "html_url": "https://github.com/Arlen22",
      "followers_url": "https://api.github.com/users/Arlen22/followers",
      "following_url": "https://api.github.com/users/Arlen22/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arlen22/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arlen22/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arlen22/subscriptions",
      "organizations_url": "https://api.github.com/users/Arlen22/orgs",
      "repos_url": "https://api.github.com/users/Arlen22/repos",
      "events_url": "https://api.github.com/users/Arlen22/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arlen22/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "Arlen22",
        "id": 439872,
        "node_id": "MDQ6VXNlcjQzOTg3Mg==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/439872?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Arlen22",
        "html_url": "https://github.com/Arlen22",
        "followers_url": "https://api.github.com/users/Arlen22/followers",
        "following_url": "https://api.github.com/users/Arlen22/following{/other_user}",
        "gists_url": "https://api.github.com/users/Arlen22/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Arlen22/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Arlen22/subscriptions",
        "organizations_url": "https://api.github.com/users/Arlen22/orgs",
        "repos_url": "https://api.github.com/users/Arlen22/repos",
        "events_url": "https://api.github.com/users/Arlen22/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Arlen22/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-01-15T15:41:52Z",
    "updated_at": "2020-01-22T16:49:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I don't even know where to start with this. When I inspect the source of this error, it is a very well-written section of code, but I can find almost no documentation on this problem anywhere. I don't know what causes it and short of spending the next two weeks stepping through React and Next.js, I have no way of know where to start. I thought I had fixed the problem by making FontAwesome a dynamic import, but then the text next to it through the same error. I've also had classes causing errors by not resolving to the same class names on hydration as the prerendered HTML has. I don't understand this problem and I don't know what it means. \r\n\r\nHere's my package.json, if that helps anything. This problem doesn't make any sense to me but i've been running into it since I started with next.js, but I don't know anything about it. \r\n\r\n```json\r\n{\r\n  \"name\": \"next-project\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"src/pages/index.ts\",\r\n  \"scripts\": {\r\n    \"dev\": \"rm -rf .next .expo && next dev\",\r\n    \"build\": \"next build\",\r\n    \"start\": \"next start\",\r\n    \"next\": \"next\"\r\n  },\r\n  \"author\": \"https://github.com/arlen22/\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"@expo/vector-icons\": \"^10.0.6\",\r\n    \"@unimodules/core\": \"^5.0.0\",\r\n    \"@unimodules/react-native-adapter\": \"^5.0.0\",\r\n    \"@zeit/next-css\": \"^1.0.1\",\r\n    \"babel-preset-expo\": \"^8.0.0\",\r\n    \"expo-asset\": \"^8.0.0\",\r\n    \"expo-font\": \"^8.0.0\",\r\n    \"native-base\": \"^2.13.8\",\r\n    \"next\": \"^9.1.5\",\r\n    \"next-fonts\": \"^0.19.0\",\r\n    \"next-images\": \"^1.2.0\",\r\n    \"next-progressbar\": \"^1.0.0\",\r\n    \"node-fetch\": \"^2.6.0\",\r\n    \"react\": \"^16.12.0\",\r\n    \"react-dom\": \"^16.12.0\",\r\n    \"react-icons\": \"^3.8.0\",\r\n    \"react-native-drawer-layout\": \"^2.0.0\",\r\n    \"react-native-web\": \"^0.11.7\",\r\n    \"rxjs\": \"^6.5.4\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@expo/next-adapter\": \"^2.0.0-beta.10\",\r\n    \"@types/node\": \"^12.12.18\",\r\n    \"@types/react\": \"^16.9.16\",\r\n    \"@types/react-native\": \"^0.60.25\",\r\n    \"@types/react-native-drawer-layout\": \"^1.3.5\",\r\n    \"file-loader\": \"^5.0.2\",\r\n    \"next-transpile-modules\": \"^2.3.1\",\r\n    \"typescript\": \"^3.7.3\",\r\n    \"url-loader\": \"^3.0.0\"\r\n  }\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17845",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17845/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17845/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17845/events",
    "html_url": "https://github.com/facebook/react/issues/17845",
    "id": 549950806,
    "node_id": "MDU6SXNzdWU1NDk5NTA4MDY=",
    "number": 17845,
    "title": "Bug: Uncaught TypeError: Cannot read property 'nextSibling' of null",
    "user": {
      "login": "bethanyaconnor",
      "id": 46464143,
      "node_id": "MDQ6VXNlcjQ2NDY0MTQz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46464143?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bethanyaconnor",
      "html_url": "https://github.com/bethanyaconnor",
      "followers_url": "https://api.github.com/users/bethanyaconnor/followers",
      "following_url": "https://api.github.com/users/bethanyaconnor/following{/other_user}",
      "gists_url": "https://api.github.com/users/bethanyaconnor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bethanyaconnor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bethanyaconnor/subscriptions",
      "organizations_url": "https://api.github.com/users/bethanyaconnor/orgs",
      "repos_url": "https://api.github.com/users/bethanyaconnor/repos",
      "events_url": "https://api.github.com/users/bethanyaconnor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bethanyaconnor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-15T03:56:28Z",
    "updated_at": "2020-01-19T18:06:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I am using [react-rehype](https://github.com/rehypejs/rehype-react) (latest version) to parse and format Markdown content that is continuously updating based on user input. On certain changes, particularly the creation of list items, I get an error message `Uncaught TypeError: Cannot read property 'nextSibling' of null`.\r\n\r\nBefore I see the error message in the console, I see an unclosed comment tag when I inspect the element that is rendering the formatted text:\r\n![Screenshot 2020-01-13 at 9 59 45 AM](https://user-images.githubusercontent.com/46464143/72378704-c54ffe80-36c6-11ea-8a7f-ffa0918146d4.png)\r\n\r\nThe stack trace is all within React code:\r\n![Screenshot 2020-01-13 at 9 57 33 AM](https://user-images.githubusercontent.com/46464143/72378741-d7ca3800-36c6-11ea-9aac-50d9ca13e0ea.png)\r\n\r\nReact version: 15.6.0\r\n\r\n## Steps To Reproduce \r\n\r\nSmall repo with repro steps is at: https://github.com/bethanyaconnor/rehype-react-bug\r\n\r\n## The current behavior\r\nEventually, the component crashes in React code that updates the component on state change.\r\n\r\n## The expected behavior\r\nThere is no JS errors/crashes.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17840",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17840/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17840/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17840/events",
    "html_url": "https://github.com/facebook/react/pull/17840",
    "id": 549842275,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYyODU4MzE3",
    "number": 17840,
    "title": "[Fresh] Support DevTools v3",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-01-14T21:57:48Z",
    "updated_at": "2020-01-23T22:22:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17840",
      "html_url": "https://github.com/facebook/react/pull/17840",
      "diff_url": "https://github.com/facebook/react/pull/17840.diff",
      "patch_url": "https://github.com/facebook/react/pull/17840.patch"
    },
    "body": "I haven't verified but I think this would fix the issue we've seen with the old version of the global hook."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17834",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17834/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17834/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17834/events",
    "html_url": "https://github.com/facebook/react/pull/17834",
    "id": 549590654,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYyNjUzODQy",
    "number": 17834,
    "title": "[fail] move IsThisRendererActing to own namespace",
    "user": {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-01-14T14:06:45Z",
    "updated_at": "2020-01-15T03:10:58Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17834",
      "html_url": "https://github.com/facebook/react/pull/17834",
      "diff_url": "https://github.com/facebook/react/pull/17834.diff",
      "patch_url": "https://github.com/facebook/react/pull/17834.patch"
    },
    "body": "The `Events` namespace on the secret object might be disappearing, so `IsThisRendererActing` can't live on it anymore. This PR -\r\n- moves `IsThisRendererActing` from `ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Events` to `ReactDOM....Tests` \r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17832",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17832/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17832/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17832/events",
    "html_url": "https://github.com/facebook/react/issues/17832",
    "id": 549445954,
    "node_id": "MDU6SXNzdWU1NDk0NDU5NTQ=",
    "number": 17832,
    "title": "[react-devtools-extensions] Bug: Uncaught TypeError: Cannot read property 'sub' of undefined when navigating to plain-text pages",
    "user": {
      "login": "ivan-aksamentov",
      "id": 9403403,
      "node_id": "MDQ6VXNlcjk0MDM0MDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9403403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivan-aksamentov",
      "html_url": "https://github.com/ivan-aksamentov",
      "followers_url": "https://api.github.com/users/ivan-aksamentov/followers",
      "following_url": "https://api.github.com/users/ivan-aksamentov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivan-aksamentov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivan-aksamentov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivan-aksamentov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivan-aksamentov/orgs",
      "repos_url": "https://api.github.com/users/ivan-aksamentov/repos",
      "events_url": "https://api.github.com/users/ivan-aksamentov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivan-aksamentov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "wfnuser",
      "id": 8191686,
      "node_id": "MDQ6VXNlcjgxOTE2ODY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8191686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wfnuser",
      "html_url": "https://github.com/wfnuser",
      "followers_url": "https://api.github.com/users/wfnuser/followers",
      "following_url": "https://api.github.com/users/wfnuser/following{/other_user}",
      "gists_url": "https://api.github.com/users/wfnuser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wfnuser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wfnuser/subscriptions",
      "organizations_url": "https://api.github.com/users/wfnuser/orgs",
      "repos_url": "https://api.github.com/users/wfnuser/repos",
      "events_url": "https://api.github.com/users/wfnuser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wfnuser/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "wfnuser",
        "id": 8191686,
        "node_id": "MDQ6VXNlcjgxOTE2ODY=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/8191686?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wfnuser",
        "html_url": "https://github.com/wfnuser",
        "followers_url": "https://api.github.com/users/wfnuser/followers",
        "following_url": "https://api.github.com/users/wfnuser/following{/other_user}",
        "gists_url": "https://api.github.com/users/wfnuser/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wfnuser/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wfnuser/subscriptions",
        "organizations_url": "https://api.github.com/users/wfnuser/orgs",
        "repos_url": "https://api.github.com/users/wfnuser/repos",
        "events_url": "https://api.github.com/users/wfnuser/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wfnuser/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-01-14T09:43:10Z",
    "updated_at": "2020-01-16T16:52:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact Developer Tools: 4.4.0 f749045a5 (1/3/2020) from chrome webstore\r\nChromium: 81.0.4024.0 snapshot\r\nUbuntu: 18.04\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open chrome with React Developer Tools installed\r\n2. Open developer console\r\n3. In console settings (cogwheel in console's top right corner)  check \"Preserve log\" checkbox (to make sure that the log is not overwritten on navigation)\r\n4. Navigate to a React-enabled website, e.g. `https://reactjs.org`\r\n5. Navigate to a plain-text page, such as `https://reactjs.org/robots.txt`\r\n\r\n## The current behavior\r\n\r\nError is printed in console:\r\n\r\n```\r\nbackend.js:32 Uncaught TypeError: Cannot read property 'sub' of undefined\r\n    at g (backend.js:32)\r\n    at e (backend.js:8)\r\ng @ backend.js:32\r\ne @ backend.js:8\r\npostMessage (async)\r\na @ contentScript.js:1\r\n117 @ contentScript.js:1\r\nn @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\n\r\n```\r\nwhere `backend.js` is a link to `chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js`\r\n\r\n`fmkadmapgofadopljbjfkapdkoienihi` is an ID of React Developer Tools: I verified by opening `chrome://extensions/` and performing page search for this ID.\r\n\r\n\r\n## The expected behavior\r\n\r\nNo errors\r\n\r\n## Notes\r\n\r\nIt's a convoluted usecase, but I thought it may help to catch bugs for more important ones. \r\n\r\nI am not sure whether it's plain-text-ness of the page that is important, but that's how you can reproduce it.\r\n\r\nThe hypothesis is that dev tools do not expect HTML tree to disappear on navigation, or either extension enters a state where it cannot digest the plain text pages (and it probably shouldn't try).\r\n\r\n\r\n<sup>\r\nP.S. Thanks for the refreshed extension, it makes dev experience so wonderful! ❤️ \r\n</sup>"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17831",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17831/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17831/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17831/events",
    "html_url": "https://github.com/facebook/react/issues/17831",
    "id": 549309266,
    "node_id": "MDU6SXNzdWU1NDkzMDkyNjY=",
    "number": 17831,
    "title": "Bug: I shouldn't own the DOM fixtures website",
    "user": {
      "login": "nhunzaker",
      "id": 590904,
      "node_id": "MDQ6VXNlcjU5MDkwNA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhunzaker",
      "html_url": "https://github.com/nhunzaker",
      "followers_url": "https://api.github.com/users/nhunzaker/followers",
      "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
      "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
      "repos_url": "https://api.github.com/users/nhunzaker/repos",
      "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-14T03:27:48Z",
    "updated_at": "2020-01-15T19:19:46Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "body": "Some folks at Google are helping us to think through some ideas to help our input code be more sane, and we discovered that our DOM Text Fixtures site (http://react-dom-fixtures.surge.sh) was both:\r\n\r\n- _Very_ out of date\r\n- Owned by me\r\n\r\nBoth seem fixable. However I think a good first start is to figure out a way to publicly host the fixtures where I am not a bottleneck.\r\n\r\nWhat do you think? Could we setup a deploy process - maybe with netlify - to deploy the fixtures automatically?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17825",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17825/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17825/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17825/events",
    "html_url": "https://github.com/facebook/react/pull/17825",
    "id": 548632649,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYxODc1MDY4",
    "number": 17825,
    "title": "Grammar fix",
    "user": {
      "login": "haseebdaone",
      "id": 28718124,
      "node_id": "MDQ6VXNlcjI4NzE4MTI0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28718124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haseebdaone",
      "html_url": "https://github.com/haseebdaone",
      "followers_url": "https://api.github.com/users/haseebdaone/followers",
      "following_url": "https://api.github.com/users/haseebdaone/following{/other_user}",
      "gists_url": "https://api.github.com/users/haseebdaone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haseebdaone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haseebdaone/subscriptions",
      "organizations_url": "https://api.github.com/users/haseebdaone/orgs",
      "repos_url": "https://api.github.com/users/haseebdaone/repos",
      "events_url": "https://api.github.com/users/haseebdaone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haseebdaone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-12T21:50:24Z",
    "updated_at": "2020-01-23T20:16:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17825",
      "html_url": "https://github.com/facebook/react/pull/17825",
      "diff_url": "https://github.com/facebook/react/pull/17825.diff",
      "patch_url": "https://github.com/facebook/react/pull/17825.patch"
    },
    "body": "Just going through the source to get a better understanding of React and saw a grammar mistake.\r\n\r\nreplaced 'add' with 'subtract'"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17812",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17812/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17812/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17812/events",
    "html_url": "https://github.com/facebook/react/issues/17812",
    "id": 547566125,
    "node_id": "MDU6SXNzdWU1NDc1NjYxMjU=",
    "number": 17812,
    "title": "Get Dom Element by Component Name",
    "user": {
      "login": "bradenhs",
      "id": 22484684,
      "node_id": "MDQ6VXNlcjIyNDg0Njg0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/22484684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bradenhs",
      "html_url": "https://github.com/bradenhs",
      "followers_url": "https://api.github.com/users/bradenhs/followers",
      "following_url": "https://api.github.com/users/bradenhs/following{/other_user}",
      "gists_url": "https://api.github.com/users/bradenhs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bradenhs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bradenhs/subscriptions",
      "organizations_url": "https://api.github.com/users/bradenhs/orgs",
      "repos_url": "https://api.github.com/users/bradenhs/repos",
      "events_url": "https://api.github.com/users/bradenhs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bradenhs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-09T15:56:37Z",
    "updated_at": "2020-01-09T18:59:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nReact dev tools has the very useful \"inspect dom node\" feature that ties a component in your tree to its particular dom node.\r\n\r\n**What is the expected behavior?**\r\n\r\nIn e2e testing scenarios using tools such as cypress I often find myself sprinkling data test id attributes throughout my code to select certain elements with which to do various assertions. I've found that these test id attributes closely mirror the component hierarchy. Instead of needing to declare this essentially duplicate information it would be useful if there was a utility which allowed me to programmatically retrieve a dom node that corresponds to a particular component's name for testing purposes. Ideally, this would essentially mirror the functionality of the \"inspect dom node\" feature in react dev tools.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17798",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17798/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17798/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17798/events",
    "html_url": "https://github.com/facebook/react/pull/17798",
    "id": 546454274,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYwMTI4NjU2",
    "number": 17798,
    "title": "Rename internal fields",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-07T19:05:08Z",
    "updated_at": "2020-01-14T23:24:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17798",
      "html_url": "https://github.com/facebook/react/pull/17798",
      "diff_url": "https://github.com/facebook/react/pull/17798.diff",
      "patch_url": "https://github.com/facebook/react/pull/17798.patch"
    },
    "body": "One day we'll use private fields for this but until then I'm just going to rename these every version until people get the hint.\r\n\r\nThis is actually better than if we change fields while keeping the same name. Because at least this will fail early (and often bailout) where as once found, people tend to assume that the data structure is there and as such throws random  errors to users."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17794",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17794/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17794/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17794/events",
    "html_url": "https://github.com/facebook/react/issues/17794",
    "id": 546192748,
    "node_id": "MDU6SXNzdWU1NDYxOTI3NDg=",
    "number": 17794,
    "title": "flushPassiveEffects and IsThisRendererActing are on the wrong \"secret\" object",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 139734344,
        "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
        "name": "Component: Test Utils",
        "color": "eb6420",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "threepointone",
        "id": 18808,
        "node_id": "MDQ6VXNlcjE4ODA4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/threepointone",
        "html_url": "https://github.com/threepointone",
        "followers_url": "https://api.github.com/users/threepointone/followers",
        "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
        "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
        "organizations_url": "https://api.github.com/users/threepointone/orgs",
        "repos_url": "https://api.github.com/users/threepointone/repos",
        "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
        "received_events_url": "https://api.github.com/users/threepointone/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-07T10:06:09Z",
    "updated_at": "2020-01-08T19:07:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "They're currently attached to the \"Events\" namespace but they don't have anything to do with events. It needs to move to its own names on the secret object.\r\n\r\nOnce we delete Events, after ReactTestUtils and RNW are fixed, then we won't be able to clean up the array because these two are on it.\r\n\r\nAdditionally the IsSomeRendererActing field is in the production bundles.\r\n\r\nWe need to make all of these DEV-only."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17779",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17779/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17779/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17779/events",
    "html_url": "https://github.com/facebook/react/issues/17779",
    "id": 545317342,
    "node_id": "MDU6SXNzdWU1NDUzMTczNDI=",
    "number": 17779,
    "title": "SuspenseList tail property not working on re-renders",
    "user": {
      "login": "kmurgic",
      "id": 36178802,
      "node_id": "MDQ6VXNlcjM2MTc4ODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/36178802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kmurgic",
      "html_url": "https://github.com/kmurgic",
      "followers_url": "https://api.github.com/users/kmurgic/followers",
      "following_url": "https://api.github.com/users/kmurgic/following{/other_user}",
      "gists_url": "https://api.github.com/users/kmurgic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kmurgic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kmurgic/subscriptions",
      "organizations_url": "https://api.github.com/users/kmurgic/orgs",
      "repos_url": "https://api.github.com/users/kmurgic/repos",
      "events_url": "https://api.github.com/users/kmurgic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kmurgic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-04T18:44:35Z",
    "updated_at": "2020-01-09T20:04:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI am reporting a possible bug or otherwise requesting clarification.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen a component with a SuspenseList re-renders (such as when it is is passed a new resource), the SuspenseList component still  respects the revealOrder=\"forwards\" or revealOrder=\"backwards\" prop but does not respect the tail=\"collapsed\" or tail=\"hidden\" prop.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/exciting-cherry-g9uc9\r\n\r\nIn order to see bug: \r\n1) Refresh the Code Sandbox browser and see that \"Loading profile...\" displays and \"Loading posts...\" does not due to the tail being collapsed.  This is the expected behavior.\r\n2) Press the \"Next\" button.  Both \"Loading Profile...\" and \"Loading posts...\" display.  The tail is no longer collapsed.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behavior would be for the tail to be collapsed when pressing the \"Next\" button. \"Loading profile...\" should be displayed, but not \"Loading posts...\"\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis affects only the experimental Concurrent Mode build of React.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17744",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17744/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17744/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17744/events",
    "html_url": "https://github.com/facebook/react/pull/17744",
    "id": 543947506,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU4MTY1NjQy",
    "number": 17744,
    "title": "More clear hooks warning for why a function is not considered as a component",
    "user": {
      "login": "Nilomiranda",
      "id": 25915040,
      "node_id": "MDQ6VXNlcjI1OTE1MDQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25915040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nilomiranda",
      "html_url": "https://github.com/Nilomiranda",
      "followers_url": "https://api.github.com/users/Nilomiranda/followers",
      "following_url": "https://api.github.com/users/Nilomiranda/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nilomiranda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nilomiranda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nilomiranda/subscriptions",
      "organizations_url": "https://api.github.com/users/Nilomiranda/orgs",
      "repos_url": "https://api.github.com/users/Nilomiranda/repos",
      "events_url": "https://api.github.com/users/Nilomiranda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nilomiranda/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-30T17:04:43Z",
    "updated_at": "2019-12-31T14:54:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17744",
      "html_url": "https://github.com/facebook/react/pull/17744",
      "diff_url": "https://github.com/facebook/react/pull/17744.diff",
      "patch_url": "https://github.com/facebook/react/pull/17744.patch"
    },
    "body": "This fixes the issue #17736"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17741",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17741/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17741/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17741/events",
    "html_url": "https://github.com/facebook/react/issues/17741",
    "id": 543535487,
    "node_id": "MDU6SXNzdWU1NDM1MzU0ODc=",
    "number": 17741,
    "title": "hydrate SVG error: Expected server HTML to contain a matching <clipPath> in <svg>",
    "user": {
      "login": "benbot",
      "id": 1340967,
      "node_id": "MDQ6VXNlcjEzNDA5Njc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1340967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benbot",
      "html_url": "https://github.com/benbot",
      "followers_url": "https://api.github.com/users/benbot/followers",
      "following_url": "https://api.github.com/users/benbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/benbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benbot/subscriptions",
      "organizations_url": "https://api.github.com/users/benbot/orgs",
      "repos_url": "https://api.github.com/users/benbot/repos",
      "events_url": "https://api.github.com/users/benbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-29T19:33:12Z",
    "updated_at": "2020-01-07T06:22:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems like `ReactDOM.hydrate` doesn't play nice with certain kinds of inline SVGs.\r\nSpecifically ones that have `clipPath`s\r\n\r\nWhen nextjs tries calling hydrate on a page with one of these SVGs, the offending part of the svg flashes quickly then react throws this error to the console.\r\n\r\n```\r\nExpected server HTML to contain a matching <clipPath> in <svg>.\r\n```\r\n\r\nI have a very small example of this happening here https://github.com/Delray-Devs/site/tree/brokenSVG\r\n\r\nThe strange part is when next builds the site statically it all works.\r\n\r\nI originally opened this issue on zeit/nextjs, but @timneutkens suggested I open the issue here.\r\n\r\nSee https://github.com/zeit/next.js/issues/9871 for all the details.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe SVG containing the `clipPath` gets rendered correctly on the client side.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.12, not sure about previous versions\r\nBrowser: Firefox and Chrome\r\nOS: macOS\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17736",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17736/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17736/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17736/events",
    "html_url": "https://github.com/facebook/react/issues/17736",
    "id": 543341123,
    "node_id": "MDU6SXNzdWU1NDMzNDExMjM=",
    "number": 17736,
    "title": "More clear hooks warning for why a function is not considered as a component",
    "user": {
      "login": "aditya81070",
      "id": 30300772,
      "node_id": "MDQ6VXNlcjMwMzAwNzcy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/30300772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aditya81070",
      "html_url": "https://github.com/aditya81070",
      "followers_url": "https://api.github.com/users/aditya81070/followers",
      "following_url": "https://api.github.com/users/aditya81070/following{/other_user}",
      "gists_url": "https://api.github.com/users/aditya81070/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aditya81070/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aditya81070/subscriptions",
      "organizations_url": "https://api.github.com/users/aditya81070/orgs",
      "repos_url": "https://api.github.com/users/aditya81070/repos",
      "events_url": "https://api.github.com/users/aditya81070/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aditya81070/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1249821345,
        "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
        "name": "Component: ESLint Rules",
        "color": "f7afdb",
        "default": false,
        "description": ""
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "yadejo",
      "id": 5558600,
      "node_id": "MDQ6VXNlcjU1NTg2MDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5558600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yadejo",
      "html_url": "https://github.com/yadejo",
      "followers_url": "https://api.github.com/users/yadejo/followers",
      "following_url": "https://api.github.com/users/yadejo/following{/other_user}",
      "gists_url": "https://api.github.com/users/yadejo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yadejo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yadejo/subscriptions",
      "organizations_url": "https://api.github.com/users/yadejo/orgs",
      "repos_url": "https://api.github.com/users/yadejo/repos",
      "events_url": "https://api.github.com/users/yadejo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yadejo/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "yadejo",
        "id": 5558600,
        "node_id": "MDQ6VXNlcjU1NTg2MDA=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/5558600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yadejo",
        "html_url": "https://github.com/yadejo",
        "followers_url": "https://api.github.com/users/yadejo/followers",
        "following_url": "https://api.github.com/users/yadejo/following{/other_user}",
        "gists_url": "https://api.github.com/users/yadejo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/yadejo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yadejo/subscriptions",
        "organizations_url": "https://api.github.com/users/yadejo/orgs",
        "repos_url": "https://api.github.com/users/yadejo/repos",
        "events_url": "https://api.github.com/users/yadejo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/yadejo/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "Nilomiranda",
        "id": 25915040,
        "node_id": "MDQ6VXNlcjI1OTE1MDQw",
        "avatar_url": "https://avatars2.githubusercontent.com/u/25915040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Nilomiranda",
        "html_url": "https://github.com/Nilomiranda",
        "followers_url": "https://api.github.com/users/Nilomiranda/followers",
        "following_url": "https://api.github.com/users/Nilomiranda/following{/other_user}",
        "gists_url": "https://api.github.com/users/Nilomiranda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Nilomiranda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Nilomiranda/subscriptions",
        "organizations_url": "https://api.github.com/users/Nilomiranda/orgs",
        "repos_url": "https://api.github.com/users/Nilomiranda/repos",
        "events_url": "https://api.github.com/users/Nilomiranda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Nilomiranda/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-12-29T08:59:01Z",
    "updated_at": "2020-01-15T17:08:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*bug*\r\n**What is the current behavior?**\r\nIn current behaviour, I can create a functional component that starts with lowercase and I can use it by importing it with the uppercase name. But if I start using hooks in this lowercase named component, React will give error `React Hook \"useState\" is called in function \"login\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nReproduce bug [here](https://codesandbox.io/s/cranky-darwin-rnh4y)\r\n**What is the expected behavior?**\r\nThe expected behaviour is that I should get a warning at the first point when I am creating a component which starts with lowercase and if I am using hooks into a functional component that starts with lowercase then it should give useful warning something like `start component with uppercase`.\r\n\r\nI  know as a developer that I should always start my component with Uppercase letter. But if by mistake someone creates a component with a lowercase letter and tries to use hooks, he will have no clue what is wrong with his code.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\"react\": \"^16.12.0\",\r\n\"react-dom\": \"^16.12.0\",\r\n\"react-scripts\": \"3.3.0\"\r\nChrome: 79.0.3945.88 (Official Build) (64-bit)\r\nOS: Ubuntu 18.04.3 LTS x86_64"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17719",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17719/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17719/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17719/events",
    "html_url": "https://github.com/facebook/react/issues/17719",
    "id": 542645070,
    "node_id": "MDU6SXNzdWU1NDI2NDUwNzA=",
    "number": 17719,
    "title": "[DevTools] Cannot type into search box in Firefox when browser find-as-you-type setting enabled",
    "user": {
      "login": "swrobel",
      "id": 157270,
      "node_id": "MDQ6VXNlcjE1NzI3MA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/157270?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/swrobel",
      "html_url": "https://github.com/swrobel",
      "followers_url": "https://api.github.com/users/swrobel/followers",
      "following_url": "https://api.github.com/users/swrobel/following{/other_user}",
      "gists_url": "https://api.github.com/users/swrobel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/swrobel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/swrobel/subscriptions",
      "organizations_url": "https://api.github.com/users/swrobel/orgs",
      "repos_url": "https://api.github.com/users/swrobel/repos",
      "events_url": "https://api.github.com/users/swrobel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/swrobel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "M-Izadmehr",
      "id": 28848972,
      "node_id": "MDQ6VXNlcjI4ODQ4OTcy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28848972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/M-Izadmehr",
      "html_url": "https://github.com/M-Izadmehr",
      "followers_url": "https://api.github.com/users/M-Izadmehr/followers",
      "following_url": "https://api.github.com/users/M-Izadmehr/following{/other_user}",
      "gists_url": "https://api.github.com/users/M-Izadmehr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/M-Izadmehr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/M-Izadmehr/subscriptions",
      "organizations_url": "https://api.github.com/users/M-Izadmehr/orgs",
      "repos_url": "https://api.github.com/users/M-Izadmehr/repos",
      "events_url": "https://api.github.com/users/M-Izadmehr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/M-Izadmehr/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "M-Izadmehr",
        "id": 28848972,
        "node_id": "MDQ6VXNlcjI4ODQ4OTcy",
        "avatar_url": "https://avatars0.githubusercontent.com/u/28848972?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/M-Izadmehr",
        "html_url": "https://github.com/M-Izadmehr",
        "followers_url": "https://api.github.com/users/M-Izadmehr/followers",
        "following_url": "https://api.github.com/users/M-Izadmehr/following{/other_user}",
        "gists_url": "https://api.github.com/users/M-Izadmehr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/M-Izadmehr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/M-Izadmehr/subscriptions",
        "organizations_url": "https://api.github.com/users/M-Izadmehr/orgs",
        "repos_url": "https://api.github.com/users/M-Izadmehr/repos",
        "events_url": "https://api.github.com/users/M-Izadmehr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/M-Izadmehr/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-12-26T18:58:57Z",
    "updated_at": "2020-01-19T18:08:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n1. Enable Firefox Preferences > Browsing > Search for text when you start typing\r\n<img width=\"455\" alt=\"Screen Shot 2019-12-26 at 10 56 15 AM\" src=\"https://user-images.githubusercontent.com/157270/71487107-65a0ba80-27ce-11ea-967c-4e9271ae4c22.png\">\r\n1. Open React Devtools\r\n1. Note that you can paste text into the search box, but keyboard input will not show any input\r\n1. Disable above setting\r\n1. Note that Devtools search accepts keyboard input\r\n\r\n**What is the expected behavior?**\r\n1. Components search works regardless of find-as-you-type setting\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nFirefox 72.0b10 on macOS 10.14.6\r\nDevtools 4.3.0"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17703",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17703/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17703/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17703/events",
    "html_url": "https://github.com/facebook/react/pull/17703",
    "id": 542136071,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU2NjQxMDk3",
    "number": 17703,
    "title": "chore: Refactor DangerJS",
    "user": {
      "login": "gabrielferreiraa",
      "id": 17201177,
      "node_id": "MDQ6VXNlcjE3MjAxMTc3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17201177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gabrielferreiraa",
      "html_url": "https://github.com/gabrielferreiraa",
      "followers_url": "https://api.github.com/users/gabrielferreiraa/followers",
      "following_url": "https://api.github.com/users/gabrielferreiraa/following{/other_user}",
      "gists_url": "https://api.github.com/users/gabrielferreiraa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gabrielferreiraa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gabrielferreiraa/subscriptions",
      "organizations_url": "https://api.github.com/users/gabrielferreiraa/orgs",
      "repos_url": "https://api.github.com/users/gabrielferreiraa/repos",
      "events_url": "https://api.github.com/users/gabrielferreiraa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gabrielferreiraa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-24T13:52:43Z",
    "updated_at": "2020-01-13T16:46:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17703",
      "html_url": "https://github.com/facebook/react/pull/17703",
      "diff_url": "https://github.com/facebook/react/pull/17703.diff",
      "patch_url": "https://github.com/facebook/react/pull/17703.patch"
    },
    "body": "- Removing unnecessary `else`\r\n- Create aux function to check experimental release channel\r\n- Import space"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17700",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17700/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17700/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17700/events",
    "html_url": "https://github.com/facebook/react/pull/17700",
    "id": 542003584,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU2NTMxMzI0",
    "number": 17700,
    "title": "[react-test-renderer] Fix `findByType` broken for SimpleMemoComponent",
    "user": {
      "login": "kevin940726",
      "id": 7753001,
      "node_id": "MDQ6VXNlcjc3NTMwMDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7753001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin940726",
      "html_url": "https://github.com/kevin940726",
      "followers_url": "https://api.github.com/users/kevin940726/followers",
      "following_url": "https://api.github.com/users/kevin940726/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin940726/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin940726/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin940726/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin940726/orgs",
      "repos_url": "https://api.github.com/users/kevin940726/repos",
      "events_url": "https://api.github.com/users/kevin940726/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin940726/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-24T06:01:21Z",
    "updated_at": "2019-12-24T06:07:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17700",
      "html_url": "https://github.com/facebook/react/pull/17700",
      "diff_url": "https://github.com/facebook/react/pull/17700.diff",
      "patch_url": "https://github.com/facebook/react/pull/17700.patch"
    },
    "body": "Fix #17301 .\r\n\r\nThe fix is simply check if the `tag` of the fiber node is `SimpleMemoComponent`, and check the `elementType` instead of `type`.\r\n\r\nI'm not fully understand the difference between `elementType` and `type` in test-renderer though, looks like if we changed to always get the `elementType` instead of `type` would also work? Maybe it has something to do with `Lazy` and `Suspense`, but AFAIK `react-test-renderer` currently doesn't support them."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17681",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17681/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17681/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17681/events",
    "html_url": "https://github.com/facebook/react/issues/17681",
    "id": 541129194,
    "node_id": "MDU6SXNzdWU1NDExMjkxOTQ=",
    "number": 17681,
    "title": "Re-enable context menu options in Firefox",
    "user": {
      "login": "jasonLaster",
      "id": 254562,
      "node_id": "MDQ6VXNlcjI1NDU2Mg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/254562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasonLaster",
      "html_url": "https://github.com/jasonLaster",
      "followers_url": "https://api.github.com/users/jasonLaster/followers",
      "following_url": "https://api.github.com/users/jasonLaster/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasonLaster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasonLaster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasonLaster/subscriptions",
      "organizations_url": "https://api.github.com/users/jasonLaster/orgs",
      "repos_url": "https://api.github.com/users/jasonLaster/repos",
      "events_url": "https://api.github.com/users/jasonLaster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasonLaster/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "jasonLaster",
        "id": 254562,
        "node_id": "MDQ6VXNlcjI1NDU2Mg==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/254562?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonLaster",
        "html_url": "https://github.com/jasonLaster",
        "followers_url": "https://api.github.com/users/jasonLaster/followers",
        "following_url": "https://api.github.com/users/jasonLaster/following{/other_user}",
        "gists_url": "https://api.github.com/users/jasonLaster/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jasonLaster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jasonLaster/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonLaster/orgs",
        "repos_url": "https://api.github.com/users/jasonLaster/repos",
        "events_url": "https://api.github.com/users/jasonLaster/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jasonLaster/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 19,
    "created_at": "2019-12-20T18:12:28Z",
    "updated_at": "2020-01-16T16:59:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "#17668 disabled support for \"copy to clipboard\" and \"go to definition\" context menu items in Firefox. \r\n\r\nUse cases\r\n\r\n- [x] copy to clipboard (#17740)\r\n- [x] jump to element node (blocked by Firefox bugs [1605597](https://bugzilla.mozilla.org/show_bug.cgi?id=1605597), [1609671](https://bugzilla.mozilla.org/show_bug.cgi?id=1609671), [1609677](https://bugzilla.mozilla.org/show_bug.cgi?id=1609677))\r\n- [x] jump to function definition (blocked by Firefox bugs [1605597](https://bugzilla.mozilla.org/show_bug.cgi?id=1605597), [1609671](https://bugzilla.mozilla.org/show_bug.cgi?id=1609671), [1609677](https://bugzilla.mozilla.org/show_bug.cgi?id=1609677))"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17675",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17675/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17675/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17675/events",
    "html_url": "https://github.com/facebook/react/pull/17675",
    "id": 540775636,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU1NTQxNTk4",
    "number": 17675,
    "title": "Fix onMouseEnter is fired on disabled buttons",
    "user": {
      "login": "AlfredoGJ",
      "id": 19152108,
      "node_id": "MDQ6VXNlcjE5MTUyMTA4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19152108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlfredoGJ",
      "html_url": "https://github.com/AlfredoGJ",
      "followers_url": "https://api.github.com/users/AlfredoGJ/followers",
      "following_url": "https://api.github.com/users/AlfredoGJ/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlfredoGJ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlfredoGJ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlfredoGJ/subscriptions",
      "organizations_url": "https://api.github.com/users/AlfredoGJ/orgs",
      "repos_url": "https://api.github.com/users/AlfredoGJ/repos",
      "events_url": "https://api.github.com/users/AlfredoGJ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlfredoGJ/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-20T05:42:01Z",
    "updated_at": "2020-01-23T22:00:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17675",
      "html_url": "https://github.com/facebook/react/pull/17675",
      "diff_url": "https://github.com/facebook/react/pull/17675.diff",
      "patch_url": "https://github.com/facebook/react/pull/17675.patch"
    },
    "body": "This pull request fixes issue #17229. I modified `shouldPreventMouseEvent` function to include `onMouseEnter` and added a new test to `ReactBrowserEventEmmiter-test`."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17669",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17669/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17669/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17669/events",
    "html_url": "https://github.com/facebook/react/pull/17669",
    "id": 540633902,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU1NDE3NDY4",
    "number": 17669,
    "title": "Refactor Expiration Time Model",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-19T23:15:49Z",
    "updated_at": "2020-01-10T22:57:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17669",
      "html_url": "https://github.com/facebook/react/pull/17669",
      "diff_url": "https://github.com/facebook/react/pull/17669.diff",
      "patch_url": "https://github.com/facebook/react/pull/17669.patch"
    },
    "body": "## Based on #17418\r\n\r\nStack of changes to replace our \"expiration time\" model with something better.\r\n\r\n- [x] Decouple expiration times from transition timeouts"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17651",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17651/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17651/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17651/events",
    "html_url": "https://github.com/facebook/react/pull/17651",
    "id": 539868339,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0NzY5ODY1",
    "number": 17651,
    "title": "[react-interactions] Add Listener API + useEvent hook",
    "user": {
      "login": "trueadm",
      "id": 1519870,
      "node_id": "MDQ6VXNlcjE1MTk4NzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trueadm",
      "html_url": "https://github.com/trueadm",
      "followers_url": "https://api.github.com/users/trueadm/followers",
      "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
      "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
      "organizations_url": "https://api.github.com/users/trueadm/orgs",
      "repos_url": "https://api.github.com/users/trueadm/repos",
      "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trueadm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 39,
    "created_at": "2019-12-18T19:19:12Z",
    "updated_at": "2020-01-17T22:09:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17651",
      "html_url": "https://github.com/facebook/react/pull/17651",
      "diff_url": "https://github.com/facebook/react/pull/17651.diff",
      "patch_url": "https://github.com/facebook/react/pull/17651.patch"
    },
    "body": "Note: This API is intentionally meant to be a low-level way of creating events and assigning listeners to them. It's meant to be verbose so larger building blocks can be created on top of them.\r\n\r\nThis PR is an alternative solution and system to that of my other PR: https://github.com/facebook/react/pull/17508. Specifically, based off feedback internally, I've tried to tackle some of the problems that were brought up with the `createListener` approach in https://github.com/facebook/react/pull/17508:\r\n\r\n- `createListener` largely depended on events being registered in the commit phase, meaning that there would likely be issues around needing to flush more to ensure we register DOM events. The new approach enforces all events are registered unconditionally via hooks in the render phase, mitigating this issue.\r\n- `createListener` allowed for listeners to update and change their properties between renders, which again is problematic for performance and would also require more flushes to ensure we have committed the latest version of each listener.\r\n- `createListener` had a complex diffing process to ensure we stored the latest listeners, but this meant that the process had additional overhead and memory usage – which is no longer the case with this PR.\r\n- `createListener` required listeners to be put on nodes via the `listeners` prop. Furthermore, it required using arrays to combine multiple listeners, which some felt was not idealistic and might be confusing during debugging as to which listeners occurred at which stages. Also, there was general dislike to introducing another internal prop – as it would mean we'd have to first forbid `listeners` and wait for React 17 to introduce these APIs, as they might be used in the wild for other reasons (custom elements).\r\n- `createListener` didn't provide an idiomatic way to conditionally add/remove root events (they're called delegated events in this new PR). With the new approach, there's a streamlined approach to ensure this is easier to do, and by default, no root events can be added unconditionally, which is a code-smell and a good cause of memory leaks/performance issues.\r\n\r\nTaking the above points into consideration, the design of this new event system aims at bringing the same capabilities as described in https://github.com/facebook/react/pull/17508 whilst also providing some other nice features, that should allow for bigger event sub-systems to be built on top.\r\n\r\n## `ReactDOM.useEvent`\r\n\r\nThis hook allows for the registration to a native DOM event, similar to that of `addEventListener` on the web. `useEvent` takes a given event `type` and registers it to the DOM then returns an object unique to that event that allows listeners to be attached to their targets in an effect or another event handler. The object provides three different methods to setup and handle listeners:\r\n\r\n- `setListener(target: window | element, listener: ?(Event => void))` set a listener to be active for a given DOM node. The node must be a DOM node managed by React or it can be the `window` node for delegation purposes. If the listener is `null` or `undefined` then we remove the given listener for that DOM node or `window` object.\r\n- `clear()` remove all listeners\r\n\r\nThe hook takes three arguments:\r\n\r\n- `type` the DOM event to listen to\r\n- `options` an optional object allowing for additional properties to be defined on the event listener. The options are:\r\n  - `passive` provide an optional flag that tells the listener to register a passive DOM event listener or an active DOM event listener\r\n  - `capture` provide an optional flag that tells the listener callback to fire in the capture phase or the bubble phase\r\n  - `priority` provide an optional Scheduler priority that allows React to correct schedule the listener callback to fire at the correct priority.\r\n\r\n## Note\r\n\r\nFor propagation, the same rules of `stopPropagation` and `stopImmediatePropagation` apply to these event listeners. These methods are actually monkey-patched, as we use the actual native DOM events with this system and API, rather than Synthetic Events. `currentTarget` and `eventPhase` are also respectfully monkey-patched to co-ordinate and align with the propagation system involved internally within React.\r\n\r\nFurthermore, all event listeners are passive by default. If is desired to called `event.preventDefault` on an event listener, then the event listener should be made active via the `passive` option.\r\n\r\n## Examples\r\n\r\nAn example of a basic clickable button:\r\n\r\n```jsx\r\nimport {useRef, useEffect} from 'react';\r\nimport {useEvent} from 'react-dom';\r\n\r\nfunction Button({children, onClick}) {\r\n  const buttonRef = useRef(null);\r\n  const clickEvent = useEvent('click');\r\n\r\n  useEffect(() => {\r\n    clickEvent.setListener(buttonRef.current, onClick);\r\n  });\r\n\r\n  return <button ref={buttonRef}>{children}</button>;\r\n}\r\n```\r\n\r\nIf you want to listen to events that are delegated to the window, you can do that:\r\n\r\n```jsx\r\nimport {useRef, useEffect} from 'react';\r\nimport {useEvent} from 'react-dom';\r\n\r\nfunction Button({children, onClick}) {\r\n  const clickEvent = useEvent('click');\r\n\r\n  useEffect(() => {\r\n    // Pass in `window`, which is supported with this API\r\n    // Note: `window` is not supported, as React doesn't\r\n    // listen to events that high up.\r\n    clickEvent.setListener(window, onClick);\r\n  });\r\n\r\n  return <button>{children}</button>;\r\n}\r\n```\r\n\r\nIf you wanted to extract the verbosity out of this into a custom hook, then it's possible to do so:\r\n\r\n```jsx\r\nimport {useRef, useEffect} from 'react';\r\nimport {useEvent} from 'react-dom';\r\n\r\nfunction useClick(ref, onClick) {\r\n  const clickEvent = useEvent('click');\r\n\r\n  useEffect(() => {\r\n    clickEvent.setListener(ref.current, onClick);\r\n  });\r\n\r\n  return buttonRef;\r\n}\r\n\r\nfunction Button({children}) {\r\n  const buttonRef = useRef(null);\r\n  useClick(buttonRef , () => {\r\n    console.log('Hello world!')\r\n  });\r\n  return <button ref={buttonRef}>{children}</button>;\r\n}\r\n```\r\n\r\nA more complex button that tracks when the button is being pressed with the mouse:\r\n\r\n```jsx\r\nimport {useRef, useEffect} from 'react';\r\nimport {useEvent} from 'react-dom';\r\n\r\nfunction Button({children, onClick}) {\r\n  const buttonRef = useRef(null);\r\n  const [pressed, setPressed] = useState(false);\r\n  const click = useEvent('click');\r\n  const mouseUp = useEvent('mouseup');\r\n  const mouseDown = useEvent('mousedown');\r\n\r\n  useEffect(() => {\r\n    const button = buttonRef.current;\r\n\r\n    const handleMouseUp = () => {\r\n      setPressed(false);\r\n    };\r\n    const handleMouseDown = () => {\r\n      setPressed(true); \r\n    };\r\n\r\n    click.setListener(button, onClick);\r\n    if (pressed) {\r\n      mouseUp.setListener(button, handleMouseUp);\r\n    } else {\r\n      mouseDown.setListener(button, handleMouseDown);\r\n    }\r\n\r\n    return () => {\r\n      click.setListener(button, null);\r\n      mouseDown.setListener(button, null);\r\n      mouseUp.setListener(button, null);\r\n    };\r\n  }, [pressed, onClick]);\r\n\r\n  return (\r\n    <button ref={buttonRef} className={pressed && 'pressed'}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n```\r\n\r\n## What about the DOM's `element.addEventListener`?\r\n\r\nIn many respects, this low-level API was intentionally designed to be a replacement for the DOM's `addEventListener`. Not only does this new Listener API provide many nice benefits, like auto-recycling listeners on unmount, but it should also help prevent bugs that will likely occur when `addEventListener` is used in conjunction with Concurrent Mode.\r\n\r\nFor a detailed list of differences, here are just some of the key benefits of the Listener API vs the DOM's `addEventListener`:\r\n\r\n- The event listeners automatically get recycled upon unmount\r\n- The event listeners correctly batch updates and flush previous ones correctly, as well as co-ordinating priority levels with the internal scheduler\r\n- The event listeners allow for alignment with the propagation of other events in the React event system, something not possible with manual DOM event listeners\r\n- The event listeners will correctly work with React Portals, Suspense and Concurrent Mode, native event listeners do not.\r\n- By ensuring we use a hook, like useEvent, we can determine the event needed during server-side render and ensure those events are registered on initial hydration ahead of time. This makes it possible to \"replay\" those events before the components themselves have concurrently hydrated on the client."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17649",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17649/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17649/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17649/events",
    "html_url": "https://github.com/facebook/react/issues/17649",
    "id": 539800417,
    "node_id": "MDU6SXNzdWU1Mzk4MDA0MTc=",
    "number": 17649,
    "title": "Inspector doesn't work on my site",
    "user": {
      "login": "maxrothman",
      "id": 2607086,
      "node_id": "MDQ6VXNlcjI2MDcwODY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2607086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxrothman",
      "html_url": "https://github.com/maxrothman",
      "followers_url": "https://api.github.com/users/maxrothman/followers",
      "following_url": "https://api.github.com/users/maxrothman/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxrothman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxrothman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxrothman/subscriptions",
      "organizations_url": "https://api.github.com/users/maxrothman/orgs",
      "repos_url": "https://api.github.com/users/maxrothman/repos",
      "events_url": "https://api.github.com/users/maxrothman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxrothman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "maxrothman",
      "id": 2607086,
      "node_id": "MDQ6VXNlcjI2MDcwODY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2607086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxrothman",
      "html_url": "https://github.com/maxrothman",
      "followers_url": "https://api.github.com/users/maxrothman/followers",
      "following_url": "https://api.github.com/users/maxrothman/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxrothman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxrothman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxrothman/subscriptions",
      "organizations_url": "https://api.github.com/users/maxrothman/orgs",
      "repos_url": "https://api.github.com/users/maxrothman/repos",
      "events_url": "https://api.github.com/users/maxrothman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxrothman/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "maxrothman",
        "id": 2607086,
        "node_id": "MDQ6VXNlcjI2MDcwODY=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/2607086?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maxrothman",
        "html_url": "https://github.com/maxrothman",
        "followers_url": "https://api.github.com/users/maxrothman/followers",
        "following_url": "https://api.github.com/users/maxrothman/following{/other_user}",
        "gists_url": "https://api.github.com/users/maxrothman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/maxrothman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/maxrothman/subscriptions",
        "organizations_url": "https://api.github.com/users/maxrothman/orgs",
        "repos_url": "https://api.github.com/users/maxrothman/repos",
        "events_url": "https://api.github.com/users/maxrothman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/maxrothman/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2019-12-18T16:52:08Z",
    "updated_at": "2020-01-22T17:01:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nAsk for assistance or report a bug (not sure)\r\n\r\n**Steps to reproduce**\r\n- In dev tools, select \"Components\" tab\r\n- Select the inspector tool in the top-left\r\n- Click on an element in the page\r\n\r\n**What is the current behavior?**\r\nComponent names are shown as I mouse over them, but the Components tab does not reveal the selected element\r\n\r\n**What is the expected behavior?**\r\nThe selected element should be revealed in the Components tab\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6\r\nChrome 79.0.3945.79\r\nReact dev tools 4.2.1\r\n\r\nThe inspector feature works on other public websites built with React, so the problem almost certainly lies with my site. What am I doing wrong, or have I uncovered an edge case somewhere?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17624",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17624/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17624/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17624/events",
    "html_url": "https://github.com/facebook/react/issues/17624",
    "id": 538591138,
    "node_id": "MDU6SXNzdWU1Mzg1OTExMzg=",
    "number": 17624,
    "title": "React DevTools might retain references to unmounted DOM elements (and their Fibers)",
    "user": {
      "login": "bgirard",
      "id": 793565,
      "node_id": "MDQ6VXNlcjc5MzU2NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/793565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bgirard",
      "html_url": "https://github.com/bgirard",
      "followers_url": "https://api.github.com/users/bgirard/followers",
      "following_url": "https://api.github.com/users/bgirard/following{/other_user}",
      "gists_url": "https://api.github.com/users/bgirard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bgirard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bgirard/subscriptions",
      "organizations_url": "https://api.github.com/users/bgirard/orgs",
      "repos_url": "https://api.github.com/users/bgirard/repos",
      "events_url": "https://api.github.com/users/bgirard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bgirard/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-16T18:55:33Z",
    "updated_at": "2020-01-08T23:38:18Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "![Screenshot 2019-12-16 10 51 05](https://user-images.githubusercontent.com/793565/70934095-fd91ed80-1ff1-11ea-93b5-746e816585ec.png)\r\nThere's seems to be circumstances where unmounted DOM/Fibers are kept alive by React DevTools. They're kept alive in `primaryFibers`:\r\nhttps://github.com/facebook/react/blob/34527063083195558f98108cde10b5d6ad0d6865/packages/react-devtools-shared/src/backend/renderer.js#L772\r\n\r\nIt seems like a WeakSet would be appropriate and would remove the leak. Otherwise we'd need to understand why recordUnmount isn't called.\r\n\r\nCC @bvaughn  "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17621",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17621/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17621/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17621/events",
    "html_url": "https://github.com/facebook/react/issues/17621",
    "id": 538436898,
    "node_id": "MDU6SXNzdWU1Mzg0MzY4OTg=",
    "number": 17621,
    "title": "Suspense: add messaging when suspense promise neither resolves nor rejects",
    "user": {
      "login": "joeldenning",
      "id": 5524384,
      "node_id": "MDQ6VXNlcjU1MjQzODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5524384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joeldenning",
      "html_url": "https://github.com/joeldenning",
      "followers_url": "https://api.github.com/users/joeldenning/followers",
      "following_url": "https://api.github.com/users/joeldenning/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeldenning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joeldenning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeldenning/subscriptions",
      "organizations_url": "https://api.github.com/users/joeldenning/orgs",
      "repos_url": "https://api.github.com/users/joeldenning/repos",
      "events_url": "https://api.github.com/users/joeldenning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joeldenning/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-16T14:12:20Z",
    "updated_at": "2019-12-16T19:52:34Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nIf you throw a promise that neither resolves nor rejects, you hit the suspense fallback UI indefinitely and receive no console messaging that helps you debug this.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions that allow for suspense\r\n\r\n**Proposed feature**\r\nLog a warning to the console if a suspense promise takes longer than a certain amount of time to settle. Here is some code demonstrating what that could look like inside of the react codebase:\r\n\r\n```js\r\ntry {\r\n  renderComponent(...);\r\n} catch (err) {\r\n  if (err && err.then) {\r\n    const timeoutId = setTimeout(() => {\r\n      console.warn(`A suspense promise triggered in component <Foo /> did not resolve nor reject after 3 seconds. If the promise never settles, the suspense fallback UI will be shown forever.`)\r\n    }, 3000)\r\n\r\n    err.finally(() => {\r\n      clearTimeout(timeoutId);\r\n    })\r\n\r\n    // Now actually do all the suspense magicks...\r\n  }\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17609",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17609/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17609/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17609/events",
    "html_url": "https://github.com/facebook/react/issues/17609",
    "id": 537986655,
    "node_id": "MDU6SXNzdWU1Mzc5ODY2NTU=",
    "number": 17609,
    "title": "Controlled numeric input gets cleared when unfocused",
    "user": {
      "login": "kripod",
      "id": 14854048,
      "node_id": "MDQ6VXNlcjE0ODU0MDQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14854048?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kripod",
      "html_url": "https://github.com/kripod",
      "followers_url": "https://api.github.com/users/kripod/followers",
      "following_url": "https://api.github.com/users/kripod/following{/other_user}",
      "gists_url": "https://api.github.com/users/kripod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kripod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kripod/subscriptions",
      "organizations_url": "https://api.github.com/users/kripod/orgs",
      "repos_url": "https://api.github.com/users/kripod/repos",
      "events_url": "https://api.github.com/users/kripod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kripod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-12-15T01:10:16Z",
    "updated_at": "2019-12-17T02:02:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to report a bug.\r\n\r\n**What is the current behavior?**\r\nA numeric input field gets cleared accidentally on several occasions.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Open [this sandbox](https://codesandbox.io/embed/sad-rgb-mltuj)\r\n2. Type “12.” into the field, with the trailing decimal separator\r\n3. Unfocus the control\r\n4. Append “.” to the field’s value to see “12..”\r\n5. Unfocus the control once again and see that the number has completely disappeared\r\n\r\n**What is the expected behavior?**\r\n\r\nSimilar to how uncontrolled inputs work (remove the `value` prop and then repeat the steps above), the input should not be cleared on blur.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI’m using React 16.12.0 and experienced the same behavior with the latest version of Chrome and iOS Safari. Regarding this bug, I have no experience with previous versions of React.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17607",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17607/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17607/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17607/events",
    "html_url": "https://github.com/facebook/react/issues/17607",
    "id": 537956656,
    "node_id": "MDU6SXNzdWU1Mzc5NTY2NTY=",
    "number": 17607,
    "title": "Pattern for \"onchange\" callbacks",
    "user": {
      "login": "LeopoldLerch",
      "id": 28888039,
      "node_id": "MDQ6VXNlcjI4ODg4MDM5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28888039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LeopoldLerch",
      "html_url": "https://github.com/LeopoldLerch",
      "followers_url": "https://api.github.com/users/LeopoldLerch/followers",
      "following_url": "https://api.github.com/users/LeopoldLerch/following{/other_user}",
      "gists_url": "https://api.github.com/users/LeopoldLerch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LeopoldLerch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LeopoldLerch/subscriptions",
      "organizations_url": "https://api.github.com/users/LeopoldLerch/orgs",
      "repos_url": "https://api.github.com/users/LeopoldLerch/repos",
      "events_url": "https://api.github.com/users/LeopoldLerch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LeopoldLerch/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-12-14T19:45:45Z",
    "updated_at": "2019-12-16T09:49:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**What is the current behavior?**\r\n\r\nI have the situation, where i have a component, which should call a callback-function given in props when something, in that case a state changes.\r\n\r\nin classic class-components this would have happened in componentdidupdate and calling the onchange-function of the props.\r\n\r\nHowever, in hooks i have a slight problem: \r\n\r\nI have thought of this:\r\n\r\n`useEffect(() => {\r\n props.onchange(state)\r\n}, [state]);`\r\n\r\nHowever, this does not work. eslint forces me to also insert the onchange-method given from props to the dependencies. This, of course, would result in calling the onchange method, when the onchange-method given in props changes, which is not expected behaviour.\r\n\r\nI have found a workaround, with wrapping the callback-function in a useref in another useeffect targeting and calling the ref.current in the useffect for the state. But this seems to me like a quite complicated and not as straightforward solution, like it was in class-components.\r\n\r\nAre there any patterns for solving this?\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17594",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17594/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17594/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17594/events",
    "html_url": "https://github.com/facebook/react/issues/17594",
    "id": 537427200,
    "node_id": "MDU6SXNzdWU1Mzc0MjcyMDA=",
    "number": 17594,
    "title": "DevTools: Profiler: Enable correlating console logs to profiler output (and vice versa)",
    "user": {
      "login": "justingrant",
      "id": 277214,
      "node_id": "MDQ6VXNlcjI3NzIxNA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/277214?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/justingrant",
      "html_url": "https://github.com/justingrant",
      "followers_url": "https://api.github.com/users/justingrant/followers",
      "following_url": "https://api.github.com/users/justingrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/justingrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/justingrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/justingrant/subscriptions",
      "organizations_url": "https://api.github.com/users/justingrant/orgs",
      "repos_url": "https://api.github.com/users/justingrant/repos",
      "events_url": "https://api.github.com/users/justingrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/justingrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-12-13T09:01:35Z",
    "updated_at": "2019-12-20T22:42:06Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "A challenge with the React DevTools profiler is that it's too hard to correlate profiler results with console logs. This makes diagnosing and fixing render performance issues much more difficult.\r\n\r\nFor example, yesterday I was debugging an app where each render usually took 10ms-20ms except every 20-30 renders it'd take 600-800ms.  It was frustrating that I didn't have a way to correlate the profiler UI (which told me which renders were problematic) with the verbose console log output that might tell me exactly what went wrong during those renders. Instead I had to comb through logs and guess which output came from \"bad\" renders. This was tedious and error-prone.\r\n\r\nAnyway, my proposal is for React DevTools to make it easy to correlate profiler results with console log output.  Both directions would be useful:\r\n1) **navigate from logs to profiler** - if I see a suspicious line in the logs, I'd like to easily navigate to the profiler with the specific component/commit selected that was running when the line was logged.\r\n2) **navigate from profiler to logs** - if I see a suspiciously long commit, I'd like to select it in the profiler pane and have an easy way to see associated logs.\r\n\r\nI don't have a strong opinion about how this should be accomplished, but below are a few ideas to spur discussion.\r\n\r\nA minimal solution could be something like this: \r\na) The profiler assigns a unique ID to each commit\r\nb) The profiler's right pane would show the ID for each commit\r\nc) React would add a new hook that'd return that ID\r\nd) Userland code could include the ID in logs.\r\n\r\nJust this minimal support would be a vast improvement.\r\n\r\nIf we wanted to make it smoother, here's a few ideas that could be layered on top.\r\n\r\n1. **Profiler->Console Links** The ID in the profiler UI could be a hyperlink that'd open the console drawer and put the ID in the console's CMD+F search box. This would be one-click navigation from profiler to logs. I don't know if Chrome allows this kind of cross-pane control, over the console UI so this might not be practical.\r\n\r\n2. **Console -> Profiler Links**  For one-click logging in the other direction., we could have a special URL format (e.g. `react://profiler/commit/2c1056b5-1be1-43d4-a105-1d840cf4f9c3`) that would enable userland code to emit links in the console that, when clicked, would navigate to the specific commit (in the profile pane) that was active when the logs were emitted. Similar caveat as above: I'm not sure if chrome extensions can be \"deeplinked\" like this. \r\n\r\n3. **Log Components Where** Building on (1) and (2) above, we could enable console<->profiler linking without requiring changes to userland code. We could have a profiler setting (e.g. \"log components where\" with UX like \"hide components where\") that, when active, would emit a line to the console log at the start of each render of a matching component. The output would link back to the profiler, e.g. \r\n`[RDT] Starting MyCoolComponent (react://profiler/commit/2c1056b51be143d4a1051d840cf4f9c3)`.\r\n\r\nWhat do you think? I'm unfamiliar with React and RDT internals so there might be much better ways to solve log<->profiler correlation than my naive ideas above. But at least I wanted to call out the problem and encourage discussion about a solution.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17590",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17590/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17590/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17590/events",
    "html_url": "https://github.com/facebook/react/issues/17590",
    "id": 537249053,
    "node_id": "MDU6SXNzdWU1MzcyNDkwNTM=",
    "number": 17590,
    "title": "Undefined value in a checkbox becomes an empty string",
    "user": {
      "login": "danoc",
      "id": 916038,
      "node_id": "MDQ6VXNlcjkxNjAzOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/916038?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danoc",
      "html_url": "https://github.com/danoc",
      "followers_url": "https://api.github.com/users/danoc/followers",
      "following_url": "https://api.github.com/users/danoc/following{/other_user}",
      "gists_url": "https://api.github.com/users/danoc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danoc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danoc/subscriptions",
      "organizations_url": "https://api.github.com/users/danoc/orgs",
      "repos_url": "https://api.github.com/users/danoc/repos",
      "events_url": "https://api.github.com/users/danoc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danoc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-12T22:32:04Z",
    "updated_at": "2019-12-13T03:26:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Hello!\r\n\r\n**Do you want to request a *feature* or report a *bug*?** \r\nReport a bug\r\n\r\n**What is the current behavior?** \r\n\r\nWhen rendering a `input[type=\"checkbox\"]`, ReactDOM adds a `value` attribute to the `input` element even if the `value` prop is `undefined`.\r\n\r\n```js\r\nReactDOM.render(<input type=\"checkbox\" value={undefined} />, el);\r\n// renders as <input type=\"checkbox\" value=\"\" />, value is an empty string\r\n\r\nReactDOM.render(<input type=\"checkbox\" />, el);\r\n// renders as <input type=\"checkbox\" />, value is browser default of \"on\"\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/react-checkbox-value-jwh7x\r\n\r\n**What is the expected behavior?**\r\n\r\n[A checkbox without a `value` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value) should default to `value=\"on\"`. I would have expected React not to add the `value` attribute to a checkbox if `value={undefined}`. This would allow the checkbox to follow the default browser behavior.\r\n\r\nI stumbled upon this after [adding an optional `value` prop to Thumbtack's `Checkbox` React component](https://github.com/thumbtack/thumbprint/pull/502). The seemingly backwards compatible PR broke at least one sever endpoint that was checking for the \"truthyness\" of the checkbox value. Before the PR, the checkbox value defaulted to `on`. After the PR, it became `\"\"`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis should affect all browsers and OS's. I'm not sure which version of React this was introduced it, but it doesn't seem to be a recent regression. (Happy to dig in more here if needed.)\r\n\r\n***\r\n\r\nI think this happens because `ReactDOMInput.js` sets `node._wrapperState.initialValue` to `\"\"` if the `value` prop is `undefined`:\r\n\r\nhttps://github.com/facebook/react/blob/12c000412d05c4a6079b4f57f721a40b8cea374d/packages/react-dom/src/client/ReactDOMInput.js#L114-L122\r\n\r\nPerhaps there should be a check here for `props.type` so that `defaultValue` remains `undefined` for checkboxes? I'd be happy to submit a PR if this is a bug. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17581",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17581/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17581/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17581/events",
    "html_url": "https://github.com/facebook/react/issues/17581",
    "id": 536707451,
    "node_id": "MDU6SXNzdWU1MzY3MDc0NTE=",
    "number": 17581,
    "title": "Input nodes leaked by the browser retain React fibers",
    "user": {
      "login": "albertxing",
      "id": 2881206,
      "node_id": "MDQ6VXNlcjI4ODEyMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2881206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/albertxing",
      "html_url": "https://github.com/albertxing",
      "followers_url": "https://api.github.com/users/albertxing/followers",
      "following_url": "https://api.github.com/users/albertxing/following{/other_user}",
      "gists_url": "https://api.github.com/users/albertxing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/albertxing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/albertxing/subscriptions",
      "organizations_url": "https://api.github.com/users/albertxing/orgs",
      "repos_url": "https://api.github.com/users/albertxing/repos",
      "events_url": "https://api.github.com/users/albertxing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/albertxing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-12T01:40:26Z",
    "updated_at": "2019-12-12T01:46:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n🐛 \r\n\r\n**What is the current behavior?**\r\n\r\nBrowsers retain references to inputs in their undo stacks, which in turn retain React fibers (including `memoizedProps`)\r\n\r\nSee https://bugs.chromium.org/p/chromium/issues/detail?id=1029189\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/altxg/nzu6ab5e/3/\r\n\r\n**What is the expected behavior?**\r\n\r\nAlthough the leak originates from the browser, it might be helpful if React detached internal fiber references from input and contenteditable nodes on unmount\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions of React as far as I know.\r\nI can reproduce the leak on Chrome and Firefox on Mac\r\n\r\n---\r\n\r\nPotentially related issues:\r\nhttps://github.com/facebook/react/issues/12692\r\nhttps://github.com/facebook/react/issues/16087"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17576",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17576/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17576/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17576/events",
    "html_url": "https://github.com/facebook/react/issues/17576",
    "id": 536360909,
    "node_id": "MDU6SXNzdWU1MzYzNjA5MDk=",
    "number": 17576,
    "title": "React Hooks are unable to queue to process",
    "user": {
      "login": "AshifMohammad",
      "id": 20770645,
      "node_id": "MDQ6VXNlcjIwNzcwNjQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20770645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AshifMohammad",
      "html_url": "https://github.com/AshifMohammad",
      "followers_url": "https://api.github.com/users/AshifMohammad/followers",
      "following_url": "https://api.github.com/users/AshifMohammad/following{/other_user}",
      "gists_url": "https://api.github.com/users/AshifMohammad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AshifMohammad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AshifMohammad/subscriptions",
      "organizations_url": "https://api.github.com/users/AshifMohammad/orgs",
      "repos_url": "https://api.github.com/users/AshifMohammad/repos",
      "events_url": "https://api.github.com/users/AshifMohammad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AshifMohammad/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-11T13:12:30Z",
    "updated_at": "2020-01-02T20:43:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "![image (2)](https://user-images.githubusercontent.com/20770645/70624330-14c58980-1c46-11ea-81c6-c284ef07b470.png)\r\n<!--\r\n When i try to use react Hooks inside another Hook, React is unable to queue those operations .\r\n\r\n-->\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a Customer Hook \r\n```javascript\r\nimport { useContext } from \"react\";\r\nimport { SomeContext } from \"src/SomeContext\";\r\n\r\nexport const useCustomHook = () => {\r\n  const {\r\n    state: { deal }\r\n  } = useContext(SomeContext);\r\n\r\n\r\nconst[contextVal, setContextVal] = useState(\"\")\r\n\r\nuseEffect ( () => {  setContextVal( get(deal, \"saleVehicle.pricing\", {});) },[ deal])\r\n  return contextVal;\r\n};\r\n\r\nuseCustomHook.defaultProps = {\r\n  deal: {},\r\n  DealContext: {}\r\n};\r\n```\r\n\r\n2. now Consume this hook into your component\r\n\r\n```javascript \r\nimport {useCustomHook} from \"...relative path\"\r\n\r\nconst salePrice = ({\r\n  SomeContext: {\r\n    state: { deal, shadowState },\r\n  }\r\n}) => {\r\n//some handlers  - assume it working :D \r\n const handleFocus = event => event.target.select();\r\n  const handleOnBlur = ()=> { some call backs}\r\n  });\r\n  const handleOnChange = (ev, value) =>\r\n    updateDeal(dispatch)({ target: { name: \"salePrice\", value } });\r\n\r\nuseEffect ( () => { useCustomHook(),[deal.id])\r\n\r\n  return (\r\n    <TextField\r\n      value={deal.salePrice || vehSalePrice()}\r\n      fullWidth\r\n      onChange={handleOnChange}\r\n      onBlur={handleOnBlur}\r\n      disabled={hasOpenModal}\r\n      quickEntry={quickEntryEnabled}\r\n      decimalDigits={2}\r\n      onFocus={handleFocus}\r\n    />\r\n  );\r\n};\r\n\r\nsalePrice.propTypes = {\r\n  DealContext: DealContextShape.isRequired,\r\n};\r\n\r\nsalePrice.defaultProps = {\r\n\r\n  deal: { price: \"\", Vehicle: { retailPrice: \"\" } },\r\n  retailPrice: \"\"\r\n};\r\n\r\n```\r\n3 - Once `<SalePrice / >` starts executing , It looks for the Hook `useCustomHook` but then `useCustomHook` internally calls another hooks `useContext, useState, useEffect` and while executing those hooks , it does not queue them up and screen blows up.\r\n\r\n\r\n\r\n\r\nDescribe what you expected to happen:\r\n- React should handle the queue of hooks within and execute them as callStack does.\r\n\r\n\r\n![](https://files.slack.com/files-pri/TJZUB1VM1-FR3UR5HSP/image.png)\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17564",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17564/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17564/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17564/events",
    "html_url": "https://github.com/facebook/react/issues/17564",
    "id": 535605680,
    "node_id": "MDU6SXNzdWU1MzU2MDU2ODA=",
    "number": 17564,
    "title": "Lint rule warns against hooks in functional sub-component.",
    "user": {
      "login": "P233",
      "id": 1818679,
      "node_id": "MDQ6VXNlcjE4MTg2Nzk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1818679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/P233",
      "html_url": "https://github.com/P233",
      "followers_url": "https://api.github.com/users/P233/followers",
      "following_url": "https://api.github.com/users/P233/following{/other_user}",
      "gists_url": "https://api.github.com/users/P233/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/P233/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/P233/subscriptions",
      "organizations_url": "https://api.github.com/users/P233/orgs",
      "repos_url": "https://api.github.com/users/P233/repos",
      "events_url": "https://api.github.com/users/P233/events{/privacy}",
      "received_events_url": "https://api.github.com/users/P233/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1249821345,
        "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
        "name": "Component: ESLint Rules",
        "color": "f7afdb",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-12-10T09:37:14Z",
    "updated_at": "2020-01-21T15:43:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Calling a hook in a functional sub-component causes an error  `React Hook \"React.useContext\" is called in function \"Modal.Close\" which is neither a React function component or a custom React Hook function` :\r\n\r\n```jsx\r\nModal.Close = props => {\r\n  const setIsOpen = React.useContext(ModalContext);\r\n\r\n  return (\r\n    <button onClick={() => setIsOpen(false)}>\r\n      <Icon name=\"close\" />\r\n    </button>\r\n  );\r\n};\r\n```\r\n\r\nHowever, creating a new functional component and reassigning it to the main component won't cause that error.\r\n\r\n```jsx\r\nconst Close = props => {\r\n  const setIsOpen = React.useContext(ModalContext);\r\n\r\n  return (\r\n    <button onClick={() => setIsOpen(false)}>\r\n      <Icon name=\"close\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nModal.Close = Close;\r\n```\r\n\r\nI am currently using the latest version of React `16.12.0` and react-scripts `3.3.0`."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17556",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17556/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17556/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17556/events",
    "html_url": "https://github.com/facebook/react/pull/17556",
    "id": 535098480,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwODUyMzUw",
    "number": 17556,
    "title": "React.unstable_avoidThisRender()",
    "user": {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-09T18:14:19Z",
    "updated_at": "2020-01-13T16:21:49Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17556",
      "html_url": "https://github.com/facebook/react/pull/17556",
      "diff_url": "https://github.com/facebook/react/pull/17556.diff",
      "patch_url": "https://github.com/facebook/react/pull/17556.patch"
    },
    "body": "Introduces React.unstable_avoidThisRender(). \r\n\r\nThis is one step towards implementing first class suspending behaviour for static resources like images/stylesheets. \r\n\r\nOne of the problems with doing this naively in \"userland\", is because React is so aggressive on rerendering when the thenables resolve, we end up doing a bunch of unneeded rerenders. This sequence of PRs is to optimize the paths React executes in such cases.\r\n\r\n\r\nHow it's implemented\r\n---\r\n\r\n(There might be errors/a lack of understanding in this description)\r\n\r\n`unstable_avoidThisRender()` is called during the render phase, which is similar to the 'throw' phase (without the actual throwing). When this happens:\r\n- we look for the nearest Suspense boundary (that satisfies hasInvisibleParentBoundary === true), \r\n- and mark it's `effectTag` as `SoftCapture` (which is a variant of `DidCapture` for avoided renders). \r\n- We also attach a ping listener for cleaning up if the thenable resolves before we commit that boundary.\r\n\r\n(These steps are similar to what we'd call if you threw an actual promise; ie - `throwException()`)\r\n\r\nSoon after this, `completeWork` is called for the marked Suspense boundary. We use this instant to mark the boundary as expired, and return itself to render itself again.\r\n\r\nSoon after, beginWork is called for that boundary. `SoftCapture` tells us that boundary has suspended. We clear the effectTag, initialize suspenseState/memoizedState on that boundary, and set `expirationTime` and `memoizedState.didAvoidRenderTime` as `renderExpirationTime - 1`; ie - we mark that boundary as 'expiring very soon'. \r\n\r\nSoon `unstable_avoidThisRender()` is called again, setting the effectTag back to `SoftCapture`. (This time in completeWork, we see that the effectTag and memoizedState are set, so can bypass returning itself.) \r\n\r\nAfter committing, the content rerender happens. (???) \r\n\r\nThis time, in `completeWork()`, we call `renderDidSuspendDelayIfPossible()` to set the exit status on the tree. Currently, the actual content gets committed.\r\n\r\nThat's ...it? In the next PR, we'll add a new exitStatus, and actually show the fallback, passing the commented out tests in `ReactSuspenseWithNoopRenderer-test.internal.js`\r\n\r\n\r\nTODO: address this review comment https://github.com/facebook/react/pull/17556/files#r358883141"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17553",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17553/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17553/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17553/events",
    "html_url": "https://github.com/facebook/react/issues/17553",
    "id": 534838995,
    "node_id": "MDU6SXNzdWU1MzQ4Mzg5OTU=",
    "number": 17553,
    "title": "DevTools: Provide full file path for React Native component stacks",
    "user": {
      "login": "rickhanlonii",
      "id": 2440089,
      "node_id": "MDQ6VXNlcjI0NDAwODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2440089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rickhanlonii",
      "html_url": "https://github.com/rickhanlonii",
      "followers_url": "https://api.github.com/users/rickhanlonii/followers",
      "following_url": "https://api.github.com/users/rickhanlonii/following{/other_user}",
      "gists_url": "https://api.github.com/users/rickhanlonii/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rickhanlonii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rickhanlonii/subscriptions",
      "organizations_url": "https://api.github.com/users/rickhanlonii/orgs",
      "repos_url": "https://api.github.com/users/rickhanlonii/repos",
      "events_url": "https://api.github.com/users/rickhanlonii/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rickhanlonii/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-12-09T10:38:24Z",
    "updated_at": "2020-01-08T23:38:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "## Overview\r\n\r\nIn React Native, we're working on a new RedBox experience for errors and warnings called LogBox. In LogBox, we separate out component stack traces and show them similar to call stacks.\r\n\r\nWe'd like to be able to tap on these components and open them (like we can with call stacks).\r\n\r\n## Solutions\r\nIn React we have the full file path context, but when we build the component stack trace, we strip the full path so that it displays only the file name.\r\n\r\nThere are two options to achieve this:\r\n- For React Native, don't strip the full path [here](https://github.com/facebook/react/blob/b438699d3620bff236282b049204e1221b3689e9/packages/react-devtools-shared/src/backend/describeComponentFrame.js#L25). This will result in longer component stack messages with every frame having the full path.\r\n- Keep the message the same, and instead add structured component stack frame info including the full file path."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17548",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17548/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17548/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17548/events",
    "html_url": "https://github.com/facebook/react/issues/17548",
    "id": 534588612,
    "node_id": "MDU6SXNzdWU1MzQ1ODg2MTI=",
    "number": 17548,
    "title": "Shouldn't useEffect be split into three distinct hooks?",
    "user": {
      "login": "voroninp",
      "id": 9202028,
      "node_id": "MDQ6VXNlcjkyMDIwMjg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9202028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/voroninp",
      "html_url": "https://github.com/voroninp",
      "followers_url": "https://api.github.com/users/voroninp/followers",
      "following_url": "https://api.github.com/users/voroninp/following{/other_user}",
      "gists_url": "https://api.github.com/users/voroninp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/voroninp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/voroninp/subscriptions",
      "organizations_url": "https://api.github.com/users/voroninp/orgs",
      "repos_url": "https://api.github.com/users/voroninp/repos",
      "events_url": "https://api.github.com/users/voroninp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/voroninp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-08T19:31:15Z",
    "updated_at": "2019-12-09T10:08:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Currently behaviour of `useEffect` hook is defined by the last parameter. It is either not defined at all, empty array, or enumerates the values.\r\n\r\nI believe this adds a bit of cognitive load to the developer. The intention is not clear until I look at the end of the function. Second, the difference between empty array `[]` and not defined array is not that drastic. Furthermore, natural flow is like that: define values, and when any of them changes, then apply effect, so I assume specifying the list of tracked values first is better.\r\n\r\nI personally think, it would be nice to have something like this:\r\n\r\n```js\r\nimport {useEffect} from \"react\";\r\n\r\n\r\n/**\r\n * Applies effect on every render of the component.\r\n *\r\n * @param {React.EffectCallback} effect - Imperative function that can return a cleanup function.\r\n */\r\nfunction useEffectAlways(effect){\r\n    useEffect(effect);\r\n}\r\n\r\n/**\r\n * Applies effect only if one of the values of deps array changes.\r\n *\r\n * @param {any[]} deps - Array of values which are tracked by React to determine whether effect should be applied.\r\n * @param {React.EffectCallback} effect - Imperative function that can return a cleanup function.\r\n */\r\n/* \r\nDECISION: deps intentionally goes first, because it resembles the flow: if 'deps' changed then apply 'effect'.\r\nand it is much easier to spot the list of dependencies, when it goes first.\r\nCompare:\r\nuseEffectOnChanges([a, b, c], () => {\r\n ...\r\n ...\r\n ...\r\n});\r\nand\r\nuseEffectOnChanges(() => {\r\n  ...\r\n  ...\r\n  ...\r\n}, [a, d, c]); \r\n*/\r\n function useEffectOnChanges(deps, effect){\r\n    if (!deps || deps.length === 0){\r\n        throw new Error(\"Either provide non empty deps array or call useEffectAlways/useEffectOnce.\");\r\n    }\r\n    useEffect(effect, deps);\r\n}\r\n\r\n// defining a constant for empty array allows us to avoid memory allocation on every call.\r\nconst __emptyArray = [];\r\n\r\n/**\r\n * Applies effect only once on the first render of the component. Equivalent to componentDidMount lifecycle method.\r\n *\r\n * @param {React.EffectCallback} effect - Imperative function that can return a cleanup function.\r\n */\r\nfunction useEffectOnce(effect){\r\n    useEffect(effect, __emptyArray);\r\n}\r\n\r\nexport { useEffectAlways, useEffectOnChanges, useEffectOnce }; \r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17542",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17542/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17542/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17542/events",
    "html_url": "https://github.com/facebook/react/pull/17542",
    "id": 534244392,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwMTg4Njk2",
    "number": 17542,
    "title": "Move scheduleHydration to root prototype",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-06T20:31:49Z",
    "updated_at": "2020-01-08T19:01:08Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17542",
      "html_url": "https://github.com/facebook/react/pull/17542",
      "diff_url": "https://github.com/facebook/react/pull/17542.diff",
      "patch_url": "https://github.com/facebook/react/pull/17542.patch"
    },
    "body": "We don't technically need the root since we'll find it through the DOM but we do need the root to have been created before we call this.\r\n\r\nThis API makes that a bit clearer. This was even asked about before so seems reasonable.\r\n\r\nThe only unfortunate thing is that it's not possible to do a generic scroll or event driven hydration without having access to a root."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17541",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17541/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17541/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17541/events",
    "html_url": "https://github.com/facebook/react/pull/17541",
    "id": 534152864,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwMTExNDA1",
    "number": 17541,
    "title": "Distinguish between an empty slot and a mismatch",
    "user": {
      "login": "jddxf",
      "id": 11155177,
      "node_id": "MDQ6VXNlcjExMTU1MTc3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11155177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jddxf",
      "html_url": "https://github.com/jddxf",
      "followers_url": "https://api.github.com/users/jddxf/followers",
      "following_url": "https://api.github.com/users/jddxf/following{/other_user}",
      "gists_url": "https://api.github.com/users/jddxf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jddxf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jddxf/subscriptions",
      "organizations_url": "https://api.github.com/users/jddxf/orgs",
      "repos_url": "https://api.github.com/users/jddxf/repos",
      "events_url": "https://api.github.com/users/jddxf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jddxf/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-06T17:13:21Z",
    "updated_at": "2020-01-13T15:25:55Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17541",
      "html_url": "https://github.com/facebook/react/pull/17541",
      "diff_url": "https://github.com/facebook/react/pull/17541.diff",
      "patch_url": "https://github.com/facebook/react/pull/17541.patch"
    },
    "body": "Currently an empty slot is regarded as a mismatch between the slots. It triggers the slow path when we run into empty slots. Since empty slots are rather common, I believe it's worthwhile to distinguish between the two."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17531",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17531/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17531/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17531/events",
    "html_url": "https://github.com/facebook/react/issues/17531",
    "id": 533083432,
    "node_id": "MDU6SXNzdWU1MzMwODM0MzI=",
    "number": 17531,
    "title": "[Q] How to perform a server side data fetching with React Hooks",
    "user": {
      "login": "idangozlan",
      "id": 1991021,
      "node_id": "MDQ6VXNlcjE5OTEwMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1991021?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/idangozlan",
      "html_url": "https://github.com/idangozlan",
      "followers_url": "https://api.github.com/users/idangozlan/followers",
      "following_url": "https://api.github.com/users/idangozlan/following{/other_user}",
      "gists_url": "https://api.github.com/users/idangozlan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/idangozlan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/idangozlan/subscriptions",
      "organizations_url": "https://api.github.com/users/idangozlan/orgs",
      "repos_url": "https://api.github.com/users/idangozlan/repos",
      "events_url": "https://api.github.com/users/idangozlan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/idangozlan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-12-05T02:25:13Z",
    "updated_at": "2020-01-07T17:55:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "We just start moving into React Hooks from the React life-cycle and one of the things that we noticed, is that there's no straightforward way to run something similar to ComponentWillMount for loading data before sending the rendered page to the user (since useEffect is not running on SSR).\r\n\r\nIs there any easy way supported by React to do so?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17529",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17529/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17529/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17529/events",
    "html_url": "https://github.com/facebook/react/pull/17529",
    "id": 532887258,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ5MDU0ODQ4",
    "number": 17529,
    "title": "Add DEV warning for when a non-function is passed to useMemo",
    "user": {
      "login": "duanebester",
      "id": 2539656,
      "node_id": "MDQ6VXNlcjI1Mzk2NTY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2539656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duanebester",
      "html_url": "https://github.com/duanebester",
      "followers_url": "https://api.github.com/users/duanebester/followers",
      "following_url": "https://api.github.com/users/duanebester/following{/other_user}",
      "gists_url": "https://api.github.com/users/duanebester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duanebester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duanebester/subscriptions",
      "organizations_url": "https://api.github.com/users/duanebester/orgs",
      "repos_url": "https://api.github.com/users/duanebester/repos",
      "events_url": "https://api.github.com/users/duanebester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duanebester/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-04T19:29:18Z",
    "updated_at": "2019-12-09T02:01:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17529",
      "html_url": "https://github.com/facebook/react/pull/17529",
      "diff_url": "https://github.com/facebook/react/pull/17529.diff",
      "patch_url": "https://github.com/facebook/react/pull/17529.patch"
    },
    "body": "Before, the following would throw a TypeError for createNext() not being a function:\r\n\r\n```\r\nfunction App() {\r\n  const memoized = React.useMemo({ foo: \"bar\" }, []);\r\n  return <div>{memoized.foo}</div>;\r\n}\r\n```\r\n\r\nNow we have a DEV warning that's more helpful:\r\n\r\n```\r\nWarning: useMemo received an argument that is not a function (instead, received `object`). When specified, this argument must be a function.\r\n    in App (at src/index.js:7)\r\n```\r\n\r\nAddresses #16589 "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17528",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17528/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17528/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17528/events",
    "html_url": "https://github.com/facebook/react/issues/17528",
    "id": 532793867,
    "node_id": "MDU6SXNzdWU1MzI3OTM4Njc=",
    "number": 17528,
    "title": "Reordering of list's items leads to scroll to the top of page on Android device ",
    "user": {
      "login": "arhontmw",
      "id": 5570898,
      "node_id": "MDQ6VXNlcjU1NzA4OTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5570898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arhontmw",
      "html_url": "https://github.com/arhontmw",
      "followers_url": "https://api.github.com/users/arhontmw/followers",
      "following_url": "https://api.github.com/users/arhontmw/following{/other_user}",
      "gists_url": "https://api.github.com/users/arhontmw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arhontmw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arhontmw/subscriptions",
      "organizations_url": "https://api.github.com/users/arhontmw/orgs",
      "repos_url": "https://api.github.com/users/arhontmw/repos",
      "events_url": "https://api.github.com/users/arhontmw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arhontmw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-04T16:24:53Z",
    "updated_at": "2019-12-04T20:34:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nreport a bug\r\n\r\n**What is the current behavior?**\r\nVideo: https://yadi.sk/i/drnRHvyN2KH-jw\r\nDemo: https://codesandbox.io/embed/react-example-3l3hz?fontsize=14&hidenavigation=1&theme=dark\r\n\r\nSteps to reproduce:\r\n1. Open the demo on Android device\r\n2. Scroll to the bottom of the list\r\n3. Wait until the list is reordered\r\n4. Try to scroll up - you'll see that the list is automatically scrolled to the top or to the point near the top \r\n\r\nNote: could not reproduce this issue on iOS Safari\r\n\r\n**What is the expected behavior?**\r\nA browser should not scroll to the top of the list when items' reorder is happened\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- \"react\": \"16.8.5\"\r\n- \"react-dom\": \"16.8.5\"\r\n- \"react-redux\": \"^5.0.5\"\r\n- Android 7.1.1, Nexus 6 Build/N6F27M (could not reproduce on iOS)\r\n- Chrome 78.0.3904.108"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17527",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17527/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17527/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17527/events",
    "html_url": "https://github.com/facebook/react/issues/17527",
    "id": 532756266,
    "node_id": "MDU6SXNzdWU1MzI3NTYyNjY=",
    "number": 17527,
    "title": "Suspense priority warning does not work for any hook except the first one per component",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "lunaruan",
      "id": 2735514,
      "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lunaruan",
      "html_url": "https://github.com/lunaruan",
      "followers_url": "https://api.github.com/users/lunaruan/followers",
      "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
      "organizations_url": "https://api.github.com/users/lunaruan/orgs",
      "repos_url": "https://api.github.com/users/lunaruan/repos",
      "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lunaruan/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "lunaruan",
        "id": 2735514,
        "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lunaruan",
        "html_url": "https://github.com/lunaruan",
        "followers_url": "https://api.github.com/users/lunaruan/followers",
        "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
        "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
        "organizations_url": "https://api.github.com/users/lunaruan/orgs",
        "repos_url": "https://api.github.com/users/lunaruan/repos",
        "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lunaruan/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-04T15:24:49Z",
    "updated_at": "2020-01-08T19:07:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "The code that checks for high priority updates only checks the first hook on the component:\r\n\r\nhttps://github.com/facebook/react/blob/5064c7f6aa2b46469ac601cc851640e91ec340a9/packages/react-reconciler/src/ReactFiberWorkLoop.js#L2889-L2891\r\n\r\n`workInProgress.memoizedState` is the first hook.\r\n\r\nIt should loop through all the hooks instead:\r\n\r\n```js\r\nlet firstHook = workInProgress.memoizedState;\r\nif (firstHook !==  null) {\r\n  let hook = firstHook;\r\n  do {\r\n    // Stuff goes here\r\n    hook = hook.next;\r\n  } while (hook !== firstHook)\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17526",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17526/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17526/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17526/events",
    "html_url": "https://github.com/facebook/react/issues/17526",
    "id": 532696818,
    "node_id": "MDU6SXNzdWU1MzI2OTY4MTg=",
    "number": 17526,
    "title": "Triggering suspense with rejected promise causes re-render instead of error boundary",
    "user": {
      "login": "joeldenning",
      "id": 5524384,
      "node_id": "MDQ6VXNlcjU1MjQzODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5524384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joeldenning",
      "html_url": "https://github.com/joeldenning",
      "followers_url": "https://api.github.com/users/joeldenning/followers",
      "following_url": "https://api.github.com/users/joeldenning/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeldenning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joeldenning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeldenning/subscriptions",
      "organizations_url": "https://api.github.com/users/joeldenning/orgs",
      "repos_url": "https://api.github.com/users/joeldenning/repos",
      "events_url": "https://api.github.com/users/joeldenning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joeldenning/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-04T13:49:31Z",
    "updated_at": "2019-12-05T07:12:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis *might* be a bug. @gaearon and @sebmarkbage shared differing opinions on it [in this twitter thread](https://twitter.com/dan_abramov/status/1202045662189228032)\r\n\r\n**What is the current behavior?**\r\n\r\nIf you throw a promise that rejects from a react component's render function, that rejection will be completely ignored. It will not show up in browser console, nor will it trigger a React error boundary. Instead, it will trigger a re-render (the same as if the promise had resolved).\r\n\r\n[Codepen example](https://codepen.io/joeldenning/pen/bGNNQJb?editors=1010)\r\n\r\n**What is the expected behavior?**\r\n\r\nMy expectation was that the error boundary would be hit and the component would not re-render. [Sebastian's tweet](https://twitter.com/sebmarkbage/status/1202055557718216705?s=20) indicates that that is not the desired behavior, though.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis impacts `react@experimental`, and also `react@>=16.9.0`"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17524",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17524/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17524/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17524/events",
    "html_url": "https://github.com/facebook/react/issues/17524",
    "id": 532625095,
    "node_id": "MDU6SXNzdWU1MzI2MjUwOTU=",
    "number": 17524,
    "title": "React.cloneElement does not have props typing for a forwardedRefComponent",
    "user": {
      "login": "Garethp",
      "id": 709912,
      "node_id": "MDQ6VXNlcjcwOTkxMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/709912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Garethp",
      "html_url": "https://github.com/Garethp",
      "followers_url": "https://api.github.com/users/Garethp/followers",
      "following_url": "https://api.github.com/users/Garethp/following{/other_user}",
      "gists_url": "https://api.github.com/users/Garethp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Garethp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Garethp/subscriptions",
      "organizations_url": "https://api.github.com/users/Garethp/orgs",
      "repos_url": "https://api.github.com/users/Garethp/repos",
      "events_url": "https://api.github.com/users/Garethp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Garethp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-04T11:30:08Z",
    "updated_at": "2019-12-04T20:38:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug report\r\n\r\n**What is the current behavior?**\r\n\r\nVersions Using:\r\n\r\nWhen trying to use `React.cloneElement` on a component that has been wrapped in `forwardRef`, the type checking for the `props` doesn't pick up any props of the base component or the ref. Example:\r\n\r\n```typescript\r\nimport * as React from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport { FunctionComponent } from \"react\";\r\nimport { RefObject } from \"react\";\r\nimport { useImperativeHandle } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { ReactElement } from \"react\";\r\n\r\nexport type DemoProps = {\r\n  isValid?: () => boolean;\r\n};\r\n\r\nexport type DemoRef = {\r\n  isValid: () => boolean;\r\n};\r\n\r\nconst Demo: FunctionComponent<DemoProps> = (\r\n  { isValid = () => true },\r\n  ref: RefObject<DemoRef>\r\n) => {\r\n  useImperativeHandle(ref, () => ({\r\n    isValid\r\n  }));\r\n  return (\r\n    <React.Fragment>\r\n      <div></div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst forwardedDemoRef = forwardRef<DemoRef, DemoProps>(Demo);\r\n\r\ntype Props = {\r\n  children: ReactElement<typeof forwardedDemoRef>;\r\n};\r\n\r\nconst DemoContainer = ({ children }: Props) => {\r\n  const ref = useRef<typeof forwardedDemoRef>(null);\r\n\r\n  return React.cloneElement(children, { ref: ref });\r\n};\r\n```\r\n\r\nThe typescript compiler will have the following error message:\r\n\r\n```\r\nTS2769: No overload matches this call.   The last overload gave the following error.     Argument of type '{ ref: React.RefObject<React.ForwardRefExoticComponent<DemoProps & React.RefAttributes<DemoRef>>>; }' is not assignable to parameter of type 'Partial<ForwardRefExoticComponent<DemoProps & RefAttributes<DemoRef>>> & Attributes'.       Object literal may only specify known properties, and 'ref' does not exist in type 'Partial<ForwardRefExoticComponent<DemoProps & RefAttributes<DemoRef>>> & Attributes'.  index.d.ts(292, 14): The last overload is declared here.\r\n```\r\n\r\nWhat's happening here is that `Partial<ForwardRefExoticComponent<DemoProps & RefAttributes<unknown>>> & Attributes` doesn't expose the `DemoProps` or `RefAttribute` through the base `ExoticComponent` type that `ForwardedRefExoticComponent` extends.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe typescript compiler should be aware of the properties `ref` and `isValid` through the `DemoProps & RefAttributes<DemoRef>` type that's being passed into `ForwardedRefExoticComponent` and should not give an error about `ref` not existing on that type\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\n@types/react: 16.9.14\r\nreact: 16.9.14\r\ntypescript: 3.7.2\r\n```\r\n\r\nHave not tested in previous versions of React"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17515",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17515/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17515/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17515/events",
    "html_url": "https://github.com/facebook/react/issues/17515",
    "id": 532330397,
    "node_id": "MDU6SXNzdWU1MzIzMzAzOTc=",
    "number": 17515,
    "title": "Strange behaviour of <SuspenseList revealOrder=\"forwards\"/> in concurrent mode",
    "user": {
      "login": "dubzzz",
      "id": 5300235,
      "node_id": "MDQ6VXNlcjUzMDAyMzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5300235?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dubzzz",
      "html_url": "https://github.com/dubzzz",
      "followers_url": "https://api.github.com/users/dubzzz/followers",
      "following_url": "https://api.github.com/users/dubzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/dubzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dubzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dubzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/dubzzz/orgs",
      "repos_url": "https://api.github.com/users/dubzzz/repos",
      "events_url": "https://api.github.com/users/dubzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dubzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-12-03T23:13:30Z",
    "updated_at": "2020-01-04T20:20:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "_Behaviour looks pretty strange in my opinion but it might be the expected one. I just wanted to open an issue in case it was not. Please note that it is relative to the coming concurrent mode. Please feel free to close if it is not considered as a bug._\r\n\r\n**What is the current behavior?**\r\n\r\n_In concurrent mode_\r\n\r\nThe output of the following scenario looks strange to me. I'd have expected to have either `Loading A / Loading C / Loading C` or `Loading A / C / C`. (`A`, `B`, `C` are described right after)\r\n\r\nHere is the scenario ([live demo with concurrent mode enabled](https://dubzzz.github.io/react-suspenselist-bug/build/)):\r\n\r\n1. Render:\r\n```jsx\r\nrender(\r\n  <SuspenseList revealOrder=\"forwards\">\r\n    <Suspense fallback={<span>Loading B</span>}>\r\n      <B />\r\n    </Suspense>\r\n    <Suspense fallback={<span>Loading C</span>}>\r\n      <C />\r\n    </Suspense>\r\n  </SupenseList>\r\n)\r\n```\r\n\r\n2. Resolve `B` and `C`\r\n\r\n3. (Re-)render:\r\n```jsx\r\nrender(\r\n  <SuspenseList revealOrder=\"forwards\">\r\n    <Suspense fallback={<span>Loading A</span>}>\r\n      <A />\r\n    </Suspense>\r\n    <Suspense fallback={<span>Loading C</span>}>\r\n      <C />\r\n    </Suspense>\r\n    <Suspense fallback={<span>Loading C</span>}>\r\n      <C />\r\n    </Suspense>\r\n  </SupenseList>\r\n)\r\n```\r\n\r\n4. Output is: `Loading A / C / Loading C`\r\n\r\nWith:\r\n\r\n```jsx\r\n// You can considerer the following:\r\nconst A = React.lazy(() => import('./A'));\r\nconst B = React.lazy(() => import('./B'));\r\nconst C = React.lazy(() => import('./C'));\r\n```\r\nIn my code: https://github.com/dubzzz/react-suspenselist-bug/blob/master/src/App.js#L189_L205\r\n\r\n**What is the expected behavior?**\r\n\r\nI'd have expected to have either `Loading A / Loading C / Loading C` or `Loading A / C / C`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: `master` branch\r\nReact: `0.0.0-experimental-b53ea6ca0`\r\n\r\n**How did I found this bug?**\r\n\r\nThis _potential bug_ has been discovered while I was trying to run property based tests based on [fast-check](https://github.com/dubzzz/fast-check/) against React library.\r\n\r\nSee https://github.com/dubzzz/react/commit/79d49ed85c34a5339f1d3163a0c6e99eddaf4405\r\n\r\nIn my test I was assessing the following properties:\r\n- `\"together\"`: only renders when all components are ready (test covers complex and deep structures containing nested `<SuspenseList revealOrder=\"together\" />` and `<Suspense />` referencing potentially multiple times the same `Component`)\r\n- `\"forwards\"`: only renders components up to the last resolved one, all components after this one will be considered as unresolved"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17495",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17495/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17495/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17495/events",
    "html_url": "https://github.com/facebook/react/issues/17495",
    "id": 530707456,
    "node_id": "MDU6SXNzdWU1MzA3MDc0NTY=",
    "number": 17495,
    "title": "ConcurrentMode suspend child alongside of input",
    "user": {
      "login": "MHA15",
      "id": 30382711,
      "node_id": "MDQ6VXNlcjMwMzgyNzEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/30382711?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MHA15",
      "html_url": "https://github.com/MHA15",
      "followers_url": "https://api.github.com/users/MHA15/followers",
      "following_url": "https://api.github.com/users/MHA15/following{/other_user}",
      "gists_url": "https://api.github.com/users/MHA15/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MHA15/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MHA15/subscriptions",
      "organizations_url": "https://api.github.com/users/MHA15/orgs",
      "repos_url": "https://api.github.com/users/MHA15/repos",
      "events_url": "https://api.github.com/users/MHA15/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MHA15/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-01T10:17:18Z",
    "updated_at": "2019-12-30T15:37:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nafter first click on button it's just fine \r\nafter 3 sec(after suspend mode finished) when you click on button again and start typing in input it will not show suspend fallback and it will wait on all 3 second (seems to `timeoutMs` is infinity now)\r\nanother time click on button (after suspend finished) this time we will not see \"wait\" phrase on button and it seems that `timeoutMs` is zero this time\r\n\r\nhttps://codesandbox.io/s/long-shadow-1vhr6\r\n\r\n**What is the expected behavior?**\r\nshow  1.5 second \"wait\" on button and after that show 1.5 second \"child suspend\" in front of it\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm using experimental version and these are new features of concurrent mode \r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17494",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17494/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17494/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17494/events",
    "html_url": "https://github.com/facebook/react/issues/17494",
    "id": 530587842,
    "node_id": "MDU6SXNzdWU1MzA1ODc4NDI=",
    "number": 17494,
    "title": "Undo behavior in controlled input doesn't work as expected",
    "user": {
      "login": "oliviertassinari",
      "id": 3165635,
      "node_id": "MDQ6VXNlcjMxNjU2MzU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oliviertassinari",
      "html_url": "https://github.com/oliviertassinari",
      "followers_url": "https://api.github.com/users/oliviertassinari/followers",
      "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
      "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
      "repos_url": "https://api.github.com/users/oliviertassinari/repos",
      "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-30T14:49:37Z",
    "updated_at": "2019-12-02T12:26:52Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\n1. Load https://codesandbox.io/s/material-demo-8wgfs.\r\n1. Focus the first input.\r\n1. Type <kbd>a</kbd>.\r\n1. Press <kbd>Tab</kbd> to focus the second input.\r\n1. Type <kbd>a</kbd>.\r\n1. Use Ctrl/Cmd+Z or Edit->Undo to undo these two changes.\r\n\r\nNotice that the uncontrollable input change is reverted\r\nNotice that the controllable input change is **not** reverted\r\n\r\n![undo](https://user-images.githubusercontent.com/3165635/69901991-fb405a00-1388-11ea-9085-ddd4131a42a9.gif)\r\n\r\n**What is the expected behavior?**\r\n\r\nuncontrollable & controllable inputs behave identically.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.12.0\r\nChrome 78.0.3904.108\r\nmacOS 10.14.6\r\n\r\nFirst reported in https://github.com/mui-org/material-ui/issues/18545.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17492",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17492/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17492/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17492/events",
    "html_url": "https://github.com/facebook/react/issues/17492",
    "id": 530474955,
    "node_id": "MDU6SXNzdWU1MzA0NzQ5NTU=",
    "number": 17492,
    "title": "react.production.min.js shoud include license notice of object-assign",
    "user": {
      "login": "dynamis",
      "id": 188166,
      "node_id": "MDQ6VXNlcjE4ODE2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/188166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dynamis",
      "html_url": "https://github.com/dynamis",
      "followers_url": "https://api.github.com/users/dynamis/followers",
      "following_url": "https://api.github.com/users/dynamis/following{/other_user}",
      "gists_url": "https://api.github.com/users/dynamis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dynamis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dynamis/subscriptions",
      "organizations_url": "https://api.github.com/users/dynamis/orgs",
      "repos_url": "https://api.github.com/users/dynamis/repos",
      "events_url": "https://api.github.com/users/dynamis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dynamis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-29T19:57:33Z",
    "updated_at": "2019-11-29T19:57:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nreport a bug (MIT license notice violation)\r\n\r\n**What is the current behavior?**\r\nreact.development.js includes license comment about object-assign module but react.production.min.js doesn't.\r\n\r\nhttps://unpkg.com/browse/react@16.12.0/umd/react.development.js (line60~)\r\n```\r\n/*\r\nobject-assign\r\n(c) Sindre Sorhus\r\n@license MIT\r\n*/\r\n```\r\nhttps://unpkg.com/browse/react@16.12.0/umd/react.production.min.js\r\nno comment about object-assign kept (but including the code)\r\n\r\n**What is the expected behavior?**\r\nreact.production.min.js should also keep license comment about object-assign\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.12.0\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17479",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17479/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17479/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17479/events",
    "html_url": "https://github.com/facebook/react/issues/17479",
    "id": 529667125,
    "node_id": "MDU6SXNzdWU1Mjk2NjcxMjU=",
    "number": 17479,
    "title": "Idea: extract “static” component subtrees to HTML during build",
    "user": {
      "login": "devongovett",
      "id": 19409,
      "node_id": "MDQ6VXNlcjE5NDA5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/19409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/devongovett",
      "html_url": "https://github.com/devongovett",
      "followers_url": "https://api.github.com/users/devongovett/followers",
      "following_url": "https://api.github.com/users/devongovett/following{/other_user}",
      "gists_url": "https://api.github.com/users/devongovett/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/devongovett/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/devongovett/subscriptions",
      "organizations_url": "https://api.github.com/users/devongovett/orgs",
      "repos_url": "https://api.github.com/users/devongovett/repos",
      "events_url": "https://api.github.com/users/devongovett/events{/privacy}",
      "received_events_url": "https://api.github.com/users/devongovett/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-11-28T03:05:50Z",
    "updated_at": "2019-12-03T16:55:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "This came up in a [twitter thread](https://twitter.com/devongovett/status/1199862177559171072?s=21) with @gaearon and @aweary and we decided to move the discussion here. I’ll try to summarize the conversation so far below.\n\nThe basic question was whether a build tool could extract the static parts of a component tree ahead of time into HTML, and ship smaller JS to the client with only the dynamic parts. This could have benefits for code size and hydration performance for statically generated sites. It would likely have a smaller impact on dynamically generated server rendered sites, but it’s possible there are static parts that could be extracted there too (e.g. header, footer, article content, etc.).\n\nThere are a couple potential ways to go about this, each with various tradeoffs.\n\n1. Do something like what ember and other template compilers do and generate some kind of IR from components and inject dynamic content into slots at runtime. This would likely require a lot of changes to React itself. @aweary seems to be working on some kind of [compiler](https://twitter.com/aweary/status/1199867044532903937?s=21) to do just that.\n2. Rewrite the JS with something like prepack, similar to what @trueadm did [here](https://github.com/trueadm/ssr-with-prepack-hackathon) (though it sounded like the output was quite variable in size).\n3. Rewrite the component tree to generate a different but equivalent tree with the static parts hoisted out. Similar to this [babel plugin](https://github.com/jamiebuilds/babel-react-optimize) but taken much farther to work at a whole tree level instead of a component level. Also to remove the static parts from JS altogether and generate static HTML to avoid duplicate content in JS and unnecessary hydration cost. Some way to allow static HTML in the middle of a tree to be reused might be needed, but maybe compiling to multiple roots would work?\n\nObviously a lot more thought is needed here. As @gaearon noted, a solid definition of “static” will be important for this discussion. Mine is that it could be rendered to HTML and never updated by JS, but perhaps people have other ideas."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17477",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17477/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17477/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17477/events",
    "html_url": "https://github.com/facebook/react/issues/17477",
    "id": 529541142,
    "node_id": "MDU6SXNzdWU1Mjk1NDExNDI=",
    "number": 17477,
    "title": "eventPhase is spoiled (always 3)",
    "user": {
      "login": "droganov",
      "id": 1375299,
      "node_id": "MDQ6VXNlcjEzNzUyOTk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1375299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droganov",
      "html_url": "https://github.com/droganov",
      "followers_url": "https://api.github.com/users/droganov/followers",
      "following_url": "https://api.github.com/users/droganov/following{/other_user}",
      "gists_url": "https://api.github.com/users/droganov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droganov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droganov/subscriptions",
      "organizations_url": "https://api.github.com/users/droganov/orgs",
      "repos_url": "https://api.github.com/users/droganov/repos",
      "events_url": "https://api.github.com/users/droganov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droganov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-27T19:42:48Z",
    "updated_at": "2019-12-02T09:39:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "The problem:\r\nI need to detect if I get target or bubbled event.\r\nI [expect](https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase) eventPhase to be 2 for target event and 3 for bubbled event.\r\n\r\nAt least I can implement that in vanilla js. But as it gets to react I always get 3 instead of 2;\r\n\r\nA testcase:\r\n\r\n```html\r\n<div id=\"app\"></div>\r\n<hr />\r\n<div id=\"wrap\">\r\n      <button id=\"vanillaButton\">Vanilla button</button>\r\n</div>\r\n```\r\n\r\n```\r\n#wrap {\r\n  padding: 16px;\r\n  outline: 1px dotted;\r\n}\r\n```\r\n\r\n```javascript\r\nconst vanillaButton = document.getElementById('vanillaButton');\r\nconst wrap = document.getElementById('wrap');\r\nconst app = document.getElementById('app');\r\n\r\nfunction handleClick(event) {\r\n  const safeEvent = event.nativeEvent || event;\r\n  console.log('click', event.eventPhase, safeEvent.eventPhase);\r\n}\r\n\r\nconst ReactButton = () => <button onClick={handleClick}>React Button</button>;\r\n\r\n\r\nwrap.addEventListener('click', handleClick);\r\n\r\n\r\nReactDOM.render(<ReactButton />, app);\r\n```\r\n\r\nIn this case:\r\nVanilla button is expected to trace 3 — yes\r\nWrap is expected to trace 2 — yes\r\nReact button is expected to trace 2 — no, got 3"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17476",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17476/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17476/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17476/events",
    "html_url": "https://github.com/facebook/react/issues/17476",
    "id": 529483157,
    "node_id": "MDU6SXNzdWU1Mjk0ODMxNTc=",
    "number": 17476,
    "title": "Rendering a `String` class instance in an expression renders each letter as a text node",
    "user": {
      "login": "subyraman",
      "id": 4042656,
      "node_id": "MDQ6VXNlcjQwNDI2NTY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4042656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subyraman",
      "html_url": "https://github.com/subyraman",
      "followers_url": "https://api.github.com/users/subyraman/followers",
      "following_url": "https://api.github.com/users/subyraman/following{/other_user}",
      "gists_url": "https://api.github.com/users/subyraman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subyraman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subyraman/subscriptions",
      "organizations_url": "https://api.github.com/users/subyraman/orgs",
      "repos_url": "https://api.github.com/users/subyraman/repos",
      "events_url": "https://api.github.com/users/subyraman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subyraman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-11-27T17:23:21Z",
    "updated_at": "2019-12-02T09:42:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nIf you attempt to render a `String`  in an expression, it will render each letter as a child node.\r\n\r\nFrom an accessibility standpoint, this does matter. A screen reader like Apple's VoiceOver utility will attempt to read every text node, meaning that it will attempt to read each letter. This would mean an impacted experience for blind users. \r\n\r\nFrom a display perspective, this doesn't matter, because browsers will group the nodes next to each other, inline. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/string-constructor-issue-f5t5x\r\n\r\n- Open the sandbox in a new window. \r\n- Examine the DOM. See that text nodes are created for each letter from the rendered `String` instance. \r\n- Open Apple's VoiceOver and read the page. Hear that all letters in the rendered `String` instance are spelled out, instead of the words being spoken. \r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect a `String` instance to be rendered the same as a `string` literal type. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nHappening on React DOM 16.8.6, Chrome 80.0, Mac OSX"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17474",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17474/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17474/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17474/events",
    "html_url": "https://github.com/facebook/react/issues/17474",
    "id": 529309876,
    "node_id": "MDU6SXNzdWU1MjkzMDk4NzY=",
    "number": 17474,
    "title": "Hooks: Calling setState with the SAME value multiple times, evaluates the component function up-to 2 times",
    "user": {
      "login": "rwanyoike",
      "id": 3677497,
      "node_id": "MDQ6VXNlcjM2Nzc0OTc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3677497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rwanyoike",
      "html_url": "https://github.com/rwanyoike",
      "followers_url": "https://api.github.com/users/rwanyoike/followers",
      "following_url": "https://api.github.com/users/rwanyoike/following{/other_user}",
      "gists_url": "https://api.github.com/users/rwanyoike/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rwanyoike/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rwanyoike/subscriptions",
      "organizations_url": "https://api.github.com/users/rwanyoike/orgs",
      "repos_url": "https://api.github.com/users/rwanyoike/repos",
      "events_url": "https://api.github.com/users/rwanyoike/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rwanyoike/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-27T12:14:54Z",
    "updated_at": "2019-12-18T20:24:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nUsing the State hook, calling `setXYZ()` with the same value multiple times causes the component function to be evaluated more than once (up-to 2 times). I don't mean re-rendered, but a re-evaluation of its function.\r\n\r\nScenario 1 (OK): \r\n\r\n- the component function is evaluated, initial render `useState(1)`\r\n- click button => `setState(1)`\r\n- the component function is not re-evaluated. :heavy_check_mark:\r\n- click button again => `setState(1)`\r\n- the component function is not re-evaluated.\r\n- click button again => `setState(1)`\r\n- the component function is not re-evaluated.\r\n- etc.\r\n\r\nScenario 2:\r\n\r\n- the component function is evaluated, initial render `useState(1)`\r\n- click button => `setState(2)`\r\n- the component function IS re-evaluated, component re-rendered :heavy_check_mark:\r\n- click button again => `setState(2)`\r\n- the component function **IS evaluated AGAIN** :negative_squared_cross_mark: \r\n- click button again => `setState(2)`\r\n- the component function is not re-evaluated.\r\n- click button again => `setState(2)`\r\n- the component function is not re-evaluated.\r\n- etc.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/qf103zvj/ \r\n\r\n**What is the expected behavior?**\r\n\r\nJust as Scenario 1, I'd expect ONLY one re-evaluation of the component function.\r\n\r\nScenario 2:\r\n\r\n- the component function is evaluated, initial render `useState(1)`\r\n- click button => `setState(2)`\r\n- the component function IS re-evaluated, component re-rendered :heavy_check_mark:\r\n- click button again => `setState(2)`\r\n- the component function is not re-evaluated. :heavy_check_mark:\r\n- click button again => `setState(2)`\r\n- the component function is not re-evaluated.\r\n- etc.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome 78, Firefox 70, React 16; Both macOS, Linux. Unsure about previous versions of React."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17473",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17473/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17473/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17473/events",
    "html_url": "https://github.com/facebook/react/pull/17473",
    "id": 529262758,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ2MTcxMTMz",
    "number": 17473,
    "title": "React Devtools Component: Add hotkeys to start inspecting node",
    "user": {
      "login": "gejimayu",
      "id": 25560419,
      "node_id": "MDQ6VXNlcjI1NTYwNDE5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25560419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gejimayu",
      "html_url": "https://github.com/gejimayu",
      "followers_url": "https://api.github.com/users/gejimayu/followers",
      "following_url": "https://api.github.com/users/gejimayu/following{/other_user}",
      "gists_url": "https://api.github.com/users/gejimayu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gejimayu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gejimayu/subscriptions",
      "organizations_url": "https://api.github.com/users/gejimayu/orgs",
      "repos_url": "https://api.github.com/users/gejimayu/repos",
      "events_url": "https://api.github.com/users/gejimayu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gejimayu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-27T10:41:41Z",
    "updated_at": "2019-12-11T08:19:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17473",
      "html_url": "https://github.com/facebook/react/pull/17473",
      "diff_url": "https://github.com/facebook/react/pull/17473.diff",
      "patch_url": "https://github.com/facebook/react/pull/17473.patch"
    },
    "body": "Issue is here https://github.com/facebook/react/issues/17298\r\n\r\nHotkey: Cmd Shift X (mac) or Ctrl Shift X (others)\r\n\r\n![hotkey](https://user-images.githubusercontent.com/25560419/69716735-9c3ed300-1145-11ea-9788-7f311d59bfeb.gif)\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17466",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17466/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17466/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17466/events",
    "html_url": "https://github.com/facebook/react/issues/17466",
    "id": 528921330,
    "node_id": "MDU6SXNzdWU1Mjg5MjEzMzA=",
    "number": 17466,
    "title": "How do suspense and subscriptions interact?",
    "user": {
      "login": "TedDriggs",
      "id": 4805575,
      "node_id": "MDQ6VXNlcjQ4MDU1NzU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4805575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TedDriggs",
      "html_url": "https://github.com/TedDriggs",
      "followers_url": "https://api.github.com/users/TedDriggs/followers",
      "following_url": "https://api.github.com/users/TedDriggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/TedDriggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TedDriggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TedDriggs/subscriptions",
      "organizations_url": "https://api.github.com/users/TedDriggs/orgs",
      "repos_url": "https://api.github.com/users/TedDriggs/repos",
      "events_url": "https://api.github.com/users/TedDriggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TedDriggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929155,
        "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
        "name": "Type: Question",
        "color": "cc317c",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-26T19:15:10Z",
    "updated_at": "2019-12-03T00:22:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nAsk a question\r\n\r\n**What is the current behavior?**\r\nWith `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens:\r\n\r\n1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');`\r\n2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component. \r\n3. The hook returns a [`RemoteData<Pick<Foo, 'name' | 'amount' | 'discounts'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, \"I haven't asked for this data yet\"\r\n4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.\r\n\r\nAt no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete.\r\n\r\nThrowing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component.\r\n\r\nThe only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \"maybe not ready the first time\" case.\r\n\r\nNote: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17453",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17453/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17453/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17453/events",
    "html_url": "https://github.com/facebook/react/pull/17453",
    "id": 528323912,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ1NDA3MDQ2",
    "number": 17453,
    "title": "Add ESM artifacts to build outputs",
    "user": {
      "login": "darthtrevino",
      "id": 113544,
      "node_id": "MDQ6VXNlcjExMzU0NA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/113544?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darthtrevino",
      "html_url": "https://github.com/darthtrevino",
      "followers_url": "https://api.github.com/users/darthtrevino/followers",
      "following_url": "https://api.github.com/users/darthtrevino/following{/other_user}",
      "gists_url": "https://api.github.com/users/darthtrevino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darthtrevino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darthtrevino/subscriptions",
      "organizations_url": "https://api.github.com/users/darthtrevino/orgs",
      "repos_url": "https://api.github.com/users/darthtrevino/repos",
      "events_url": "https://api.github.com/users/darthtrevino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darthtrevino/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-25T20:38:43Z",
    "updated_at": "2019-12-02T17:57:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17453",
      "html_url": "https://github.com/facebook/react/pull/17453",
      "diff_url": "https://github.com/facebook/react/pull/17453.diff",
      "patch_url": "https://github.com/facebook/react/pull/17453.patch"
    },
    "body": "## Overview\r\nContinuation on #13321.  This PR adds ESM outputs to most libraries - excluding reconciler, devtools, and react-native libraries. There's still some more work to be done WRT verifying the ESM output, but I think it's at a point where it's ready for comments to see if it's worth pursuing further.\r\n\r\n#### TODO\r\n- [x] CI: test-package-structure script should run on build\r\n    - [x] Note: this needs NodeJS 13.2+ - a Github action workflow has been added for this check in the meantime - [sample output here](https://github.com/darthtrevino/react/commit/9df712532d6cb28f2affee1ebd8ff1f6249a358c/checks?check_suite_id=336225429).\r\n- [x] restore legacy-mode support for fb builds. (added custom babel-transformer from #13356)\r\n- [x] esm dependencies\r\n    - [x] scheduler subpath imports for mjs\r\n    - [x] When [prop-types](https://github.com/facebook/prop-types) is esm, the following packages can add esm builds. However, prop-types cannot be updated for esm support until `react-is` is published with esm support, which is part of this PR..\r\n         * react\r\n         * react-dom\r\n         * react-debug-tools\r\n         * create-subscription\r\n         * use-subscription\r\n         * react-cache\r\n- [x] verify esm output is importable (check-packages script, with `--experimental-conditional-exports` flag)\r\n- [x] make the package.json structures actually align to dual-package spec and not the de-facto \"module\" field\r\n- [x] minify esm production (note - used terser until we can get closure compiler working on ESM)\r\n- [x] verify bundle structures (e.g. packages that declare a main or module script actually have those scripts present).\r\n- [x] pkgs with no index.js, should have no index.mjs\r\n- [x] pkgs with named exports have no exports in index.mjs\r\n- [x] esm reconciler packages? (skip for now)\r\n- [x] add `module` fields to packages\r\n\r\n## Artifacts\r\nBundles may be configured with the additional build targets `ESM_DEV` and `ESM_PROD`. The build output will generate the following files:\r\n```\r\nesm/<package_name>.development.mjs\r\nesm/<package_name>.production.min.mjs\r\n```\r\n\r\n## Module Entry\r\nPackages that support ESM are structured using the [Dual CommonJS/ESModules Pattern](https://nodejs.org/dist/latest-v13.x/docs/api/esm.html#esm_dual_commonjs_es_module_packages) using the conditional exports feature.\r\n\r\nPackages may define an `__exports` field to support ESM. This is prefixed with a double-underscore to avoid file resolution issues with build. (e.g. import <package/src/x> will break if exports is set during build).  During build each package's __exports field is assigned into the `exports` field of the final build.\r\n\r\nPackages may also define top-level `.mjs` files in the `npm/` folders, similar to how they currently include top-level `index.js` files. These can be used to define the modular API.\r\n\r\n```json5\r\n{\r\n   \"name\": \"react-x\",\r\n   \"version\": \"16.derp\",\r\n   \"main\": \"index.js\",\r\n  // will be turned into \"exports\" in build step\r\n   \"__exports\": { \r\n     // top-level import is under \".\"\r\n      \".\": {\r\n         // Note: relative imports are important here\r\n         \"require\": \"./index.js\",\r\n         \"default\": \"./index.mjs\"\r\n      },\r\n      \"./subpath_import\": {\r\n         \"require: \"./subpath_import.js\",\r\n         \"require: \"./subpath_import.mjs\",\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n### Verification\r\nModule structure is verified with a new script: test-package-structure, which is performed after the packages are built. This script depends on NodeJS >= 13.2 with the`--experimantal-conditional-exports` flag. The goal of this script is to ensure that packages are aligned with future NodeJS specifications for ES Modules. This script verifies the following invariants over each built package:\r\n\r\n* If `main` field is present in package.json, the file it references exists.\r\n* If an `exports` specification exists in package.json, the files it references exist.\r\n* The entries in `files` for each package.json exist.\r\n* The package can be included with a `require` statement\r\n* Each entry in `exports` can be included with `require()` and `import()`\r\n\r\nSample Output:\r\nsample package validator output:\r\n\r\n```\r\n📦 create-subscription\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ require('create-subscription') doesn't throw\r\n\t✓ require('create-subscription') has valid exports\r\n 📦 eslint-plugin-react-hooks\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ require('eslint-plugin-react-hooks') doesn't throw\r\n\t✓ require('eslint-plugin-react-hooks') has valid exports\r\n\t✓ require('eslint-plugin-react-hooks') doesn't throw\r\n\t✓ require('eslint-plugin-react-hooks') has valid exports\r\n\t✓ import('eslint-plugin-react-hooks') has valid exports\r\n 📦 jest-react\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ require('jest-react') doesn't throw\r\n\t✓ require('jest-react') has valid exports\r\n\t✓ require('jest-react') doesn't throw\r\n\t✓ require('jest-react') has valid exports\r\n\t✓ import('jest-react') has valid exports\r\n 📦 react\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ require('react') doesn't throw\r\n\t✓ require('react') has valid exports\r\n 📦 react-art\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ pkg.files@[Circle.js] exists\r\n\t✓ pkg.files@[Rectangle.js] exists\r\n\t✓ pkg.files@[Wedge.js] exists\r\n\t✓ require('react-art') doesn't throw\r\n\t✓ require('react-art') has valid exports\r\n 📦 react-cache\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ require('react-cache') doesn't throw\r\n\t✓ require('react-cache') has valid exports\r\n\t✓ require('react-cache') doesn't throw\r\n\t✓ require('react-cache') has valid exports\r\n\t✓ import('react-cache') has valid exports\r\n 📦 react-debug-tools\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ require('react-debug-tools') doesn't throw\r\n\t✓ require('react-debug-tools') has valid exports\r\n\t✓ require('react-debug-tools') doesn't throw\r\n\t✓ require('react-debug-tools') has valid exports\r\n\t✓ import('react-debug-tools') has valid exports\r\n 📦 react-dom\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[profiling.js] exists\r\n\t✓ pkg.files@[server.js] exists\r\n\t✓ pkg.files@[server.browser.js] exists\r\n\t✓ pkg.files@[server.node.js] exists\r\n\t✓ pkg.files@[test-utils.js] exists\r\n\t✓ pkg.files@[unstable-fizz.js] exists\r\n\t✓ pkg.files@[unstable-fizz.browser.js] exists\r\n\t✓ pkg.files@[unstable-fizz.node.js] exists\r\n\t✓ pkg.files@[unstable-native-dependencies.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ require('react-dom') doesn't throw\r\n\t✓ require('react-dom') has valid exports\r\n 📦 react-flight\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ require('react-flight') doesn't throw\r\n\t✓ require('react-flight') has valid exports\r\n 📦 react-flight-dom-webpack\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[server.js] exists\r\n\t✓ pkg.files@[server.browser.js] exists\r\n\t✓ pkg.files@[server.node.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ require('react-flight-dom-webpack') doesn't throw\r\n\t✓ require('react-flight-dom-webpack') has valid exports\r\n\t✓ require('react-flight-dom-webpack') doesn't throw\r\n\t✓ require('react-flight-dom-webpack') has valid exports\r\n\t✓ import('react-flight-dom-webpack') has valid exports\r\n 📦 react-is\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ require('react-is') doesn't throw\r\n\t✓ require('react-is') has valid exports\r\n\t✓ require('react-is') doesn't throw\r\n\t✓ require('react-is') has valid exports\r\n\t✓ import('react-is') has valid exports\r\n 📦 react-noop-renderer\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[persistent.js] exists\r\n\t✓ pkg.files@[server.js] exists\r\n\t✓ pkg.files@[flight-client.js] exists\r\n\t✓ pkg.files@[flight-server.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ require('react-noop-renderer') doesn't throw\r\n\t✓ require('react-noop-renderer') has valid exports\r\n\t✓ require('react-noop-renderer') doesn't throw\r\n\t✓ require('react-noop-renderer') has valid exports\r\n\t✓ import('react-noop-renderer') has valid exports\r\n 📦 react-reconciler\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[persistent.js] exists\r\n\t✓ pkg.files@[reflection.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ require('react-reconciler') doesn't throw\r\n\t✓ require('react-reconciler') has valid exports\r\n 📦 react-server\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[flight.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ require('react-server') doesn't throw\r\n\t✓ require('react-server') has valid exports\r\n 📦 react-test-renderer\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[shallow.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ require('react-test-renderer') doesn't throw\r\n\t✓ require('react-test-renderer') has valid exports\r\n 📦 scheduler\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[index.mjs] exists\r\n\t✓ pkg.files@[tracing.js] exists\r\n\t✓ pkg.files@[tracing.mjs] exists\r\n\t✓ pkg.files@[tracing-profiling.js] exists\r\n\t✓ pkg.files@[unstable_mock.js] exists\r\n\t✓ pkg.files@[unstable_mock.mjs] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ pkg.files@[umd/] exists\r\n\t✓ pkg.files@[esm/] exists\r\n\t✓ pkg.exports[.].require file exists\r\n\t✓ pkg.exports[.].default file exists\r\n\t✓ pkg.exports[./unstable_mock].require file exists\r\n\t✓ pkg.exports[./unstable_mock].default file exists\r\n\t✓ pkg.exports[./tracing].require file exists\r\n\t✓ pkg.exports[./tracing].default file exists\r\n\t✓ require('scheduler') doesn't throw\r\n\t✓ require('scheduler') has valid exports\r\n\t✓ require('scheduler') doesn't throw\r\n\t✓ require('scheduler') has valid exports\r\n\t✓ import('scheduler') has valid exports\r\n\t✓ require('scheduler/unstable_mock') doesn't throw\r\n\t✓ require('scheduler/unstable_mock') has valid exports\r\n\t✓ import('scheduler/unstable_mock') has valid exports\r\n\t✓ require('scheduler/tracing') doesn't throw\r\n\t✓ require('scheduler/tracing') has valid exports\r\n\t✓ import('scheduler/tracing') has valid exports\r\n 📦 use-subscription\r\n\t✓ pkg.main file exists\r\n\t✓ pkg.files@[LICENSE] exists\r\n\t✓ pkg.files@[README.md] exists\r\n\t✓ pkg.files@[index.js] exists\r\n\t✓ pkg.files@[cjs/] exists\r\n\t✓ require('use-subscription') doesn't throw\r\n\t✓ require('use-subscription') has valid exports\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17452",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17452/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17452/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17452/events",
    "html_url": "https://github.com/facebook/react/issues/17452",
    "id": 528280757,
    "node_id": "MDU6SXNzdWU1MjgyODA3NTc=",
    "number": 17452,
    "title": "useState hook different behavior than class with react context",
    "user": {
      "login": "oscarmorrison",
      "id": 1651212,
      "node_id": "MDQ6VXNlcjE2NTEyMTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1651212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oscarmorrison",
      "html_url": "https://github.com/oscarmorrison",
      "followers_url": "https://api.github.com/users/oscarmorrison/followers",
      "following_url": "https://api.github.com/users/oscarmorrison/following{/other_user}",
      "gists_url": "https://api.github.com/users/oscarmorrison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oscarmorrison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oscarmorrison/subscriptions",
      "organizations_url": "https://api.github.com/users/oscarmorrison/orgs",
      "repos_url": "https://api.github.com/users/oscarmorrison/repos",
      "events_url": "https://api.github.com/users/oscarmorrison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oscarmorrison/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-11-25T19:09:32Z",
    "updated_at": "2019-12-02T22:17:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBUG\r\n\r\n**What is the current behavior?**\r\n\r\nI have a PageContext file that has some shared context among a number of components. The when using the class version, using this.state, it acts as expected, and all components utilizing pagecontext update when the page context is updated. HOWEVER if I use the functional component, `PageContextProvider` with the `useState` hook, it does NOT act as expected, and not all updates to the context rerender dependent components.\r\n\r\n```\r\n//PageContext.jsx\r\nimport React, { useState } from 'react';\r\n\r\nconst PageContext = React.createContext();\r\n\r\n// Using state hook, functional (does not work as expect)\r\nconst PageContextProvider = (props) => {\r\n\r\n    const [ page, setPage ] = useState(null);\r\n\r\n    console.log('PageContextProvider', page);\r\n    return (\r\n        <PageContext.Provider value={[page, setPage]}>\r\n            {props.children}\r\n        </PageContext.Provider>\r\n    );\r\n}\r\n// Using class (this works as expected)\r\nclass PageContextProvider extends React.Component {\r\n    state = {}\r\n\r\n    setPage = (page) => {\r\n        console.log('setPage', page);\r\n        return this.setState({page});\r\n    }\r\n\r\n    render = () => {\r\n        const { page } = this.state;\r\n        console.log('render PageContextProvider', page);\r\n\r\n        return (\r\n            <PageContext.Provider value={[page, this.setPage]}>\r\n                {this.props.children}\r\n            </PageContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport { PageContext };\r\n\r\nexport default PageContextProvider;\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe useState hook wrapper around the context, should act as the class one does\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact@16.11.0\r\nlatest chrome.\r\n\r\n\r\nWhat am I missing here? \r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17448",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17448/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17448/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17448/events",
    "html_url": "https://github.com/facebook/react/issues/17448",
    "id": 527748482,
    "node_id": "MDU6SXNzdWU1Mjc3NDg0ODI=",
    "number": 17448,
    "title": "react-dom logs error to console when form.checkValidity() is called during render",
    "user": {
      "login": "nwoltman",
      "id": 5128013,
      "node_id": "MDQ6VXNlcjUxMjgwMTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5128013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nwoltman",
      "html_url": "https://github.com/nwoltman",
      "followers_url": "https://api.github.com/users/nwoltman/followers",
      "following_url": "https://api.github.com/users/nwoltman/following{/other_user}",
      "gists_url": "https://api.github.com/users/nwoltman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nwoltman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nwoltman/subscriptions",
      "organizations_url": "https://api.github.com/users/nwoltman/orgs",
      "repos_url": "https://api.github.com/users/nwoltman/repos",
      "events_url": "https://api.github.com/users/nwoltman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nwoltman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-24T20:01:28Z",
    "updated_at": "2019-12-05T17:17:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\n`react-dom` logs an error to the console when `.checkValidity()` is called on a form element (from a `ref`) inside the render part of a function component. The error is only logged when `.checkValidity()` returns `false`. This is the error message:\r\n\r\n```\r\nWarning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.\r\n```\r\n\r\nCodeSandbox: https://codesandbox.io/s/pensive-colden-ipuwi\r\n\r\n**What is the expected behavior?**\r\n\r\n~~Nothing should be logged to the console.~~\r\n\r\nA more informative error should be logged to the console (see [comment](https://github.com/facebook/react/issues/17448#issuecomment-558390647)).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact/ReactDOM: 6.10.0 - 6.12.0 (this worked as expected in 6.9.0)\r\nBrowser: Chrome 78, Firefox 70\r\nOS: any"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17446",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17446/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17446/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17446/events",
    "html_url": "https://github.com/facebook/react/issues/17446",
    "id": 527731353,
    "node_id": "MDU6SXNzdWU1Mjc3MzEzNTM=",
    "number": 17446,
    "title": "Why error when rendering more hooks if they maintain order? ...and more",
    "user": {
      "login": "ruifortes",
      "id": 4864714,
      "node_id": "MDQ6VXNlcjQ4NjQ3MTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4864714?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruifortes",
      "html_url": "https://github.com/ruifortes",
      "followers_url": "https://api.github.com/users/ruifortes/followers",
      "following_url": "https://api.github.com/users/ruifortes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruifortes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruifortes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruifortes/subscriptions",
      "organizations_url": "https://api.github.com/users/ruifortes/orgs",
      "repos_url": "https://api.github.com/users/ruifortes/repos",
      "events_url": "https://api.github.com/users/ruifortes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruifortes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-24T17:43:06Z",
    "updated_at": "2019-11-25T09:46:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Hi.\r\n\r\nJust wondering what is the problem to allow a component to render \"less\" hooks that maintain order.\r\n\r\nI ask because I've been using (although not very convincingly) wrapping some components to allow bailing earlier by returning `undefined`. The wrapper would just return the last value in that case.\r\n\r\nI know I could just `useMemo` everywhere but sometimes having to provide default values or adding extra conditionals for some edge cases adds some noise to the code.\r\n\r\nIs there any reason against this method?\r\n\r\nThanks\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17443",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17443/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17443/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17443/events",
    "html_url": "https://github.com/facebook/react/pull/17443",
    "id": 527665930,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0ODg0NDU0",
    "number": 17443,
    "title": "Fix missed warning when passing a function (issue 16573)",
    "user": {
      "login": "simbathesailor",
      "id": 5938110,
      "node_id": "MDQ6VXNlcjU5MzgxMTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5938110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simbathesailor",
      "html_url": "https://github.com/simbathesailor",
      "followers_url": "https://api.github.com/users/simbathesailor/followers",
      "following_url": "https://api.github.com/users/simbathesailor/following{/other_user}",
      "gists_url": "https://api.github.com/users/simbathesailor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simbathesailor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simbathesailor/subscriptions",
      "organizations_url": "https://api.github.com/users/simbathesailor/orgs",
      "repos_url": "https://api.github.com/users/simbathesailor/repos",
      "events_url": "https://api.github.com/users/simbathesailor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simbathesailor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-24T08:28:59Z",
    "updated_at": "2020-01-16T15:32:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17443",
      "html_url": "https://github.com/facebook/react/pull/17443",
      "diff_url": "https://github.com/facebook/react/pull/17443.diff",
      "patch_url": "https://github.com/facebook/react/pull/17443.patch"
    },
    "body": "This PR fixes: [https://github.com/facebook/react/issues/16573](https://github.com/facebook/react/issues/16573).\r\n\r\n1. Added one more visitor function to handle expressions.\r\n2. Added test cases for the same\r\n\r\nI have followed all the pre requisites to create this pull request. It's my first PR to the Reactjs . . Putting it in PR to get further feed back.Please let me know the problems if any with this pr, so that i can fix them.\r\nThanks"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17441",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17441/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17441/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17441/events",
    "html_url": "https://github.com/facebook/react/issues/17441",
    "id": 527611927,
    "node_id": "MDU6SXNzdWU1Mjc2MTE5Mjc=",
    "number": 17441,
    "title": "Improve inline svg support for mask and defs",
    "user": {
      "login": "raix",
      "id": 1136718,
      "node_id": "MDQ6VXNlcjExMzY3MTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1136718?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raix",
      "html_url": "https://github.com/raix",
      "followers_url": "https://api.github.com/users/raix/followers",
      "following_url": "https://api.github.com/users/raix/following{/other_user}",
      "gists_url": "https://api.github.com/users/raix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raix/subscriptions",
      "organizations_url": "https://api.github.com/users/raix/orgs",
      "repos_url": "https://api.github.com/users/raix/repos",
      "events_url": "https://api.github.com/users/raix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-23T21:30:01Z",
    "updated_at": "2019-11-27T16:03:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nIn react dom terms a feature _(because it works as expected in Safari - but not in chrome/firefox/ie?)_\r\n\r\n**What is the current behavior?**\r\nGiven we use an inline icon that includes defs or/and mask [Example](https://github.com/raix/react-svg-defs-issue/blob/master/src/App.js#L31-L45)\r\nAnd we reuse this icon in multiple places\r\nWhen the first icon is placed in a div with display \"none\" the reference is hidden (only true if done on the first icon)\r\n\r\n**What is the expected behavior?**\r\nAll icons should render normally without loosing the referenced element.\r\nReference: https://github.com/raix/react-svg-defs-issue/blob/master/src/App.js\r\n\r\n**What fixes it?**\r\nWhen creating a special `Mask` component that keeps a single reference element in a portal / outside the icon itself the problem goes away.\r\n\r\n![svg-issue-using-react](https://user-images.githubusercontent.com/1136718/69485549-529e7180-0e41-11ea-9515-dc0fdf50a189.gif)\r\n\r\n_(We currently convert to svg without `defs` and `mask` as it doesn't work reliable atm.)_\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17440",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17440/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17440/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17440/events",
    "html_url": "https://github.com/facebook/react/issues/17440",
    "id": 527586626,
    "node_id": "MDU6SXNzdWU1Mjc1ODY2MjY=",
    "number": 17440,
    "title": "Shallow rendering with React.memo",
    "user": {
      "login": "henryqdineen",
      "id": 682132,
      "node_id": "MDQ6VXNlcjY4MjEzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/682132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/henryqdineen",
      "html_url": "https://github.com/henryqdineen",
      "followers_url": "https://api.github.com/users/henryqdineen/followers",
      "following_url": "https://api.github.com/users/henryqdineen/following{/other_user}",
      "gists_url": "https://api.github.com/users/henryqdineen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/henryqdineen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/henryqdineen/subscriptions",
      "organizations_url": "https://api.github.com/users/henryqdineen/orgs",
      "repos_url": "https://api.github.com/users/henryqdineen/repos",
      "events_url": "https://api.github.com/users/henryqdineen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/henryqdineen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-11-23T17:45:50Z",
    "updated_at": "2019-12-18T21:41:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I understand that the future of `react-test-render/shallow` is uncertain but I thought I would log this issue anyway. It looks like components wrapped in `React.memo` will not re-render unless props changed. In our case the component is using the `useState` hook and updating state does not re-render when using wrapped in `React.memo()`\r\n\r\nhttps://github.com/facebook/react/blob/54f66731c84e3f141a1c0bc5d32be7cc5d4b9bbf/packages/react-test-renderer/src/ReactShallowRenderer.js#L621-L627\r\n\r\nContrived codesandox example:\r\n\r\nhttps://codesandbox.io/s/sweet-field-ydm0c?fontsize=14&hidenavigation=1&module=%2Fsrc%2Findex.test.js&previewwindow=tests&theme=dark\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17439",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17439/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17439/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17439/events",
    "html_url": "https://github.com/facebook/react/pull/17439",
    "id": 527512452,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0Nzc3NjE5",
    "number": 17439,
    "title": "react-test-renderer: improve findByType() error message",
    "user": {
      "login": "henryqdineen",
      "id": 682132,
      "node_id": "MDQ6VXNlcjY4MjEzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/682132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/henryqdineen",
      "html_url": "https://github.com/henryqdineen",
      "followers_url": "https://api.github.com/users/henryqdineen/followers",
      "following_url": "https://api.github.com/users/henryqdineen/following{/other_user}",
      "gists_url": "https://api.github.com/users/henryqdineen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/henryqdineen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/henryqdineen/subscriptions",
      "organizations_url": "https://api.github.com/users/henryqdineen/orgs",
      "repos_url": "https://api.github.com/users/henryqdineen/repos",
      "events_url": "https://api.github.com/users/henryqdineen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/henryqdineen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-23T05:16:51Z",
    "updated_at": "2019-11-23T05:51:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17439",
      "html_url": "https://github.com/facebook/react/pull/17439",
      "diff_url": "https://github.com/facebook/react/pull/17439.diff",
      "patch_url": "https://github.com/facebook/react/pull/17439.patch"
    },
    "body": "I noticed that The `findByType()` method throws unhelpful error messages when using a string as the `type` argument. For example:\r\n\r\n```\r\ntestInstance.findByType('span');\r\n// Expected 1 but found 2 instances with node type: \"undefined\"\r\n```\r\nI am also running into this when searching for components using `React.memo`. My solution was to use `getComponentName()`. Thanks!\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17437",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17437/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17437/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17437/events",
    "html_url": "https://github.com/facebook/react/pull/17437",
    "id": 527473931,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0NzQ4MjI0",
    "number": 17437,
    "title": "Remove redundant code",
    "user": {
      "login": "camjc",
      "id": 4197647,
      "node_id": "MDQ6VXNlcjQxOTc2NDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4197647?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/camjc",
      "html_url": "https://github.com/camjc",
      "followers_url": "https://api.github.com/users/camjc/followers",
      "following_url": "https://api.github.com/users/camjc/following{/other_user}",
      "gists_url": "https://api.github.com/users/camjc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/camjc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/camjc/subscriptions",
      "organizations_url": "https://api.github.com/users/camjc/orgs",
      "repos_url": "https://api.github.com/users/camjc/repos",
      "events_url": "https://api.github.com/users/camjc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/camjc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-23T00:12:35Z",
    "updated_at": "2019-11-23T00:18:16Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17437",
      "html_url": "https://github.com/facebook/react/pull/17437",
      "diff_url": "https://github.com/facebook/react/pull/17437.diff",
      "patch_url": "https://github.com/facebook/react/pull/17437.patch"
    },
    "body": "`if (typeof nextProp === 'undefined') {` can never be be true, since we `continue` when undefined on line 70.\r\n\r\n**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17436",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17436/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17436/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17436/events",
    "html_url": "https://github.com/facebook/react/issues/17436",
    "id": 527289117,
    "node_id": "MDU6SXNzdWU1MjcyODkxMTc=",
    "number": 17436,
    "title": "What will suspense look like for the streaming case?",
    "user": {
      "login": "benlesh",
      "id": 1540597,
      "node_id": "MDQ6VXNlcjE1NDA1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1540597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benlesh",
      "html_url": "https://github.com/benlesh",
      "followers_url": "https://api.github.com/users/benlesh/followers",
      "following_url": "https://api.github.com/users/benlesh/following{/other_user}",
      "gists_url": "https://api.github.com/users/benlesh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benlesh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benlesh/subscriptions",
      "organizations_url": "https://api.github.com/users/benlesh/orgs",
      "repos_url": "https://api.github.com/users/benlesh/repos",
      "events_url": "https://api.github.com/users/benlesh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benlesh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-22T16:19:21Z",
    "updated_at": "2019-11-22T16:21:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA discussion, at the request of @gaearon. \r\n\r\n### Questions\r\n\r\nI'm very curious what the public API will be for Suspense in streaming cases. The work I do or have pretty much always done in React involves dealing with streams of data, generally coming over a web socket. What will it look like? Will it be easy for users to implement/use? Is a promise/thenable an appropriate type for dealing with this even internally, given that the first value may never show up?\r\n\r\n### Desire\r\n\r\nThe ability to leverage suspense to \"suspend\" until the first of many values arrives from a stream of data coming from any source. For the sake of conversation, we'll say a web socket.\r\n\r\n\r\n### Constraints\r\n\r\n- The first value may never arrive\r\n- The source may close without error, having never provided a value\r\n- There must be an ergonomic teardown mechanism, for example how developers can currently teardown in the returned function of `useEffect` or in `componentWillUnmount`.\r\n- There may be more than one value returned by the streaming source\r\n\r\n### Optional constraints\r\n\r\n- The first N values form the source may be synchronous (followed by asynchronous values)\r\n\r\n### Scenario\r\n\r\nA simple app with two routes, one where the app needs to open a web socket connection and collect streaming data, and the other where the socket connection should be closed. The values from the web socket may take long enough that the developer will want to move to that routed component right away and show some spinner with suspense until the first bit of data arrives. If the user navigates to the first route, then leaves before the first value arrives, what happens?\r\n\r\nMy concern is, that if, even internally, the mechanism is a promise or thenable, there is a chance leaks will be created in the event that the source of that first value is torn down before the first value arrives. The only way, with a thenable or promise, to avoid that chance would be to make sure that the teardown mechanism was somehow tied to the thenable, so that the thenable to be rejected (or resolved) with a known value, such that it will be \"settled\"."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17435",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17435/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17435/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17435/events",
    "html_url": "https://github.com/facebook/react/issues/17435",
    "id": 527243911,
    "node_id": "MDU6SXNzdWU1MjcyNDM5MTE=",
    "number": 17435,
    "title": "Rejecting suspended promise does not automatically go to an error boundary",
    "user": {
      "login": "kentcdodds",
      "id": 1500684,
      "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kentcdodds",
      "html_url": "https://github.com/kentcdodds",
      "followers_url": "https://api.github.com/users/kentcdodds/followers",
      "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
      "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
      "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
      "repos_url": "https://api.github.com/users/kentcdodds/repos",
      "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-22T14:56:16Z",
    "updated_at": "2019-11-22T22:31:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIf [what @gaearon said is true](https://twitter.com/dan_abramov/status/1197853310470021120), then it's a bug of unstable software.\r\n\r\n**What is the current behavior?**\r\n\r\nIf a suspending promise rejects, it does not automatically trigger an error boundary and instead it suspends forever: https://codesandbox.io/s/suspenselist-issues-u9brv\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/69435887-9daf6c00-0cfd-11ea-89b3-86d5368155f5.png)\r\n\r\nHere's the gist of the code:\r\n\r\n```javascript\r\nlet promise = new Promise((resolve, reject) =>\r\n  setTimeout(() => reject(new Error('failed')), 1000),\r\n)\r\nfunction SuspendingComponent() {\r\n  throw promise\r\n}\r\n\r\n// ...\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <ErrorBoundary>\r\n        <Suspense fallback=\"loading...\">\r\n          <SuspendingComponent />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nBased on Dan's tweet, I would expect that when the promise rejects, the error boundary would be rendered, but it's not.\r\n\r\nThere's a simple workaround: https://codesandbox.io/s/suspenselist-issues-fxven\r\n\r\nI'm having trouble with that showing the actual error on codesandbox, but here's what it looks like locally:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/69435832-87091500-0cfd-11ea-8012-0010c3ee2c38.png)\r\n\r\nThe gist of the changes:\r\n\r\n```javascript\r\nlet status = 'pending'\r\nlet result\r\nlet promise = new Promise((resolve, reject) =>\r\n  setTimeout(() => reject(new Error('failed')), 1000),\r\n).then(\r\n  r => {\r\n    result = r\r\n    status = 'success'\r\n  },\r\n  e => {\r\n    result = e\r\n    status = 'error'\r\n  },\r\n)\r\n\r\nfunction SuspendingComponent() {\r\n  if (status === 'pending') throw promise\r\n  if (status === 'error') throw result\r\n  return result\r\n}\r\n```\r\n\r\nThe workaround is basically to store the error and throw it during the render phase. I was under the impression this was the official suggestion based on the `wrapPromise` example in the `fakeApi.js` of the codesandboxes linked in [the docs](https://reactjs.org/docs/concurrent-mode-suspense.html#start-fetching-early).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react@0.0.0-experimental-b53ea6ca0` and `react-dom@0.0.0-experimental-b53ea6ca0`"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17434",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17434/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17434/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17434/events",
    "html_url": "https://github.com/facebook/react/issues/17434",
    "id": 527192553,
    "node_id": "MDU6SXNzdWU1MjcxOTI1NTM=",
    "number": 17434,
    "title": "useEffect executes return block before the main one",
    "user": {
      "login": "agonqorolli",
      "id": 44090512,
      "node_id": "MDQ6VXNlcjQ0MDkwNTEy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/44090512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agonqorolli",
      "html_url": "https://github.com/agonqorolli",
      "followers_url": "https://api.github.com/users/agonqorolli/followers",
      "following_url": "https://api.github.com/users/agonqorolli/following{/other_user}",
      "gists_url": "https://api.github.com/users/agonqorolli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agonqorolli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agonqorolli/subscriptions",
      "organizations_url": "https://api.github.com/users/agonqorolli/orgs",
      "repos_url": "https://api.github.com/users/agonqorolli/repos",
      "events_url": "https://api.github.com/users/agonqorolli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agonqorolli/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-22T13:22:39Z",
    "updated_at": "2019-11-22T16:09:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nWhen there is a time consuming activity in main block of useEffect, return block gets executed first, then the main block. This is an anti-pattern.\r\n\r\n**Steps to reproduce.**\r\nhttps://codesandbox.io/s/react-hooks-playground-ych47\r\n\r\n**What is the expected behavior?**\r\nIn useEffect hook, return block should always be executed last, and nothing after it, right? It doesn't make sense to do a cleanup before actually doing some activity first.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17432",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17432/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17432/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17432/events",
    "html_url": "https://github.com/facebook/react/issues/17432",
    "id": 527121215,
    "node_id": "MDU6SXNzdWU1MjcxMjEyMTU=",
    "number": 17432,
    "title": "Devtools : highlight box is shown too small.",
    "user": {
      "login": "soulcactus",
      "id": 44562005,
      "node_id": "MDQ6VXNlcjQ0NTYyMDA1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/44562005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soulcactus",
      "html_url": "https://github.com/soulcactus",
      "followers_url": "https://api.github.com/users/soulcactus/followers",
      "following_url": "https://api.github.com/users/soulcactus/following{/other_user}",
      "gists_url": "https://api.github.com/users/soulcactus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soulcactus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soulcactus/subscriptions",
      "organizations_url": "https://api.github.com/users/soulcactus/orgs",
      "repos_url": "https://api.github.com/users/soulcactus/repos",
      "events_url": "https://api.github.com/users/soulcactus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soulcactus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-22T10:43:23Z",
    "updated_at": "2019-11-28T04:33:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nA bug\r\n\r\n**What is the current behavior?**\r\nWhen Chrome devtools is highlighting highlight box is shown too small.\r\n\r\n![image](https://user-images.githubusercontent.com/44562005/69419027-185ca380-0d5f-11ea-8284-8004147dc713.png)\r\n\r\n**What is the expected behavior?**\r\nHighlight box is shown actual template size.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nChrome 78.0.3904.97\r\nReact Developer Tools 4.2.0"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17427",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17427/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17427/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17427/events",
    "html_url": "https://github.com/facebook/react/pull/17427",
    "id": 526827817,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0MjIyMzA4",
    "number": 17427,
    "title": "fix(ReactElement): remove assignment of reserved default props",
    "user": {
      "login": "bpas247",
      "id": 18705892,
      "node_id": "MDQ6VXNlcjE4NzA1ODky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/18705892?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpas247",
      "html_url": "https://github.com/bpas247",
      "followers_url": "https://api.github.com/users/bpas247/followers",
      "following_url": "https://api.github.com/users/bpas247/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpas247/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpas247/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpas247/subscriptions",
      "organizations_url": "https://api.github.com/users/bpas247/orgs",
      "repos_url": "https://api.github.com/users/bpas247/repos",
      "events_url": "https://api.github.com/users/bpas247/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpas247/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-21T20:36:23Z",
    "updated_at": "2019-11-25T18:33:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17427",
      "html_url": "https://github.com/facebook/react/pull/17427",
      "diff_url": "https://github.com/facebook/react/pull/17427.diff",
      "patch_url": "https://github.com/facebook/react/pull/17427.patch"
    },
    "body": "This removes the behavior of assigning default props that are\r\nalso reserved (e.g. `key` and `ref`) props.\r\n\r\nIt might be worth looking into throwing a warning when the end\r\nuser has specified a default prop that is also a reserved prop,\r\nas the reserved props aren't treated like normal props and thus\r\nshouldn't be given arbitrary default values.\r\n\r\nFixes #17393"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17425",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17425/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17425/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17425/events",
    "html_url": "https://github.com/facebook/react/issues/17425",
    "id": 526803319,
    "node_id": "MDU6SXNzdWU1MjY4MDMzMTk=",
    "number": 17425,
    "title": "SuspenseList revealOrder=\"forwards\" has issues when Suspense is nested in another element",
    "user": {
      "login": "kentcdodds",
      "id": 1500684,
      "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kentcdodds",
      "html_url": "https://github.com/kentcdodds",
      "followers_url": "https://api.github.com/users/kentcdodds/followers",
      "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
      "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
      "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
      "repos_url": "https://api.github.com/users/kentcdodds/repos",
      "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-11-21T19:44:06Z",
    "updated_at": "2019-11-22T04:43:19Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSuspenseList is currently experimental, so it's neither. But I think that this should be fixed before it's stable.\r\n\r\n**What is the current behavior?**\r\n\r\n![Screen Recording 2019-11-21 at 12 39 56 PM](https://user-images.githubusercontent.com/1500684/69371223-a6039a80-0c5c-11ea-9fd4-848a3f1672fa.gif)\r\n\r\nNote the 1000ms at the bottom (which should show last based on the `revealOrder`) shows at 2000ms for the nested version.\r\n\r\nThe only difference between those two sets of SuspenseLists is that one has nested the two bottom suspense elements in a `div`. Something like this:\r\n\r\n```javascript\r\nfunction App() {\r\n  return (\r\n    <SuspenseList revealOrder=\"forwards\">\r\n      <Suspense fallback={<div>2000ms loading</div>}>\r\n        <A />\r\n      </Suspense>\r\n      <div> {/* nesting */}\r\n        <Suspense fallback={<div>3000ms loading</div>}>\r\n          <B />\r\n        </Suspense>\r\n        <Suspense fallback={<div>1000ms loading</div>}>\r\n          <C />\r\n        </Suspense>\r\n      </div> {/* nesting */}\r\n    </SuspenseList>\r\n  )\r\n}\r\n```\r\n\r\nhttps://codesandbox.io/s/suspenselist-issues-sdqzb\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect them to behave exactly the same. Nesting things is often necessary for styling reasons.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm experiencing this on `react@0.0.0-experimental-b53ea6ca0` and `react-dom@0.0.0-experimental-b53ea6ca0`. I don't believe this ever worked in previous versions of React."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17420",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17420/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17420/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17420/events",
    "html_url": "https://github.com/facebook/react/issues/17420",
    "id": 526435830,
    "node_id": "MDU6SXNzdWU1MjY0MzU4MzA=",
    "number": 17420,
    "title": "React.createRoot(container).render(<App />) doesn't remove existing container children",
    "user": {
      "login": "martinandert",
      "id": 6715978,
      "node_id": "MDQ6VXNlcjY3MTU5Nzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6715978?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinandert",
      "html_url": "https://github.com/martinandert",
      "followers_url": "https://api.github.com/users/martinandert/followers",
      "following_url": "https://api.github.com/users/martinandert/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinandert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinandert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinandert/subscriptions",
      "organizations_url": "https://api.github.com/users/martinandert/orgs",
      "repos_url": "https://api.github.com/users/martinandert/repos",
      "events_url": "https://api.github.com/users/martinandert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinandert/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-21T08:22:52Z",
    "updated_at": "2019-11-21T13:30:23Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI guess it's a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `ReactDom.createRoot(container).render(<App />)`, if the container has child elements, then these don't get removed when the App component is rendered into the container.\r\n\r\n**CodeSandbox example**\r\n\r\nhttps://codesandbox.io/s/recursing-euler-b3oj7\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect it to behave like `ReactDom.render(<App />, container)`, which clears the contents of the container when the App component is rendered into it.\r\n\r\n**Which versions of React?**\r\n\r\nLatest experimental, see CodeSandbox example.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17419",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17419/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17419/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17419/events",
    "html_url": "https://github.com/facebook/react/issues/17419",
    "id": 526435252,
    "node_id": "MDU6SXNzdWU1MjY0MzUyNTI=",
    "number": 17419,
    "title": "build problem - Missing class properties transform.",
    "user": {
      "login": "valery-lavrik",
      "id": 8047999,
      "node_id": "MDQ6VXNlcjgwNDc5OTk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8047999?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/valery-lavrik",
      "html_url": "https://github.com/valery-lavrik",
      "followers_url": "https://api.github.com/users/valery-lavrik/followers",
      "following_url": "https://api.github.com/users/valery-lavrik/following{/other_user}",
      "gists_url": "https://api.github.com/users/valery-lavrik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/valery-lavrik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/valery-lavrik/subscriptions",
      "organizations_url": "https://api.github.com/users/valery-lavrik/orgs",
      "repos_url": "https://api.github.com/users/valery-lavrik/repos",
      "events_url": "https://api.github.com/users/valery-lavrik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/valery-lavrik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-21T08:21:32Z",
    "updated_at": "2019-11-30T19:04:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "command \"yarn start\" works fine.\r\nbut \"yarn build\" gives an error:\r\n\r\n```\r\n$ yarn build\r\nyarn run v1.7.0\r\n$ node scripts/build.js\r\nCreating an optimized production build...\r\nFailed to compile.\r\n\r\n./node_modules/.../BaseModal/index.js\r\nSyntaxError: ...\\BaseModal\\index.js: Missing class properties transform.\r\n   5 | export default class BaseModal extends Component {\r\n   6 |\r\n>  7 |   static items = []\r\n\r\n```\r\nthe project has established a new.\r\n\r\nto solve the problem, I change in file ./scripts/build.js\r\n```\r\nprocess.env.BABEL_ENV = 'production';\r\nprocess.env.NODE_ENV = 'production';\r\n```\r\non\r\n```\r\nprocess.env.BABEL_ENV = 'development';\r\nprocess.env.NODE_ENV = 'development';\r\n```\r\n\r\nand everything starts to work\r\nbut I think that you can’t do this ..."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17415",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17415/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17415/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17415/events",
    "html_url": "https://github.com/facebook/react/issues/17415",
    "id": 526363035,
    "node_id": "MDU6SXNzdWU1MjYzNjMwMzU=",
    "number": 17415,
    "title": "renderer.toTree missing state information with hooks",
    "user": {
      "login": "decodejacques",
      "id": 31515171,
      "node_id": "MDQ6VXNlcjMxNTE1MTcx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/31515171?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decodejacques",
      "html_url": "https://github.com/decodejacques",
      "followers_url": "https://api.github.com/users/decodejacques/followers",
      "following_url": "https://api.github.com/users/decodejacques/following{/other_user}",
      "gists_url": "https://api.github.com/users/decodejacques/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decodejacques/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decodejacques/subscriptions",
      "organizations_url": "https://api.github.com/users/decodejacques/orgs",
      "repos_url": "https://api.github.com/users/decodejacques/repos",
      "events_url": "https://api.github.com/users/decodejacques/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decodejacques/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-21T04:49:47Z",
    "updated_at": "2019-11-21T14:27:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nI'm using react-test-renderer. renderer.toTree() is not providing me with the state information of functional components that use the useState hook. I know the state information is available because renderer.root._fiber has a memoizedState property with the state data I need. Someone just needs to take the data from _fiber and put it in the render tree.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nconst React = require('react')\r\nconst ReactTestRenderer = require('react-test-renderer')\r\nfunction OneButton() {\r\n    let [counter, setCounter] = useState(42)\r\n    return React.createElement(\"div\", {}, counter)\r\n}\r\nlet renderer = ReactTestRenderer.create(React.createElement(OneButton))\r\nconsole.log(renderer.toTree()) // No state information\r\n\r\n**What is the expected behavior?**\r\n\r\nI should see the state with a value of 42 somewhere in the standard output\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.12.0"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17413",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17413/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17413/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17413/events",
    "html_url": "https://github.com/facebook/react/issues/17413",
    "id": 526276180,
    "node_id": "MDU6SXNzdWU1MjYyNzYxODA=",
    "number": 17413,
    "title": "SuspenseList gotcha with React.lazy",
    "user": {
      "login": "kentcdodds",
      "id": 1500684,
      "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kentcdodds",
      "html_url": "https://github.com/kentcdodds",
      "followers_url": "https://api.github.com/users/kentcdodds/followers",
      "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
      "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
      "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
      "repos_url": "https://api.github.com/users/kentcdodds/repos",
      "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-20T23:33:34Z",
    "updated_at": "2019-11-26T01:09:06Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSuspense is still experimental, so it's neither 🙃\r\n\r\n**What is the current behavior?**\r\n\r\nIt's best described via a code example in this codesandbox: https://codesandbox.io/s/react-suspenselist-problem-8g7c1\r\n\r\nHere's a summary:\r\n\r\nWhen \"forwards\" is used for the `revealOrder` of a SuspenseList, React does not even try to render components in suspense boundaries after the most \"forward\" suspense boundary. This should be fine, but it can be a problem when used with React.lazy because the dynamic import isn't started until the lazy component is rendered so adding a SuspenseList to an existing set of lazily loaded components results in a slower overall loading experience thanks to a waterfall effect.\r\n\r\nFor completeness I'll just add that this same thing applies to \"backwards\" as an option as well.\r\n\r\nI understand why SuspenseList doesn't bother rendering components in Suspense Boundaries until they're ready to be shown. It's because we should be firing requests for things before we try to render the components that need those resources. However, React.lazy is a bit of a special case because it doesn't suspend until it's rendered the first time and for the developer to fire that request eagerly requires extra work on the part of the developer (there's a comment in the code showing the workaround).\r\n\r\n**What is the expected behavior?**\r\n\r\nBecause React.lazy is a special case and people are likely to run into this gotcha a lot when implementing Suspense Lists around lazy components, I think something should be done for these to start loading the module eagerly without workarounds. I'm not sure what to suggest to do about it though.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion `0.0.0-experimental-b53ea6ca0` and I don't think this ever worked in a previous version."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17406",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17406/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17406/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17406/events",
    "html_url": "https://github.com/facebook/react/issues/17406",
    "id": 525786175,
    "node_id": "MDU6SXNzdWU1MjU3ODYxNzU=",
    "number": 17406,
    "title": "[Lib author question] using batched updates with support for different renderers (react-dom, react-native)",
    "user": {
      "login": "pie6k",
      "id": 7311462,
      "node_id": "MDQ6VXNlcjczMTE0NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7311462?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pie6k",
      "html_url": "https://github.com/pie6k",
      "followers_url": "https://api.github.com/users/pie6k/followers",
      "following_url": "https://api.github.com/users/pie6k/following{/other_user}",
      "gists_url": "https://api.github.com/users/pie6k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pie6k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pie6k/subscriptions",
      "organizations_url": "https://api.github.com/users/pie6k/orgs",
      "repos_url": "https://api.github.com/users/pie6k/repos",
      "events_url": "https://api.github.com/users/pie6k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pie6k/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-20T12:55:13Z",
    "updated_at": "2019-11-20T13:00:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Right now there is different way of batching updates in `react-dom` (`ReactDOM.unstable_batchedUpdates(() => { ... })` and eg. `react-native`.\r\n\r\nLet's say I'm creating a library that can be used both on the web and in react-native. Let's say, I want to take advantage of using batched updates on both platforms.\r\n\r\nHowever, implementing batched updates works differently on each platform.\r\n\r\nOn DOM it's `ReactDOM.unstable_batchedUpdates(() => { ... })`\r\n\r\nOn RN it's a bit hacky but seems to work. I've implemented it like\r\n\r\n```tsx\r\nfunction getBatchedUpdateFunction() {\r\n  try {\r\n    const renderer = __DEV__\r\n      ? require('react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev')\r\n      : require('react-native/Libraries/Renderer/implementations/ReactNativeRenderer-prod');\r\n\r\n    if (!renderer) {\r\n      return null;\r\n    }\r\n\r\n    if (!renderer.unstable_batchedUpdates) {\r\n      return null;\r\n    }\r\n\r\n    return renderer.unstable_batchedUpdates;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function batchedUpdates(callback: () => void) {\r\n  const batchedUpdatesFunction = getBatchedUpdateFunction();\r\n\r\n  if (!batchedUpdatesFunction) {\r\n    // we're not able to call batch function. Let's fallback to call callback normally without batching\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  batchedUpdatesFunction(() => {\r\n    callback();\r\n  });\r\n}\r\n```\r\n\r\nI also have to check in runtime, what platform is used to call proper batch function type\r\n\r\nIs there any way to make it cleaner if I want to batch on any react-powered platform?\r\n\r\nI assume there might be many 'env-agnostic', react based libs that use batching eg redux, mobx. Each of those should be usable on each react-based platform"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17404",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17404/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17404/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17404/events",
    "html_url": "https://github.com/facebook/react/issues/17404",
    "id": 525284693,
    "node_id": "MDU6SXNzdWU1MjUyODQ2OTM=",
    "number": 17404,
    "title": "ESLint exhaustive-deps rule should be more consistent about 'Ref' values",
    "user": {
      "login": "AlexReff",
      "id": 1546571,
      "node_id": "MDQ6VXNlcjE1NDY1NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1546571?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexReff",
      "html_url": "https://github.com/AlexReff",
      "followers_url": "https://api.github.com/users/AlexReff/followers",
      "following_url": "https://api.github.com/users/AlexReff/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexReff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexReff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexReff/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexReff/orgs",
      "repos_url": "https://api.github.com/users/AlexReff/repos",
      "events_url": "https://api.github.com/users/AlexReff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexReff/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-19T21:42:20Z",
    "updated_at": "2019-11-30T20:02:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*BUG* - or possibly a misunderstanding about `Ref`s and dependencies\r\n\r\n**What is the current behavior?**\r\n\r\nEdit: Sandbox here, my pseudo below wasn't exactly accurate: https://codesandbox.io/s/patient-shadow-eswc6\r\n\r\n```\r\nexport const MyReactFunction = (props) => {\r\n    ...\r\n    const myRef= useRef(null);\r\n    ...\r\n    const myCallback = useCallback((args) => {\r\n        //...\r\n        if (myVal.current === 0) { .... }\r\n        if (props.otherRef.current == null) { ... }\r\n    }, []);\r\n    ...\r\n    myCallback(1);\r\n}\r\n```\r\nGives ESLint warning:\r\n> React Hook useCallback has missing dependencies: 'myRef' and 'props.otherRef'. Either include them or remove the dependency array.eslint(react-hooks/exhaustive-deps)\r\n\r\n**What is the expected behavior?**\r\n\r\nUnless I am misunderstanding, there is no reason to include a `Ref` value in the dependency list. If I include a `Ref.current`, I get the message `Mutable values like 'myRef.current' aren't valid dependencies because mutating them doesn't re-render the component.`\r\n\r\nSince passing in `myRef` as a dependency is meaningless, and passing in `myRef.current` also provides a warning, I would expect the exhaustive-deps warning to know to not care about `myRef` or any other `Ref` value in the scope in regards to missing dependencies.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nN/A"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17399",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17399/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17399/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17399/events",
    "html_url": "https://github.com/facebook/react/issues/17399",
    "id": 524686675,
    "node_id": "MDU6SXNzdWU1MjQ2ODY2NzU=",
    "number": 17399,
    "title": "In mobile browsers button onClick hadler fires multiple times. Desktop ones are fine",
    "user": {
      "login": "greenais",
      "id": 16271522,
      "node_id": "MDQ6VXNlcjE2MjcxNTIy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16271522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenais",
      "html_url": "https://github.com/greenais",
      "followers_url": "https://api.github.com/users/greenais/followers",
      "following_url": "https://api.github.com/users/greenais/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenais/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenais/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenais/subscriptions",
      "organizations_url": "https://api.github.com/users/greenais/orgs",
      "repos_url": "https://api.github.com/users/greenais/repos",
      "events_url": "https://api.github.com/users/greenais/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenais/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-11-18T23:46:08Z",
    "updated_at": "2019-11-20T06:52:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nI have quite simple React page with download buttons embedded:\r\n\r\n```\r\n<button\r\n  type='button'\r\n  className='button'\r\n  onClick={this._downloadArchive}\r\n  style={{width: '100%'}}\r\n  >\r\n   <div style={styles.archiveButton}>\r\n    <div>Download</div>\r\n    <div>{'archive.zip'}</div>\r\n    </div>\r\n</button>\r\n```\r\n\r\nAnd correspomding handler:\r\n```\r\n_downloadArchive = () => {\r\n  let filename = 'archive.zip';\r\n  let url = '/beta/archive32?filename=' + filename + screenDetails;\r\n  window.open(url)\r\n};\r\n```\r\n\r\nIn desktop browsers it works with no issue, but in **all** mobile browsers tapping button causes  handler to be called multiple (3-4, depends on device and browser) times with 100-300ms delay between calls - I can see it in backend logs. \r\nMeanwhile mobile browser downloads the file only once.\r\nI ried to use onTouchEnd event (with detecting mobile client before) - result is the same\r\n\r\n**What is the expected behavior?**\r\nonClick handler is called once - as it should and as it is on desktop browsers\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\"react\": \"16.4.0\",\r\nOS: Windows\r\nBrowsers; Chrome, Opera, CM Browser etc\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17393",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17393/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17393/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17393/events",
    "html_url": "https://github.com/facebook/react/issues/17393",
    "id": 524225812,
    "node_id": "MDU6SXNzdWU1MjQyMjU4MTI=",
    "number": 17393,
    "title": "Bug: React doesn't warn about key|ref not a prop using defaultProps",
    "user": {
      "login": "eddyw",
      "id": 1407526,
      "node_id": "MDQ6VXNlcjE0MDc1MjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1407526?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eddyw",
      "html_url": "https://github.com/eddyw",
      "followers_url": "https://api.github.com/users/eddyw/followers",
      "following_url": "https://api.github.com/users/eddyw/following{/other_user}",
      "gists_url": "https://api.github.com/users/eddyw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eddyw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eddyw/subscriptions",
      "organizations_url": "https://api.github.com/users/eddyw/orgs",
      "repos_url": "https://api.github.com/users/eddyw/repos",
      "events_url": "https://api.github.com/users/eddyw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eddyw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-18T09:01:05Z",
    "updated_at": "2019-11-18T09:01:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nReact warns about key|ref not being a prop:\r\n```\r\nWarning: Child: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)\r\n```\r\nHowever, when using `defaultProps` and _not_ providing a key|ref, the key|ref is used as a prop. Test:\r\n```javascript\r\nclass Child extends React.Component {\r\n  render() {\r\n    return <div> {this.props.key} </div>;\r\n  }\r\n}\r\nChild.defaultProps = {\r\n  key: \"example\"\r\n};\r\nclass Parent extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Child /> // <<<<< doesn't warn\r\n        <Child key=\"1\" /> // <<<<< warns\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\nThis happens because: \r\nhttps://github.com/facebook/react/blob/3ad076472ce9108b9b8a6a6fe039244b74a34392/packages/react/src/ReactElement.js#L362-L384\r\nassigning `defaultProps` doesn't take into account `RESERVED_PROPS`, so this condition `if (key || ref) {...` can be `false`\r\n\r\n**What is the expected behavior?**\r\nIf `key|ref` is not a prop, it shouldn't map `defaultProps` reserved names to `props`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17390",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17390/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17390/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17390/events",
    "html_url": "https://github.com/facebook/react/pull/17390",
    "id": 524031693,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQxODg1ODMx",
    "number": 17390,
    "title": "Make Warning for Uncontrolled/Controlled Inputs Clearer",
    "user": {
      "login": "codingnspace",
      "id": 13787548,
      "node_id": "MDQ6VXNlcjEzNzg3NTQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13787548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codingnspace",
      "html_url": "https://github.com/codingnspace",
      "followers_url": "https://api.github.com/users/codingnspace/followers",
      "following_url": "https://api.github.com/users/codingnspace/following{/other_user}",
      "gists_url": "https://api.github.com/users/codingnspace/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codingnspace/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codingnspace/subscriptions",
      "organizations_url": "https://api.github.com/users/codingnspace/orgs",
      "repos_url": "https://api.github.com/users/codingnspace/repos",
      "events_url": "https://api.github.com/users/codingnspace/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codingnspace/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-17T19:28:53Z",
    "updated_at": "2019-11-18T01:29:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17390",
      "html_url": "https://github.com/facebook/react/pull/17390",
      "diff_url": "https://github.com/facebook/react/pull/17390.diff",
      "patch_url": "https://github.com/facebook/react/pull/17390.patch"
    },
    "body": "Fixes #17069. To make the warnings for switching between uncontrolled and controlled inputs clearer. Uses language that was suggested by @markerikson in https://github.com/facebook/react/issues/17069\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17389",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17389/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17389/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17389/events",
    "html_url": "https://github.com/facebook/react/issues/17389",
    "id": 523935061,
    "node_id": "MDU6SXNzdWU1MjM5MzUwNjE=",
    "number": 17389,
    "title": "Devtools resize Component State/Props pane",
    "user": {
      "login": "codercodingthecode",
      "id": 20182536,
      "node_id": "MDQ6VXNlcjIwMTgyNTM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20182536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codercodingthecode",
      "html_url": "https://github.com/codercodingthecode",
      "followers_url": "https://api.github.com/users/codercodingthecode/followers",
      "following_url": "https://api.github.com/users/codercodingthecode/following{/other_user}",
      "gists_url": "https://api.github.com/users/codercodingthecode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codercodingthecode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codercodingthecode/subscriptions",
      "organizations_url": "https://api.github.com/users/codercodingthecode/orgs",
      "repos_url": "https://api.github.com/users/codercodingthecode/repos",
      "events_url": "https://api.github.com/users/codercodingthecode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codercodingthecode/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-17T04:46:47Z",
    "updated_at": "2019-11-26T19:39:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to request a feature\r\n\r\n**What is the current behavior?**\r\nResizing the state/props pane in Component Tab\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nAllow resizing pane\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDevtools 4.2.0 and Chrome Version 78.0.3904.97 \r\n\r\n![image](https://user-images.githubusercontent.com/20182536/69003149-de088780-08c2-11ea-9f32-391faee6a557.png)\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17386",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17386/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17386/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17386/events",
    "html_url": "https://github.com/facebook/react/issues/17386",
    "id": 523851078,
    "node_id": "MDU6SXNzdWU1MjM4NTEwNzg=",
    "number": 17386,
    "title": "Feature Request: Soft Component",
    "user": {
      "login": "hackwaly",
      "id": 540298,
      "node_id": "MDQ6VXNlcjU0MDI5OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/540298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hackwaly",
      "html_url": "https://github.com/hackwaly",
      "followers_url": "https://api.github.com/users/hackwaly/followers",
      "following_url": "https://api.github.com/users/hackwaly/following{/other_user}",
      "gists_url": "https://api.github.com/users/hackwaly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hackwaly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hackwaly/subscriptions",
      "organizations_url": "https://api.github.com/users/hackwaly/orgs",
      "repos_url": "https://api.github.com/users/hackwaly/repos",
      "events_url": "https://api.github.com/users/hackwaly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hackwaly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-16T14:23:06Z",
    "updated_at": "2019-11-19T14:24:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "```\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction PageLayout({title, children}) {\r\n  return <div>\r\n    <h1>{title}</h1>\r\n    <input type=\"text\"/>\r\n    {children}\r\n  </div>;\r\n}\r\nfunction Page2({setPage}) {\r\n  return <PageLayout title=\"Page2\">\r\n    <button onClick={() => {setPage(() => Page1);}}>Test</button>\r\n  </PageLayout>\r\n}\r\nfunction Page1({setPage}) {\r\n  return <PageLayout title=\"Page1\">\r\n    <button onClick={() => {setPage(() => Page2);}}>Test</button>\r\n  </PageLayout>\r\n}\r\nfunction App() {\r\n  let [Page, setPage] = useState(() => Page1);\r\n  return <Page setPage={setPage}/>; \r\n}\r\nReactDOM.render(<App />, document.getElementById('app'));\r\n```\r\n\r\nhttps://codesandbox.io/embed/serene-browser-tehj4?fontsize=14\r\n\r\nThe above code is most intuitive pattern for build multiple page web app. -- Don't mind the setPage. Just focus Page component returns PageLayout instance.\r\n\r\nBut react's diff algorithm is not optimized for that pattern.  If you click \"Test\" button. The text you inputed in input will lost.\r\n\r\nSo I proposal \"Soft Component\" concept. Two soft component will be treated as same component in diff algorithm. In the example, we change Page1 and Page2 to soft components. Thus solve the problem I shown above."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17385",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17385/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17385/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17385/events",
    "html_url": "https://github.com/facebook/react/pull/17385",
    "id": 523793950,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQxNzIzNjg0",
    "number": 17385,
    "title": "Update eslint rule exhaustive deps to use new suggestions feature",
    "user": {
      "login": "wdoug",
      "id": 5432102,
      "node_id": "MDQ6VXNlcjU0MzIxMDI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5432102?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wdoug",
      "html_url": "https://github.com/wdoug",
      "followers_url": "https://api.github.com/users/wdoug/followers",
      "following_url": "https://api.github.com/users/wdoug/following{/other_user}",
      "gists_url": "https://api.github.com/users/wdoug/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wdoug/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wdoug/subscriptions",
      "organizations_url": "https://api.github.com/users/wdoug/orgs",
      "repos_url": "https://api.github.com/users/wdoug/repos",
      "events_url": "https://api.github.com/users/wdoug/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wdoug/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-11-16T05:11:53Z",
    "updated_at": "2019-12-12T00:07:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17385",
      "html_url": "https://github.com/facebook/react/pull/17385",
      "diff_url": "https://github.com/facebook/react/pull/17385.diff",
      "patch_url": "https://github.com/facebook/react/pull/17385.patch"
    },
    "body": "This pull request closes #16313\r\n\r\nAssuming that https://github.com/eslint/eslint/pull/12384 moves forward and adds the suggestions feature to `eslint`, this pull request updates the `react-hooks/exhaustive-deps` `eslint` rule to use the suggestions feature. This will result in the rule no-longer modifying code functionality when running `eslint`'s autofixer while providing a new method to explicitly accept code suggestions for the rule.\r\n\r\nFor more details see: #16313"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17383",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17383/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17383/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17383/events",
    "html_url": "https://github.com/facebook/react/pull/17383",
    "id": 523771432,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQxNzA5MTk2",
    "number": 17383,
    "title": "[react-test-renderer] Silence error boundary console logs",
    "user": {
      "login": "milesj",
      "id": 143744,
      "node_id": "MDQ6VXNlcjE0Mzc0NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/143744?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/milesj",
      "html_url": "https://github.com/milesj",
      "followers_url": "https://api.github.com/users/milesj/followers",
      "following_url": "https://api.github.com/users/milesj/following{/other_user}",
      "gists_url": "https://api.github.com/users/milesj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/milesj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/milesj/subscriptions",
      "organizations_url": "https://api.github.com/users/milesj/orgs",
      "repos_url": "https://api.github.com/users/milesj/repos",
      "events_url": "https://api.github.com/users/milesj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/milesj/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-11-16T01:48:49Z",
    "updated_at": "2020-01-21T17:53:43Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17383",
      "html_url": "https://github.com/facebook/react/pull/17383",
      "diff_url": "https://github.com/facebook/react/pull/17383.diff",
      "patch_url": "https://github.com/facebook/react/pull/17383.patch"
    },
    "body": "to: @trueadm @acdlite @bvaughn \r\ncc: @mpeyper\r\n\r\nSolves https://github.com/facebook/react/issues/15520\r\n\r\nBasically, when an error is thrown and an error boundary exists, `react-test-renderer` will *always* log the \"The above error occurred in the component\" message with `console.error`. There's currently no way to disable or hide it.\r\n\r\nThis PR makes a change (using forks) that entirely silences that log if an error boundary catches it. I'm unable to think of any situation where this log is desirable.\r\n\r\nWould love to avoid this current hack: https://github.com/milesj/rut/blob/master/packages/rut/src/internals/patch.ts"
  },
  
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17381",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17381/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17381/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17381/events",
      "html_url": "https://github.com/facebook/react/issues/17381",
      "id": 523731196,
      "node_id": "MDU6SXNzdWU1MjM3MzExOTY=",
      "number": 17381,
      "title": " [eslint-plugin-react-hooks] refine warning about accessing .current in cleanup effects",
      "user": {
        "login": "juangl",
        "id": 1887029,
        "node_id": "MDQ6VXNlcjE4ODcwMjk=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1887029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/juangl",
        "html_url": "https://github.com/juangl",
        "followers_url": "https://api.github.com/users/juangl/followers",
        "following_url": "https://api.github.com/users/juangl/following{/other_user}",
        "gists_url": "https://api.github.com/users/juangl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/juangl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/juangl/subscriptions",
        "organizations_url": "https://api.github.com/users/juangl/orgs",
        "repos_url": "https://api.github.com/users/juangl/repos",
        "events_url": "https://api.github.com/users/juangl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/juangl/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-15T22:52:05Z",
      "updated_at": "2019-11-19T20:23:08Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\ncurrently when you access `.current` in the cleanup effect you'll get a warning if ESLint didn't find an assignment to `.current`.\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally the linter can check if the `useRef` call sets an usable initial value.\r\n\r\n```javascript\r\nfunction MyComponent() {\r\n  const refOne = React.useRef({});\r\n  const refTwo = React.useRef(null);\r\n  \r\n  React.useEffect(() => {\r\n    refOne.current.someProperty = true;\r\n    return function cleanup() {\r\n      refOne.current.somePropty; // this is cool\r\n      refTwo.current.innerHTML; // this maybe not\r\n    }\r\n  }, []);\r\n  return <div ref={refTwo} />;\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\ncurrent version in master\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17378",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17378/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17378/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17378/events",
      "html_url": "https://github.com/facebook/react/issues/17378",
      "id": 523600371,
      "node_id": "MDU6SXNzdWU1MjM2MDAzNzE=",
      "number": 17378,
      "title": "change aria-label to ariaLabel",
      "user": {
        "login": "zwhitchcox",
        "id": 4328800,
        "node_id": "MDQ6VXNlcjQzMjg4MDA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/4328800?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zwhitchcox",
        "html_url": "https://github.com/zwhitchcox",
        "followers_url": "https://api.github.com/users/zwhitchcox/followers",
        "following_url": "https://api.github.com/users/zwhitchcox/following{/other_user}",
        "gists_url": "https://api.github.com/users/zwhitchcox/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zwhitchcox/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zwhitchcox/subscriptions",
        "organizations_url": "https://api.github.com/users/zwhitchcox/orgs",
        "repos_url": "https://api.github.com/users/zwhitchcox/repos",
        "events_url": "https://api.github.com/users/zwhitchcox/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zwhitchcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-15T17:36:42Z",
      "updated_at": "2019-11-16T17:00:11Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n\r\n`aria-label` for `input` is not camel cased like everything else\r\n\r\nIf would be nice if when you create an object for props like\r\n\r\n```ts\r\nconst value = myval\r\nconst onChange = e => setVal(e.target.value)\r\nconst ariaLabel = \"My Label\"\r\nreturn {\r\n  onChange,\r\n  ariaLabel,\r\n  value,\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`ariaLabel` to be camel cased\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nall browsers/versions of react\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17373",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17373/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17373/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17373/events",
      "html_url": "https://github.com/facebook/react/issues/17373",
      "id": 523344774,
      "node_id": "MDU6SXNzdWU1MjMzNDQ3NzQ=",
      "number": 17373,
      "title": "useLayoutEffect makes startTransition skip timeout ",
      "user": {
        "login": "jihlstrom",
        "id": 406972,
        "node_id": "MDQ6VXNlcjQwNjk3Mg==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/406972?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jihlstrom",
        "html_url": "https://github.com/jihlstrom",
        "followers_url": "https://api.github.com/users/jihlstrom/followers",
        "following_url": "https://api.github.com/users/jihlstrom/following{/other_user}",
        "gists_url": "https://api.github.com/users/jihlstrom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jihlstrom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jihlstrom/subscriptions",
        "organizations_url": "https://api.github.com/users/jihlstrom/orgs",
        "repos_url": "https://api.github.com/users/jihlstrom/repos",
        "events_url": "https://api.github.com/users/jihlstrom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jihlstrom/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-15T09:06:55Z",
      "updated_at": "2019-11-15T09:06:55Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nPossible bug\r\n\r\n**What is the current behavior?**\r\nI am using the router implemented in the relay-examples issue-tracker(https://github.com/relayjs/relay-examples/tree/master/issue-tracker/src/routing) and when transitioning from routes, startTransition works fine. However, on one page I am using React.useLayoutEffect and when I am transitioning away from that page. startTransition skips the timeout and immediately goes to the next page. Changing the useLayoutEffect to useEffect fixes this problem.\r\n\r\n**What is the expected behavior?**\r\nI would expect useLayoutEffect to work the same as useEffect\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nGoogle chrome 78, max osx, react experimental\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17363",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17363/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17363/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17363/events",
      "html_url": "https://github.com/facebook/react/issues/17363",
      "id": 522734282,
      "node_id": "MDU6SXNzdWU1MjI3MzQyODI=",
      "number": 17363,
      "title": "Devtools: higlight updated items in Components tree",
      "user": {
        "login": "syabro",
        "id": 29029,
        "node_id": "MDQ6VXNlcjI5MDI5",
        "avatar_url": "https://avatars1.githubusercontent.com/u/29029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/syabro",
        "html_url": "https://github.com/syabro",
        "followers_url": "https://api.github.com/users/syabro/followers",
        "following_url": "https://api.github.com/users/syabro/following{/other_user}",
        "gists_url": "https://api.github.com/users/syabro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/syabro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/syabro/subscriptions",
        "organizations_url": "https://api.github.com/users/syabro/orgs",
        "repos_url": "https://api.github.com/users/syabro/repos",
        "events_url": "https://api.github.com/users/syabro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/syabro/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-14T09:37:40Z",
      "updated_at": "2019-11-15T16:44:13Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "*feature request*\r\n\r\nIs it possible to higlight updated items in Components tree as well?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17362",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17362/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17362/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17362/events",
      "html_url": "https://github.com/facebook/react/pull/17362",
      "id": 522702050,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzQwODQ5Mzgy",
      "number": 17362,
      "title": "Update Prettier parser name",
      "user": {
        "login": "lewislbr",
        "id": 35342598,
        "node_id": "MDQ6VXNlcjM1MzQyNTk4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/35342598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lewislbr",
        "html_url": "https://github.com/lewislbr",
        "followers_url": "https://api.github.com/users/lewislbr/followers",
        "following_url": "https://api.github.com/users/lewislbr/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewislbr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lewislbr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewislbr/subscriptions",
        "organizations_url": "https://api.github.com/users/lewislbr/orgs",
        "repos_url": "https://api.github.com/users/lewislbr/repos",
        "events_url": "https://api.github.com/users/lewislbr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lewislbr/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-14T08:34:34Z",
      "updated_at": "2019-11-14T08:40:24Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17362",
        "html_url": "https://github.com/facebook/react/pull/17362",
        "diff_url": "https://github.com/facebook/react/pull/17362.diff",
        "patch_url": "https://github.com/facebook/react/pull/17362.patch"
      },
      "body": "According to [Prettier's parser options](https://prettier.io/docs/en/options.html#parser), \"babylon\" was changed to \"babel\":\r\n\r\n> \"babel\" (via @babel/parser) Named \"babylon\" until v1.16.0\r\n\r\nSo I just updated the name."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17357",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17357/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17357/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17357/events",
      "html_url": "https://github.com/facebook/react/issues/17357",
      "id": 522498619,
      "node_id": "MDU6SXNzdWU1MjI0OTg2MTk=",
      "number": 17357,
      "title": "getDerivedStateFromError is not called until all children have finished rendering",
      "user": {
        "login": "sh3nan1gans",
        "id": 4808898,
        "node_id": "MDQ6VXNlcjQ4MDg4OTg=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/4808898?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sh3nan1gans",
        "html_url": "https://github.com/sh3nan1gans",
        "followers_url": "https://api.github.com/users/sh3nan1gans/followers",
        "following_url": "https://api.github.com/users/sh3nan1gans/following{/other_user}",
        "gists_url": "https://api.github.com/users/sh3nan1gans/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sh3nan1gans/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sh3nan1gans/subscriptions",
        "organizations_url": "https://api.github.com/users/sh3nan1gans/orgs",
        "repos_url": "https://api.github.com/users/sh3nan1gans/repos",
        "events_url": "https://api.github.com/users/sh3nan1gans/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sh3nan1gans/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-11-13T22:02:41Z",
      "updated_at": "2019-11-13T22:09:36Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIf I have an array of children that each throw an error, my error boundary isn't called until all children have finished rendering. \r\n\r\nIn my example there are 3 child components that cause an error, the error is logged to the console 3 times before getDerivedStateFromError is called:\r\n\r\n![Screen Shot 2019-11-13 at 3 58 24 PM](https://user-images.githubusercontent.com/4808898/68808144-c0bb8b00-062e-11ea-9de3-b233d282bb78.png)\r\n\r\n\r\n\r\nSee example: https://codesandbox.io/s/heuristic-cache-y8h5d\r\n\r\n**What is the expected behavior?**\r\nI'd expect the first child error that is thrown to trigger my error boundary in the parent and no other children should be rendered. I understand that I should be using nested error boundaries where possible but this can be tedious. The current behavior isn't really an issue until you have an error in something like a spreadsheet cell component, where there could be hundreds or thousands of errors depending on the amount of data. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.11, also happens in 16.8.6\r\nAll browsers/all OS\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17356",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17356/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17356/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17356/events",
      "html_url": "https://github.com/facebook/react/issues/17356",
      "id": 522446729,
      "node_id": "MDU6SXNzdWU1MjI0NDY3Mjk=",
      "number": 17356,
      "title": "Memoized child of Suspense component doesn't update when Context updates.",
      "user": {
        "login": "jcarroll2007",
        "id": 8485105,
        "node_id": "MDQ6VXNlcjg0ODUxMDU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/8485105?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jcarroll2007",
        "html_url": "https://github.com/jcarroll2007",
        "followers_url": "https://api.github.com/users/jcarroll2007/followers",
        "following_url": "https://api.github.com/users/jcarroll2007/following{/other_user}",
        "gists_url": "https://api.github.com/users/jcarroll2007/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jcarroll2007/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jcarroll2007/subscriptions",
        "organizations_url": "https://api.github.com/users/jcarroll2007/orgs",
        "repos_url": "https://api.github.com/users/jcarroll2007/repos",
        "events_url": "https://api.github.com/users/jcarroll2007/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jcarroll2007/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1109407645,
          "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
          "name": "Component: Suspense",
          "color": "8ffcd6",
          "default": false,
          "description": ""
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-13T20:11:50Z",
      "updated_at": "2019-11-20T19:44:15Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug (I think?)\r\n\r\n**What is the current behavior?**\r\n```javascript\r\nconst [value, setValue] = useState(\"default\");\r\nreturn (\r\n  <div className=\"App\">\r\n    <input value={value} onChange={e => setValue(e.target.value)} />\r\n    <div>\r\n      <Value.Provider value={value}>\r\n        <Suspense fallback={<div>loading</div>}>\r\n          <MemoizedChild />\r\n         </Suspense>\r\n       </Value.Provider>\r\n     </div>\r\n  </div>\r\n)\r\n```\r\n\r\nWhen using a memoized functional component (`MemoizedChild` in above example) in conjunction with `Context` as a child of a `React.Suspense` component, there seems to be a bug in which `MemoizedChild` does not update when the context it uses changes. For the full example, see my codesandbox below.\r\n\r\nIn the codesandbox, if you change the value of the input, the new value is provided to the context which causes the hook used in `MemoizedChild` (`useValue`) to throw a promise. This flips `Suspense` to the fallback state and when the promise resolves `MemoizedChild`'s state is not updated with the proper context value because (I'm assuming) the memoized value of `MemoizedChild` is the one that contained the previous context value and technically no props have changed, so that makes sense why it wouldn't have updated. However, this seems like it would be unexpected behavior.\r\n\r\nhttps://codesandbox.io/s/react-suspense-maybe-bug-sznbk\r\n\r\n**What is the expected behavior?**\r\nI would expect that `MemoizedChild` would be re-rendered with the new provided value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm assuming all of them that contain Suspense and memo. So, since 16.8?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17355",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17355/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17355/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17355/events",
      "html_url": "https://github.com/facebook/react/issues/17355",
      "id": 522336536,
      "node_id": "MDU6SXNzdWU1MjIzMzY1MzY=",
      "number": 17355,
      "title": "Should not already be working",
      "user": {
        "login": "gzzo",
        "id": 5722054,
        "node_id": "MDQ6VXNlcjU3MjIwNTQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/5722054?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gzzo",
        "html_url": "https://github.com/gzzo",
        "followers_url": "https://api.github.com/users/gzzo/followers",
        "following_url": "https://api.github.com/users/gzzo/following{/other_user}",
        "gists_url": "https://api.github.com/users/gzzo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gzzo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gzzo/subscriptions",
        "organizations_url": "https://api.github.com/users/gzzo/orgs",
        "repos_url": "https://api.github.com/users/gzzo/repos",
        "events_url": "https://api.github.com/users/gzzo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gzzo/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 620368407,
          "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
          "name": "Resolution: Needs More Information",
          "color": "fffde7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2019-11-13T16:35:19Z",
      "updated_at": "2020-01-15T22:44:42Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm seeing \"Error: Should not already be working\" after upgrading to React 16.11\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7\r\n\r\nI was unable to reproduce this in a VM environment but our Sentry is getting littered with these errors. \r\n\r\nI know it's a long shot, but I wasn't able to find any information about this error anywhere, just a reference in the error codes file in react, so thought it would be a good idea to report this just in case. Curious if anyone has seen this.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17352",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17352/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17352/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17352/events",
      "html_url": "https://github.com/facebook/react/issues/17352",
      "id": 521946591,
      "node_id": "MDU6SXNzdWU1MjE5NDY1OTE=",
      "number": 17352,
      "title": "Upgrade Babel to 7.7.0+",
      "user": {
        "login": "MicahZoltu",
        "id": 886059,
        "node_id": "MDQ6VXNlcjg4NjA1OQ==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/886059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MicahZoltu",
        "html_url": "https://github.com/MicahZoltu",
        "followers_url": "https://api.github.com/users/MicahZoltu/followers",
        "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
        "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
        "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
        "repos_url": "https://api.github.com/users/MicahZoltu/repos",
        "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 71502270,
          "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
          "name": "Component: Build Infrastructure",
          "color": "f9d0c4",
          "default": false,
          "description": null
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2019-11-13T04:07:32Z",
      "updated_at": "2020-01-10T18:41:31Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug-ish.\r\n\r\n**What is the current behavior?**\r\n`import 'react'` (where 'react' is the UMD module build) from an ES module will fail due to https://github.com/rollup/rollup/pull/2274.  `this` is not set in the context of ES modules, so if you try to `import 'react'` in that context you will get a runtime error since `this` is undefined and Rollup (before the linked fix) tries to use `this` when it really means `globalThis` or `self`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```\r\nnpm install react\r\n```\r\n`index.html`\r\n```html\r\n<!DOCTYPE html>\r\n<head><meta charset='utf-8'></head>\r\n<body>\r\n\t<script type='module'>\r\n\t\timport './node_modules/react/umd/react.development.js'\r\n\t</script>\r\n</body>\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe React UMD module can be loaded by an ES module.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.11.0\r\nFirefox: 70.0.1\r\nWindows 10"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17351",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17351/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17351/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17351/events",
      "html_url": "https://github.com/facebook/react/issues/17351",
      "id": 521883191,
      "node_id": "MDU6SXNzdWU1MjE4ODMxOTE=",
      "number": 17351,
      "title": "Possibility to set min duration of Suspense fallback",
      "user": {
        "login": "tonix-tuft",
        "id": 10134421,
        "node_id": "MDQ6VXNlcjEwMTM0NDIx",
        "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tonix-tuft",
        "html_url": "https://github.com/tonix-tuft",
        "followers_url": "https://api.github.com/users/tonix-tuft/followers",
        "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
        "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
        "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
        "repos_url": "https://api.github.com/users/tonix-tuft/repos",
        "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-13T00:33:43Z",
      "updated_at": "2019-11-13T00:33:43Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI have played a bit with Concurrent Mode and the Suspense API.\r\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\r\n\r\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\r\n\r\n**What is the expected behavior?**\r\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \r\nhttps://codesandbox.io/s/cold-monad-ifr29.\r\n\r\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\r\nIn my opinion, this is a bit unpleasant to the eye.\r\n\r\nWouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:\r\n\r\n```jsx\r\n...\r\nfunction ProfilePage({ resource }) {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}\r\n      // If the fallback ever gets rendered,\r\n      // it will be shown for at least 1500 millisec.,\r\n      // even if the promise resolves right after rendering the fallback.\r\n      fallbackMinDurationMs={1500}>\r\n      <ProfileDetails resource={resource} />\r\n      <Suspense fallback={<h1>Loading posts...</h1>}>\r\n        <ProfileTimeline resource={resource} />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n...\r\n```\r\n\r\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\r\n\r\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\r\n\r\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\r\n\r\n```js\r\nfunction maxDelayFallbackPromise({\r\n  promise,\r\n  timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`\r\n  onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)\r\n  fallbackMinDurationMs\r\n} = {}) {\r\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\r\n  const uniqueIdentifier = `promise_value_${Math.random()}`\r\n  return Promise.race([\r\n    promise,\r\n    timeout(timeoutMs).then(() => uniqueIdentifier)\r\n  ]).then(value => {\r\n    if (value === uniqueIdentifier) {\r\n      onFallback()\r\n      return minDelayPromise(promise, fallbackMinDurationMs)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nWhere `timeout` and `minDelayPromise` are:\r\n\r\n```js\r\nfunction timeout(delayMs) {\r\n  return new Promise(resolve => setTimeout(resolve, delayMs))\r\n}\r\n\r\nfunction minDelayPromise(promise, minDelay) {\r\n  return Promise.all([\r\n    promise,\r\n    timeout(minDelay)\r\n  ]).then(([value]) => {\r\n    return value\r\n  })\r\n}\r\n```\r\n\r\nThis could also apply to the `isPending` flag of `useTransition`...\r\n\r\nDo you think such a feature could improve the UX in such cases?\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17350",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17350/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17350/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17350/events",
      "html_url": "https://github.com/facebook/react/pull/17350",
      "id": 521632691,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5OTc2NTYy",
      "number": 17350,
      "title": "feat: Add useHydrateableEffect",
      "user": {
        "login": "eps1lon",
        "id": 12292047,
        "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
        "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eps1lon",
        "html_url": "https://github.com/eps1lon",
        "followers_url": "https://api.github.com/users/eps1lon/followers",
        "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
        "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
        "organizations_url": "https://api.github.com/users/eps1lon/orgs",
        "repos_url": "https://api.github.com/users/eps1lon/repos",
        "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eps1lon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-12T15:47:51Z",
      "updated_at": "2019-12-02T15:51:56Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17350",
        "html_url": "https://github.com/facebook/react/pull/17350",
        "diff_url": "https://github.com/facebook/react/pull/17350.diff",
        "patch_url": "https://github.com/facebook/react/pull/17350.patch"
      },
      "body": "This is an attempt to resolve #14927\r\n\r\n## Rationale\r\nIf the component requires a layout effect no current workaround solves the underlying issue. Explicit fallback views are most likely impossible (that's why we need layout in the first place) or the component itself is a sufficient fallback (e.g. the overall markup is renderable on the server but we need to adjust some minor visuals).\r\n\r\nSince components using `useLayoutEffect` will always have an inconsistent UI before hydration we can potentially downgrade these effects to passive effects i.e. it's already inconsistent so we might as well make it inconsistent a little bit longer to make room for higher priority work.\r\n\r\n## Behavior\r\n\r\n- like useEffect when ssr\r\n- like useEffect when hydrating\r\n- like useLayoutEffect when rendering on the client\r\n- like useLayoutEffect on updates\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17338",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17338/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17338/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17338/events",
      "html_url": "https://github.com/facebook/react/issues/17338",
      "id": 520734649,
      "node_id": "MDU6SXNzdWU1MjA3MzQ2NDk=",
      "number": 17338,
      "title": "internalContainerInstanceKey is write wrong",
      "user": {
        "login": "zhupingcmm",
        "id": 30522912,
        "node_id": "MDQ6VXNlcjMwNTIyOTEy",
        "avatar_url": "https://avatars1.githubusercontent.com/u/30522912?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zhupingcmm",
        "html_url": "https://github.com/zhupingcmm",
        "followers_url": "https://api.github.com/users/zhupingcmm/followers",
        "following_url": "https://api.github.com/users/zhupingcmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/zhupingcmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zhupingcmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zhupingcmm/subscriptions",
        "organizations_url": "https://api.github.com/users/zhupingcmm/orgs",
        "repos_url": "https://api.github.com/users/zhupingcmm/repos",
        "events_url": "https://api.github.com/users/zhupingcmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zhupingcmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-11T04:33:14Z",
      "updated_at": "2019-11-11T04:34:29Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nyes\r\n**What is the current behavior?**\r\nconst internalContainerInstanceKey = '__reactContainere$' + randomKey;\r\nIn the master branch and ReactDOMComponentTree.js line 23.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nconst internalContainerInstanceKey = '__reactContainer$' + randomKey;\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17336",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17336/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17336/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17336/events",
      "html_url": "https://github.com/facebook/react/pull/17336",
      "id": 520675700,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5MjA0NDQ1",
      "number": 17336,
      "title": "Add failing test for #17213",
      "user": {
        "login": "samcooke98",
        "id": 787007,
        "node_id": "MDQ6VXNlcjc4NzAwNw==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/787007?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/samcooke98",
        "html_url": "https://github.com/samcooke98",
        "followers_url": "https://api.github.com/users/samcooke98/followers",
        "following_url": "https://api.github.com/users/samcooke98/following{/other_user}",
        "gists_url": "https://api.github.com/users/samcooke98/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/samcooke98/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/samcooke98/subscriptions",
        "organizations_url": "https://api.github.com/users/samcooke98/orgs",
        "repos_url": "https://api.github.com/users/samcooke98/repos",
        "events_url": "https://api.github.com/users/samcooke98/events{/privacy}",
        "received_events_url": "https://api.github.com/users/samcooke98/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-10T23:32:22Z",
      "updated_at": "2019-11-14T21:40:02Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17336",
        "html_url": "https://github.com/facebook/react/pull/17336",
        "diff_url": "https://github.com/facebook/react/pull/17336.diff",
        "patch_url": "https://github.com/facebook/react/pull/17336.patch"
      },
      "body": "I've tried to add a failing test for the issue described here. \r\nhttps://github.com/facebook/react/issues/17314\r\n\r\n\r\nIf you run it locally, and change `isMemo` to be false, the test will pass. The test will also pass if you change the line to \r\n`    const MemodSubbed = isMemo ? React.memo(Subbed, () => true) : Subbed;`\r\n\r\n\r\n----\r\n\r\nBelow are my half-hearted attempts to look into this bug. \r\n\r\nIt looks like when the `compare` function is defined it makes React call `createFiberFromTypeAndProps`. However, if the `compare` function is not defined, it means React goes down the codepath below; \r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberBeginWork.js#L380-L403\r\n\r\nIn other words, the bug is likely caused somewhere in `updateSimpleMemoComponent` \r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17333",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17333/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17333/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17333/events",
      "html_url": "https://github.com/facebook/react/issues/17333",
      "id": 520575903,
      "node_id": "MDU6SXNzdWU1MjA1NzU5MDM=",
      "number": 17333,
      "title": "Can't back to initialed state with useState",
      "user": {
        "login": "hrahimi270",
        "id": 38007163,
        "node_id": "MDQ6VXNlcjM4MDA3MTYz",
        "avatar_url": "https://avatars1.githubusercontent.com/u/38007163?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hrahimi270",
        "html_url": "https://github.com/hrahimi270",
        "followers_url": "https://api.github.com/users/hrahimi270/followers",
        "following_url": "https://api.github.com/users/hrahimi270/following{/other_user}",
        "gists_url": "https://api.github.com/users/hrahimi270/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hrahimi270/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hrahimi270/subscriptions",
        "organizations_url": "https://api.github.com/users/hrahimi270/orgs",
        "repos_url": "https://api.github.com/users/hrahimi270/repos",
        "events_url": "https://api.github.com/users/hrahimi270/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hrahimi270/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-11-10T09:26:26Z",
      "updated_at": "2019-11-11T13:17:30Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nIt's not a feature, but I'm not sure if it's a bug or mistake of mine.\r\n\r\n**What is the current behavior?**\r\n\r\nI initialed my state on useState with a number. but I can't back to that initialed state after doing some stuff in my code. for example, pass some conditions.\r\n\r\n**What is the expected behavior?**\r\n\r\nI want to be able to pass the initial value as the new state value, but it's not working.\r\nFor better understanding, I created a reproduce project in sandBox to check it out.\r\nhttps://codesandbox.io/s/serene-driscoll-qlqq3?fontsize=14\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17332",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17332/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17332/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17332/events",
      "html_url": "https://github.com/facebook/react/issues/17332",
      "id": 520572172,
      "node_id": "MDU6SXNzdWU1MjA1NzIxNzI=",
      "number": 17332,
      "title": "useTransition: After startTransition, it does not react to passed props changes",
      "user": {
        "login": "naruaway",
        "id": 2931577,
        "node_id": "MDQ6VXNlcjI5MzE1Nzc=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2931577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naruaway",
        "html_url": "https://github.com/naruaway",
        "followers_url": "https://api.github.com/users/naruaway/followers",
        "following_url": "https://api.github.com/users/naruaway/following{/other_user}",
        "gists_url": "https://api.github.com/users/naruaway/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/naruaway/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/naruaway/subscriptions",
        "organizations_url": "https://api.github.com/users/naruaway/orgs",
        "repos_url": "https://api.github.com/users/naruaway/repos",
        "events_url": "https://api.github.com/users/naruaway/events{/privacy}",
        "received_events_url": "https://api.github.com/users/naruaway/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-10T08:47:41Z",
      "updated_at": "2019-11-11T20:56:33Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n**What is the current behavior?**\r\nAfter firing startTransition, \"current\" component stops reacting to passed props changes while reacting to local state changes.\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIn the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click \"CLICK ME\", it suddenly stops updating.\r\nhttps://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b\r\n\r\n**What is the expected behavior?**\r\nWhen passed props change, it should show the latest value of it where possible\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nExperimental build (0.0.0-experimental-5faf377df)"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17327",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17327/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17327/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17327/events",
      "html_url": "https://github.com/facebook/react/pull/17327",
      "id": 520487021,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5MDY5Nzcx",
      "number": 17327,
      "title": "Fix '__DEV__ is not defined' error in react-art fixture and change message to use 'yarn' over 'npm'",
      "user": {
        "login": "ScottMorse",
        "id": 38377787,
        "node_id": "MDQ6VXNlcjM4Mzc3Nzg3",
        "avatar_url": "https://avatars1.githubusercontent.com/u/38377787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ScottMorse",
        "html_url": "https://github.com/ScottMorse",
        "followers_url": "https://api.github.com/users/ScottMorse/followers",
        "following_url": "https://api.github.com/users/ScottMorse/following{/other_user}",
        "gists_url": "https://api.github.com/users/ScottMorse/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ScottMorse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ScottMorse/subscriptions",
        "organizations_url": "https://api.github.com/users/ScottMorse/orgs",
        "repos_url": "https://api.github.com/users/ScottMorse/repos",
        "events_url": "https://api.github.com/users/ScottMorse/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ScottMorse/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-09T17:34:38Z",
      "updated_at": "2019-11-09T18:09:36Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17327",
        "html_url": "https://github.com/facebook/react/pull/17327",
        "diff_url": "https://github.com/facebook/react/pull/17327.diff",
        "patch_url": "https://github.com/facebook/react/pull/17327.patch"
      },
      "body": "I am using yarn 1.19.1, node v10.16.3, and npm 6.13.0.\r\n\r\n* After running `yarn install` and `yarn build` and opening index.html, I received the error `__DEV__ is not defined` from the produced bundle.js file.  My change in the webpack config simply sets `__DEV__` to `true` to get rid of this error, allowing the successful rendering of the React logo animation after running the build.\r\n\r\n*  I changed the message in index.html to suggest running `yarn install` and `yarn build` over `npm install` and `npm run build`, for two reasons:\r\n    * The lockfile in the fixture is `yarn.lock`\r\n    * The `\"link:\"` protocol in package.json is supported by yarn, not npm, so `npm install` fails with `EUNSUPPORTEDPROTOCOL`.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17326",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17326/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17326/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17326/events",
      "html_url": "https://github.com/facebook/react/issues/17326",
      "id": 520482578,
      "node_id": "MDU6SXNzdWU1MjA0ODI1Nzg=",
      "number": 17326,
      "title": "irrelevant useState error when component is in UpperCase",
      "user": {
        "login": "deepakaggarwal7",
        "id": 19525740,
        "node_id": "MDQ6VXNlcjE5NTI1NzQw",
        "avatar_url": "https://avatars0.githubusercontent.com/u/19525740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deepakaggarwal7",
        "html_url": "https://github.com/deepakaggarwal7",
        "followers_url": "https://api.github.com/users/deepakaggarwal7/followers",
        "following_url": "https://api.github.com/users/deepakaggarwal7/following{/other_user}",
        "gists_url": "https://api.github.com/users/deepakaggarwal7/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/deepakaggarwal7/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/deepakaggarwal7/subscriptions",
        "organizations_url": "https://api.github.com/users/deepakaggarwal7/orgs",
        "repos_url": "https://api.github.com/users/deepakaggarwal7/repos",
        "events_url": "https://api.github.com/users/deepakaggarwal7/events{/privacy}",
        "received_events_url": "https://api.github.com/users/deepakaggarwal7/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-09T17:13:05Z",
      "updated_at": "2019-11-10T21:06:51Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "\r\n    \"eslint-plugin-react\": \"^7.16.0\",\r\n    \"eslint-plugin-react-hooks\": \"^2.2.0\",\r\n    \"eslint-plugin-react-native\": \"^3.8.1\",\r\n\r\n```\r\nconst HOC = component => props => {\r\n  const [currIndex, setCurrIndex] = useState('')\r\n  return <passedcomponent {...props} />\r\n}\r\n```\r\nThis throws an eslint error: \"React Hook \"useState\" cannot be called inside a callback.\"\r\nIf I rename component to begin with lowercase, it works. So there are two problems:\r\n1. Encrypted error message\r\n2. It should be reverse. Uppercase should be enforced instead of lowercase"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17325",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17325/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17325/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17325/events",
      "html_url": "https://github.com/facebook/react/issues/17325",
      "id": 520358648,
      "node_id": "MDU6SXNzdWU1MjAzNTg2NDg=",
      "number": 17325,
      "title": "Confusing behavior in Suspense",
      "user": {
        "login": "baldarian",
        "id": 40735399,
        "node_id": "MDQ6VXNlcjQwNzM1Mzk5",
        "avatar_url": "https://avatars3.githubusercontent.com/u/40735399?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/baldarian",
        "html_url": "https://github.com/baldarian",
        "followers_url": "https://api.github.com/users/baldarian/followers",
        "following_url": "https://api.github.com/users/baldarian/following{/other_user}",
        "gists_url": "https://api.github.com/users/baldarian/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/baldarian/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/baldarian/subscriptions",
        "organizations_url": "https://api.github.com/users/baldarian/orgs",
        "repos_url": "https://api.github.com/users/baldarian/repos",
        "events_url": "https://api.github.com/users/baldarian/events{/privacy}",
        "received_events_url": "https://api.github.com/users/baldarian/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-09T08:32:48Z",
      "updated_at": "2019-11-09T08:32:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I was just following the documentation of Concurrent mode and found a behavior that confused me.\r\n\r\nOpen this example and press `Open Profile` button.\r\nhttps://codesandbox.io/s/focused-snow-xbkvl\r\n\r\nThis way transition works as expected.\r\n- Pending (until `ProfileDetails` is ready)\r\n- Skeleton (displays a spinner for `ProfileTimeline`)\r\n- Complete (Everything is fetched)\r\n\r\nBut if you press `Refresh` button you'll something different.\r\n\r\nYou have to wait until all the components are ready in the tree (both `ProfileDetails` and `ProfileTimeline`). However, I'd expect it to behave the same way as when we clicked the `Open Profile` button.\r\n\r\nI know this is something I can fix with `useDeferredValue`, but I'm curious to know the reasons for such behavior."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17324",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17324/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17324/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17324/events",
      "html_url": "https://github.com/facebook/react/issues/17324",
      "id": 520344950,
      "node_id": "MDU6SXNzdWU1MjAzNDQ5NTA=",
      "number": 17324,
      "title": "Should I treat property's change as events in components?",
      "user": {
        "login": "zxh19890103",
        "id": 11514991,
        "node_id": "MDQ6VXNlcjExNTE0OTkx",
        "avatar_url": "https://avatars1.githubusercontent.com/u/11514991?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zxh19890103",
        "html_url": "https://github.com/zxh19890103",
        "followers_url": "https://api.github.com/users/zxh19890103/followers",
        "following_url": "https://api.github.com/users/zxh19890103/following{/other_user}",
        "gists_url": "https://api.github.com/users/zxh19890103/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zxh19890103/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zxh19890103/subscriptions",
        "organizations_url": "https://api.github.com/users/zxh19890103/orgs",
        "repos_url": "https://api.github.com/users/zxh19890103/repos",
        "events_url": "https://api.github.com/users/zxh19890103/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zxh19890103/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-09T06:41:45Z",
      "updated_at": "2019-11-13T08:43:34Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "We know the hook `useEffect` can see a variable's changes and invoke the callback I give it after the variable changed. This ability allows me to use component's property to apply an effect defined in.\r\n\r\n```tsx\r\nconst List = (props) => {\r\n    useEffect(() => {\r\n        loaddata()\r\n    }, [ props.tick ])\r\n    return <div>It's a demo. :)</div>\r\n}\r\n\r\nconst Page = (props) => {\r\n\r\n    const [tick, setTick] =useState(0)\r\n\r\n    const handleRefresh = () => {\r\n        setTick(tick + 1)\r\n    }\r\n\r\n    return <div>\r\n        <a onClick={handleRefresh}>Refresh</a>\r\n        <List tick={tick}></List>\r\n    </div>\r\n}\r\n\r\n```\r\n\r\nIt works very well. But is it proper?  Is there any better alternatives?  How about event? "
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17322",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17322/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17322/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17322/events",
      "html_url": "https://github.com/facebook/react/pull/17322",
      "id": 520284841,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4OTAwNjY3",
      "number": 17322,
      "title": "Add useOpaqueReference Hook",
      "user": {
        "login": "lunaruan",
        "id": 2735514,
        "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lunaruan",
        "html_url": "https://github.com/lunaruan",
        "followers_url": "https://api.github.com/users/lunaruan/followers",
        "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
        "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
        "organizations_url": "https://api.github.com/users/lunaruan/orgs",
        "repos_url": "https://api.github.com/users/lunaruan/repos",
        "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lunaruan/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2019-11-08T23:38:48Z",
      "updated_at": "2020-01-10T19:45:10Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17322",
        "html_url": "https://github.com/facebook/react/pull/17322",
        "diff_url": "https://github.com/facebook/react/pull/17322.diff",
        "patch_url": "https://github.com/facebook/react/pull/17322.patch"
      },
      "body": "We currently use unique IDs in a lot of places. Examples are:\r\n\t* `<label for=\"ID\">`\r\n\t* `aria-labelledby`\r\n\r\nThis can cause some issues:\r\n\t1. If we server side render and then hydrate, this could cause an hydration ID mismatch\r\n\t2. If we server side render one part of the page and client side render another part of the page, the ID for one part could be different than the ID for another part even though they are supposed to be the same\r\n\t3. If we conditionally render something with an ID ,  this might also cause an ID mismatch because the ID will be different on other parts of the page\r\n\r\nThis PR creates a new hook `useUniqueId` that generates a different unique ID based on whether the hook was called on the server or client. If the hook is called during hydration, it generates an opaque object that will rerender the hook so that the IDs match."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17321",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17321/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17321/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17321/events",
      "html_url": "https://github.com/facebook/react/issues/17321",
      "id": 520251612,
      "node_id": "MDU6SXNzdWU1MjAyNTE2MTI=",
      "number": 17321,
      "title": "[Shallow Renderer] Plan forward",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 204945357,
          "node_id": "MDU6TGFiZWwyMDQ5NDUzNTc=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
          "name": "Component: Shallow Renderer",
          "color": "eb6420",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 18,
      "created_at": "2019-11-08T21:54:52Z",
      "updated_at": "2020-01-08T19:08:16Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "Let's discuss what to do with the shallow renderer here. As I mentioned in https://github.com/facebook/react/pull/16168#issuecomment-518344985, we aren't using it much and don't consider it a best practice. So we aren't going to be very good stewards of its API going forward.\r\n\r\nMy proposal was for Enzyme or folks interested in it to copy the code into another repo, and continue maintaining it there under a difference package name. It would make sense to Enzyme to start depending on that fork. We would then deprecate `react-test-renderer/shallow` in favor of the community-maintained fork.\r\n\r\nIf you'd like to volunteer to set up a repo, please let us know in this issue!\r\n\r\ncc @davidmarkclements regarding the proposed `react-shallow-renderer` package name."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17320",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17320/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17320/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17320/events",
      "html_url": "https://github.com/facebook/react/issues/17320",
      "id": 520234837,
      "node_id": "MDU6SXNzdWU1MjAyMzQ4Mzc=",
      "number": 17320,
      "title": "DevTools: \"filtering\" in addition to \"finding\"",
      "user": {
        "login": "ianstormtaylor",
        "id": 311752,
        "node_id": "MDQ6VXNlcjMxMTc1Mg==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/311752?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ianstormtaylor",
        "html_url": "https://github.com/ianstormtaylor",
        "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
        "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
        "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
        "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
        "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
        "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-11-08T21:09:01Z",
      "updated_at": "2019-11-08T21:11:11Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now you can use the search box in DevTools as the equivalent to <kbd>Cmd-F</kbd> in a webpage, where it will jump between all the matches.\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen I'm trying to keep track of an individual component, what I really want is **filtering** instead of **finding**. By that I mean that I could type in for example \"Editor\" in the search box, and only components with `Editor` in their name (eg. `<Editor />`, `<MyEditor />`, etc.) would show up.\r\n\r\nIt would show the matching components, and have the option to expand them (or be pre-expanded), so it shows the components and their children.\r\n\r\nFor example, right now when loading the page, I see this:\r\n\r\n![image](https://user-images.githubusercontent.com/311752/68510359-54611600-0241-11ea-978e-59d5959031d2.png)\r\n\r\nWhich is a lot of extra stuff in the components tree that I don't care about. What I'd really love to see is this:\r\n\r\n![image](https://user-images.githubusercontent.com/311752/68510403-7195e480-0241-11ea-80b6-fed5de08b6b1.png)\r\n\r\nA specific child component that I'm currently interested in.\r\n\r\nIf the search box actually **filtered**, and if it was persistent across reloads, I could type \"Editor\" and then continually refresh the page and keep the specific component I care about visible.\r\n\r\n---\r\n\r\nAlternatively, maybe double-clicking that `<Editor>` component could show the whole tree underneath it in the detail view. Right now it just shows:\r\n\r\n![image](https://user-images.githubusercontent.com/311752/68510549-d7826c00-0241-11ea-9b4b-d9afd521869a.png)\r\n\r\nWhich is a bit of a lost opportunity.\r\n\r\nIf it showed the full tree of descendants, and if my \"selection\" was persistent across refreshes, this could solve the same use case in a different way.\r\n\r\n---\r\n\r\nSimilarly, if there was a way to specify _multiple_ filters, you could actually solve for the use case in https://github.com/facebook/react/issues/16478 by letting people add multiple filters to ease jumping between two components.\r\n\r\n---\r\n\r\nMaybe there's a better way that already solves this? I'd love to hear it!"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17318",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17318/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17318/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17318/events",
      "html_url": "https://github.com/facebook/react/issues/17318",
      "id": 520153018,
      "node_id": "MDU6SXNzdWU1MjAxNTMwMTg=",
      "number": 17318,
      "title": "useTransition - startTransition does not work on React.memo when is SimpleMemoComponent",
      "user": {
        "login": "salvoravida",
        "id": 20126259,
        "node_id": "MDQ6VXNlcjIwMTI2MjU5",
        "avatar_url": "https://avatars3.githubusercontent.com/u/20126259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/salvoravida",
        "html_url": "https://github.com/salvoravida",
        "followers_url": "https://api.github.com/users/salvoravida/followers",
        "following_url": "https://api.github.com/users/salvoravida/following{/other_user}",
        "gists_url": "https://api.github.com/users/salvoravida/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/salvoravida/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/salvoravida/subscriptions",
        "organizations_url": "https://api.github.com/users/salvoravida/orgs",
        "repos_url": "https://api.github.com/users/salvoravida/repos",
        "events_url": "https://api.github.com/users/salvoravida/events{/privacy}",
        "received_events_url": "https://api.github.com/users/salvoravida/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-08T17:58:51Z",
      "updated_at": "2019-11-10T06:33:49Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nuseTransition - startTransition do not work on React.memo when is SimpleMemoComponent\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nstartTransition work with SimpleMemoComponent\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17314",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17314/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17314/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17314/events",
      "html_url": "https://github.com/facebook/react/issues/17314",
      "id": 519924494,
      "node_id": "MDU6SXNzdWU1MTk5MjQ0OTQ=",
      "number": 17314,
      "title": "Concurrent Mode and UseSubscription with RxJS \"lose\" updates ",
      "user": {
        "login": "samcooke98",
        "id": 787007,
        "node_id": "MDQ6VXNlcjc4NzAwNw==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/787007?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/samcooke98",
        "html_url": "https://github.com/samcooke98",
        "followers_url": "https://api.github.com/users/samcooke98/followers",
        "following_url": "https://api.github.com/users/samcooke98/following{/other_user}",
        "gists_url": "https://api.github.com/users/samcooke98/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/samcooke98/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/samcooke98/subscriptions",
        "organizations_url": "https://api.github.com/users/samcooke98/orgs",
        "repos_url": "https://api.github.com/users/samcooke98/repos",
        "events_url": "https://api.github.com/users/samcooke98/events{/privacy}",
        "received_events_url": "https://api.github.com/users/samcooke98/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2019-11-08T10:07:06Z",
      "updated_at": "2019-11-23T06:57:16Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**Bug** - I think? \r\n\r\n**What is the current behavior?**\r\n\r\nIn Concurrent Mode, it appears that if a render is interrupted, if a component is using `useSubscription` the interrupted update is lost, which leads to \"tearing\" \r\n\r\nThe following codesandbox uses `useSubscription` with a RxJS `BehaviorSubject`, mimicking the example from here: https://www.npmjs.com/package/use-subscription#subscribing-to-observables \r\n\r\nIn the sandbox, clicking on the \"Increment Remote Count\" button triggers the RxJs `BehaviorSubject` to increment. This is done outside of the React event handler (ie: via `window.addEventLIstener` and so the updates are not batched together. The update to render the numbers is artificially slowed down. \r\n\r\nIf you click the \"Increment Remote Count\" button multiple times, the update works as expected. \r\n\r\nIf you interrupt the update, via clicking the \"increment local count\", only the last number will update. \r\n\r\n\r\n\r\nSo the Steps to reproduce look like: \r\n1. Click the \"Increment Remote Count\" button once\r\n2. Before the update is committed to the DOM, click the \"Increment Local Count\" update. \r\n3. The first update is \"lost\" ie; the output looks like: \r\n\r\n![image](https://user-images.githubusercontent.com/787007/68468141-27255f80-0263-11ea-9afb-07964e21d9d9.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jwenc.csb.app/ \\ https://codesandbox.io/s/usesubscriptionconcurrentlosingupdates-jwenc \r\n\r\n**What is the expected behavior?**\r\n\r\nI'd expect there to be a commit as the above screenshot, but I'd then expect there to be a follow-up commit that restores the consistency. In other words, I'd expect in the above picture for everything to be `1` \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`0.0.0-experimental-f6b8d31a7`\r\n\r\n\r\nI'd be willing to try to take a stab at writing a React test for this, if needed? \r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17313",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17313/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17313/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17313/events",
      "html_url": "https://github.com/facebook/react/issues/17313",
      "id": 519922793,
      "node_id": "MDU6SXNzdWU1MTk5MjI3OTM=",
      "number": 17313,
      "title": "Effect is not run (not even once) when state setter is called in function body",
      "user": {
        "login": "charshin",
        "id": 17873916,
        "node_id": "MDQ6VXNlcjE3ODczOTE2",
        "avatar_url": "https://avatars0.githubusercontent.com/u/17873916?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/charshin",
        "html_url": "https://github.com/charshin",
        "followers_url": "https://api.github.com/users/charshin/followers",
        "following_url": "https://api.github.com/users/charshin/following{/other_user}",
        "gists_url": "https://api.github.com/users/charshin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/charshin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/charshin/subscriptions",
        "organizations_url": "https://api.github.com/users/charshin/orgs",
        "repos_url": "https://api.github.com/users/charshin/repos",
        "events_url": "https://api.github.com/users/charshin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/charshin/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-08T10:03:34Z",
      "updated_at": "2019-11-27T00:49:47Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Please help me understand how state setter works when called inside a function body\r\n\r\nI have the following code:\r\n\r\n![image](https://user-images.githubusercontent.com/17873916/68467878-f557cd00-0251-11ea-9479-5a3f6811fece.png)\r\n\r\n\r\nRunning this code will result in infinite re-rendering. According to the React documentation, it says `The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.`. I interpret this as the next render will be enqueued and run after the current render finishes, including running the effect. However, the effect is never run at all, not even once, and the chain of re-rendering is happening forever without any bailing out even the code is updating the same state again, i.e. 1\r\n\r\nPlease help me understand the internal working of this piece of code."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17312",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17312/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17312/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17312/events",
      "html_url": "https://github.com/facebook/react/issues/17312",
      "id": 519903264,
      "node_id": "MDU6SXNzdWU1MTk5MDMyNjQ=",
      "number": 17312,
      "title": "Regarding `react-hooks/exhaustive-deps` and object properties",
      "user": {
        "login": "tom-sherman",
        "id": 9257001,
        "node_id": "MDQ6VXNlcjkyNTcwMDE=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/9257001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tom-sherman",
        "html_url": "https://github.com/tom-sherman",
        "followers_url": "https://api.github.com/users/tom-sherman/followers",
        "following_url": "https://api.github.com/users/tom-sherman/following{/other_user}",
        "gists_url": "https://api.github.com/users/tom-sherman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tom-sherman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tom-sherman/subscriptions",
        "organizations_url": "https://api.github.com/users/tom-sherman/orgs",
        "repos_url": "https://api.github.com/users/tom-sherman/repos",
        "events_url": "https://api.github.com/users/tom-sherman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tom-sherman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-08T09:23:56Z",
      "updated_at": "2019-11-08T09:23:56Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "If I have a dependency array which passes in several properties of an object like the below example, the eslint rule `react-hooks/exhaustive-deps` shows a warning.\r\n\r\n```javascript\r\nlet options = { foo: 1, bar: 2 }\r\n\r\nReact.useEffect(fn, [ options.foo, options.bar ])\r\n```\r\n\r\nShows a message:\r\n\r\n```\r\nReact Hook React.useEffect has a missing dependency: 'options'. Either include it or remove the dependency array\r\n```\r\n\r\nI can replace the array with `[ options ]` which solves the problem but my question is, should I have to pass the full object when I only need to use some of it's properties?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17309",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17309/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17309/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17309/events",
      "html_url": "https://github.com/facebook/react/pull/17309",
      "id": 519575086,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4MjkyODQz",
      "number": 17309,
      "title": "Pass suspense config to `startTransition` instead of `useTransition`",
      "user": {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2019-11-07T23:39:01Z",
      "updated_at": "2020-01-23T18:59:19Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17309",
        "html_url": "https://github.com/facebook/react/pull/17309",
        "diff_url": "https://github.com/facebook/react/pull/17309.diff",
        "patch_url": "https://github.com/facebook/react/pull/17309.patch"
      },
      "body": "This avoids the problem of having to bind the config object to `startTransition`, invalidating downstream memoizations.\r\n\r\nSee #17284 for more details.\r\n\r\nI'll need to codemod the existing callers in www, but that's not a blocker because www uses a userspace fork."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17306",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17306/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17306/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17306/events",
      "html_url": "https://github.com/facebook/react/issues/17306",
      "id": 519466158,
      "node_id": "MDU6SXNzdWU1MTk0NjYxNTg=",
      "number": 17306,
      "title": "img onLoad does not always fire in concurrent mode",
      "user": {
        "login": "peternycander",
        "id": 2242265,
        "node_id": "MDQ6VXNlcjIyNDIyNjU=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/2242265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peternycander",
        "html_url": "https://github.com/peternycander",
        "followers_url": "https://api.github.com/users/peternycander/followers",
        "following_url": "https://api.github.com/users/peternycander/following{/other_user}",
        "gists_url": "https://api.github.com/users/peternycander/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/peternycander/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/peternycander/subscriptions",
        "organizations_url": "https://api.github.com/users/peternycander/orgs",
        "repos_url": "https://api.github.com/users/peternycander/repos",
        "events_url": "https://api.github.com/users/peternycander/events{/privacy}",
        "received_events_url": "https://api.github.com/users/peternycander/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-07T19:29:09Z",
      "updated_at": "2019-11-07T23:34:37Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\n\r\n`<img onLoad={fn} />` does not always trigger `fn` when rendered using createRoot if it has siblings which are heavy to render (I think?).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/quiet-dawn-t1std\r\nYou might have to use the retry button a few times, but hopefully you should be able to see it. Don't disable cache while trying\r\n\r\n**What is the expected behavior?**\r\n\r\nonLoad always fires if img gets loaded.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n0.0.0-experimental-f6b8d31a7\r\nReproduced in chrome and firefox windows. Have not tried the codesandbox in mac, but the actual bug in our app occurred there first so I'd be surprised if it is OS specific.\r\n\r\nIt does not happen with regular \"sync\" mode."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17302",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17302/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17302/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17302/events",
      "html_url": "https://github.com/facebook/react/issues/17302",
      "id": 519326971,
      "node_id": "MDU6SXNzdWU1MTkzMjY5NzE=",
      "number": 17302,
      "title": "infinite recursion when using development cdnjs libraries in a tampermonkey user script",
      "user": {
        "login": "prozacgod",
        "id": 67706,
        "node_id": "MDQ6VXNlcjY3NzA2",
        "avatar_url": "https://avatars3.githubusercontent.com/u/67706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prozacgod",
        "html_url": "https://github.com/prozacgod",
        "followers_url": "https://api.github.com/users/prozacgod/followers",
        "following_url": "https://api.github.com/users/prozacgod/following{/other_user}",
        "gists_url": "https://api.github.com/users/prozacgod/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/prozacgod/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/prozacgod/subscriptions",
        "organizations_url": "https://api.github.com/users/prozacgod/orgs",
        "repos_url": "https://api.github.com/users/prozacgod/repos",
        "events_url": "https://api.github.com/users/prozacgod/events{/privacy}",
        "received_events_url": "https://api.github.com/users/prozacgod/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2019-11-07T15:11:33Z",
      "updated_at": "2019-11-08T19:54:50Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG\r\n\r\n**What is the current behavior?**\r\n\r\ndevelopment versions of the library > 6.4.2 - cause infinite recursion and crash/slowdowns when used in the tampermonkey environment when including the development libraries for react and react-dom. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou would need to install tampermonkey in Google Chrome, and then install this test user script\r\n\r\nhttps://gist.github.com/prozacgod/e1aad87eb8aa835ff257081cad7f9d88\r\n\r\nafter that launch a local server of any sort on port 8080, as the gist specifies localhost - hosting a bare minimum index.html\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should render Foo! on the blank page\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt seems to work fine with 16.4.x -> 16.5.x (I did not test lower) but many selected versions past 16.4 did cause the issue.  only the Development builds break.\r\n\r\nJust a guess, but mayber tampermonkey environment exposes a property that react did not use before, but does now - and it may be 'frozen' or 'proxied' in this environment.\r\n\r\nP,S, - I'm happy to supply feedback, and further test - I'm rather divided in my time, but I'll try to check back.\r\n\r\nI also understand if react doesn't want to support development libraries for tampermonkey environment."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17301",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17301/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17301/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17301/events",
      "html_url": "https://github.com/facebook/react/issues/17301",
      "id": 519149714,
      "node_id": "MDU6SXNzdWU1MTkxNDk3MTQ=",
      "number": 17301,
      "title": "react-test-renderer: the findByType method doesn't work with memo components",
      "user": {
        "login": "bensampaio",
        "id": 1700178,
        "node_id": "MDQ6VXNlcjE3MDAxNzg=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/1700178?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bensampaio",
        "html_url": "https://github.com/bensampaio",
        "followers_url": "https://api.github.com/users/bensampaio/followers",
        "following_url": "https://api.github.com/users/bensampaio/following{/other_user}",
        "gists_url": "https://api.github.com/users/bensampaio/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bensampaio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bensampaio/subscriptions",
        "organizations_url": "https://api.github.com/users/bensampaio/orgs",
        "repos_url": "https://api.github.com/users/bensampaio/repos",
        "events_url": "https://api.github.com/users/bensampaio/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bensampaio/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710400704,
          "node_id": "MDU6TGFiZWw3MTA0MDA3MDQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
          "name": "Component: Test Renderer",
          "color": "006b75",
          "default": false,
          "description": null
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2019-11-07T09:39:23Z",
      "updated_at": "2019-12-19T14:50:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhenever I try something like:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent);\r\n```\r\n\r\nI get the following error: `No instances found with node type: \"undefined\"`. The only way I found for this to work was to reference the `type` property of memo components like this:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent.type);\r\n```\r\n\r\nI am fine with this solution but then flow complains that `type` doesn't exist so I find myself fixing this with `$FlowFixMe` all over the place.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that passing a memo component to `findByType` would work. Or that flow would recognize the `type` property of memo components. I think both should work, specially the first option.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNo, it never worked as far as I know.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17298",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17298/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17298/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17298/events",
      "html_url": "https://github.com/facebook/react/issues/17298",
      "id": 519047645,
      "node_id": "MDU6SXNzdWU1MTkwNDc2NDU=",
      "number": 17298,
      "title": "Hotkey for \"Select an element in the page to inspect it\" in Chrome extension",
      "user": {
        "login": "skoshy",
        "id": 369825,
        "node_id": "MDQ6VXNlcjM2OTgyNQ==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/369825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skoshy",
        "html_url": "https://github.com/skoshy",
        "followers_url": "https://api.github.com/users/skoshy/followers",
        "following_url": "https://api.github.com/users/skoshy/following{/other_user}",
        "gists_url": "https://api.github.com/users/skoshy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/skoshy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/skoshy/subscriptions",
        "organizations_url": "https://api.github.com/users/skoshy/orgs",
        "repos_url": "https://api.github.com/users/skoshy/repos",
        "events_url": "https://api.github.com/users/skoshy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/skoshy/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-11-07T05:20:54Z",
      "updated_at": "2019-11-11T08:11:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.\r\n\r\nTo reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17296",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17296/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17296/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17296/events",
      "html_url": "https://github.com/facebook/react/issues/17296",
      "id": 518988866,
      "node_id": "MDU6SXNzdWU1MTg5ODg4NjY=",
      "number": 17296,
      "title": "Adding visible state to Suspense Fallback component to enhance CSS transitions.",
      "user": {
        "login": "jimmy-e",
        "id": 25621956,
        "node_id": "MDQ6VXNlcjI1NjIxOTU2",
        "avatar_url": "https://avatars2.githubusercontent.com/u/25621956?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimmy-e",
        "html_url": "https://github.com/jimmy-e",
        "followers_url": "https://api.github.com/users/jimmy-e/followers",
        "following_url": "https://api.github.com/users/jimmy-e/following{/other_user}",
        "gists_url": "https://api.github.com/users/jimmy-e/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jimmy-e/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jimmy-e/subscriptions",
        "organizations_url": "https://api.github.com/users/jimmy-e/orgs",
        "repos_url": "https://api.github.com/users/jimmy-e/repos",
        "events_url": "https://api.github.com/users/jimmy-e/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jimmy-e/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-07T01:41:48Z",
      "updated_at": "2019-12-03T00:25:25Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature I suppose.\r\n\r\n**What is the current behavior?**\r\nSuspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).\r\n\r\n**What is the expected behavior?**\r\nIt would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17284",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17284/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17284/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17284/events",
      "html_url": "https://github.com/facebook/react/pull/17284",
      "id": 518203349,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM3MTQwMzkx",
      "number": 17284,
      "title": "[Failing tests] startTransition invalidates downstream memoizations",
      "user": {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-06T02:51:25Z",
      "updated_at": "2020-01-08T19:01:51Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17284",
        "html_url": "https://github.com/facebook/react/pull/17284",
        "diff_url": "https://github.com/facebook/react/pull/17284.diff",
        "patch_url": "https://github.com/facebook/react/pull/17284.patch"
      },
      "body": "Like `dispatch` or `setState`, we should return the same `startTransition` function on every render. This prevents it from invalidating downstream memoizations, like `useCallback`.\r\n\r\nWe do use `useCallback` internally so that a new `startTransition` is only created when the config object changes. However, if you pass an object, this does nothing because the object different every time.\r\n\r\nPotential fixes:\r\n\r\n- Instead of detecting changes in the config object, compare the fields (`timeoutMs` et al) directly. This fixes the worst case (inline config object) but still means we'll occasionally re-create `startTransition` functions.\r\n- Track the current config object on an internal mutable field using an effect and read from that instead of binding a new method each time. This requires extra work in the commit phase, but combined with the previous option (comparing the fields instead of the entire config object) that should be rare.\r\n- Instead of passing the config object to the `useTransition` hook, pass it to the `startTransition` function. This avoids needing to bind the config object to the method. Slightly less ergonomic, however, we're planning to change the default config object so that it's not needed in most cases. So it's only in special cases that you'd actually use one. **This is the most likely option**."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17281",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17281/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17281/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17281/events",
      "html_url": "https://github.com/facebook/react/issues/17281",
      "id": 518001617,
      "node_id": "MDU6SXNzdWU1MTgwMDE2MTc=",
      "number": 17281,
      "title": "react-refresh: Dependent functions/data don't trigger refresh",
      "user": {
        "login": "Lokeh",
        "id": 2687140,
        "node_id": "MDQ6VXNlcjI2ODcxNDA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/2687140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lokeh",
        "html_url": "https://github.com/Lokeh",
        "followers_url": "https://api.github.com/users/Lokeh/followers",
        "following_url": "https://api.github.com/users/Lokeh/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lokeh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lokeh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lokeh/subscriptions",
        "organizations_url": "https://api.github.com/users/Lokeh/orgs",
        "repos_url": "https://api.github.com/users/Lokeh/repos",
        "events_url": "https://api.github.com/users/Lokeh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lokeh/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2019-11-05T20:13:09Z",
      "updated_at": "2019-11-10T19:34:02Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBoth/neither?\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently, react-refresh marks each component whose `type` and/or `signature` has changed as \"dirty\" and will either re-render or re-mount those components selectively.\r\n\r\nThe problem occurs when the dev tooling (webpack, parcel, etc.) loads a module that exports functions or data that are used inside of components, but aren't registered components themselves. For example, a utility function that concatenates a string:\r\n\r\n```js\r\nexport greet(name) {\r\n  return `Hello, ${name}!`;\r\n}\r\n```\r\n\r\nChanging the returned string to `Yo, ${name}!` would trigger this module to reload in the browser, but because components which depended on it don't reload, the old greeting will persist \r\nuntil the next render of each dependent component.\r\n\r\n(BTW in actuality, some tooling will reload immediate dependents of modules that are reloaded in order to get around similar problems. You can extend the dependency chain from two to three modules, where `a.js` depends on `b.js` depends on `c.js`, and you will get the same result when editing `c.js`)\r\n\r\nWhat this forces tooling to do is apply a heuristic to try and guess whether a given module should be refreshed, vs. completely restart the app in order to cause all components to re-mount and pick up any changes that wouldn't be picked up by react-refresh.\r\n\r\nThe problems with the heuristic approach is:\r\n- each dev tool needs to implement this logic, leading to more potential for bugs\r\n- it leads to a degradation of hot reloading capabilities based on what your module exports. not obvious at all on it's face and will lead people to twisting their code base to route around this\r\n- It's very unfriendly to compile-to-JS languages like ReasonML, ClojureScript, etc. which might have different default semantics for what is public / private, different conventions for naming components, etc. which make it difficult to detect whether a module is \"safe\" to refresh\r\n\r\n**What is the expected behavior?**\r\n\r\nThat components depended on newly loaded code will pick up those changes correctly, without losing state.\r\n\r\nA potential (maybe naive?) solution to this in react-refresh is, instead of only re-rendering the components marked as dirty (due to a different `type` being registered), to _re-render from the root_ while maintaining hooks state. If components' signatures have changed, then re-mount.\r\n\r\nI've read through and kind of grok most of the code in react-refresh, but I'm not sure how this would impact the way that the reconciler currently handles the HMR stuff. This is as much of a question, as it is a request: could this be a viable solution?\r\n\r\nI appreciate your time and energy in reading through this. I'm very excited about having first-class support for hot reloading in React, as it's been something that I've loved ever since seeing the first demo of it. I hope that this issue can help create a way to provide a consistently excellent dev experience across tools/platforms/languages!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.11"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17276",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17276/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17276/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17276/events",
      "html_url": "https://github.com/facebook/react/issues/17276",
      "id": 517644391,
      "node_id": "MDU6SXNzdWU1MTc2NDQzOTE=",
      "number": 17276,
      "title": "Unexpected value order with useTransition",
      "user": {
        "login": "denis-sokolov",
        "id": 113721,
        "node_id": "MDQ6VXNlcjExMzcyMQ==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/113721?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denis-sokolov",
        "html_url": "https://github.com/denis-sokolov",
        "followers_url": "https://api.github.com/users/denis-sokolov/followers",
        "following_url": "https://api.github.com/users/denis-sokolov/following{/other_user}",
        "gists_url": "https://api.github.com/users/denis-sokolov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/denis-sokolov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/denis-sokolov/subscriptions",
        "organizations_url": "https://api.github.com/users/denis-sokolov/orgs",
        "repos_url": "https://api.github.com/users/denis-sokolov/repos",
        "events_url": "https://api.github.com/users/denis-sokolov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/denis-sokolov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-11-05T09:17:35Z",
      "updated_at": "2019-11-06T03:22:11Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "The order of returned values in useTransition is opposite to what I consider to be an established pattern of `[value, function]`.\r\n\r\nCurrent: `const [startTransition, isPending] = useTransition()`.\r\nExpected: `const [isPending, startTransition] = useTransition()`.\r\nAlso fine: `const { startTransition, isPending } = useTransition()`.\r\n\r\n## Rationale\r\n\r\nThe order is in my opinion inconsistent with other hooks, built-in and community hooks, and this inconsistency is somewhat bothersome on the aesthetic level.\r\n\r\nUsers without tooling support (TypeScript et al) will see `Uncaught TypeError: startTransition is not a function` error whenever they get the order wrong.\r\n\r\nHaving this insonsistency risks reducing the strength of the convention in the community, making hooks less convenient to use overall.\r\n\r\n## Built-in hooks\r\n\r\n```js\r\nconst [state, setState] = useState();\r\nconst [state, dispatch] = useReducer();\r\nconst [startTransition, isPending] = useTransition();\r\n```\r\n\r\n## Community examples\r\n\r\nI have done a quick overview of positional returned values from hooks in the community. Hooks that use `[value, function]` pattern:\r\n\r\n[useImmer](https://github.com/immerjs/use-immer#useimmer), [streamich/react-use](https://github.com/streamich/react-use) ([useTimeout](https://github.com/streamich/react-use/blob/master/docs/useTimeout.md), [useSessionStorage](https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md), [useLockBodyScroll](https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md), [useLocalStorage](https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md), [useToggle](https://github.com/streamich/react-use/blob/master/docs/useToggle.md)) [bdbch/react-localstorage](https://github.com/bdbch/react-localstorage), [rehooks/local-storage](https://github.com/rehooks/local-storage), [react-rekindle/use-request](https://github.com/react-rekindle/use-request).\r\n\r\nHooks that use `[function, value]` pattern: none.\r\n\r\n## Is second value optional?\r\n\r\nOne could argue that, unlike with other examples, useTransition does not require the user to care about the `isPending` value. However, not using isPending creates a poor UX that the extisting React docs explicitly call out as a problem. We’re supposed to care about isPending. ([docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#adding-a-pending-indicator-adding-a-pending-indicator)).\r\n\r\nBesides, even with corrected value order, the user can still ignore isPending at a low cost of an explicit parameter skip (`const [, startTransition] = useTransition()`).\r\n\r\n## Can we return an object?\r\n\r\nuseState returns a list for convenient aliasing:\r\n\r\n```ts\r\nconst [color, setColor] = useState();\r\nconst [position, setPosition] = useState();\r\n```\r\n\r\nFor hooks that a single component uses only once the benefit is significantly reduced and the community often chooses to return an object with named values instead. This removes the problem of getting positioned values incorrectly and is more inline with the broader JavaScript ecosystem.\r\n\r\nI am speculating here, but it seems like a component will often only have one transition, like [the Button example in the docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#baking-transitions-into-the-design-system-baking-transitions-into-the-design-system). In that case it seems beneficial to return named values and reserve the positioned return values for cases where it really matters.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17273",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17273/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17273/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17273/events",
      "html_url": "https://github.com/facebook/react/issues/17273",
      "id": 517456991,
      "node_id": "MDU6SXNzdWU1MTc0NTY5OTE=",
      "number": 17273,
      "title": "useTransition's startTransition function can result in infinite loop when it's included as a useEffect dependency",
      "user": {
        "login": "kentcdodds",
        "id": 1500684,
        "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kentcdodds",
        "html_url": "https://github.com/kentcdodds",
        "followers_url": "https://api.github.com/users/kentcdodds/followers",
        "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
        "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
        "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
        "repos_url": "https://api.github.com/users/kentcdodds/repos",
        "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-04T23:12:15Z",
      "updated_at": "2019-11-06T02:51:55Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nI've narrowed it down to this:\r\n\r\nhttps://codesandbox.io/s/usetransition-useeffect-dependency-issue-2olmx\r\n\r\nBasically, what I *think* is important is:\r\n\r\n1. There's a state change resulting in the useEffect being called\r\n2. The useEffect callback starts a transition\r\n3. The transition callback sets state\r\n4. The set state results in a render which suspends\r\n\r\nIf these are all the case, then including the `startTransition` function in the dependency array will trigger an infinite loop. In the codesandbox I have a safety in place so your browser doesn't fall over.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `startTransition` function should be consistent between renders.\r\n\r\nI've observed that if you do not inline the config to `useTransition` then this is not a problem. I know that the docs recommend keeping this config consistent, but if this is desirable behavior, then maybe a warning about this particular situation in the docs would be useful. I expect that inlining the config will be pretty natural for people.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- react@0.0.0-experimental-f6b8d31a7\r\n- react-dom@0.0.0-experimental-f6b8d31a7"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17269",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17269/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17269/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17269/events",
      "html_url": "https://github.com/facebook/react/issues/17269",
      "id": 517363473,
      "node_id": "MDU6SXNzdWU1MTczNjM0NzM=",
      "number": 17269,
      "title": "useTransition always times out for full duration when function is passed to setState call",
      "user": {
        "login": "sami616",
        "id": 21065581,
        "node_id": "MDQ6VXNlcjIxMDY1NTgx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/21065581?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sami616",
        "html_url": "https://github.com/sami616",
        "followers_url": "https://api.github.com/users/sami616/followers",
        "following_url": "https://api.github.com/users/sami616/following{/other_user}",
        "gists_url": "https://api.github.com/users/sami616/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sami616/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sami616/subscriptions",
        "organizations_url": "https://api.github.com/users/sami616/orgs",
        "repos_url": "https://api.github.com/users/sami616/repos",
        "events_url": "https://api.github.com/users/sami616/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sami616/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-04T19:49:19Z",
      "updated_at": "2019-11-05T17:35:39Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Here is a codesandbox reproducing the issue. https://codesandbox.io/s/twilight-rain-ez11m\r\n\r\nI have two calls that setState, one in the `nextUser` function, and the other in the `prevUser` function.\r\n\r\nYou'll notice the only difference in how i'm setting state here is that i'm passing a function to the call in `prevState` and not in `nextState`. ie `setUser(v => fetchUser(v.id - 1))`\r\n\r\nThe `nextUser` call is working as expected, the `useTransition` timeout cancels if the request/s come back earlier. However, the `prevUser` call _always_ waits the entire duration, even if the requests resolve way earlier.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17267",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17267/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17267/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17267/events",
      "html_url": "https://github.com/facebook/react/pull/17267",
      "id": 517344370,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM2NDMxNTky",
      "number": 17267,
      "title": "Bailout without entering work loop for roots without work WIP",
      "user": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2019-11-04T19:09:03Z",
      "updated_at": "2020-01-23T18:43:29Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17267",
        "html_url": "https://github.com/facebook/react/pull/17267",
        "diff_url": "https://github.com/facebook/react/pull/17267.diff",
        "patch_url": "https://github.com/facebook/react/pull/17267.patch"
      },
      "body": "Wraps up #16980\r\n\r\nThis addresses some edge cases where React currently does a no-op render and an empty/unnecessary commit.\r\n\r\n- [x] Bailout without entering work loop for roots without work (see #16980).\r\n- [x] Fix failing refs-test by wrapping updates with `act()`.\r\n- [x] See if any other tests trigger this early bailout behavior to better understand the causes.\r\n\r\nThe tests listed below trigger this new early bailout code. Everyone is in `performSyncWorkOnRoot` (none trigger the new code in `performConcurrentWorkOnRoot`). I spot checked a couple of them to see why the new code is being hit, to see if it looked problematic. Below is my findings:\r\n\r\n* `ReactES6Class-test` \"_renders only once when setting state in componentWillMount_\"\r\nThis one calls `performSyncWorkOnRoot()` twice. The first time is the callback passed from `legacyRenderSubtreeIntoContainer` to `unbatchedUpdates`. The second one (the one that bails out) is when `unbatchedUpdates` calls `flushSyncCallbackQueue`. This flush can be bailed out on.\r\n\r\n* `RaectDOMInput-test` \"_should control a value in reentrant events_\"\r\nThis one hits the new codepath when it dispatch a discrete \"input\" event. It looks like when our test calls `node.dispatchEvent()` for the \"input\" event, something is actually dispatching a series of events (input, input, blur, focus) which causes more updates to be scheduled with React than necessary. Now we bail out after the first.\r\n\r\n* `ReactCompositeComponent` \"_should warn about `setState` in render_\"\r\nThis one calls `setState` in render. Without this call, the bailout codepath doesn't get hit. Looks like the `setState` call leaves two things in the queue, so when the subsequent call to `flushSyncCallbackQueue` flushes them both, the second one is a no-op. The first thing gets added to the queue when the `setState` call is made. The second one by `commitRootImpl()` when it calls `ensureRootIsScheduled()` because `getNextRootExpirationTimeToWorkOn` returns a value that indicates there's more work.\r\n\r\n---\r\n\r\n* `ReactTestUtils.act()` > legacy mode › sync › flushes effects on every call\r\n* `ReactTestUtils.act()` > blocking mode › sync › flushes effects on every call\r\n* `ReactDOMInput` > should control a value in reentrant events\r\n* `ReactDOMInput` > should control values in reentrant events with different targets\r\n* `ReactDOMInput` > switching text inputs between numeric and string numbers › changes the number 2 to \"2.0\" using a change handler\r\n* `ReactDOMInput` > should control radio buttons if the tree updates during render\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › always sets the attribute when values change on text inputs\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › does not set the value attribute on number inputs if focused\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › sets the value attribute on number inputs on blur\r\n* `ReactDOMInput` > setting a controlled input to undefined › reverts the value attribute to the initial value\r\n* `ReactDOMInput` > setting a controlled input to undefined › preserves the value property\r\n* `ReactDOMInput` > setting a controlled input to null › reverts the value attribute to the initial value\r\n* `ReactDOMInput` > setting a controlled input to null › preserves the value property\r\n* `ReactUpdates` > should queue updates from during mount\r\n* `ReactUpdates` > uses correct base state for setState inside render phase\r\n* `ReactFresh` > can preserve state for forwardRef\r\n* `ReactFresh` > should not consider two forwardRefs around the same type to be equivalent\r\n* `ReactFresh` > can update forwardRef render function with its wrapper\r\n* `ReactFresh` > can update forwardRef render function in isolation\r\n* `ReactFresh` > can preserve state for simple memo\r\n* `ReactFresh` > can preserve state for memo with custom comparison\r\n* `ReactFresh` > can update simple memo function in isolation\r\n* `ReactFresh` > can preserve state for memo(forwardRef)\r\n* `ReactFresh` > can preserve state for lazy after resolution\r\n* `ReactFresh` > can patch lazy before resolution\r\n* `ReactFresh` > can patch lazy(forwardRef) before resolution\r\n* `ReactFresh` > can patch lazy(memo) before resolution\r\n* `ReactFresh` > can patch lazy(memo(forwardRef)) before resolution\r\n* `ReactFresh` > can patch both trees while suspense is displaying the fallback\r\n* `ReactFresh` > does not re-render ancestor components unnecessarily during a hot update\r\n* `ReactFresh` > does not leak state between components\r\n* `ReactFresh` > can force remount by changing signature\r\n* `ReactFresh` > can remount on signature change within a <root> wrapper\r\n* `ReactFresh` > can remount on signature change within a simple memo wrapper\r\n* `ReactFresh` > can remount on signature change within a lazy simple memo wrapper\r\n* `ReactFresh` > can remount on signature change within forwardRef\r\n* `ReactFresh` > can remount on signature change within forwardRef render function\r\n* `ReactFresh` > can remount on signature change within nested memo\r\n* `ReactFresh` > can remount on signature change within a memo wrapper and custom comparison\r\n* `ReactFresh` > can remount on signature change within a class\r\n* `ReactFresh` > can remount on signature change within a context provider\r\n* `ReactFresh` > can remount on signature change within a context consumer\r\n* `ReactFresh` > can remount on signature change within a suspense node\r\n* `ReactFresh` > can remount on signature change within a mode node\r\n* `ReactFresh` > can remount on signature change within a fragment node\r\n* `ReactFresh` > can remount on signature change within multiple siblings\r\n* `ReactFresh` > can remount on signature change within a profiler node\r\n* `ReactFresh` > resets hooks with dependencies on hot reload\r\n* `ReactFresh` > can hot reload offscreen components\r\n* `ReactFresh` > remounts classes on every edit\r\n* `ReactFresh` > remounts on conversion from class to function and back\r\n* `ReactFresh` > can update multiple roots independently\r\n* `ReactCompositeComponent` > should warn about `setState` in render\r\n* `ReactCompositeComponent` > should warn about `setState` in getChildContext\r\n* `ReactCompositeComponent` > this.state should be updated on setState callback inside componentWillMount\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with clean client render\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with client render on top of good server markup\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with client render on top of bad server markup\r\n* `SimpleEventPlugin` > interactive events, in concurrent mode › flushes pending interactive work before extracting event handler\r\n* `SimpleEventPlugin` > interactive events, in concurrent mode › flushes discrete updates in order\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled text input with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled text input with client render on top of good server markup\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled textarea with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled textarea with client render on top of good server markup\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled checkbox with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled checkbox with client render on top of good server markup\r\n* `ReactBrowserEventEmitter` > should not invoke newly inserted handlers while bubbling\r\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri if sync did not work first time\r\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri for secondary discrete events\r\n* `ReactES6Class` > renders only once when setting state in componentWillMount\r\n* `mixing responders with the heritage event system` > should properly flush sync when the event systems are mixed with unstable_flushDiscreteUpdates\r\n* `mixing responders with the heritage event system` > mixing the Input and Press repsonders › is async for non-input events\r\n* `ReactTypeScriptClass` > renders only once when setting state in componentWillMount\r\n* `ReactCoffeeScriptClass` > renders only once when setting state in componentWillMount\r\n* `ReactDOMHooks` > should not bail out when an update is scheduled from within an event handler in Concurrent Mode\r\n* `ReactIncrementalScheduling` > can opt-out of batching using unbatchedUpdates\r\n* `ReactCompositeComponent-state` > should support setting state\r\n* `ReactCompositeComponent-state` > should treat assigning to this.state inside cWM as a replaceState, with a warning\r\n* `ReactDOMComponentTree` > finds a controlled instance from node and gets its current fiber props"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17262",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17262/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17262/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17262/events",
      "html_url": "https://github.com/facebook/react/pull/17262",
      "id": 517236107,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM2MzQ0OTUw",
      "number": 17262,
      "title": "[react-dom] window.getComputedStyle for robust way to extract vendor prefixed event names. Closes: #17290",
      "user": {
        "login": "sulmanen",
        "id": 2340606,
        "node_id": "MDQ6VXNlcjIzNDA2MDY=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/2340606?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sulmanen",
        "html_url": "https://github.com/sulmanen",
        "followers_url": "https://api.github.com/users/sulmanen/followers",
        "following_url": "https://api.github.com/users/sulmanen/following{/other_user}",
        "gists_url": "https://api.github.com/users/sulmanen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sulmanen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sulmanen/subscriptions",
        "organizations_url": "https://api.github.com/users/sulmanen/orgs",
        "repos_url": "https://api.github.com/users/sulmanen/repos",
        "events_url": "https://api.github.com/users/sulmanen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sulmanen/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-04T15:43:41Z",
      "updated_at": "2019-11-06T17:01:40Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17262",
        "html_url": "https://github.com/facebook/react/pull/17262",
        "diff_url": "https://github.com/facebook/react/pull/17262.diff",
        "patch_url": "https://github.com/facebook/react/pull/17262.patch"
      },
      "body": "Fixes https://github.com/facebook/react/issues/17290\r\n\r\nThis type of behavior has been reported [before](https://github.com/facebook/react/issues/13170). The issue was closed due to being caused by a browser plugin apparently. That's not the case here (will also make that closed case work).\r\n\r\nIn getVendorPrefixedEventName, the use case is to find the correct vendor prefixed event name. According to the MDN doc above these should not be available on a freshly created element with no style attribute set. Somehow it seems to work, except in my use case.\r\n\r\nAccording to the [getComputedStyle](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle#Description) documentation, \"The element.style object should be used to set styles on that element, or inspect styles directly added to it from JavaScript manipulation or the global style attribute\"\r\n\r\nUsing getComputedStyle on the newly created element,  react-dom vendor prefixed event name sniffing runs, which makes sense given MDN docs as this is a readonly use case. After all react-dom is trying to go through all styles of the element, no just those set in it's style attribute.\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17260",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17260/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17260/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17260/events",
      "html_url": "https://github.com/facebook/react/issues/17260",
      "id": 517222256,
      "node_id": "MDU6SXNzdWU1MTcyMjIyNTY=",
      "number": 17260,
      "title": "Static rendering strategy doesn't work on codesplitted routes",
      "user": {
        "login": "carlesnunez",
        "id": 5639972,
        "node_id": "MDQ6VXNlcjU2Mzk5NzI=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/5639972?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/carlesnunez",
        "html_url": "https://github.com/carlesnunez",
        "followers_url": "https://api.github.com/users/carlesnunez/followers",
        "following_url": "https://api.github.com/users/carlesnunez/following{/other_user}",
        "gists_url": "https://api.github.com/users/carlesnunez/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/carlesnunez/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/carlesnunez/subscriptions",
        "organizations_url": "https://api.github.com/users/carlesnunez/orgs",
        "repos_url": "https://api.github.com/users/carlesnunez/repos",
        "events_url": "https://api.github.com/users/carlesnunez/events{/privacy}",
        "received_events_url": "https://api.github.com/users/carlesnunez/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710332294,
          "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
          "name": "Component: Server Rendering",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 620368407,
          "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
          "name": "Resolution: Needs More Information",
          "color": "fffde7",
          "default": false,
          "description": null
        },
        {
          "id": 40929155,
          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
          "name": "Type: Question",
          "color": "cc317c",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-04T15:21:26Z",
      "updated_at": "2019-11-06T00:49:36Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component. \r\n\r\n**What is the expected behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML\r\n\r\n**What is the current behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.\r\n\r\nI've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.\r\n\r\nWhat I'm doing wrong?\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17258",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17258/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17258/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17258/events",
      "html_url": "https://github.com/facebook/react/issues/17258",
      "id": 517073779,
      "node_id": "MDU6SXNzdWU1MTcwNzM3Nzk=",
      "number": 17258,
      "title": "Bug - react onClick() doesn't work well on WKWebview - iOS 13",
      "user": {
        "login": "Aarbel",
        "id": 25119847,
        "node_id": "MDQ6VXNlcjI1MTE5ODQ3",
        "avatar_url": "https://avatars2.githubusercontent.com/u/25119847?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Aarbel",
        "html_url": "https://github.com/Aarbel",
        "followers_url": "https://api.github.com/users/Aarbel/followers",
        "following_url": "https://api.github.com/users/Aarbel/following{/other_user}",
        "gists_url": "https://api.github.com/users/Aarbel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Aarbel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Aarbel/subscriptions",
        "organizations_url": "https://api.github.com/users/Aarbel/orgs",
        "repos_url": "https://api.github.com/users/Aarbel/repos",
        "events_url": "https://api.github.com/users/Aarbel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Aarbel/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 15,
      "created_at": "2019-11-04T10:50:47Z",
      "updated_at": "2020-01-10T05:38:21Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "# Context\r\nApple just realeased new version of WKWebview with iOS 13.\r\nOn my mobile app i don't use react native but pure React / HTML inside a Native Webview.\r\n\r\n# Problem \r\nTouch events don't work well on onClick() since the update. \r\nThe user has to touch very fast to trigger the onClick(). If the use touches more than 200 / 300 ms it doesn't trigger the onClick()\r\n\r\nDo you know a way to fix it ?\r\n\r\nThanks a lot for your help !\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17256",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17256/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17256/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17256/events",
      "html_url": "https://github.com/facebook/react/issues/17256",
      "id": 516904161,
      "node_id": "MDU6SXNzdWU1MTY5MDQxNjE=",
      "number": 17256,
      "title": "\"NotFoundError: Failed to execute 'removeChild' on 'Node'\" when using React.Fragment <></> with Chrome extension which does not modify the DOM tree below the root div of the React app",
      "user": {
        "login": "tonix-tuft",
        "id": 10134421,
        "node_id": "MDQ6VXNlcjEwMTM0NDIx",
        "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tonix-tuft",
        "html_url": "https://github.com/tonix-tuft",
        "followers_url": "https://api.github.com/users/tonix-tuft/followers",
        "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
        "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
        "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
        "repos_url": "https://api.github.com/users/tonix-tuft/repos",
        "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2019-11-03T23:06:16Z",
      "updated_at": "2020-01-21T14:03:37Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "This has already been discussed before (#14740), but there wasn't a reproducing example for this kind of issue and I think that my use case is also a bit different.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI believe this can be considered a bug.\r\n\r\n**What is the current behavior?**\r\nIn order to reproduce this issue using Chrome, you will need to install the following Chrome extension called TransOver:\r\n\r\n![Screen Shot 2019-11-03 at 22 51 33](https://user-images.githubusercontent.com/10134421/68092541-86165d80-fe8c-11e9-9f39-e566f770fcb2.png)\r\n\r\nhttps://chrome.google.com/webstore/detail/transover/aggiiclaiamajehmlfpkjmlbadmkledi?hl=en\r\n\r\nI use it to translate text on hover.\r\nThe only thing that this extension does is appending a tooltip with the translated text to the `body` HTML element when you hover an element with text (it doesn't seem it appends stuff below the React's root `div` element).\r\n\r\nI have created two code sandboxes to show you better and explain the problem.\r\nIt is a minimal example of a movie app like the one Dan showed at JSConf 2018 in Iceland, though not as beautiful as his and without all that cool Suspense stuff, but at least it uses hooks :) .\r\n\r\n- https://codesandbox.io/s/heuristic-lake-exxvu\r\n\r\n- https://codesandbox.io/s/magical-grass-016kc\r\n\r\nThe two code sandboxes are essentially identical, the only difference is that the first one (`heuristic-lake-exxvu`) uses a `div` element for `MovieApp`, whereas the second (`magical-grass-016kc`) uses a `React.Fragment` (`<></>`) component:\r\n\r\n`heuristic-lake-exxvu`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <div> // <======================= Uses a `div`\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\n`magical-grass-016kc`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <> // <======================= Uses a fragment\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\nNow, if you open `heuristic-lake-exxvu` and click on the `Show movie info` button of any movie in the list, you will see the `Loading...` text before the promise with the data of the movie resolves, and the `Movie` component is rendered.\r\n\r\nBefore the promise resolves, try hovering on the `Loading...` text with the `TransOver` extension enabled, you should see:\r\n\r\n![Screen Shot 2019-11-03 at 23 26 48](https://user-images.githubusercontent.com/10134421/68093013-764d4800-fe91-11e9-8b64-2dbdade0a500.png)\r\n\r\nThe world makes sense here, no errors, no warnings, everything works.\r\n\r\nNow try to do the same thing on `magical-grass-016kc`, as soon as you hover `Loading...`, you will see the `NotFoundError: Failed to execute 'removeChild' on 'Node'` error logged in the browser's console:\r\n\r\n![Screen Shot 2019-11-03 at 23 40 00](https://user-images.githubusercontent.com/10134421/68093177-49019980-fe93-11e9-9f9b-13f91a12e996.png)\r\n\r\n![Screen Shot 2019-11-03 at 23 40 52](https://user-images.githubusercontent.com/10134421/68093194-6df60c80-fe93-11e9-910f-ae748bc9fb91.png)\r\n\r\nHere is a streamable video showing this same error:\r\n\r\nhttps://streamable.com/4gxua\r\n\r\n**What is the expected behavior?**\r\nIn `heuristic-lake-exxvu` (uses a `div` instead of React fragment), everything worked.\r\nThe TransOver extension appends to `body` and does not modify the React's root `div` neither does it append stuff below it, so I would expect the code in the React fragment example (`magical-grass-016kc`) to behave the same and work as in `heuristic-lake-exxvu`.\r\n\r\nChrome is plenty of useful extensions like this one and they should not really interfere with React, I think that users using React applications may also install other extensions which modify the DOM which they find useful.\r\nIf an extension appends to body like TransOver does, I wouldn't expect React to have problems with it and cause undesirable effects and application errors like this one.\r\n\r\nThis is my opinion, I would be very glad to hear what you think about it, and if you think I have spotted a bug of React fragments (I think it's a bug because, again, it works when using a `div` in `heuristic-lake-exxvu`).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nBrowser: Chrome\r\nReact v16.11.0\r\nReact DOM v16.11.0\r\n\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17254",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17254/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17254/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17254/events",
      "html_url": "https://github.com/facebook/react/issues/17254",
      "id": 516563176,
      "node_id": "MDU6SXNzdWU1MTY1NjMxNzY=",
      "number": 17254,
      "title": "React DevTools w/ Electron: Profiler \"Reload and start profiling\" doesn't work due to XMLHttpRequest 'null' origin",
      "user": {
        "login": "joltmode",
        "id": 1030080,
        "node_id": "MDQ6VXNlcjEwMzAwODA=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/1030080?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joltmode",
        "html_url": "https://github.com/joltmode",
        "followers_url": "https://api.github.com/users/joltmode/followers",
        "following_url": "https://api.github.com/users/joltmode/following{/other_user}",
        "gists_url": "https://api.github.com/users/joltmode/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/joltmode/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joltmode/subscriptions",
        "organizations_url": "https://api.github.com/users/joltmode/orgs",
        "repos_url": "https://api.github.com/users/joltmode/repos",
        "events_url": "https://api.github.com/users/joltmode/events{/privacy}",
        "received_events_url": "https://api.github.com/users/joltmode/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-11-02T10:44:08Z",
      "updated_at": "2019-11-02T15:45:02Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nAn error gets thrown when using DevTools Profiler on **Electron** with the \"**Reload and start profiling**\" feature that leaves Profiler in an unexpected state - the profiling session does not end.\r\n\r\nI initially opened [the issue over at Electron](https://github.com/electron/electron/issues/20915), but [got asked to get your opinion first](https://github.com/electron/electron/issues/20915#issuecomment-548996868).\r\n\r\n**What is the current behavior?**\r\n\r\n- Open React DevTools Profiler in **Electron**\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\" - does not work\r\n- Because there are errors in console (actually thrown immediately after reload, don't have to do any extra actions):\r\n  ```\r\n  Access to XMLHttpRequest at 'chrome-extension://react-developer-tools/build/renderer.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, https.\r\n  ```\r\n  ```\r\n  Uncaught DOMException: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'chrome-extension://react-developer-tools/build/renderer.js'.\r\n  ```\r\n\r\n![Errors after triggering profiler](https://user-images.githubusercontent.com/1030080/68028419-81e81580-fcbd-11e9-85ae-58b8437df6d8.png)\r\n\r\n![The respective code in React DevTools](https://user-images.githubusercontent.com/1030080/68028680-1ce0ef80-fcbe-11e9-9b63-4fa0494af0dd.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou'll have to use [Electron Fiddle](https://github.com/electron/fiddle) for this one with this gist: https://gist.github.com/joltmode/82574cab4970def210dac0c68d4c34b8\r\n\r\n**What is the expected behavior?**\r\n\r\n- Open React DevTools Profiler\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\"\r\n- See profiler results\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- Latest version of DevTools\r\n- Electron 6.1.2"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17246",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17246/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17246/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17246/events",
      "html_url": "https://github.com/facebook/react/issues/17246",
      "id": 515861804,
      "node_id": "MDU6SXNzdWU1MTU4NjE4MDQ=",
      "number": 17246,
      "title": "It's not possible to access the shadowRoot of a Web Component when using React Suspense/Lazy",
      "user": {
        "login": "CristianDDias",
        "id": 30023600,
        "node_id": "MDQ6VXNlcjMwMDIzNjAw",
        "avatar_url": "https://avatars3.githubusercontent.com/u/30023600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CristianDDias",
        "html_url": "https://github.com/CristianDDias",
        "followers_url": "https://api.github.com/users/CristianDDias/followers",
        "following_url": "https://api.github.com/users/CristianDDias/following{/other_user}",
        "gists_url": "https://api.github.com/users/CristianDDias/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CristianDDias/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CristianDDias/subscriptions",
        "organizations_url": "https://api.github.com/users/CristianDDias/orgs",
        "repos_url": "https://api.github.com/users/CristianDDias/repos",
        "events_url": "https://api.github.com/users/CristianDDias/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CristianDDias/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-11-01T01:44:28Z",
      "updated_at": "2019-11-01T09:09:50Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen using Web Components and React Suspense/Lazy, it's not possible to access the `shadowRoot` in the `useEffect` because the `shadowRoot` still haven't loaded its child elements.\r\n\r\n**Steps to reproduce the problem.**\r\n[CodeSandbox](https://codesandbox.io/s/thirsty-poitras-sq22m)\r\nIn the `TabComp` component, if I change the line `const { t } = useTranslation(\"\", { useSuspense: false });` for `const { t } = useTranslation();` an error occurs. The error occurs because the `shadowRoot` still haven't loaded its child elements and it's trying to access a child element.\r\n\r\nI also commented about this problem in an [issue](https://github.com/i18next/react-i18next/issues/817#issuecomment-548629946) of the `react-i18next` library, but I'm not sure if this problem is related to their library.\r\n\r\n**What is the expected behavior?**\r\nThe `shadowRoot` property of a Web Component can be accessed in the `useEffect` even if the component is using React Suspense/Lazy.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.4\r\nBrowser Chrome 77\r\nI haven't tried this in previous versions of React."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17245",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17245/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17245/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17245/events",
      "html_url": "https://github.com/facebook/react/pull/17245",
      "id": 515825659,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzM1MjE4MDYw",
      "number": 17245,
      "title": "Add preload() to React.lazy",
      "user": {
        "login": "mjackson",
        "id": 92839,
        "node_id": "MDQ6VXNlcjkyODM5",
        "avatar_url": "https://avatars0.githubusercontent.com/u/92839?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjackson",
        "html_url": "https://github.com/mjackson",
        "followers_url": "https://api.github.com/users/mjackson/followers",
        "following_url": "https://api.github.com/users/mjackson/following{/other_user}",
        "gists_url": "https://api.github.com/users/mjackson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mjackson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mjackson/subscriptions",
        "organizations_url": "https://api.github.com/users/mjackson/orgs",
        "repos_url": "https://api.github.com/users/mjackson/repos",
        "events_url": "https://api.github.com/users/mjackson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mjackson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2019-10-31T23:55:20Z",
      "updated_at": "2019-11-04T17:34:16Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17245",
        "html_url": "https://github.com/facebook/react/pull/17245",
        "diff_url": "https://github.com/facebook/react/pull/17245.diff",
        "patch_url": "https://github.com/facebook/react/pull/17245.patch"
      },
      "body": "This allows lazy components to be initialized ahead of render time. My use case is for preloading lazy components in React Router ahead of when they are needed. We could do this in a number of scenarios including when we first determine a component is going to be part of the render tree or when anticipating it will be.\r\n\r\nJust submitting this draft to get feedback from the core team. If it's something you'd like, I can go ahead and write a test.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17239",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17239/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17239/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17239/events",
      "html_url": "https://github.com/facebook/react/issues/17239",
      "id": 515529503,
      "node_id": "MDU6SXNzdWU1MTU1Mjk1MDM=",
      "number": 17239,
      "title": "Blink with useTransition",
      "user": {
        "login": "gregberge",
        "id": 266302,
        "node_id": "MDQ6VXNlcjI2NjMwMg==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/266302?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gregberge",
        "html_url": "https://github.com/gregberge",
        "followers_url": "https://api.github.com/users/gregberge/followers",
        "following_url": "https://api.github.com/users/gregberge/following{/other_user}",
        "gists_url": "https://api.github.com/users/gregberge/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gregberge/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gregberge/subscriptions",
        "organizations_url": "https://api.github.com/users/gregberge/orgs",
        "repos_url": "https://api.github.com/users/gregberge/repos",
        "events_url": "https://api.github.com/users/gregberge/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gregberge/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-31T15:33:52Z",
      "updated_at": "2019-10-31T17:05:17Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Bug**\r\n\r\n**What is the current behavior?**\r\n\r\nAs discussed with @gaearon in this thread: https://twitter.com/dan_abramov/status/1189923059031068672\r\n\r\nWhen the `useTransition` is fast, it results to a small blink for the user. You can reproduce it in this example :\r\n\r\n- Choose \"Concurrent Mode\"\r\n- Click \"Next\" in \"fretch-mode: legacy-mode\" \r\n\r\nhttps://codesandbox.io/s/fretch-example-r6t8g\r\n\r\nA simpler example can be provided but I don't have time right now, I just want to track the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behaviour would be to avoid the blink if it is less than \"100ms\" (or another arbitrary delay).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe experimental version, see the example.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17238",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17238/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17238/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17238/events",
      "html_url": "https://github.com/facebook/react/issues/17238",
      "id": 515489785,
      "node_id": "MDU6SXNzdWU1MTU0ODk3ODU=",
      "number": 17238,
      "title": "Experimental: Unknown unit of work tag (18).",
      "user": {
        "login": "CodeWitchBella",
        "id": 43038212,
        "node_id": "MDQ6VXNlcjQzMDM4MjEy",
        "avatar_url": "https://avatars2.githubusercontent.com/u/43038212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodeWitchBella",
        "html_url": "https://github.com/CodeWitchBella",
        "followers_url": "https://api.github.com/users/CodeWitchBella/followers",
        "following_url": "https://api.github.com/users/CodeWitchBella/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodeWitchBella/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodeWitchBella/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodeWitchBella/subscriptions",
        "organizations_url": "https://api.github.com/users/CodeWitchBella/orgs",
        "repos_url": "https://api.github.com/users/CodeWitchBella/repos",
        "events_url": "https://api.github.com/users/CodeWitchBella/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodeWitchBella/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-31T14:44:12Z",
      "updated_at": "2019-10-31T14:44:12Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nReact@experimental sometimes issues following error on page load.\r\n```\r\nError: \"Unknown unit of work tag (18). This error is likely caused by a bug in React. Please file an issue.\"\r\n    completeWork http://localhost:3000/dist/index.js line 14463 > eval:21603\r\n    completeUnitOfWork http://localhost:3000/dist/index.js line 14463 > eval:24709\r\n    performUnitOfWork http://localhost:3000/dist/index.js line 14463 > eval:24685\r\n    workLoopSync http://localhost:3000/dist/index.js line 14463 > eval:24650\r\n    performSyncWorkOnRoot http://localhost:3000/dist/index.js line 14463 > eval:24249\r\n    flushSyncCallbackQueueImpl http://localhost:3000/dist/index.js line 14463 > eval:12192\r\n    unstable_runWithPriority http://localhost:3000/dist/index.js line 42728 > eval:818\r\n    runWithPriority$2 http://localhost:3000/dist/index.js line 14463 > eval:12142\r\n    flushSyncCallbackQueueImpl http://localhost:3000/dist/index.js line 14463 > eval:12187\r\n    workLoop http://localhost:3000/dist/index.js line 42728 > eval:762\r\n    flushWork http://localhost:3000/dist/index.js line 42728 > eval:717\r\n    performWorkUntilDeadline http://localhost:3000/dist/index.js line 42728 > eval:219\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI have no idea what triggers this error and my codebase is not exactly small and because it appears only sometimes (maybe 10%) it is really hard to track down.\r\n\r\n**What is the expected behavior?**\r\nNo error\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nLatest firefox and chromium on fedora 31. React@experimental and it started (I think) after I started experimenting with concurrent mode and suspense so it did not appear on older version, but is also not applicable to it.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17229",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17229/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17229/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17229/events",
      "html_url": "https://github.com/facebook/react/issues/17229",
      "id": 514995254,
      "node_id": "MDU6SXNzdWU1MTQ5OTUyNTQ=",
      "number": 17229,
      "title": "onMouseEnter is fired on disabled buttons",
      "user": {
        "login": "diegohaz",
        "id": 3068563,
        "node_id": "MDQ6VXNlcjMwNjg1NjM=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/3068563?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/diegohaz",
        "html_url": "https://github.com/diegohaz",
        "followers_url": "https://api.github.com/users/diegohaz/followers",
        "following_url": "https://api.github.com/users/diegohaz/following{/other_user}",
        "gists_url": "https://api.github.com/users/diegohaz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/diegohaz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/diegohaz/subscriptions",
        "organizations_url": "https://api.github.com/users/diegohaz/orgs",
        "repos_url": "https://api.github.com/users/diegohaz/repos",
        "events_url": "https://api.github.com/users/diegohaz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/diegohaz/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-10-30T21:31:43Z",
      "updated_at": "2019-12-29T03:33:12Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n`onMouseEnter` is fired on `disabled` buttons.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/react-onmouseenter-on-disabled-buttons-fskwd\r\n\r\n**What is the expected behavior?**\r\n\r\n`onMouseEnter` shouldn't be triggered on `disabled` buttons.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.11.0 (not sure when it started to happen)\r\nChrome/MacOS\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17217",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17217/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17217/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17217/events",
      "html_url": "https://github.com/facebook/react/pull/17217",
      "id": 514358633,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzMzOTkwNzg4",
      "number": 17217,
      "title": "Move resetAfterCommit until after we updated the root's current tree",
      "user": {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-10-30T02:44:02Z",
      "updated_at": "2020-01-08T19:01:50Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17217",
        "html_url": "https://github.com/facebook/react/pull/17217",
        "diff_url": "https://github.com/facebook/react/pull/17217.diff",
        "patch_url": "https://github.com/facebook/react/pull/17217.patch"
      },
      "body": "Currently we disable all user space events in resetAfterCommit so, if you just use React events, it doesn't really matter where we call this.\r\n\r\nHowever, setting focus and selection can be observable e.g. using native browser events. If you setState or something in those events, they should probably behave as if you're already on the new tree.\r\n\r\nSimilarly if we do end up triggering blur/focus events simulated, then those should see the updated tree.\r\n\r\nInterestingly, this would fire before life-cycles which is confusing. Although that also happens if you set focus manually on the DOM in a life-cycle too. Triggering a blur after life-cycles could work but needs to take into account that focus can change possibly several times in the life-cycles too.\r\n\r\nRelated to https://github.com/facebook/react/pull/17214"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17208",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17208/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17208/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17208/events",
      "html_url": "https://github.com/facebook/react/issues/17208",
      "id": 513948819,
      "node_id": "MDU6SXNzdWU1MTM5NDg4MTk=",
      "number": 17208,
      "title": "Devtools tabs should not appear in chrome-extension pages when using react-devtools as an entry point",
      "user": {
        "login": "nickmccurdy",
        "id": 927220,
        "node_id": "MDQ6VXNlcjkyNzIyMA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/927220?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nickmccurdy",
        "html_url": "https://github.com/nickmccurdy",
        "followers_url": "https://api.github.com/users/nickmccurdy/followers",
        "following_url": "https://api.github.com/users/nickmccurdy/following{/other_user}",
        "gists_url": "https://api.github.com/users/nickmccurdy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nickmccurdy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nickmccurdy/subscriptions",
        "organizations_url": "https://api.github.com/users/nickmccurdy/orgs",
        "repos_url": "https://api.github.com/users/nickmccurdy/repos",
        "events_url": "https://api.github.com/users/nickmccurdy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nickmccurdy/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "threepointone",
        "id": 18808,
        "node_id": "MDQ6VXNlcjE4ODA4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/threepointone",
        "html_url": "https://github.com/threepointone",
        "followers_url": "https://api.github.com/users/threepointone/followers",
        "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
        "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
        "organizations_url": "https://api.github.com/users/threepointone/orgs",
        "repos_url": "https://api.github.com/users/threepointone/repos",
        "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
        "received_events_url": "https://api.github.com/users/threepointone/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "threepointone",
          "id": 18808,
          "node_id": "MDQ6VXNlcjE4ODA4",
          "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/threepointone",
          "html_url": "https://github.com/threepointone",
          "followers_url": "https://api.github.com/users/threepointone/followers",
          "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
          "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
          "organizations_url": "https://api.github.com/users/threepointone/orgs",
          "repos_url": "https://api.github.com/users/threepointone/repos",
          "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
          "received_events_url": "https://api.github.com/users/threepointone/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2019-10-29T14:13:36Z",
      "updated_at": "2020-01-13T21:57:45Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe React devtools tabs in Chrome devtools can be displayed in extension pages, even though modifying extensions in other extensions is not supported by Chrome, and React devtools are therefore broken.\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774646-21927300-fa34-11e9-99b5-ea3c62a99e0d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774697-38d16080-fa34-11e9-8ea6-fddb21c7bb14.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Install Chrome and React devtools\r\n2. Open devtools in a chrome-extension page implemented with React\r\n\r\nExample: [prettier-chrome-extension](https://github.com/prettier/prettier-chrome-extension/tree/options) (install from source and open extension options)\r\n\r\n**What is the expected behavior?**\r\n\r\nReact devtools should not appear when it's not supported, just like when devtools are opened on a page that doesn't use React.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- React Developer Tools 4.2.0 (10/3/2019)\r\n- Chrome 78.0.3904.70\r\n- macOS 10.15"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17205",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17205/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17205/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17205/events",
      "html_url": "https://github.com/facebook/react/issues/17205",
      "id": 513252907,
      "node_id": "MDU6SXNzdWU1MTMyNTI5MDc=",
      "number": 17205,
      "title": "Utilize Suspense to express app init loader",
      "user": {
        "login": "FredyC",
        "id": 1096340,
        "node_id": "MDQ6VXNlcjEwOTYzNDA=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1096340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FredyC",
        "html_url": "https://github.com/FredyC",
        "followers_url": "https://api.github.com/users/FredyC/followers",
        "following_url": "https://api.github.com/users/FredyC/following{/other_user}",
        "gists_url": "https://api.github.com/users/FredyC/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FredyC/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FredyC/subscriptions",
        "organizations_url": "https://api.github.com/users/FredyC/orgs",
        "repos_url": "https://api.github.com/users/FredyC/repos",
        "events_url": "https://api.github.com/users/FredyC/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FredyC/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1109407645,
          "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
          "name": "Component: Suspense",
          "color": "8ffcd6",
          "default": false,
          "description": ""
        },
        {
          "id": 40929155,
          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
          "name": "Type: Question",
          "color": "cc317c",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2019-10-28T11:40:50Z",
      "updated_at": "2019-11-01T15:45:08Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "With Concurrent mode getting finalized, I went to try to solve an old problem I have.\r\n\r\nThe app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.\r\n\r\nI've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i\r\n\r\nThe first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.\r\n\r\nThe last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17203",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17203/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17203/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17203/events",
      "html_url": "https://github.com/facebook/react/issues/17203",
      "id": 513228074,
      "node_id": "MDU6SXNzdWU1MTMyMjgwNzQ=",
      "number": 17203,
      "title": "Empty object as SuspenseConfig acts like infinite timeout",
      "user": {
        "login": "Eddie-CooRo",
        "id": 20463083,
        "node_id": "MDQ6VXNlcjIwNDYzMDgz",
        "avatar_url": "https://avatars1.githubusercontent.com/u/20463083?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eddie-CooRo",
        "html_url": "https://github.com/Eddie-CooRo",
        "followers_url": "https://api.github.com/users/Eddie-CooRo/followers",
        "following_url": "https://api.github.com/users/Eddie-CooRo/following{/other_user}",
        "gists_url": "https://api.github.com/users/Eddie-CooRo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Eddie-CooRo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Eddie-CooRo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eddie-CooRo/orgs",
        "repos_url": "https://api.github.com/users/Eddie-CooRo/repos",
        "events_url": "https://api.github.com/users/Eddie-CooRo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Eddie-CooRo/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1109407645,
          "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
          "name": "Component: Suspense",
          "color": "8ffcd6",
          "default": false,
          "description": ""
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-28T10:46:54Z",
      "updated_at": "2019-10-31T11:23:54Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbable Bug\r\n\r\n**What is the current behavior?**\r\nWhen an empty object is passed as SuspenseConfig, React waits infinitely on the previous tree for new Suspended components to get resolved.\r\n\r\n**A minimal demo of the problem:**\r\nHere is a demonstration, using the same example used throughout the concurrent docs:\r\nhttps://codesandbox.io/s/empty-suspense-config-example-88ghb \r\n\r\n**What is the expected behavior?**\r\nI don't know if it's a bug, or it's intentional. But if it's the expected behavior, I think it's better to add this to the documentation. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact and ReactDOM's experimental build"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17201",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17201/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17201/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17201/events",
      "html_url": "https://github.com/facebook/react/issues/17201",
      "id": 513139880,
      "node_id": "MDU6SXNzdWU1MTMxMzk4ODA=",
      "number": 17201,
      "title": "\"de-opting to synchronous mode\" in use-subscription README",
      "user": {
        "login": "jamesknelson",
        "id": 161707,
        "node_id": "MDQ6VXNlcjE2MTcwNw==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/161707?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesknelson",
        "html_url": "https://github.com/jamesknelson",
        "followers_url": "https://api.github.com/users/jamesknelson/followers",
        "following_url": "https://api.github.com/users/jamesknelson/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamesknelson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jamesknelson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamesknelson/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesknelson/orgs",
        "repos_url": "https://api.github.com/users/jamesknelson/repos",
        "events_url": "https://api.github.com/users/jamesknelson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jamesknelson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1109410193,
          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
          "name": "Component: Hooks",
          "color": "c2f27b",
          "default": false,
          "description": ""
        },
        {
          "id": 40929155,
          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
          "name": "Type: Question",
          "color": "cc317c",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-28T07:31:07Z",
      "updated_at": "2019-10-29T12:42:38Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nOutdated README (maybe?)\r\n\r\n**What do the docs currently say?**\r\n\r\n> use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.\r\n\r\nIn the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.\r\n\r\nWould this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17199",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17199/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17199/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17199/events",
      "html_url": "https://github.com/facebook/react/issues/17199",
      "id": 513093679,
      "node_id": "MDU6SXNzdWU1MTMwOTM2Nzk=",
      "number": 17199,
      "title": "Identify component as 'pending', when used with useTransition",
      "user": {
        "login": "samdenty",
        "id": 13242392,
        "node_id": "MDQ6VXNlcjEzMjQyMzky",
        "avatar_url": "https://avatars3.githubusercontent.com/u/13242392?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/samdenty",
        "html_url": "https://github.com/samdenty",
        "followers_url": "https://api.github.com/users/samdenty/followers",
        "following_url": "https://api.github.com/users/samdenty/following{/other_user}",
        "gists_url": "https://api.github.com/users/samdenty/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/samdenty/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/samdenty/subscriptions",
        "organizations_url": "https://api.github.com/users/samdenty/orgs",
        "repos_url": "https://api.github.com/users/samdenty/repos",
        "events_url": "https://api.github.com/users/samdenty/events{/privacy}",
        "received_events_url": "https://api.github.com/users/samdenty/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-28T04:43:20Z",
      "updated_at": "2019-10-28T05:40:54Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `useTransition`, the components are re-rendered with the last state they had. \r\n Without the ability to identify this 'pending' phase, components can't conditionally choose not to throw a promise - ie. the promise was created outside React.\r\n\r\n**What is the expected behavior?**\r\n\r\nComponents should be able to differentiate the current phase they're in, eg.\r\n\r\n```js\r\nconst phase = usePhase()\r\n// or\r\nconst isPending = useTransitionPending()\r\n```\r\n\r\n**Example**\r\n\r\nhttps://codesandbox.io/s/serene-wozniak-pnhhh\r\n\r\n**Use case**\r\n\r\nLibrary (pending release): [gqless](https://gqless.netlify.com/)\r\n\r\nI've created a factory which tracks usage of 'references' during render, and updates the components when they change:\r\n\r\n```js\r\nconst MyComponent = connected(() => {\r\n  const data = accessReference()\r\n  return <div>{data}</div>\r\n})\r\n```\r\n\r\n```js\r\nfunction connected(component) {\r\n\treturn (props) => {\r\n\t\tconst forceUpdate = useForceUpdate()\r\n\r\n\t\treferences = startRecording()\r\n\r\n\t\ttry {\r\n\t\t\treturn component(props)\r\n\t\t} finally {\r\n\t\t\treferences.stopRecording()\r\n\t\t}\r\n\t\t\r\n\t\tfor (ref of references) {\r\n\t\t\tref.onUpdate(forceUpdate)\r\n\t\t\tref.onPendingChange(forceUpdate)\r\n\t\t\tif (ref.isLoading) throw promise\r\n\t\t}\r\n\t}\t\r\n}\r\n```\r\n\r\nWithout the ability to check whether the current component is 'pending', the promise will be thrown on the 'pending' render phase - which prevents the transition from working.\r\n\r\nThis doesn't happen in the [examples](https://reactjs.org/docs/concurrent-mode-patterns.html), as the data is immutable and passed down as the `resource` prop.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17197",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17197/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17197/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17197/events",
      "html_url": "https://github.com/facebook/react/pull/17197",
      "id": 512892918,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyODA2NTY3",
      "number": 17197,
      "title": "Test with AppVeyor with Node 11 and 12",
      "user": {
        "login": "Saibamen",
        "id": 905878,
        "node_id": "MDQ6VXNlcjkwNTg3OA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/905878?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Saibamen",
        "html_url": "https://github.com/Saibamen",
        "followers_url": "https://api.github.com/users/Saibamen/followers",
        "following_url": "https://api.github.com/users/Saibamen/following{/other_user}",
        "gists_url": "https://api.github.com/users/Saibamen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Saibamen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Saibamen/subscriptions",
        "organizations_url": "https://api.github.com/users/Saibamen/orgs",
        "repos_url": "https://api.github.com/users/Saibamen/repos",
        "events_url": "https://api.github.com/users/Saibamen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Saibamen/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2019-10-26T22:24:49Z",
      "updated_at": "2019-10-31T18:09:23Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17197",
        "html_url": "https://github.com/facebook/react/pull/17197",
        "diff_url": "https://github.com/facebook/react/pull/17197.diff",
        "patch_url": "https://github.com/facebook/react/pull/17197.patch"
      },
      "body": "Test with Node 11 and 12"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17190",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17190/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17190/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17190/events",
      "html_url": "https://github.com/facebook/react/issues/17190",
      "id": 512813254,
      "node_id": "MDU6SXNzdWU1MTI4MTMyNTQ=",
      "number": 17190,
      "title": "useTransition hook name already exits in the ecosystem",
      "user": {
        "login": "just-boris",
        "id": 812240,
        "node_id": "MDQ6VXNlcjgxMjI0MA==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/812240?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/just-boris",
        "html_url": "https://github.com/just-boris",
        "followers_url": "https://api.github.com/users/just-boris/followers",
        "following_url": "https://api.github.com/users/just-boris/following{/other_user}",
        "gists_url": "https://api.github.com/users/just-boris/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/just-boris/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/just-boris/subscriptions",
        "organizations_url": "https://api.github.com/users/just-boris/orgs",
        "repos_url": "https://api.github.com/users/just-boris/repos",
        "events_url": "https://api.github.com/users/just-boris/events{/privacy}",
        "received_events_url": "https://api.github.com/users/just-boris/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2019-10-26T09:22:05Z",
      "updated_at": "2019-11-05T07:00:19Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "The new concurrent mode provides a new hook - [`useTransition`](https://reactjs.org/docs/concurrent-mode-reference.html#usetransition). However the name of it is confusing. The word “transition” in web development already refers to animations and css [transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) property. There also exist [useTransition hook](https://www.react-spring.io/docs/hooks/use-transition) provided by react-spring library. So people who will use both concurrent mode and react-spring in their projects will be confused by clashing names.\r\n\r\nDid you consider different names for concurrent transitions? For example, `useTransaction` is not present in the ecosystems and can be used to describe concurrent updates."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17187",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17187/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17187/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17187/events",
      "html_url": "https://github.com/facebook/react/issues/17187",
      "id": 512765354,
      "node_id": "MDU6SXNzdWU1MTI3NjUzNTQ=",
      "number": 17187,
      "title": "[eslint-plugin-react-hooks] useCallback does not add dependencies when callback is not function expression",
      "user": {
        "login": "jim-chou-shopify",
        "id": 39597748,
        "node_id": "MDQ6VXNlcjM5NTk3NzQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/39597748?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jim-chou-shopify",
        "html_url": "https://github.com/jim-chou-shopify",
        "followers_url": "https://api.github.com/users/jim-chou-shopify/followers",
        "following_url": "https://api.github.com/users/jim-chou-shopify/following{/other_user}",
        "gists_url": "https://api.github.com/users/jim-chou-shopify/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jim-chou-shopify/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jim-chou-shopify/subscriptions",
        "organizations_url": "https://api.github.com/users/jim-chou-shopify/orgs",
        "repos_url": "https://api.github.com/users/jim-chou-shopify/repos",
        "events_url": "https://api.github.com/users/jim-chou-shopify/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jim-chou-shopify/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1249821345,
          "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
          "name": "Component: ESLint Rules",
          "color": "f7afdb",
          "default": false,
          "description": ""
        },
        {
          "id": 1109410193,
          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
          "name": "Component: Hooks",
          "color": "c2f27b",
          "default": false,
          "description": ""
        },
        {
          "id": 40929153,
          "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
          "name": "Type: Enhancement",
          "color": "84b6eb",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-26T00:12:59Z",
      "updated_at": "2019-10-31T14:05:05Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the argument of `useCallback` is not a function expression eslint-plugin-react-hooks will not autofix  dependencies.\r\n\r\nExample:\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), []);\r\n```\r\n\r\nWorkaround:\r\n```js\r\nuseMemo(() => debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks@^1.6.0, react@16.9.0-alpha.0\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17185",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17185/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17185/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17185/events",
      "html_url": "https://github.com/facebook/react/issues/17185",
      "id": 512751716,
      "node_id": "MDU6SXNzdWU1MTI3NTE3MTY=",
      "number": 17185,
      "title": "useDeferredValue does not abort running reconcile work for stale value",
      "user": {
        "login": "Bnaya",
        "id": 1304862,
        "node_id": "MDQ6VXNlcjEzMDQ4NjI=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1304862?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bnaya",
        "html_url": "https://github.com/Bnaya",
        "followers_url": "https://api.github.com/users/Bnaya/followers",
        "following_url": "https://api.github.com/users/Bnaya/following{/other_user}",
        "gists_url": "https://api.github.com/users/Bnaya/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Bnaya/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Bnaya/subscriptions",
        "organizations_url": "https://api.github.com/users/Bnaya/orgs",
        "repos_url": "https://api.github.com/users/Bnaya/repos",
        "events_url": "https://api.github.com/users/Bnaya/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Bnaya/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1205087127,
          "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
          "name": "Component: Concurrent Mode",
          "color": "ffccd3",
          "default": false,
          "description": ""
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2019-10-25T22:59:18Z",
      "updated_at": "2020-01-14T17:56:56Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**bug**\r\n\r\n**What is the current behavior?**\r\nWhen useDeferredValue value is updated while the previous reconcile work is still running,\r\nThe previous reconcile work is not aborted, and the new work is queued after it.\r\n\r\n**repro:**\r\nBased on useDeferredValue example,\r\nhttps://codesandbox.io/s/infallible-dewdney-9fkv9\r\n\r\nFor better reproducibility i've made it to run longer using\r\n using `timeoutMs: 30000` + `while (performance.now() - now < 100) {` )\r\nand i've added an indicator value: `Time since last key stroke`\r\nhttps://codesandbox.io/s/intelligent-mestorf-u0p2b\r\n\r\n* Start timeline record\r\n* Type A B C with 1-3 sec interval between key strokes.\r\n* See timeline, there's work of 24 secs 8 + 8 + 8, for each key stroke \r\n* See the values of `Result #X` changes to the old stale value.\r\n\r\nThis is not optimal for 2 reasons:\r\n* We show stale data when we have something newer.\r\n* The cpu is locked processing the old value reconcile, and the new value needs to wait.\r\n\r\n**What is the expected behavior?**\r\nThe prev reconcile work should be cancelled/aborted,\r\nAnd the new value reconcile should start immediately \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact/react-dom `0.0.0-experimental-5faf377df`"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17183",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17183/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17183/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17183/events",
      "html_url": "https://github.com/facebook/react/pull/17183",
      "id": 512449969,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyNDU4MTQz",
      "number": 17183,
      "title": "fix: do not invoke function-like values in useDeferredValue",
      "user": {
        "login": "Jessidhia",
        "id": 73085,
        "node_id": "MDQ6VXNlcjczMDg1",
        "avatar_url": "https://avatars1.githubusercontent.com/u/73085?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jessidhia",
        "html_url": "https://github.com/Jessidhia",
        "followers_url": "https://api.github.com/users/Jessidhia/followers",
        "following_url": "https://api.github.com/users/Jessidhia/following{/other_user}",
        "gists_url": "https://api.github.com/users/Jessidhia/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Jessidhia/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Jessidhia/subscriptions",
        "organizations_url": "https://api.github.com/users/Jessidhia/orgs",
        "repos_url": "https://api.github.com/users/Jessidhia/repos",
        "events_url": "https://api.github.com/users/Jessidhia/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Jessidhia/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-25T10:59:18Z",
      "updated_at": "2019-10-30T23:08:45Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17183",
        "html_url": "https://github.com/facebook/react/pull/17183",
        "diff_url": "https://github.com/facebook/react/pull/17183.diff",
        "patch_url": "https://github.com/facebook/react/pull/17183.patch"
      },
      "body": "When reading the code I noticed that, because the `State` hook is used internally in the implementation, trying to hold a function or class value as a `DeferredValue` would cause it to be invoked as a lazy initializer, or updater function.\r\n\r\nThis fixes it by using a closure. I considered using a `typeof` check, but I'm not sure if adding the extra branches is useful. The branch could potentially avoid creating a closure on the common case, though. Not sure which is the best trade-off."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17180",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17180/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17180/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17180/events",
      "html_url": "https://github.com/facebook/react/issues/17180",
      "id": 512359091,
      "node_id": "MDU6SXNzdWU1MTIzNTkwOTE=",
      "number": 17180,
      "title": "Suggestion: Block unsafe javascript: URLs in Concurrent and Blocking Modes",
      "user": {
        "login": "radex",
        "id": 183747,
        "node_id": "MDQ6VXNlcjE4Mzc0Nw==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/183747?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/radex",
        "html_url": "https://github.com/radex",
        "followers_url": "https://api.github.com/users/radex/followers",
        "following_url": "https://api.github.com/users/radex/following{/other_user}",
        "gists_url": "https://api.github.com/users/radex/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/radex/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/radex/subscriptions",
        "organizations_url": "https://api.github.com/users/radex/orgs",
        "repos_url": "https://api.github.com/users/radex/repos",
        "events_url": "https://api.github.com/users/radex/events{/privacy}",
        "received_events_url": "https://api.github.com/users/radex/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-25T07:48:03Z",
      "updated_at": "2019-10-31T14:03:24Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "In 16.9.0, a warning was added about `javascript:` URLs. This check is very, very important, as it's incredibly easy to forget about just once place where potential user data is passed onto DOM way. And of course, allowing a javascript: URL to be injected into DOM is a very serious XSS issue.\r\n\r\nI griped before that this is too important to be just a warning, and suggested that a semver-compatible solution is to provide an exported function that allows a runtime opt-in to the new safe behavior. This suggestion was dismissed, since if I want this, I can just make my own build of react with the flag enabled. (Of course, almost no one will do this, because it's just too much of a pain to make your own dependency builds with every release)\r\n\r\nI'd like to make a similar suggestion again. Since Concurrent and Blocking modes are coming soon(ish), and make many breaking changes anyway, why not take this opportunity to also block unsafe javascript: URLs when the mode is enabled? I know that URLs have nothing to do with concurrent mode (unlike unsafe lifecycle methods, etc.), but since many people will want to jump onto this new feature anyway and are willing to deal with some migration required anyway, why not add this vital security precaution as well?\r\n\r\nWaiting until React 17 to protect… well, probably countless React apps that don't properly sanitize URLs, just doesn't seem reasonable, when the feature is already implemented, only disabled under a feature flag.\r\n\r\ncc @gaearon @sebmarkbage "
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17178",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17178/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17178/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17178/events",
      "html_url": "https://github.com/facebook/react/pull/17178",
      "id": 512175976,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyMjM3ODE0",
      "number": 17178,
      "title": "Add CSS shorthands for horizontal & vertical variants for padding and margin",
      "user": {
        "login": "zhirzh",
        "id": 8132723,
        "node_id": "MDQ6VXNlcjgxMzI3MjM=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/8132723?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zhirzh",
        "html_url": "https://github.com/zhirzh",
        "followers_url": "https://api.github.com/users/zhirzh/followers",
        "following_url": "https://api.github.com/users/zhirzh/following{/other_user}",
        "gists_url": "https://api.github.com/users/zhirzh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zhirzh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zhirzh/subscriptions",
        "organizations_url": "https://api.github.com/users/zhirzh/orgs",
        "repos_url": "https://api.github.com/users/zhirzh/repos",
        "events_url": "https://api.github.com/users/zhirzh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zhirzh/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-10-24T20:53:55Z",
      "updated_at": "2020-01-07T01:48:39Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17178",
        "html_url": "https://github.com/facebook/react/pull/17178",
        "diff_url": "https://github.com/facebook/react/pull/17178.diff",
        "patch_url": "https://github.com/facebook/react/pull/17178.patch"
      },
      "body": "Add CSS shorthands for padding and margin that are used in _react-native_:\r\n* `verticalMargin` and `horizontalMargin`\r\n* `verticalPadding` and `horizontalPadding`\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17170",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17170/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17170/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17170/events",
      "html_url": "https://github.com/facebook/react/issues/17170",
      "id": 511252283,
      "node_id": "MDU6SXNzdWU1MTEyNTIyODM=",
      "number": 17170,
      "title": "dangerouslySetInnerHTML, children, and a bogus hydration warning",
      "user": {
        "login": "jaydenseric",
        "id": 1754873,
        "node_id": "MDQ6VXNlcjE3NTQ4NzM=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1754873?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jaydenseric",
        "html_url": "https://github.com/jaydenseric",
        "followers_url": "https://api.github.com/users/jaydenseric/followers",
        "following_url": "https://api.github.com/users/jaydenseric/following{/other_user}",
        "gists_url": "https://api.github.com/users/jaydenseric/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jaydenseric/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jaydenseric/subscriptions",
        "organizations_url": "https://api.github.com/users/jaydenseric/orgs",
        "repos_url": "https://api.github.com/users/jaydenseric/repos",
        "events_url": "https://api.github.com/users/jaydenseric/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jaydenseric/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-23T11:13:04Z",
      "updated_at": "2019-10-23T20:43:51Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (initially reported at https://github.com/zeit/next.js/issues/9173).\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component has both `dangerouslySetInnerHTML` and `children` props, and the component is used with just the `children` prop, on page load the client logs a warning beginning with ``Warning: Prop `dangerouslySetInnerHTML` did not match.``.\r\n\r\nInterestingly:\r\n\r\n- If just `dangerouslySetInnerHTML` is used there is no warning.\r\n- Multiple instances with just a `children` prop results in only one warning, for the first occurance.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nDemo: https://codesandbox.io/s/react-hydration-warning-demo-3je59\r\n\r\nIn a Next.js project, create a page with the following content:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => (\r\n  <div dangerouslySetInnerHTML={dangerouslySetInnerHTML} children={children} />\r\n)\r\n\r\nexport default () => <TestComponent>a</TestComponent>\r\n```\r\n\r\nLoading the page in a browser will result in this warning logging to the console:\r\n\r\n```\r\nWarning: Prop `dangerouslySetInnerHTML` did not match. Server: \"a\" Client: \"\"\r\n```\r\n\r\nNote that the hydration warning is bogus; using view source and the inspector you can see the SSR and client rendered HTML is identical and correct.\r\n\r\nThis works just the same as before but without a hydration warning:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => {\r\n  const divProps = {}\r\n  if (dangerouslySetInnerHTML)\r\n    divProps.dangerouslySetInnerHTML = dangerouslySetInnerHTML\r\n  if (children) divProps.children = children\r\n\r\n  return <div {...divProps} />\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no hydration warning at first client render.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNot sure if the bug is present in old versions of React, but it can be seen with v16.11.0."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17168",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17168/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17168/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17168/events",
      "html_url": "https://github.com/facebook/react/issues/17168",
      "id": 511024159,
      "node_id": "MDU6SXNzdWU1MTEwMjQxNTk=",
      "number": 17168,
      "title": "Script tags are rendered inconsistently between client and server (html-encoded on server)",
      "user": {
        "login": "accidentaldeveloper",
        "id": 5819232,
        "node_id": "MDQ6VXNlcjU4MTkyMzI=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5819232?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/accidentaldeveloper",
        "html_url": "https://github.com/accidentaldeveloper",
        "followers_url": "https://api.github.com/users/accidentaldeveloper/followers",
        "following_url": "https://api.github.com/users/accidentaldeveloper/following{/other_user}",
        "gists_url": "https://api.github.com/users/accidentaldeveloper/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/accidentaldeveloper/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/accidentaldeveloper/subscriptions",
        "organizations_url": "https://api.github.com/users/accidentaldeveloper/orgs",
        "repos_url": "https://api.github.com/users/accidentaldeveloper/repos",
        "events_url": "https://api.github.com/users/accidentaldeveloper/events{/privacy}",
        "received_events_url": "https://api.github.com/users/accidentaldeveloper/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-10-23T01:58:52Z",
      "updated_at": "2019-11-16T05:10:49Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nServer-rendered script tags are html-encoded. Client-rendered script tags are not.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Render a script tag with quotes on the server.\r\n2. Render a script tag with quotes on the client.\r\n3. Compare the output. \r\n\r\nNote that the quotes are html-encoded to `&quot` when rendered on the server.\r\n\r\nThis CodeSandbox is a little rough but very simple: https://codesandbox.io/s/affectionate-star-xe8ym\r\n\r\n**What is the expected behavior?**\r\nThe script tag content is not html-encoded on either the server or the client.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\nI'm not sure when this was introduced."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17163",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17163/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17163/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17163/events",
      "html_url": "https://github.com/facebook/react/issues/17163",
      "id": 510317658,
      "node_id": "MDU6SXNzdWU1MTAzMTc2NTg=",
      "number": 17163,
      "title": "React re-executes render() right after an exception has been thrown in the same render() method",
      "user": {
        "login": "tonix-tuft",
        "id": 10134421,
        "node_id": "MDQ6VXNlcjEwMTM0NDIx",
        "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tonix-tuft",
        "html_url": "https://github.com/tonix-tuft",
        "followers_url": "https://api.github.com/users/tonix-tuft/followers",
        "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
        "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
        "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
        "repos_url": "https://api.github.com/users/tonix-tuft/repos",
        "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1775957182,
          "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
          "name": "Resolution: Stale",
          "color": "e6e6e6",
          "default": false,
          "description": "Automatically closed due to inactivity"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-21T22:00:35Z",
      "updated_at": "2020-01-24T15:01:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI would like to clarify a doubt regarding this behaviour (maybe a bug? I don't know).\r\n\r\n**What is the current behavior?**\r\nBy playing with the Error Boundaries demo:\r\n\r\nhttps://codepen.io/gaearon/pen/wqvxGa?editors=0010\r\n\r\nI discovered that when an exception is thrown in `render()`, React re-executes that same `render()` method before running the corresponding Error Boundary's code.\r\n\r\nCheck out the same code with a `console.log` line added both to `BuggyCounter.render()` and `componentDidCatch()`:\r\n\r\n```\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n  \r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    console.log('componentDidCatch') // <------------------- LOG\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    })\r\n    // You can also log error messages to an error reporting service here\r\n  }\r\n  \r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }  \r\n}\r\n\r\nclass BuggyCounter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { counter: 0 };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  \r\n  handleClick() {\r\n    this.setState(({counter}) => ({\r\n      counter: counter + 1\r\n    }));\r\n  }\r\n  \r\n  render() {\r\n    console.log('this.state.counter', this.state.counter) // <------------------- LOG\r\n    if (this.state.counter === 5) {\r\n      // Simulate a JS error\r\n      throw new Error('I crashed!');\r\n    }\r\n    return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        <b>\r\n          This is an example of error boundaries in React 16.\r\n          <br /><br />\r\n          Click on the numbers to increase the counters.\r\n          <br />\r\n          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\r\n        </b>\r\n      </p>\r\n      <hr />\r\n      <ErrorBoundary>\r\n        <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\r\n        <BuggyCounter />\r\n        <BuggyCounter />\r\n      </ErrorBoundary>\r\n      <hr />\r\n      <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\r\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\r\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n```\r\n\r\nAfter the first rendering I see (OK):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 31](https://user-images.githubusercontent.com/10134421/67245825-3633a180-f45d-11e9-964d-b59b80ec09ae.png)\r\n\r\nAfter clicking on the counter 4 times (OK):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 43](https://user-images.githubusercontent.com/10134421/67245865-51061600-f45d-11e9-9e27-f02fcdc31c73.png)\r\n\r\nThen, after clicking once more (Why does `render()` gets executed twice?):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 54](https://user-images.githubusercontent.com/10134421/67245916-7004a800-f45d-11e9-908f-ebd93dac4326.png)\r\n\r\nAfter that, `componentDidCatch()` is, as expected, executed only once.\r\n\r\n**What is the expected behavior?**\r\nCannot tell. This is not a problem in se because of the idempotent nature of `render()` (which has to be pure), but makes me think that this is an unneeded call because if an error has been thrown in `render()`, re-executing it right away would still lead to the same exception being thrown.\r\n\r\nOr, is there something I am missing? Maybe related to how React works internally and because of that it needs to recall `render()` as soon as that same `render()` has thrown...\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOS: OS X\r\nBrowser: Chrome 77\r\nUsing the same React 16 development version of the Pen:\r\n\r\n`https://unpkg.com/react@16/umd/react.development.js`\r\n`https://unpkg.com/react-dom@16/umd/react-dom.development.js`\r\n\r\nThank you for the attention.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17157",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17157/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17157/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17157/events",
      "html_url": "https://github.com/facebook/react/issues/17157",
      "id": 509919136,
      "node_id": "MDU6SXNzdWU1MDk5MTkxMzY=",
      "number": 17157,
      "title": "[DOM] Add support for the `inert` attribute",
      "user": {
        "login": "kripod",
        "id": 14854048,
        "node_id": "MDQ6VXNlcjE0ODU0MDQ4",
        "avatar_url": "https://avatars3.githubusercontent.com/u/14854048?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kripod",
        "html_url": "https://github.com/kripod",
        "followers_url": "https://api.github.com/users/kripod/followers",
        "following_url": "https://api.github.com/users/kripod/following{/other_user}",
        "gists_url": "https://api.github.com/users/kripod/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kripod/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kripod/subscriptions",
        "organizations_url": "https://api.github.com/users/kripod/orgs",
        "repos_url": "https://api.github.com/users/kripod/repos",
        "events_url": "https://api.github.com/users/kripod/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kripod/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1775957182,
          "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
          "name": "Resolution: Stale",
          "color": "e6e6e6",
          "default": false,
          "description": "Automatically closed due to inactivity"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-10-21T12:06:09Z",
      "updated_at": "2020-01-19T17:48:07Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen specifying `inert={false}` on an element, React throws the following message:\r\n\r\n```\r\nWarning: Received `false` for a non-boolean attribute `inert`.\r\n```\r\n\r\nHowever, `inert={undefined}` works fine as a replacement for `false`, while `inert=\"\"` (empty string) provides an escape hatch as a truthy value.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `inert` attribute should be accepted as a boolean DOM attribute, as [proposed](https://html.spec.whatwg.org/multipage/interaction.html#inert) by the HTML Standard.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17153",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17153/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17153/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17153/events",
      "html_url": "https://github.com/facebook/react/issues/17153",
      "id": 509657172,
      "node_id": "MDU6SXNzdWU1MDk2NTcxNzI=",
      "number": 17153,
      "title": "Infinite loop of errors when host config is missing `getRootHostContext`",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 739761016,
          "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
          "name": "Component: Reconciler",
          "color": "f9a798",
          "default": false,
          "description": null
        },
        {
          "id": 1776420141,
          "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
          "url": "https://api.github.com/repos/facebook/react/labels/Partner",
          "name": "Partner",
          "color": "e4bef7",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-20T21:43:45Z",
      "updated_at": "2020-01-08T23:42:29Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "body": "**Do you want to request a *feature* or report a *bug*?** bug\r\n\r\n**What is the current behavior?** If you start writing a shitty reconciler:\r\n\r\n```\r\nimport React from 'react';\r\nimport ReactReconciler from 'react-reconciler';\r\nlet reconciler = ReactReconciler({\r\n  /* empty host config */\r\n});\r\nlet container = reconciler.createContainer(null, false, false);\r\nreconciler.updateContainer(<div />, container, null, null);\r\n```\r\n\r\nthen you get this error in an infinite loop:\r\n\r\n```\r\nUncaught TypeError: getRootHostContext is not a function\r\n    at pushHostContainer (react-reconciler.development.js:5526)\r\n    at pushHostRootContext (react-reconciler.development.js:8152)\r\n    at beginWork$1 (react-reconciler.development.js:9599)\r\n    at HTMLUnknownElement.callCallback (react-reconciler.development.js:11399)\r\n    at Object.invokeGuardedCallbackDev (react-reconciler.development.js:11448)\r\n    at invokeGuardedCallback (react-reconciler.development.js:11499)\r\n    at beginWork$$1 (react-reconciler.development.js:15639)\r\n    at performUnitOfWork (react-reconciler.development.js:14544)\r\n    at workLoopSync (react-reconciler.development.js:14520)\r\n    at performSyncWorkOnRoot (react-reconciler.development.js:14072)\r\n    at react-reconciler.development.js:1966\r\n    at unstable_runWithPriority (scheduler.development.js:818)\r\n    at runWithPriority (react-reconciler.development.js:1912)\r\n    at flushSyncCallbackQueueImpl (react-reconciler.development.js:1961)\r\n    at flushSyncCallbackQueue (react-reconciler.development.js:1949)\r\n    at scheduleUpdateOnFiber (react-reconciler.development.js:13490)\r\n    at scheduleRootUpdate (react-reconciler.development.js:16860)\r\n    at updateContainerAtExpirationTime (react-reconciler.development.js:16886)\r\n    at Object.updateContainer (react-reconciler.development.js:16986)\r\n ```\r\n\r\nPresumably this also happens if getRootHostContext is buggy and itself throws.\r\n\r\n**What is the expected behavior?** I'd expect it to crash once or twice and then stop. (This seems specific to `getRootHostContext`; no other missing method had the same result.) My recollection is we do intend to catch errors in host configs; if I'm misremembering feel free to wontfix.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react-reconciler 0.22.2 (from the 16.10.2 release)\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17151",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17151/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17151/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17151/events",
      "html_url": "https://github.com/facebook/react/issues/17151",
      "id": 509614257,
      "node_id": "MDU6SXNzdWU1MDk2MTQyNTc=",
      "number": 17151,
      "title": "Bailing out doesn't work properly in lazy components with default props",
      "user": {
        "login": "jddxf",
        "id": 11155177,
        "node_id": "MDQ6VXNlcjExMTU1MTc3",
        "avatar_url": "https://avatars2.githubusercontent.com/u/11155177?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jddxf",
        "html_url": "https://github.com/jddxf",
        "followers_url": "https://api.github.com/users/jddxf/followers",
        "following_url": "https://api.github.com/users/jddxf/following{/other_user}",
        "gists_url": "https://api.github.com/users/jddxf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jddxf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jddxf/subscriptions",
        "organizations_url": "https://api.github.com/users/jddxf/orgs",
        "repos_url": "https://api.github.com/users/jddxf/repos",
        "events_url": "https://api.github.com/users/jddxf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jddxf/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1775957182,
          "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
          "name": "Resolution: Stale",
          "color": "e6e6e6",
          "default": false,
          "description": "Automatically closed due to inactivity"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-20T15:58:13Z",
      "updated_at": "2020-01-19T00:48:10Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nBailing out doesn't work properly in lazy components with default props. It seems we're incorrectly [comparing unresolved props (oldProps) with resolved props (newProps)](https://github.com/facebook/react/blob/62b04cfa753076d5ffb1d74b855f8f8db36f5186/packages/react-reconciler/src/ReactFiberClassComponent.js#L1100).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/stoic-curran-3otbb\r\n\r\n**What is the expected behavior?**\r\nIn the example above, `componentDidUpdate` shouldn't have been called when the button is clicked.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17148",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17148/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17148/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17148/events",
      "html_url": "https://github.com/facebook/react/issues/17148",
      "id": 509461874,
      "node_id": "MDU6SXNzdWU1MDk0NjE4NzQ=",
      "number": 17148,
      "title": "[RFC] React DevTools - configurable style prop for live editing",
      "user": {
        "login": "giuseppeg",
        "id": 711311,
        "node_id": "MDQ6VXNlcjcxMTMxMQ==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/711311?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/giuseppeg",
        "html_url": "https://github.com/giuseppeg",
        "followers_url": "https://api.github.com/users/giuseppeg/followers",
        "following_url": "https://api.github.com/users/giuseppeg/following{/other_user}",
        "gists_url": "https://api.github.com/users/giuseppeg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/giuseppeg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/giuseppeg/subscriptions",
        "organizations_url": "https://api.github.com/users/giuseppeg/orgs",
        "repos_url": "https://api.github.com/users/giuseppeg/repos",
        "events_url": "https://api.github.com/users/giuseppeg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/giuseppeg/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2019-10-19T14:38:33Z",
      "updated_at": "2019-12-11T17:47:33Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Right now the React DevTools expose an undocumented hook for React Native that allows to register a function that is used to enable styles editing in the dev tools:\r\n\r\n<img width=\"1066\" alt=\"Screen Shot 2019-10-19 at 4 30 16 PM\" src=\"https://user-images.githubusercontent.com/711311/67146710-fb2f4380-f28d-11e9-9ce4-c037acc708c3.png\">\r\n\r\nFor example React Native for Web uses it\r\n\r\nhttps://github.com/necolas/react-native-web/blob/36dacb2052efdab2a28655773dc76934157d9134/packages/react-native-web/src/exports/StyleSheet/index.js#L13-L16\r\n\r\nIt would be great if the prop name was configurable (right now it can only be `style`) so that other CSS in JS libraries could use this hook and if the editor would allow 1) arrays of style objects 2) nested objects for things like pseudo elements:\r\n\r\n```js\r\nstyle {\r\n  flex: 1;\r\n  '&:hover': {\r\n     color: 'red'\r\n  }\r\n}\r\n```\r\n\r\nI think that the above is already possible but it has to be provided as JSON. Couldn't it be `eval`d when JSON parse fails?\r\n\r\nWhen this hook is registered probably the dev tools should hide the same prop from the `props` pane."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17147",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17147/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17147/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17147/events",
      "html_url": "https://github.com/facebook/react/issues/17147",
      "id": 509439275,
      "node_id": "MDU6SXNzdWU1MDk0MzkyNzU=",
      "number": 17147,
      "title": "react-reconciler & portals: missing root instance",
      "user": {
        "login": "drcmda",
        "id": 2223602,
        "node_id": "MDQ6VXNlcjIyMjM2MDI=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2223602?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/drcmda",
        "html_url": "https://github.com/drcmda",
        "followers_url": "https://api.github.com/users/drcmda/followers",
        "following_url": "https://api.github.com/users/drcmda/following{/other_user}",
        "gists_url": "https://api.github.com/users/drcmda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/drcmda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/drcmda/subscriptions",
        "organizations_url": "https://api.github.com/users/drcmda/orgs",
        "repos_url": "https://api.github.com/users/drcmda/repos",
        "events_url": "https://api.github.com/users/drcmda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/drcmda/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1775957182,
          "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
          "name": "Resolution: Stale",
          "color": "e6e6e6",
          "default": false,
          "description": "Automatically closed due to inactivity"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-19T11:49:19Z",
      "updated_at": "2020-01-19T00:48:12Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "This is a problem i am facing with the [react-three-fiber](https://github.com/drcmda/react-three-fiber), a react renderer for threejs.  The following image is probably a good overview:\r\n\r\n![reconciler](https://user-images.githubusercontent.com/2223602/67144414-59502c80-f276-11e9-89d1-97496ee10b8c.jpg)\r\n\r\nBasically i have a reconciler, it has a root instance, a scene in my case into which everything's rendered. I keep special information in that scene, which i need when constructing new objects.\r\n\r\nNow, when i use createPortal, like so:\r\n\r\n```jsx\r\nfunction A() {\r\n  // Create virtual scene\r\n  const virtualScene = useMemo(() => new THREE.Scene(), [])\r\n\r\n  // Render elements into the virtual scene via createPortal\r\n  return createPortal(\r\n    <mesh onClick={() => console.log(\"clicked\")}>\r\n      <meshNormalMaterial attach=\"material\" />\r\n      <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\r\n    </mesh>\r\n    virtualScene,\r\n  )\r\n}\r\n```\r\n\r\nthen the createInstance inside the reconciler will receive the following:\r\n\r\n```jsx\r\ncreateInstance(\r\n  type = \"meshNormalMaterial\",\r\n  props = { attach: \"material\" },\r\n  container = virtualScene,\r\n  hostContext = {},\r\n  internalInstanceHandle = { ... }\r\n)\r\n```\r\n\r\nThe problem that i face is that i also need to know the root instance into which the portal is rendered, but there seem to be no obvious means to get it. Digging around i noticed that the  internalInstanceHandle fibernode contains it when i traverse it:\r\n\r\n```jsx\r\nconst fn = (node: Reconciler.Fiber): THREE.Object3D => {\r\n  if (!node.return) return node.stateNode.containerInfo\r\n  else return fn(node.return)\r\n}\r\nlet scene = fn(internalInstanceHandle) // ---> the root scene\r\n```\r\n\r\nBut that seems pretty sketchy. Is there any other way, or could it be exposed?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17140",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17140/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17140/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17140/events",
      "html_url": "https://github.com/facebook/react/issues/17140",
      "id": 509307804,
      "node_id": "MDU6SXNzdWU1MDkzMDc4MDQ=",
      "number": 17140,
      "title": "SuspenseList in DevTools could cycle through the Suspense states",
      "user": {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-18T20:59:21Z",
      "updated_at": "2020-01-08T19:08:53Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "We currently have a way to force a fallback on a Suspense boundary in DevTools.\r\n\r\nIt might be cool to have a \"play\" button or something on SuspenseList that cycles through the states.\r\n\r\nE.g. if it's \"together\" mode it shows all the fallbacks and then switches to showing all the content and then back again in a loop.\r\n\r\nIf it's \"forwards\" it shows all the fallbacks then one at a time and then back to all fallbacks. If it's tail \"hidden\" or \"collapsed\" it hides all the ones that are not yet inserted and then inserts one at a time.\r\n\r\nCould be a nice way to demo/test the loading sequence experience."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17114",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17114/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17114/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17114/events",
      "html_url": "https://github.com/facebook/react/issues/17114",
      "id": 507830238,
      "node_id": "MDU6SXNzdWU1MDc4MzAyMzg=",
      "number": 17114,
      "title": "dangerouslySetInnerHTML causes page to scroll to top",
      "user": {
        "login": "vnankov",
        "id": 12615872,
        "node_id": "MDQ6VXNlcjEyNjE1ODcy",
        "avatar_url": "https://avatars1.githubusercontent.com/u/12615872?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vnankov",
        "html_url": "https://github.com/vnankov",
        "followers_url": "https://api.github.com/users/vnankov/followers",
        "following_url": "https://api.github.com/users/vnankov/following{/other_user}",
        "gists_url": "https://api.github.com/users/vnankov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vnankov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vnankov/subscriptions",
        "organizations_url": "https://api.github.com/users/vnankov/orgs",
        "repos_url": "https://api.github.com/users/vnankov/repos",
        "events_url": "https://api.github.com/users/vnankov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vnankov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1775957182,
          "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
          "name": "Resolution: Stale",
          "color": "e6e6e6",
          "default": false,
          "description": "Automatically closed due to inactivity"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 13,
      "created_at": "2019-10-16T12:48:53Z",
      "updated_at": "2020-01-22T14:27:06Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* It's a bug\r\n* The problem is only when we get the content from the dangerouslySetInnerHTML property.\r\n\r\n**What is the current behavior?**\r\n\r\n* When you have anchor tags that should scroll down the page to the related id, instead of scroll down it scrolls up to (0,0) coordinates.\r\n* This is our site, take a look for yourself: https://www.emerchantpay.com/insights/online-payments-germany/\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n* It should behave as normal anchor tag and scroll to its relevant id.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n * It all works fine only for Google Chrome Browser Desktop version and Chrome for Androind. It won't work for Mozila, Safari, etc. for mobile and desktop. Also does not work for any browser on IOS."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17109",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17109/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17109/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17109/events",
      "html_url": "https://github.com/facebook/react/issues/17109",
      "id": 507682173,
      "node_id": "MDU6SXNzdWU1MDc2ODIxNzM=",
      "number": 17109,
      "title": "Question: How to rewrite setState(state, callback) with hooks",
      "user": {
        "login": "yoyo837",
        "id": 6134547,
        "node_id": "MDQ6VXNlcjYxMzQ1NDc=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/6134547?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yoyo837",
        "html_url": "https://github.com/yoyo837",
        "followers_url": "https://api.github.com/users/yoyo837/followers",
        "following_url": "https://api.github.com/users/yoyo837/following{/other_user}",
        "gists_url": "https://api.github.com/users/yoyo837/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/yoyo837/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yoyo837/subscriptions",
        "organizations_url": "https://api.github.com/users/yoyo837/orgs",
        "repos_url": "https://api.github.com/users/yoyo837/repos",
        "events_url": "https://api.github.com/users/yoyo837/events{/privacy}",
        "received_events_url": "https://api.github.com/users/yoyo837/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-16T07:59:49Z",
      "updated_at": "2019-10-29T05:54:52Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "First of all, I am sorry that my English is poor.\r\n\r\n#14493\r\n#15772 \r\n\r\nI found some similar issues, but I think the things I want to explain will be different. When my callback doesn't always do something periodically based on some conditions, it seems that useEffect doesn't quite meet the requirements.\r\n\r\nFor example, using setState data to modify the DOM, and in rare cases, other processing of the DOM will be required in the callback. But the prerequisites for doing these things can be complex and irregular, so useEffect seems to be difficult to do."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17104",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17104/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17104/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17104/events",
      "html_url": "https://github.com/facebook/react/pull/17104",
      "id": 507545358,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzI4NTE2ODY5",
      "number": 17104,
      "title": "Fixing grammatical errors in docs",
      "user": {
        "login": "jagannathBhat",
        "id": 29631578,
        "node_id": "MDQ6VXNlcjI5NjMxNTc4",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29631578?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jagannathBhat",
        "html_url": "https://github.com/jagannathBhat",
        "followers_url": "https://api.github.com/users/jagannathBhat/followers",
        "following_url": "https://api.github.com/users/jagannathBhat/following{/other_user}",
        "gists_url": "https://api.github.com/users/jagannathBhat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jagannathBhat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jagannathBhat/subscriptions",
        "organizations_url": "https://api.github.com/users/jagannathBhat/orgs",
        "repos_url": "https://api.github.com/users/jagannathBhat/repos",
        "events_url": "https://api.github.com/users/jagannathBhat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jagannathBhat/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-10-16T00:17:33Z",
      "updated_at": "2019-11-16T03:06:39Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17104",
        "html_url": "https://github.com/facebook/react/pull/17104",
        "diff_url": "https://github.com/facebook/react/pull/17104.diff",
        "patch_url": "https://github.com/facebook/react/pull/17104.patch"
      },
      "body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17099",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17099/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17099/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17099/events",
      "html_url": "https://github.com/facebook/react/pull/17099",
      "id": 507495058,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzI4NDc1NjE3",
      "number": 17099,
      "title": "Warn for update on different component in render",
      "user": {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-15T21:34:26Z",
      "updated_at": "2020-01-23T18:58:51Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17099",
        "html_url": "https://github.com/facebook/react/pull/17099",
        "diff_url": "https://github.com/facebook/react/pull/17099.diff",
        "patch_url": "https://github.com/facebook/react/pull/17099.patch"
      },
      "body": "This warning already exists for class components, but not for functions.\r\n\r\nIt does not apply to render phase updates to the same component, which have special semantics that we do support."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17084",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17084/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17084/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17084/events",
      "html_url": "https://github.com/facebook/react/issues/17084",
      "id": 506820262,
      "node_id": "MDU6SXNzdWU1MDY4MjAyNjI=",
      "number": 17084,
      "title": "Devtools scrollbars should be dark in dark mode",
      "user": {
        "login": "Daniel15",
        "id": 91933,
        "node_id": "MDQ6VXNlcjkxOTMz",
        "avatar_url": "https://avatars2.githubusercontent.com/u/91933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Daniel15",
        "html_url": "https://github.com/Daniel15",
        "followers_url": "https://api.github.com/users/Daniel15/followers",
        "following_url": "https://api.github.com/users/Daniel15/following{/other_user}",
        "gists_url": "https://api.github.com/users/Daniel15/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Daniel15/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Daniel15/subscriptions",
        "organizations_url": "https://api.github.com/users/Daniel15/orgs",
        "repos_url": "https://api.github.com/users/Daniel15/repos",
        "events_url": "https://api.github.com/users/Daniel15/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Daniel15/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 725156255,
          "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
          "name": "good first issue (taken)",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2019-10-14T18:56:24Z",
      "updated_at": "2019-11-27T09:10:55Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen Chrome Devtools are in \"dark mode\", all the standard panels have a dark scrollbar:\r\n![](https://d.sb/2019/10/chrome_14-11.53.42.png)\r\n\r\nHowever, the React Devtools still show a light scrollbar:\r\n![](https://d.sb/2019/10/chrome_14-11.55.16.png)\r\n\r\n**What is the expected behavior?**\r\nScrollbars should be styled similarly to the standard panels\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAny React version\r\nChrome 77.0\r\nWindows 10, version 1903.\r\n\r\nNote: How to enable dark mode:\r\n![](https://d.sb/2019/10/chrome_14-11.58.25.png)\r\n![](https://d.sb/2019/10/chrome_14-11.59.29.png)"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17080",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17080/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17080/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17080/events",
      "html_url": "https://github.com/facebook/react/issues/17080",
      "id": 506399052,
      "node_id": "MDU6SXNzdWU1MDYzOTkwNTI=",
      "number": 17080,
      "title": "Are useEffect clean-ups called in the wrong order ?",
      "user": {
        "login": "ostrebler",
        "id": 30187797,
        "node_id": "MDQ6VXNlcjMwMTg3Nzk3",
        "avatar_url": "https://avatars1.githubusercontent.com/u/30187797?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ostrebler",
        "html_url": "https://github.com/ostrebler",
        "followers_url": "https://api.github.com/users/ostrebler/followers",
        "following_url": "https://api.github.com/users/ostrebler/following{/other_user}",
        "gists_url": "https://api.github.com/users/ostrebler/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ostrebler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ostrebler/subscriptions",
        "organizations_url": "https://api.github.com/users/ostrebler/orgs",
        "repos_url": "https://api.github.com/users/ostrebler/repos",
        "events_url": "https://api.github.com/users/ostrebler/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ostrebler/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2019-10-13T23:48:58Z",
      "updated_at": "2019-11-10T13:48:26Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**What is the current behavior?**\r\n\r\nI'm trying to write a small `Title` component to render nested document titles. However the kinda unexpected order in which effect clean-up functions are called makes it impossible to do this : \r\n\r\n```javascript\r\nimport { Children, useEffect } from 'react'\r\n\r\nexport default ({ children }) => {\r\n  const subtitle = Children.toArray(children).join('')\r\n  useEffect(() => {\r\n    const root = document.title\r\n    document.title = `${subtitle} - ${root}`\r\n    console.log('Wrote', document.title)\r\n    return () => {\r\n      document.title = root\r\n      console.log('Restored', document.title)\r\n    }\r\n  }, [subtitle])\r\n  return null\r\n}\r\n```\r\n\r\nHere is a loosy sketch of my component structure (handled with `@reach/router`) : \r\n\r\n```\r\nApp                     // contains <Title>App</Title>\r\n> Dashboard             // contains <Title>Dashboard</Title>\r\n> Profile               // contains <Title>Profile</Title>\r\n> Project               // contains <Title>Project</Title>\r\n  > Calendar            // contains <Title>Calendar</Title>\r\n```\r\n\r\nEach one of these components calls my `Title` component. Everything works fine when going from profile to dashboard or from dashboard to project. But when I jump from calendar to dashboard, the document title gets messed up because the clean-up in Project is called **before** the clean-up in Calendar even though Calendar is a child of Project, which is kinda unexpected and makes tree side-effect logic using (just) `useEffect` simply impossible.\r\n\r\nThe order in which the effect functions are called is a direct reflection of the order in which the components are nested. Shouldn't the clean-up functions be called following the exact reverse order ? Isn't that one of the goals of a clean-up ?\r\n\r\nWhen I navigate to the calendar and then back to the dashboard, I get the following logs : \r\n\r\n```\r\nWrote App\r\nWrote Project - App\r\nWrote Calendar - Project - App\r\nRestored App                          // This should happen after...\r\nRestored Project - App                // ...this.\r\nWrote Dashboard - Project - App       // This is messed up.\r\n```\r\n\r\n[codesandbox here](https://codesandbox.io/s/vigilant-feynman-0jxwb?fontsize=14)\r\n\r\n**What is the expected behavior?**\r\n\r\nHere is what I expected and what I would get if clean-ups in children were to be called before clean-ups in parents : \r\n\r\n```\r\nWrote App\r\nWrote Project - App\r\nWrote Calendar - Project - App\r\nRestored Project - App\r\nRestored App\r\nWrote Dashboard - App\r\n```\r\n\r\nI'm using React 16.10.2.\r\n\r\nThis ugly workaround works by \"forcing\" the order of what the clean-ups do (by keeping manually track of the effect functions' order and then just going the other way) : \r\n\r\n```javascript\r\nconst stack = []\r\n\r\nexport default ({ children }) => {\r\n  const subtitle = Children.toArray(children).join('')\r\n  useEffect(() => {\r\n    stack.push(document.title)\r\n    document.title = `${subtitle} - ${last(stack)}`\r\n    return () => {\r\n      document.title = stack.pop()\r\n    }\r\n  }, [subtitle])\r\n  return null\r\n}\r\n```"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17070",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17070/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17070/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17070/events",
      "html_url": "https://github.com/facebook/react/pull/17070",
      "id": 506037898,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzI3MzUxMDc0",
      "number": 17070,
      "title": "Make uncontrolled -> controlled warning clearer",
      "user": {
        "login": "vcarl",
        "id": 1551487,
        "node_id": "MDQ6VXNlcjE1NTE0ODc=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1551487?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vcarl",
        "html_url": "https://github.com/vcarl",
        "followers_url": "https://api.github.com/users/vcarl/followers",
        "following_url": "https://api.github.com/users/vcarl/following{/other_user}",
        "gists_url": "https://api.github.com/users/vcarl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vcarl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/vcarl/orgs",
        "repos_url": "https://api.github.com/users/vcarl/repos",
        "events_url": "https://api.github.com/users/vcarl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2019-10-11T20:12:27Z",
      "updated_at": "2020-01-07T19:00:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17070",
        "html_url": "https://github.com/facebook/react/pull/17070",
        "diff_url": "https://github.com/facebook/react/pull/17070.diff",
        "patch_url": "https://github.com/facebook/react/pull/17070.patch"
      },
      "body": "Fixes #17069. Glad to iterate further on the specific language, but I've found that explaining in this way usually clears it up for people."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17069",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17069/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17069/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17069/events",
      "html_url": "https://github.com/facebook/react/issues/17069",
      "id": 506037125,
      "node_id": "MDU6SXNzdWU1MDYwMzcxMjU=",
      "number": 17069,
      "title": "The warning for uncontrolled -> controlled inputs is confusing",
      "user": {
        "login": "vcarl",
        "id": 1551487,
        "node_id": "MDQ6VXNlcjE1NTE0ODc=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1551487?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vcarl",
        "html_url": "https://github.com/vcarl",
        "followers_url": "https://api.github.com/users/vcarl/followers",
        "following_url": "https://api.github.com/users/vcarl/following{/other_user}",
        "gists_url": "https://api.github.com/users/vcarl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vcarl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/vcarl/orgs",
        "repos_url": "https://api.github.com/users/vcarl/repos",
        "events_url": "https://api.github.com/users/vcarl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2019-10-11T20:10:26Z",
      "updated_at": "2020-01-14T16:40:38Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug? Mild DX improvement.\r\n\r\n**What is the current behavior?**\r\n\r\nCreating an input with an undefined or null value, then later passing a string value, triggers a warning about controlled inputs.\r\n\r\n> A component is changing an uncontrolled input of type undefined to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa)\r\n\r\nIt's my experience in Reactiflux that this warning is unclear to developers with less familiarity with React, or at least with the \"controlled\" and \"uncontrolled\" terms.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17062",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17062/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17062/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17062/events",
      "html_url": "https://github.com/facebook/react/pull/17062",
      "id": 505323634,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzI2Nzc4NzQ5",
      "number": 17062,
      "title": "apply changes on editablevalue on blur feature implemented",
      "user": {
        "login": "muratcatal",
        "id": 5106209,
        "node_id": "MDQ6VXNlcjUxMDYyMDk=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/5106209?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muratcatal",
        "html_url": "https://github.com/muratcatal",
        "followers_url": "https://api.github.com/users/muratcatal/followers",
        "following_url": "https://api.github.com/users/muratcatal/following{/other_user}",
        "gists_url": "https://api.github.com/users/muratcatal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/muratcatal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/muratcatal/subscriptions",
        "organizations_url": "https://api.github.com/users/muratcatal/orgs",
        "repos_url": "https://api.github.com/users/muratcatal/repos",
        "events_url": "https://api.github.com/users/muratcatal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/muratcatal/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775955521,
          "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
          "name": "Resolution: Backlog",
          "color": "9dd1e8",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-10T14:50:07Z",
      "updated_at": "2020-01-09T22:10:13Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17062",
        "html_url": "https://github.com/facebook/react/pull/17062",
        "diff_url": "https://github.com/facebook/react/pull/17062.diff",
        "patch_url": "https://github.com/facebook/react/pull/17062.patch"
      },
      "body": "Added applying changes on EditableValue component on blur event."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17060",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17060/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17060/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17060/events",
      "html_url": "https://github.com/facebook/react/issues/17060",
      "id": 505038084,
      "node_id": "MDU6SXNzdWU1MDUwMzgwODQ=",
      "number": 17060,
      "title": "'exhaustive-deps' lint rule warns that \"Outer scope values\" aren't valid when a hook is inside a function",
      "user": {
        "login": "gerrod",
        "id": 865932,
        "node_id": "MDQ6VXNlcjg2NTkzMg==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/865932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gerrod",
        "html_url": "https://github.com/gerrod",
        "followers_url": "https://api.github.com/users/gerrod/followers",
        "following_url": "https://api.github.com/users/gerrod/following{/other_user}",
        "gists_url": "https://api.github.com/users/gerrod/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gerrod/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gerrod/subscriptions",
        "organizations_url": "https://api.github.com/users/gerrod/orgs",
        "repos_url": "https://api.github.com/users/gerrod/repos",
        "events_url": "https://api.github.com/users/gerrod/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gerrod/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2019-10-10T05:09:49Z",
      "updated_at": "2019-12-17T23:13:59Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nInside a functional component, an inner function with a dependency on value from an outer function triggers the warning, \"Outer scope values like '....' aren't valid dependencies because mutating them doesn't re-render the component.\"\r\n\r\nSee: https://codesandbox.io/s/custom-hook-repro-3wfly\r\n\r\nHere's the crux of the problem\r\n\r\n```tsx\r\nconst List = (props: IListProps) => {\r\n  const { items } = props;\r\n\r\n  // Using the useMemo hook here doesn't complain, e.g. -\r\n  // const names = useMemo(() => items.map(item => item.name), [items]);\r\n\r\n  // Using the useMemo hook inside a function complains\r\n  const names = useItemNames();\r\n\r\n  return (\r\n    <>\r\n      <h2>There are {items.length} items in the list</h2>\r\n      <section>\r\n        {names.map(name => (\r\n          <div>{name}</div>\r\n        ))}\r\n      </section>\r\n    </>\r\n  );\r\n\r\n  ////////////////////\r\n\r\n  function useItemNames() {\r\n    // es-lint warns here: Outer scope values like 'items' aren't valid dependencies \r\n    // because mutating them doesn't re-render the component\r\n    return useMemo(() => items.map(item => item.name), [items]);\r\n  }\r\n};\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe eslint rule shouldn't be triggered.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n* React v16.10.2\r\n* So far as I can tell, this hasn't worked previously."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17056",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17056/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17056/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17056/events",
      "html_url": "https://github.com/facebook/react/pull/17056",
      "id": 504890358,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzI2NDQ0Njc1",
      "number": 17056,
      "title": "fix typos",
      "user": {
        "login": "lupuselit",
        "id": 24904209,
        "node_id": "MDQ6VXNlcjI0OTA0MjA5",
        "avatar_url": "https://avatars1.githubusercontent.com/u/24904209?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lupuselit",
        "html_url": "https://github.com/lupuselit",
        "followers_url": "https://api.github.com/users/lupuselit/followers",
        "following_url": "https://api.github.com/users/lupuselit/following{/other_user}",
        "gists_url": "https://api.github.com/users/lupuselit/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lupuselit/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lupuselit/subscriptions",
        "organizations_url": "https://api.github.com/users/lupuselit/orgs",
        "repos_url": "https://api.github.com/users/lupuselit/repos",
        "events_url": "https://api.github.com/users/lupuselit/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lupuselit/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2019-10-09T20:56:06Z",
      "updated_at": "2019-11-07T16:59:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17056",
        "html_url": "https://github.com/facebook/react/pull/17056",
        "diff_url": "https://github.com/facebook/react/pull/17056.diff",
        "patch_url": "https://github.com/facebook/react/pull/17056.patch"
      },
      "body": "small typos fixed"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17048",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17048/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17048/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17048/events",
      "html_url": "https://github.com/facebook/react/issues/17048",
      "id": 504441649,
      "node_id": "MDU6SXNzdWU1MDQ0NDE2NDk=",
      "number": 17048,
      "title": "Bailouts for state updates behavior inconsistently for hooks",
      "user": {
        "login": "zxh19890103",
        "id": 11514991,
        "node_id": "MDQ6VXNlcjExNTE0OTkx",
        "avatar_url": "https://avatars1.githubusercontent.com/u/11514991?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zxh19890103",
        "html_url": "https://github.com/zxh19890103",
        "followers_url": "https://api.github.com/users/zxh19890103/followers",
        "following_url": "https://api.github.com/users/zxh19890103/following{/other_user}",
        "gists_url": "https://api.github.com/users/zxh19890103/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zxh19890103/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zxh19890103/subscriptions",
        "organizations_url": "https://api.github.com/users/zxh19890103/orgs",
        "repos_url": "https://api.github.com/users/zxh19890103/repos",
        "events_url": "https://api.github.com/users/zxh19890103/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zxh19890103/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2019-10-09T06:23:28Z",
      "updated_at": "2019-11-15T21:04:25Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "This is a bug I think.\r\n\r\nAs the title says, React didn't help me to merge the update requests.\r\n\r\n```js\r\nconst Player = ({ }) => {\r\n  const [name, setName] = useState('John Higgins',)\r\n  const [age, setAge] = useState(47)\r\n  const nextPlayer = () => {\r\n    setName('Mark Selby')\r\n    setAge(34)\r\n  }\r\n  console.log('render.')\r\n  return <p>\r\n    This player's name is {name}, {age} years.\r\n    <button type=\"button\" onClick={nextPlayer}>next</button>\r\n  </p>\r\n}\r\n```\r\n\r\nAfter the button clicked, it outputs:\r\n\r\n```shell\r\n>> render.\r\n>> render.\r\n```\r\n\r\nBut in fact, I got three.\r\n\r\n```shell\r\n>> render.\r\n>> render.\r\n>> render.\r\n```\r\n\r\nIt doesn't always be.\r\n\r\n\r\n## The actual code\r\n\r\n```ts\r\nconst List = ({}) => {\r\n\tconst [items, setItems] = useState<ListItem[]>([])\r\n\tconst [tick, setTick] = useState(0)\r\n\tconst [page, setPage] = useState(1)\r\n        \r\n        // # effect 001\r\n\tuseEffect(() => {\r\n           const refresh = tick > 1\r\n           load({ refresh, page })\r\n             .then(d => {\r\n                if (refresh) setItems(d) // replace\r\n                else setItems([...items, ...d]) // append\r\n             })\r\n        }, [tick, page])\r\n\r\n        // # effect 002\r\n        useEffect(() => {\r\n            testingScrollToBottom(() => {\r\n               setTick(0) // makes effect 001 applied.\r\n               setPage(page + 1) // makes effect 001 applied again.\r\n            })\r\n            return () => {\r\n                stopTestingScrollToBottom()\r\n            }\r\n        }, [page])\r\n        \r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setTick(tick + 1)\r\n                        setPage(1)\r\n                    }}>\r\n                    Refresh\r\n                </button>\r\n                { items.map(item => <Item item={item}/>) }\r\n            </div>\r\n        )\r\n}\r\n```\r\n\r\nFunction `testingScrollToBottom` is where the things happened. \r\n\r\nHere is what I did to avoid that:\r\n\r\n![image](https://user-images.githubusercontent.com/11514991/66693450-7a93a480-ecdb-11e9-80e4-4ee6caf931e8.png)\r\n\r\nBy the way, `testingScrollToBottom` uses `setTimeout`."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17033",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17033/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17033/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17033/events",
      "html_url": "https://github.com/facebook/react/issues/17033",
      "id": 503529466,
      "node_id": "MDU6SXNzdWU1MDM1Mjk0NjY=",
      "number": 17033,
      "title": "Annoying popup from chrome devtools wrongly telling me I'm using an old version of React",
      "user": {
        "login": "LukenAgile42",
        "id": 49654474,
        "node_id": "MDQ6VXNlcjQ5NjU0NDc0",
        "avatar_url": "https://avatars3.githubusercontent.com/u/49654474?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LukenAgile42",
        "html_url": "https://github.com/LukenAgile42",
        "followers_url": "https://api.github.com/users/LukenAgile42/followers",
        "following_url": "https://api.github.com/users/LukenAgile42/following{/other_user}",
        "gists_url": "https://api.github.com/users/LukenAgile42/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/LukenAgile42/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LukenAgile42/subscriptions",
        "organizations_url": "https://api.github.com/users/LukenAgile42/orgs",
        "repos_url": "https://api.github.com/users/LukenAgile42/repos",
        "events_url": "https://api.github.com/users/LukenAgile42/events{/privacy}",
        "received_events_url": "https://api.github.com/users/LukenAgile42/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 620368407,
          "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
          "name": "Resolution: Needs More Information",
          "color": "fffde7",
          "default": false,
          "description": null
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2019-10-07T15:32:38Z",
      "updated_at": "2019-11-14T11:21:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I am given a rather annoying popup message\r\n\r\n```\r\nUnsupported React version detected\r\nThis version of React DevTools supports React DOM v15+ and React Native v61+.\r\n\r\nIn order to use DevTools with an older version of React, you'll need to install an older version of the extension.\r\n```\r\n\r\nevery single time I want to use devtools.\r\n\r\nThis is NOT correct. I am using React 16.8 with a standard create-react-app build."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17028",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17028/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17028/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17028/events",
      "html_url": "https://github.com/facebook/react/issues/17028",
      "id": 503306794,
      "node_id": "MDU6SXNzdWU1MDMzMDY3OTQ=",
      "number": 17028,
      "title": "[Concurrent mode] Scheduled updates are lost when parent state update happens",
      "user": {
        "login": "albertogasparin",
        "id": 84136,
        "node_id": "MDQ6VXNlcjg0MTM2",
        "avatar_url": "https://avatars2.githubusercontent.com/u/84136?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/albertogasparin",
        "html_url": "https://github.com/albertogasparin",
        "followers_url": "https://api.github.com/users/albertogasparin/followers",
        "following_url": "https://api.github.com/users/albertogasparin/following{/other_user}",
        "gists_url": "https://api.github.com/users/albertogasparin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/albertogasparin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/albertogasparin/subscriptions",
        "organizations_url": "https://api.github.com/users/albertogasparin/orgs",
        "repos_url": "https://api.github.com/users/albertogasparin/repos",
        "events_url": "https://api.github.com/users/albertogasparin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/albertogasparin/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-07T08:35:21Z",
      "updated_at": "2020-01-11T11:53:00Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n\r\n**What is the current behavior?**\r\nWhen in concurrent mode (render with `unstable_createRoot`), triggering a state change via an event (eg click) on the parent makes React loose the scheduled updates in the children. See:\r\n\r\nhttps://codesandbox.io/s/react-concurrent-state-bug-sp6zq\r\n\r\nNot an expert on concurrent mode here, was just playing around with it. Noticed that when some interactions happen the work (probably moved to the other tree) gets lost if the parent re-renders. You can see by clicking anywhere in the sandbox page vs clicking on the button that changes some local state. But that is just my educated guess on what might be happening.\r\n\r\n**What is the expected behavior?**\r\n\r\nState updates that are scheduled in children components should happen and the DOM value should reflect the state.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: 16.10.2\r\nreact-dom: 16.10.2"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17022",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17022/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17022/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17022/events",
      "html_url": "https://github.com/facebook/react/issues/17022",
      "id": 502938535,
      "node_id": "MDU6SXNzdWU1MDI5Mzg1MzU=",
      "number": 17022,
      "title": "Firefox: Autocomplete/Autofill not working",
      "user": {
        "login": "Hadsch",
        "id": 6314282,
        "node_id": "MDQ6VXNlcjYzMTQyODI=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6314282?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Hadsch",
        "html_url": "https://github.com/Hadsch",
        "followers_url": "https://api.github.com/users/Hadsch/followers",
        "following_url": "https://api.github.com/users/Hadsch/following{/other_user}",
        "gists_url": "https://api.github.com/users/Hadsch/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Hadsch/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Hadsch/subscriptions",
        "organizations_url": "https://api.github.com/users/Hadsch/orgs",
        "repos_url": "https://api.github.com/users/Hadsch/repos",
        "events_url": "https://api.github.com/users/Hadsch/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Hadsch/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1775957182,
          "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
          "name": "Resolution: Stale",
          "color": "e6e6e6",
          "default": false,
          "description": "Automatically closed due to inactivity"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2019-10-05T09:13:12Z",
      "updated_at": "2020-01-19T00:48:11Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nFirefox doesn’t show any autofill suggestions on an input  field with type \"text\" as soon as you connect the state with the  attribute \"value\"\r\n\r\n**Reproduce**\r\nhttps://codesandbox.io/embed/material-demo-y5mlt \r\n\r\n* Open the provided sandbox example\r\n* Write test in both input fields\r\n* Press button\r\n* Write t in both text fields\r\n\r\n_Important:_ This works corretly in Chrome but not in Firefox!\r\n\r\n**What is the expected behavior?**\r\nAutofill suggestions should be visible in Firefox too!\r\n\r\nAutofill is working (FF + Chrome) if value is handled by the browser\r\n\r\n      <input\r\n            id=\"component-simple1\"\r\n            autoComplete=\"on\"\r\n            onChange={handleChange}\r\n          />\r\n\r\nAutofill is NOT working (FF) if value is handled by React(!)\r\n\r\n        <input\r\n            id=\"component-simple1\"\r\n            autoComplete=\"on\"\r\n            onChange={handleChange}\r\n            value={name}\r\n          />\r\n\r\n**Some pictues which show the wrong behavior**\r\nIt is working as long as React does not handle the value with the state of the component (upper input field):\r\n![step01](https://user-images.githubusercontent.com/6314282/66252840-9d184180-e760-11e9-9801-46724c049d74.png)\r\n\r\nThe input field where React handles the value (`value={name}`) doesn't show autofill suggestions\r\n![step02](https://user-images.githubusercontent.com/6314282/66252884-f7b19d80-e760-11e9-969d-413c1aba6948.png)\r\n\r\n\r\n**Version**\r\n\r\nTech | Version\r\n-- | --\r\nReact | latest (see Sandbox)\r\nBrowser | Firefox 68.0.1(latest)\r\nOS | tested on Windows\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17016",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17016/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17016/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17016/events",
      "html_url": "https://github.com/facebook/react/issues/17016",
      "id": 502557538,
      "node_id": "MDU6SXNzdWU1MDI1NTc1Mzg=",
      "number": 17016,
      "title": "synchronous setState makes manage-management w/ hooks very hard",
      "user": {
        "login": "drcmda",
        "id": 2223602,
        "node_id": "MDQ6VXNlcjIyMjM2MDI=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2223602?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/drcmda",
        "html_url": "https://github.com/drcmda",
        "followers_url": "https://api.github.com/users/drcmda/followers",
        "following_url": "https://api.github.com/users/drcmda/following{/other_user}",
        "gists_url": "https://api.github.com/users/drcmda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/drcmda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/drcmda/subscriptions",
        "organizations_url": "https://api.github.com/users/drcmda/orgs",
        "repos_url": "https://api.github.com/users/drcmda/repos",
        "events_url": "https://api.github.com/users/drcmda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/drcmda/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-04T10:27:54Z",
      "updated_at": "2019-12-11T03:53:47Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "It's about the dreaded \"zombie-child\" problem, which is a known problem, but i would still like to open this issue in order to track it. It currently throws a major wrench into our projects at work (which all use mixed reconcilers).\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI consider it a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nThe long explanation is here: https://kaihao.dev/posts/Stale-props-and-zombie-children-in-Redux\r\n\r\nIn short, when any dispatch, for instance via useState/useReducer.set(...), can cause an _immediate_ render pass, it allows leaf-components to render before their parents. Components that shouldn't even be rendering, because their parents would exclude them, now do render and access data which doesn't exist in the state model any longer. Rendering isn't deterministic and hierarchical any longer.\r\n\r\nDan Abramov acknowledges this behaviour here: https://twitter.com/dan_abramov/status/959507572951797761\r\n\r\nThe current solution that Sebastian Markbåge suggested is to wrap dispatches into batchedUpdates.\r\n\r\nBut that doesn't work in mixed-mode React, where multiple reconcilers are active. So the same component will work in one reconciler, but crash in another, unless the dispatch is wrapped into each batchedUpdates from each reconciler - which puts the burden onto the consumer of the component and makes the component platform dependent.\r\n\r\nThis problem affects all flex based state managers. Redux for instance. Some fail outright, some do implement batchedUpdates (like Redux), but they will all fail in mixed-mode.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://github.com/react-spring/zustand/issues/64\r\n\r\n**What is the expected behavior?**\r\n\r\nAs Dan Abramov himself said on Twitter, any dispatch should be async. But this was in feb 2018. Is there any news regarding this behaviour?\r\n\r\nThe churn outlined in the kaihao.dev article above, just to get simple state management, is almost overwhelming. Its conclusion is \"Our hands are tied, there's no solution yet to be known.\" I know this probably isn't a pressing issue, but i hope it can be prioritized."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17012",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17012/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17012/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17012/events",
      "html_url": "https://github.com/facebook/react/pull/17012",
      "id": 502482877,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzI0NTU0NTQ2",
      "number": 17012,
      "title": "chore: upgrade jsdom",
      "user": {
        "login": "SimenB",
        "id": 1404810,
        "node_id": "MDQ6VXNlcjE0MDQ4MTA=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1404810?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SimenB",
        "html_url": "https://github.com/SimenB",
        "followers_url": "https://api.github.com/users/SimenB/followers",
        "following_url": "https://api.github.com/users/SimenB/following{/other_user}",
        "gists_url": "https://api.github.com/users/SimenB/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/SimenB/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SimenB/subscriptions",
        "organizations_url": "https://api.github.com/users/SimenB/orgs",
        "repos_url": "https://api.github.com/users/SimenB/repos",
        "events_url": "https://api.github.com/users/SimenB/events{/privacy}",
        "received_events_url": "https://api.github.com/users/SimenB/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2019-10-04T07:44:24Z",
      "updated_at": "2020-01-23T14:02:38Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/17012",
        "html_url": "https://github.com/facebook/react/pull/17012",
        "diff_url": "https://github.com/facebook/react/pull/17012.diff",
        "patch_url": "https://github.com/facebook/react/pull/17012.patch"
      },
      "body": "Following up on #15778, this is needed before being able to upgrade to Jest 25, which will have some significant performance improvements. Some tests for `style` properties are failing though, and I have no idea if it's due to jsdom or the tests themselves. I have some hope you'll know what's up yourselves 🤞  \r\n\r\nI tried upgrading to the Jest 25 alpha btw, and it fails in the same way, so if it's an issue with jsdom itself, it has not been fixed for jsdom@15 and it'd be great to report it to them.\r\n\r\n/cc @threepointone "
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17008",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17008/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17008/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17008/events",
      "html_url": "https://github.com/facebook/react/issues/17008",
      "id": 502310985,
      "node_id": "MDU6SXNzdWU1MDIzMTA5ODU=",
      "number": 17008,
      "title": "[eslint-plugin-react-hooks] Using typeof adds variable to list of necessary dependencies",
      "user": {
        "login": "wbobeirne",
        "id": 649992,
        "node_id": "MDQ6VXNlcjY0OTk5Mg==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/649992?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wbobeirne",
        "html_url": "https://github.com/wbobeirne",
        "followers_url": "https://api.github.com/users/wbobeirne/followers",
        "following_url": "https://api.github.com/users/wbobeirne/following{/other_user}",
        "gists_url": "https://api.github.com/users/wbobeirne/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wbobeirne/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wbobeirne/subscriptions",
        "organizations_url": "https://api.github.com/users/wbobeirne/orgs",
        "repos_url": "https://api.github.com/users/wbobeirne/repos",
        "events_url": "https://api.github.com/users/wbobeirne/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wbobeirne/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-03T21:35:29Z",
      "updated_at": "2019-12-18T16:11:46Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIf you use Typescript's `typeof` keyword inside of a hook that `exhaustive-deps` watches for, it'll add the variable you `typeof`'d to the list of expected dependencies. However, there's no runtime effect to typeof, it's just for typing. Here's a test case where it'll warn you:\r\n\r\n```ts\r\nconst [state, setState] = useState(true);\r\n\r\nconst callback = useCallback((newState: typeof state) => {\r\n  setState(newState);\r\n}, []);\r\n```\r\n\r\nresults in\r\n\r\n> React Hook useCallback has a missing dependency: 'state'. Either include it or remove the dependency array.\r\n\r\n**What is the expected behavior?**\r\n\r\n`state` should not be an expected dependency\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`eslint-plugin-react-hooks@1.7.0`"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17003",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17003/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17003/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17003/events",
      "html_url": "https://github.com/facebook/react/issues/17003",
      "id": 502167180,
      "node_id": "MDU6SXNzdWU1MDIxNjcxODA=",
      "number": 17003,
      "title": "DevTools not properly shutting down between reloads in some cases",
      "user": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-03T16:24:08Z",
      "updated_at": "2020-01-08T19:09:21Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Noticed this while testing the recently added \"highlight updates\" feature. It seems like relying on the content script's \"disconnect\" to shutdown things is too late, and we seem to be leaving at least an `Agent` (possibly more) connected.\r\n\r\nI think we may want to add some cleanup code to our initialization path (of the backend) to handle the case where a previous backend instance didn't get to finish shutting down."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16993",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16993/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16993/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16993/events",
      "html_url": "https://github.com/facebook/react/issues/16993",
      "id": 501749413,
      "node_id": "MDU6SXNzdWU1MDE3NDk0MTM=",
      "number": 16993,
      "title": "Add DevTools visualization for SSR hydration",
      "user": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        },
        {
          "login": "sebmarkbage",
          "id": 63648,
          "node_id": "MDQ6VXNlcjYzNjQ4",
          "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sebmarkbage",
          "html_url": "https://github.com/sebmarkbage",
          "followers_url": "https://api.github.com/users/sebmarkbage/followers",
          "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
          "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
          "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
          "repos_url": "https://api.github.com/users/sebmarkbage/repos",
          "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-02T22:01:29Z",
      "updated_at": "2020-01-08T19:09:21Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This feature relates to several new React APIs: concurrent mode, suspense, and server rendering / hydration\r\n\r\n# Background info\r\nWhen hydrating server-rendered content, React starts working on the outermost Suspense boundary and works its way in. During hydration, the server rendered HTML isn't interactive. React records events to replay them once content becomes interactive- (but that doesn't actually happen until React finishes work on the nearest boundary and commits it). React may also reprioritize the order in which boundaries are processed (so that boundaries with pending events get processed sooner).\r\n\r\nThis general process can be hard to reason about and debug, because much of it is not observable visually (beyond some interactions potentially feeling more laggy than expected).\r\n\r\nDevTools already provides some visual overlays (e.g. which elements were rendered by the currently selected Component, [\"highlight updates\"](https://github.com/facebook/react/pull/16989)). Perhaps DevTools could help here too by visualizing which boundaries in the tree have been hydrated.\r\n\r\n# Visualizing hydration progress\r\n1. When React begins hydrating a new root<sup>1</sup> DevTools will show a visual overlay<sup>2</sup> that covers the entire DOM element container.\r\n1. As React hydrates and commits each new level of Suspense boundaries, DevTools will draw the overlay to only cover the not-yet-hydrated boundaries.\r\n1. Once hydration is completed, all overlays will be cleared<sup>3</sup>.\r\n\r\nThis feature would be opt-in via a new DevTools setting.\r\n\r\n<sup>1</sup> This suggests a new React-to-DevTools hook to inform DevTools when hydration starts.\r\n\r\n<sup>2</sup> This overlay would nee to be designed. Perhaps some combination of semi-transparent with stripes or bars so that it is high contrast enough to be seen.\r\n\r\n<sup>3</sup> Because the data required to draw these overlays is essentially just a timestamp and a set of rects, some form of replay might be a nice addition.\r\n\r\n# Special cases\r\nIt could be helpful to highlight a couple of special cases by temporarily showing a different style overlay:\r\n\r\n* **Client rendered content inside of a server rendered fallback.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2030-L2039)) In some cases, the server rendered content may be a forced fallback that gets filled in with client rendered content.\r\n* **React can't complete hydration fast enough to process a client-side update.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2064-L2074)) In this case, React ends up deleting the server-rendered content and replacing it with client rendered content. For example, a layout effect may set state on an ancestor that updates context. This update is synchronous (because it comes from within a layout effect) so it immediately expires.\r\n\r\nI don't know if the above cases can be reliably detected by DevTools at present. They may require additional information (or an additional React-to-DevTools hook).\r\n\r\nThe following case does **not** need to be highlighted because it is not a deopt:\r\n* **Server rendered content removed before hydration.** In some cases, server rendered content is thrown away before hydration completes because of a user interaction. For example, if the user navigates to a new page before the initial page has finished hydrating."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16988",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16988/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16988/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16988/events",
      "html_url": "https://github.com/facebook/react/issues/16988",
      "id": 501586885,
      "node_id": "MDU6SXNzdWU1MDE1ODY4ODU=",
      "number": 16988,
      "title": "React devtools blank (standalone version)",
      "user": {
        "login": "sshmyg",
        "id": 1410608,
        "node_id": "MDQ6VXNlcjE0MTA2MDg=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1410608?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sshmyg",
        "html_url": "https://github.com/sshmyg",
        "followers_url": "https://api.github.com/users/sshmyg/followers",
        "following_url": "https://api.github.com/users/sshmyg/following{/other_user}",
        "gists_url": "https://api.github.com/users/sshmyg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sshmyg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sshmyg/subscriptions",
        "organizations_url": "https://api.github.com/users/sshmyg/orgs",
        "repos_url": "https://api.github.com/users/sshmyg/repos",
        "events_url": "https://api.github.com/users/sshmyg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sshmyg/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2019-10-02T16:09:34Z",
      "updated_at": "2019-11-26T17:02:56Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n![image](https://user-images.githubusercontent.com/1410608/66061174-96fb4880-e547-11e9-9623-0f1075bc78f6.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Open iOS simulator\r\n2. turn on debugging\r\n3. open react-devtools\r\n4. refresh iOS simulator\r\n\r\n**What is the expected behavior?**\r\nComponents tree is visible.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact-native@0.61.1\r\nOS: MacOS Mojave 10.14.6\r\n\r\n@bvaughn "
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16980",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16980/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16980/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16980/events",
      "html_url": "https://github.com/facebook/react/issues/16980",
      "id": 501223648,
      "node_id": "MDU6SXNzdWU1MDEyMjM2NDg=",
      "number": 16980,
      "title": "React DevTools recording commit without any component re-render",
      "user": {
        "login": "kentcdodds",
        "id": 1500684,
        "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kentcdodds",
        "html_url": "https://github.com/kentcdodds",
        "followers_url": "https://api.github.com/users/kentcdodds/followers",
        "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
        "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
        "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
        "repos_url": "https://api.github.com/users/kentcdodds/repos",
        "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 20,
      "created_at": "2019-10-02T01:20:38Z",
      "updated_at": "2019-11-26T19:50:04Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm struggling to make an isolated example of this, but the app where I found this is pretty simple so hopefully it's not too challenging to track down.\r\n\r\nSo I was profiling https://the-react-bookshelf.netlify.com (locally) and got this when I clicked on the \"login\" button:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011343-fe4dc580-e47f-11e9-9220-50ba884640f3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011358-0dcd0e80-e480-11e9-80fb-86c0f2196ef9.png)\r\n\r\nThe fact that there was no profile data for a commit is interesting. Each commit should be associated to a state update somewhere in the tree, and wherever that happened should trigger at least one component to re-render, but that didn't appear to happen here.\r\n\r\nI also verified that I don't have any components filtered out:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011428-57b5f480-e480-11e9-9e66-7cf86f8ba48f.png)\r\n\r\nAnd I didn't filter any commits either:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011433-5ab0e500-e480-11e9-97a8-be202351870d.png)\r\n\r\nHere's the exported profile data:\r\n\r\nhttps://gist.github.com/kentcdodds/dbff66043653333cd22cb9261a08550b\r\n\r\nAnd here's the repo where you can pull it down and reproduce yourself: https://github.com/kentcdodds/bookshelf. The component we're looking at is here: https://github.com/kentcdodds/bookshelf/blob/master/src/unauthenticated-app.js\r\n\r\nSorry I can't give a more direct reproduction."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16974",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16974/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16974/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16974/events",
      "html_url": "https://github.com/facebook/react/pull/16974",
      "id": 501010230,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzIzMzY1NDgz",
      "number": 16974,
      "title": "Add more descriptive error when a function call is passed to use memo",
      "user": {
        "login": "mattfwood",
        "id": 22530815,
        "node_id": "MDQ6VXNlcjIyNTMwODE1",
        "avatar_url": "https://avatars1.githubusercontent.com/u/22530815?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mattfwood",
        "html_url": "https://github.com/mattfwood",
        "followers_url": "https://api.github.com/users/mattfwood/followers",
        "following_url": "https://api.github.com/users/mattfwood/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattfwood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mattfwood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattfwood/subscriptions",
        "organizations_url": "https://api.github.com/users/mattfwood/orgs",
        "repos_url": "https://api.github.com/users/mattfwood/repos",
        "events_url": "https://api.github.com/users/mattfwood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mattfwood/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-01T16:31:06Z",
      "updated_at": "2019-11-05T20:04:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/16974",
        "html_url": "https://github.com/facebook/react/pull/16974",
        "diff_url": "https://github.com/facebook/react/pull/16974.diff",
        "patch_url": "https://github.com/facebook/react/pull/16974.patch"
      },
      "body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n\r\n![image](https://user-images.githubusercontent.com/22530815/65981398-9d51cd80-e43e-11e9-9963-58bd1b1f83ad.png)\r\n\r\nCurrently if you accidentally pass a function call to useMemo instead of a function reference, you get an error like the one above, which doesn't really point a dev in the right direction.\r\n\r\n```javascript\r\n// right:\r\nuseMemo(() => calculate(numbers), [numbers])\r\n\r\n// wrong\r\nuseMemo(calculate(1,2), [numbers]) // => throws 'nextCreate is not a function'\r\n```\r\n\r\nI've added an invariant warning if anything other than a function is passed to `useMemo`"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16965",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16965/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16965/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16965/events",
      "html_url": "https://github.com/facebook/react/issues/16965",
      "id": 500570869,
      "node_id": "MDU6SXNzdWU1MDA1NzA4Njk=",
      "number": 16965,
      "title": "Devtools Inspect Button Doesn't Work with Repeat Selections",
      "user": {
        "login": "lunaruan",
        "id": 2735514,
        "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lunaruan",
        "html_url": "https://github.com/lunaruan",
        "followers_url": "https://api.github.com/users/lunaruan/followers",
        "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
        "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
        "organizations_url": "https://api.github.com/users/lunaruan/orgs",
        "repos_url": "https://api.github.com/users/lunaruan/repos",
        "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lunaruan/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-09-30T23:07:10Z",
      "updated_at": "2020-01-08T19:09:20Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Maybe we can detect this case by checking $0 and if not we can temporarily select null before reselecting. (?)"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16956",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16956/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16956/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16956/events",
      "html_url": "https://github.com/facebook/react/issues/16956",
      "id": 500206671,
      "node_id": "MDU6SXNzdWU1MDAyMDY2NzE=",
      "number": 16956,
      "title": "Design decision: why do we need the stale closure problem in the first place?",
      "user": {
        "login": "slorber",
        "id": 749374,
        "node_id": "MDQ6VXNlcjc0OTM3NA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/749374?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slorber",
        "html_url": "https://github.com/slorber",
        "followers_url": "https://api.github.com/users/slorber/followers",
        "following_url": "https://api.github.com/users/slorber/following{/other_user}",
        "gists_url": "https://api.github.com/users/slorber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slorber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slorber/subscriptions",
        "organizations_url": "https://api.github.com/users/slorber/orgs",
        "repos_url": "https://api.github.com/users/slorber/repos",
        "events_url": "https://api.github.com/users/slorber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slorber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2019-09-30T11:07:44Z",
      "updated_at": "2020-01-21T10:38:08Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Hi,\r\n\r\nI initially asked this on Twitter and @gaearon suggested me to open an issue instead.\r\nThe original thread is here: https://twitter.com/sebastienlorber/status/1178328607376232449?s=19\r\nMore easy to read here: https://threadreaderapp.com/thread/1178328607376232449.html\r\nBut will try to make this issue more clear and structured about my args and questions.\r\n\r\nDon't get me wrong, I really like hooks, but wonder if we can't have smarter abstractions and official patterns that make dealing with them more easy for authors and consumers.\r\n\r\n--------------------------------------\r\n\r\n## Workaround for the stale closure\r\n\r\nAfter using hooks for a while, and being familiar with the stale closure problem, I don't really understand why we need to handle closure dependencies, instead of just doing something like the following code, which always executes latest provided closure (capturing fresh variables)\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869094-f7d52600-e379-11e9-9634-1ab06b41e3ca.png)\r\n\r\nCoupling the dependencies of the closure and the conditions to trigger effect re-execution does not make much sense to me. For me it's perfectly valid to want to capture some variables in the closure, yet when those variables change we don't necessarily want to re-execute.\r\n\r\nThere are many cases where people are using refs to \"stabilize\" some value that should not trigger re-execution, or to access fresh values in closures.\r\n\r\nExamples in major libs includes:\r\n- Formik (code is pretty similar to my \"useSafeEffect\" above): https://github.com/jaredpalmer/formik/blob/master/src/Formik.tsx#L975\r\n- React-redux, which uses refs to access fresh props: https://github.com/reduxjs/react-redux/blob/b6b47995acfb8c1ff5d04a31c14aa75f112a47ab/src/components/connectAdvanced.js#L286\r\n\r\nAlso @Andarist (who maintains a few important React libs for a while): \r\n\r\n![image](https://user-images.githubusercontent.com/749374/65872332-9d8b9380-e380-11e9-90b3-bf294991bb82.png)\r\n\r\n\r\nWe often find in such codebase the \"useIsomorphicLayoutEffect\" hook which permits to ensure that the ref is set the earliest, and try to avoid the useLayoutEffect warning (see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85). What we are doing here seems unrelated to layout and makes me a bit uncomfortable btw.\r\n\r\n\r\n\r\n## Do we need an ESLint rule?\r\n\r\nThe ESLint rule looks to me only useful to avoid the stale closure problem. Without the stale closure problem (which the trick above solves), you can just focus on crafting the array/conditions for effect re-execution and don't need ESLint for that.\r\n\r\nAlso this would make it easier to wrap useEffect in userland without the fear to exposing users to stale closure problem, because eslint plugin won't notice missing dependencies for custom hooks.\r\n\r\nHere's some code for react-navigation (alpha/v5). To me this is weird to have to ask the user to \"useCallback\" just to stabilize the closure of useFocusEffect, just to ensure the effect only runs on messageId change.\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869719-3d462300-e37b-11e9-94d2-5200481588bc.png)\r\n\r\nNot sure to understand why we can't simply use the following instead. For which I don't see the point of using any ESLint rule. I just want the effect to run on messageId change, this is explicit enough for me and there's no \"trap\"\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869777-564ed400-e37b-11e9-8570-12534e5f2a53.png)\r\n\r\nI've heard that the [React team recommends rather the later](https://twitter.com/satya164/status/1178571088172896256), asking the user to useCallback, instead of building custom hooks taking a dependency array, why exactly? Also heard that the ESLint plugin now was able to detect missing deps in a custom hook, if you add the [hook name to ESLint conf](https://twitter.com/n1rual/status/1178568248062877701). Not, sure what to think we are supposed to do in the end.\r\n\r\n## Are we safe using workarounds?\r\n\r\nIt's still a bit hard for me to be sure which kind of code is \"safe\" regarding React's upcoming features, particularly Concurrent Mode. \r\n\r\nIf I use the `useEffectSafe` above or something equivalent relying on refs, I am safe and future proof?\r\n\r\nIf this is safe, and makes my life easier, why do I have to build this abstraction myself? \r\n\r\nWouldn't it make sense to make this kind of pattern more \"official\" / documented?\r\n\r\nI keep adding this kind of code to every project I work with:\r\n\r\n```tsx \r\nconst useGetter = <S>(value: S): (() => S) => {\r\n  const ref = useRef(value);\r\n  useIsomorphicLayoutEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return useCallback(() => ref.current, [ref]);\r\n};\r\n```\r\n(including important community projects like [react-navigation-hooks](https://github.com/react-navigation/hooks/blob/master/src/Hooks.ts#L46))\r\n\r\n## Is it a strategy to teach users?\r\n\r\nIs it a choice of the React team to not ship safer abstractions officially and make sure the users hit the closure problem early and get familiar with it? \r\n\r\nBecause anyway, even when using getters, we still can't prevent the user to capture some value. This has been documented by @sebmarkbage [here](https://gist.github.com/sebmarkbage/a5ef436427437a98408672108df01919) with async code, even with a getter, we can't prevent the user to do things like:\r\n\r\n```tsx\r\nonMount(async () => {\r\n  let isEligible = getIsEligible();\r\n  let data = await fetch(...);\r\n  // at this point, isEligible might has changed: we should rather use `getIsEligible()` again instead of storing a boolean in the closure (might depend on the usecase though, but maybe we can imagine isEligible => isMounted)\r\n  if (isEligible) {\r\n    doStuff(data);\r\n  }\r\n});\r\n```  \r\nAs far as I understand, this might be the case:\r\n\r\n> So you can easily get into the same situation even with a mutable source value. React just makes you always deal with it so that you don't get too far down the road before you have to refactor you code to deal with these cases anyway. I'm really glad how well the React community has dealt with this since the release of hooks because it really sets us up to predictably deal with more complex scenario and for doing more things in the future.\r\n\r\n\r\n## A concrete problem\r\n\r\nA react-navigation-hooks user reported that his effect run too much, using the following code:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65870979-bf374b80-e37d-11e9-8a6c-1f7df8503c18.png)\r\n\r\nIn practice, this is because react-navigation core does not provide stable `navigate` function, and thus the hooks too. The core does not necessarily want to \"stabilize\" the navigate function and guarantee that contract in its API.\r\n\r\nIt's not clear to me what should I do, between officially stabilizing the `navigate` function in the hooks project (relying on core, so core can still return distinct navigate functions), or if I should ask the user to stabilize the function himself in userland, leading to pain and boilerplate for many users trying to use the API.\r\n\r\nI don't understand why you can't simply dissociate the closure dependencies to the effect's triggering, and simply omitting the `navigate` function here:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65871264-51d7ea80-e37e-11e9-837d-291775853b2e.png)\r\n\r\n\r\nWhat bothers me is that somehow as hooks lib authors we now have to think about whether what we return to the user is stable or not, ie safe to use in an effect dependency array without unwanted effect re-executions.\r\n\r\nReturning a stable value in v1 and unstable in v2 is a breaking change that might break users apps in nasty ways, and we have to document this too in our api doc, or ask the user to not trust us, and do the memoization work themselves, which is quite error prone and verbose. Now as lib authors we have to think not only about the inputs/outputs, but also about preserving identities or not (it's probably not a new problem, because we already need to in userland for optimisations anyway).\r\n\r\nAsking users to do this memoization themselves is error prone and verbose. And intuitively some people will maybe want to `useMemo` (just because of the naming) which actually can tricks them by not offering the same guarantees than `useCallback`.\r\n\r\n\r\n## A tradeoff between different usecases in the name of a consistent API?\r\n\r\n@satya164 also mentionned that there are also usecases where the [ESLint plugin saved him](https://twitter.com/satya164/status/1178395620236759043) more than once because he forgot some dependency, and for him, it's more easy to fix an effect re-executing too much than to find out about some cached value not updating. \r\n\r\nI see how the ESLint plugin is really handy for usecases such as building a stable object to optimize renders or provide a stable context value. \r\n\r\nBut for useEffect, when capturing functions, sometimes executing 2 functions with distinct identities actually lead to the same result. Having to add those functions to dependencies is quite annoying in such case. \r\n\r\nBut I totally understand we want to guarantee some kind of consistency across all hooks API.\r\n\r\n## Conclusion\r\n\r\nI try to understand some of the tradeoffs being made in the API. Not sure to understand yet the whole picture, and I'm probably not alone. \r\n\r\n@gaearon said to open an issue with a comment: `It's more nuanced`. I'm here to discuss all the nuances if possible :)\r\n\r\nWhat particularly bothers me currently is not necessarily the existing API. It's rather:\r\n- the dogmatism of absolutely wanting to conform the ESLint rules (for which I don't agree with for all usecases). Currently I think users are really afraid to not follow the rules.\r\n- the lack of official patterns on how we are supposed to handle some specific hooks cases. And I think the \"getter\" pattern should be a thing that every hooks users know about and learn very early. Eventually adding such pattern in core would make it even more visible. Currently it's more lib authors and tech leads that all find out about this pattern in userland with small implementation variations.\r\n\r\nThose are the solutions that I think of. As I said I may miss something important and may change my opinions according to the answers.\r\n\r\nAs an author of a few React libs, I feel a bit frustrated to not be 100% sure what kind of API contract I should offer to my lib's users. I'm also not sure about the hooks patterns I can recommend or not. I plan to open-source something soon but don't even know if that's a good idea, and if it goes in the direction the React team want to go with hooks.\r\n\r\nThanks\r\n\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16955",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16955/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16955/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16955/events",
      "html_url": "https://github.com/facebook/react/issues/16955",
      "id": 500116330,
      "node_id": "MDU6SXNzdWU1MDAxMTYzMzA=",
      "number": 16955,
      "title": "When SSR returns a field that is inconsistent with the client side, the client side should prevail",
      "user": {
        "login": "leiyourong",
        "id": 17899723,
        "node_id": "MDQ6VXNlcjE3ODk5NzIz",
        "avatar_url": "https://avatars1.githubusercontent.com/u/17899723?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leiyourong",
        "html_url": "https://github.com/leiyourong",
        "followers_url": "https://api.github.com/users/leiyourong/followers",
        "following_url": "https://api.github.com/users/leiyourong/following{/other_user}",
        "gists_url": "https://api.github.com/users/leiyourong/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/leiyourong/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/leiyourong/subscriptions",
        "organizations_url": "https://api.github.com/users/leiyourong/orgs",
        "repos_url": "https://api.github.com/users/leiyourong/repos",
        "events_url": "https://api.github.com/users/leiyourong/events{/privacy}",
        "received_events_url": "https://api.github.com/users/leiyourong/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-09-30T08:02:34Z",
      "updated_at": "2019-10-30T07:27:43Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "There is the demo:\r\n\r\nreturn page(HTML) is: \r\n```\r\n<html>\r\n <head>\r\n    ...\r\n </head>\r\n  <body>\r\n    <div id='react'>\r\n      <div id=\"level1\">\r\n        <div id=\"level21\">22</div>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nAnd the root Component is:\r\n```\r\nclass App extends React.Component {\r\n  render () {\r\n    return (\r\n      <div id=\"level1\">\r\n        <div id=\"level211\">221</div>\r\n        <div className=\"level33\">33</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nhydrate(\r\n  <App />,\r\n  document.getElementById('react')\r\n)\r\n```\r\n\r\nFinally the page dom will be rendered as:\r\n```\r\n<body>\r\n    <div id=\"react\">\r\n           <div id=\"level1\">\r\n                <div id=\"level21\">221</div>\r\n                <div class=\"level33\">33</div>\r\n          </div>\r\n   </div>\r\n</body>\r\n```\r\n\r\nIt seems that the id of the first child of div#level1 is incorrect.\r\n\r\nReact & ReactDom version: 16.8.6"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16954",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16954/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16954/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16954/events",
      "html_url": "https://github.com/facebook/react/issues/16954",
      "id": 499977709,
      "node_id": "MDU6SXNzdWU0OTk5Nzc3MDk=",
      "number": 16954,
      "title": "Why will Suspense for data fetching require a cache?",
      "user": {
        "login": "ghengeveld",
        "id": 321738,
        "node_id": "MDQ6VXNlcjMyMTczOA==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/321738?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghengeveld",
        "html_url": "https://github.com/ghengeveld",
        "followers_url": "https://api.github.com/users/ghengeveld/followers",
        "following_url": "https://api.github.com/users/ghengeveld/following{/other_user}",
        "gists_url": "https://api.github.com/users/ghengeveld/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ghengeveld/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ghengeveld/subscriptions",
        "organizations_url": "https://api.github.com/users/ghengeveld/orgs",
        "repos_url": "https://api.github.com/users/ghengeveld/repos",
        "events_url": "https://api.github.com/users/ghengeveld/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ghengeveld/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2019-09-29T21:56:33Z",
      "updated_at": "2020-01-10T10:03:57Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm [integrating Suspense with React Async](https://github.com/async-library/react-async/pull/153), and I've been reading up on how it's supposed to work. All the resources I found talk about needing `react-cache` or another cache mechanism for Suspense to work properly. However, none of the resources explain WHY Suspense needs a cache. Could someone explain that? I've been able to [make it work without a cache](https://github.com/async-library/react-async/pull/153/files#diff-2d8d9c51cb93c9f7f57c81f6f7f1669a). Am I missing something?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16948",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16948/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16948/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16948/events",
      "html_url": "https://github.com/facebook/react/issues/16948",
      "id": 499813656,
      "node_id": "MDU6SXNzdWU0OTk4MTM2NTY=",
      "number": 16948,
      "title": "Request: Create an ESLint Plugin for warnings and depreciations that will impact major upgrades",
      "user": {
        "login": "Aghassi",
        "id": 3680126,
        "node_id": "MDQ6VXNlcjM2ODAxMjY=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/3680126?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Aghassi",
        "html_url": "https://github.com/Aghassi",
        "followers_url": "https://api.github.com/users/Aghassi/followers",
        "following_url": "https://api.github.com/users/Aghassi/following{/other_user}",
        "gists_url": "https://api.github.com/users/Aghassi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Aghassi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Aghassi/subscriptions",
        "organizations_url": "https://api.github.com/users/Aghassi/orgs",
        "repos_url": "https://api.github.com/users/Aghassi/repos",
        "events_url": "https://api.github.com/users/Aghassi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Aghassi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2019-09-28T19:44:12Z",
      "updated_at": "2020-01-10T00:22:02Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nReact currently does console output to the browser console to tell developers that they need to be aware of major changes coming so that upgrades will be seamless for them. This works well on smaller sites, or in a situation where your company may have a monorepo and can enforce and track these warnings.\r\n\r\n**What is the expected behavior?**\r\nIn addition to this behavior, it would be beneficial to React developers if they could have ESLint plugins that had rules for these warnings. Ideally, the ESLint plugin could fix simple cases (methods being renamed) and in more complex cases recommend a codemod.\r\n\r\n——-\r\n\r\nI’m posting this here as per discussion with @acdlite on twitter. See this thread: https://twitter.com/acdlite/status/1178018850937290753?s=21\r\n\r\nUltimately, it is harder for shops that do micro frontends to ensure everyone is compliant with new React versions. It is also easier to catch things early at build time then to dig around in the browser runtime when there may be other compounding issues.\r\n\r\nThe other benefit of this would be that it would enable third party libraries to potentially have “day 1 support” for new major React versions because they could follow the rule set and ensure that they are forwards compatible without being caught trying to do it all at once.\r\n\r\nLastly, I’m happy to help drive/contribute to any rule set to make sure it works in our use case.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16912",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16912/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16912/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16912/events",
      "html_url": "https://github.com/facebook/react/pull/16912",
      "id": 499115146,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzIxOTA2NjUw",
      "number": 16912,
      "title": "Document `additionalHooks` option",
      "user": {
        "login": "airjp73",
        "id": 25882770,
        "node_id": "MDQ6VXNlcjI1ODgyNzcw",
        "avatar_url": "https://avatars2.githubusercontent.com/u/25882770?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/airjp73",
        "html_url": "https://github.com/airjp73",
        "followers_url": "https://api.github.com/users/airjp73/followers",
        "following_url": "https://api.github.com/users/airjp73/following{/other_user}",
        "gists_url": "https://api.github.com/users/airjp73/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/airjp73/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/airjp73/subscriptions",
        "organizations_url": "https://api.github.com/users/airjp73/orgs",
        "repos_url": "https://api.github.com/users/airjp73/repos",
        "events_url": "https://api.github.com/users/airjp73/events{/privacy}",
        "received_events_url": "https://api.github.com/users/airjp73/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2019-09-26T21:03:11Z",
      "updated_at": "2019-12-19T05:27:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/16912",
        "html_url": "https://github.com/facebook/react/pull/16912",
        "diff_url": "https://github.com/facebook/react/pull/16912.diff",
        "patch_url": "https://github.com/facebook/react/pull/16912.patch"
      },
      "body": "Hi!\r\n\r\nI noticed that there doesn't seem to be any documentation about this option for `exhaustive-deps`. Was this a deliberate decision or an oversight? Obviously, feel free to decline this if you don't want to do this or this is the wrong place.\r\n\r\nI recently used this for a custom hook at work and it's pretty useful but I'm a little uneasy about using undocumented features."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16904",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16904/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16904/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16904/events",
      "html_url": "https://github.com/facebook/react/issues/16904",
      "id": 498916121,
      "node_id": "MDU6SXNzdWU0OTg5MTYxMjE=",
      "number": 16904,
      "title": "More time between releasing @next and @latest",
      "user": {
        "login": "ghengeveld",
        "id": 321738,
        "node_id": "MDQ6VXNlcjMyMTczOA==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/321738?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghengeveld",
        "html_url": "https://github.com/ghengeveld",
        "followers_url": "https://api.github.com/users/ghengeveld/followers",
        "following_url": "https://api.github.com/users/ghengeveld/following{/other_user}",
        "gists_url": "https://api.github.com/users/ghengeveld/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ghengeveld/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ghengeveld/subscriptions",
        "organizations_url": "https://api.github.com/users/ghengeveld/orgs",
        "repos_url": "https://api.github.com/users/ghengeveld/repos",
        "events_url": "https://api.github.com/users/ghengeveld/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ghengeveld/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-09-26T14:18:06Z",
      "updated_at": "2019-09-27T06:31:53Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "As a library author, I test against both the `@next` and `@latest` versions of `react` and `react-dom` (as well as 16.3, the oldest version we support). The rationale for that is to know up front if the upcoming version of React is going to break our library. I think this is good practice for everyone involved.\r\n\r\nUnfortunately, when 16.9 was released, there was only 1 week between promoting the RC to `@next`, and promoting that to `@latest`. Because the last RC broke the way `act` works, I had only 1 week to fix our unit test suite, which was all the sudden mostly failing. In fact we had to wait for `react-testing-library` to be updated to deal with this change.\r\n\r\nLuckily I was able to scramble and find time to fix this before the final release, but this won't always be the case. I imagine other library authors may struggle with this too. As such I would like to see at least a 2 week window between `next` and `latest`. I hope that's feasible.\r\n\r\nPlease advise if there's a better way to test for future compatibility."
    },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17381",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17381/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17381/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17381/events",
        "html_url": "https://github.com/facebook/react/issues/17381",
        "id": 523731196,
        "node_id": "MDU6SXNzdWU1MjM3MzExOTY=",
        "number": 17381,
        "title": " [eslint-plugin-react-hooks] refine warning about accessing .current in cleanup effects",
        "user": {
          "login": "juangl",
          "id": 1887029,
          "node_id": "MDQ6VXNlcjE4ODcwMjk=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1887029?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/juangl",
          "html_url": "https://github.com/juangl",
          "followers_url": "https://api.github.com/users/juangl/followers",
          "following_url": "https://api.github.com/users/juangl/following{/other_user}",
          "gists_url": "https://api.github.com/users/juangl/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/juangl/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/juangl/subscriptions",
          "organizations_url": "https://api.github.com/users/juangl/orgs",
          "repos_url": "https://api.github.com/users/juangl/repos",
          "events_url": "https://api.github.com/users/juangl/events{/privacy}",
          "received_events_url": "https://api.github.com/users/juangl/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-15T22:52:05Z",
        "updated_at": "2019-11-19T20:23:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\ncurrently when you access `.current` in the cleanup effect you'll get a warning if ESLint didn't find an assignment to `.current`.\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally the linter can check if the `useRef` call sets an usable initial value.\r\n\r\n```javascript\r\nfunction MyComponent() {\r\n  const refOne = React.useRef({});\r\n  const refTwo = React.useRef(null);\r\n  \r\n  React.useEffect(() => {\r\n    refOne.current.someProperty = true;\r\n    return function cleanup() {\r\n      refOne.current.somePropty; // this is cool\r\n      refTwo.current.innerHTML; // this maybe not\r\n    }\r\n  }, []);\r\n  return <div ref={refTwo} />;\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\ncurrent version in master\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17378",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17378/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17378/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17378/events",
        "html_url": "https://github.com/facebook/react/issues/17378",
        "id": 523600371,
        "node_id": "MDU6SXNzdWU1MjM2MDAzNzE=",
        "number": 17378,
        "title": "change aria-label to ariaLabel",
        "user": {
          "login": "zwhitchcox",
          "id": 4328800,
          "node_id": "MDQ6VXNlcjQzMjg4MDA=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/4328800?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zwhitchcox",
          "html_url": "https://github.com/zwhitchcox",
          "followers_url": "https://api.github.com/users/zwhitchcox/followers",
          "following_url": "https://api.github.com/users/zwhitchcox/following{/other_user}",
          "gists_url": "https://api.github.com/users/zwhitchcox/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zwhitchcox/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zwhitchcox/subscriptions",
          "organizations_url": "https://api.github.com/users/zwhitchcox/orgs",
          "repos_url": "https://api.github.com/users/zwhitchcox/repos",
          "events_url": "https://api.github.com/users/zwhitchcox/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zwhitchcox/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-15T17:36:42Z",
        "updated_at": "2019-11-16T17:00:11Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n\r\n`aria-label` for `input` is not camel cased like everything else\r\n\r\nIf would be nice if when you create an object for props like\r\n\r\n```ts\r\nconst value = myval\r\nconst onChange = e => setVal(e.target.value)\r\nconst ariaLabel = \"My Label\"\r\nreturn {\r\n  onChange,\r\n  ariaLabel,\r\n  value,\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`ariaLabel` to be camel cased\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nall browsers/versions of react\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17373",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17373/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17373/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17373/events",
        "html_url": "https://github.com/facebook/react/issues/17373",
        "id": 523344774,
        "node_id": "MDU6SXNzdWU1MjMzNDQ3NzQ=",
        "number": 17373,
        "title": "useLayoutEffect makes startTransition skip timeout ",
        "user": {
          "login": "jihlstrom",
          "id": 406972,
          "node_id": "MDQ6VXNlcjQwNjk3Mg==",
          "avatar_url": "https://avatars1.githubusercontent.com/u/406972?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jihlstrom",
          "html_url": "https://github.com/jihlstrom",
          "followers_url": "https://api.github.com/users/jihlstrom/followers",
          "following_url": "https://api.github.com/users/jihlstrom/following{/other_user}",
          "gists_url": "https://api.github.com/users/jihlstrom/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jihlstrom/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jihlstrom/subscriptions",
          "organizations_url": "https://api.github.com/users/jihlstrom/orgs",
          "repos_url": "https://api.github.com/users/jihlstrom/repos",
          "events_url": "https://api.github.com/users/jihlstrom/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jihlstrom/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-15T09:06:55Z",
        "updated_at": "2019-11-15T09:06:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nPossible bug\r\n\r\n**What is the current behavior?**\r\nI am using the router implemented in the relay-examples issue-tracker(https://github.com/relayjs/relay-examples/tree/master/issue-tracker/src/routing) and when transitioning from routes, startTransition works fine. However, on one page I am using React.useLayoutEffect and when I am transitioning away from that page. startTransition skips the timeout and immediately goes to the next page. Changing the useLayoutEffect to useEffect fixes this problem.\r\n\r\n**What is the expected behavior?**\r\nI would expect useLayoutEffect to work the same as useEffect\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nGoogle chrome 78, max osx, react experimental\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17363",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17363/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17363/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17363/events",
        "html_url": "https://github.com/facebook/react/issues/17363",
        "id": 522734282,
        "node_id": "MDU6SXNzdWU1MjI3MzQyODI=",
        "number": 17363,
        "title": "Devtools: higlight updated items in Components tree",
        "user": {
          "login": "syabro",
          "id": 29029,
          "node_id": "MDQ6VXNlcjI5MDI5",
          "avatar_url": "https://avatars1.githubusercontent.com/u/29029?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/syabro",
          "html_url": "https://github.com/syabro",
          "followers_url": "https://api.github.com/users/syabro/followers",
          "following_url": "https://api.github.com/users/syabro/following{/other_user}",
          "gists_url": "https://api.github.com/users/syabro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/syabro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/syabro/subscriptions",
          "organizations_url": "https://api.github.com/users/syabro/orgs",
          "repos_url": "https://api.github.com/users/syabro/repos",
          "events_url": "https://api.github.com/users/syabro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/syabro/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-14T09:37:40Z",
        "updated_at": "2019-11-15T16:44:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "*feature request*\r\n\r\nIs it possible to higlight updated items in Components tree as well?"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17362",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17362/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17362/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17362/events",
        "html_url": "https://github.com/facebook/react/pull/17362",
        "id": 522702050,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzQwODQ5Mzgy",
        "number": 17362,
        "title": "Update Prettier parser name",
        "user": {
          "login": "lewislbr",
          "id": 35342598,
          "node_id": "MDQ6VXNlcjM1MzQyNTk4",
          "avatar_url": "https://avatars2.githubusercontent.com/u/35342598?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lewislbr",
          "html_url": "https://github.com/lewislbr",
          "followers_url": "https://api.github.com/users/lewislbr/followers",
          "following_url": "https://api.github.com/users/lewislbr/following{/other_user}",
          "gists_url": "https://api.github.com/users/lewislbr/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lewislbr/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lewislbr/subscriptions",
          "organizations_url": "https://api.github.com/users/lewislbr/orgs",
          "repos_url": "https://api.github.com/users/lewislbr/repos",
          "events_url": "https://api.github.com/users/lewislbr/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lewislbr/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-14T08:34:34Z",
        "updated_at": "2019-11-14T08:40:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17362",
          "html_url": "https://github.com/facebook/react/pull/17362",
          "diff_url": "https://github.com/facebook/react/pull/17362.diff",
          "patch_url": "https://github.com/facebook/react/pull/17362.patch"
        },
        "body": "According to [Prettier's parser options](https://prettier.io/docs/en/options.html#parser), \"babylon\" was changed to \"babel\":\r\n\r\n> \"babel\" (via @babel/parser) Named \"babylon\" until v1.16.0\r\n\r\nSo I just updated the name."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17357",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17357/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17357/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17357/events",
        "html_url": "https://github.com/facebook/react/issues/17357",
        "id": 522498619,
        "node_id": "MDU6SXNzdWU1MjI0OTg2MTk=",
        "number": 17357,
        "title": "getDerivedStateFromError is not called until all children have finished rendering",
        "user": {
          "login": "sh3nan1gans",
          "id": 4808898,
          "node_id": "MDQ6VXNlcjQ4MDg4OTg=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/4808898?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sh3nan1gans",
          "html_url": "https://github.com/sh3nan1gans",
          "followers_url": "https://api.github.com/users/sh3nan1gans/followers",
          "following_url": "https://api.github.com/users/sh3nan1gans/following{/other_user}",
          "gists_url": "https://api.github.com/users/sh3nan1gans/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sh3nan1gans/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sh3nan1gans/subscriptions",
          "organizations_url": "https://api.github.com/users/sh3nan1gans/orgs",
          "repos_url": "https://api.github.com/users/sh3nan1gans/repos",
          "events_url": "https://api.github.com/users/sh3nan1gans/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sh3nan1gans/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-13T22:02:41Z",
        "updated_at": "2019-11-13T22:09:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIf I have an array of children that each throw an error, my error boundary isn't called until all children have finished rendering. \r\n\r\nIn my example there are 3 child components that cause an error, the error is logged to the console 3 times before getDerivedStateFromError is called:\r\n\r\n![Screen Shot 2019-11-13 at 3 58 24 PM](https://user-images.githubusercontent.com/4808898/68808144-c0bb8b00-062e-11ea-9de3-b233d282bb78.png)\r\n\r\n\r\n\r\nSee example: https://codesandbox.io/s/heuristic-cache-y8h5d\r\n\r\n**What is the expected behavior?**\r\nI'd expect the first child error that is thrown to trigger my error boundary in the parent and no other children should be rendered. I understand that I should be using nested error boundaries where possible but this can be tedious. The current behavior isn't really an issue until you have an error in something like a spreadsheet cell component, where there could be hundreds or thousands of errors depending on the amount of data. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.11, also happens in 16.8.6\r\nAll browsers/all OS\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17356",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17356/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17356/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17356/events",
        "html_url": "https://github.com/facebook/react/issues/17356",
        "id": 522446729,
        "node_id": "MDU6SXNzdWU1MjI0NDY3Mjk=",
        "number": 17356,
        "title": "Memoized child of Suspense component doesn't update when Context updates.",
        "user": {
          "login": "jcarroll2007",
          "id": 8485105,
          "node_id": "MDQ6VXNlcjg0ODUxMDU=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/8485105?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jcarroll2007",
          "html_url": "https://github.com/jcarroll2007",
          "followers_url": "https://api.github.com/users/jcarroll2007/followers",
          "following_url": "https://api.github.com/users/jcarroll2007/following{/other_user}",
          "gists_url": "https://api.github.com/users/jcarroll2007/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jcarroll2007/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jcarroll2007/subscriptions",
          "organizations_url": "https://api.github.com/users/jcarroll2007/orgs",
          "repos_url": "https://api.github.com/users/jcarroll2007/repos",
          "events_url": "https://api.github.com/users/jcarroll2007/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jcarroll2007/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1109407645,
            "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
            "name": "Component: Suspense",
            "color": "8ffcd6",
            "default": false,
            "description": ""
          },
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-13T20:11:50Z",
        "updated_at": "2019-11-20T19:44:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug (I think?)\r\n\r\n**What is the current behavior?**\r\n```javascript\r\nconst [value, setValue] = useState(\"default\");\r\nreturn (\r\n  <div className=\"App\">\r\n    <input value={value} onChange={e => setValue(e.target.value)} />\r\n    <div>\r\n      <Value.Provider value={value}>\r\n        <Suspense fallback={<div>loading</div>}>\r\n          <MemoizedChild />\r\n         </Suspense>\r\n       </Value.Provider>\r\n     </div>\r\n  </div>\r\n)\r\n```\r\n\r\nWhen using a memoized functional component (`MemoizedChild` in above example) in conjunction with `Context` as a child of a `React.Suspense` component, there seems to be a bug in which `MemoizedChild` does not update when the context it uses changes. For the full example, see my codesandbox below.\r\n\r\nIn the codesandbox, if you change the value of the input, the new value is provided to the context which causes the hook used in `MemoizedChild` (`useValue`) to throw a promise. This flips `Suspense` to the fallback state and when the promise resolves `MemoizedChild`'s state is not updated with the proper context value because (I'm assuming) the memoized value of `MemoizedChild` is the one that contained the previous context value and technically no props have changed, so that makes sense why it wouldn't have updated. However, this seems like it would be unexpected behavior.\r\n\r\nhttps://codesandbox.io/s/react-suspense-maybe-bug-sznbk\r\n\r\n**What is the expected behavior?**\r\nI would expect that `MemoizedChild` would be re-rendered with the new provided value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm assuming all of them that contain Suspense and memo. So, since 16.8?"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17355",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17355/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17355/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17355/events",
        "html_url": "https://github.com/facebook/react/issues/17355",
        "id": 522336536,
        "node_id": "MDU6SXNzdWU1MjIzMzY1MzY=",
        "number": 17355,
        "title": "Should not already be working",
        "user": {
          "login": "gzzo",
          "id": 5722054,
          "node_id": "MDQ6VXNlcjU3MjIwNTQ=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/5722054?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gzzo",
          "html_url": "https://github.com/gzzo",
          "followers_url": "https://api.github.com/users/gzzo/followers",
          "following_url": "https://api.github.com/users/gzzo/following{/other_user}",
          "gists_url": "https://api.github.com/users/gzzo/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gzzo/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gzzo/subscriptions",
          "organizations_url": "https://api.github.com/users/gzzo/orgs",
          "repos_url": "https://api.github.com/users/gzzo/repos",
          "events_url": "https://api.github.com/users/gzzo/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gzzo/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 620368407,
            "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
            "name": "Resolution: Needs More Information",
            "color": "fffde7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 11,
        "created_at": "2019-11-13T16:35:19Z",
        "updated_at": "2020-01-15T22:44:42Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm seeing \"Error: Should not already be working\" after upgrading to React 16.11\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7\r\n\r\nI was unable to reproduce this in a VM environment but our Sentry is getting littered with these errors. \r\n\r\nI know it's a long shot, but I wasn't able to find any information about this error anywhere, just a reference in the error codes file in react, so thought it would be a good idea to report this just in case. Curious if anyone has seen this.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17352",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17352/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17352/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17352/events",
        "html_url": "https://github.com/facebook/react/issues/17352",
        "id": 521946591,
        "node_id": "MDU6SXNzdWU1MjE5NDY1OTE=",
        "number": 17352,
        "title": "Upgrade Babel to 7.7.0+",
        "user": {
          "login": "MicahZoltu",
          "id": 886059,
          "node_id": "MDQ6VXNlcjg4NjA1OQ==",
          "avatar_url": "https://avatars2.githubusercontent.com/u/886059?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/MicahZoltu",
          "html_url": "https://github.com/MicahZoltu",
          "followers_url": "https://api.github.com/users/MicahZoltu/followers",
          "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
          "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
          "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
          "repos_url": "https://api.github.com/users/MicahZoltu/repos",
          "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
          "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 71502270,
            "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
            "name": "Component: Build Infrastructure",
            "color": "f9d0c4",
            "default": false,
            "description": null
          },
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 8,
        "created_at": "2019-11-13T04:07:32Z",
        "updated_at": "2020-01-10T18:41:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug-ish.\r\n\r\n**What is the current behavior?**\r\n`import 'react'` (where 'react' is the UMD module build) from an ES module will fail due to https://github.com/rollup/rollup/pull/2274.  `this` is not set in the context of ES modules, so if you try to `import 'react'` in that context you will get a runtime error since `this` is undefined and Rollup (before the linked fix) tries to use `this` when it really means `globalThis` or `self`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```\r\nnpm install react\r\n```\r\n`index.html`\r\n```html\r\n<!DOCTYPE html>\r\n<head><meta charset='utf-8'></head>\r\n<body>\r\n\t<script type='module'>\r\n\t\timport './node_modules/react/umd/react.development.js'\r\n\t</script>\r\n</body>\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe React UMD module can be loaded by an ES module.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.11.0\r\nFirefox: 70.0.1\r\nWindows 10"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17351",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17351/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17351/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17351/events",
        "html_url": "https://github.com/facebook/react/issues/17351",
        "id": 521883191,
        "node_id": "MDU6SXNzdWU1MjE4ODMxOTE=",
        "number": 17351,
        "title": "Possibility to set min duration of Suspense fallback",
        "user": {
          "login": "tonix-tuft",
          "id": 10134421,
          "node_id": "MDQ6VXNlcjEwMTM0NDIx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tonix-tuft",
          "html_url": "https://github.com/tonix-tuft",
          "followers_url": "https://api.github.com/users/tonix-tuft/followers",
          "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
          "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
          "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
          "repos_url": "https://api.github.com/users/tonix-tuft/repos",
          "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-13T00:33:43Z",
        "updated_at": "2019-11-13T00:33:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI have played a bit with Concurrent Mode and the Suspense API.\r\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\r\n\r\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\r\n\r\n**What is the expected behavior?**\r\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \r\nhttps://codesandbox.io/s/cold-monad-ifr29.\r\n\r\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\r\nIn my opinion, this is a bit unpleasant to the eye.\r\n\r\nWouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:\r\n\r\n```jsx\r\n...\r\nfunction ProfilePage({ resource }) {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}\r\n      // If the fallback ever gets rendered,\r\n      // it will be shown for at least 1500 millisec.,\r\n      // even if the promise resolves right after rendering the fallback.\r\n      fallbackMinDurationMs={1500}>\r\n      <ProfileDetails resource={resource} />\r\n      <Suspense fallback={<h1>Loading posts...</h1>}>\r\n        <ProfileTimeline resource={resource} />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n...\r\n```\r\n\r\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\r\n\r\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\r\n\r\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\r\n\r\n```js\r\nfunction maxDelayFallbackPromise({\r\n  promise,\r\n  timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`\r\n  onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)\r\n  fallbackMinDurationMs\r\n} = {}) {\r\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\r\n  const uniqueIdentifier = `promise_value_${Math.random()}`\r\n  return Promise.race([\r\n    promise,\r\n    timeout(timeoutMs).then(() => uniqueIdentifier)\r\n  ]).then(value => {\r\n    if (value === uniqueIdentifier) {\r\n      onFallback()\r\n      return minDelayPromise(promise, fallbackMinDurationMs)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nWhere `timeout` and `minDelayPromise` are:\r\n\r\n```js\r\nfunction timeout(delayMs) {\r\n  return new Promise(resolve => setTimeout(resolve, delayMs))\r\n}\r\n\r\nfunction minDelayPromise(promise, minDelay) {\r\n  return Promise.all([\r\n    promise,\r\n    timeout(minDelay)\r\n  ]).then(([value]) => {\r\n    return value\r\n  })\r\n}\r\n```\r\n\r\nThis could also apply to the `isPending` flag of `useTransition`...\r\n\r\nDo you think such a feature could improve the UX in such cases?\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17350",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17350/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17350/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17350/events",
        "html_url": "https://github.com/facebook/react/pull/17350",
        "id": 521632691,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5OTc2NTYy",
        "number": 17350,
        "title": "feat: Add useHydrateableEffect",
        "user": {
          "login": "eps1lon",
          "id": 12292047,
          "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
          "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/eps1lon",
          "html_url": "https://github.com/eps1lon",
          "followers_url": "https://api.github.com/users/eps1lon/followers",
          "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
          "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
          "organizations_url": "https://api.github.com/users/eps1lon/orgs",
          "repos_url": "https://api.github.com/users/eps1lon/repos",
          "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/eps1lon/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-12T15:47:51Z",
        "updated_at": "2019-12-02T15:51:56Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17350",
          "html_url": "https://github.com/facebook/react/pull/17350",
          "diff_url": "https://github.com/facebook/react/pull/17350.diff",
          "patch_url": "https://github.com/facebook/react/pull/17350.patch"
        },
        "body": "This is an attempt to resolve #14927\r\n\r\n## Rationale\r\nIf the component requires a layout effect no current workaround solves the underlying issue. Explicit fallback views are most likely impossible (that's why we need layout in the first place) or the component itself is a sufficient fallback (e.g. the overall markup is renderable on the server but we need to adjust some minor visuals).\r\n\r\nSince components using `useLayoutEffect` will always have an inconsistent UI before hydration we can potentially downgrade these effects to passive effects i.e. it's already inconsistent so we might as well make it inconsistent a little bit longer to make room for higher priority work.\r\n\r\n## Behavior\r\n\r\n- like useEffect when ssr\r\n- like useEffect when hydrating\r\n- like useLayoutEffect when rendering on the client\r\n- like useLayoutEffect on updates\r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17338",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17338/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17338/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17338/events",
        "html_url": "https://github.com/facebook/react/issues/17338",
        "id": 520734649,
        "node_id": "MDU6SXNzdWU1MjA3MzQ2NDk=",
        "number": 17338,
        "title": "internalContainerInstanceKey is write wrong",
        "user": {
          "login": "zhupingcmm",
          "id": 30522912,
          "node_id": "MDQ6VXNlcjMwNTIyOTEy",
          "avatar_url": "https://avatars1.githubusercontent.com/u/30522912?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zhupingcmm",
          "html_url": "https://github.com/zhupingcmm",
          "followers_url": "https://api.github.com/users/zhupingcmm/followers",
          "following_url": "https://api.github.com/users/zhupingcmm/following{/other_user}",
          "gists_url": "https://api.github.com/users/zhupingcmm/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zhupingcmm/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zhupingcmm/subscriptions",
          "organizations_url": "https://api.github.com/users/zhupingcmm/orgs",
          "repos_url": "https://api.github.com/users/zhupingcmm/repos",
          "events_url": "https://api.github.com/users/zhupingcmm/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zhupingcmm/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-11T04:33:14Z",
        "updated_at": "2019-11-11T04:34:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nyes\r\n**What is the current behavior?**\r\nconst internalContainerInstanceKey = '__reactContainere$' + randomKey;\r\nIn the master branch and ReactDOMComponentTree.js line 23.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nconst internalContainerInstanceKey = '__reactContainer$' + randomKey;\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17336",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17336/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17336/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17336/events",
        "html_url": "https://github.com/facebook/react/pull/17336",
        "id": 520675700,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5MjA0NDQ1",
        "number": 17336,
        "title": "Add failing test for #17213",
        "user": {
          "login": "samcooke98",
          "id": 787007,
          "node_id": "MDQ6VXNlcjc4NzAwNw==",
          "avatar_url": "https://avatars3.githubusercontent.com/u/787007?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/samcooke98",
          "html_url": "https://github.com/samcooke98",
          "followers_url": "https://api.github.com/users/samcooke98/followers",
          "following_url": "https://api.github.com/users/samcooke98/following{/other_user}",
          "gists_url": "https://api.github.com/users/samcooke98/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/samcooke98/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/samcooke98/subscriptions",
          "organizations_url": "https://api.github.com/users/samcooke98/orgs",
          "repos_url": "https://api.github.com/users/samcooke98/repos",
          "events_url": "https://api.github.com/users/samcooke98/events{/privacy}",
          "received_events_url": "https://api.github.com/users/samcooke98/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-10T23:32:22Z",
        "updated_at": "2019-11-14T21:40:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17336",
          "html_url": "https://github.com/facebook/react/pull/17336",
          "diff_url": "https://github.com/facebook/react/pull/17336.diff",
          "patch_url": "https://github.com/facebook/react/pull/17336.patch"
        },
        "body": "I've tried to add a failing test for the issue described here. \r\nhttps://github.com/facebook/react/issues/17314\r\n\r\n\r\nIf you run it locally, and change `isMemo` to be false, the test will pass. The test will also pass if you change the line to \r\n`    const MemodSubbed = isMemo ? React.memo(Subbed, () => true) : Subbed;`\r\n\r\n\r\n----\r\n\r\nBelow are my half-hearted attempts to look into this bug. \r\n\r\nIt looks like when the `compare` function is defined it makes React call `createFiberFromTypeAndProps`. However, if the `compare` function is not defined, it means React goes down the codepath below; \r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberBeginWork.js#L380-L403\r\n\r\nIn other words, the bug is likely caused somewhere in `updateSimpleMemoComponent` \r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17333",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17333/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17333/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17333/events",
        "html_url": "https://github.com/facebook/react/issues/17333",
        "id": 520575903,
        "node_id": "MDU6SXNzdWU1MjA1NzU5MDM=",
        "number": 17333,
        "title": "Can't back to initialed state with useState",
        "user": {
          "login": "hrahimi270",
          "id": 38007163,
          "node_id": "MDQ6VXNlcjM4MDA3MTYz",
          "avatar_url": "https://avatars1.githubusercontent.com/u/38007163?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hrahimi270",
          "html_url": "https://github.com/hrahimi270",
          "followers_url": "https://api.github.com/users/hrahimi270/followers",
          "following_url": "https://api.github.com/users/hrahimi270/following{/other_user}",
          "gists_url": "https://api.github.com/users/hrahimi270/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/hrahimi270/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/hrahimi270/subscriptions",
          "organizations_url": "https://api.github.com/users/hrahimi270/orgs",
          "repos_url": "https://api.github.com/users/hrahimi270/repos",
          "events_url": "https://api.github.com/users/hrahimi270/events{/privacy}",
          "received_events_url": "https://api.github.com/users/hrahimi270/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-10T09:26:26Z",
        "updated_at": "2019-11-11T13:17:30Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nIt's not a feature, but I'm not sure if it's a bug or mistake of mine.\r\n\r\n**What is the current behavior?**\r\n\r\nI initialed my state on useState with a number. but I can't back to that initialed state after doing some stuff in my code. for example, pass some conditions.\r\n\r\n**What is the expected behavior?**\r\n\r\nI want to be able to pass the initial value as the new state value, but it's not working.\r\nFor better understanding, I created a reproduce project in sandBox to check it out.\r\nhttps://codesandbox.io/s/serene-driscoll-qlqq3?fontsize=14\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17332",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17332/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17332/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17332/events",
        "html_url": "https://github.com/facebook/react/issues/17332",
        "id": 520572172,
        "node_id": "MDU6SXNzdWU1MjA1NzIxNzI=",
        "number": 17332,
        "title": "useTransition: After startTransition, it does not react to passed props changes",
        "user": {
          "login": "naruaway",
          "id": 2931577,
          "node_id": "MDQ6VXNlcjI5MzE1Nzc=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/2931577?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/naruaway",
          "html_url": "https://github.com/naruaway",
          "followers_url": "https://api.github.com/users/naruaway/followers",
          "following_url": "https://api.github.com/users/naruaway/following{/other_user}",
          "gists_url": "https://api.github.com/users/naruaway/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/naruaway/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/naruaway/subscriptions",
          "organizations_url": "https://api.github.com/users/naruaway/orgs",
          "repos_url": "https://api.github.com/users/naruaway/repos",
          "events_url": "https://api.github.com/users/naruaway/events{/privacy}",
          "received_events_url": "https://api.github.com/users/naruaway/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-10T08:47:41Z",
        "updated_at": "2019-11-11T20:56:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n**What is the current behavior?**\r\nAfter firing startTransition, \"current\" component stops reacting to passed props changes while reacting to local state changes.\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIn the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click \"CLICK ME\", it suddenly stops updating.\r\nhttps://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b\r\n\r\n**What is the expected behavior?**\r\nWhen passed props change, it should show the latest value of it where possible\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nExperimental build (0.0.0-experimental-5faf377df)"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17327",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17327/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17327/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17327/events",
        "html_url": "https://github.com/facebook/react/pull/17327",
        "id": 520487021,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5MDY5Nzcx",
        "number": 17327,
        "title": "Fix '__DEV__ is not defined' error in react-art fixture and change message to use 'yarn' over 'npm'",
        "user": {
          "login": "ScottMorse",
          "id": 38377787,
          "node_id": "MDQ6VXNlcjM4Mzc3Nzg3",
          "avatar_url": "https://avatars1.githubusercontent.com/u/38377787?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ScottMorse",
          "html_url": "https://github.com/ScottMorse",
          "followers_url": "https://api.github.com/users/ScottMorse/followers",
          "following_url": "https://api.github.com/users/ScottMorse/following{/other_user}",
          "gists_url": "https://api.github.com/users/ScottMorse/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ScottMorse/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ScottMorse/subscriptions",
          "organizations_url": "https://api.github.com/users/ScottMorse/orgs",
          "repos_url": "https://api.github.com/users/ScottMorse/repos",
          "events_url": "https://api.github.com/users/ScottMorse/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ScottMorse/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-09T17:34:38Z",
        "updated_at": "2019-11-09T18:09:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17327",
          "html_url": "https://github.com/facebook/react/pull/17327",
          "diff_url": "https://github.com/facebook/react/pull/17327.diff",
          "patch_url": "https://github.com/facebook/react/pull/17327.patch"
        },
        "body": "I am using yarn 1.19.1, node v10.16.3, and npm 6.13.0.\r\n\r\n* After running `yarn install` and `yarn build` and opening index.html, I received the error `__DEV__ is not defined` from the produced bundle.js file.  My change in the webpack config simply sets `__DEV__` to `true` to get rid of this error, allowing the successful rendering of the React logo animation after running the build.\r\n\r\n*  I changed the message in index.html to suggest running `yarn install` and `yarn build` over `npm install` and `npm run build`, for two reasons:\r\n    * The lockfile in the fixture is `yarn.lock`\r\n    * The `\"link:\"` protocol in package.json is supported by yarn, not npm, so `npm install` fails with `EUNSUPPORTEDPROTOCOL`.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17326",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17326/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17326/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17326/events",
        "html_url": "https://github.com/facebook/react/issues/17326",
        "id": 520482578,
        "node_id": "MDU6SXNzdWU1MjA0ODI1Nzg=",
        "number": 17326,
        "title": "irrelevant useState error when component is in UpperCase",
        "user": {
          "login": "deepakaggarwal7",
          "id": 19525740,
          "node_id": "MDQ6VXNlcjE5NTI1NzQw",
          "avatar_url": "https://avatars0.githubusercontent.com/u/19525740?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/deepakaggarwal7",
          "html_url": "https://github.com/deepakaggarwal7",
          "followers_url": "https://api.github.com/users/deepakaggarwal7/followers",
          "following_url": "https://api.github.com/users/deepakaggarwal7/following{/other_user}",
          "gists_url": "https://api.github.com/users/deepakaggarwal7/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/deepakaggarwal7/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/deepakaggarwal7/subscriptions",
          "organizations_url": "https://api.github.com/users/deepakaggarwal7/orgs",
          "repos_url": "https://api.github.com/users/deepakaggarwal7/repos",
          "events_url": "https://api.github.com/users/deepakaggarwal7/events{/privacy}",
          "received_events_url": "https://api.github.com/users/deepakaggarwal7/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-09T17:13:05Z",
        "updated_at": "2019-11-10T21:06:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "\r\n    \"eslint-plugin-react\": \"^7.16.0\",\r\n    \"eslint-plugin-react-hooks\": \"^2.2.0\",\r\n    \"eslint-plugin-react-native\": \"^3.8.1\",\r\n\r\n```\r\nconst HOC = component => props => {\r\n  const [currIndex, setCurrIndex] = useState('')\r\n  return <passedcomponent {...props} />\r\n}\r\n```\r\nThis throws an eslint error: \"React Hook \"useState\" cannot be called inside a callback.\"\r\nIf I rename component to begin with lowercase, it works. So there are two problems:\r\n1. Encrypted error message\r\n2. It should be reverse. Uppercase should be enforced instead of lowercase"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17325",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17325/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17325/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17325/events",
        "html_url": "https://github.com/facebook/react/issues/17325",
        "id": 520358648,
        "node_id": "MDU6SXNzdWU1MjAzNTg2NDg=",
        "number": 17325,
        "title": "Confusing behavior in Suspense",
        "user": {
          "login": "baldarian",
          "id": 40735399,
          "node_id": "MDQ6VXNlcjQwNzM1Mzk5",
          "avatar_url": "https://avatars3.githubusercontent.com/u/40735399?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/baldarian",
          "html_url": "https://github.com/baldarian",
          "followers_url": "https://api.github.com/users/baldarian/followers",
          "following_url": "https://api.github.com/users/baldarian/following{/other_user}",
          "gists_url": "https://api.github.com/users/baldarian/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/baldarian/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/baldarian/subscriptions",
          "organizations_url": "https://api.github.com/users/baldarian/orgs",
          "repos_url": "https://api.github.com/users/baldarian/repos",
          "events_url": "https://api.github.com/users/baldarian/events{/privacy}",
          "received_events_url": "https://api.github.com/users/baldarian/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-09T08:32:48Z",
        "updated_at": "2019-11-09T08:32:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I was just following the documentation of Concurrent mode and found a behavior that confused me.\r\n\r\nOpen this example and press `Open Profile` button.\r\nhttps://codesandbox.io/s/focused-snow-xbkvl\r\n\r\nThis way transition works as expected.\r\n- Pending (until `ProfileDetails` is ready)\r\n- Skeleton (displays a spinner for `ProfileTimeline`)\r\n- Complete (Everything is fetched)\r\n\r\nBut if you press `Refresh` button you'll something different.\r\n\r\nYou have to wait until all the components are ready in the tree (both `ProfileDetails` and `ProfileTimeline`). However, I'd expect it to behave the same way as when we clicked the `Open Profile` button.\r\n\r\nI know this is something I can fix with `useDeferredValue`, but I'm curious to know the reasons for such behavior."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17324",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17324/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17324/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17324/events",
        "html_url": "https://github.com/facebook/react/issues/17324",
        "id": 520344950,
        "node_id": "MDU6SXNzdWU1MjAzNDQ5NTA=",
        "number": 17324,
        "title": "Should I treat property's change as events in components?",
        "user": {
          "login": "zxh19890103",
          "id": 11514991,
          "node_id": "MDQ6VXNlcjExNTE0OTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/11514991?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zxh19890103",
          "html_url": "https://github.com/zxh19890103",
          "followers_url": "https://api.github.com/users/zxh19890103/followers",
          "following_url": "https://api.github.com/users/zxh19890103/following{/other_user}",
          "gists_url": "https://api.github.com/users/zxh19890103/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zxh19890103/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zxh19890103/subscriptions",
          "organizations_url": "https://api.github.com/users/zxh19890103/orgs",
          "repos_url": "https://api.github.com/users/zxh19890103/repos",
          "events_url": "https://api.github.com/users/zxh19890103/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zxh19890103/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-09T06:41:45Z",
        "updated_at": "2019-11-13T08:43:34Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "We know the hook `useEffect` can see a variable's changes and invoke the callback I give it after the variable changed. This ability allows me to use component's property to apply an effect defined in.\r\n\r\n```tsx\r\nconst List = (props) => {\r\n    useEffect(() => {\r\n        loaddata()\r\n    }, [ props.tick ])\r\n    return <div>It's a demo. :)</div>\r\n}\r\n\r\nconst Page = (props) => {\r\n\r\n    const [tick, setTick] =useState(0)\r\n\r\n    const handleRefresh = () => {\r\n        setTick(tick + 1)\r\n    }\r\n\r\n    return <div>\r\n        <a onClick={handleRefresh}>Refresh</a>\r\n        <List tick={tick}></List>\r\n    </div>\r\n}\r\n\r\n```\r\n\r\nIt works very well. But is it proper?  Is there any better alternatives?  How about event? "
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17322",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17322/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17322/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17322/events",
        "html_url": "https://github.com/facebook/react/pull/17322",
        "id": 520284841,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4OTAwNjY3",
        "number": 17322,
        "title": "Add useOpaqueReference Hook",
        "user": {
          "login": "lunaruan",
          "id": 2735514,
          "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lunaruan",
          "html_url": "https://github.com/lunaruan",
          "followers_url": "https://api.github.com/users/lunaruan/followers",
          "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
          "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
          "organizations_url": "https://api.github.com/users/lunaruan/orgs",
          "repos_url": "https://api.github.com/users/lunaruan/repos",
          "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lunaruan/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2019-11-08T23:38:48Z",
        "updated_at": "2020-01-10T19:45:10Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17322",
          "html_url": "https://github.com/facebook/react/pull/17322",
          "diff_url": "https://github.com/facebook/react/pull/17322.diff",
          "patch_url": "https://github.com/facebook/react/pull/17322.patch"
        },
        "body": "We currently use unique IDs in a lot of places. Examples are:\r\n\t* `<label for=\"ID\">`\r\n\t* `aria-labelledby`\r\n\r\nThis can cause some issues:\r\n\t1. If we server side render and then hydrate, this could cause an hydration ID mismatch\r\n\t2. If we server side render one part of the page and client side render another part of the page, the ID for one part could be different than the ID for another part even though they are supposed to be the same\r\n\t3. If we conditionally render something with an ID ,  this might also cause an ID mismatch because the ID will be different on other parts of the page\r\n\r\nThis PR creates a new hook `useUniqueId` that generates a different unique ID based on whether the hook was called on the server or client. If the hook is called during hydration, it generates an opaque object that will rerender the hook so that the IDs match."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17321",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17321/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17321/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17321/events",
        "html_url": "https://github.com/facebook/react/issues/17321",
        "id": 520251612,
        "node_id": "MDU6SXNzdWU1MjAyNTE2MTI=",
        "number": 17321,
        "title": "[Shallow Renderer] Plan forward",
        "user": {
          "login": "gaearon",
          "id": 810438,
          "node_id": "MDQ6VXNlcjgxMDQzOA==",
          "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gaearon",
          "html_url": "https://github.com/gaearon",
          "followers_url": "https://api.github.com/users/gaearon/followers",
          "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
          "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
          "organizations_url": "https://api.github.com/users/gaearon/orgs",
          "repos_url": "https://api.github.com/users/gaearon/repos",
          "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gaearon/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 204945357,
            "node_id": "MDU6TGFiZWwyMDQ5NDUzNTc=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
            "name": "Component: Shallow Renderer",
            "color": "eb6420",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          },
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 18,
        "created_at": "2019-11-08T21:54:52Z",
        "updated_at": "2020-01-08T19:08:16Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Let's discuss what to do with the shallow renderer here. As I mentioned in https://github.com/facebook/react/pull/16168#issuecomment-518344985, we aren't using it much and don't consider it a best practice. So we aren't going to be very good stewards of its API going forward.\r\n\r\nMy proposal was for Enzyme or folks interested in it to copy the code into another repo, and continue maintaining it there under a difference package name. It would make sense to Enzyme to start depending on that fork. We would then deprecate `react-test-renderer/shallow` in favor of the community-maintained fork.\r\n\r\nIf you'd like to volunteer to set up a repo, please let us know in this issue!\r\n\r\ncc @davidmarkclements regarding the proposed `react-shallow-renderer` package name."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17320",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17320/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17320/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17320/events",
        "html_url": "https://github.com/facebook/react/issues/17320",
        "id": 520234837,
        "node_id": "MDU6SXNzdWU1MjAyMzQ4Mzc=",
        "number": 17320,
        "title": "DevTools: \"filtering\" in addition to \"finding\"",
        "user": {
          "login": "ianstormtaylor",
          "id": 311752,
          "node_id": "MDQ6VXNlcjMxMTc1Mg==",
          "avatar_url": "https://avatars0.githubusercontent.com/u/311752?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ianstormtaylor",
          "html_url": "https://github.com/ianstormtaylor",
          "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
          "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
          "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
          "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
          "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
          "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-08T21:09:01Z",
        "updated_at": "2019-11-08T21:11:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now you can use the search box in DevTools as the equivalent to <kbd>Cmd-F</kbd> in a webpage, where it will jump between all the matches.\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen I'm trying to keep track of an individual component, what I really want is **filtering** instead of **finding**. By that I mean that I could type in for example \"Editor\" in the search box, and only components with `Editor` in their name (eg. `<Editor />`, `<MyEditor />`, etc.) would show up.\r\n\r\nIt would show the matching components, and have the option to expand them (or be pre-expanded), so it shows the components and their children.\r\n\r\nFor example, right now when loading the page, I see this:\r\n\r\n![image](https://user-images.githubusercontent.com/311752/68510359-54611600-0241-11ea-978e-59d5959031d2.png)\r\n\r\nWhich is a lot of extra stuff in the components tree that I don't care about. What I'd really love to see is this:\r\n\r\n![image](https://user-images.githubusercontent.com/311752/68510403-7195e480-0241-11ea-80b6-fed5de08b6b1.png)\r\n\r\nA specific child component that I'm currently interested in.\r\n\r\nIf the search box actually **filtered**, and if it was persistent across reloads, I could type \"Editor\" and then continually refresh the page and keep the specific component I care about visible.\r\n\r\n---\r\n\r\nAlternatively, maybe double-clicking that `<Editor>` component could show the whole tree underneath it in the detail view. Right now it just shows:\r\n\r\n![image](https://user-images.githubusercontent.com/311752/68510549-d7826c00-0241-11ea-9b4b-d9afd521869a.png)\r\n\r\nWhich is a bit of a lost opportunity.\r\n\r\nIf it showed the full tree of descendants, and if my \"selection\" was persistent across refreshes, this could solve the same use case in a different way.\r\n\r\n---\r\n\r\nSimilarly, if there was a way to specify _multiple_ filters, you could actually solve for the use case in https://github.com/facebook/react/issues/16478 by letting people add multiple filters to ease jumping between two components.\r\n\r\n---\r\n\r\nMaybe there's a better way that already solves this? I'd love to hear it!"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17318",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17318/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17318/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17318/events",
        "html_url": "https://github.com/facebook/react/issues/17318",
        "id": 520153018,
        "node_id": "MDU6SXNzdWU1MjAxNTMwMTg=",
        "number": 17318,
        "title": "useTransition - startTransition does not work on React.memo when is SimpleMemoComponent",
        "user": {
          "login": "salvoravida",
          "id": 20126259,
          "node_id": "MDQ6VXNlcjIwMTI2MjU5",
          "avatar_url": "https://avatars3.githubusercontent.com/u/20126259?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/salvoravida",
          "html_url": "https://github.com/salvoravida",
          "followers_url": "https://api.github.com/users/salvoravida/followers",
          "following_url": "https://api.github.com/users/salvoravida/following{/other_user}",
          "gists_url": "https://api.github.com/users/salvoravida/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/salvoravida/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/salvoravida/subscriptions",
          "organizations_url": "https://api.github.com/users/salvoravida/orgs",
          "repos_url": "https://api.github.com/users/salvoravida/repos",
          "events_url": "https://api.github.com/users/salvoravida/events{/privacy}",
          "received_events_url": "https://api.github.com/users/salvoravida/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-08T17:58:51Z",
        "updated_at": "2019-11-10T06:33:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nuseTransition - startTransition do not work on React.memo when is SimpleMemoComponent\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nstartTransition work with SimpleMemoComponent\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17314",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17314/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17314/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17314/events",
        "html_url": "https://github.com/facebook/react/issues/17314",
        "id": 519924494,
        "node_id": "MDU6SXNzdWU1MTk5MjQ0OTQ=",
        "number": 17314,
        "title": "Concurrent Mode and UseSubscription with RxJS \"lose\" updates ",
        "user": {
          "login": "samcooke98",
          "id": 787007,
          "node_id": "MDQ6VXNlcjc4NzAwNw==",
          "avatar_url": "https://avatars3.githubusercontent.com/u/787007?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/samcooke98",
          "html_url": "https://github.com/samcooke98",
          "followers_url": "https://api.github.com/users/samcooke98/followers",
          "following_url": "https://api.github.com/users/samcooke98/following{/other_user}",
          "gists_url": "https://api.github.com/users/samcooke98/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/samcooke98/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/samcooke98/subscriptions",
          "organizations_url": "https://api.github.com/users/samcooke98/orgs",
          "repos_url": "https://api.github.com/users/samcooke98/repos",
          "events_url": "https://api.github.com/users/samcooke98/events{/privacy}",
          "received_events_url": "https://api.github.com/users/samcooke98/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-11-08T10:07:06Z",
        "updated_at": "2019-11-23T06:57:16Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**Bug** - I think? \r\n\r\n**What is the current behavior?**\r\n\r\nIn Concurrent Mode, it appears that if a render is interrupted, if a component is using `useSubscription` the interrupted update is lost, which leads to \"tearing\" \r\n\r\nThe following codesandbox uses `useSubscription` with a RxJS `BehaviorSubject`, mimicking the example from here: https://www.npmjs.com/package/use-subscription#subscribing-to-observables \r\n\r\nIn the sandbox, clicking on the \"Increment Remote Count\" button triggers the RxJs `BehaviorSubject` to increment. This is done outside of the React event handler (ie: via `window.addEventLIstener` and so the updates are not batched together. The update to render the numbers is artificially slowed down. \r\n\r\nIf you click the \"Increment Remote Count\" button multiple times, the update works as expected. \r\n\r\nIf you interrupt the update, via clicking the \"increment local count\", only the last number will update. \r\n\r\n\r\n\r\nSo the Steps to reproduce look like: \r\n1. Click the \"Increment Remote Count\" button once\r\n2. Before the update is committed to the DOM, click the \"Increment Local Count\" update. \r\n3. The first update is \"lost\" ie; the output looks like: \r\n\r\n![image](https://user-images.githubusercontent.com/787007/68468141-27255f80-0263-11ea-9afb-07964e21d9d9.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jwenc.csb.app/ \\ https://codesandbox.io/s/usesubscriptionconcurrentlosingupdates-jwenc \r\n\r\n**What is the expected behavior?**\r\n\r\nI'd expect there to be a commit as the above screenshot, but I'd then expect there to be a follow-up commit that restores the consistency. In other words, I'd expect in the above picture for everything to be `1` \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`0.0.0-experimental-f6b8d31a7`\r\n\r\n\r\nI'd be willing to try to take a stab at writing a React test for this, if needed? \r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17313",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17313/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17313/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17313/events",
        "html_url": "https://github.com/facebook/react/issues/17313",
        "id": 519922793,
        "node_id": "MDU6SXNzdWU1MTk5MjI3OTM=",
        "number": 17313,
        "title": "Effect is not run (not even once) when state setter is called in function body",
        "user": {
          "login": "charshin",
          "id": 17873916,
          "node_id": "MDQ6VXNlcjE3ODczOTE2",
          "avatar_url": "https://avatars0.githubusercontent.com/u/17873916?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/charshin",
          "html_url": "https://github.com/charshin",
          "followers_url": "https://api.github.com/users/charshin/followers",
          "following_url": "https://api.github.com/users/charshin/following{/other_user}",
          "gists_url": "https://api.github.com/users/charshin/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/charshin/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/charshin/subscriptions",
          "organizations_url": "https://api.github.com/users/charshin/orgs",
          "repos_url": "https://api.github.com/users/charshin/repos",
          "events_url": "https://api.github.com/users/charshin/events{/privacy}",
          "received_events_url": "https://api.github.com/users/charshin/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-08T10:03:34Z",
        "updated_at": "2019-11-27T00:49:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Please help me understand how state setter works when called inside a function body\r\n\r\nI have the following code:\r\n\r\n![image](https://user-images.githubusercontent.com/17873916/68467878-f557cd00-0251-11ea-9479-5a3f6811fece.png)\r\n\r\n\r\nRunning this code will result in infinite re-rendering. According to the React documentation, it says `The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.`. I interpret this as the next render will be enqueued and run after the current render finishes, including running the effect. However, the effect is never run at all, not even once, and the chain of re-rendering is happening forever without any bailing out even the code is updating the same state again, i.e. 1\r\n\r\nPlease help me understand the internal working of this piece of code."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17312",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17312/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17312/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17312/events",
        "html_url": "https://github.com/facebook/react/issues/17312",
        "id": 519903264,
        "node_id": "MDU6SXNzdWU1MTk5MDMyNjQ=",
        "number": 17312,
        "title": "Regarding `react-hooks/exhaustive-deps` and object properties",
        "user": {
          "login": "tom-sherman",
          "id": 9257001,
          "node_id": "MDQ6VXNlcjkyNTcwMDE=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/9257001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tom-sherman",
          "html_url": "https://github.com/tom-sherman",
          "followers_url": "https://api.github.com/users/tom-sherman/followers",
          "following_url": "https://api.github.com/users/tom-sherman/following{/other_user}",
          "gists_url": "https://api.github.com/users/tom-sherman/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tom-sherman/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tom-sherman/subscriptions",
          "organizations_url": "https://api.github.com/users/tom-sherman/orgs",
          "repos_url": "https://api.github.com/users/tom-sherman/repos",
          "events_url": "https://api.github.com/users/tom-sherman/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tom-sherman/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-08T09:23:56Z",
        "updated_at": "2019-11-08T09:23:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "If I have a dependency array which passes in several properties of an object like the below example, the eslint rule `react-hooks/exhaustive-deps` shows a warning.\r\n\r\n```javascript\r\nlet options = { foo: 1, bar: 2 }\r\n\r\nReact.useEffect(fn, [ options.foo, options.bar ])\r\n```\r\n\r\nShows a message:\r\n\r\n```\r\nReact Hook React.useEffect has a missing dependency: 'options'. Either include it or remove the dependency array\r\n```\r\n\r\nI can replace the array with `[ options ]` which solves the problem but my question is, should I have to pass the full object when I only need to use some of it's properties?"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17309",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17309/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17309/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17309/events",
        "html_url": "https://github.com/facebook/react/pull/17309",
        "id": 519575086,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4MjkyODQz",
        "number": 17309,
        "title": "Pass suspense config to `startTransition` instead of `useTransition`",
        "user": {
          "login": "acdlite",
          "id": 3624098,
          "node_id": "MDQ6VXNlcjM2MjQwOTg=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/acdlite",
          "html_url": "https://github.com/acdlite",
          "followers_url": "https://api.github.com/users/acdlite/followers",
          "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
          "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
          "organizations_url": "https://api.github.com/users/acdlite/orgs",
          "repos_url": "https://api.github.com/users/acdlite/repos",
          "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
          "received_events_url": "https://api.github.com/users/acdlite/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2019-11-07T23:39:01Z",
        "updated_at": "2020-01-23T18:59:19Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17309",
          "html_url": "https://github.com/facebook/react/pull/17309",
          "diff_url": "https://github.com/facebook/react/pull/17309.diff",
          "patch_url": "https://github.com/facebook/react/pull/17309.patch"
        },
        "body": "This avoids the problem of having to bind the config object to `startTransition`, invalidating downstream memoizations.\r\n\r\nSee #17284 for more details.\r\n\r\nI'll need to codemod the existing callers in www, but that's not a blocker because www uses a userspace fork."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17306",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17306/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17306/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17306/events",
        "html_url": "https://github.com/facebook/react/issues/17306",
        "id": 519466158,
        "node_id": "MDU6SXNzdWU1MTk0NjYxNTg=",
        "number": 17306,
        "title": "img onLoad does not always fire in concurrent mode",
        "user": {
          "login": "peternycander",
          "id": 2242265,
          "node_id": "MDQ6VXNlcjIyNDIyNjU=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/2242265?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/peternycander",
          "html_url": "https://github.com/peternycander",
          "followers_url": "https://api.github.com/users/peternycander/followers",
          "following_url": "https://api.github.com/users/peternycander/following{/other_user}",
          "gists_url": "https://api.github.com/users/peternycander/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/peternycander/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/peternycander/subscriptions",
          "organizations_url": "https://api.github.com/users/peternycander/orgs",
          "repos_url": "https://api.github.com/users/peternycander/repos",
          "events_url": "https://api.github.com/users/peternycander/events{/privacy}",
          "received_events_url": "https://api.github.com/users/peternycander/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-07T19:29:09Z",
        "updated_at": "2019-11-07T23:34:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\n\r\n`<img onLoad={fn} />` does not always trigger `fn` when rendered using createRoot if it has siblings which are heavy to render (I think?).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/quiet-dawn-t1std\r\nYou might have to use the retry button a few times, but hopefully you should be able to see it. Don't disable cache while trying\r\n\r\n**What is the expected behavior?**\r\n\r\nonLoad always fires if img gets loaded.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n0.0.0-experimental-f6b8d31a7\r\nReproduced in chrome and firefox windows. Have not tried the codesandbox in mac, but the actual bug in our app occurred there first so I'd be surprised if it is OS specific.\r\n\r\nIt does not happen with regular \"sync\" mode."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17302",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17302/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17302/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17302/events",
        "html_url": "https://github.com/facebook/react/issues/17302",
        "id": 519326971,
        "node_id": "MDU6SXNzdWU1MTkzMjY5NzE=",
        "number": 17302,
        "title": "infinite recursion when using development cdnjs libraries in a tampermonkey user script",
        "user": {
          "login": "prozacgod",
          "id": 67706,
          "node_id": "MDQ6VXNlcjY3NzA2",
          "avatar_url": "https://avatars3.githubusercontent.com/u/67706?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/prozacgod",
          "html_url": "https://github.com/prozacgod",
          "followers_url": "https://api.github.com/users/prozacgod/followers",
          "following_url": "https://api.github.com/users/prozacgod/following{/other_user}",
          "gists_url": "https://api.github.com/users/prozacgod/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/prozacgod/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/prozacgod/subscriptions",
          "organizations_url": "https://api.github.com/users/prozacgod/orgs",
          "repos_url": "https://api.github.com/users/prozacgod/repos",
          "events_url": "https://api.github.com/users/prozacgod/events{/privacy}",
          "received_events_url": "https://api.github.com/users/prozacgod/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2019-11-07T15:11:33Z",
        "updated_at": "2019-11-08T19:54:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG\r\n\r\n**What is the current behavior?**\r\n\r\ndevelopment versions of the library > 6.4.2 - cause infinite recursion and crash/slowdowns when used in the tampermonkey environment when including the development libraries for react and react-dom. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou would need to install tampermonkey in Google Chrome, and then install this test user script\r\n\r\nhttps://gist.github.com/prozacgod/e1aad87eb8aa835ff257081cad7f9d88\r\n\r\nafter that launch a local server of any sort on port 8080, as the gist specifies localhost - hosting a bare minimum index.html\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should render Foo! on the blank page\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt seems to work fine with 16.4.x -> 16.5.x (I did not test lower) but many selected versions past 16.4 did cause the issue.  only the Development builds break.\r\n\r\nJust a guess, but mayber tampermonkey environment exposes a property that react did not use before, but does now - and it may be 'frozen' or 'proxied' in this environment.\r\n\r\nP,S, - I'm happy to supply feedback, and further test - I'm rather divided in my time, but I'll try to check back.\r\n\r\nI also understand if react doesn't want to support development libraries for tampermonkey environment."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17301",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17301/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17301/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17301/events",
        "html_url": "https://github.com/facebook/react/issues/17301",
        "id": 519149714,
        "node_id": "MDU6SXNzdWU1MTkxNDk3MTQ=",
        "number": 17301,
        "title": "react-test-renderer: the findByType method doesn't work with memo components",
        "user": {
          "login": "bensampaio",
          "id": 1700178,
          "node_id": "MDQ6VXNlcjE3MDAxNzg=",
          "avatar_url": "https://avatars3.githubusercontent.com/u/1700178?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bensampaio",
          "html_url": "https://github.com/bensampaio",
          "followers_url": "https://api.github.com/users/bensampaio/followers",
          "following_url": "https://api.github.com/users/bensampaio/following{/other_user}",
          "gists_url": "https://api.github.com/users/bensampaio/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bensampaio/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bensampaio/subscriptions",
          "organizations_url": "https://api.github.com/users/bensampaio/orgs",
          "repos_url": "https://api.github.com/users/bensampaio/repos",
          "events_url": "https://api.github.com/users/bensampaio/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bensampaio/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710400704,
            "node_id": "MDU6TGFiZWw3MTA0MDA3MDQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
            "name": "Component: Test Renderer",
            "color": "006b75",
            "default": false,
            "description": null
          },
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-11-07T09:39:23Z",
        "updated_at": "2019-12-19T14:50:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhenever I try something like:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent);\r\n```\r\n\r\nI get the following error: `No instances found with node type: \"undefined\"`. The only way I found for this to work was to reference the `type` property of memo components like this:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent.type);\r\n```\r\n\r\nI am fine with this solution but then flow complains that `type` doesn't exist so I find myself fixing this with `$FlowFixMe` all over the place.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that passing a memo component to `findByType` would work. Or that flow would recognize the `type` property of memo components. I think both should work, specially the first option.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNo, it never worked as far as I know.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17298",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17298/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17298/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17298/events",
        "html_url": "https://github.com/facebook/react/issues/17298",
        "id": 519047645,
        "node_id": "MDU6SXNzdWU1MTkwNDc2NDU=",
        "number": 17298,
        "title": "Hotkey for \"Select an element in the page to inspect it\" in Chrome extension",
        "user": {
          "login": "skoshy",
          "id": 369825,
          "node_id": "MDQ6VXNlcjM2OTgyNQ==",
          "avatar_url": "https://avatars1.githubusercontent.com/u/369825?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/skoshy",
          "html_url": "https://github.com/skoshy",
          "followers_url": "https://api.github.com/users/skoshy/followers",
          "following_url": "https://api.github.com/users/skoshy/following{/other_user}",
          "gists_url": "https://api.github.com/users/skoshy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/skoshy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/skoshy/subscriptions",
          "organizations_url": "https://api.github.com/users/skoshy/orgs",
          "repos_url": "https://api.github.com/users/skoshy/repos",
          "events_url": "https://api.github.com/users/skoshy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/skoshy/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 121709921,
            "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
            "name": "Type: Feature Request",
            "color": "c7def8",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-07T05:20:54Z",
        "updated_at": "2019-11-11T08:11:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.\r\n\r\nTo reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17296",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17296/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17296/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17296/events",
        "html_url": "https://github.com/facebook/react/issues/17296",
        "id": 518988866,
        "node_id": "MDU6SXNzdWU1MTg5ODg4NjY=",
        "number": 17296,
        "title": "Adding visible state to Suspense Fallback component to enhance CSS transitions.",
        "user": {
          "login": "jimmy-e",
          "id": 25621956,
          "node_id": "MDQ6VXNlcjI1NjIxOTU2",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25621956?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jimmy-e",
          "html_url": "https://github.com/jimmy-e",
          "followers_url": "https://api.github.com/users/jimmy-e/followers",
          "following_url": "https://api.github.com/users/jimmy-e/following{/other_user}",
          "gists_url": "https://api.github.com/users/jimmy-e/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jimmy-e/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jimmy-e/subscriptions",
          "organizations_url": "https://api.github.com/users/jimmy-e/orgs",
          "repos_url": "https://api.github.com/users/jimmy-e/repos",
          "events_url": "https://api.github.com/users/jimmy-e/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jimmy-e/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-07T01:41:48Z",
        "updated_at": "2019-12-03T00:25:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature I suppose.\r\n\r\n**What is the current behavior?**\r\nSuspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).\r\n\r\n**What is the expected behavior?**\r\nIt would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17284",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17284/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17284/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17284/events",
        "html_url": "https://github.com/facebook/react/pull/17284",
        "id": 518203349,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM3MTQwMzkx",
        "number": 17284,
        "title": "[Failing tests] startTransition invalidates downstream memoizations",
        "user": {
          "login": "acdlite",
          "id": 3624098,
          "node_id": "MDQ6VXNlcjM2MjQwOTg=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/acdlite",
          "html_url": "https://github.com/acdlite",
          "followers_url": "https://api.github.com/users/acdlite/followers",
          "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
          "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
          "organizations_url": "https://api.github.com/users/acdlite/orgs",
          "repos_url": "https://api.github.com/users/acdlite/repos",
          "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
          "received_events_url": "https://api.github.com/users/acdlite/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-06T02:51:25Z",
        "updated_at": "2020-01-08T19:01:51Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17284",
          "html_url": "https://github.com/facebook/react/pull/17284",
          "diff_url": "https://github.com/facebook/react/pull/17284.diff",
          "patch_url": "https://github.com/facebook/react/pull/17284.patch"
        },
        "body": "Like `dispatch` or `setState`, we should return the same `startTransition` function on every render. This prevents it from invalidating downstream memoizations, like `useCallback`.\r\n\r\nWe do use `useCallback` internally so that a new `startTransition` is only created when the config object changes. However, if you pass an object, this does nothing because the object different every time.\r\n\r\nPotential fixes:\r\n\r\n- Instead of detecting changes in the config object, compare the fields (`timeoutMs` et al) directly. This fixes the worst case (inline config object) but still means we'll occasionally re-create `startTransition` functions.\r\n- Track the current config object on an internal mutable field using an effect and read from that instead of binding a new method each time. This requires extra work in the commit phase, but combined with the previous option (comparing the fields instead of the entire config object) that should be rare.\r\n- Instead of passing the config object to the `useTransition` hook, pass it to the `startTransition` function. This avoids needing to bind the config object to the method. Slightly less ergonomic, however, we're planning to change the default config object so that it's not needed in most cases. So it's only in special cases that you'd actually use one. **This is the most likely option**."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17281",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17281/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17281/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17281/events",
        "html_url": "https://github.com/facebook/react/issues/17281",
        "id": 518001617,
        "node_id": "MDU6SXNzdWU1MTgwMDE2MTc=",
        "number": 17281,
        "title": "react-refresh: Dependent functions/data don't trigger refresh",
        "user": {
          "login": "Lokeh",
          "id": 2687140,
          "node_id": "MDQ6VXNlcjI2ODcxNDA=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/2687140?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Lokeh",
          "html_url": "https://github.com/Lokeh",
          "followers_url": "https://api.github.com/users/Lokeh/followers",
          "following_url": "https://api.github.com/users/Lokeh/following{/other_user}",
          "gists_url": "https://api.github.com/users/Lokeh/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Lokeh/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Lokeh/subscriptions",
          "organizations_url": "https://api.github.com/users/Lokeh/orgs",
          "repos_url": "https://api.github.com/users/Lokeh/repos",
          "events_url": "https://api.github.com/users/Lokeh/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Lokeh/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-11-05T20:13:09Z",
        "updated_at": "2019-11-10T19:34:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBoth/neither?\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently, react-refresh marks each component whose `type` and/or `signature` has changed as \"dirty\" and will either re-render or re-mount those components selectively.\r\n\r\nThe problem occurs when the dev tooling (webpack, parcel, etc.) loads a module that exports functions or data that are used inside of components, but aren't registered components themselves. For example, a utility function that concatenates a string:\r\n\r\n```js\r\nexport greet(name) {\r\n  return `Hello, ${name}!`;\r\n}\r\n```\r\n\r\nChanging the returned string to `Yo, ${name}!` would trigger this module to reload in the browser, but because components which depended on it don't reload, the old greeting will persist \r\nuntil the next render of each dependent component.\r\n\r\n(BTW in actuality, some tooling will reload immediate dependents of modules that are reloaded in order to get around similar problems. You can extend the dependency chain from two to three modules, where `a.js` depends on `b.js` depends on `c.js`, and you will get the same result when editing `c.js`)\r\n\r\nWhat this forces tooling to do is apply a heuristic to try and guess whether a given module should be refreshed, vs. completely restart the app in order to cause all components to re-mount and pick up any changes that wouldn't be picked up by react-refresh.\r\n\r\nThe problems with the heuristic approach is:\r\n- each dev tool needs to implement this logic, leading to more potential for bugs\r\n- it leads to a degradation of hot reloading capabilities based on what your module exports. not obvious at all on it's face and will lead people to twisting their code base to route around this\r\n- It's very unfriendly to compile-to-JS languages like ReasonML, ClojureScript, etc. which might have different default semantics for what is public / private, different conventions for naming components, etc. which make it difficult to detect whether a module is \"safe\" to refresh\r\n\r\n**What is the expected behavior?**\r\n\r\nThat components depended on newly loaded code will pick up those changes correctly, without losing state.\r\n\r\nA potential (maybe naive?) solution to this in react-refresh is, instead of only re-rendering the components marked as dirty (due to a different `type` being registered), to _re-render from the root_ while maintaining hooks state. If components' signatures have changed, then re-mount.\r\n\r\nI've read through and kind of grok most of the code in react-refresh, but I'm not sure how this would impact the way that the reconciler currently handles the HMR stuff. This is as much of a question, as it is a request: could this be a viable solution?\r\n\r\nI appreciate your time and energy in reading through this. I'm very excited about having first-class support for hot reloading in React, as it's been something that I've loved ever since seeing the first demo of it. I hope that this issue can help create a way to provide a consistently excellent dev experience across tools/platforms/languages!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.11"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17276",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17276/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17276/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17276/events",
        "html_url": "https://github.com/facebook/react/issues/17276",
        "id": 517644391,
        "node_id": "MDU6SXNzdWU1MTc2NDQzOTE=",
        "number": 17276,
        "title": "Unexpected value order with useTransition",
        "user": {
          "login": "denis-sokolov",
          "id": 113721,
          "node_id": "MDQ6VXNlcjExMzcyMQ==",
          "avatar_url": "https://avatars0.githubusercontent.com/u/113721?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/denis-sokolov",
          "html_url": "https://github.com/denis-sokolov",
          "followers_url": "https://api.github.com/users/denis-sokolov/followers",
          "following_url": "https://api.github.com/users/denis-sokolov/following{/other_user}",
          "gists_url": "https://api.github.com/users/denis-sokolov/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/denis-sokolov/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/denis-sokolov/subscriptions",
          "organizations_url": "https://api.github.com/users/denis-sokolov/orgs",
          "repos_url": "https://api.github.com/users/denis-sokolov/repos",
          "events_url": "https://api.github.com/users/denis-sokolov/events{/privacy}",
          "received_events_url": "https://api.github.com/users/denis-sokolov/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-05T09:17:35Z",
        "updated_at": "2019-11-06T03:22:11Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "The order of returned values in useTransition is opposite to what I consider to be an established pattern of `[value, function]`.\r\n\r\nCurrent: `const [startTransition, isPending] = useTransition()`.\r\nExpected: `const [isPending, startTransition] = useTransition()`.\r\nAlso fine: `const { startTransition, isPending } = useTransition()`.\r\n\r\n## Rationale\r\n\r\nThe order is in my opinion inconsistent with other hooks, built-in and community hooks, and this inconsistency is somewhat bothersome on the aesthetic level.\r\n\r\nUsers without tooling support (TypeScript et al) will see `Uncaught TypeError: startTransition is not a function` error whenever they get the order wrong.\r\n\r\nHaving this insonsistency risks reducing the strength of the convention in the community, making hooks less convenient to use overall.\r\n\r\n## Built-in hooks\r\n\r\n```js\r\nconst [state, setState] = useState();\r\nconst [state, dispatch] = useReducer();\r\nconst [startTransition, isPending] = useTransition();\r\n```\r\n\r\n## Community examples\r\n\r\nI have done a quick overview of positional returned values from hooks in the community. Hooks that use `[value, function]` pattern:\r\n\r\n[useImmer](https://github.com/immerjs/use-immer#useimmer), [streamich/react-use](https://github.com/streamich/react-use) ([useTimeout](https://github.com/streamich/react-use/blob/master/docs/useTimeout.md), [useSessionStorage](https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md), [useLockBodyScroll](https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md), [useLocalStorage](https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md), [useToggle](https://github.com/streamich/react-use/blob/master/docs/useToggle.md)) [bdbch/react-localstorage](https://github.com/bdbch/react-localstorage), [rehooks/local-storage](https://github.com/rehooks/local-storage), [react-rekindle/use-request](https://github.com/react-rekindle/use-request).\r\n\r\nHooks that use `[function, value]` pattern: none.\r\n\r\n## Is second value optional?\r\n\r\nOne could argue that, unlike with other examples, useTransition does not require the user to care about the `isPending` value. However, not using isPending creates a poor UX that the extisting React docs explicitly call out as a problem. We’re supposed to care about isPending. ([docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#adding-a-pending-indicator-adding-a-pending-indicator)).\r\n\r\nBesides, even with corrected value order, the user can still ignore isPending at a low cost of an explicit parameter skip (`const [, startTransition] = useTransition()`).\r\n\r\n## Can we return an object?\r\n\r\nuseState returns a list for convenient aliasing:\r\n\r\n```ts\r\nconst [color, setColor] = useState();\r\nconst [position, setPosition] = useState();\r\n```\r\n\r\nFor hooks that a single component uses only once the benefit is significantly reduced and the community often chooses to return an object with named values instead. This removes the problem of getting positioned values incorrectly and is more inline with the broader JavaScript ecosystem.\r\n\r\nI am speculating here, but it seems like a component will often only have one transition, like [the Button example in the docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#baking-transitions-into-the-design-system-baking-transitions-into-the-design-system). In that case it seems beneficial to return named values and reserve the positioned return values for cases where it really matters.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17273",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17273/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17273/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17273/events",
        "html_url": "https://github.com/facebook/react/issues/17273",
        "id": 517456991,
        "node_id": "MDU6SXNzdWU1MTc0NTY5OTE=",
        "number": 17273,
        "title": "useTransition's startTransition function can result in infinite loop when it's included as a useEffect dependency",
        "user": {
          "login": "kentcdodds",
          "id": 1500684,
          "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kentcdodds",
          "html_url": "https://github.com/kentcdodds",
          "followers_url": "https://api.github.com/users/kentcdodds/followers",
          "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
          "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
          "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
          "repos_url": "https://api.github.com/users/kentcdodds/repos",
          "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
          "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-04T23:12:15Z",
        "updated_at": "2019-11-06T02:51:55Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nI've narrowed it down to this:\r\n\r\nhttps://codesandbox.io/s/usetransition-useeffect-dependency-issue-2olmx\r\n\r\nBasically, what I *think* is important is:\r\n\r\n1. There's a state change resulting in the useEffect being called\r\n2. The useEffect callback starts a transition\r\n3. The transition callback sets state\r\n4. The set state results in a render which suspends\r\n\r\nIf these are all the case, then including the `startTransition` function in the dependency array will trigger an infinite loop. In the codesandbox I have a safety in place so your browser doesn't fall over.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `startTransition` function should be consistent between renders.\r\n\r\nI've observed that if you do not inline the config to `useTransition` then this is not a problem. I know that the docs recommend keeping this config consistent, but if this is desirable behavior, then maybe a warning about this particular situation in the docs would be useful. I expect that inlining the config will be pretty natural for people.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- react@0.0.0-experimental-f6b8d31a7\r\n- react-dom@0.0.0-experimental-f6b8d31a7"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17269",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17269/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17269/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17269/events",
        "html_url": "https://github.com/facebook/react/issues/17269",
        "id": 517363473,
        "node_id": "MDU6SXNzdWU1MTczNjM0NzM=",
        "number": 17269,
        "title": "useTransition always times out for full duration when function is passed to setState call",
        "user": {
          "login": "sami616",
          "id": 21065581,
          "node_id": "MDQ6VXNlcjIxMDY1NTgx",
          "avatar_url": "https://avatars3.githubusercontent.com/u/21065581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sami616",
          "html_url": "https://github.com/sami616",
          "followers_url": "https://api.github.com/users/sami616/followers",
          "following_url": "https://api.github.com/users/sami616/following{/other_user}",
          "gists_url": "https://api.github.com/users/sami616/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sami616/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sami616/subscriptions",
          "organizations_url": "https://api.github.com/users/sami616/orgs",
          "repos_url": "https://api.github.com/users/sami616/repos",
          "events_url": "https://api.github.com/users/sami616/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sami616/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-04T19:49:19Z",
        "updated_at": "2019-11-05T17:35:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Here is a codesandbox reproducing the issue. https://codesandbox.io/s/twilight-rain-ez11m\r\n\r\nI have two calls that setState, one in the `nextUser` function, and the other in the `prevUser` function.\r\n\r\nYou'll notice the only difference in how i'm setting state here is that i'm passing a function to the call in `prevState` and not in `nextState`. ie `setUser(v => fetchUser(v.id - 1))`\r\n\r\nThe `nextUser` call is working as expected, the `useTransition` timeout cancels if the request/s come back earlier. However, the `prevUser` call _always_ waits the entire duration, even if the requests resolve way earlier.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17267",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17267/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17267/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17267/events",
        "html_url": "https://github.com/facebook/react/pull/17267",
        "id": 517344370,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM2NDMxNTky",
        "number": 17267,
        "title": "Bailout without entering work loop for roots without work WIP",
        "user": {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-11-04T19:09:03Z",
        "updated_at": "2020-01-23T18:43:29Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17267",
          "html_url": "https://github.com/facebook/react/pull/17267",
          "diff_url": "https://github.com/facebook/react/pull/17267.diff",
          "patch_url": "https://github.com/facebook/react/pull/17267.patch"
        },
        "body": "Wraps up #16980\r\n\r\nThis addresses some edge cases where React currently does a no-op render and an empty/unnecessary commit.\r\n\r\n- [x] Bailout without entering work loop for roots without work (see #16980).\r\n- [x] Fix failing refs-test by wrapping updates with `act()`.\r\n- [x] See if any other tests trigger this early bailout behavior to better understand the causes.\r\n\r\nThe tests listed below trigger this new early bailout code. Everyone is in `performSyncWorkOnRoot` (none trigger the new code in `performConcurrentWorkOnRoot`). I spot checked a couple of them to see why the new code is being hit, to see if it looked problematic. Below is my findings:\r\n\r\n* `ReactES6Class-test` \"_renders only once when setting state in componentWillMount_\"\r\nThis one calls `performSyncWorkOnRoot()` twice. The first time is the callback passed from `legacyRenderSubtreeIntoContainer` to `unbatchedUpdates`. The second one (the one that bails out) is when `unbatchedUpdates` calls `flushSyncCallbackQueue`. This flush can be bailed out on.\r\n\r\n* `RaectDOMInput-test` \"_should control a value in reentrant events_\"\r\nThis one hits the new codepath when it dispatch a discrete \"input\" event. It looks like when our test calls `node.dispatchEvent()` for the \"input\" event, something is actually dispatching a series of events (input, input, blur, focus) which causes more updates to be scheduled with React than necessary. Now we bail out after the first.\r\n\r\n* `ReactCompositeComponent` \"_should warn about `setState` in render_\"\r\nThis one calls `setState` in render. Without this call, the bailout codepath doesn't get hit. Looks like the `setState` call leaves two things in the queue, so when the subsequent call to `flushSyncCallbackQueue` flushes them both, the second one is a no-op. The first thing gets added to the queue when the `setState` call is made. The second one by `commitRootImpl()` when it calls `ensureRootIsScheduled()` because `getNextRootExpirationTimeToWorkOn` returns a value that indicates there's more work.\r\n\r\n---\r\n\r\n* `ReactTestUtils.act()` > legacy mode › sync › flushes effects on every call\r\n* `ReactTestUtils.act()` > blocking mode › sync › flushes effects on every call\r\n* `ReactDOMInput` > should control a value in reentrant events\r\n* `ReactDOMInput` > should control values in reentrant events with different targets\r\n* `ReactDOMInput` > switching text inputs between numeric and string numbers › changes the number 2 to \"2.0\" using a change handler\r\n* `ReactDOMInput` > should control radio buttons if the tree updates during render\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › always sets the attribute when values change on text inputs\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › does not set the value attribute on number inputs if focused\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › sets the value attribute on number inputs on blur\r\n* `ReactDOMInput` > setting a controlled input to undefined › reverts the value attribute to the initial value\r\n* `ReactDOMInput` > setting a controlled input to undefined › preserves the value property\r\n* `ReactDOMInput` > setting a controlled input to null › reverts the value attribute to the initial value\r\n* `ReactDOMInput` > setting a controlled input to null › preserves the value property\r\n* `ReactUpdates` > should queue updates from during mount\r\n* `ReactUpdates` > uses correct base state for setState inside render phase\r\n* `ReactFresh` > can preserve state for forwardRef\r\n* `ReactFresh` > should not consider two forwardRefs around the same type to be equivalent\r\n* `ReactFresh` > can update forwardRef render function with its wrapper\r\n* `ReactFresh` > can update forwardRef render function in isolation\r\n* `ReactFresh` > can preserve state for simple memo\r\n* `ReactFresh` > can preserve state for memo with custom comparison\r\n* `ReactFresh` > can update simple memo function in isolation\r\n* `ReactFresh` > can preserve state for memo(forwardRef)\r\n* `ReactFresh` > can preserve state for lazy after resolution\r\n* `ReactFresh` > can patch lazy before resolution\r\n* `ReactFresh` > can patch lazy(forwardRef) before resolution\r\n* `ReactFresh` > can patch lazy(memo) before resolution\r\n* `ReactFresh` > can patch lazy(memo(forwardRef)) before resolution\r\n* `ReactFresh` > can patch both trees while suspense is displaying the fallback\r\n* `ReactFresh` > does not re-render ancestor components unnecessarily during a hot update\r\n* `ReactFresh` > does not leak state between components\r\n* `ReactFresh` > can force remount by changing signature\r\n* `ReactFresh` > can remount on signature change within a <root> wrapper\r\n* `ReactFresh` > can remount on signature change within a simple memo wrapper\r\n* `ReactFresh` > can remount on signature change within a lazy simple memo wrapper\r\n* `ReactFresh` > can remount on signature change within forwardRef\r\n* `ReactFresh` > can remount on signature change within forwardRef render function\r\n* `ReactFresh` > can remount on signature change within nested memo\r\n* `ReactFresh` > can remount on signature change within a memo wrapper and custom comparison\r\n* `ReactFresh` > can remount on signature change within a class\r\n* `ReactFresh` > can remount on signature change within a context provider\r\n* `ReactFresh` > can remount on signature change within a context consumer\r\n* `ReactFresh` > can remount on signature change within a suspense node\r\n* `ReactFresh` > can remount on signature change within a mode node\r\n* `ReactFresh` > can remount on signature change within a fragment node\r\n* `ReactFresh` > can remount on signature change within multiple siblings\r\n* `ReactFresh` > can remount on signature change within a profiler node\r\n* `ReactFresh` > resets hooks with dependencies on hot reload\r\n* `ReactFresh` > can hot reload offscreen components\r\n* `ReactFresh` > remounts classes on every edit\r\n* `ReactFresh` > remounts on conversion from class to function and back\r\n* `ReactFresh` > can update multiple roots independently\r\n* `ReactCompositeComponent` > should warn about `setState` in render\r\n* `ReactCompositeComponent` > should warn about `setState` in getChildContext\r\n* `ReactCompositeComponent` > this.state should be updated on setState callback inside componentWillMount\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with clean client render\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with client render on top of good server markup\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with client render on top of bad server markup\r\n* `SimpleEventPlugin` > interactive events, in concurrent mode › flushes pending interactive work before extracting event handler\r\n* `SimpleEventPlugin` > interactive events, in concurrent mode › flushes discrete updates in order\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled text input with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled text input with client render on top of good server markup\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled textarea with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled textarea with client render on top of good server markup\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled checkbox with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled checkbox with client render on top of good server markup\r\n* `ReactBrowserEventEmitter` > should not invoke newly inserted handlers while bubbling\r\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri if sync did not work first time\r\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri for secondary discrete events\r\n* `ReactES6Class` > renders only once when setting state in componentWillMount\r\n* `mixing responders with the heritage event system` > should properly flush sync when the event systems are mixed with unstable_flushDiscreteUpdates\r\n* `mixing responders with the heritage event system` > mixing the Input and Press repsonders › is async for non-input events\r\n* `ReactTypeScriptClass` > renders only once when setting state in componentWillMount\r\n* `ReactCoffeeScriptClass` > renders only once when setting state in componentWillMount\r\n* `ReactDOMHooks` > should not bail out when an update is scheduled from within an event handler in Concurrent Mode\r\n* `ReactIncrementalScheduling` > can opt-out of batching using unbatchedUpdates\r\n* `ReactCompositeComponent-state` > should support setting state\r\n* `ReactCompositeComponent-state` > should treat assigning to this.state inside cWM as a replaceState, with a warning\r\n* `ReactDOMComponentTree` > finds a controlled instance from node and gets its current fiber props"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17262",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17262/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17262/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17262/events",
        "html_url": "https://github.com/facebook/react/pull/17262",
        "id": 517236107,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM2MzQ0OTUw",
        "number": 17262,
        "title": "[react-dom] window.getComputedStyle for robust way to extract vendor prefixed event names. Closes: #17290",
        "user": {
          "login": "sulmanen",
          "id": 2340606,
          "node_id": "MDQ6VXNlcjIzNDA2MDY=",
          "avatar_url": "https://avatars3.githubusercontent.com/u/2340606?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sulmanen",
          "html_url": "https://github.com/sulmanen",
          "followers_url": "https://api.github.com/users/sulmanen/followers",
          "following_url": "https://api.github.com/users/sulmanen/following{/other_user}",
          "gists_url": "https://api.github.com/users/sulmanen/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sulmanen/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sulmanen/subscriptions",
          "organizations_url": "https://api.github.com/users/sulmanen/orgs",
          "repos_url": "https://api.github.com/users/sulmanen/repos",
          "events_url": "https://api.github.com/users/sulmanen/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sulmanen/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-04T15:43:41Z",
        "updated_at": "2019-11-06T17:01:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17262",
          "html_url": "https://github.com/facebook/react/pull/17262",
          "diff_url": "https://github.com/facebook/react/pull/17262.diff",
          "patch_url": "https://github.com/facebook/react/pull/17262.patch"
        },
        "body": "Fixes https://github.com/facebook/react/issues/17290\r\n\r\nThis type of behavior has been reported [before](https://github.com/facebook/react/issues/13170). The issue was closed due to being caused by a browser plugin apparently. That's not the case here (will also make that closed case work).\r\n\r\nIn getVendorPrefixedEventName, the use case is to find the correct vendor prefixed event name. According to the MDN doc above these should not be available on a freshly created element with no style attribute set. Somehow it seems to work, except in my use case.\r\n\r\nAccording to the [getComputedStyle](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle#Description) documentation, \"The element.style object should be used to set styles on that element, or inspect styles directly added to it from JavaScript manipulation or the global style attribute\"\r\n\r\nUsing getComputedStyle on the newly created element,  react-dom vendor prefixed event name sniffing runs, which makes sense given MDN docs as this is a readonly use case. After all react-dom is trying to go through all styles of the element, no just those set in it's style attribute.\r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17260",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17260/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17260/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17260/events",
        "html_url": "https://github.com/facebook/react/issues/17260",
        "id": 517222256,
        "node_id": "MDU6SXNzdWU1MTcyMjIyNTY=",
        "number": 17260,
        "title": "Static rendering strategy doesn't work on codesplitted routes",
        "user": {
          "login": "carlesnunez",
          "id": 5639972,
          "node_id": "MDQ6VXNlcjU2Mzk5NzI=",
          "avatar_url": "https://avatars3.githubusercontent.com/u/5639972?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/carlesnunez",
          "html_url": "https://github.com/carlesnunez",
          "followers_url": "https://api.github.com/users/carlesnunez/followers",
          "following_url": "https://api.github.com/users/carlesnunez/following{/other_user}",
          "gists_url": "https://api.github.com/users/carlesnunez/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/carlesnunez/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/carlesnunez/subscriptions",
          "organizations_url": "https://api.github.com/users/carlesnunez/orgs",
          "repos_url": "https://api.github.com/users/carlesnunez/repos",
          "events_url": "https://api.github.com/users/carlesnunez/events{/privacy}",
          "received_events_url": "https://api.github.com/users/carlesnunez/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710332294,
            "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
            "name": "Component: Server Rendering",
            "color": "d4c5f9",
            "default": false,
            "description": null
          },
          {
            "id": 620368407,
            "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
            "name": "Resolution: Needs More Information",
            "color": "fffde7",
            "default": false,
            "description": null
          },
          {
            "id": 40929155,
            "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
            "name": "Type: Question",
            "color": "cc317c",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-04T15:21:26Z",
        "updated_at": "2019-11-06T00:49:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component. \r\n\r\n**What is the expected behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML\r\n\r\n**What is the current behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.\r\n\r\nI've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.\r\n\r\nWhat I'm doing wrong?\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17258",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17258/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17258/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17258/events",
        "html_url": "https://github.com/facebook/react/issues/17258",
        "id": 517073779,
        "node_id": "MDU6SXNzdWU1MTcwNzM3Nzk=",
        "number": 17258,
        "title": "Bug - react onClick() doesn't work well on WKWebview - iOS 13",
        "user": {
          "login": "Aarbel",
          "id": 25119847,
          "node_id": "MDQ6VXNlcjI1MTE5ODQ3",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25119847?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Aarbel",
          "html_url": "https://github.com/Aarbel",
          "followers_url": "https://api.github.com/users/Aarbel/followers",
          "following_url": "https://api.github.com/users/Aarbel/following{/other_user}",
          "gists_url": "https://api.github.com/users/Aarbel/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Aarbel/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Aarbel/subscriptions",
          "organizations_url": "https://api.github.com/users/Aarbel/orgs",
          "repos_url": "https://api.github.com/users/Aarbel/repos",
          "events_url": "https://api.github.com/users/Aarbel/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Aarbel/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 15,
        "created_at": "2019-11-04T10:50:47Z",
        "updated_at": "2020-01-10T05:38:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "# Context\r\nApple just realeased new version of WKWebview with iOS 13.\r\nOn my mobile app i don't use react native but pure React / HTML inside a Native Webview.\r\n\r\n# Problem \r\nTouch events don't work well on onClick() since the update. \r\nThe user has to touch very fast to trigger the onClick(). If the use touches more than 200 / 300 ms it doesn't trigger the onClick()\r\n\r\nDo you know a way to fix it ?\r\n\r\nThanks a lot for your help !\r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17256",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17256/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17256/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17256/events",
        "html_url": "https://github.com/facebook/react/issues/17256",
        "id": 516904161,
        "node_id": "MDU6SXNzdWU1MTY5MDQxNjE=",
        "number": 17256,
        "title": "\"NotFoundError: Failed to execute 'removeChild' on 'Node'\" when using React.Fragment <></> with Chrome extension which does not modify the DOM tree below the root div of the React app",
        "user": {
          "login": "tonix-tuft",
          "id": 10134421,
          "node_id": "MDQ6VXNlcjEwMTM0NDIx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tonix-tuft",
          "html_url": "https://github.com/tonix-tuft",
          "followers_url": "https://api.github.com/users/tonix-tuft/followers",
          "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
          "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
          "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
          "repos_url": "https://api.github.com/users/tonix-tuft/repos",
          "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2019-11-03T23:06:16Z",
        "updated_at": "2020-01-21T14:03:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This has already been discussed before (#14740), but there wasn't a reproducing example for this kind of issue and I think that my use case is also a bit different.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI believe this can be considered a bug.\r\n\r\n**What is the current behavior?**\r\nIn order to reproduce this issue using Chrome, you will need to install the following Chrome extension called TransOver:\r\n\r\n![Screen Shot 2019-11-03 at 22 51 33](https://user-images.githubusercontent.com/10134421/68092541-86165d80-fe8c-11e9-9f39-e566f770fcb2.png)\r\n\r\nhttps://chrome.google.com/webstore/detail/transover/aggiiclaiamajehmlfpkjmlbadmkledi?hl=en\r\n\r\nI use it to translate text on hover.\r\nThe only thing that this extension does is appending a tooltip with the translated text to the `body` HTML element when you hover an element with text (it doesn't seem it appends stuff below the React's root `div` element).\r\n\r\nI have created two code sandboxes to show you better and explain the problem.\r\nIt is a minimal example of a movie app like the one Dan showed at JSConf 2018 in Iceland, though not as beautiful as his and without all that cool Suspense stuff, but at least it uses hooks :) .\r\n\r\n- https://codesandbox.io/s/heuristic-lake-exxvu\r\n\r\n- https://codesandbox.io/s/magical-grass-016kc\r\n\r\nThe two code sandboxes are essentially identical, the only difference is that the first one (`heuristic-lake-exxvu`) uses a `div` element for `MovieApp`, whereas the second (`magical-grass-016kc`) uses a `React.Fragment` (`<></>`) component:\r\n\r\n`heuristic-lake-exxvu`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <div> // <======================= Uses a `div`\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\n`magical-grass-016kc`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <> // <======================= Uses a fragment\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\nNow, if you open `heuristic-lake-exxvu` and click on the `Show movie info` button of any movie in the list, you will see the `Loading...` text before the promise with the data of the movie resolves, and the `Movie` component is rendered.\r\n\r\nBefore the promise resolves, try hovering on the `Loading...` text with the `TransOver` extension enabled, you should see:\r\n\r\n![Screen Shot 2019-11-03 at 23 26 48](https://user-images.githubusercontent.com/10134421/68093013-764d4800-fe91-11e9-8b64-2dbdade0a500.png)\r\n\r\nThe world makes sense here, no errors, no warnings, everything works.\r\n\r\nNow try to do the same thing on `magical-grass-016kc`, as soon as you hover `Loading...`, you will see the `NotFoundError: Failed to execute 'removeChild' on 'Node'` error logged in the browser's console:\r\n\r\n![Screen Shot 2019-11-03 at 23 40 00](https://user-images.githubusercontent.com/10134421/68093177-49019980-fe93-11e9-9f9b-13f91a12e996.png)\r\n\r\n![Screen Shot 2019-11-03 at 23 40 52](https://user-images.githubusercontent.com/10134421/68093194-6df60c80-fe93-11e9-910f-ae748bc9fb91.png)\r\n\r\nHere is a streamable video showing this same error:\r\n\r\nhttps://streamable.com/4gxua\r\n\r\n**What is the expected behavior?**\r\nIn `heuristic-lake-exxvu` (uses a `div` instead of React fragment), everything worked.\r\nThe TransOver extension appends to `body` and does not modify the React's root `div` neither does it append stuff below it, so I would expect the code in the React fragment example (`magical-grass-016kc`) to behave the same and work as in `heuristic-lake-exxvu`.\r\n\r\nChrome is plenty of useful extensions like this one and they should not really interfere with React, I think that users using React applications may also install other extensions which modify the DOM which they find useful.\r\nIf an extension appends to body like TransOver does, I wouldn't expect React to have problems with it and cause undesirable effects and application errors like this one.\r\n\r\nThis is my opinion, I would be very glad to hear what you think about it, and if you think I have spotted a bug of React fragments (I think it's a bug because, again, it works when using a `div` in `heuristic-lake-exxvu`).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nBrowser: Chrome\r\nReact v16.11.0\r\nReact DOM v16.11.0\r\n\r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17254",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17254/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17254/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17254/events",
        "html_url": "https://github.com/facebook/react/issues/17254",
        "id": 516563176,
        "node_id": "MDU6SXNzdWU1MTY1NjMxNzY=",
        "number": 17254,
        "title": "React DevTools w/ Electron: Profiler \"Reload and start profiling\" doesn't work due to XMLHttpRequest 'null' origin",
        "user": {
          "login": "joltmode",
          "id": 1030080,
          "node_id": "MDQ6VXNlcjEwMzAwODA=",
          "avatar_url": "https://avatars3.githubusercontent.com/u/1030080?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/joltmode",
          "html_url": "https://github.com/joltmode",
          "followers_url": "https://api.github.com/users/joltmode/followers",
          "following_url": "https://api.github.com/users/joltmode/following{/other_user}",
          "gists_url": "https://api.github.com/users/joltmode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/joltmode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/joltmode/subscriptions",
          "organizations_url": "https://api.github.com/users/joltmode/orgs",
          "repos_url": "https://api.github.com/users/joltmode/repos",
          "events_url": "https://api.github.com/users/joltmode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/joltmode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-02T10:44:08Z",
        "updated_at": "2019-11-02T15:45:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nAn error gets thrown when using DevTools Profiler on **Electron** with the \"**Reload and start profiling**\" feature that leaves Profiler in an unexpected state - the profiling session does not end.\r\n\r\nI initially opened [the issue over at Electron](https://github.com/electron/electron/issues/20915), but [got asked to get your opinion first](https://github.com/electron/electron/issues/20915#issuecomment-548996868).\r\n\r\n**What is the current behavior?**\r\n\r\n- Open React DevTools Profiler in **Electron**\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\" - does not work\r\n- Because there are errors in console (actually thrown immediately after reload, don't have to do any extra actions):\r\n  ```\r\n  Access to XMLHttpRequest at 'chrome-extension://react-developer-tools/build/renderer.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, https.\r\n  ```\r\n  ```\r\n  Uncaught DOMException: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'chrome-extension://react-developer-tools/build/renderer.js'.\r\n  ```\r\n\r\n![Errors after triggering profiler](https://user-images.githubusercontent.com/1030080/68028419-81e81580-fcbd-11e9-85ae-58b8437df6d8.png)\r\n\r\n![The respective code in React DevTools](https://user-images.githubusercontent.com/1030080/68028680-1ce0ef80-fcbe-11e9-9b63-4fa0494af0dd.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou'll have to use [Electron Fiddle](https://github.com/electron/fiddle) for this one with this gist: https://gist.github.com/joltmode/82574cab4970def210dac0c68d4c34b8\r\n\r\n**What is the expected behavior?**\r\n\r\n- Open React DevTools Profiler\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\"\r\n- See profiler results\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- Latest version of DevTools\r\n- Electron 6.1.2"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17246",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17246/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17246/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17246/events",
        "html_url": "https://github.com/facebook/react/issues/17246",
        "id": 515861804,
        "node_id": "MDU6SXNzdWU1MTU4NjE4MDQ=",
        "number": 17246,
        "title": "It's not possible to access the shadowRoot of a Web Component when using React Suspense/Lazy",
        "user": {
          "login": "CristianDDias",
          "id": 30023600,
          "node_id": "MDQ6VXNlcjMwMDIzNjAw",
          "avatar_url": "https://avatars3.githubusercontent.com/u/30023600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/CristianDDias",
          "html_url": "https://github.com/CristianDDias",
          "followers_url": "https://api.github.com/users/CristianDDias/followers",
          "following_url": "https://api.github.com/users/CristianDDias/following{/other_user}",
          "gists_url": "https://api.github.com/users/CristianDDias/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/CristianDDias/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/CristianDDias/subscriptions",
          "organizations_url": "https://api.github.com/users/CristianDDias/orgs",
          "repos_url": "https://api.github.com/users/CristianDDias/repos",
          "events_url": "https://api.github.com/users/CristianDDias/events{/privacy}",
          "received_events_url": "https://api.github.com/users/CristianDDias/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-01T01:44:28Z",
        "updated_at": "2019-11-01T09:09:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen using Web Components and React Suspense/Lazy, it's not possible to access the `shadowRoot` in the `useEffect` because the `shadowRoot` still haven't loaded its child elements.\r\n\r\n**Steps to reproduce the problem.**\r\n[CodeSandbox](https://codesandbox.io/s/thirsty-poitras-sq22m)\r\nIn the `TabComp` component, if I change the line `const { t } = useTranslation(\"\", { useSuspense: false });` for `const { t } = useTranslation();` an error occurs. The error occurs because the `shadowRoot` still haven't loaded its child elements and it's trying to access a child element.\r\n\r\nI also commented about this problem in an [issue](https://github.com/i18next/react-i18next/issues/817#issuecomment-548629946) of the `react-i18next` library, but I'm not sure if this problem is related to their library.\r\n\r\n**What is the expected behavior?**\r\nThe `shadowRoot` property of a Web Component can be accessed in the `useEffect` even if the component is using React Suspense/Lazy.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.4\r\nBrowser Chrome 77\r\nI haven't tried this in previous versions of React."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17245",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17245/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17245/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17245/events",
        "html_url": "https://github.com/facebook/react/pull/17245",
        "id": 515825659,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM1MjE4MDYw",
        "number": 17245,
        "title": "Add preload() to React.lazy",
        "user": {
          "login": "mjackson",
          "id": 92839,
          "node_id": "MDQ6VXNlcjkyODM5",
          "avatar_url": "https://avatars0.githubusercontent.com/u/92839?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mjackson",
          "html_url": "https://github.com/mjackson",
          "followers_url": "https://api.github.com/users/mjackson/followers",
          "following_url": "https://api.github.com/users/mjackson/following{/other_user}",
          "gists_url": "https://api.github.com/users/mjackson/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mjackson/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mjackson/subscriptions",
          "organizations_url": "https://api.github.com/users/mjackson/orgs",
          "repos_url": "https://api.github.com/users/mjackson/repos",
          "events_url": "https://api.github.com/users/mjackson/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mjackson/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 8,
        "created_at": "2019-10-31T23:55:20Z",
        "updated_at": "2019-11-04T17:34:16Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17245",
          "html_url": "https://github.com/facebook/react/pull/17245",
          "diff_url": "https://github.com/facebook/react/pull/17245.diff",
          "patch_url": "https://github.com/facebook/react/pull/17245.patch"
        },
        "body": "This allows lazy components to be initialized ahead of render time. My use case is for preloading lazy components in React Router ahead of when they are needed. We could do this in a number of scenarios including when we first determine a component is going to be part of the render tree or when anticipating it will be.\r\n\r\nJust submitting this draft to get feedback from the core team. If it's something you'd like, I can go ahead and write a test.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17239",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17239/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17239/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17239/events",
        "html_url": "https://github.com/facebook/react/issues/17239",
        "id": 515529503,
        "node_id": "MDU6SXNzdWU1MTU1Mjk1MDM=",
        "number": 17239,
        "title": "Blink with useTransition",
        "user": {
          "login": "gregberge",
          "id": 266302,
          "node_id": "MDQ6VXNlcjI2NjMwMg==",
          "avatar_url": "https://avatars2.githubusercontent.com/u/266302?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gregberge",
          "html_url": "https://github.com/gregberge",
          "followers_url": "https://api.github.com/users/gregberge/followers",
          "following_url": "https://api.github.com/users/gregberge/following{/other_user}",
          "gists_url": "https://api.github.com/users/gregberge/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gregberge/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gregberge/subscriptions",
          "organizations_url": "https://api.github.com/users/gregberge/orgs",
          "repos_url": "https://api.github.com/users/gregberge/repos",
          "events_url": "https://api.github.com/users/gregberge/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gregberge/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          },
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-31T15:33:52Z",
        "updated_at": "2019-10-31T17:05:17Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Bug**\r\n\r\n**What is the current behavior?**\r\n\r\nAs discussed with @gaearon in this thread: https://twitter.com/dan_abramov/status/1189923059031068672\r\n\r\nWhen the `useTransition` is fast, it results to a small blink for the user. You can reproduce it in this example :\r\n\r\n- Choose \"Concurrent Mode\"\r\n- Click \"Next\" in \"fretch-mode: legacy-mode\" \r\n\r\nhttps://codesandbox.io/s/fretch-example-r6t8g\r\n\r\nA simpler example can be provided but I don't have time right now, I just want to track the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behaviour would be to avoid the blink if it is less than \"100ms\" (or another arbitrary delay).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe experimental version, see the example.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17238",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17238/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17238/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17238/events",
        "html_url": "https://github.com/facebook/react/issues/17238",
        "id": 515489785,
        "node_id": "MDU6SXNzdWU1MTU0ODk3ODU=",
        "number": 17238,
        "title": "Experimental: Unknown unit of work tag (18).",
        "user": {
          "login": "CodeWitchBella",
          "id": 43038212,
          "node_id": "MDQ6VXNlcjQzMDM4MjEy",
          "avatar_url": "https://avatars2.githubusercontent.com/u/43038212?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/CodeWitchBella",
          "html_url": "https://github.com/CodeWitchBella",
          "followers_url": "https://api.github.com/users/CodeWitchBella/followers",
          "following_url": "https://api.github.com/users/CodeWitchBella/following{/other_user}",
          "gists_url": "https://api.github.com/users/CodeWitchBella/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/CodeWitchBella/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/CodeWitchBella/subscriptions",
          "organizations_url": "https://api.github.com/users/CodeWitchBella/orgs",
          "repos_url": "https://api.github.com/users/CodeWitchBella/repos",
          "events_url": "https://api.github.com/users/CodeWitchBella/events{/privacy}",
          "received_events_url": "https://api.github.com/users/CodeWitchBella/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-31T14:44:12Z",
        "updated_at": "2019-10-31T14:44:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nReact@experimental sometimes issues following error on page load.\r\n```\r\nError: \"Unknown unit of work tag (18). This error is likely caused by a bug in React. Please file an issue.\"\r\n    completeWork http://localhost:3000/dist/index.js line 14463 > eval:21603\r\n    completeUnitOfWork http://localhost:3000/dist/index.js line 14463 > eval:24709\r\n    performUnitOfWork http://localhost:3000/dist/index.js line 14463 > eval:24685\r\n    workLoopSync http://localhost:3000/dist/index.js line 14463 > eval:24650\r\n    performSyncWorkOnRoot http://localhost:3000/dist/index.js line 14463 > eval:24249\r\n    flushSyncCallbackQueueImpl http://localhost:3000/dist/index.js line 14463 > eval:12192\r\n    unstable_runWithPriority http://localhost:3000/dist/index.js line 42728 > eval:818\r\n    runWithPriority$2 http://localhost:3000/dist/index.js line 14463 > eval:12142\r\n    flushSyncCallbackQueueImpl http://localhost:3000/dist/index.js line 14463 > eval:12187\r\n    workLoop http://localhost:3000/dist/index.js line 42728 > eval:762\r\n    flushWork http://localhost:3000/dist/index.js line 42728 > eval:717\r\n    performWorkUntilDeadline http://localhost:3000/dist/index.js line 42728 > eval:219\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI have no idea what triggers this error and my codebase is not exactly small and because it appears only sometimes (maybe 10%) it is really hard to track down.\r\n\r\n**What is the expected behavior?**\r\nNo error\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nLatest firefox and chromium on fedora 31. React@experimental and it started (I think) after I started experimenting with concurrent mode and suspense so it did not appear on older version, but is also not applicable to it.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17229",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17229/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17229/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17229/events",
        "html_url": "https://github.com/facebook/react/issues/17229",
        "id": 514995254,
        "node_id": "MDU6SXNzdWU1MTQ5OTUyNTQ=",
        "number": 17229,
        "title": "onMouseEnter is fired on disabled buttons",
        "user": {
          "login": "diegohaz",
          "id": 3068563,
          "node_id": "MDQ6VXNlcjMwNjg1NjM=",
          "avatar_url": "https://avatars3.githubusercontent.com/u/3068563?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/diegohaz",
          "html_url": "https://github.com/diegohaz",
          "followers_url": "https://api.github.com/users/diegohaz/followers",
          "following_url": "https://api.github.com/users/diegohaz/following{/other_user}",
          "gists_url": "https://api.github.com/users/diegohaz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/diegohaz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/diegohaz/subscriptions",
          "organizations_url": "https://api.github.com/users/diegohaz/orgs",
          "repos_url": "https://api.github.com/users/diegohaz/repos",
          "events_url": "https://api.github.com/users/diegohaz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/diegohaz/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 127893911,
            "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
            "name": "Component: DOM",
            "color": "fef2c0",
            "default": false,
            "description": null
          },
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-10-30T21:31:43Z",
        "updated_at": "2019-12-29T03:33:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n`onMouseEnter` is fired on `disabled` buttons.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/react-onmouseenter-on-disabled-buttons-fskwd\r\n\r\n**What is the expected behavior?**\r\n\r\n`onMouseEnter` shouldn't be triggered on `disabled` buttons.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.11.0 (not sure when it started to happen)\r\nChrome/MacOS\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17217",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17217/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17217/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17217/events",
        "html_url": "https://github.com/facebook/react/pull/17217",
        "id": 514358633,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzMzOTkwNzg4",
        "number": 17217,
        "title": "Move resetAfterCommit until after we updated the root's current tree",
        "user": {
          "login": "sebmarkbage",
          "id": 63648,
          "node_id": "MDQ6VXNlcjYzNjQ4",
          "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sebmarkbage",
          "html_url": "https://github.com/sebmarkbage",
          "followers_url": "https://api.github.com/users/sebmarkbage/followers",
          "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
          "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
          "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
          "repos_url": "https://api.github.com/users/sebmarkbage/repos",
          "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-10-30T02:44:02Z",
        "updated_at": "2020-01-08T19:01:50Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17217",
          "html_url": "https://github.com/facebook/react/pull/17217",
          "diff_url": "https://github.com/facebook/react/pull/17217.diff",
          "patch_url": "https://github.com/facebook/react/pull/17217.patch"
        },
        "body": "Currently we disable all user space events in resetAfterCommit so, if you just use React events, it doesn't really matter where we call this.\r\n\r\nHowever, setting focus and selection can be observable e.g. using native browser events. If you setState or something in those events, they should probably behave as if you're already on the new tree.\r\n\r\nSimilarly if we do end up triggering blur/focus events simulated, then those should see the updated tree.\r\n\r\nInterestingly, this would fire before life-cycles which is confusing. Although that also happens if you set focus manually on the DOM in a life-cycle too. Triggering a blur after life-cycles could work but needs to take into account that focus can change possibly several times in the life-cycles too.\r\n\r\nRelated to https://github.com/facebook/react/pull/17214"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17208",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17208/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17208/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17208/events",
        "html_url": "https://github.com/facebook/react/issues/17208",
        "id": 513948819,
        "node_id": "MDU6SXNzdWU1MTM5NDg4MTk=",
        "number": 17208,
        "title": "Devtools tabs should not appear in chrome-extension pages when using react-devtools as an entry point",
        "user": {
          "login": "nickmccurdy",
          "id": 927220,
          "node_id": "MDQ6VXNlcjkyNzIyMA==",
          "avatar_url": "https://avatars0.githubusercontent.com/u/927220?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/nickmccurdy",
          "html_url": "https://github.com/nickmccurdy",
          "followers_url": "https://api.github.com/users/nickmccurdy/followers",
          "following_url": "https://api.github.com/users/nickmccurdy/following{/other_user}",
          "gists_url": "https://api.github.com/users/nickmccurdy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/nickmccurdy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/nickmccurdy/subscriptions",
          "organizations_url": "https://api.github.com/users/nickmccurdy/orgs",
          "repos_url": "https://api.github.com/users/nickmccurdy/repos",
          "events_url": "https://api.github.com/users/nickmccurdy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/nickmccurdy/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
          "login": "threepointone",
          "id": 18808,
          "node_id": "MDQ6VXNlcjE4ODA4",
          "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/threepointone",
          "html_url": "https://github.com/threepointone",
          "followers_url": "https://api.github.com/users/threepointone/followers",
          "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
          "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
          "organizations_url": "https://api.github.com/users/threepointone/orgs",
          "repos_url": "https://api.github.com/users/threepointone/repos",
          "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
          "received_events_url": "https://api.github.com/users/threepointone/received_events",
          "type": "User",
          "site_admin": false
        },
        "assignees": [
          {
            "login": "threepointone",
            "id": 18808,
            "node_id": "MDQ6VXNlcjE4ODA4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/threepointone",
            "html_url": "https://github.com/threepointone",
            "followers_url": "https://api.github.com/users/threepointone/followers",
            "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
            "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
            "organizations_url": "https://api.github.com/users/threepointone/orgs",
            "repos_url": "https://api.github.com/users/threepointone/repos",
            "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/threepointone/received_events",
            "type": "User",
            "site_admin": false
          }
        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2019-10-29T14:13:36Z",
        "updated_at": "2020-01-13T21:57:45Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe React devtools tabs in Chrome devtools can be displayed in extension pages, even though modifying extensions in other extensions is not supported by Chrome, and React devtools are therefore broken.\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774646-21927300-fa34-11e9-99b5-ea3c62a99e0d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774697-38d16080-fa34-11e9-8ea6-fddb21c7bb14.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Install Chrome and React devtools\r\n2. Open devtools in a chrome-extension page implemented with React\r\n\r\nExample: [prettier-chrome-extension](https://github.com/prettier/prettier-chrome-extension/tree/options) (install from source and open extension options)\r\n\r\n**What is the expected behavior?**\r\n\r\nReact devtools should not appear when it's not supported, just like when devtools are opened on a page that doesn't use React.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- React Developer Tools 4.2.0 (10/3/2019)\r\n- Chrome 78.0.3904.70\r\n- macOS 10.15"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17205",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17205/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17205/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17205/events",
        "html_url": "https://github.com/facebook/react/issues/17205",
        "id": 513252907,
        "node_id": "MDU6SXNzdWU1MTMyNTI5MDc=",
        "number": 17205,
        "title": "Utilize Suspense to express app init loader",
        "user": {
          "login": "FredyC",
          "id": 1096340,
          "node_id": "MDQ6VXNlcjEwOTYzNDA=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1096340?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/FredyC",
          "html_url": "https://github.com/FredyC",
          "followers_url": "https://api.github.com/users/FredyC/followers",
          "following_url": "https://api.github.com/users/FredyC/following{/other_user}",
          "gists_url": "https://api.github.com/users/FredyC/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/FredyC/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/FredyC/subscriptions",
          "organizations_url": "https://api.github.com/users/FredyC/orgs",
          "repos_url": "https://api.github.com/users/FredyC/repos",
          "events_url": "https://api.github.com/users/FredyC/events{/privacy}",
          "received_events_url": "https://api.github.com/users/FredyC/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1109407645,
            "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
            "name": "Component: Suspense",
            "color": "8ffcd6",
            "default": false,
            "description": ""
          },
          {
            "id": 40929155,
            "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
            "name": "Type: Question",
            "color": "cc317c",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2019-10-28T11:40:50Z",
        "updated_at": "2019-11-01T15:45:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "With Concurrent mode getting finalized, I went to try to solve an old problem I have.\r\n\r\nThe app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.\r\n\r\nI've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i\r\n\r\nThe first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.\r\n\r\nThe last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17203",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17203/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17203/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17203/events",
        "html_url": "https://github.com/facebook/react/issues/17203",
        "id": 513228074,
        "node_id": "MDU6SXNzdWU1MTMyMjgwNzQ=",
        "number": 17203,
        "title": "Empty object as SuspenseConfig acts like infinite timeout",
        "user": {
          "login": "Eddie-CooRo",
          "id": 20463083,
          "node_id": "MDQ6VXNlcjIwNDYzMDgz",
          "avatar_url": "https://avatars1.githubusercontent.com/u/20463083?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Eddie-CooRo",
          "html_url": "https://github.com/Eddie-CooRo",
          "followers_url": "https://api.github.com/users/Eddie-CooRo/followers",
          "following_url": "https://api.github.com/users/Eddie-CooRo/following{/other_user}",
          "gists_url": "https://api.github.com/users/Eddie-CooRo/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Eddie-CooRo/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Eddie-CooRo/subscriptions",
          "organizations_url": "https://api.github.com/users/Eddie-CooRo/orgs",
          "repos_url": "https://api.github.com/users/Eddie-CooRo/repos",
          "events_url": "https://api.github.com/users/Eddie-CooRo/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Eddie-CooRo/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1109407645,
            "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
            "name": "Component: Suspense",
            "color": "8ffcd6",
            "default": false,
            "description": ""
          },
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-28T10:46:54Z",
        "updated_at": "2019-10-31T11:23:54Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbable Bug\r\n\r\n**What is the current behavior?**\r\nWhen an empty object is passed as SuspenseConfig, React waits infinitely on the previous tree for new Suspended components to get resolved.\r\n\r\n**A minimal demo of the problem:**\r\nHere is a demonstration, using the same example used throughout the concurrent docs:\r\nhttps://codesandbox.io/s/empty-suspense-config-example-88ghb \r\n\r\n**What is the expected behavior?**\r\nI don't know if it's a bug, or it's intentional. But if it's the expected behavior, I think it's better to add this to the documentation. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact and ReactDOM's experimental build"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17201",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17201/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17201/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17201/events",
        "html_url": "https://github.com/facebook/react/issues/17201",
        "id": 513139880,
        "node_id": "MDU6SXNzdWU1MTMxMzk4ODA=",
        "number": 17201,
        "title": "\"de-opting to synchronous mode\" in use-subscription README",
        "user": {
          "login": "jamesknelson",
          "id": 161707,
          "node_id": "MDQ6VXNlcjE2MTcwNw==",
          "avatar_url": "https://avatars3.githubusercontent.com/u/161707?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jamesknelson",
          "html_url": "https://github.com/jamesknelson",
          "followers_url": "https://api.github.com/users/jamesknelson/followers",
          "following_url": "https://api.github.com/users/jamesknelson/following{/other_user}",
          "gists_url": "https://api.github.com/users/jamesknelson/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jamesknelson/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jamesknelson/subscriptions",
          "organizations_url": "https://api.github.com/users/jamesknelson/orgs",
          "repos_url": "https://api.github.com/users/jamesknelson/repos",
          "events_url": "https://api.github.com/users/jamesknelson/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jamesknelson/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1109410193,
            "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
            "name": "Component: Hooks",
            "color": "c2f27b",
            "default": false,
            "description": ""
          },
          {
            "id": 40929155,
            "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
            "name": "Type: Question",
            "color": "cc317c",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-28T07:31:07Z",
        "updated_at": "2019-10-29T12:42:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nOutdated README (maybe?)\r\n\r\n**What do the docs currently say?**\r\n\r\n> use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.\r\n\r\nIn the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.\r\n\r\nWould this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17199",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17199/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17199/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17199/events",
        "html_url": "https://github.com/facebook/react/issues/17199",
        "id": 513093679,
        "node_id": "MDU6SXNzdWU1MTMwOTM2Nzk=",
        "number": 17199,
        "title": "Identify component as 'pending', when used with useTransition",
        "user": {
          "login": "samdenty",
          "id": 13242392,
          "node_id": "MDQ6VXNlcjEzMjQyMzky",
          "avatar_url": "https://avatars3.githubusercontent.com/u/13242392?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/samdenty",
          "html_url": "https://github.com/samdenty",
          "followers_url": "https://api.github.com/users/samdenty/followers",
          "following_url": "https://api.github.com/users/samdenty/following{/other_user}",
          "gists_url": "https://api.github.com/users/samdenty/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/samdenty/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/samdenty/subscriptions",
          "organizations_url": "https://api.github.com/users/samdenty/orgs",
          "repos_url": "https://api.github.com/users/samdenty/repos",
          "events_url": "https://api.github.com/users/samdenty/events{/privacy}",
          "received_events_url": "https://api.github.com/users/samdenty/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-28T04:43:20Z",
        "updated_at": "2019-10-28T05:40:54Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `useTransition`, the components are re-rendered with the last state they had. \r\n Without the ability to identify this 'pending' phase, components can't conditionally choose not to throw a promise - ie. the promise was created outside React.\r\n\r\n**What is the expected behavior?**\r\n\r\nComponents should be able to differentiate the current phase they're in, eg.\r\n\r\n```js\r\nconst phase = usePhase()\r\n// or\r\nconst isPending = useTransitionPending()\r\n```\r\n\r\n**Example**\r\n\r\nhttps://codesandbox.io/s/serene-wozniak-pnhhh\r\n\r\n**Use case**\r\n\r\nLibrary (pending release): [gqless](https://gqless.netlify.com/)\r\n\r\nI've created a factory which tracks usage of 'references' during render, and updates the components when they change:\r\n\r\n```js\r\nconst MyComponent = connected(() => {\r\n  const data = accessReference()\r\n  return <div>{data}</div>\r\n})\r\n```\r\n\r\n```js\r\nfunction connected(component) {\r\n\treturn (props) => {\r\n\t\tconst forceUpdate = useForceUpdate()\r\n\r\n\t\treferences = startRecording()\r\n\r\n\t\ttry {\r\n\t\t\treturn component(props)\r\n\t\t} finally {\r\n\t\t\treferences.stopRecording()\r\n\t\t}\r\n\t\t\r\n\t\tfor (ref of references) {\r\n\t\t\tref.onUpdate(forceUpdate)\r\n\t\t\tref.onPendingChange(forceUpdate)\r\n\t\t\tif (ref.isLoading) throw promise\r\n\t\t}\r\n\t}\t\r\n}\r\n```\r\n\r\nWithout the ability to check whether the current component is 'pending', the promise will be thrown on the 'pending' render phase - which prevents the transition from working.\r\n\r\nThis doesn't happen in the [examples](https://reactjs.org/docs/concurrent-mode-patterns.html), as the data is immutable and passed down as the `resource` prop.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17197",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17197/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17197/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17197/events",
        "html_url": "https://github.com/facebook/react/pull/17197",
        "id": 512892918,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyODA2NTY3",
        "number": 17197,
        "title": "Test with AppVeyor with Node 11 and 12",
        "user": {
          "login": "Saibamen",
          "id": 905878,
          "node_id": "MDQ6VXNlcjkwNTg3OA==",
          "avatar_url": "https://avatars3.githubusercontent.com/u/905878?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Saibamen",
          "html_url": "https://github.com/Saibamen",
          "followers_url": "https://api.github.com/users/Saibamen/followers",
          "following_url": "https://api.github.com/users/Saibamen/following{/other_user}",
          "gists_url": "https://api.github.com/users/Saibamen/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Saibamen/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Saibamen/subscriptions",
          "organizations_url": "https://api.github.com/users/Saibamen/orgs",
          "repos_url": "https://api.github.com/users/Saibamen/repos",
          "events_url": "https://api.github.com/users/Saibamen/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Saibamen/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 11,
        "created_at": "2019-10-26T22:24:49Z",
        "updated_at": "2019-10-31T18:09:23Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17197",
          "html_url": "https://github.com/facebook/react/pull/17197",
          "diff_url": "https://github.com/facebook/react/pull/17197.diff",
          "patch_url": "https://github.com/facebook/react/pull/17197.patch"
        },
        "body": "Test with Node 11 and 12"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17190",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17190/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17190/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17190/events",
        "html_url": "https://github.com/facebook/react/issues/17190",
        "id": 512813254,
        "node_id": "MDU6SXNzdWU1MTI4MTMyNTQ=",
        "number": 17190,
        "title": "useTransition hook name already exits in the ecosystem",
        "user": {
          "login": "just-boris",
          "id": 812240,
          "node_id": "MDQ6VXNlcjgxMjI0MA==",
          "avatar_url": "https://avatars2.githubusercontent.com/u/812240?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/just-boris",
          "html_url": "https://github.com/just-boris",
          "followers_url": "https://api.github.com/users/just-boris/followers",
          "following_url": "https://api.github.com/users/just-boris/following{/other_user}",
          "gists_url": "https://api.github.com/users/just-boris/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/just-boris/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/just-boris/subscriptions",
          "organizations_url": "https://api.github.com/users/just-boris/orgs",
          "repos_url": "https://api.github.com/users/just-boris/repos",
          "events_url": "https://api.github.com/users/just-boris/events{/privacy}",
          "received_events_url": "https://api.github.com/users/just-boris/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 10,
        "created_at": "2019-10-26T09:22:05Z",
        "updated_at": "2019-11-05T07:00:19Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The new concurrent mode provides a new hook - [`useTransition`](https://reactjs.org/docs/concurrent-mode-reference.html#usetransition). However the name of it is confusing. The word “transition” in web development already refers to animations and css [transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) property. There also exist [useTransition hook](https://www.react-spring.io/docs/hooks/use-transition) provided by react-spring library. So people who will use both concurrent mode and react-spring in their projects will be confused by clashing names.\r\n\r\nDid you consider different names for concurrent transitions? For example, `useTransaction` is not present in the ecosystems and can be used to describe concurrent updates."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17187",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17187/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17187/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17187/events",
        "html_url": "https://github.com/facebook/react/issues/17187",
        "id": 512765354,
        "node_id": "MDU6SXNzdWU1MTI3NjUzNTQ=",
        "number": 17187,
        "title": "[eslint-plugin-react-hooks] useCallback does not add dependencies when callback is not function expression",
        "user": {
          "login": "jim-chou-shopify",
          "id": 39597748,
          "node_id": "MDQ6VXNlcjM5NTk3NzQ4",
          "avatar_url": "https://avatars2.githubusercontent.com/u/39597748?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jim-chou-shopify",
          "html_url": "https://github.com/jim-chou-shopify",
          "followers_url": "https://api.github.com/users/jim-chou-shopify/followers",
          "following_url": "https://api.github.com/users/jim-chou-shopify/following{/other_user}",
          "gists_url": "https://api.github.com/users/jim-chou-shopify/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jim-chou-shopify/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jim-chou-shopify/subscriptions",
          "organizations_url": "https://api.github.com/users/jim-chou-shopify/orgs",
          "repos_url": "https://api.github.com/users/jim-chou-shopify/repos",
          "events_url": "https://api.github.com/users/jim-chou-shopify/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jim-chou-shopify/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1249821345,
            "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
            "name": "Component: ESLint Rules",
            "color": "f7afdb",
            "default": false,
            "description": ""
          },
          {
            "id": 1109410193,
            "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
            "name": "Component: Hooks",
            "color": "c2f27b",
            "default": false,
            "description": ""
          },
          {
            "id": 40929153,
            "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
            "name": "Type: Enhancement",
            "color": "84b6eb",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-26T00:12:59Z",
        "updated_at": "2019-10-31T14:05:05Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the argument of `useCallback` is not a function expression eslint-plugin-react-hooks will not autofix  dependencies.\r\n\r\nExample:\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), []);\r\n```\r\n\r\nWorkaround:\r\n```js\r\nuseMemo(() => debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks@^1.6.0, react@16.9.0-alpha.0\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17185",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17185/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17185/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17185/events",
        "html_url": "https://github.com/facebook/react/issues/17185",
        "id": 512751716,
        "node_id": "MDU6SXNzdWU1MTI3NTE3MTY=",
        "number": 17185,
        "title": "useDeferredValue does not abort running reconcile work for stale value",
        "user": {
          "login": "Bnaya",
          "id": 1304862,
          "node_id": "MDQ6VXNlcjEzMDQ4NjI=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1304862?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Bnaya",
          "html_url": "https://github.com/Bnaya",
          "followers_url": "https://api.github.com/users/Bnaya/followers",
          "following_url": "https://api.github.com/users/Bnaya/following{/other_user}",
          "gists_url": "https://api.github.com/users/Bnaya/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Bnaya/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Bnaya/subscriptions",
          "organizations_url": "https://api.github.com/users/Bnaya/orgs",
          "repos_url": "https://api.github.com/users/Bnaya/repos",
          "events_url": "https://api.github.com/users/Bnaya/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Bnaya/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1205087127,
            "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
            "name": "Component: Concurrent Mode",
            "color": "ffccd3",
            "default": false,
            "description": ""
          },
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 8,
        "created_at": "2019-10-25T22:59:18Z",
        "updated_at": "2020-01-14T17:56:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**bug**\r\n\r\n**What is the current behavior?**\r\nWhen useDeferredValue value is updated while the previous reconcile work is still running,\r\nThe previous reconcile work is not aborted, and the new work is queued after it.\r\n\r\n**repro:**\r\nBased on useDeferredValue example,\r\nhttps://codesandbox.io/s/infallible-dewdney-9fkv9\r\n\r\nFor better reproducibility i've made it to run longer using\r\n using `timeoutMs: 30000` + `while (performance.now() - now < 100) {` )\r\nand i've added an indicator value: `Time since last key stroke`\r\nhttps://codesandbox.io/s/intelligent-mestorf-u0p2b\r\n\r\n* Start timeline record\r\n* Type A B C with 1-3 sec interval between key strokes.\r\n* See timeline, there's work of 24 secs 8 + 8 + 8, for each key stroke \r\n* See the values of `Result #X` changes to the old stale value.\r\n\r\nThis is not optimal for 2 reasons:\r\n* We show stale data when we have something newer.\r\n* The cpu is locked processing the old value reconcile, and the new value needs to wait.\r\n\r\n**What is the expected behavior?**\r\nThe prev reconcile work should be cancelled/aborted,\r\nAnd the new value reconcile should start immediately \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact/react-dom `0.0.0-experimental-5faf377df`"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17183",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17183/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17183/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17183/events",
        "html_url": "https://github.com/facebook/react/pull/17183",
        "id": 512449969,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyNDU4MTQz",
        "number": 17183,
        "title": "fix: do not invoke function-like values in useDeferredValue",
        "user": {
          "login": "Jessidhia",
          "id": 73085,
          "node_id": "MDQ6VXNlcjczMDg1",
          "avatar_url": "https://avatars1.githubusercontent.com/u/73085?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jessidhia",
          "html_url": "https://github.com/Jessidhia",
          "followers_url": "https://api.github.com/users/Jessidhia/followers",
          "following_url": "https://api.github.com/users/Jessidhia/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jessidhia/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jessidhia/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jessidhia/subscriptions",
          "organizations_url": "https://api.github.com/users/Jessidhia/orgs",
          "repos_url": "https://api.github.com/users/Jessidhia/repos",
          "events_url": "https://api.github.com/users/Jessidhia/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jessidhia/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-25T10:59:18Z",
        "updated_at": "2019-10-30T23:08:45Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17183",
          "html_url": "https://github.com/facebook/react/pull/17183",
          "diff_url": "https://github.com/facebook/react/pull/17183.diff",
          "patch_url": "https://github.com/facebook/react/pull/17183.patch"
        },
        "body": "When reading the code I noticed that, because the `State` hook is used internally in the implementation, trying to hold a function or class value as a `DeferredValue` would cause it to be invoked as a lazy initializer, or updater function.\r\n\r\nThis fixes it by using a closure. I considered using a `typeof` check, but I'm not sure if adding the extra branches is useful. The branch could potentially avoid creating a closure on the common case, though. Not sure which is the best trade-off."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17180",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17180/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17180/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17180/events",
        "html_url": "https://github.com/facebook/react/issues/17180",
        "id": 512359091,
        "node_id": "MDU6SXNzdWU1MTIzNTkwOTE=",
        "number": 17180,
        "title": "Suggestion: Block unsafe javascript: URLs in Concurrent and Blocking Modes",
        "user": {
          "login": "radex",
          "id": 183747,
          "node_id": "MDQ6VXNlcjE4Mzc0Nw==",
          "avatar_url": "https://avatars2.githubusercontent.com/u/183747?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/radex",
          "html_url": "https://github.com/radex",
          "followers_url": "https://api.github.com/users/radex/followers",
          "following_url": "https://api.github.com/users/radex/following{/other_user}",
          "gists_url": "https://api.github.com/users/radex/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/radex/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/radex/subscriptions",
          "organizations_url": "https://api.github.com/users/radex/orgs",
          "repos_url": "https://api.github.com/users/radex/repos",
          "events_url": "https://api.github.com/users/radex/events{/privacy}",
          "received_events_url": "https://api.github.com/users/radex/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-25T07:48:03Z",
        "updated_at": "2019-10-31T14:03:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "In 16.9.0, a warning was added about `javascript:` URLs. This check is very, very important, as it's incredibly easy to forget about just once place where potential user data is passed onto DOM way. And of course, allowing a javascript: URL to be injected into DOM is a very serious XSS issue.\r\n\r\nI griped before that this is too important to be just a warning, and suggested that a semver-compatible solution is to provide an exported function that allows a runtime opt-in to the new safe behavior. This suggestion was dismissed, since if I want this, I can just make my own build of react with the flag enabled. (Of course, almost no one will do this, because it's just too much of a pain to make your own dependency builds with every release)\r\n\r\nI'd like to make a similar suggestion again. Since Concurrent and Blocking modes are coming soon(ish), and make many breaking changes anyway, why not take this opportunity to also block unsafe javascript: URLs when the mode is enabled? I know that URLs have nothing to do with concurrent mode (unlike unsafe lifecycle methods, etc.), but since many people will want to jump onto this new feature anyway and are willing to deal with some migration required anyway, why not add this vital security precaution as well?\r\n\r\nWaiting until React 17 to protect… well, probably countless React apps that don't properly sanitize URLs, just doesn't seem reasonable, when the feature is already implemented, only disabled under a feature flag.\r\n\r\ncc @gaearon @sebmarkbage "
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17178",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17178/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17178/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17178/events",
        "html_url": "https://github.com/facebook/react/pull/17178",
        "id": 512175976,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyMjM3ODE0",
        "number": 17178,
        "title": "Add CSS shorthands for horizontal & vertical variants for padding and margin",
        "user": {
          "login": "zhirzh",
          "id": 8132723,
          "node_id": "MDQ6VXNlcjgxMzI3MjM=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/8132723?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zhirzh",
          "html_url": "https://github.com/zhirzh",
          "followers_url": "https://api.github.com/users/zhirzh/followers",
          "following_url": "https://api.github.com/users/zhirzh/following{/other_user}",
          "gists_url": "https://api.github.com/users/zhirzh/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zhirzh/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zhirzh/subscriptions",
          "organizations_url": "https://api.github.com/users/zhirzh/orgs",
          "repos_url": "https://api.github.com/users/zhirzh/repos",
          "events_url": "https://api.github.com/users/zhirzh/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zhirzh/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-10-24T20:53:55Z",
        "updated_at": "2020-01-07T01:48:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17178",
          "html_url": "https://github.com/facebook/react/pull/17178",
          "diff_url": "https://github.com/facebook/react/pull/17178.diff",
          "patch_url": "https://github.com/facebook/react/pull/17178.patch"
        },
        "body": "Add CSS shorthands for padding and margin that are used in _react-native_:\r\n* `verticalMargin` and `horizontalMargin`\r\n* `verticalPadding` and `horizontalPadding`\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17170",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17170/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17170/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17170/events",
        "html_url": "https://github.com/facebook/react/issues/17170",
        "id": 511252283,
        "node_id": "MDU6SXNzdWU1MTEyNTIyODM=",
        "number": 17170,
        "title": "dangerouslySetInnerHTML, children, and a bogus hydration warning",
        "user": {
          "login": "jaydenseric",
          "id": 1754873,
          "node_id": "MDQ6VXNlcjE3NTQ4NzM=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1754873?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jaydenseric",
          "html_url": "https://github.com/jaydenseric",
          "followers_url": "https://api.github.com/users/jaydenseric/followers",
          "following_url": "https://api.github.com/users/jaydenseric/following{/other_user}",
          "gists_url": "https://api.github.com/users/jaydenseric/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jaydenseric/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jaydenseric/subscriptions",
          "organizations_url": "https://api.github.com/users/jaydenseric/orgs",
          "repos_url": "https://api.github.com/users/jaydenseric/repos",
          "events_url": "https://api.github.com/users/jaydenseric/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jaydenseric/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-10-23T11:13:04Z",
        "updated_at": "2019-10-23T20:43:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (initially reported at https://github.com/zeit/next.js/issues/9173).\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component has both `dangerouslySetInnerHTML` and `children` props, and the component is used with just the `children` prop, on page load the client logs a warning beginning with ``Warning: Prop `dangerouslySetInnerHTML` did not match.``.\r\n\r\nInterestingly:\r\n\r\n- If just `dangerouslySetInnerHTML` is used there is no warning.\r\n- Multiple instances with just a `children` prop results in only one warning, for the first occurance.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nDemo: https://codesandbox.io/s/react-hydration-warning-demo-3je59\r\n\r\nIn a Next.js project, create a page with the following content:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => (\r\n  <div dangerouslySetInnerHTML={dangerouslySetInnerHTML} children={children} />\r\n)\r\n\r\nexport default () => <TestComponent>a</TestComponent>\r\n```\r\n\r\nLoading the page in a browser will result in this warning logging to the console:\r\n\r\n```\r\nWarning: Prop `dangerouslySetInnerHTML` did not match. Server: \"a\" Client: \"\"\r\n```\r\n\r\nNote that the hydration warning is bogus; using view source and the inspector you can see the SSR and client rendered HTML is identical and correct.\r\n\r\nThis works just the same as before but without a hydration warning:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => {\r\n  const divProps = {}\r\n  if (dangerouslySetInnerHTML)\r\n    divProps.dangerouslySetInnerHTML = dangerouslySetInnerHTML\r\n  if (children) divProps.children = children\r\n\r\n  return <div {...divProps} />\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no hydration warning at first client render.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNot sure if the bug is present in old versions of React, but it can be seen with v16.11.0."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17168",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17168/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17168/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17168/events",
        "html_url": "https://github.com/facebook/react/issues/17168",
        "id": 511024159,
        "node_id": "MDU6SXNzdWU1MTEwMjQxNTk=",
        "number": 17168,
        "title": "Script tags are rendered inconsistently between client and server (html-encoded on server)",
        "user": {
          "login": "accidentaldeveloper",
          "id": 5819232,
          "node_id": "MDQ6VXNlcjU4MTkyMzI=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/5819232?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/accidentaldeveloper",
          "html_url": "https://github.com/accidentaldeveloper",
          "followers_url": "https://api.github.com/users/accidentaldeveloper/followers",
          "following_url": "https://api.github.com/users/accidentaldeveloper/following{/other_user}",
          "gists_url": "https://api.github.com/users/accidentaldeveloper/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/accidentaldeveloper/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/accidentaldeveloper/subscriptions",
          "organizations_url": "https://api.github.com/users/accidentaldeveloper/orgs",
          "repos_url": "https://api.github.com/users/accidentaldeveloper/repos",
          "events_url": "https://api.github.com/users/accidentaldeveloper/events{/privacy}",
          "received_events_url": "https://api.github.com/users/accidentaldeveloper/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-10-23T01:58:52Z",
        "updated_at": "2019-11-16T05:10:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nServer-rendered script tags are html-encoded. Client-rendered script tags are not.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Render a script tag with quotes on the server.\r\n2. Render a script tag with quotes on the client.\r\n3. Compare the output. \r\n\r\nNote that the quotes are html-encoded to `&quot` when rendered on the server.\r\n\r\nThis CodeSandbox is a little rough but very simple: https://codesandbox.io/s/affectionate-star-xe8ym\r\n\r\n**What is the expected behavior?**\r\nThe script tag content is not html-encoded on either the server or the client.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\nI'm not sure when this was introduced."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17163",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17163/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17163/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17163/events",
        "html_url": "https://github.com/facebook/react/issues/17163",
        "id": 510317658,
        "node_id": "MDU6SXNzdWU1MTAzMTc2NTg=",
        "number": 17163,
        "title": "React re-executes render() right after an exception has been thrown in the same render() method",
        "user": {
          "login": "tonix-tuft",
          "id": 10134421,
          "node_id": "MDQ6VXNlcjEwMTM0NDIx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tonix-tuft",
          "html_url": "https://github.com/tonix-tuft",
          "followers_url": "https://api.github.com/users/tonix-tuft/followers",
          "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
          "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
          "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
          "repos_url": "https://api.github.com/users/tonix-tuft/repos",
          "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1775957182,
            "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
            "name": "Resolution: Stale",
            "color": "e6e6e6",
            "default": false,
            "description": "Automatically closed due to inactivity"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-21T22:00:35Z",
        "updated_at": "2020-01-24T15:01:14Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI would like to clarify a doubt regarding this behaviour (maybe a bug? I don't know).\r\n\r\n**What is the current behavior?**\r\nBy playing with the Error Boundaries demo:\r\n\r\nhttps://codepen.io/gaearon/pen/wqvxGa?editors=0010\r\n\r\nI discovered that when an exception is thrown in `render()`, React re-executes that same `render()` method before running the corresponding Error Boundary's code.\r\n\r\nCheck out the same code with a `console.log` line added both to `BuggyCounter.render()` and `componentDidCatch()`:\r\n\r\n```\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n  \r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    console.log('componentDidCatch') // <------------------- LOG\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    })\r\n    // You can also log error messages to an error reporting service here\r\n  }\r\n  \r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }  \r\n}\r\n\r\nclass BuggyCounter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { counter: 0 };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  \r\n  handleClick() {\r\n    this.setState(({counter}) => ({\r\n      counter: counter + 1\r\n    }));\r\n  }\r\n  \r\n  render() {\r\n    console.log('this.state.counter', this.state.counter) // <------------------- LOG\r\n    if (this.state.counter === 5) {\r\n      // Simulate a JS error\r\n      throw new Error('I crashed!');\r\n    }\r\n    return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        <b>\r\n          This is an example of error boundaries in React 16.\r\n          <br /><br />\r\n          Click on the numbers to increase the counters.\r\n          <br />\r\n          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\r\n        </b>\r\n      </p>\r\n      <hr />\r\n      <ErrorBoundary>\r\n        <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\r\n        <BuggyCounter />\r\n        <BuggyCounter />\r\n      </ErrorBoundary>\r\n      <hr />\r\n      <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\r\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\r\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n```\r\n\r\nAfter the first rendering I see (OK):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 31](https://user-images.githubusercontent.com/10134421/67245825-3633a180-f45d-11e9-964d-b59b80ec09ae.png)\r\n\r\nAfter clicking on the counter 4 times (OK):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 43](https://user-images.githubusercontent.com/10134421/67245865-51061600-f45d-11e9-9e27-f02fcdc31c73.png)\r\n\r\nThen, after clicking once more (Why does `render()` gets executed twice?):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 54](https://user-images.githubusercontent.com/10134421/67245916-7004a800-f45d-11e9-908f-ebd93dac4326.png)\r\n\r\nAfter that, `componentDidCatch()` is, as expected, executed only once.\r\n\r\n**What is the expected behavior?**\r\nCannot tell. This is not a problem in se because of the idempotent nature of `render()` (which has to be pure), but makes me think that this is an unneeded call because if an error has been thrown in `render()`, re-executing it right away would still lead to the same exception being thrown.\r\n\r\nOr, is there something I am missing? Maybe related to how React works internally and because of that it needs to recall `render()` as soon as that same `render()` has thrown...\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOS: OS X\r\nBrowser: Chrome 77\r\nUsing the same React 16 development version of the Pen:\r\n\r\n`https://unpkg.com/react@16/umd/react.development.js`\r\n`https://unpkg.com/react-dom@16/umd/react-dom.development.js`\r\n\r\nThank you for the attention.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17157",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17157/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17157/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17157/events",
        "html_url": "https://github.com/facebook/react/issues/17157",
        "id": 509919136,
        "node_id": "MDU6SXNzdWU1MDk5MTkxMzY=",
        "number": 17157,
        "title": "[DOM] Add support for the `inert` attribute",
        "user": {
          "login": "kripod",
          "id": 14854048,
          "node_id": "MDQ6VXNlcjE0ODU0MDQ4",
          "avatar_url": "https://avatars3.githubusercontent.com/u/14854048?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kripod",
          "html_url": "https://github.com/kripod",
          "followers_url": "https://api.github.com/users/kripod/followers",
          "following_url": "https://api.github.com/users/kripod/following{/other_user}",
          "gists_url": "https://api.github.com/users/kripod/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/kripod/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/kripod/subscriptions",
          "organizations_url": "https://api.github.com/users/kripod/orgs",
          "repos_url": "https://api.github.com/users/kripod/repos",
          "events_url": "https://api.github.com/users/kripod/events{/privacy}",
          "received_events_url": "https://api.github.com/users/kripod/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1775957182,
            "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
            "name": "Resolution: Stale",
            "color": "e6e6e6",
            "default": false,
            "description": "Automatically closed due to inactivity"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-10-21T12:06:09Z",
        "updated_at": "2020-01-19T17:48:07Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen specifying `inert={false}` on an element, React throws the following message:\r\n\r\n```\r\nWarning: Received `false` for a non-boolean attribute `inert`.\r\n```\r\n\r\nHowever, `inert={undefined}` works fine as a replacement for `false`, while `inert=\"\"` (empty string) provides an escape hatch as a truthy value.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `inert` attribute should be accepted as a boolean DOM attribute, as [proposed](https://html.spec.whatwg.org/multipage/interaction.html#inert) by the HTML Standard.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17153",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17153/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17153/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17153/events",
        "html_url": "https://github.com/facebook/react/issues/17153",
        "id": 509657172,
        "node_id": "MDU6SXNzdWU1MDk2NTcxNzI=",
        "number": 17153,
        "title": "Infinite loop of errors when host config is missing `getRootHostContext`",
        "user": {
          "login": "sophiebits",
          "id": 6820,
          "node_id": "MDQ6VXNlcjY4MjA=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiebits",
          "html_url": "https://github.com/sophiebits",
          "followers_url": "https://api.github.com/users/sophiebits/followers",
          "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiebits/orgs",
          "repos_url": "https://api.github.com/users/sophiebits/repos",
          "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiebits/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 739761016,
            "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
            "name": "Component: Reconciler",
            "color": "f9a798",
            "default": false,
            "description": null
          },
          {
            "id": 1776420141,
            "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
            "url": "https://api.github.com/repos/facebook/react/labels/Partner",
            "name": "Partner",
            "color": "e4bef7",
            "default": false,
            "description": ""
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-20T21:43:45Z",
        "updated_at": "2020-01-08T23:42:29Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "**Do you want to request a *feature* or report a *bug*?** bug\r\n\r\n**What is the current behavior?** If you start writing a shitty reconciler:\r\n\r\n```\r\nimport React from 'react';\r\nimport ReactReconciler from 'react-reconciler';\r\nlet reconciler = ReactReconciler({\r\n  /* empty host config */\r\n});\r\nlet container = reconciler.createContainer(null, false, false);\r\nreconciler.updateContainer(<div />, container, null, null);\r\n```\r\n\r\nthen you get this error in an infinite loop:\r\n\r\n```\r\nUncaught TypeError: getRootHostContext is not a function\r\n    at pushHostContainer (react-reconciler.development.js:5526)\r\n    at pushHostRootContext (react-reconciler.development.js:8152)\r\n    at beginWork$1 (react-reconciler.development.js:9599)\r\n    at HTMLUnknownElement.callCallback (react-reconciler.development.js:11399)\r\n    at Object.invokeGuardedCallbackDev (react-reconciler.development.js:11448)\r\n    at invokeGuardedCallback (react-reconciler.development.js:11499)\r\n    at beginWork$$1 (react-reconciler.development.js:15639)\r\n    at performUnitOfWork (react-reconciler.development.js:14544)\r\n    at workLoopSync (react-reconciler.development.js:14520)\r\n    at performSyncWorkOnRoot (react-reconciler.development.js:14072)\r\n    at react-reconciler.development.js:1966\r\n    at unstable_runWithPriority (scheduler.development.js:818)\r\n    at runWithPriority (react-reconciler.development.js:1912)\r\n    at flushSyncCallbackQueueImpl (react-reconciler.development.js:1961)\r\n    at flushSyncCallbackQueue (react-reconciler.development.js:1949)\r\n    at scheduleUpdateOnFiber (react-reconciler.development.js:13490)\r\n    at scheduleRootUpdate (react-reconciler.development.js:16860)\r\n    at updateContainerAtExpirationTime (react-reconciler.development.js:16886)\r\n    at Object.updateContainer (react-reconciler.development.js:16986)\r\n ```\r\n\r\nPresumably this also happens if getRootHostContext is buggy and itself throws.\r\n\r\n**What is the expected behavior?** I'd expect it to crash once or twice and then stop. (This seems specific to `getRootHostContext`; no other missing method had the same result.) My recollection is we do intend to catch errors in host configs; if I'm misremembering feel free to wontfix.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react-reconciler 0.22.2 (from the 16.10.2 release)\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17151",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17151/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17151/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17151/events",
        "html_url": "https://github.com/facebook/react/issues/17151",
        "id": 509614257,
        "node_id": "MDU6SXNzdWU1MDk2MTQyNTc=",
        "number": 17151,
        "title": "Bailing out doesn't work properly in lazy components with default props",
        "user": {
          "login": "jddxf",
          "id": 11155177,
          "node_id": "MDQ6VXNlcjExMTU1MTc3",
          "avatar_url": "https://avatars2.githubusercontent.com/u/11155177?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jddxf",
          "html_url": "https://github.com/jddxf",
          "followers_url": "https://api.github.com/users/jddxf/followers",
          "following_url": "https://api.github.com/users/jddxf/following{/other_user}",
          "gists_url": "https://api.github.com/users/jddxf/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jddxf/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jddxf/subscriptions",
          "organizations_url": "https://api.github.com/users/jddxf/orgs",
          "repos_url": "https://api.github.com/users/jddxf/repos",
          "events_url": "https://api.github.com/users/jddxf/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jddxf/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1775957182,
            "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
            "name": "Resolution: Stale",
            "color": "e6e6e6",
            "default": false,
            "description": "Automatically closed due to inactivity"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-10-20T15:58:13Z",
        "updated_at": "2020-01-19T00:48:10Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nBailing out doesn't work properly in lazy components with default props. It seems we're incorrectly [comparing unresolved props (oldProps) with resolved props (newProps)](https://github.com/facebook/react/blob/62b04cfa753076d5ffb1d74b855f8f8db36f5186/packages/react-reconciler/src/ReactFiberClassComponent.js#L1100).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/stoic-curran-3otbb\r\n\r\n**What is the expected behavior?**\r\nIn the example above, `componentDidUpdate` shouldn't have been called when the button is clicked.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17148",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17148/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17148/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17148/events",
        "html_url": "https://github.com/facebook/react/issues/17148",
        "id": 509461874,
        "node_id": "MDU6SXNzdWU1MDk0NjE4NzQ=",
        "number": 17148,
        "title": "[RFC] React DevTools - configurable style prop for live editing",
        "user": {
          "login": "giuseppeg",
          "id": 711311,
          "node_id": "MDQ6VXNlcjcxMTMxMQ==",
          "avatar_url": "https://avatars3.githubusercontent.com/u/711311?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/giuseppeg",
          "html_url": "https://github.com/giuseppeg",
          "followers_url": "https://api.github.com/users/giuseppeg/followers",
          "following_url": "https://api.github.com/users/giuseppeg/following{/other_user}",
          "gists_url": "https://api.github.com/users/giuseppeg/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/giuseppeg/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/giuseppeg/subscriptions",
          "organizations_url": "https://api.github.com/users/giuseppeg/orgs",
          "repos_url": "https://api.github.com/users/giuseppeg/repos",
          "events_url": "https://api.github.com/users/giuseppeg/events{/privacy}",
          "received_events_url": "https://api.github.com/users/giuseppeg/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2019-10-19T14:38:33Z",
        "updated_at": "2019-12-11T17:47:33Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Right now the React DevTools expose an undocumented hook for React Native that allows to register a function that is used to enable styles editing in the dev tools:\r\n\r\n<img width=\"1066\" alt=\"Screen Shot 2019-10-19 at 4 30 16 PM\" src=\"https://user-images.githubusercontent.com/711311/67146710-fb2f4380-f28d-11e9-9ce4-c037acc708c3.png\">\r\n\r\nFor example React Native for Web uses it\r\n\r\nhttps://github.com/necolas/react-native-web/blob/36dacb2052efdab2a28655773dc76934157d9134/packages/react-native-web/src/exports/StyleSheet/index.js#L13-L16\r\n\r\nIt would be great if the prop name was configurable (right now it can only be `style`) so that other CSS in JS libraries could use this hook and if the editor would allow 1) arrays of style objects 2) nested objects for things like pseudo elements:\r\n\r\n```js\r\nstyle {\r\n  flex: 1;\r\n  '&:hover': {\r\n     color: 'red'\r\n  }\r\n}\r\n```\r\n\r\nI think that the above is already possible but it has to be provided as JSON. Couldn't it be `eval`d when JSON parse fails?\r\n\r\nWhen this hook is registered probably the dev tools should hide the same prop from the `props` pane."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17147",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17147/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17147/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17147/events",
        "html_url": "https://github.com/facebook/react/issues/17147",
        "id": 509439275,
        "node_id": "MDU6SXNzdWU1MDk0MzkyNzU=",
        "number": 17147,
        "title": "react-reconciler & portals: missing root instance",
        "user": {
          "login": "drcmda",
          "id": 2223602,
          "node_id": "MDQ6VXNlcjIyMjM2MDI=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/2223602?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/drcmda",
          "html_url": "https://github.com/drcmda",
          "followers_url": "https://api.github.com/users/drcmda/followers",
          "following_url": "https://api.github.com/users/drcmda/following{/other_user}",
          "gists_url": "https://api.github.com/users/drcmda/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/drcmda/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/drcmda/subscriptions",
          "organizations_url": "https://api.github.com/users/drcmda/orgs",
          "repos_url": "https://api.github.com/users/drcmda/repos",
          "events_url": "https://api.github.com/users/drcmda/events{/privacy}",
          "received_events_url": "https://api.github.com/users/drcmda/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1775957182,
            "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
            "name": "Resolution: Stale",
            "color": "e6e6e6",
            "default": false,
            "description": "Automatically closed due to inactivity"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-19T11:49:19Z",
        "updated_at": "2020-01-19T00:48:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is a problem i am facing with the [react-three-fiber](https://github.com/drcmda/react-three-fiber), a react renderer for threejs.  The following image is probably a good overview:\r\n\r\n![reconciler](https://user-images.githubusercontent.com/2223602/67144414-59502c80-f276-11e9-89d1-97496ee10b8c.jpg)\r\n\r\nBasically i have a reconciler, it has a root instance, a scene in my case into which everything's rendered. I keep special information in that scene, which i need when constructing new objects.\r\n\r\nNow, when i use createPortal, like so:\r\n\r\n```jsx\r\nfunction A() {\r\n  // Create virtual scene\r\n  const virtualScene = useMemo(() => new THREE.Scene(), [])\r\n\r\n  // Render elements into the virtual scene via createPortal\r\n  return createPortal(\r\n    <mesh onClick={() => console.log(\"clicked\")}>\r\n      <meshNormalMaterial attach=\"material\" />\r\n      <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\r\n    </mesh>\r\n    virtualScene,\r\n  )\r\n}\r\n```\r\n\r\nthen the createInstance inside the reconciler will receive the following:\r\n\r\n```jsx\r\ncreateInstance(\r\n  type = \"meshNormalMaterial\",\r\n  props = { attach: \"material\" },\r\n  container = virtualScene,\r\n  hostContext = {},\r\n  internalInstanceHandle = { ... }\r\n)\r\n```\r\n\r\nThe problem that i face is that i also need to know the root instance into which the portal is rendered, but there seem to be no obvious means to get it. Digging around i noticed that the  internalInstanceHandle fibernode contains it when i traverse it:\r\n\r\n```jsx\r\nconst fn = (node: Reconciler.Fiber): THREE.Object3D => {\r\n  if (!node.return) return node.stateNode.containerInfo\r\n  else return fn(node.return)\r\n}\r\nlet scene = fn(internalInstanceHandle) // ---> the root scene\r\n```\r\n\r\nBut that seems pretty sketchy. Is there any other way, or could it be exposed?"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17140",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17140/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17140/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17140/events",
        "html_url": "https://github.com/facebook/react/issues/17140",
        "id": 509307804,
        "node_id": "MDU6SXNzdWU1MDkzMDc4MDQ=",
        "number": 17140,
        "title": "SuspenseList in DevTools could cycle through the Suspense states",
        "user": {
          "login": "sebmarkbage",
          "id": 63648,
          "node_id": "MDQ6VXNlcjYzNjQ4",
          "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sebmarkbage",
          "html_url": "https://github.com/sebmarkbage",
          "followers_url": "https://api.github.com/users/sebmarkbage/followers",
          "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
          "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
          "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
          "repos_url": "https://api.github.com/users/sebmarkbage/repos",
          "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-18T20:59:21Z",
        "updated_at": "2020-01-08T19:08:53Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We currently have a way to force a fallback on a Suspense boundary in DevTools.\r\n\r\nIt might be cool to have a \"play\" button or something on SuspenseList that cycles through the states.\r\n\r\nE.g. if it's \"together\" mode it shows all the fallbacks and then switches to showing all the content and then back again in a loop.\r\n\r\nIf it's \"forwards\" it shows all the fallbacks then one at a time and then back to all fallbacks. If it's tail \"hidden\" or \"collapsed\" it hides all the ones that are not yet inserted and then inserts one at a time.\r\n\r\nCould be a nice way to demo/test the loading sequence experience."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17114",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17114/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17114/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17114/events",
        "html_url": "https://github.com/facebook/react/issues/17114",
        "id": 507830238,
        "node_id": "MDU6SXNzdWU1MDc4MzAyMzg=",
        "number": 17114,
        "title": "dangerouslySetInnerHTML causes page to scroll to top",
        "user": {
          "login": "vnankov",
          "id": 12615872,
          "node_id": "MDQ6VXNlcjEyNjE1ODcy",
          "avatar_url": "https://avatars1.githubusercontent.com/u/12615872?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vnankov",
          "html_url": "https://github.com/vnankov",
          "followers_url": "https://api.github.com/users/vnankov/followers",
          "following_url": "https://api.github.com/users/vnankov/following{/other_user}",
          "gists_url": "https://api.github.com/users/vnankov/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vnankov/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vnankov/subscriptions",
          "organizations_url": "https://api.github.com/users/vnankov/orgs",
          "repos_url": "https://api.github.com/users/vnankov/repos",
          "events_url": "https://api.github.com/users/vnankov/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vnankov/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1775957182,
            "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
            "name": "Resolution: Stale",
            "color": "e6e6e6",
            "default": false,
            "description": "Automatically closed due to inactivity"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 13,
        "created_at": "2019-10-16T12:48:53Z",
        "updated_at": "2020-01-22T14:27:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* It's a bug\r\n* The problem is only when we get the content from the dangerouslySetInnerHTML property.\r\n\r\n**What is the current behavior?**\r\n\r\n* When you have anchor tags that should scroll down the page to the related id, instead of scroll down it scrolls up to (0,0) coordinates.\r\n* This is our site, take a look for yourself: https://www.emerchantpay.com/insights/online-payments-germany/\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n* It should behave as normal anchor tag and scroll to its relevant id.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n * It all works fine only for Google Chrome Browser Desktop version and Chrome for Androind. It won't work for Mozila, Safari, etc. for mobile and desktop. Also does not work for any browser on IOS."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17109",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17109/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17109/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17109/events",
        "html_url": "https://github.com/facebook/react/issues/17109",
        "id": 507682173,
        "node_id": "MDU6SXNzdWU1MDc2ODIxNzM=",
        "number": 17109,
        "title": "Question: How to rewrite setState(state, callback) with hooks",
        "user": {
          "login": "yoyo837",
          "id": 6134547,
          "node_id": "MDQ6VXNlcjYxMzQ1NDc=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/6134547?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/yoyo837",
          "html_url": "https://github.com/yoyo837",
          "followers_url": "https://api.github.com/users/yoyo837/followers",
          "following_url": "https://api.github.com/users/yoyo837/following{/other_user}",
          "gists_url": "https://api.github.com/users/yoyo837/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/yoyo837/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/yoyo837/subscriptions",
          "organizations_url": "https://api.github.com/users/yoyo837/orgs",
          "repos_url": "https://api.github.com/users/yoyo837/repos",
          "events_url": "https://api.github.com/users/yoyo837/events{/privacy}",
          "received_events_url": "https://api.github.com/users/yoyo837/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-16T07:59:49Z",
        "updated_at": "2019-10-29T05:54:52Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "First of all, I am sorry that my English is poor.\r\n\r\n#14493\r\n#15772 \r\n\r\nI found some similar issues, but I think the things I want to explain will be different. When my callback doesn't always do something periodically based on some conditions, it seems that useEffect doesn't quite meet the requirements.\r\n\r\nFor example, using setState data to modify the DOM, and in rare cases, other processing of the DOM will be required in the callback. But the prerequisites for doing these things can be complex and irregular, so useEffect seems to be difficult to do."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17104",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17104/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17104/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17104/events",
        "html_url": "https://github.com/facebook/react/pull/17104",
        "id": 507545358,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzI4NTE2ODY5",
        "number": 17104,
        "title": "Fixing grammatical errors in docs",
        "user": {
          "login": "jagannathBhat",
          "id": 29631578,
          "node_id": "MDQ6VXNlcjI5NjMxNTc4",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29631578?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jagannathBhat",
          "html_url": "https://github.com/jagannathBhat",
          "followers_url": "https://api.github.com/users/jagannathBhat/followers",
          "following_url": "https://api.github.com/users/jagannathBhat/following{/other_user}",
          "gists_url": "https://api.github.com/users/jagannathBhat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jagannathBhat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jagannathBhat/subscriptions",
          "organizations_url": "https://api.github.com/users/jagannathBhat/orgs",
          "repos_url": "https://api.github.com/users/jagannathBhat/repos",
          "events_url": "https://api.github.com/users/jagannathBhat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jagannathBhat/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-10-16T00:17:33Z",
        "updated_at": "2019-11-16T03:06:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17104",
          "html_url": "https://github.com/facebook/react/pull/17104",
          "diff_url": "https://github.com/facebook/react/pull/17104.diff",
          "patch_url": "https://github.com/facebook/react/pull/17104.patch"
        },
        "body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17099",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17099/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17099/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17099/events",
        "html_url": "https://github.com/facebook/react/pull/17099",
        "id": 507495058,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzI4NDc1NjE3",
        "number": 17099,
        "title": "Warn for update on different component in render",
        "user": {
          "login": "acdlite",
          "id": 3624098,
          "node_id": "MDQ6VXNlcjM2MjQwOTg=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/acdlite",
          "html_url": "https://github.com/acdlite",
          "followers_url": "https://api.github.com/users/acdlite/followers",
          "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
          "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
          "organizations_url": "https://api.github.com/users/acdlite/orgs",
          "repos_url": "https://api.github.com/users/acdlite/repos",
          "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
          "received_events_url": "https://api.github.com/users/acdlite/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-15T21:34:26Z",
        "updated_at": "2020-01-23T18:58:51Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17099",
          "html_url": "https://github.com/facebook/react/pull/17099",
          "diff_url": "https://github.com/facebook/react/pull/17099.diff",
          "patch_url": "https://github.com/facebook/react/pull/17099.patch"
        },
        "body": "This warning already exists for class components, but not for functions.\r\n\r\nIt does not apply to render phase updates to the same component, which have special semantics that we do support."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17084",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17084/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17084/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17084/events",
        "html_url": "https://github.com/facebook/react/issues/17084",
        "id": 506820262,
        "node_id": "MDU6SXNzdWU1MDY4MjAyNjI=",
        "number": 17084,
        "title": "Devtools scrollbars should be dark in dark mode",
        "user": {
          "login": "Daniel15",
          "id": 91933,
          "node_id": "MDQ6VXNlcjkxOTMz",
          "avatar_url": "https://avatars2.githubusercontent.com/u/91933?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Daniel15",
          "html_url": "https://github.com/Daniel15",
          "followers_url": "https://api.github.com/users/Daniel15/followers",
          "following_url": "https://api.github.com/users/Daniel15/following{/other_user}",
          "gists_url": "https://api.github.com/users/Daniel15/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Daniel15/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Daniel15/subscriptions",
          "organizations_url": "https://api.github.com/users/Daniel15/orgs",
          "repos_url": "https://api.github.com/users/Daniel15/repos",
          "events_url": "https://api.github.com/users/Daniel15/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Daniel15/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 725156255,
            "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
            "name": "good first issue (taken)",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2019-10-14T18:56:24Z",
        "updated_at": "2019-11-27T09:10:55Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen Chrome Devtools are in \"dark mode\", all the standard panels have a dark scrollbar:\r\n![](https://d.sb/2019/10/chrome_14-11.53.42.png)\r\n\r\nHowever, the React Devtools still show a light scrollbar:\r\n![](https://d.sb/2019/10/chrome_14-11.55.16.png)\r\n\r\n**What is the expected behavior?**\r\nScrollbars should be styled similarly to the standard panels\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAny React version\r\nChrome 77.0\r\nWindows 10, version 1903.\r\n\r\nNote: How to enable dark mode:\r\n![](https://d.sb/2019/10/chrome_14-11.58.25.png)\r\n![](https://d.sb/2019/10/chrome_14-11.59.29.png)"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17080",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17080/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17080/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17080/events",
        "html_url": "https://github.com/facebook/react/issues/17080",
        "id": 506399052,
        "node_id": "MDU6SXNzdWU1MDYzOTkwNTI=",
        "number": 17080,
        "title": "Are useEffect clean-ups called in the wrong order ?",
        "user": {
          "login": "ostrebler",
          "id": 30187797,
          "node_id": "MDQ6VXNlcjMwMTg3Nzk3",
          "avatar_url": "https://avatars1.githubusercontent.com/u/30187797?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ostrebler",
          "html_url": "https://github.com/ostrebler",
          "followers_url": "https://api.github.com/users/ostrebler/followers",
          "following_url": "https://api.github.com/users/ostrebler/following{/other_user}",
          "gists_url": "https://api.github.com/users/ostrebler/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ostrebler/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ostrebler/subscriptions",
          "organizations_url": "https://api.github.com/users/ostrebler/orgs",
          "repos_url": "https://api.github.com/users/ostrebler/repos",
          "events_url": "https://api.github.com/users/ostrebler/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ostrebler/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710722093,
            "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
            "name": "Type: Needs Investigation",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-10-13T23:48:58Z",
        "updated_at": "2019-11-10T13:48:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**What is the current behavior?**\r\n\r\nI'm trying to write a small `Title` component to render nested document titles. However the kinda unexpected order in which effect clean-up functions are called makes it impossible to do this : \r\n\r\n```javascript\r\nimport { Children, useEffect } from 'react'\r\n\r\nexport default ({ children }) => {\r\n  const subtitle = Children.toArray(children).join('')\r\n  useEffect(() => {\r\n    const root = document.title\r\n    document.title = `${subtitle} - ${root}`\r\n    console.log('Wrote', document.title)\r\n    return () => {\r\n      document.title = root\r\n      console.log('Restored', document.title)\r\n    }\r\n  }, [subtitle])\r\n  return null\r\n}\r\n```\r\n\r\nHere is a loosy sketch of my component structure (handled with `@reach/router`) : \r\n\r\n```\r\nApp                     // contains <Title>App</Title>\r\n> Dashboard             // contains <Title>Dashboard</Title>\r\n> Profile               // contains <Title>Profile</Title>\r\n> Project               // contains <Title>Project</Title>\r\n  > Calendar            // contains <Title>Calendar</Title>\r\n```\r\n\r\nEach one of these components calls my `Title` component. Everything works fine when going from profile to dashboard or from dashboard to project. But when I jump from calendar to dashboard, the document title gets messed up because the clean-up in Project is called **before** the clean-up in Calendar even though Calendar is a child of Project, which is kinda unexpected and makes tree side-effect logic using (just) `useEffect` simply impossible.\r\n\r\nThe order in which the effect functions are called is a direct reflection of the order in which the components are nested. Shouldn't the clean-up functions be called following the exact reverse order ? Isn't that one of the goals of a clean-up ?\r\n\r\nWhen I navigate to the calendar and then back to the dashboard, I get the following logs : \r\n\r\n```\r\nWrote App\r\nWrote Project - App\r\nWrote Calendar - Project - App\r\nRestored App                          // This should happen after...\r\nRestored Project - App                // ...this.\r\nWrote Dashboard - Project - App       // This is messed up.\r\n```\r\n\r\n[codesandbox here](https://codesandbox.io/s/vigilant-feynman-0jxwb?fontsize=14)\r\n\r\n**What is the expected behavior?**\r\n\r\nHere is what I expected and what I would get if clean-ups in children were to be called before clean-ups in parents : \r\n\r\n```\r\nWrote App\r\nWrote Project - App\r\nWrote Calendar - Project - App\r\nRestored Project - App\r\nRestored App\r\nWrote Dashboard - App\r\n```\r\n\r\nI'm using React 16.10.2.\r\n\r\nThis ugly workaround works by \"forcing\" the order of what the clean-ups do (by keeping manually track of the effect functions' order and then just going the other way) : \r\n\r\n```javascript\r\nconst stack = []\r\n\r\nexport default ({ children }) => {\r\n  const subtitle = Children.toArray(children).join('')\r\n  useEffect(() => {\r\n    stack.push(document.title)\r\n    document.title = `${subtitle} - ${last(stack)}`\r\n    return () => {\r\n      document.title = stack.pop()\r\n    }\r\n  }, [subtitle])\r\n  return null\r\n}\r\n```"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17070",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17070/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17070/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17070/events",
        "html_url": "https://github.com/facebook/react/pull/17070",
        "id": 506037898,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzI3MzUxMDc0",
        "number": 17070,
        "title": "Make uncontrolled -> controlled warning clearer",
        "user": {
          "login": "vcarl",
          "id": 1551487,
          "node_id": "MDQ6VXNlcjE1NTE0ODc=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1551487?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vcarl",
          "html_url": "https://github.com/vcarl",
          "followers_url": "https://api.github.com/users/vcarl/followers",
          "following_url": "https://api.github.com/users/vcarl/following{/other_user}",
          "gists_url": "https://api.github.com/users/vcarl/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vcarl/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vcarl/subscriptions",
          "organizations_url": "https://api.github.com/users/vcarl/orgs",
          "repos_url": "https://api.github.com/users/vcarl/repos",
          "events_url": "https://api.github.com/users/vcarl/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vcarl/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 10,
        "created_at": "2019-10-11T20:12:27Z",
        "updated_at": "2020-01-07T19:00:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17070",
          "html_url": "https://github.com/facebook/react/pull/17070",
          "diff_url": "https://github.com/facebook/react/pull/17070.diff",
          "patch_url": "https://github.com/facebook/react/pull/17070.patch"
        },
        "body": "Fixes #17069. Glad to iterate further on the specific language, but I've found that explaining in this way usually clears it up for people."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17069",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17069/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17069/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17069/events",
        "html_url": "https://github.com/facebook/react/issues/17069",
        "id": 506037125,
        "node_id": "MDU6SXNzdWU1MDYwMzcxMjU=",
        "number": 17069,
        "title": "The warning for uncontrolled -> controlled inputs is confusing",
        "user": {
          "login": "vcarl",
          "id": 1551487,
          "node_id": "MDQ6VXNlcjE1NTE0ODc=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1551487?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vcarl",
          "html_url": "https://github.com/vcarl",
          "followers_url": "https://api.github.com/users/vcarl/followers",
          "following_url": "https://api.github.com/users/vcarl/following{/other_user}",
          "gists_url": "https://api.github.com/users/vcarl/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vcarl/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vcarl/subscriptions",
          "organizations_url": "https://api.github.com/users/vcarl/orgs",
          "repos_url": "https://api.github.com/users/vcarl/repos",
          "events_url": "https://api.github.com/users/vcarl/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vcarl/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-10-11T20:10:26Z",
        "updated_at": "2020-01-14T16:40:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug? Mild DX improvement.\r\n\r\n**What is the current behavior?**\r\n\r\nCreating an input with an undefined or null value, then later passing a string value, triggers a warning about controlled inputs.\r\n\r\n> A component is changing an uncontrolled input of type undefined to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa)\r\n\r\nIt's my experience in Reactiflux that this warning is unclear to developers with less familiarity with React, or at least with the \"controlled\" and \"uncontrolled\" terms.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17062",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17062/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17062/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17062/events",
        "html_url": "https://github.com/facebook/react/pull/17062",
        "id": 505323634,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzI2Nzc4NzQ5",
        "number": 17062,
        "title": "apply changes on editablevalue on blur feature implemented",
        "user": {
          "login": "muratcatal",
          "id": 5106209,
          "node_id": "MDQ6VXNlcjUxMDYyMDk=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/5106209?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/muratcatal",
          "html_url": "https://github.com/muratcatal",
          "followers_url": "https://api.github.com/users/muratcatal/followers",
          "following_url": "https://api.github.com/users/muratcatal/following{/other_user}",
          "gists_url": "https://api.github.com/users/muratcatal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/muratcatal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/muratcatal/subscriptions",
          "organizations_url": "https://api.github.com/users/muratcatal/orgs",
          "repos_url": "https://api.github.com/users/muratcatal/repos",
          "events_url": "https://api.github.com/users/muratcatal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/muratcatal/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          },
          {
            "id": 1775955521,
            "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
            "name": "Resolution: Backlog",
            "color": "9dd1e8",
            "default": false,
            "description": ""
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-10T14:50:07Z",
        "updated_at": "2020-01-09T22:10:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17062",
          "html_url": "https://github.com/facebook/react/pull/17062",
          "diff_url": "https://github.com/facebook/react/pull/17062.diff",
          "patch_url": "https://github.com/facebook/react/pull/17062.patch"
        },
        "body": "Added applying changes on EditableValue component on blur event."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17060",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17060/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17060/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17060/events",
        "html_url": "https://github.com/facebook/react/issues/17060",
        "id": 505038084,
        "node_id": "MDU6SXNzdWU1MDUwMzgwODQ=",
        "number": 17060,
        "title": "'exhaustive-deps' lint rule warns that \"Outer scope values\" aren't valid when a hook is inside a function",
        "user": {
          "login": "gerrod",
          "id": 865932,
          "node_id": "MDQ6VXNlcjg2NTkzMg==",
          "avatar_url": "https://avatars0.githubusercontent.com/u/865932?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gerrod",
          "html_url": "https://github.com/gerrod",
          "followers_url": "https://api.github.com/users/gerrod/followers",
          "following_url": "https://api.github.com/users/gerrod/following{/other_user}",
          "gists_url": "https://api.github.com/users/gerrod/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gerrod/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gerrod/subscriptions",
          "organizations_url": "https://api.github.com/users/gerrod/orgs",
          "repos_url": "https://api.github.com/users/gerrod/repos",
          "events_url": "https://api.github.com/users/gerrod/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gerrod/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2019-10-10T05:09:49Z",
        "updated_at": "2019-12-17T23:13:59Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nInside a functional component, an inner function with a dependency on value from an outer function triggers the warning, \"Outer scope values like '....' aren't valid dependencies because mutating them doesn't re-render the component.\"\r\n\r\nSee: https://codesandbox.io/s/custom-hook-repro-3wfly\r\n\r\nHere's the crux of the problem\r\n\r\n```tsx\r\nconst List = (props: IListProps) => {\r\n  const { items } = props;\r\n\r\n  // Using the useMemo hook here doesn't complain, e.g. -\r\n  // const names = useMemo(() => items.map(item => item.name), [items]);\r\n\r\n  // Using the useMemo hook inside a function complains\r\n  const names = useItemNames();\r\n\r\n  return (\r\n    <>\r\n      <h2>There are {items.length} items in the list</h2>\r\n      <section>\r\n        {names.map(name => (\r\n          <div>{name}</div>\r\n        ))}\r\n      </section>\r\n    </>\r\n  );\r\n\r\n  ////////////////////\r\n\r\n  function useItemNames() {\r\n    // es-lint warns here: Outer scope values like 'items' aren't valid dependencies \r\n    // because mutating them doesn't re-render the component\r\n    return useMemo(() => items.map(item => item.name), [items]);\r\n  }\r\n};\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe eslint rule shouldn't be triggered.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n* React v16.10.2\r\n* So far as I can tell, this hasn't worked previously."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17056",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17056/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17056/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17056/events",
        "html_url": "https://github.com/facebook/react/pull/17056",
        "id": 504890358,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzI2NDQ0Njc1",
        "number": 17056,
        "title": "fix typos",
        "user": {
          "login": "lupuselit",
          "id": 24904209,
          "node_id": "MDQ6VXNlcjI0OTA0MjA5",
          "avatar_url": "https://avatars1.githubusercontent.com/u/24904209?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lupuselit",
          "html_url": "https://github.com/lupuselit",
          "followers_url": "https://api.github.com/users/lupuselit/followers",
          "following_url": "https://api.github.com/users/lupuselit/following{/other_user}",
          "gists_url": "https://api.github.com/users/lupuselit/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lupuselit/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lupuselit/subscriptions",
          "organizations_url": "https://api.github.com/users/lupuselit/orgs",
          "repos_url": "https://api.github.com/users/lupuselit/repos",
          "events_url": "https://api.github.com/users/lupuselit/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lupuselit/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2019-10-09T20:56:06Z",
        "updated_at": "2019-11-07T16:59:14Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17056",
          "html_url": "https://github.com/facebook/react/pull/17056",
          "diff_url": "https://github.com/facebook/react/pull/17056.diff",
          "patch_url": "https://github.com/facebook/react/pull/17056.patch"
        },
        "body": "small typos fixed"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17048",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17048/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17048/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17048/events",
        "html_url": "https://github.com/facebook/react/issues/17048",
        "id": 504441649,
        "node_id": "MDU6SXNzdWU1MDQ0NDE2NDk=",
        "number": 17048,
        "title": "Bailouts for state updates behavior inconsistently for hooks",
        "user": {
          "login": "zxh19890103",
          "id": 11514991,
          "node_id": "MDQ6VXNlcjExNTE0OTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/11514991?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zxh19890103",
          "html_url": "https://github.com/zxh19890103",
          "followers_url": "https://api.github.com/users/zxh19890103/followers",
          "following_url": "https://api.github.com/users/zxh19890103/following{/other_user}",
          "gists_url": "https://api.github.com/users/zxh19890103/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zxh19890103/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zxh19890103/subscriptions",
          "organizations_url": "https://api.github.com/users/zxh19890103/orgs",
          "repos_url": "https://api.github.com/users/zxh19890103/repos",
          "events_url": "https://api.github.com/users/zxh19890103/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zxh19890103/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 10,
        "created_at": "2019-10-09T06:23:28Z",
        "updated_at": "2019-11-15T21:04:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is a bug I think.\r\n\r\nAs the title says, React didn't help me to merge the update requests.\r\n\r\n```js\r\nconst Player = ({ }) => {\r\n  const [name, setName] = useState('John Higgins',)\r\n  const [age, setAge] = useState(47)\r\n  const nextPlayer = () => {\r\n    setName('Mark Selby')\r\n    setAge(34)\r\n  }\r\n  console.log('render.')\r\n  return <p>\r\n    This player's name is {name}, {age} years.\r\n    <button type=\"button\" onClick={nextPlayer}>next</button>\r\n  </p>\r\n}\r\n```\r\n\r\nAfter the button clicked, it outputs:\r\n\r\n```shell\r\n>> render.\r\n>> render.\r\n```\r\n\r\nBut in fact, I got three.\r\n\r\n```shell\r\n>> render.\r\n>> render.\r\n>> render.\r\n```\r\n\r\nIt doesn't always be.\r\n\r\n\r\n## The actual code\r\n\r\n```ts\r\nconst List = ({}) => {\r\n\tconst [items, setItems] = useState<ListItem[]>([])\r\n\tconst [tick, setTick] = useState(0)\r\n\tconst [page, setPage] = useState(1)\r\n        \r\n        // # effect 001\r\n\tuseEffect(() => {\r\n           const refresh = tick > 1\r\n           load({ refresh, page })\r\n             .then(d => {\r\n                if (refresh) setItems(d) // replace\r\n                else setItems([...items, ...d]) // append\r\n             })\r\n        }, [tick, page])\r\n\r\n        // # effect 002\r\n        useEffect(() => {\r\n            testingScrollToBottom(() => {\r\n               setTick(0) // makes effect 001 applied.\r\n               setPage(page + 1) // makes effect 001 applied again.\r\n            })\r\n            return () => {\r\n                stopTestingScrollToBottom()\r\n            }\r\n        }, [page])\r\n        \r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setTick(tick + 1)\r\n                        setPage(1)\r\n                    }}>\r\n                    Refresh\r\n                </button>\r\n                { items.map(item => <Item item={item}/>) }\r\n            </div>\r\n        )\r\n}\r\n```\r\n\r\nFunction `testingScrollToBottom` is where the things happened. \r\n\r\nHere is what I did to avoid that:\r\n\r\n![image](https://user-images.githubusercontent.com/11514991/66693450-7a93a480-ecdb-11e9-80e4-4ee6caf931e8.png)\r\n\r\nBy the way, `testingScrollToBottom` uses `setTimeout`."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17033",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17033/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17033/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17033/events",
        "html_url": "https://github.com/facebook/react/issues/17033",
        "id": 503529466,
        "node_id": "MDU6SXNzdWU1MDM1Mjk0NjY=",
        "number": 17033,
        "title": "Annoying popup from chrome devtools wrongly telling me I'm using an old version of React",
        "user": {
          "login": "LukenAgile42",
          "id": 49654474,
          "node_id": "MDQ6VXNlcjQ5NjU0NDc0",
          "avatar_url": "https://avatars3.githubusercontent.com/u/49654474?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/LukenAgile42",
          "html_url": "https://github.com/LukenAgile42",
          "followers_url": "https://api.github.com/users/LukenAgile42/followers",
          "following_url": "https://api.github.com/users/LukenAgile42/following{/other_user}",
          "gists_url": "https://api.github.com/users/LukenAgile42/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/LukenAgile42/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/LukenAgile42/subscriptions",
          "organizations_url": "https://api.github.com/users/LukenAgile42/orgs",
          "repos_url": "https://api.github.com/users/LukenAgile42/repos",
          "events_url": "https://api.github.com/users/LukenAgile42/events{/privacy}",
          "received_events_url": "https://api.github.com/users/LukenAgile42/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 620368407,
            "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
            "name": "Resolution: Needs More Information",
            "color": "fffde7",
            "default": false,
            "description": null
          },
          {
            "id": 40929151,
            "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
            "name": "Type: Bug",
            "color": "b60205",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2019-10-07T15:32:38Z",
        "updated_at": "2019-11-14T11:21:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I am given a rather annoying popup message\r\n\r\n```\r\nUnsupported React version detected\r\nThis version of React DevTools supports React DOM v15+ and React Native v61+.\r\n\r\nIn order to use DevTools with an older version of React, you'll need to install an older version of the extension.\r\n```\r\n\r\nevery single time I want to use devtools.\r\n\r\nThis is NOT correct. I am using React 16.8 with a standard create-react-app build."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17028",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17028/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17028/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17028/events",
        "html_url": "https://github.com/facebook/react/issues/17028",
        "id": 503306794,
        "node_id": "MDU6SXNzdWU1MDMzMDY3OTQ=",
        "number": 17028,
        "title": "[Concurrent mode] Scheduled updates are lost when parent state update happens",
        "user": {
          "login": "albertogasparin",
          "id": 84136,
          "node_id": "MDQ6VXNlcjg0MTM2",
          "avatar_url": "https://avatars2.githubusercontent.com/u/84136?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/albertogasparin",
          "html_url": "https://github.com/albertogasparin",
          "followers_url": "https://api.github.com/users/albertogasparin/followers",
          "following_url": "https://api.github.com/users/albertogasparin/following{/other_user}",
          "gists_url": "https://api.github.com/users/albertogasparin/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/albertogasparin/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/albertogasparin/subscriptions",
          "organizations_url": "https://api.github.com/users/albertogasparin/orgs",
          "repos_url": "https://api.github.com/users/albertogasparin/repos",
          "events_url": "https://api.github.com/users/albertogasparin/events{/privacy}",
          "received_events_url": "https://api.github.com/users/albertogasparin/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-07T08:35:21Z",
        "updated_at": "2020-01-11T11:53:00Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n\r\n**What is the current behavior?**\r\nWhen in concurrent mode (render with `unstable_createRoot`), triggering a state change via an event (eg click) on the parent makes React loose the scheduled updates in the children. See:\r\n\r\nhttps://codesandbox.io/s/react-concurrent-state-bug-sp6zq\r\n\r\nNot an expert on concurrent mode here, was just playing around with it. Noticed that when some interactions happen the work (probably moved to the other tree) gets lost if the parent re-renders. You can see by clicking anywhere in the sandbox page vs clicking on the button that changes some local state. But that is just my educated guess on what might be happening.\r\n\r\n**What is the expected behavior?**\r\n\r\nState updates that are scheduled in children components should happen and the DOM value should reflect the state.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: 16.10.2\r\nreact-dom: 16.10.2"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17022",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17022/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17022/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17022/events",
        "html_url": "https://github.com/facebook/react/issues/17022",
        "id": 502938535,
        "node_id": "MDU6SXNzdWU1MDI5Mzg1MzU=",
        "number": 17022,
        "title": "Firefox: Autocomplete/Autofill not working",
        "user": {
          "login": "Hadsch",
          "id": 6314282,
          "node_id": "MDQ6VXNlcjYzMTQyODI=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6314282?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Hadsch",
          "html_url": "https://github.com/Hadsch",
          "followers_url": "https://api.github.com/users/Hadsch/followers",
          "following_url": "https://api.github.com/users/Hadsch/following{/other_user}",
          "gists_url": "https://api.github.com/users/Hadsch/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Hadsch/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Hadsch/subscriptions",
          "organizations_url": "https://api.github.com/users/Hadsch/orgs",
          "repos_url": "https://api.github.com/users/Hadsch/repos",
          "events_url": "https://api.github.com/users/Hadsch/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Hadsch/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1775957182,
            "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
            "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
            "name": "Resolution: Stale",
            "color": "e6e6e6",
            "default": false,
            "description": "Automatically closed due to inactivity"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-10-05T09:13:12Z",
        "updated_at": "2020-01-19T00:48:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nFirefox doesn’t show any autofill suggestions on an input  field with type \"text\" as soon as you connect the state with the  attribute \"value\"\r\n\r\n**Reproduce**\r\nhttps://codesandbox.io/embed/material-demo-y5mlt \r\n\r\n* Open the provided sandbox example\r\n* Write test in both input fields\r\n* Press button\r\n* Write t in both text fields\r\n\r\n_Important:_ This works corretly in Chrome but not in Firefox!\r\n\r\n**What is the expected behavior?**\r\nAutofill suggestions should be visible in Firefox too!\r\n\r\nAutofill is working (FF + Chrome) if value is handled by the browser\r\n\r\n      <input\r\n            id=\"component-simple1\"\r\n            autoComplete=\"on\"\r\n            onChange={handleChange}\r\n          />\r\n\r\nAutofill is NOT working (FF) if value is handled by React(!)\r\n\r\n        <input\r\n            id=\"component-simple1\"\r\n            autoComplete=\"on\"\r\n            onChange={handleChange}\r\n            value={name}\r\n          />\r\n\r\n**Some pictues which show the wrong behavior**\r\nIt is working as long as React does not handle the value with the state of the component (upper input field):\r\n![step01](https://user-images.githubusercontent.com/6314282/66252840-9d184180-e760-11e9-9801-46724c049d74.png)\r\n\r\nThe input field where React handles the value (`value={name}`) doesn't show autofill suggestions\r\n![step02](https://user-images.githubusercontent.com/6314282/66252884-f7b19d80-e760-11e9-969d-413c1aba6948.png)\r\n\r\n\r\n**Version**\r\n\r\nTech | Version\r\n-- | --\r\nReact | latest (see Sandbox)\r\nBrowser | Firefox 68.0.1(latest)\r\nOS | tested on Windows\r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17016",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17016/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17016/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17016/events",
        "html_url": "https://github.com/facebook/react/issues/17016",
        "id": 502557538,
        "node_id": "MDU6SXNzdWU1MDI1NTc1Mzg=",
        "number": 17016,
        "title": "synchronous setState makes manage-management w/ hooks very hard",
        "user": {
          "login": "drcmda",
          "id": 2223602,
          "node_id": "MDQ6VXNlcjIyMjM2MDI=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/2223602?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/drcmda",
          "html_url": "https://github.com/drcmda",
          "followers_url": "https://api.github.com/users/drcmda/followers",
          "following_url": "https://api.github.com/users/drcmda/following{/other_user}",
          "gists_url": "https://api.github.com/users/drcmda/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/drcmda/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/drcmda/subscriptions",
          "organizations_url": "https://api.github.com/users/drcmda/orgs",
          "repos_url": "https://api.github.com/users/drcmda/repos",
          "events_url": "https://api.github.com/users/drcmda/events{/privacy}",
          "received_events_url": "https://api.github.com/users/drcmda/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-10-04T10:27:54Z",
        "updated_at": "2019-12-11T03:53:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "It's about the dreaded \"zombie-child\" problem, which is a known problem, but i would still like to open this issue in order to track it. It currently throws a major wrench into our projects at work (which all use mixed reconcilers).\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI consider it a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nThe long explanation is here: https://kaihao.dev/posts/Stale-props-and-zombie-children-in-Redux\r\n\r\nIn short, when any dispatch, for instance via useState/useReducer.set(...), can cause an _immediate_ render pass, it allows leaf-components to render before their parents. Components that shouldn't even be rendering, because their parents would exclude them, now do render and access data which doesn't exist in the state model any longer. Rendering isn't deterministic and hierarchical any longer.\r\n\r\nDan Abramov acknowledges this behaviour here: https://twitter.com/dan_abramov/status/959507572951797761\r\n\r\nThe current solution that Sebastian Markbåge suggested is to wrap dispatches into batchedUpdates.\r\n\r\nBut that doesn't work in mixed-mode React, where multiple reconcilers are active. So the same component will work in one reconciler, but crash in another, unless the dispatch is wrapped into each batchedUpdates from each reconciler - which puts the burden onto the consumer of the component and makes the component platform dependent.\r\n\r\nThis problem affects all flex based state managers. Redux for instance. Some fail outright, some do implement batchedUpdates (like Redux), but they will all fail in mixed-mode.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://github.com/react-spring/zustand/issues/64\r\n\r\n**What is the expected behavior?**\r\n\r\nAs Dan Abramov himself said on Twitter, any dispatch should be async. But this was in feb 2018. Is there any news regarding this behaviour?\r\n\r\nThe churn outlined in the kaihao.dev article above, just to get simple state management, is almost overwhelming. Its conclusion is \"Our hands are tied, there's no solution yet to be known.\" I know this probably isn't a pressing issue, but i hope it can be prioritized."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17012",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17012/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17012/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17012/events",
        "html_url": "https://github.com/facebook/react/pull/17012",
        "id": 502482877,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzI0NTU0NTQ2",
        "number": 17012,
        "title": "chore: upgrade jsdom",
        "user": {
          "login": "SimenB",
          "id": 1404810,
          "node_id": "MDQ6VXNlcjE0MDQ4MTA=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/1404810?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/SimenB",
          "html_url": "https://github.com/SimenB",
          "followers_url": "https://api.github.com/users/SimenB/followers",
          "following_url": "https://api.github.com/users/SimenB/following{/other_user}",
          "gists_url": "https://api.github.com/users/SimenB/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/SimenB/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/SimenB/subscriptions",
          "organizations_url": "https://api.github.com/users/SimenB/orgs",
          "repos_url": "https://api.github.com/users/SimenB/repos",
          "events_url": "https://api.github.com/users/SimenB/events{/privacy}",
          "received_events_url": "https://api.github.com/users/SimenB/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2019-10-04T07:44:24Z",
        "updated_at": "2020-01-23T14:02:38Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/17012",
          "html_url": "https://github.com/facebook/react/pull/17012",
          "diff_url": "https://github.com/facebook/react/pull/17012.diff",
          "patch_url": "https://github.com/facebook/react/pull/17012.patch"
        },
        "body": "Following up on #15778, this is needed before being able to upgrade to Jest 25, which will have some significant performance improvements. Some tests for `style` properties are failing though, and I have no idea if it's due to jsdom or the tests themselves. I have some hope you'll know what's up yourselves 🤞  \r\n\r\nI tried upgrading to the Jest 25 alpha btw, and it fails in the same way, so if it's an issue with jsdom itself, it has not been fixed for jsdom@15 and it'd be great to report it to them.\r\n\r\n/cc @threepointone "
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17008",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17008/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17008/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17008/events",
        "html_url": "https://github.com/facebook/react/issues/17008",
        "id": 502310985,
        "node_id": "MDU6SXNzdWU1MDIzMTA5ODU=",
        "number": 17008,
        "title": "[eslint-plugin-react-hooks] Using typeof adds variable to list of necessary dependencies",
        "user": {
          "login": "wbobeirne",
          "id": 649992,
          "node_id": "MDQ6VXNlcjY0OTk5Mg==",
          "avatar_url": "https://avatars0.githubusercontent.com/u/649992?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/wbobeirne",
          "html_url": "https://github.com/wbobeirne",
          "followers_url": "https://api.github.com/users/wbobeirne/followers",
          "following_url": "https://api.github.com/users/wbobeirne/following{/other_user}",
          "gists_url": "https://api.github.com/users/wbobeirne/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/wbobeirne/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/wbobeirne/subscriptions",
          "organizations_url": "https://api.github.com/users/wbobeirne/orgs",
          "repos_url": "https://api.github.com/users/wbobeirne/repos",
          "events_url": "https://api.github.com/users/wbobeirne/events{/privacy}",
          "received_events_url": "https://api.github.com/users/wbobeirne/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-10-03T21:35:29Z",
        "updated_at": "2019-12-18T16:11:46Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIf you use Typescript's `typeof` keyword inside of a hook that `exhaustive-deps` watches for, it'll add the variable you `typeof`'d to the list of expected dependencies. However, there's no runtime effect to typeof, it's just for typing. Here's a test case where it'll warn you:\r\n\r\n```ts\r\nconst [state, setState] = useState(true);\r\n\r\nconst callback = useCallback((newState: typeof state) => {\r\n  setState(newState);\r\n}, []);\r\n```\r\n\r\nresults in\r\n\r\n> React Hook useCallback has a missing dependency: 'state'. Either include it or remove the dependency array.\r\n\r\n**What is the expected behavior?**\r\n\r\n`state` should not be an expected dependency\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`eslint-plugin-react-hooks@1.7.0`"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/17003",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/17003/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/17003/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/17003/events",
        "html_url": "https://github.com/facebook/react/issues/17003",
        "id": 502167180,
        "node_id": "MDU6SXNzdWU1MDIxNjcxODA=",
        "number": 17003,
        "title": "DevTools not properly shutting down between reloads in some cases",
        "user": {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        },
        "assignees": [
          {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-03T16:24:08Z",
        "updated_at": "2020-01-08T19:09:21Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Noticed this while testing the recently added \"highlight updates\" feature. It seems like relying on the content script's \"disconnect\" to shutdown things is too late, and we seem to be leaving at least an `Agent` (possibly more) connected.\r\n\r\nI think we may want to add some cleanup code to our initialization path (of the backend) to handle the case where a previous backend instance didn't get to finish shutting down."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16993",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16993/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16993/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16993/events",
        "html_url": "https://github.com/facebook/react/issues/16993",
        "id": 501749413,
        "node_id": "MDU6SXNzdWU1MDE3NDk0MTM=",
        "number": 16993,
        "title": "Add DevTools visualization for SSR hydration",
        "user": {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        },
        "assignees": [
          {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          },
          {
            "login": "sebmarkbage",
            "id": 63648,
            "node_id": "MDQ6VXNlcjYzNjQ4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
          }
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-10-02T22:01:29Z",
        "updated_at": "2020-01-08T19:09:21Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "This feature relates to several new React APIs: concurrent mode, suspense, and server rendering / hydration\r\n\r\n# Background info\r\nWhen hydrating server-rendered content, React starts working on the outermost Suspense boundary and works its way in. During hydration, the server rendered HTML isn't interactive. React records events to replay them once content becomes interactive- (but that doesn't actually happen until React finishes work on the nearest boundary and commits it). React may also reprioritize the order in which boundaries are processed (so that boundaries with pending events get processed sooner).\r\n\r\nThis general process can be hard to reason about and debug, because much of it is not observable visually (beyond some interactions potentially feeling more laggy than expected).\r\n\r\nDevTools already provides some visual overlays (e.g. which elements were rendered by the currently selected Component, [\"highlight updates\"](https://github.com/facebook/react/pull/16989)). Perhaps DevTools could help here too by visualizing which boundaries in the tree have been hydrated.\r\n\r\n# Visualizing hydration progress\r\n1. When React begins hydrating a new root<sup>1</sup> DevTools will show a visual overlay<sup>2</sup> that covers the entire DOM element container.\r\n1. As React hydrates and commits each new level of Suspense boundaries, DevTools will draw the overlay to only cover the not-yet-hydrated boundaries.\r\n1. Once hydration is completed, all overlays will be cleared<sup>3</sup>.\r\n\r\nThis feature would be opt-in via a new DevTools setting.\r\n\r\n<sup>1</sup> This suggests a new React-to-DevTools hook to inform DevTools when hydration starts.\r\n\r\n<sup>2</sup> This overlay would nee to be designed. Perhaps some combination of semi-transparent with stripes or bars so that it is high contrast enough to be seen.\r\n\r\n<sup>3</sup> Because the data required to draw these overlays is essentially just a timestamp and a set of rects, some form of replay might be a nice addition.\r\n\r\n# Special cases\r\nIt could be helpful to highlight a couple of special cases by temporarily showing a different style overlay:\r\n\r\n* **Client rendered content inside of a server rendered fallback.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2030-L2039)) In some cases, the server rendered content may be a forced fallback that gets filled in with client rendered content.\r\n* **React can't complete hydration fast enough to process a client-side update.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2064-L2074)) In this case, React ends up deleting the server-rendered content and replacing it with client rendered content. For example, a layout effect may set state on an ancestor that updates context. This update is synchronous (because it comes from within a layout effect) so it immediately expires.\r\n\r\nI don't know if the above cases can be reliably detected by DevTools at present. They may require additional information (or an additional React-to-DevTools hook).\r\n\r\nThe following case does **not** need to be highlighted because it is not a deopt:\r\n* **Server rendered content removed before hydration.** In some cases, server rendered content is thrown away before hydration completes because of a user interaction. For example, if the user navigates to a new page before the initial page has finished hydrating."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16988",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16988/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16988/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16988/events",
        "html_url": "https://github.com/facebook/react/issues/16988",
        "id": 501586885,
        "node_id": "MDU6SXNzdWU1MDE1ODY4ODU=",
        "number": 16988,
        "title": "React devtools blank (standalone version)",
        "user": {
          "login": "sshmyg",
          "id": 1410608,
          "node_id": "MDQ6VXNlcjE0MTA2MDg=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/1410608?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sshmyg",
          "html_url": "https://github.com/sshmyg",
          "followers_url": "https://api.github.com/users/sshmyg/followers",
          "following_url": "https://api.github.com/users/sshmyg/following{/other_user}",
          "gists_url": "https://api.github.com/users/sshmyg/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sshmyg/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sshmyg/subscriptions",
          "organizations_url": "https://api.github.com/users/sshmyg/orgs",
          "repos_url": "https://api.github.com/users/sshmyg/repos",
          "events_url": "https://api.github.com/users/sshmyg/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sshmyg/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 10,
        "created_at": "2019-10-02T16:09:34Z",
        "updated_at": "2019-11-26T17:02:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n![image](https://user-images.githubusercontent.com/1410608/66061174-96fb4880-e547-11e9-9623-0f1075bc78f6.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Open iOS simulator\r\n2. turn on debugging\r\n3. open react-devtools\r\n4. refresh iOS simulator\r\n\r\n**What is the expected behavior?**\r\nComponents tree is visible.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact-native@0.61.1\r\nOS: MacOS Mojave 10.14.6\r\n\r\n@bvaughn "
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16980",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16980/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16980/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16980/events",
        "html_url": "https://github.com/facebook/react/issues/16980",
        "id": 501223648,
        "node_id": "MDU6SXNzdWU1MDEyMjM2NDg=",
        "number": 16980,
        "title": "React DevTools recording commit without any component re-render",
        "user": {
          "login": "kentcdodds",
          "id": 1500684,
          "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kentcdodds",
          "html_url": "https://github.com/kentcdodds",
          "followers_url": "https://api.github.com/users/kentcdodds/followers",
          "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
          "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
          "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
          "repos_url": "https://api.github.com/users/kentcdodds/repos",
          "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
          "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 20,
        "created_at": "2019-10-02T01:20:38Z",
        "updated_at": "2019-11-26T19:50:04Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I'm struggling to make an isolated example of this, but the app where I found this is pretty simple so hopefully it's not too challenging to track down.\r\n\r\nSo I was profiling https://the-react-bookshelf.netlify.com (locally) and got this when I clicked on the \"login\" button:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011343-fe4dc580-e47f-11e9-9220-50ba884640f3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011358-0dcd0e80-e480-11e9-80fb-86c0f2196ef9.png)\r\n\r\nThe fact that there was no profile data for a commit is interesting. Each commit should be associated to a state update somewhere in the tree, and wherever that happened should trigger at least one component to re-render, but that didn't appear to happen here.\r\n\r\nI also verified that I don't have any components filtered out:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011428-57b5f480-e480-11e9-9e66-7cf86f8ba48f.png)\r\n\r\nAnd I didn't filter any commits either:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011433-5ab0e500-e480-11e9-97a8-be202351870d.png)\r\n\r\nHere's the exported profile data:\r\n\r\nhttps://gist.github.com/kentcdodds/dbff66043653333cd22cb9261a08550b\r\n\r\nAnd here's the repo where you can pull it down and reproduce yourself: https://github.com/kentcdodds/bookshelf. The component we're looking at is here: https://github.com/kentcdodds/bookshelf/blob/master/src/unauthenticated-app.js\r\n\r\nSorry I can't give a more direct reproduction."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16974",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16974/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16974/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16974/events",
        "html_url": "https://github.com/facebook/react/pull/16974",
        "id": 501010230,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzIzMzY1NDgz",
        "number": 16974,
        "title": "Add more descriptive error when a function call is passed to use memo",
        "user": {
          "login": "mattfwood",
          "id": 22530815,
          "node_id": "MDQ6VXNlcjIyNTMwODE1",
          "avatar_url": "https://avatars1.githubusercontent.com/u/22530815?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mattfwood",
          "html_url": "https://github.com/mattfwood",
          "followers_url": "https://api.github.com/users/mattfwood/followers",
          "following_url": "https://api.github.com/users/mattfwood/following{/other_user}",
          "gists_url": "https://api.github.com/users/mattfwood/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mattfwood/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mattfwood/subscriptions",
          "organizations_url": "https://api.github.com/users/mattfwood/orgs",
          "repos_url": "https://api.github.com/users/mattfwood/repos",
          "events_url": "https://api.github.com/users/mattfwood/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mattfwood/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-10-01T16:31:06Z",
        "updated_at": "2019-11-05T20:04:14Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/16974",
          "html_url": "https://github.com/facebook/react/pull/16974",
          "diff_url": "https://github.com/facebook/react/pull/16974.diff",
          "patch_url": "https://github.com/facebook/react/pull/16974.patch"
        },
        "body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n\r\n![image](https://user-images.githubusercontent.com/22530815/65981398-9d51cd80-e43e-11e9-9963-58bd1b1f83ad.png)\r\n\r\nCurrently if you accidentally pass a function call to useMemo instead of a function reference, you get an error like the one above, which doesn't really point a dev in the right direction.\r\n\r\n```javascript\r\n// right:\r\nuseMemo(() => calculate(numbers), [numbers])\r\n\r\n// wrong\r\nuseMemo(calculate(1,2), [numbers]) // => throws 'nextCreate is not a function'\r\n```\r\n\r\nI've added an invariant warning if anything other than a function is passed to `useMemo`"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16965",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16965/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16965/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16965/events",
        "html_url": "https://github.com/facebook/react/issues/16965",
        "id": 500570869,
        "node_id": "MDU6SXNzdWU1MDA1NzA4Njk=",
        "number": 16965,
        "title": "Devtools Inspect Button Doesn't Work with Repeat Selections",
        "user": {
          "login": "lunaruan",
          "id": 2735514,
          "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
          "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lunaruan",
          "html_url": "https://github.com/lunaruan",
          "followers_url": "https://api.github.com/users/lunaruan/followers",
          "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
          "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
          "organizations_url": "https://api.github.com/users/lunaruan/orgs",
          "repos_url": "https://api.github.com/users/lunaruan/repos",
          "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lunaruan/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710573595,
            "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
            "name": "Component: Developer Tools",
            "color": "fbca04",
            "default": false,
            "description": null
          },
          {
            "id": 1775958285,
            "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
            "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
            "name": "React Core Team",
            "color": "9149d1",
            "default": false,
            "description": "Opened by a member of the React Core Team"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        },
        "assignees": [
          {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-09-30T23:07:10Z",
        "updated_at": "2020-01-08T19:09:20Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Maybe we can detect this case by checking $0 and if not we can temporarily select null before reselecting. (?)"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16956",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16956/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16956/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16956/events",
        "html_url": "https://github.com/facebook/react/issues/16956",
        "id": 500206671,
        "node_id": "MDU6SXNzdWU1MDAyMDY2NzE=",
        "number": 16956,
        "title": "Design decision: why do we need the stale closure problem in the first place?",
        "user": {
          "login": "slorber",
          "id": 749374,
          "node_id": "MDQ6VXNlcjc0OTM3NA==",
          "avatar_url": "https://avatars0.githubusercontent.com/u/749374?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/slorber",
          "html_url": "https://github.com/slorber",
          "followers_url": "https://api.github.com/users/slorber/followers",
          "following_url": "https://api.github.com/users/slorber/following{/other_user}",
          "gists_url": "https://api.github.com/users/slorber/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/slorber/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/slorber/subscriptions",
          "organizations_url": "https://api.github.com/users/slorber/orgs",
          "repos_url": "https://api.github.com/users/slorber/repos",
          "events_url": "https://api.github.com/users/slorber/events{/privacy}",
          "received_events_url": "https://api.github.com/users/slorber/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 10,
        "created_at": "2019-09-30T11:07:44Z",
        "updated_at": "2020-01-21T10:38:08Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Hi,\r\n\r\nI initially asked this on Twitter and @gaearon suggested me to open an issue instead.\r\nThe original thread is here: https://twitter.com/sebastienlorber/status/1178328607376232449?s=19\r\nMore easy to read here: https://threadreaderapp.com/thread/1178328607376232449.html\r\nBut will try to make this issue more clear and structured about my args and questions.\r\n\r\nDon't get me wrong, I really like hooks, but wonder if we can't have smarter abstractions and official patterns that make dealing with them more easy for authors and consumers.\r\n\r\n--------------------------------------\r\n\r\n## Workaround for the stale closure\r\n\r\nAfter using hooks for a while, and being familiar with the stale closure problem, I don't really understand why we need to handle closure dependencies, instead of just doing something like the following code, which always executes latest provided closure (capturing fresh variables)\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869094-f7d52600-e379-11e9-9634-1ab06b41e3ca.png)\r\n\r\nCoupling the dependencies of the closure and the conditions to trigger effect re-execution does not make much sense to me. For me it's perfectly valid to want to capture some variables in the closure, yet when those variables change we don't necessarily want to re-execute.\r\n\r\nThere are many cases where people are using refs to \"stabilize\" some value that should not trigger re-execution, or to access fresh values in closures.\r\n\r\nExamples in major libs includes:\r\n- Formik (code is pretty similar to my \"useSafeEffect\" above): https://github.com/jaredpalmer/formik/blob/master/src/Formik.tsx#L975\r\n- React-redux, which uses refs to access fresh props: https://github.com/reduxjs/react-redux/blob/b6b47995acfb8c1ff5d04a31c14aa75f112a47ab/src/components/connectAdvanced.js#L286\r\n\r\nAlso @Andarist (who maintains a few important React libs for a while): \r\n\r\n![image](https://user-images.githubusercontent.com/749374/65872332-9d8b9380-e380-11e9-90b3-bf294991bb82.png)\r\n\r\n\r\nWe often find in such codebase the \"useIsomorphicLayoutEffect\" hook which permits to ensure that the ref is set the earliest, and try to avoid the useLayoutEffect warning (see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85). What we are doing here seems unrelated to layout and makes me a bit uncomfortable btw.\r\n\r\n\r\n\r\n## Do we need an ESLint rule?\r\n\r\nThe ESLint rule looks to me only useful to avoid the stale closure problem. Without the stale closure problem (which the trick above solves), you can just focus on crafting the array/conditions for effect re-execution and don't need ESLint for that.\r\n\r\nAlso this would make it easier to wrap useEffect in userland without the fear to exposing users to stale closure problem, because eslint plugin won't notice missing dependencies for custom hooks.\r\n\r\nHere's some code for react-navigation (alpha/v5). To me this is weird to have to ask the user to \"useCallback\" just to stabilize the closure of useFocusEffect, just to ensure the effect only runs on messageId change.\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869719-3d462300-e37b-11e9-94d2-5200481588bc.png)\r\n\r\nNot sure to understand why we can't simply use the following instead. For which I don't see the point of using any ESLint rule. I just want the effect to run on messageId change, this is explicit enough for me and there's no \"trap\"\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869777-564ed400-e37b-11e9-8570-12534e5f2a53.png)\r\n\r\nI've heard that the [React team recommends rather the later](https://twitter.com/satya164/status/1178571088172896256), asking the user to useCallback, instead of building custom hooks taking a dependency array, why exactly? Also heard that the ESLint plugin now was able to detect missing deps in a custom hook, if you add the [hook name to ESLint conf](https://twitter.com/n1rual/status/1178568248062877701). Not, sure what to think we are supposed to do in the end.\r\n\r\n## Are we safe using workarounds?\r\n\r\nIt's still a bit hard for me to be sure which kind of code is \"safe\" regarding React's upcoming features, particularly Concurrent Mode. \r\n\r\nIf I use the `useEffectSafe` above or something equivalent relying on refs, I am safe and future proof?\r\n\r\nIf this is safe, and makes my life easier, why do I have to build this abstraction myself? \r\n\r\nWouldn't it make sense to make this kind of pattern more \"official\" / documented?\r\n\r\nI keep adding this kind of code to every project I work with:\r\n\r\n```tsx \r\nconst useGetter = <S>(value: S): (() => S) => {\r\n  const ref = useRef(value);\r\n  useIsomorphicLayoutEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return useCallback(() => ref.current, [ref]);\r\n};\r\n```\r\n(including important community projects like [react-navigation-hooks](https://github.com/react-navigation/hooks/blob/master/src/Hooks.ts#L46))\r\n\r\n## Is it a strategy to teach users?\r\n\r\nIs it a choice of the React team to not ship safer abstractions officially and make sure the users hit the closure problem early and get familiar with it? \r\n\r\nBecause anyway, even when using getters, we still can't prevent the user to capture some value. This has been documented by @sebmarkbage [here](https://gist.github.com/sebmarkbage/a5ef436427437a98408672108df01919) with async code, even with a getter, we can't prevent the user to do things like:\r\n\r\n```tsx\r\nonMount(async () => {\r\n  let isEligible = getIsEligible();\r\n  let data = await fetch(...);\r\n  // at this point, isEligible might has changed: we should rather use `getIsEligible()` again instead of storing a boolean in the closure (might depend on the usecase though, but maybe we can imagine isEligible => isMounted)\r\n  if (isEligible) {\r\n    doStuff(data);\r\n  }\r\n});\r\n```  \r\nAs far as I understand, this might be the case:\r\n\r\n> So you can easily get into the same situation even with a mutable source value. React just makes you always deal with it so that you don't get too far down the road before you have to refactor you code to deal with these cases anyway. I'm really glad how well the React community has dealt with this since the release of hooks because it really sets us up to predictably deal with more complex scenario and for doing more things in the future.\r\n\r\n\r\n## A concrete problem\r\n\r\nA react-navigation-hooks user reported that his effect run too much, using the following code:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65870979-bf374b80-e37d-11e9-8a6c-1f7df8503c18.png)\r\n\r\nIn practice, this is because react-navigation core does not provide stable `navigate` function, and thus the hooks too. The core does not necessarily want to \"stabilize\" the navigate function and guarantee that contract in its API.\r\n\r\nIt's not clear to me what should I do, between officially stabilizing the `navigate` function in the hooks project (relying on core, so core can still return distinct navigate functions), or if I should ask the user to stabilize the function himself in userland, leading to pain and boilerplate for many users trying to use the API.\r\n\r\nI don't understand why you can't simply dissociate the closure dependencies to the effect's triggering, and simply omitting the `navigate` function here:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65871264-51d7ea80-e37e-11e9-837d-291775853b2e.png)\r\n\r\n\r\nWhat bothers me is that somehow as hooks lib authors we now have to think about whether what we return to the user is stable or not, ie safe to use in an effect dependency array without unwanted effect re-executions.\r\n\r\nReturning a stable value in v1 and unstable in v2 is a breaking change that might break users apps in nasty ways, and we have to document this too in our api doc, or ask the user to not trust us, and do the memoization work themselves, which is quite error prone and verbose. Now as lib authors we have to think not only about the inputs/outputs, but also about preserving identities or not (it's probably not a new problem, because we already need to in userland for optimisations anyway).\r\n\r\nAsking users to do this memoization themselves is error prone and verbose. And intuitively some people will maybe want to `useMemo` (just because of the naming) which actually can tricks them by not offering the same guarantees than `useCallback`.\r\n\r\n\r\n## A tradeoff between different usecases in the name of a consistent API?\r\n\r\n@satya164 also mentionned that there are also usecases where the [ESLint plugin saved him](https://twitter.com/satya164/status/1178395620236759043) more than once because he forgot some dependency, and for him, it's more easy to fix an effect re-executing too much than to find out about some cached value not updating. \r\n\r\nI see how the ESLint plugin is really handy for usecases such as building a stable object to optimize renders or provide a stable context value. \r\n\r\nBut for useEffect, when capturing functions, sometimes executing 2 functions with distinct identities actually lead to the same result. Having to add those functions to dependencies is quite annoying in such case. \r\n\r\nBut I totally understand we want to guarantee some kind of consistency across all hooks API.\r\n\r\n## Conclusion\r\n\r\nI try to understand some of the tradeoffs being made in the API. Not sure to understand yet the whole picture, and I'm probably not alone. \r\n\r\n@gaearon said to open an issue with a comment: `It's more nuanced`. I'm here to discuss all the nuances if possible :)\r\n\r\nWhat particularly bothers me currently is not necessarily the existing API. It's rather:\r\n- the dogmatism of absolutely wanting to conform the ESLint rules (for which I don't agree with for all usecases). Currently I think users are really afraid to not follow the rules.\r\n- the lack of official patterns on how we are supposed to handle some specific hooks cases. And I think the \"getter\" pattern should be a thing that every hooks users know about and learn very early. Eventually adding such pattern in core would make it even more visible. Currently it's more lib authors and tech leads that all find out about this pattern in userland with small implementation variations.\r\n\r\nThose are the solutions that I think of. As I said I may miss something important and may change my opinions according to the answers.\r\n\r\nAs an author of a few React libs, I feel a bit frustrated to not be 100% sure what kind of API contract I should offer to my lib's users. I'm also not sure about the hooks patterns I can recommend or not. I plan to open-source something soon but don't even know if that's a good idea, and if it goes in the direction the React team want to go with hooks.\r\n\r\nThanks\r\n\r\n\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16955",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16955/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16955/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16955/events",
        "html_url": "https://github.com/facebook/react/issues/16955",
        "id": 500116330,
        "node_id": "MDU6SXNzdWU1MDAxMTYzMzA=",
        "number": 16955,
        "title": "When SSR returns a field that is inconsistent with the client side, the client side should prevail",
        "user": {
          "login": "leiyourong",
          "id": 17899723,
          "node_id": "MDQ6VXNlcjE3ODk5NzIz",
          "avatar_url": "https://avatars1.githubusercontent.com/u/17899723?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/leiyourong",
          "html_url": "https://github.com/leiyourong",
          "followers_url": "https://api.github.com/users/leiyourong/followers",
          "following_url": "https://api.github.com/users/leiyourong/following{/other_user}",
          "gists_url": "https://api.github.com/users/leiyourong/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/leiyourong/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/leiyourong/subscriptions",
          "organizations_url": "https://api.github.com/users/leiyourong/orgs",
          "repos_url": "https://api.github.com/users/leiyourong/repos",
          "events_url": "https://api.github.com/users/leiyourong/events{/privacy}",
          "received_events_url": "https://api.github.com/users/leiyourong/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-09-30T08:02:34Z",
        "updated_at": "2019-10-30T07:27:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "There is the demo:\r\n\r\nreturn page(HTML) is: \r\n```\r\n<html>\r\n <head>\r\n    ...\r\n </head>\r\n  <body>\r\n    <div id='react'>\r\n      <div id=\"level1\">\r\n        <div id=\"level21\">22</div>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nAnd the root Component is:\r\n```\r\nclass App extends React.Component {\r\n  render () {\r\n    return (\r\n      <div id=\"level1\">\r\n        <div id=\"level211\">221</div>\r\n        <div className=\"level33\">33</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nhydrate(\r\n  <App />,\r\n  document.getElementById('react')\r\n)\r\n```\r\n\r\nFinally the page dom will be rendered as:\r\n```\r\n<body>\r\n    <div id=\"react\">\r\n           <div id=\"level1\">\r\n                <div id=\"level21\">221</div>\r\n                <div class=\"level33\">33</div>\r\n          </div>\r\n   </div>\r\n</body>\r\n```\r\n\r\nIt seems that the id of the first child of div#level1 is incorrect.\r\n\r\nReact & ReactDom version: 16.8.6"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16954",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16954/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16954/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16954/events",
        "html_url": "https://github.com/facebook/react/issues/16954",
        "id": 499977709,
        "node_id": "MDU6SXNzdWU0OTk5Nzc3MDk=",
        "number": 16954,
        "title": "Why will Suspense for data fetching require a cache?",
        "user": {
          "login": "ghengeveld",
          "id": 321738,
          "node_id": "MDQ6VXNlcjMyMTczOA==",
          "avatar_url": "https://avatars1.githubusercontent.com/u/321738?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ghengeveld",
          "html_url": "https://github.com/ghengeveld",
          "followers_url": "https://api.github.com/users/ghengeveld/followers",
          "following_url": "https://api.github.com/users/ghengeveld/following{/other_user}",
          "gists_url": "https://api.github.com/users/ghengeveld/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ghengeveld/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ghengeveld/subscriptions",
          "organizations_url": "https://api.github.com/users/ghengeveld/orgs",
          "repos_url": "https://api.github.com/users/ghengeveld/repos",
          "events_url": "https://api.github.com/users/ghengeveld/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ghengeveld/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-09-29T21:56:33Z",
        "updated_at": "2020-01-10T10:03:57Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I'm [integrating Suspense with React Async](https://github.com/async-library/react-async/pull/153), and I've been reading up on how it's supposed to work. All the resources I found talk about needing `react-cache` or another cache mechanism for Suspense to work properly. However, none of the resources explain WHY Suspense needs a cache. Could someone explain that? I've been able to [make it work without a cache](https://github.com/async-library/react-async/pull/153/files#diff-2d8d9c51cb93c9f7f57c81f6f7f1669a). Am I missing something?"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16948",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16948/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16948/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16948/events",
        "html_url": "https://github.com/facebook/react/issues/16948",
        "id": 499813656,
        "node_id": "MDU6SXNzdWU0OTk4MTM2NTY=",
        "number": 16948,
        "title": "Request: Create an ESLint Plugin for warnings and depreciations that will impact major upgrades",
        "user": {
          "login": "Aghassi",
          "id": 3680126,
          "node_id": "MDQ6VXNlcjM2ODAxMjY=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/3680126?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Aghassi",
          "html_url": "https://github.com/Aghassi",
          "followers_url": "https://api.github.com/users/Aghassi/followers",
          "following_url": "https://api.github.com/users/Aghassi/following{/other_user}",
          "gists_url": "https://api.github.com/users/Aghassi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Aghassi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Aghassi/subscriptions",
          "organizations_url": "https://api.github.com/users/Aghassi/orgs",
          "repos_url": "https://api.github.com/users/Aghassi/repos",
          "events_url": "https://api.github.com/users/Aghassi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Aghassi/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
    
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-09-28T19:44:12Z",
        "updated_at": "2020-01-10T00:22:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nReact currently does console output to the browser console to tell developers that they need to be aware of major changes coming so that upgrades will be seamless for them. This works well on smaller sites, or in a situation where your company may have a monorepo and can enforce and track these warnings.\r\n\r\n**What is the expected behavior?**\r\nIn addition to this behavior, it would be beneficial to React developers if they could have ESLint plugins that had rules for these warnings. Ideally, the ESLint plugin could fix simple cases (methods being renamed) and in more complex cases recommend a codemod.\r\n\r\n——-\r\n\r\nI’m posting this here as per discussion with @acdlite on twitter. See this thread: https://twitter.com/acdlite/status/1178018850937290753?s=21\r\n\r\nUltimately, it is harder for shops that do micro frontends to ensure everyone is compliant with new React versions. It is also easier to catch things early at build time then to dig around in the browser runtime when there may be other compounding issues.\r\n\r\nThe other benefit of this would be that it would enable third party libraries to potentially have “day 1 support” for new major React versions because they could follow the rule set and ensure that they are forwards compatible without being caught trying to do it all at once.\r\n\r\nLastly, I’m happy to help drive/contribute to any rule set to make sure it works in our use case.\r\n"
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16912",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16912/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16912/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16912/events",
        "html_url": "https://github.com/facebook/react/pull/16912",
        "id": 499115146,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzIxOTA2NjUw",
        "number": 16912,
        "title": "Document `additionalHooks` option",
        "user": {
          "login": "airjp73",
          "id": 25882770,
          "node_id": "MDQ6VXNlcjI1ODgyNzcw",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25882770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/airjp73",
          "html_url": "https://github.com/airjp73",
          "followers_url": "https://api.github.com/users/airjp73/followers",
          "following_url": "https://api.github.com/users/airjp73/following{/other_user}",
          "gists_url": "https://api.github.com/users/airjp73/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/airjp73/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/airjp73/subscriptions",
          "organizations_url": "https://api.github.com/users/airjp73/orgs",
          "repos_url": "https://api.github.com/users/airjp73/repos",
          "events_url": "https://api.github.com/users/airjp73/events{/privacy}",
          "received_events_url": "https://api.github.com/users/airjp73/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 196858374,
            "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
            "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
            "name": "CLA Signed",
            "color": "e7e7e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-09-26T21:03:11Z",
        "updated_at": "2019-12-19T05:27:14Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
          "url": "https://api.github.com/repos/facebook/react/pulls/16912",
          "html_url": "https://github.com/facebook/react/pull/16912",
          "diff_url": "https://github.com/facebook/react/pull/16912.diff",
          "patch_url": "https://github.com/facebook/react/pull/16912.patch"
        },
        "body": "Hi!\r\n\r\nI noticed that there doesn't seem to be any documentation about this option for `exhaustive-deps`. Was this a deliberate decision or an oversight? Obviously, feel free to decline this if you don't want to do this or this is the wrong place.\r\n\r\nI recently used this for a custom hook at work and it's pretty useful but I'm a little uneasy about using undocumented features."
      },
      {
        "url": "https://api.github.com/repos/facebook/react/issues/16904",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/16904/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/16904/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/16904/events",
        "html_url": "https://github.com/facebook/react/issues/16904",
        "id": 498916121,
        "node_id": "MDU6SXNzdWU0OTg5MTYxMjE=",
        "number": 16904,
        "title": "More time between releasing @next and @latest",
        "user": {
          "login": "ghengeveld",
          "id": 321738,
          "node_id": "MDQ6VXNlcjMyMTczOA==",
          "avatar_url": "https://avatars1.githubusercontent.com/u/321738?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ghengeveld",
          "html_url": "https://github.com/ghengeveld",
          "followers_url": "https://api.github.com/users/ghengeveld/followers",
          "following_url": "https://api.github.com/users/ghengeveld/following{/other_user}",
          "gists_url": "https://api.github.com/users/ghengeveld/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ghengeveld/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ghengeveld/subscriptions",
          "organizations_url": "https://api.github.com/users/ghengeveld/orgs",
          "repos_url": "https://api.github.com/users/ghengeveld/repos",
          "events_url": "https://api.github.com/users/ghengeveld/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ghengeveld/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 710375792,
            "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
            "name": "Type: Discussion",
            "color": "fef2c0",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [
    
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-09-26T14:18:06Z",
        "updated_at": "2019-09-27T06:31:53Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "As a library author, I test against both the `@next` and `@latest` versions of `react` and `react-dom` (as well as 16.3, the oldest version we support). The rationale for that is to know up front if the upcoming version of React is going to break our library. I think this is good practice for everyone involved.\r\n\r\nUnfortunately, when 16.9 was released, there was only 1 week between promoting the RC to `@next`, and promoting that to `@latest`. Because the last RC broke the way `act` works, I had only 1 week to fix our unit test suite, which was all the sudden mostly failing. In fact we had to wait for `react-testing-library` to be updated to deal with this change.\r\n\r\nLuckily I was able to scramble and find time to fix this before the final release, but this won't always be the case. I imagine other library authors may struggle with this too. As such I would like to see at least a 2 week window between `next` and `latest`. I hope that's feasible.\r\n\r\nPlease advise if there's a better way to test for future compatibility."
      },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15484",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15484/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15484/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15484/events",
          "html_url": "https://github.com/facebook/react/issues/15484",
          "id": 436617632,
          "node_id": "MDU6SXNzdWU0MzY2MTc2MzI=",
          "number": 15484,
          "title": "An error in render() + boundary behaves unexpectedly on ReactDOM.hydrate()",
          "user": {
            "login": "Rendez",
            "id": 61776,
            "node_id": "MDQ6VXNlcjYxNzc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/61776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Rendez",
            "html_url": "https://github.com/Rendez",
            "followers_url": "https://api.github.com/users/Rendez/followers",
            "following_url": "https://api.github.com/users/Rendez/following{/other_user}",
            "gists_url": "https://api.github.com/users/Rendez/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Rendez/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Rendez/subscriptions",
            "organizations_url": "https://api.github.com/users/Rendez/orgs",
            "repos_url": "https://api.github.com/users/Rendez/repos",
            "events_url": "https://api.github.com/users/Rendez/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Rendez/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710332294,
              "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
              "name": "Component: Server Rendering",
              "color": "d4c5f9",
              "default": false,
              "description": null
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-04-24T10:27:18Z",
          "updated_at": "2019-04-26T06:33:32Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "From the React.org docs:\r\n> Error boundaries preserve the declarative nature of React, [...] somewhere deep in the tree, **it will still correctly propagate to the closest error boundary.**\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI am not sure if this is a bug or intended behavior, because it only happens with `ReactDOM.hydrate` when an error is thrown only within `render`.\r\n\r\n**What is the current behavior?**\r\nIf an error is thrown in the `render()` method of any component, the error boundary at any given top-level renders its fallback exactly where that component is, instead of where the error boundary is defined.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/74kmwk3o1j\r\n\r\n**What is the expected behavior?**\r\nJust like it `ReactDOM.hydrate` behaves if the error happens in `componentDidMount`, the error boundary's fallback should be rendered where the error boundary element is actually declared.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nv16.8.6 on Chrome, haven't tested previous versions, but I think to remember this working correctly when we upgraded to v16 and added our top-level, page boundary.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15446",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15446/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15446/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15446/events",
          "html_url": "https://github.com/facebook/react/issues/15446",
          "id": 434847956,
          "node_id": "MDU6SXNzdWU0MzQ4NDc5NTY=",
          "number": 15446,
          "title": "Events before Client Side Hydration",
          "user": {
            "login": "aralroca",
            "id": 13313058,
            "node_id": "MDQ6VXNlcjEzMzEzMDU4",
            "avatar_url": "https://avatars3.githubusercontent.com/u/13313058?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aralroca",
            "html_url": "https://github.com/aralroca",
            "followers_url": "https://api.github.com/users/aralroca/followers",
            "following_url": "https://api.github.com/users/aralroca/following{/other_user}",
            "gists_url": "https://api.github.com/users/aralroca/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aralroca/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aralroca/subscriptions",
            "organizations_url": "https://api.github.com/users/aralroca/orgs",
            "repos_url": "https://api.github.com/users/aralroca/repos",
            "events_url": "https://api.github.com/users/aralroca/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aralroca/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
      
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 13,
          "created_at": "2019-04-18T16:09:41Z",
          "updated_at": "2019-12-03T09:59:04Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "Recently I detected a problem using React in SSR. Maybe is quite obvious, but all the JavaScript events that are fired before the JavaScript is loaded, are lost...\r\n\r\nThis is something normal. The JS is not there yet... Ok. However, I expect to have some utility to do some exceptions.\r\n\r\nI'm going to try to explain my case:\r\n\r\nI'm using an image, and in the event `onError`, I want to change the src to render a fallback image.\r\n\r\n```jsx\r\nfunction Img(props) {\r\n  return (\r\n    <img {...props} onError={e => { e.target.src = fallbackSrc } } />\r\n  )\r\n}\r\n```\r\n\r\nNevertheless, this code loaded from SSR, is working \"sometimes\"... I guess that this \"sometimes\" is because if the event is fired before the client side hydration. Is not catched by my JS. And the `e => e.target.src = fallbackSrc` is never executed. However, if the JS is loaded faster than the onError event, is catched, and is rendering the fallback image as I expected.\r\n\r\nI want to propose some utility to do sometimes some exceptions, and render the JS inline on the first render. Perhaps, adding some extra config in `ReactDOM.hydrate`? I dunno... \r\n\r\nOr maybe someone can help me providing any tip in order to fix this?\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15439",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15439/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15439/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15439/events",
          "html_url": "https://github.com/facebook/react/issues/15439",
          "id": 434688004,
          "node_id": "MDU6SXNzdWU0MzQ2ODgwMDQ=",
          "number": 15439,
          "title": "act() should warn in testing frameworks besides jest ",
          "user": {
            "login": "threepointone",
            "id": 18808,
            "node_id": "MDQ6VXNlcjE4ODA4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/threepointone",
            "html_url": "https://github.com/threepointone",
            "followers_url": "https://api.github.com/users/threepointone/followers",
            "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
            "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
            "organizations_url": "https://api.github.com/users/threepointone/orgs",
            "repos_url": "https://api.github.com/users/threepointone/repos",
            "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/threepointone/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 139734344,
              "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
              "name": "Component: Test Utils",
              "color": "eb6420",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            },
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 0,
          "created_at": "2019-04-18T09:59:04Z",
          "updated_at": "2020-01-08T19:12:59Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature request\r\n\r\n**What is the current behavior?**\r\n\r\nThe warnings for missing act() warnings around updates only happen in jest. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe should support other test runners/frameworks as well (like jasmine, karma, etc)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.0+"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15435",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15435/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15435/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15435/events",
          "html_url": "https://github.com/facebook/react/issues/15435",
          "id": 434455286,
          "node_id": "MDU6SXNzdWU0MzQ0NTUyODY=",
          "number": 15435,
          "title": "Add useReactPath hook for reflection and stable IDs",
          "user": {
            "login": "mike-marcacci",
            "id": 690517,
            "node_id": "MDQ6VXNlcjY5MDUxNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/690517?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mike-marcacci",
            "html_url": "https://github.com/mike-marcacci",
            "followers_url": "https://api.github.com/users/mike-marcacci/followers",
            "following_url": "https://api.github.com/users/mike-marcacci/following{/other_user}",
            "gists_url": "https://api.github.com/users/mike-marcacci/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mike-marcacci/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mike-marcacci/subscriptions",
            "organizations_url": "https://api.github.com/users/mike-marcacci/orgs",
            "repos_url": "https://api.github.com/users/mike-marcacci/repos",
            "events_url": "https://api.github.com/users/mike-marcacci/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mike-marcacci/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
      
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 10,
          "created_at": "2019-04-17T19:46:56Z",
          "updated_at": "2020-01-10T19:43:55Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature: this is a proposal that would solve #1137 and other similar cases by providing a reflection hook that retrieves the path in the react tree to a component.\r\n\r\n**What is the current behavior?**\r\nThere is currently no mechanism for finding a component's path in the react component tree without using unstable, internal APIs.\r\n\r\n**What is the expected behavior?**\r\nThere are a wide range of use-cases that require stable, unique namespaces that are stable across app instances.\r\n\r\nMy particular use case is rendering SVGs that include `<defs>` blocks. The challenge is that these definitions are all globally scoped. It's fairly easy to get around this by prefixing these definitions with an id that is stable and unique to the component instance:\r\n\r\n```jsx\r\nimport { useMemo, ReactElement } from \"react\";\r\n\r\nfunction gen(): string {\r\n  return Math.random()\r\n    .toString(36)\r\n    .substr(2, 5);\r\n}\r\n\r\nfunction useUniqueId(): string {\r\n  return useMemo(gen, []);\r\n}\r\n\r\nfunction SomeComponent(): ReactElement {\r\n  const id = useUniqueId();\r\n  return (\r\n    <svg>\r\n      <defs>\r\n        <circle id={`${id}-myCircle`} cx=\"0\" cy=\"0\" r=\"5\" />\r\n      </defs>\r\n\r\n      <use x=\"5\" y=\"5\" xlink:href={`#${id}-myCircle`} fill=\"red\" />\r\n    </svg>\r\n  )\r\n}\r\n\r\n```\r\n\r\nWhile this works well, the generated ID is different each time a component is instantiated. This means that it's not possible to safely rehydrate server-rendered SVGs, as the HTML will have the wrong prefix.\r\n\r\nInstead, I would like a hook that provides the react path to the current component. For example:\r\n\r\n```jsx\r\nfunction SomeComponent(): ReactElement {\r\n  const path = useReactPath();\r\n  return <pre>{JSON.stringify(path, null, 2)}</pre>\r\n}\r\n\r\n// somewhere else:\r\n\r\n<div>\r\n  <div>Foo</div>\r\n  <div>{[\r\n    <div key=\"bar\">Bar</div>,\r\n    <div key=\"baz\">\r\n      Baz\r\n      <SomeComponent />\r\n    </div>\r\n  ]}</div>\r\n</div>\r\n```\r\n\r\nWe would expect the path to be:\r\n```js\r\n[\r\n  1,     // after the <div>Foo</div> block\r\n  0,     // the interpolation block\r\n  \"baz\", // the array specifies keys\r\n  1      // after the Baz text block\r\n]\r\n```\r\n\r\nThis array could then be used much like an XPath for testing automation purposes, or hashed into a unique ID or prefix, for purposes like mine.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis has never been possible.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15418",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15418/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15418/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15418/events",
          "html_url": "https://github.com/facebook/react/issues/15418",
          "id": 433157743,
          "node_id": "MDU6SXNzdWU0MzMxNTc3NDM=",
          "number": 15418,
          "title": "Field type=\"email\" with multiple attribute cursor jumps to start",
          "user": {
            "login": "jordyvg",
            "id": 20287756,
            "node_id": "MDQ6VXNlcjIwMjg3NzU2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/20287756?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jordyvg",
            "html_url": "https://github.com/jordyvg",
            "followers_url": "https://api.github.com/users/jordyvg/followers",
            "following_url": "https://api.github.com/users/jordyvg/following{/other_user}",
            "gists_url": "https://api.github.com/users/jordyvg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jordyvg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jordyvg/subscriptions",
            "organizations_url": "https://api.github.com/users/jordyvg/orgs",
            "repos_url": "https://api.github.com/users/jordyvg/repos",
            "events_url": "https://api.github.com/users/jordyvg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jordyvg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 5,
          "created_at": "2019-04-15T08:32:08Z",
          "updated_at": "2019-11-30T14:28:40Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhile adding multiple comma separated email addresses the cursor will jump to te beginning the input field. First i thought it was a [Formik](https://github.com/jaredpalmer/formik/issues/1428) issue, but it seems to be a React one.\r\n\r\nExample pure React: https://codesandbox.io/embed/0y06zo7l8p\r\nExample React with Formik: https://codesandbox.io/embed/k57zw7wz5\r\nMDN docs: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple\r\n\r\n**What is the expected behavior?**\r\nCursor stays on current position.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nChrome 73, Safari 12.1, Opera 60.0\r\nReact 16.7.0\r\n\r\nMaybe #14551 related?\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15405",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15405/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15405/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15405/events",
          "html_url": "https://github.com/facebook/react/issues/15405",
          "id": 432723008,
          "node_id": "MDU6SXNzdWU0MzI3MjMwMDg=",
          "number": 15405,
          "title": "Using app shell architecture throws Warning: Expected server HTML to contain a matching <div> in <div>.",
          "user": {
            "login": "q2870030",
            "id": 49002391,
            "node_id": "MDQ6VXNlcjQ5MDAyMzkx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49002391?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/q2870030",
            "html_url": "https://github.com/q2870030",
            "followers_url": "https://api.github.com/users/q2870030/followers",
            "following_url": "https://api.github.com/users/q2870030/following{/other_user}",
            "gists_url": "https://api.github.com/users/q2870030/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/q2870030/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/q2870030/subscriptions",
            "organizations_url": "https://api.github.com/users/q2870030/orgs",
            "repos_url": "https://api.github.com/users/q2870030/repos",
            "events_url": "https://api.github.com/users/q2870030/events{/privacy}",
            "received_events_url": "https://api.github.com/users/q2870030/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710332294,
              "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
              "name": "Component: Server Rendering",
              "color": "d4c5f9",
              "default": false,
              "description": null
            },
            {
              "id": 40929155,
              "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
              "name": "Type: Question",
              "color": "cc317c",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2019-04-12T20:01:40Z",
          "updated_at": "2019-12-07T02:37:22Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "I am currently using workbox along with webpack. The app shell url is /app-shell. I tried following 2 approaches:\r\n\r\n1. In server.js, I created a dedicated route to handle /app-shell URL.  \r\n\r\n   ```javascript\r\n   server.get('/app-shell', (request, response) => {\r\n  \tresponse.set('content-type', 'text/html');\r\n\tresponse.write(`<!DOCTYPE html>\r\n\t     … \r\n            <body>\r\n               <div id=\"root\"></div>\r\n               <script src=\"js/client.js\"></script>\r\n               <script src=\"js/vendor.js\"></script>\r\n              <script>\r\n                 if ('serviceWorker' in navigator) {\r\n                    window.addEventListener('load', () => {\r\n                   navigator.serviceWorker\r\n                  .register('/service-worker.js', { scope: '/' })\r\n                  .then((registration) => {\r\n                      console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n                })\r\n                .catch((registrationError) => {\r\n                    console.log('SW registration failed: ', registrationError);   \r\n                });\r\n            });\r\n          }\r\n         </script>\r\n      </body>\t\t\r\n       `);\r\n   });  \r\n   ```\r\n2. Second approach, I created a route /app-shell which corresponds to an element with content “Loading…”.  \r\n\r\n  ```javascript\r\n   const AppShellComponent: React.FC<{}> = (): JSX.Element => (\r\n  \t<main>\r\n   \t     Loading...\r\n        </main>\r\n  );\r\n  ```\r\n\r\n  In both cases, I get the above mismatch warning. If I make AppShellComponent exactly same as HomeComponent i.e. path /, then the error goes away if the app is invoked from the home page path i.e. / . However, if any other route is invoked, the warning comes back again. Please suggest a better approach. Thanks.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15401",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15401/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15401/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15401/events",
          "html_url": "https://github.com/facebook/react/pull/15401",
          "id": 432683019,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwMTAzOTcx",
          "number": 15401,
          "title": "Double compress using GCC",
          "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "node_id": "MDQ6VXNlcjYzNjQ4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 8,
          "created_at": "2019-04-12T18:07:56Z",
          "updated_at": "2020-01-09T21:00:29Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15401",
            "html_url": "https://github.com/facebook/react/pull/15401",
            "diff_url": "https://github.com/facebook/react/pull/15401.diff",
            "patch_url": "https://github.com/facebook/react/pull/15401.patch"
          },
          "body": "Let's see what sizebot says about this."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15349",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15349/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15349/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15349/events",
          "html_url": "https://github.com/facebook/react/pull/15349",
          "id": 430280240,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjY4MjAxODAw",
          "number": 15349,
          "title": "[new] [react-is] add `typeOfElementType`, extracted from `typeOf`",
          "user": {
            "login": "ljharb",
            "id": 45469,
            "node_id": "MDQ6VXNlcjQ1NDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/45469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ljharb",
            "html_url": "https://github.com/ljharb",
            "followers_url": "https://api.github.com/users/ljharb/followers",
            "following_url": "https://api.github.com/users/ljharb/following{/other_user}",
            "gists_url": "https://api.github.com/users/ljharb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ljharb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ljharb/subscriptions",
            "organizations_url": "https://api.github.com/users/ljharb/orgs",
            "repos_url": "https://api.github.com/users/ljharb/repos",
            "events_url": "https://api.github.com/users/ljharb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ljharb/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2019-04-08T06:41:50Z",
          "updated_at": "2020-01-10T06:11:05Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15349",
            "html_url": "https://github.com/facebook/react/pull/15349",
            "diff_url": "https://github.com/facebook/react/pull/15349.diff",
            "patch_url": "https://github.com/facebook/react/pull/15349.patch"
          },
          "body": "By extracting this functionality, I'll be able to simplify the logic in enzyme [here](https://github.com/airbnb/enzyme/blob/master/packages/enzyme-adapter-react-16/src/ReactSixteenAdapter.js#L320-L322) by comparing directly to the type rather than needing to make a fake element."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15344",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15344/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15344/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15344/events",
          "html_url": "https://github.com/facebook/react/issues/15344",
          "id": 430089125,
          "node_id": "MDU6SXNzdWU0MzAwODkxMjU=",
          "number": 15344,
          "title": "useReducer's dispatch should return a promise which resolves once its action has been delivered",
          "user": {
            "login": "pelotom",
            "id": 128019,
            "node_id": "MDQ6VXNlcjEyODAxOQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/128019?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pelotom",
            "html_url": "https://github.com/pelotom",
            "followers_url": "https://api.github.com/users/pelotom/followers",
            "following_url": "https://api.github.com/users/pelotom/following{/other_user}",
            "gists_url": "https://api.github.com/users/pelotom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pelotom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pelotom/subscriptions",
            "organizations_url": "https://api.github.com/users/pelotom/orgs",
            "repos_url": "https://api.github.com/users/pelotom/repos",
            "events_url": "https://api.github.com/users/pelotom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pelotom/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 16,
          "created_at": "2019-04-07T00:04:45Z",
          "updated_at": "2020-01-21T15:00:10Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)\r\n\r\nIt's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:\r\n\r\n```js\r\nfunction useNext(value) {\r\n  const valueRef = useRef(value);\r\n  const resolvesRef = useRef([]);\r\n  useEffect(() => {\r\n    if (valueRef.current !== value) {\r\n      for (const resolve of resolvesRef.current) {\r\n        resolve(value);\r\n      }\r\n      resolvesRef.current = [];\r\n      valueRef.current = value;\r\n    }\r\n  }, [value]);\r\n  return () => new Promise(resolve => {\r\n    resolvesRef.current.push(resolve);\r\n  });\r\n}\r\n```\r\n\r\nand use it like so:\r\n\r\n```js\r\nconst nextState = useNext(state);\r\n\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  // get the new state after the action has taken effect\r\n  state = await nextState();\r\n\r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n\r\nThis is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.\r\n\r\nWhat we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as\r\n\r\n```js\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  state = await dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n## EDIT\r\n\r\nThinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:\r\n\r\n```js\r\nconst stateRef = useRef(state);\r\nuseEffect(() => {\r\n  stateRef.current = state;\r\n}, [state]);\r\n\r\nuseEffect(() => {\r\n  fetchStuff();\r\n}, []);\r\n\r\nasync function fetchStuff() {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n\r\n  // can look at current state here too\r\n  if (!stateRef.current.shouldReceiveData) return;\r\n  \r\n  await dispatch({ type: 'RECEIVE_DATA', data });\r\n\r\n  if (!stateRef.current.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15317",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15317/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15317/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15317/events",
          "html_url": "https://github.com/facebook/react/issues/15317",
          "id": 429168725,
          "node_id": "MDU6SXNzdWU0MjkxNjg3MjU=",
          "number": 15317,
          "title": "[Concurrent] Safely disposing uncommitted objects",
          "user": {
            "login": "FredyC",
            "id": 1096340,
            "node_id": "MDQ6VXNlcjEwOTYzNDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1096340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FredyC",
            "html_url": "https://github.com/FredyC",
            "followers_url": "https://api.github.com/users/FredyC/followers",
            "following_url": "https://api.github.com/users/FredyC/following{/other_user}",
            "gists_url": "https://api.github.com/users/FredyC/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/FredyC/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/FredyC/subscriptions",
            "organizations_url": "https://api.github.com/users/FredyC/orgs",
            "repos_url": "https://api.github.com/users/FredyC/repos",
            "events_url": "https://api.github.com/users/FredyC/events{/privacy}",
            "received_events_url": "https://api.github.com/users/FredyC/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 34,
          "created_at": "2019-04-04T09:17:29Z",
          "updated_at": "2020-01-17T21:42:04Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "## How to safely keep a reference to uncommitted objects and dispose of them on unmount? \r\n\r\nFor a MobX world, we are trying to [prepare for the Concurrent mode](https://github.com/mobxjs/mobx-react-lite/issues/53). In short, there is a [Reaction object being created](https://github.com/mobxjs/mobx-react-lite/blob/231be100e6ba458f40642adb9f0bc77aa4d366ce/src/useObserver.ts#L32\r\n) to track for observables and it is stored within `useRef`.\r\n\r\nThe major problem is, that we can't just `useEffect` to create it in a safe way later. We need it to start tracking the observables on a first render otherwise we might miss some updates and cause inconsistent behavior.\r\n\r\nWe do have a [semi-working solution](https://github.com/mobxjs/mobx-react-lite/pull/121), basically, a custom made garbage collector based on `setTimeout`. However, it's unreliable as it can accidentally dispose of Reactions that are actually being used but weren't committed yet.\r\n\r\nWould love to hear we are overlooking some obvious solution there."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15313",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15313/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15313/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15313/events",
          "html_url": "https://github.com/facebook/react/pull/15313",
          "id": 428999797,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjY3MjMxNjMx",
          "number": 15313,
          "title": "Match react-devtools display name behavior for React.memo",
          "user": {
            "login": "eps1lon",
            "id": 12292047,
            "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eps1lon",
            "html_url": "https://github.com/eps1lon",
            "followers_url": "https://api.github.com/users/eps1lon/followers",
            "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
            "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
            "organizations_url": "https://api.github.com/users/eps1lon/orgs",
            "repos_url": "https://api.github.com/users/eps1lon/repos",
            "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eps1lon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 7,
          "created_at": "2019-04-03T22:19:57Z",
          "updated_at": "2020-01-10T16:20:57Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15313",
            "html_url": "https://github.com/facebook/react/pull/15313",
            "diff_url": "https://github.com/facebook/react/pull/15313.diff",
            "patch_url": "https://github.com/facebook/react/pull/15313.patch"
          },
          "body": "```diff\r\n// anonymous render\r\nReact.memo(() => null)\r\n- Component\r\n+ Memo\r\n// named render\r\nReact.memo(function Inner() { return null })\r\n- Inner\r\n+ Memo(Inner)\r\n// displayName\r\nconst Unknown = React.memo(() => null);\r\nUnknown.displayName = 'FancyName';\r\n- Component\r\n+ FancyName\r\n```\r\n\r\nShowcase to verify matching behavior with react-devtools: https://codesandbox.io/s/lpx7k7wv4z"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15301",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15301/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15301/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15301/events",
          "html_url": "https://github.com/facebook/react/issues/15301",
          "id": 428538057,
          "node_id": "MDU6SXNzdWU0Mjg1MzgwNTc=",
          "number": 15301,
          "title": "renderWithHooks may initialize workInProgressHook at the beginning",
          "user": {
            "login": "Jokcy",
            "id": 2088642,
            "node_id": "MDQ6VXNlcjIwODg2NDI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2088642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Jokcy",
            "html_url": "https://github.com/Jokcy",
            "followers_url": "https://api.github.com/users/Jokcy/followers",
            "following_url": "https://api.github.com/users/Jokcy/following{/other_user}",
            "gists_url": "https://api.github.com/users/Jokcy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Jokcy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Jokcy/subscriptions",
            "organizations_url": "https://api.github.com/users/Jokcy/orgs",
            "repos_url": "https://api.github.com/users/Jokcy/repos",
            "events_url": "https://api.github.com/users/Jokcy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Jokcy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 1,
          "created_at": "2019-04-03T02:47:52Z",
          "updated_at": "2019-04-03T14:51:59Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nexample here https://codesandbox.io/s/34mvmoln65\r\nBased on issue #15219 I found the reason of this issue is that, when `ErrorThrower` throws `renderWithHooks` just break down and keep `workInProgressHook` stay `useMemo`. Because of the `componentDidCatch` in `ErrorHandler` we can go on the render phase. But when we reach the `StatefulComponent` we got `useMemo` as `workInProgressHook` and it make `StatefulComponent` with first hook `useMemo`.\r\n\r\nI guess we can fix this just set `workInProgressHook` to null at the beginning of `renderWithHooks`. I post this issue because I see this comment in `renderWithHooks`, based on this example, all this variables may also not be reset when start `renderWithHooks`, so maybe it's better to put them back?\r\n\r\n```js\r\n// The following should have already been reset\r\n  // currentHook = null;\r\n  // workInProgressHook = null;\r\n\r\n  // remainingExpirationTime = NoWork;\r\n  // componentUpdateQueue = null;\r\n\r\n  // didScheduleRenderPhaseUpdate = false;\r\n  // renderPhaseUpdates = null;\r\n  // numberOfReRenders = 0;\r\n  // sideEffectTag = 0;\r\n```\r\n\r\nIf no other concerns about this, I just want to put them back to fix this issue.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15293",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15293/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15293/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15293/events",
          "html_url": "https://github.com/facebook/react/issues/15293",
          "id": 428032141,
          "node_id": "MDU6SXNzdWU0MjgwMzIxNDE=",
          "number": 15293,
          "title": "Is it recommended to fetch in effect or should it be imperative",
          "user": {
            "login": "otakustay",
            "id": 639549,
            "node_id": "MDQ6VXNlcjYzOTU0OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/639549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/otakustay",
            "html_url": "https://github.com/otakustay",
            "followers_url": "https://api.github.com/users/otakustay/followers",
            "following_url": "https://api.github.com/users/otakustay/following{/other_user}",
            "gists_url": "https://api.github.com/users/otakustay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/otakustay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/otakustay/subscriptions",
            "organizations_url": "https://api.github.com/users/otakustay/orgs",
            "repos_url": "https://api.github.com/users/otakustay/repos",
            "events_url": "https://api.github.com/users/otakustay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/otakustay/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2019-04-02T05:34:28Z",
          "updated_at": "2019-04-04T11:08:26Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "In out team we encountered a explosive discussion on how we should handle the relationship of a fetch and its parameters, after searching in community I still find various solutions to this, I'd like to raise this discussion to find a best practive.\r\n\r\n## Background\r\n\r\nSuppose we have a simple list view like:\r\n\r\n<img width=\"687\" alt=\"Jietu20190402-130206@2x\" src=\"https://user-images.githubusercontent.com/639549/55377435-87268b80-5547-11e9-97a8-313a5713ced3.png\">\r\n\r\nWhenever user types keyword in textbox and clicks \"Search\" button, or they change the page number, we should fetch a new list from remote and render it in table.\r\n\r\nWe use redux to manage global state of this simple app, the store is structured as:\r\n\r\n```js\r\n{\r\n    filter: '',\r\n    pageIndex: 0,\r\n    results: []\r\n}\r\n```\r\n\r\nWe developed a total of 3 solutions to demonstrate how the change of `filter` and `pageIndex` should cause a fetch of `results`.\r\n\r\n## Use effect and separation of view and logic\r\n\r\nThis is the first demo: https://codesandbox.io/s/20x1m39w00\r\n\r\nIn this implementation we tried to:\r\n\r\n1. Utilize `useEffect` to trigger a fetch when any parameter changes.\r\n2. Do not pass any parameter as prop to `components/List` component.\r\n\r\nIn my point of view, I like this solution best because:\r\n\r\n1. It have a very clear separation of view and logic, `components/List` does not receive any redundant props such as `filter` or `pageIndex`.\r\n2. It theoretically treat a callback prop as a normal one, make it a dependency of `useEffect`.\r\n3. It works in a **reactive** way, which means \"we trigger a fetch not because the action taken from user, only because the change of state\".\r\n\r\nStill we have concerns about it:\r\n\r\n1. It obviously triggers more render and updates because change of `filter` or `pageIndex` does not dispatch `FETCH_RESULTS` immediately, this cause a sync dispatch in effect which we previously avoided by `no-set-state-did-update` rule.\r\n2. We create a state update from another state update, this \"chaining\" is not clear enough for developers and may cause unwanted infinite loop.\r\n\r\n## Use effect and params together\r\n\r\nThe second demo is much like the first one: https://codesandbox.io/s/54o1rjvyv4\r\n\r\nThe only change is we pass `filter` and `pageIndex` to `components/List`, in this case we believe **effect is a part of component** so that every dependencies used to form an effect should be passed as prop.\r\n\r\nThis solution gives a more clear view of what is used to fetch data in `components/List`, this is \r\n a highly adopted solution in community, however we're not sure this is recommended officially.\r\n\r\n## Imperative action to fetch data\r\n\r\nAs opposed to previous, this is our third demo: https://codesandbox.io/s/p5yv48x97x\r\n\r\nIn this solution we changed our thought and implement the app in a more \"redux way\":\r\n\r\n1. We trigger the fetch on user interactions, either click on \"Search\" button or change the page number, however either interaction only provides its own parameter, we don't provide `pageIndex` when \"Search\" button is clicked.\r\n2. We have a thunk which computes a new parameter object based on current state using `getState()` function, a `FETCH_RESULTS` action is dispatched.\r\n3. We have several reducers to observe `FETCH_RESULTS` action and updates corresponding parameter in global state.\r\n4. Fetched list is connected to `components/List` component, this component now is a pure presentational component, no lifecycle effect is involved.\r\n5. To solve the first fetch when application is mounted, we create an `containers/App` container component.\r\n\r\nBy doing these we eliminated the \"chaining state update\" issue, however it introduces several concerns:\r\n\r\n1. If we add more user interactions in the future, the `loadResults` thunk could be more and more complex.\r\n2. The use of `getState` in `redux-thunk` is not highly recommended in community, we found some articles stating that developers should avoid to use it in most cases.\r\n3. We can't explain the exist of the `containers/App` container only to trigger a fetch on mount, thee `useEffect` take no dependencies and `exhaustive-deps` rules complains about it, not paring mount and update is also a big uncomfortable point to us.\r\n4. Trigger fetch from user interactions is what we called \"imperative\", we're confused about whether a reactive framework like react recommends imperative programming.\r\n\r\n------\r\n\r\nSince we are not able to get a conclusion for a very long time, we decide to raise this issue for more discussion to find a better solution to these very common use cases."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15278",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15278/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15278/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15278/events",
          "html_url": "https://github.com/facebook/react/issues/15278",
          "id": 427453460,
          "node_id": "MDU6SXNzdWU0Mjc0NTM0NjA=",
          "number": 15278,
          "title": "useMemo / useCallback cache busting opt out",
          "user": {
            "login": "alexreardon",
            "id": 2182637,
            "node_id": "MDQ6VXNlcjIxODI2Mzc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2182637?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexreardon",
            "html_url": "https://github.com/alexreardon",
            "followers_url": "https://api.github.com/users/alexreardon/followers",
            "following_url": "https://api.github.com/users/alexreardon/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexreardon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexreardon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexreardon/subscriptions",
            "organizations_url": "https://api.github.com/users/alexreardon/orgs",
            "repos_url": "https://api.github.com/users/alexreardon/repos",
            "events_url": "https://api.github.com/users/alexreardon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexreardon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 32,
          "created_at": "2019-03-31T22:12:07Z",
          "updated_at": "2020-01-04T09:45:48Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "According to the `React` docs, `useMemo` and `useCallback` are subject to cache purging:\r\n\r\n> You may rely on useMemo as a performance optimization, not as a semantic guarantee. In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance. [source](https://reactjs.org/docs/hooks-reference.html#usememo)\r\n\r\nI am working on moving `react-beautiful-dnd` over to using hooks https://github.com/atlassian/react-beautiful-dnd/issues/871. I have the whole thing working and tested 👍 \r\n\r\nIt leans quite heavily on `useMemo` and `useCallback` right now. If the memoization cache for is cleared for a dragging item, the result will be a cancelled drag. This is not good. \r\n\r\nMy understanding is that `useMemo` and `useCallback` are currently *not* subject to cache purging based on this language:\r\n\r\n> In the **future**, React may choose to “forget”\r\n\r\n**Request 1**: Is it possible to opt-out of this cache purging? Perhaps a third `options` argument to `useMemo` and `useCallback`:\r\n\r\n```js\r\nconst value = useMemo(() => ({ hello: 'world' }), [], { usePersistantCache: true });\r\n```\r\n\r\n(Naming up for grabs, but this is just the big idea)\r\n\r\nA work around is to use a custom memoization toolset such as a `useMemoOne` which reimplements `useMemo` and `useCallback` just using `ref`s [see example](https://twitter.com/alexandereardon/status/1108488559881641986)\r\n\r\nI am keen to avoid the work around if possible.\r\n\r\n**Request 2**: While *request 1* is favourable, it would be good to know the exact conditions in which the memoization caches are purged"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15275",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15275/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15275/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15275/events",
          "html_url": "https://github.com/facebook/react/issues/15275",
          "id": 427347008,
          "node_id": "MDU6SXNzdWU0MjczNDcwMDg=",
          "number": 15275,
          "title": "Add option in shallow renderer to run effects/componentDidUpdate/componentDidMount",
          "user": {
            "login": "bdwain",
            "id": 3982094,
            "node_id": "MDQ6VXNlcjM5ODIwOTQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3982094?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdwain",
            "html_url": "https://github.com/bdwain",
            "followers_url": "https://api.github.com/users/bdwain/followers",
            "following_url": "https://api.github.com/users/bdwain/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdwain/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdwain/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdwain/subscriptions",
            "organizations_url": "https://api.github.com/users/bdwain/orgs",
            "repos_url": "https://api.github.com/users/bdwain/repos",
            "events_url": "https://api.github.com/users/bdwain/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdwain/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 204945357,
              "node_id": "MDU6TGFiZWwyMDQ5NDUzNTc=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
              "name": "Component: Shallow Renderer",
              "color": "eb6420",
              "default": false,
              "description": null
            },
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 23,
          "created_at": "2019-03-31T01:39:03Z",
          "updated_at": "2020-01-21T09:35:31Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nthe shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short)\r\n\r\n**What is the expected behavior?**\r\nSee [this enzyme issue](https://github.com/airbnb/enzyme/issues/1938#issuecomment-476137018) for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests. \r\n\r\nIf the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous.\r\n\r\nEnzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll and no it was never supported AFAIK"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15274",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15274/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15274/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15274/events",
          "html_url": "https://github.com/facebook/react/pull/15274",
          "id": 427337645,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjY1OTc0OTEx",
          "number": 15274,
          "title": "Remove Flow types from Scheduler and Tracing",
          "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "node_id": "MDQ6VXNlcjYzNjQ4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-03-30T23:07:00Z",
          "updated_at": "2020-01-08T19:03:47Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15274",
            "html_url": "https://github.com/facebook/react/pull/15274",
            "diff_url": "https://github.com/facebook/react/pull/15274.diff",
            "patch_url": "https://github.com/facebook/react/pull/15274.patch"
          },
          "body": "The idea is to make the scheduler as unopinionated and uncontroversial as possible.\r\n\r\nCurrently it's a bit of a mix and match and also use our build tooling. This keeps spreading.\r\n\r\nLet's make a decision here either way and stick to it.\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15255",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15255/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15255/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15255/events",
          "html_url": "https://github.com/facebook/react/issues/15255",
          "id": 427099499,
          "node_id": "MDU6SXNzdWU0MjcwOTk0OTk=",
          "number": 15255,
          "title": "Profiler marks",
          "user": {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710573595,
              "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
              "name": "Component: Developer Tools",
              "color": "fbca04",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            },
            {
              "id": 40929153,
              "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
              "name": "Type: Enhancement",
              "color": "84b6eb",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "bvaughn",
              "id": 29597,
              "node_id": "MDQ6VXNlcjI5NTk3",
              "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/bvaughn",
              "html_url": "https://github.com/bvaughn",
              "followers_url": "https://api.github.com/users/bvaughn/followers",
              "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
              "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
              "organizations_url": "https://api.github.com/users/bvaughn/orgs",
              "repos_url": "https://api.github.com/users/bvaughn/repos",
              "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
              "received_events_url": "https://api.github.com/users/bvaughn/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "milestone": null,
          "comments": 0,
          "created_at": "2019-03-29T17:33:27Z",
          "updated_at": "2020-01-08T19:13:23Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "Can we expose a lighter weight set of Performance \"marks\" for people consuming browser Performance tracing? e.g. when a particular `Profiler` commits. This should be a lot less heavyweight than the full mark-and-measure stuff."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15240",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15240/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15240/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15240/events",
          "html_url": "https://github.com/facebook/react/issues/15240",
          "id": 426597099,
          "node_id": "MDU6SXNzdWU0MjY1OTcwOTk=",
          "number": 15240,
          "title": "Dancing between state and effects - a real-world use case",
          "user": {
            "login": "jlongster",
            "id": 17031,
            "node_id": "MDQ6VXNlcjE3MDMx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17031?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jlongster",
            "html_url": "https://github.com/jlongster",
            "followers_url": "https://api.github.com/users/jlongster/followers",
            "following_url": "https://api.github.com/users/jlongster/following{/other_user}",
            "gists_url": "https://api.github.com/users/jlongster/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jlongster/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jlongster/subscriptions",
            "organizations_url": "https://api.github.com/users/jlongster/orgs",
            "repos_url": "https://api.github.com/users/jlongster/repos",
            "events_url": "https://api.github.com/users/jlongster/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jlongster/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 30,
          "created_at": "2019-03-28T16:41:29Z",
          "updated_at": "2019-10-08T21:39:01Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "I started this as a gist but Dan mentioned that this would be a good discussion issue so here goes. I've been writing with and refactoring code into hooks for a while now. For 95% of code, they are great and very straight-forward once you get the basic idea. There are still a few more complex cases where I struggle with the right answer though. This is an attempt to explain them.\r\n\r\n## The use case\r\n\r\nThis is a real-world use case from an app I'm building: interacting with a list items. I've simplified the examples into codesandboxes though to illustrate the basic idea.\r\n\r\nHere's the first one: https://codesandbox.io/s/lx55q0v3qz. It renders a list of items, and if you click on any of them, an editable input will appear to edit it (it doesn't save yet). The colored box on the right will change whenever an item rerenders.\r\n\r\nIf you click around in the items, you can see that when changing the edited item, all items rerender. But the `Row` component is wrapped with `React.memo`! They all rerender because the `onEdit` is new each time the app renders, causing all items to rerender.\r\n\r\n## Maintaining callback identity\r\n\r\nWe want `onEdit` to be same function for all future renders. In this case, it's easy because it doesn't depend on anything. We can simply wrap it in `useCallback` with an empty dependencies array:\r\n\r\n```js\r\n  let onEdit = useCallback(id => {\r\n    setEditingId(id);\r\n  }, []);\r\n```\r\n\r\nNow, you can see clicking around only rerenders the necessary items (only those colors change): https://codesandbox.io/s/k33klz68yr\r\n\r\n## Implementing saving\r\n\r\nWe're missing a crucial feature: after editing an item, on blur it should save the value. In my app the way the \"save\" event gets triggered is different, but doing it on blur is fine here.\r\n\r\nTo do this, we create an `onSave` callback in the app and pass it down to each item, which calls it on blur with the new value. `onSave` takes a new item and updates the items array with the new item and sets the `items` state.\r\n\r\nHere is it running: https://codesandbox.io/s/yvl79qj5vj\r\n\r\nYou'll notice that all items are rerendering again when saving. The list rerenders twice when you click another item: first when you click down and the input loses focus, and then again to edit a different item. So all the colors change once, and then only the editing rows color changes again.\r\n\r\nThe reason all of them are rerendering is because `onSave` is now a new callback every render. But we can't fix it with the same technique as `onEdit` because it depends on `items` - so we *have* to create a new callback which closes over `items` otherwise you'd lose previous edits. This is the \"callbacks are recreated too many times\" problem with hooks.\r\n\r\nOne solution is to switch to `useReducer`. Here's that implementation:\r\nhttps://codesandbox.io/s/nrq5y77kj0\r\n\r\nNote that I still wrap up the reducer into `onEdit` and `onSave` callbacks that are passed down to the row. I find passing callbacks to be clearer in most cases, and works with any components in the ecosystem that already expect callbacks. We can simply use `useCallback` with no dependencies though since `dispatch` is always the same.\r\n\r\nNote how that even when saving an item, only the necessary rows rerender.\r\n\r\n## The difference between event handlers and dispatch\r\n\r\nThere's a problem though. This works with a simple demo, but in my real app `onSave` *both* optimistically updates local state and saves it off to the server. It does a side effect.\r\n\r\nIt's something like this:\r\n\r\n```js\r\nasync function onSave(transaction) {\r\n  let { changes, newTransactions } = updateTransaction(transactions, transaction);\r\n  // optimistic update\r\n  setTransactions(newTransactions)\r\n  // save to server\r\n  await postToServer('apply-changes', { changes })\r\n}\r\n```\r\n\r\nThere's a big difference between the phase when an event handler and dispatch is run. Event handlers are run whenever they are triggered (naturally) but the dispatching the action (running `reducer`) happens when rendering. The reducer must be pure because of this.\r\n\r\nHere's the reducer from https://codesandbox.io/s/nrq5y77kj0:\r\n\r\n```js\r\n  function reducer(state, action) {\r\n    switch (action.type) {\r\n      case \"save-item\": {\r\n        let { item } = action;\r\n        return {\r\n          ...state,\r\n          items: items.map(it => (it.id === item.id ? item : it))\r\n        };\r\n      }\r\n      case \"edit-item\": {\r\n        return { ...state, editingId: action.id };\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nHow is `save-item` also supposed to trigger a side effect? First, item's important to understand these 3 phases:\r\n\r\n```\r\nEvent handler -> render -> commit\r\n```\r\n\r\nEvents are run in the first phase, which causes a render (when dispatches happen), and when everything is finally ready to be flushed to the DOM it does it in a \"commit\" phase, which is when all effects are run (more or less).\r\n\r\nWe need our side effect to run in the commit phase.\r\n\r\n### Option 1\r\n\r\nOne option is to use a ref to \"mark\" the saving effect to be run. Here's the code: https://codesandbox.io/s/m5xrrm4ym8\r\n\r\nBasically you create a flag as a ref:\r\n\r\n```js\r\nlet shouldSave = useRef(false);\r\n```\r\n\r\nLuckily, we've already wrapped the save dispatch into an event handler. Inside `onSave` we mark this flag as true. We can't do it inside of the reducer because it must be pure:\r\n\r\n```js\r\n  let onSave = useCallback(item => {\r\n    shouldSave.current = true;\r\n    dispatch({ type: \"save-item\", item });\r\n  }, []);\r\n```\r\n\r\nFinally, we define an effect that always runs after rendering and checks the flag and resets it:\r\n\r\n```js\r\n  useEffect(() => {\r\n    if (shouldSave.current) {\r\n      // save... all the items to the server?\r\n      post(items)\r\n      shouldSave.current = false;\r\n    }\r\n  });\r\n```\r\n\r\nI thought this option was going to work, but just ran into this issue. We don't know *what* to save anymore. We certainly don't want to send the entire items array to the server! I suppose we could store the item in the ref, but what happens if multiple events are fired before the effect runs? I suppose you could store an array, but... do we really need that?\r\n\r\n### Option 2\r\n\r\n**Note**: I just noticed this option is documented in [How to read an often-changing value from useCallback?](https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback), but I disagree with the tone used. I think this is a fine pattern an better in many cases than `dispatch`, even if it's not quite as robust. Especially since it's not as powerful as callbacks. (see end of this section)\r\n\r\nKeeping around all of the data we need to do the effect might work in some cases, but it feels a little clunky. If we could \"queue up\" effect from the reducer, that would work, but we can't do that. Instead, another option is to embrace callbacks.\r\n\r\nGoing back to the version which used a naive `onSave` which forced all items to rerender (https://codesandbox.io/s/yvl79qj5vj), `onSave` looks like this:\r\n\r\n```js\r\n  let onSave = useCallback(\r\n    item => {\r\n      setItems(items.map(it => (it.id === item.id ? item : it)));\r\n    },\r\n    [items]\r\n  );\r\n```\r\n\r\nThe core problem is that it depends on items. We need to recreate `onSave` because it closes over `items`. But what if it didn't close over it? Instead, let's create a ref:\r\n\r\n```js\r\nlet latestItems = useRef(items);\r\n```\r\n\r\nAnd an effect which keeps it up-to-date with items:\r\n\r\n```js\r\nuseEffect(() => {\r\n  latestItems.current = items\r\n});\r\n```\r\n\r\nNow, the `onSave` callback can reference the ref to always get the up-to-date items. Which means we can memoize it with `useCallback`:\r\n\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n}, []);\r\n```\r\n\r\nWe are **intentionally** opting to always referencing the latest item. The biggest change with hooks in my opinion is that they are safe by default: an async function will always reference the exact same state that existed at the time they were called. Classes operate the other way: you access state from this.state which can be mutated between async work. Sometimes you want that though so you can maintain callback identity.\r\n\r\nHere is the running sandbox for it: https://codesandbox.io/s/0129jop840. Notice how you can edit items and only the necessary rows rerender, even though it updates `items`. Now, we can do anything we want in our callback, like posting to a server:\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n  // save to server\r\n  post('/save-item', { item })\r\n}, []);\r\n```\r\n\r\nBasically, if all you need is the latest data since last commit, **callbacks can be memoized as well as reducers**. The drawback is that you need to put each piece of data you need in a ref. If you have lots of pieces of data and only a few simple effects, reducers would be better, but in my case (and I suspect in many others) it's easier to use callbacks with refs.\r\n\r\nIt's nice too because in my real app the save process is more complicated. It needs to get changes back from the server and apply them locally as well, so it looks more like this:\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n  // save to server\r\n  let changes = await post('/save-item', { item })\r\n  applyChanges(latestItems.current, changes)\r\n}, []);\r\n```\r\n\r\nMaintainability-wise, it's *really* nice to see this whole flow here in one place. Breakin this up to try to manually queue up effects and do a dance with `useReducer` feels much more convoluted.\r\n\r\n### Option 3\r\n\r\nI suppose another option would be to try to \"mark\" the effect to be run in state itself. That way you could do it in `useReducer` as well, and it would look something like this:\r\n\r\n```js\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"save-item\": {\r\n      let { item } = action;\r\n      return {\r\n        ...state,\r\n        items: state.items.map(it => (it.id === item.id ? item : it)),\r\n        itemsToSave: itemsToSave.concat([item])\r\n      };\r\n    }\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nAnd an effect would check the `itemsToSave` state and save them off. The problem is resetting that state - the effect would have to change state, causing a useless rerender, and it's not determistic to make sure that the effect does not run multiple times before `itemsToSave` gets reset.\r\n\r\nIn my experience mixing effects into state, causing renders, make things a lot more difficult to maintain and debug.\r\n\r\n### What's the difference between Option 1 and 2?\r\n\r\nIs there a crucial difference between 1 and 2? Yes, but I'd argue it's not a big deal if you can accept it. Remember these three phases:\r\n\r\n```\r\nEvent handler -> render -> commit\r\n```\r\n\r\nThe big difference is option 1 is doing the side effect in the commit phase, and option 2 is doing it in the event handler phase. Why does this matter?\r\n\r\nIf, for some reason, an item called `onSave` multiple times before the next commit phase happened, option 1 is more robust. A reducer will \"queue up\" the actions and run them in order, updating state in between them, so if you did:\r\n\r\n```js\r\nonSave({ id: 1, name: \"Foo\" })\r\nonSave({ id: 2, name: \"Bar\" })\r\n```\r\n\r\nwhich runs the callback twice immediately, the reducer will process the first save and update the items, and process the second save **passing in the already updated state**.\r\n\r\nHowever, with option 2, when processing the second save **the commit phase hasn't been run yet** so the `latestItems` ref hasn't been updated yet. **The first save will be lost**.\r\n\r\nHowever, the ergonomics of option 2 is much better for many use cases, and I think it's fine to weight these benefits and never need the ability to handle such quick updates. Although concurrent mode might introduce some interesting arguments against that.\r\n\r\n## Another small use case for triggering effects\r\n\r\nIn case this wasn't already long enough, there's a similar use case I'll describe quickly. You can also add new items to the list by editing data in an empty row, and the state of this \"new item\" is tracked separately. \"Saving\" this item doesn't touch the backend, but simply updates the local state, and separate explicit \"add\" action is needed to add it to the list.\r\n\r\nThe hard part is that there is a keybinding for adding the item to the list while editing - something like alt+enter. The problem is I want to coordinate with the state change, so first I want to save the existing field and *then* add to the list. The saving process is complicated so it need to run through that first (I can't just duplicate it all in `onAdd`).\r\n\r\nThis isn't a problem specific to hooks, it's just about coordinating with state changes. When I was working with reducers, I had though that something like this would be neat. Basically when the new items detect that you want to save + add it first an action like `{ type: 'save-item', fields: { name: 'Foo' }, shouldAdd: true }`\r\n\r\n\r\n```js\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"save-item\": {\r\n      let { fields } = action;\r\n      let newItem = { ...state.newItem, ...fields };\r\n\r\n      if(action.shouldAdd) {\r\n        shouldAdd.current = true\r\n      }\r\n\r\n      return { ...state, newItem };\r\n    }\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nwhere `shouldAdd` is a ref that is checked on commit phase and saves the item off to the server. This isn't possible though.\r\n\r\nAnother option would be for the item to call `onAdd` instead of `onSave` when saving + adding, and you could manually call the reducer yourself to process the changes:\r\n\r\n```js\r\nasync function onAdd(fields) {\r\n  let action = { type: 'save-item', fields }\r\n  dispatch(action)\r\n  \r\n  let newItem = reducer(state, action)\r\n  post('/add-item', { newItem });\r\n\r\n}\r\n```\r\n\r\nThis is kind of a neat trick: you are manually running the reducer to get the updated state, and React will run the reducer again whenever it wants.\r\n\r\nSince I ended up liking callbacks for my original problems, I ended up going with a similar approach where I have a ref flag that I just set in `onSave`:\r\n\r\n```js\r\nlet [newItem, setNewItem] = useState({})\r\nlet latestNewItem = useRef(newItem);\r\nlet shouldAdd = useRef(false);\r\n\r\nuseEffect(() => {\r\n  latestNewItem.current = newItem;\r\n})\r\n\r\nuseEffect(() => {\r\n  if(shouldAdd.current) {\r\n    setNewItem({})\r\n    post('/add-item', { newItem })\r\n    shouldAdd.current = false;\r\n  }\r\n})\r\n\r\nlet onSave = useCallback((fields, { add }) => {\r\n  // In my real app, applying the changes to the current item is a bit more complicated than this,\r\n  // so it's not an option to separate on an `onAdd` function that duplicates this logic\r\n  setNewItem({ ...latestNewItem.current, ...fields });\r\n\r\n  // This action also should add, mark the effect to be run\r\n  if(add) {\r\n    shouldAdd.current = true;\r\n  }\r\n}, [])\r\n```\r\n\r\n## Conclusions\r\n\r\nSorry for the length of this. I figure I'd be over-detailed rather than under-detailed, and I've been brewing these thoughts since hooks came out. I'll try to conclude my thoughts here:\r\n\r\n* Effects are **very nice**. It feels like we have easy access to the \"commit\" phase of React, whereas previously it was all in `componentDidUpdate` and not composable at all. Now it's super easy to throw on code to the commit phase which makes coordinating stuff with state easier.\r\n\r\n* Reducers have interesting properties, and I can see how they are fully robust in a concurrent world, but for many cases they are too limited. The ergonomics of implementing many effect-ful workflows with them requires an awkward dance, kind of like when you try to track effect states in local state and split up workflows. Keeping a linear workflow in a callback is not only nice, but necessary in many cases for maintainability.\r\n\r\n* Callbacks can be made memoizable without much work. In many cases I think it's easier to use the ref trick than reducers, but the question is: just *how* dangerous is it? Right now it's not that dangerous, but maybe concurrent mode really is going to break it.\r\n\r\n* If that's the case, we should figure out a better way to weave together effects and state changes.\r\n\r\nI hope all of this made sense. Let me know if something is unclear and I'll try to fix it."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15238",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15238/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15238/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15238/events",
          "html_url": "https://github.com/facebook/react/issues/15238",
          "id": 426573772,
          "node_id": "MDU6SXNzdWU0MjY1NzM3NzI=",
          "number": 15238,
          "title": "Noscript tags no longer rendering components in 16.5.0",
          "user": {
            "login": "zfletch",
            "id": 3039310,
            "node_id": "MDQ6VXNlcjMwMzkzMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/3039310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zfletch",
            "html_url": "https://github.com/zfletch",
            "followers_url": "https://api.github.com/users/zfletch/followers",
            "following_url": "https://api.github.com/users/zfletch/following{/other_user}",
            "gists_url": "https://api.github.com/users/zfletch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zfletch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zfletch/subscriptions",
            "organizations_url": "https://api.github.com/users/zfletch/orgs",
            "repos_url": "https://api.github.com/users/zfletch/repos",
            "events_url": "https://api.github.com/users/zfletch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zfletch/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 3,
          "created_at": "2019-03-28T15:56:11Z",
          "updated_at": "2019-04-18T07:44:56Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nStarting in version 16.4.3, the following code:\r\n\r\n```\r\n<noscript>\r\n  <a href=\"/cat\">Cat</a>\r\n  <a href=\"/dog\">Dog</a>\r\n</noscript>\r\n```\r\n\r\nis being rendered in the browser as:\r\n\r\n```\r\n<noscript></noscript>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nPrior to 16.4.3: https://codesandbox.io/embed/5mww4nzpwp\r\n\r\nAfter 16.4.3: https://codesandbox.io/embed/6v8m4yo303\r\n\r\n(The changes are not visible, but if you `inspect element` you can see that, in the first example, the links are being rendered, and in the second example they're not being rendered.)\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should render in the browser the same as in the code:\r\n\r\n```\r\n<noscript>\r\n  <a href=\"/cat\">Cat</a>\r\n  <a href=\"/dog\">Dog</a>\r\n</noscript>\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nSee above, it was working in versions prior to 16.4.3. (I couldn't find a previous issue mentioning this bug. I think it could have been introduced in the fix for https://github.com/facebook/react/issues/11423)\r\n\r\n**Why is this a problem?**\r\n\r\nI use a snapshot tool with React to generate a set of static pages from a React project. These pages have less functionality than the full application, but they allow webcrawlers and users who have disabled JavaScript to use the site at a basic level. For example, the code might look like this:\r\n\r\n```\r\n<FancyInteractiveButton linksTo=\"page\">link</FancyInteractiveButton>\r\n<noscript>\r\n  <a href=\"page\">link</a>\r\n</noscript>\r\n```\r\n\r\nPreventing components in `<noscript>` tags from rendering breaks this functionality for users with JavaScript disabled. The generated snapshots no longer contain the links. It also makes the site harder to navigate by webcrawlers, even if they have JavaScript enabled, because they have to be smart enough to use the fancy button instead of following the link."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15222",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15222/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15222/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15222/events",
          "html_url": "https://github.com/facebook/react/pull/15222",
          "id": 425769429,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjY0NzgzNDM3",
          "number": 15222,
          "title": "Fix React.lazy infinite loop on passing undefined",
          "user": {
            "login": "raunofreiberg",
            "id": 23662329,
            "node_id": "MDQ6VXNlcjIzNjYyMzI5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/23662329?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/raunofreiberg",
            "html_url": "https://github.com/raunofreiberg",
            "followers_url": "https://api.github.com/users/raunofreiberg/followers",
            "following_url": "https://api.github.com/users/raunofreiberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/raunofreiberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/raunofreiberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/raunofreiberg/subscriptions",
            "organizations_url": "https://api.github.com/users/raunofreiberg/orgs",
            "repos_url": "https://api.github.com/users/raunofreiberg/repos",
            "events_url": "https://api.github.com/users/raunofreiberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/raunofreiberg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 3,
          "created_at": "2019-03-27T05:21:19Z",
          "updated_at": "2020-01-10T16:11:50Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15222",
            "html_url": "https://github.com/facebook/react/pull/15222",
            "diff_url": "https://github.com/facebook/react/pull/15222.diff",
            "patch_url": "https://github.com/facebook/react/pull/15222.patch"
          },
          "body": "Related to #15019 \r\n\r\nThe following code no longer produces a loop.\r\n\r\n```\r\nconst Component = React.lazy(() => Promise.resolve(undefined));\r\n      ReactDOM.render(\r\n        <div>\r\n          <h1>Hello World!</h1>\r\n          <React.Suspense fallback=\"..\">\r\n            <Component />\r\n          </React.Suspense>\r\n        </div>,\r\n        document.getElementById('container')\r\n      );\r\n```\r\n\r\nInstead, an error is shown: (tried on dev.html standalone fixture)\r\n\r\n```\r\nUncaught Invariant Violation: Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function.\r\n```"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15221",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15221/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15221/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15221/events",
          "html_url": "https://github.com/facebook/react/issues/15221",
          "id": 425733192,
          "node_id": "MDU6SXNzdWU0MjU3MzMxOTI=",
          "number": 15221,
          "title": "Hook equivalent for `getSnapshotBeforeUpdate`",
          "user": {
            "login": "brainkim",
            "id": 2996754,
            "node_id": "MDQ6VXNlcjI5OTY3NTQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2996754?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brainkim",
            "html_url": "https://github.com/brainkim",
            "followers_url": "https://api.github.com/users/brainkim/followers",
            "following_url": "https://api.github.com/users/brainkim/following{/other_user}",
            "gists_url": "https://api.github.com/users/brainkim/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brainkim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brainkim/subscriptions",
            "organizations_url": "https://api.github.com/users/brainkim/orgs",
            "repos_url": "https://api.github.com/users/brainkim/repos",
            "events_url": "https://api.github.com/users/brainkim/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brainkim/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-03-27T02:29:09Z",
          "updated_at": "2020-01-13T19:51:49Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:\r\n> Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:\r\n\r\n```js\r\nfunction ScrollingList(props) {\r\n  const lengthRef = React.useRef(0);\r\n  const listRef = React.useRef(null);\r\n\r\n  const prevHeight = React.useSnapshot(() => {\r\n    if (lengthRef.current < props.list.length) {\r\n      const list = listRef.current;\r\n      return list.scrollHeight - list.scrollTop;\r\n    }\r\n  }); \r\n\r\n  React.useEffect(() => {\r\n    lengthRef.current = props.list.length;\r\n  }, [props.list.length]);\r\n\r\n  React.useEffect(() => {\r\n    if (prevHeight != null) {\r\n      const list = listRef.current;\r\n      list.scrollTop = list.scrollHeight - prevHeight;\r\n    }\r\n  }, [prevHeight]);\r\n  return (\r\n    <div ref={listRef}>{/* ... */}</div>\r\n  );\r\n}\r\n```\r\n\r\nThis code probably is bug-ridden and not the best use of hooks but you get the idea.\r\n\r\nI’d like to know:\r\n1. If this feature is planned or on the roadmap.\r\n2. What the proposed API will be.\r\n3. If anyone is working on this.\r\n\r\nSorry, if this is being tracked somewhere and I haven’t seen it. I’m planning an intense component which will use `getSnapshotBeforeUpdate` and I’d love some guidance about the future of this lifecycle method.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.0 and later. All browsers and OSes.\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15219",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15219/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15219/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15219/events",
          "html_url": "https://github.com/facebook/react/issues/15219",
          "id": 425712868,
          "node_id": "MDU6SXNzdWU0MjU3MTI4Njg=",
          "number": 15219,
          "title": "Combination of componentDidCatch and hooks throws \"Should have a queue. This is likely a bug in React.\"",
          "user": {
            "login": "timkendrick",
            "id": 953720,
            "node_id": "MDQ6VXNlcjk1MzcyMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/953720?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/timkendrick",
            "html_url": "https://github.com/timkendrick",
            "followers_url": "https://api.github.com/users/timkendrick/followers",
            "following_url": "https://api.github.com/users/timkendrick/following{/other_user}",
            "gists_url": "https://api.github.com/users/timkendrick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/timkendrick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/timkendrick/subscriptions",
            "organizations_url": "https://api.github.com/users/timkendrick/orgs",
            "repos_url": "https://api.github.com/users/timkendrick/repos",
            "events_url": "https://api.github.com/users/timkendrick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/timkendrick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2019-03-27T00:53:53Z",
          "updated_at": "2019-12-18T09:28:22Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component with hooks throws an error in its render function *after* the hooks have been defined, and that render error is caught via a `componentDidCatch` in a parent component, any subsequent components will have their hook order jumbled up on the next render.\r\n\r\nThis results in the app crashing with an **\"Uncaught Invariant Violation: Should have a queue. This is likely a bug in React. Please file an issue.\"** error (or different messages depending on the specific hooks used)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/34mvmoln65\r\n\r\n(once loaded, open the dev tools console and click the 'Trigger re-render' button)\r\n\r\nRelevant source:\r\n\r\n```jsx\r\nfunction App(props) {\r\n  const [, setCounter] = React.useState(0);\r\n  return (\r\n    <div>\r\n      <ErrorHandler>\r\n        <ErrorThrower />\r\n      </ErrorHandler>\r\n      <StatefulComponent />\r\n      <button onClick={() => setCounter(value => value + 1)}>\r\n        Trigger re-render\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ErrorThrower() {\r\n  React.useMemo(() => undefined, []);\r\n  if (true) {\r\n    throw new Error(\"!!!\");\r\n  }\r\n  return <p>[Error component]</p>;\r\n}\r\n\r\nfunction StatefulComponent() {\r\n  React.useState(null);\r\n  return <p>[Stateful component]</p>;\r\n}\r\n\r\nclass ErrorHandler extends React.Component {\r\n  ...\r\n  componentDidCatch(error) {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe app should not crash, seeing as the `componentDidCatch()` ought to catch the render error and allow the rest of the app to render as normal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis will presumably affect all versions of React that include the current Hooks implementation (v16.8 onwards)"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15207",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15207/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15207/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15207/events",
          "html_url": "https://github.com/facebook/react/issues/15207",
          "id": 424982212,
          "node_id": "MDU6SXNzdWU0MjQ5ODIyMTI=",
          "number": 15207,
          "title": "Memoized components should forward displayName",
          "user": {
            "login": "pbondoer",
            "id": 1671753,
            "node_id": "MDQ6VXNlcjE2NzE3NTM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1671753?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pbondoer",
            "html_url": "https://github.com/pbondoer",
            "followers_url": "https://api.github.com/users/pbondoer/followers",
            "following_url": "https://api.github.com/users/pbondoer/following{/other_user}",
            "gists_url": "https://api.github.com/users/pbondoer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pbondoer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pbondoer/subscriptions",
            "organizations_url": "https://api.github.com/users/pbondoer/orgs",
            "repos_url": "https://api.github.com/users/pbondoer/repos",
            "events_url": "https://api.github.com/users/pbondoer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pbondoer/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 204945357,
              "node_id": "MDU6TGFiZWwyMDQ5NDUzNTc=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
              "name": "Component: Shallow Renderer",
              "color": "eb6420",
              "default": false,
              "description": null
            },
            {
              "id": 40929153,
              "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
              "name": "Type: Enhancement",
              "color": "84b6eb",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2019-03-25T15:57:20Z",
          "updated_at": "2019-11-19T18:03:06Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'd like to report a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nFirst of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.\r\n\r\n`React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.memo` should forward displayName for the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React 16.8.5\r\n* Jest 24.5.0\r\n* enzyme 3.9.0\r\n* enzyme-adapter-react-16 1.11.2\r\n\r\n---\r\n\r\nN.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!\r\n\r\nI'd be happy to submit a PR if the issue is not too complex to look into :smile: "
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15198",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15198/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15198/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15198/events",
          "html_url": "https://github.com/facebook/react/pull/15198",
          "id": 424481182,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzODIwODM3",
          "number": 15198,
          "title": "Do not keep bailouted actions which might lead to reducer computing wrong value on update later",
          "user": {
            "login": "Andarist",
            "id": 9800850,
            "node_id": "MDQ6VXNlcjk4MDA4NTA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Andarist",
            "html_url": "https://github.com/Andarist",
            "followers_url": "https://api.github.com/users/Andarist/followers",
            "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
            "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
            "organizations_url": "https://api.github.com/users/Andarist/orgs",
            "repos_url": "https://api.github.com/users/Andarist/repos",
            "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Andarist/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 9,
          "created_at": "2019-03-23T09:17:40Z",
          "updated_at": "2019-12-03T21:56:55Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15198",
            "html_url": "https://github.com/facebook/react/pull/15198",
            "diff_url": "https://github.com/facebook/react/pull/15198.diff",
            "patch_url": "https://github.com/facebook/react/pull/15198.patch"
          },
          "body": "This is a fix for what I think is a bug which I've reported in https://github.com/facebook/react/issues/15088\r\n\r\nThe issue might be observed here https://codesandbox.io/s/n97q1o6nq4 . Just increment the counter -> disable the whole thing -> increment few times (those are going to bail out) -> enable the counter -> observe a counter incrementing by the amount of actions which have bailouted previously.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15194",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15194/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15194/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15194/events",
          "html_url": "https://github.com/facebook/react/issues/15194",
          "id": 424262965,
          "node_id": "MDU6SXNzdWU0MjQyNjI5NjU=",
          "number": 15194,
          "title": "Better error message when useEffect is called with no parameters",
          "user": {
            "login": "JoshuaKGoldberg",
            "id": 3335181,
            "node_id": "MDQ6VXNlcjMzMzUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3335181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JoshuaKGoldberg",
            "html_url": "https://github.com/JoshuaKGoldberg",
            "followers_url": "https://api.github.com/users/JoshuaKGoldberg/followers",
            "following_url": "https://api.github.com/users/JoshuaKGoldberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/JoshuaKGoldberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JoshuaKGoldberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JoshuaKGoldberg/subscriptions",
            "organizations_url": "https://api.github.com/users/JoshuaKGoldberg/orgs",
            "repos_url": "https://api.github.com/users/JoshuaKGoldberg/repos",
            "events_url": "https://api.github.com/users/JoshuaKGoldberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JoshuaKGoldberg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 40929153,
              "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
              "name": "Type: Enhancement",
              "color": "84b6eb",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 3,
          "created_at": "2019-03-22T15:21:19Z",
          "updated_at": "2020-01-11T07:32:34Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nSuppose you give an `undefined` object or forget to provide parameters to `useEffect`:\r\n\r\n```js\r\nconst App = () => {\r\n    React.useEffect();\r\n    return \"\";\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('container'));\r\n```\r\n\r\nOn JSFiddle (https://jsfiddle.net/g39javzq), this error stack is logged:\r\n\r\n```\r\nUncaught TypeError: create is not a function\r\n    at commitHookEffectList (react-dom.development.js:17372)\r\n    at commitPassiveHookEffects (react-dom.development.js:17396)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:143)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:193)\r\n    at invokeGuardedCallback (react-dom.development.js:250)\r\n    at commitPassiveEffects (react-dom.development.js:18863)\r\n    at wrapped (react.development.js:1353)\r\n    at flushFirstCallback (react.development.js:587)\r\n    at flushWork (react.development.js:699)\r\n    at MessagePort.channel.port1.onmessage (react.development.js:1093)\r\n```\r\n\r\n...though on a local project in React 16.8.4, this stack is logged:\r\n\r\n```\r\nUncaught TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\r\n    at _iterableToArrayLimit (my-project.chunk.js:123)\r\n    at _slicedToArray (my-project.chunk.js:456)\r\n    at MyComponent (myFile.js:7)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNeither of these were useful during the 5 minutes it took to find the culprit `useEffect` that should have been a `useState`.\r\n\r\nIn development, we check for an `undefined` `deps` argument in `useEffect` and give a better warning?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.4, Chrome on Mac.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15188",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15188/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15188/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15188/events",
          "html_url": "https://github.com/facebook/react/issues/15188",
          "id": 424082507,
          "node_id": "MDU6SXNzdWU0MjQwODI1MDc=",
          "number": 15188,
          "title": "useEffect can very quickly consume free quotas or cost money when used with 3rd party services",
          "user": {
            "login": "PutziSan",
            "id": 13392042,
            "node_id": "MDQ6VXNlcjEzMzkyMDQy",
            "avatar_url": "https://avatars1.githubusercontent.com/u/13392042?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PutziSan",
            "html_url": "https://github.com/PutziSan",
            "followers_url": "https://api.github.com/users/PutziSan/followers",
            "following_url": "https://api.github.com/users/PutziSan/following{/other_user}",
            "gists_url": "https://api.github.com/users/PutziSan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/PutziSan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PutziSan/subscriptions",
            "organizations_url": "https://api.github.com/users/PutziSan/orgs",
            "repos_url": "https://api.github.com/users/PutziSan/repos",
            "events_url": "https://api.github.com/users/PutziSan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/PutziSan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2019-03-22T07:40:58Z",
          "updated_at": "2019-03-23T16:00:25Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature / Documentation-Request\r\n\r\n**What is the current behavior?**\r\nWhen I developed my app last week with useEffect and firebase firestore, it happened to me that my effect used up the 20k-write limit within about 20 seconds. Of course this was a bug introduced by myself, but if I had been in a pay-as-you-go plan it could have cost me some money. I now use a custom hook as useEffect, which counts in development whether a hook is executed too often in 500ms and if so, it throws an error.\r\n\r\n**What is the expected behavior?**\r\nI'm not sure how you could solve this on your side. Of course you could do the check in development-mode, but that would probably trigger existing projects too much. However, a small hint in the documentation would be good that you should take care during development that useEffect can quickly lead to this behavior and that you should be careful when using other 3rd-party services that have a quota or have to be paid.\r\n\r\nI just wanted to share my experiences while developing a \"real\" app. If you can't or won't do anything here, you are welcome to close the issue."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15176",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15176/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15176/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15176/events",
          "html_url": "https://github.com/facebook/react/issues/15176",
          "id": 423641735,
          "node_id": "MDU6SXNzdWU0MjM2NDE3MzU=",
          "number": 15176,
          "title": "React callback ref cleanup function",
          "user": {
            "login": "k15a",
            "id": 20357450,
            "node_id": "MDQ6VXNlcjIwMzU3NDUw",
            "avatar_url": "https://avatars2.githubusercontent.com/u/20357450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/k15a",
            "html_url": "https://github.com/k15a",
            "followers_url": "https://api.github.com/users/k15a/followers",
            "following_url": "https://api.github.com/users/k15a/following{/other_user}",
            "gists_url": "https://api.github.com/users/k15a/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/k15a/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/k15a/subscriptions",
            "organizations_url": "https://api.github.com/users/k15a/orgs",
            "repos_url": "https://api.github.com/users/k15a/repos",
            "events_url": "https://api.github.com/users/k15a/events{/privacy}",
            "received_events_url": "https://api.github.com/users/k15a/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 10,
          "created_at": "2019-03-21T09:44:36Z",
          "updated_at": "2020-01-10T09:05:35Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "At the time React added callback refs the main use case for them was to replace string refs. A lot of the callback refs looked like this:\r\n\r\n```jsx\r\n<div ref={node => this.node = node} />\r\n```\r\n\r\nWith the introduction of `createRef` and `useRef` this use case is pretty much replaced by these alternatives so the use case of callback refs will shift to advanced use cases like [measuring DOM nodes](https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node).\r\n\r\nIt would be nice if you could return a cleanup function from the callback ref which is called instead of the callback with null. This way it will behave more like the `useEffect` API.\r\n\r\n```jsx\r\n<div ref={node => {\r\n  // Normal ref callback\r\n\r\n  return () => {\r\n    // Cleanup function which is called when the ref is removed\r\n  }\r\n}} />\r\n```\r\n\r\nThis will be super helpful when you need to set up a Resize-, Intersection- or  MutationObserver.\r\n\r\n```jsx\r\nfunction useDimensions() {\r\n  const [entry, setEntry] = useState()\r\n  \r\n  const targetRef = useCallback((node) => {\r\n    const observer = new ResizeObserver(([entry]) => {\r\n      setEntry(entry)\r\n    })\r\n\r\n    observer.observe(node)\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return [entry, targetRef]\r\n}\r\n\r\nfunction Comp() {\r\n  const [dimensions, targetRef] = useDimensions()\r\n\r\n  return (\r\n    <pre ref={targetRef}>\r\n      {JSON.stringify(dimensions, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n```\r\n\r\nCurrently, if you want to implement something like this you need to save the observer into a ref and then if the callback ref is called with null you have to clean up the observer from the ref.\r\n\r\nTo be 99% backward compatible we could call both the callback ref with null and the cleanup function. The only case where it isn't backward compatible is if currently someone is returning a function and doesn't expect the function to be called.\r\n\r\n```jsx\r\nfunction ref(node) {\r\n  if (node === null) {\r\n    return\r\n  }\r\n\r\n  // Do something\r\n\r\n  return () => {\r\n    // Cleanup something\r\n  }\r\n}\r\n```"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15173",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15173/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15173/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15173/events",
          "html_url": "https://github.com/facebook/react/pull/15173",
          "id": 423481830,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzMDQ1NDY0",
          "number": 15173,
          "title": "Performance improvement: ReactDOMServer `resolve` class method",
          "user": {
            "login": "overlookmotel",
            "id": 557937,
            "node_id": "MDQ6VXNlcjU1NzkzNw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/557937?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/overlookmotel",
            "html_url": "https://github.com/overlookmotel",
            "followers_url": "https://api.github.com/users/overlookmotel/followers",
            "following_url": "https://api.github.com/users/overlookmotel/following{/other_user}",
            "gists_url": "https://api.github.com/users/overlookmotel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/overlookmotel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/overlookmotel/subscriptions",
            "organizations_url": "https://api.github.com/users/overlookmotel/orgs",
            "repos_url": "https://api.github.com/users/overlookmotel/repos",
            "events_url": "https://api.github.com/users/overlookmotel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/overlookmotel/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2019-03-20T21:31:06Z",
          "updated_at": "2020-01-10T13:19:59Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15173",
            "html_url": "https://github.com/facebook/react/pull/15173",
            "diff_url": "https://github.com/facebook/react/pull/15173.diff",
            "patch_url": "https://github.com/facebook/react/pull/15173.patch"
          },
          "body": "At present the server-side renderer has a hot path through a function called `resolve()` which contains a lengthy closure `processChild()`.\r\n\r\nThis PR converts `resolve()` and `processChild()` to prototype methods of `ReactDOMServerRenderer` class, to remove this closure.\r\n\r\nUsing a [fairly naive benchmark](https://github.com/overlookmotel/reactdom-server-bench), I am seeing the following performance improvements:\r\n\r\n* Node 11: ~4%\r\n* Node 10: ~4%\r\n* Node 8: ~4%\r\n* Node 6: ~15%\r\n\r\nIf there is an official benchmark I can use to test this on, please let me know."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15154",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15154/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15154/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15154/events",
          "html_url": "https://github.com/facebook/react/issues/15154",
          "id": 422874408,
          "node_id": "MDU6SXNzdWU0MjI4NzQ0MDg=",
          "number": 15154,
          "title": "Effect memoization and immutable data structures",
          "user": {
            "login": "roman01la",
            "id": 1355501,
            "node_id": "MDQ6VXNlcjEzNTU1MDE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1355501?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roman01la",
            "html_url": "https://github.com/roman01la",
            "followers_url": "https://api.github.com/users/roman01la/followers",
            "following_url": "https://api.github.com/users/roman01la/following{/other_user}",
            "gists_url": "https://api.github.com/users/roman01la/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roman01la/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roman01la/subscriptions",
            "organizations_url": "https://api.github.com/users/roman01la/orgs",
            "repos_url": "https://api.github.com/users/roman01la/repos",
            "events_url": "https://api.github.com/users/roman01la/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roman01la/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 16,
          "created_at": "2019-03-19T17:58:05Z",
          "updated_at": "2019-03-22T16:07:08Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "Current design of `useEffect` requires dependencies to be either primitive values or references to the same object, because shallow equality check relies on `Object.is` which is an identity check for objects.\r\n\r\nThe above means that there's no way to perform structural comparison, which is needed for immutable data structures when identity check fails.\r\n\r\nTo maintain backwards compatibility a comparator function could be provided as the third argument to `useEffect`:\r\n```js\r\nuseEffect(fn, deps, depsComparator);\r\n```\r\n\r\nThe goal here is to preserve an ease of use of the API with immutable data structures in order to provide an idiomatic usage of `useEffect` in ClojureScript and other environments that rely on immutability e.g. Immutable.js\r\n\r\ncc @mhuebert @Lokeh @orestis"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15153",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15153/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15153/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15153/events",
          "html_url": "https://github.com/facebook/react/issues/15153",
          "id": 422872651,
          "node_id": "MDU6SXNzdWU0MjI4NzI2NTE=",
          "number": 15153,
          "title": "eslint-plugin-react-hooks - autofix useCallback/useMemo behaviour",
          "user": {
            "login": "RedTn",
            "id": 3923164,
            "node_id": "MDQ6VXNlcjM5MjMxNjQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/3923164?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RedTn",
            "html_url": "https://github.com/RedTn",
            "followers_url": "https://api.github.com/users/RedTn/followers",
            "following_url": "https://api.github.com/users/RedTn/following{/other_user}",
            "gists_url": "https://api.github.com/users/RedTn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RedTn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RedTn/subscriptions",
            "organizations_url": "https://api.github.com/users/RedTn/orgs",
            "repos_url": "https://api.github.com/users/RedTn/repos",
            "events_url": "https://api.github.com/users/RedTn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RedTn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1249821345,
              "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
              "name": "Component: ESLint Rules",
              "color": "f7afdb",
              "default": false,
              "description": ""
            },
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 0,
          "created_at": "2019-03-19T17:54:16Z",
          "updated_at": "2019-03-19T18:21:32Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDiscussion for new feature\r\n\r\n**What is the current behavior?**\r\n\r\nuseCallback/useMemo hook's do nothing when there is no second argument provided for deps. The eslint plugin reports this but does not autofix\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.4\r\n\r\n**PR to implement:** \r\n\r\nhttps://github.com/facebook/react/pull/15146\r\n\r\n&nbsp;\r\n\r\nCurrently, the eslint plugin does not autofix useCallback/useMemo to infer deps if there isn't a second argument provided to the hook. We can autofix it to infer deps if needed, or autofix to remove the hook altogether if there no deps needed (according to https://reactjs.org/docs/hooks-reference.html#usememo, if no second argument is provided it behaves as if the hook doesn't exist anyways).\r\n\r\nWhat would be the best way to implement this autofix? In my opinion, linting shouldn't be breaking functionality on an autofix, so autofixing to remove the hook is the safest to implement. Autofixing to infer deps will change behavior in code so I was thinking of having a config option the dev needs to specify so that linting changes that is affecting behavior is explicit.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15129",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15129/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15129/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15129/events",
          "html_url": "https://github.com/facebook/react/issues/15129",
          "id": 421845605,
          "node_id": "MDU6SXNzdWU0MjE4NDU2MDU=",
          "number": 15129,
          "title": "Hooks - unmount and didUpdate",
          "user": {
            "login": "lichstam",
            "id": 34944192,
            "node_id": "MDQ6VXNlcjM0OTQ0MTky",
            "avatar_url": "https://avatars2.githubusercontent.com/u/34944192?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lichstam",
            "html_url": "https://github.com/lichstam",
            "followers_url": "https://api.github.com/users/lichstam/followers",
            "following_url": "https://api.github.com/users/lichstam/following{/other_user}",
            "gists_url": "https://api.github.com/users/lichstam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lichstam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lichstam/subscriptions",
            "organizations_url": "https://api.github.com/users/lichstam/orgs",
            "repos_url": "https://api.github.com/users/lichstam/repos",
            "events_url": "https://api.github.com/users/lichstam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lichstam/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-03-16T19:50:01Z",
          "updated_at": "2019-03-18T14:33:18Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "I'm opening this up at Dan's request from a twitter discussion:\r\nhttps://twitter.com/lichstam/status/1106995545938247682\r\n\r\nFrom Twitter:\r\n\r\nI can fill in on this. The first example I would like to point to is a debouncing hook I've created that looks something like this:\r\n  \r\n```javascript\r\nuseEffect(() => {\r\n  const debounced = setTimeout(() => setDebounced(steps), 500);\r\n  return () => clearTimeout(debounced);\r\n}, [steps])\r\n```\r\n\r\nand then I have another one, that actually performs the request:\r\n\r\n```javascript\r\nuseEffect(request, [debounced])\r\n```\r\n\r\nAnd it all works fine, apart from when the component is mounted and unmounted.\r\nIn the class model I was able to make sure it never runs the first time and on unmounting I could clear the timeout and, if the state value differs from prop (yes I know, you shouldn't mirror your props but I have to debounce somewhere), I could just perform a last request before I unmount. \r\nFurthermore, `componentDidUpdate` really made it easy preventing this from running the first time. I'm not quite sure how to approach this with hooks.\r\nPerhaps I'm doing it all wrong but to Patrick's point, the class way was more straight forward.\r\n\r\nAnother example: I code in RN and use the Animated API a lot. I have cases that translates into something like this:\r\n\r\n```javascript\r\nuseEffect(() => {\r\n  if (inAddStage) moveAndShowStep(); // Animate with Animated API\r\n}, [inAddStage]);\r\n```\r\n\r\nThis works well but it does perform an unnecessary initial run which makes me wonder if I've missed the point with hooks (again, to Patrick's point, it seems a bit more complex sometimes). Why isn't there a hook that **doesn't** run the first time btw? Again, with the old lifecycles it was much clearer how to prevent this from happening (using `componentDidUpdate`).\r\n\r\nOn a last note, I just want to say that I'm very fond of the idea and wholeheartedly support the functional approach and I really like the concept of hooks being \"state observers\", that react only when the specified attributes change - which basically makes the whole code more declarative.\r\nI've just started using them so I'll probably figure things out along the way but I thought I could give you something since you didn't get any answer :)"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15091",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15091/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15091/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15091/events",
          "html_url": "https://github.com/facebook/react/pull/15091",
          "id": 419954893,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjYwMzM4MDcz",
          "number": 15091,
          "title": " [ReactDOM] Add strict mode test for findDOMNode",
          "user": {
            "login": "eps1lon",
            "id": 12292047,
            "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eps1lon",
            "html_url": "https://github.com/eps1lon",
            "followers_url": "https://api.github.com/users/eps1lon/followers",
            "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
            "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
            "organizations_url": "https://api.github.com/users/eps1lon/orgs",
            "repos_url": "https://api.github.com/users/eps1lon/repos",
            "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eps1lon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-03-12T12:17:50Z",
          "updated_at": "2020-01-10T16:21:14Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15091",
            "html_url": "https://github.com/facebook/react/pull/15091",
            "diff_url": "https://github.com/facebook/react/pull/15091.diff",
            "patch_url": "https://github.com/facebook/react/pull/15091.patch"
          },
          "body": "#13841 deprecated presumably [\"all usage\"](https://github.com/facebook/react/pull/13841#issuecomment-429444800) of `findDOMNode`. This is not the case if passed a host component<sup>1</sup>. I wanted to verify if this is intended or not since we have a use case for not issuing a deprecation warning for host components:\r\n\r\nWe have a component library that lets the user pass a custom component that is rendered. It can be a different DOM node or an actual component:\r\n```js\r\nclass LibraryComponent() {\r\n  // this is incomplete. It's just one instance where we get it\r\n  componentDidMount() {\r\n    this.button = ReactDOM.findDOMNode(this);\r\n    listenForFocusKeys(ownerWindow(this.button));\r\n\r\n    if (this.props.action) {\r\n      this.props.action({\r\n        focusVisible: () => {\r\n          this.setState({ focusVisible: true });\r\n          this.button.focus();\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { as: Component } = this.props;\r\n\treturn <Component />\r\n  }\r\n}\r\n```\r\nHowever we required the DOM node of the rendered component for focus handling (essentially adding a focus-visible polyfill). Before deprecation we used `findDOMNode(this)`. Now that `findDOMNode` is deprecated we want to move away from that usage while enabling some backwards compatibility:\r\n```diff\r\nclass LibraryComponent() {\r\n+ buttonRef = React.createRef();\r\n  // this is incomplete. It's just one instance where we get it\r\n  componentDidMount() {\r\n-   this.button = ReactDOM.findDOMNode(this);\r\n-   listenForFocusKeys(ownerWindow(this.button));\r\n+   listenForFocusKeys(ownerWindow(this.getButtonNode()));\r\n\r\n    if (this.props.action) {\r\n      this.props.action({\r\n        focusVisible: () => {\r\n          this.setState({ focusVisible: true });\r\n-         this.button.focus();\r\n+         this.getButtonNode().focus();\r\n        },\r\n      });\r\n    }\r\n  }\r\n  \r\n+ getButtonNode() {\r\n+   return ReactDOM.findDOMNode(this.buttonRef.current);\r\n+ }\r\n\r\n  render() {\r\n    const { as: Component } = this.props;\r\n-\treturn <Component />\r\n+\treturn <Component ref={this.buttonRef} />\r\n  }\r\n}\r\n```\r\n\r\nThis change:\r\n1. is breaking usage with function components `<LibraryComponent as={SomeFunctionComponent} />`\r\n2. strict mode compatible with `<LibraryComponent as=\"div\" />` or any other host component or ref forwarding component\r\n3. not strict mode ready but also not breaking for `<LibraryComponent as={SomeClassComponent} />`\r\n\r\nThe test added with this PR is basically ensuring the third behavior.\r\n\r\nFollowup on https://github.com/facebook/react/pull/13841#issuecomment-433416333\r\n\r\n<sup>1</sup> Not sure if this is the correct term."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15088",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15088/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15088/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15088/events",
          "html_url": "https://github.com/facebook/react/issues/15088",
          "id": 419895148,
          "node_id": "MDU6SXNzdWU0MTk4OTUxNDg=",
          "number": 15088,
          "title": "useReducer - eagerReducer optimization discussion/questions",
          "user": {
            "login": "Andarist",
            "id": 9800850,
            "node_id": "MDQ6VXNlcjk4MDA4NTA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Andarist",
            "html_url": "https://github.com/Andarist",
            "followers_url": "https://api.github.com/users/Andarist/followers",
            "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
            "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
            "organizations_url": "https://api.github.com/users/Andarist/orgs",
            "repos_url": "https://api.github.com/users/Andarist/repos",
            "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Andarist/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2019-03-12T09:57:43Z",
          "updated_at": "2019-04-04T06:34:03Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "I'd like to continue the discussion started by me under a recent blog post by Dan as encouraged by Dan 😉 https://github.com/gaearon/overreacted.io/commit/99bfdca459ff4094ee523c7419b58989d18bc594#r32694433\r\n\r\nJust to summarize what I've stumbled upon when experimenting with useReducer after reading that hoisted & declared in render reducers are treated differently (I've wanted to explore how they are handled by React):\r\n1. I have no idea how to reenter eagerReducer calculation after first scheduled work (& after render gets fully processed & committed). This might very well be just me not understanding how fibers work - but currently I'm confused by this. It doesn't enter this code branch because `fiber.expirationTime` is not 0 (NoWork) and the work gets scheduled right away. Any pointers regarding this? Is this valid? Might this be a bug somewhere?\r\n2. The logic around reducer bailouts is somewhat iffy for me - maybe it's just a matter of mentioning those in the documentation:\r\n- not every reducer update can bailout from rendering. If the action queue gets processed in the render phase then it's just not possible, we are already rendering after all. \r\n- action queue gets processed in the render phase for reducers declared inside render, this means that any new state computation might depend on the \"fresh\" props. This is not the case for the bailout mechanism though - it's only possible to perform a bailout when dispatching an action (so when we do not have access to the fresh props). Should this restriction be mentioned in the docs? IMHO this behaviour is inconsistent - for the greater good, so it's acceptable but I think it should be documented because it's slightly inconsistent & people might trip over this.\r\n\r\n**Note** I'm happy to provide documentation changes if needed, I'd like to discuss those points first to get a better understanding of things."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15080",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15080/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15080/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15080/events",
          "html_url": "https://github.com/facebook/react/issues/15080",
          "id": 419249211,
          "node_id": "MDU6SXNzdWU0MTkyNDkyMTE=",
          "number": 15080,
          "title": "Consider exporting `batchedUpdates` from React",
          "user": {
            "login": "markerikson",
            "id": 1128784,
            "node_id": "MDQ6VXNlcjExMjg3ODQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markerikson",
            "html_url": "https://github.com/markerikson",
            "followers_url": "https://api.github.com/users/markerikson/followers",
            "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
            "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
            "organizations_url": "https://api.github.com/users/markerikson/orgs",
            "repos_url": "https://api.github.com/users/markerikson/repos",
            "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markerikson/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-03-10T23:51:41Z",
          "updated_at": "2019-08-24T08:26:01Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "ReactDOM and React Native both currently export an `unstable_batchedUpdates` API.  Because batching is a renderer/reconciliation-level concern, this API is exported by the renderer packages, not the core `react` package.\r\n\r\nThe React team has recently encouraged the Redux team to make use of `unstable_batchedUpdates` in React-Redux.  However, this becomes complicated due to how that API is being exported.\r\n\r\nIt's possible to deal with this at the bundler level.  Some experimentation shows that creating an alternate file with a `.native.js` extension will cause that to be picked up by the RN bundler, as in this example:\r\n\r\n```js\r\n// batch.js\r\nimport {unstable_batchedUpdates} from \"./react-dom\";\r\n\r\n// ./react-dom.js\r\nexport {unstable_batchedUpdates} from \"react-dom\"\r\n\r\n// ./react-dom.native.js\r\nexport {unstable_batchedUpdates} from \"react-native\"\r\n```\r\n\r\nHowever, this does not handle the case where an alternative React renderer is being used.  The [list of other React renderers is continuing to grow](https://github.com/chentsulin/awesome-react-renderer), which means that a React library that needs batching would have to deal with that situation in some way.  This becomes extremely complicated when you start considering variations on bundlers, module formats, and build environments.\r\n\r\nIt would be extremely beneficial if the React core itself exported a `batchedUpdates` API.  That could default to being a noop wrapper like `(callback) => callback()` if no suitable implementation was available.\r\n\r\nI know that `unstable_batchedUpdates()` is, uh... \"unstable\".  However, the React team has stated that \"it's the most stable of the unstable APIs\", and \"half of Facebook depends on this\".\r\n\r\nI think it would really help the ecosystem if some form of this API was solidified and exported from the core React package itself."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15069",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15069/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15069/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15069/events",
          "html_url": "https://github.com/facebook/react/issues/15069",
          "id": 418939990,
          "node_id": "MDU6SXNzdWU0MTg5Mzk5OTA=",
          "number": 15069,
          "title": "Can an error boundary prevent React's error logging?",
          "user": {
            "login": "silverwind",
            "id": 115237,
            "node_id": "MDQ6VXNlcjExNTIzNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/115237?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/silverwind",
            "html_url": "https://github.com/silverwind",
            "followers_url": "https://api.github.com/users/silverwind/followers",
            "following_url": "https://api.github.com/users/silverwind/following{/other_user}",
            "gists_url": "https://api.github.com/users/silverwind/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/silverwind/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/silverwind/subscriptions",
            "organizations_url": "https://api.github.com/users/silverwind/orgs",
            "repos_url": "https://api.github.com/users/silverwind/repos",
            "events_url": "https://api.github.com/users/silverwind/events{/privacy}",
            "received_events_url": "https://api.github.com/users/silverwind/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 8,
          "created_at": "2019-03-08T20:11:45Z",
          "updated_at": "2019-12-09T18:11:31Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.\r\n\r\nMaybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15065",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15065/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15065/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15065/events",
          "html_url": "https://github.com/facebook/react/issues/15065",
          "id": 418804183,
          "node_id": "MDU6SXNzdWU0MTg4MDQxODM=",
          "number": 15065,
          "title": "Double-invoking the render function in StrictMode is somewhat too deterministic",
          "user": {
            "login": "dai-shi",
            "id": 490574,
            "node_id": "MDQ6VXNlcjQ5MDU3NA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/490574?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dai-shi",
            "html_url": "https://github.com/dai-shi",
            "followers_url": "https://api.github.com/users/dai-shi/followers",
            "following_url": "https://api.github.com/users/dai-shi/following{/other_user}",
            "gists_url": "https://api.github.com/users/dai-shi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dai-shi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dai-shi/subscriptions",
            "organizations_url": "https://api.github.com/users/dai-shi/orgs",
            "repos_url": "https://api.github.com/users/dai-shi/repos",
            "events_url": "https://api.github.com/users/dai-shi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dai-shi/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 11,
          "created_at": "2019-03-08T14:15:26Z",
          "updated_at": "2019-11-04T02:39:36Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature in the development mode\r\n\r\n**What is the current behavior?**\r\n\r\nInside `<StrictMode>`, the render function is invoked twice, but always the second one is committed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/k938koy8mv\r\nI made a tiny change in @gaearon 's code.\r\n```\r\n  // This may not work in concurrent mode.\r\n  savedCallback.current = callback;\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nDevelopers can notice the wrong code (unintentionally mutating refs in the render function).\r\n\r\nOne idea is to occasionally (ex. `Math.random() < 0.25`) commit the first result from double-invoked render function.\r\nThe other could be to introduce `<StrictStrictMode>` which is to triple-invoke the render function and commit the second one.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15039",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15039/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15039/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15039/events",
          "html_url": "https://github.com/facebook/react/issues/15039",
          "id": 417908594,
          "node_id": "MDU6SXNzdWU0MTc5MDg1OTQ=",
          "number": 15039,
          "title": "react-debug-tools doesn't support legacy context (Component.contextTypes)",
          "user": {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2019-03-06T16:54:36Z",
          "updated_at": "2020-01-08T19:13:43Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "Original report: https://github.com/facebook/react-devtools/issues/1304\r\n\r\nRepro case: https://64yojj2wyk.codesandbox.io/"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15037",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15037/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15037/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15037/events",
          "html_url": "https://github.com/facebook/react/pull/15037",
          "id": 417817993,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjU4NzMwNzUx",
          "number": 15037,
          "title": "Update Rollup version to 1.19.4 and fix breaking changes",
          "user": {
            "login": "kunukn",
            "id": 3199603,
            "node_id": "MDQ6VXNlcjMxOTk2MDM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3199603?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kunukn",
            "html_url": "https://github.com/kunukn",
            "followers_url": "https://api.github.com/users/kunukn/followers",
            "following_url": "https://api.github.com/users/kunukn/following{/other_user}",
            "gists_url": "https://api.github.com/users/kunukn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kunukn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kunukn/subscriptions",
            "organizations_url": "https://api.github.com/users/kunukn/orgs",
            "repos_url": "https://api.github.com/users/kunukn/repos",
            "events_url": "https://api.github.com/users/kunukn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kunukn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 39,
          "created_at": "2019-03-06T14:00:59Z",
          "updated_at": "2020-01-09T20:22:19Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15037",
            "html_url": "https://github.com/facebook/react/pull/15037",
            "diff_url": "https://github.com/facebook/react/pull/15037.diff",
            "patch_url": "https://github.com/facebook/react/pull/15037.patch"
          },
          "body": "Purpose:\r\nStay up to date with build tool.\r\n\r\nMain changes:\r\n* `package.json` \r\nUse latest rollup version and update the version of some of the rollup plugins.\r\n\r\n* Fix and use the rollup API breaking changes, mostly API naming changes.\r\nhttps://rollupjs.org/guide/en#deprecated-hooks\r\n\r\n* Re-add `legacy behaviour` using externalLiveBindings=false Rollup flag. It was deprecated by newer Rollup version.<br/>\r\n`definition of legacy option:` Rollup does not output getters when in legacy mode,<br/>\r\n[BREAKING] Deprecate the legacy option and thus IE8 support\r\nhttps://github.com/rollup/rollup/blob/master/CHANGELOG.md#0600<br/>\r\n\r\n* Add ignore rollup warnings, it was breaking the build.\r\nRollup warning: `CIRCULAR_DEPENDENCY`\r\n\r\nBUILD\r\n`yarn build react/index,react-dom/index  --type=FB_WWW_PROD`\r\n\r\nRollup changelog.\r\nhttps://github.com/rollup/rollup/blob/master/CHANGELOG.md\r\n\r\ngetter description. \r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\r\n\r\nBabel plugin handbook\r\nhttps://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15023",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15023/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15023/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15023/events",
          "html_url": "https://github.com/facebook/react/pull/15023",
          "id": 417497291,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjU4NDgxODM1",
          "number": 15023,
          "title": "Fix SSR missing data-reactroot attribute inside invisible React elements",
          "user": {
            "login": "overlookmotel",
            "id": 557937,
            "node_id": "MDQ6VXNlcjU1NzkzNw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/557937?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/overlookmotel",
            "html_url": "https://github.com/overlookmotel",
            "followers_url": "https://api.github.com/users/overlookmotel/followers",
            "following_url": "https://api.github.com/users/overlookmotel/following{/other_user}",
            "gists_url": "https://api.github.com/users/overlookmotel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/overlookmotel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/overlookmotel/subscriptions",
            "organizations_url": "https://api.github.com/users/overlookmotel/orgs",
            "repos_url": "https://api.github.com/users/overlookmotel/repos",
            "events_url": "https://api.github.com/users/overlookmotel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/overlookmotel/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 10,
          "created_at": "2019-03-05T20:55:40Z",
          "updated_at": "2020-01-10T13:19:26Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/15023",
            "html_url": "https://github.com/facebook/react/pull/15023",
            "diff_url": "https://github.com/facebook/react/pull/15023.diff",
            "patch_url": "https://github.com/facebook/react/pull/15023.patch"
          },
          "body": "PR for #15012.\r\n\r\n```js\r\nconst React = require('react'),\r\n  {renderToString} = require('react-dom/server');\r\n\r\nconst Context = React.createContext();\r\n\r\nconst html = renderToString(\r\n  <Context.Provider>\r\n    <div>Hello!</div>\r\n  </Context.Provider>\r\n);\r\n```\r\n\r\nBefore this PR, outputs:\r\n\r\n```\r\n'<div>Hello!</div>'\r\n```\r\n\r\nwith this PR:\r\n\r\n```\r\n'<div data-reactroot=\"\">Hello!</div>'\r\n```\r\n\r\nImplementation is through addition of a `.domRootFrame` property on `ReactDOMServerRenderer` instance.\r\n\r\n* `domRootFrame` is `null` if no DOM element in stack above currently rendering element.\r\n* When a entering a root DOM element, `domRootFrame` is set to the stack frame for that DOM element.\r\n* When exiting root DOM element, `domRootFrame` is set back to `null` (the root element is identified by checking if the frame being popped from the stack is equal to `domRootFrame`)\r\n\r\nI am not clear what desired behavior is when there are multiple DOM roots e.g.:\r\n\r\n```\r\n<React.Fragment>\r\n  <div>One</div>\r\n  <div>Two</div>\r\n</React.Fragment>\r\n```\r\n\r\nI guess both `<div>`s should get `data-reactroot=\"\"` markup, but not sure what the result on client side would be!\r\n\r\nAny changes you want made, please shout."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15019",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15019/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15019/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15019/events",
          "html_url": "https://github.com/facebook/react/issues/15019",
          "id": 417364177,
          "node_id": "MDU6SXNzdWU0MTczNjQxNzc=",
          "number": 15019,
          "title": "The browser crashes when use React.lazy return Promise.resolve(undefined)",
          "user": {
            "login": "angular-moon",
            "id": 7876335,
            "node_id": "MDQ6VXNlcjc4NzYzMzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/7876335?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/angular-moon",
            "html_url": "https://github.com/angular-moon",
            "followers_url": "https://api.github.com/users/angular-moon/followers",
            "following_url": "https://api.github.com/users/angular-moon/following{/other_user}",
            "gists_url": "https://api.github.com/users/angular-moon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/angular-moon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/angular-moon/subscriptions",
            "organizations_url": "https://api.github.com/users/angular-moon/orgs",
            "repos_url": "https://api.github.com/users/angular-moon/repos",
            "events_url": "https://api.github.com/users/angular-moon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/angular-moon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1775955521,
              "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
              "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
              "name": "Resolution: Backlog",
              "color": "9dd1e8",
              "default": false,
              "description": ""
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 5,
          "created_at": "2019-03-05T15:45:18Z",
          "updated_at": "2020-01-09T21:59:21Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nThe browser crashes \r\n\r\n```js\r\nconst Loading = () => <div>loading...</div>;\r\nconst Component = lazy(() => Promise.resolve(undefined));\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Suspense fallback={<Loading />}>\r\n        <Component />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n```\r\n*I can't provide an example of CodeSandbox, which would cause the browser to crash*\r\n\r\n**What is the expected behavior?**\r\nthrow Error\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact@16.8.3\r\nreact-dom@16.8.3\r\nchrome 72.0.3626.119"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15012",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15012/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15012/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15012/events",
          "html_url": "https://github.com/facebook/react/issues/15012",
          "id": 417046710,
          "node_id": "MDU6SXNzdWU0MTcwNDY3MTA=",
          "number": 15012,
          "title": "`data-reactroot=\"\"` lost in server render if element inside `<Context.Provider>`",
          "user": {
            "login": "overlookmotel",
            "id": 557937,
            "node_id": "MDQ6VXNlcjU1NzkzNw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/557937?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/overlookmotel",
            "html_url": "https://github.com/overlookmotel",
            "followers_url": "https://api.github.com/users/overlookmotel/followers",
            "following_url": "https://api.github.com/users/overlookmotel/following{/other_user}",
            "gists_url": "https://api.github.com/users/overlookmotel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/overlookmotel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/overlookmotel/subscriptions",
            "organizations_url": "https://api.github.com/users/overlookmotel/orgs",
            "repos_url": "https://api.github.com/users/overlookmotel/repos",
            "events_url": "https://api.github.com/users/overlookmotel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/overlookmotel/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710332294,
              "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
              "name": "Component: Server Rendering",
              "color": "d4c5f9",
              "default": false,
              "description": null
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 5,
          "created_at": "2019-03-04T23:46:54Z",
          "updated_at": "2019-03-25T21:07:33Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nCalling `.renderToString()` on `<React.Fragment><div>Hello!</div></React.Fragment>` produces `<div data-reactroot=\"\">Hello!</div>`.\r\n\r\nHowever, many other combinations of DOM root element within \"invisible\" React elements are rendered without `data-reactroot=\"\"`.\r\n\r\ne.g. all of the following produce `<div>Hello!</div>` (without `data-reactroot=\"\"`):\r\n\r\n```\r\n<React.Fragment><React.Fragment><div>Hello!</div></React.Fragment></React.Fragment>\r\n\r\n<Context.Provider><div>Hello!</div></Context.Provider>\r\n\r\n<Context.Consumer>{() => <div>Hello!</div>}</Context.Consumer>\r\n\r\n<React.StrictMode><div>Hello!</div></React.StrictMode>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee above.\r\n\r\n**What is the expected behavior?**\r\n\r\nI assume that any of the above examples should produce markup including `data-reactroot=\"\"` on the `div` element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIssue present in all versions >= 16.7.0, possibly earlier versions too.\r\n\r\nThis is a minor issue - I guess would only affect where the markup is rehydrated on client side using `.render()` rather than `.hydrate()` - usage which is discouraged. However, using `.render()` to rehydrate is still officially supported.\r\n\r\nI can implement a fix and make a PR. But can anyone confirm that the expected behavior is what I think it is, and that this is indeed a bug?"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/15006",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/15006/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/15006/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/15006/events",
          "html_url": "https://github.com/facebook/react/issues/15006",
          "id": 416579679,
          "node_id": "MDU6SXNzdWU0MTY1Nzk2Nzk=",
          "number": 15006,
          "title": "useEffect memory leak when setting state in fetch promise",
          "user": {
            "login": "ryansaam",
            "id": 38289731,
            "node_id": "MDQ6VXNlcjM4Mjg5NzMx",
            "avatar_url": "https://avatars3.githubusercontent.com/u/38289731?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryansaam",
            "html_url": "https://github.com/ryansaam",
            "followers_url": "https://api.github.com/users/ryansaam/followers",
            "following_url": "https://api.github.com/users/ryansaam/following{/other_user}",
            "gists_url": "https://api.github.com/users/ryansaam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ryansaam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ryansaam/subscriptions",
            "organizations_url": "https://api.github.com/users/ryansaam/orgs",
            "repos_url": "https://api.github.com/users/ryansaam/repos",
            "events_url": "https://api.github.com/users/ryansaam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ryansaam/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 620368407,
              "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
              "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
              "name": "Resolution: Needs More Information",
              "color": "fffde7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 12,
          "created_at": "2019-03-03T23:23:36Z",
          "updated_at": "2020-01-10T11:25:49Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReporting a possible bug\r\n\r\n**What is the current behavior?**\r\nMy app renders fine with no errors but I can't seem to figure out why I keep getting this warning:\r\n\r\nindex.js:1446 Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n    in ArtistProfile (at App.js:51)\r\n    in component (created by Route)\r\n\r\napi-calls.js (Here's a link):\r\nhttps://github.com/ryansaam/litphum/blob/master/src/api-calls.js\r\n\r\nApp.js\r\n```javascript\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      user: {},\r\n      spotifyAPI: {}\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (user_token) {\r\n      sessionStorage.setItem('access_token', user_token)\r\n      this.setState({\r\n        spotifyAPI: new spotifyAPI( user_token )\r\n      })\r\n    } else if (sessionStorage.getItem('access_token')) {\r\n      this.setState({\r\n        spotifyAPI: new spotifyAPI( sessionStorage.getItem('access_token') )\r\n      })\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.spotifyAPI !== prevState.spotifyAPI)\r\n      this.state.spotifyAPI.getUserProfile()\r\n      .then(data => this.setState({user: data}))\r\n  }\r\n  \r\n  render() {\r\n    const { user, spotifyAPI } = this.state\r\n    const token = sessionStorage.getItem('access_token')\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n            { (spotifyAPI.user_token && user)\r\n            ? (<div className=\"logged-in\">\r\n                <div style={{width: \"250px\", height: \"100%\", position: \"relative\", float: \"left\"}} >\r\n                  <Nav image={user.images ? user.images[0].url : null} user={user} />\r\n                </div>\r\n                <main id=\"main\">\r\n                  <Route path={`/${user.type}/${user.id}`} exact component={() => <Home spotifyAPI={spotifyAPI} />} />\r\n                  <Route path=\"/artist/\" component={() => <ArtistProfile spotifyAPI={spotifyAPI} />} />\r\n                </main>\r\n              </div>) \r\n            : <div onClick={() => window.location = \"http://localhost:8888/login\"} >log in</div>\r\n            }\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nArtistProfile.js\r\n```javascript\r\nconst  ArtistProfile = props => {\r\n  const [artistData, setArtistData] = useState(null)\r\n  const { getArtist, getArtistAlbums, getArtistTopTracks } = props.spotifyAPI\r\n\r\n  useEffect(() => {\r\n    const id = window.location.pathname.split(\"/\").pop()\r\n    const ac = new AbortController()\r\n    console.log(id)\r\n    Promise.all([\r\n      getArtist(id, ac),\r\n      getArtistAlbums(id, [\"album\"],\"US\", 10, 0, ac),\r\n      getArtistTopTracks(id, \"US\", ac)\r\n    ])\r\n    .then(response => {\r\n      setArtistData({\r\n        artist: response[0],\r\n        artistAlbums: response[1],\r\n        artistTopTracks: response[2]\r\n      })\r\n    })\r\n    .catch(ex => console.error(ex))\r\n    return () => ac.abort()\r\n  }, [])\r\n  console.log(artistData)\r\n  return (\r\n    <div>\r\n      <ArtistProfileContainer>\r\n        <AlbumContainer>\r\n          {artistData ? artistData.artistAlbums.items.map(album => {\r\n            return (\r\n              <AlbumTag\r\n                image={album.images[0].url}\r\n                name={album.name}\r\n                artists={album.artists}\r\n                key={album.id}\r\n              />\r\n            )\r\n          })\r\n          : null}\r\n        </AlbumContainer>\r\n      </ArtistProfileContainer>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nIf you can see in ArtistProfile.js I am using a clean up function that aborts when the component does unmount. The fetch would be aborted and state shouldn't update but for some reason I am still getting this memory leak warning.\r\n\r\nWhat I am expecting is for the warning to no longer throw because am using a clean up function that aborts the fetch.\r\n\r\nLink to repo: https://github.com/ryansaam/litphum\r\n\r\n- Files mentioned\r\n    App.js: https://github.com/ryansaam/litphum/blob/master/src/App.js\r\n    ArtistProfile.js: https://github.com/ryansaam/litphum/blob/master/src/components/ArtistProfile.js\r\n    api-calls.js: https://github.com/ryansaam/litphum/blob/master/src/api-calls.js\r\n\r\nMy stackoverflow question: https://stackoverflow.com/questions/54954385/react-useeffect-causing-cant-perform-a-react-state-update-on-an-unmounted-comp/54964237#54964237\r\n\r\n\r\n**Which versions of React, and which browser**\r\nReact 16.8.2\r\nLatest version of Chrome\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14994",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14994/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14994/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14994/events",
          "html_url": "https://github.com/facebook/react/issues/14994",
          "id": 416238549,
          "node_id": "MDU6SXNzdWU0MTYyMzg1NDk=",
          "number": 14994,
          "title": "useState not bailing out when state does not change",
          "user": {
            "login": "perrin4869",
            "id": 5774716,
            "node_id": "MDQ6VXNlcjU3NzQ3MTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5774716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/perrin4869",
            "html_url": "https://github.com/perrin4869",
            "followers_url": "https://api.github.com/users/perrin4869/followers",
            "following_url": "https://api.github.com/users/perrin4869/following{/other_user}",
            "gists_url": "https://api.github.com/users/perrin4869/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/perrin4869/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/perrin4869/subscriptions",
            "organizations_url": "https://api.github.com/users/perrin4869/orgs",
            "repos_url": "https://api.github.com/users/perrin4869/repos",
            "events_url": "https://api.github.com/users/perrin4869/events{/privacy}",
            "received_events_url": "https://api.github.com/users/perrin4869/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 29,
          "created_at": "2019-03-01T19:05:10Z",
          "updated_at": "2019-10-24T09:04:44Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nAs demonstrated in [this](https://codesandbox.io/s/1r539z96r3) codesandbox, trying to implement a pattern similar to the one discussed in https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops results in an infinite loop, even if the value of the state does not change. This seems like a bug, because, as documented [here](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update), `If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects.`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nSince the state does not change, bail out on the re-render.\r\nThis can be worked around by adding a check before `setState` to check if the state has changed before calling the function.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14988",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14988/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14988/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14988/events",
          "html_url": "https://github.com/facebook/react/issues/14988",
          "id": 416027015,
          "node_id": "MDU6SXNzdWU0MTYwMjcwMTU=",
          "number": 14988,
          "title": "Subscription to event listener in useEffect can miss an update",
          "user": {
            "login": "jsnajdr",
            "id": 664258,
            "node_id": "MDQ6VXNlcjY2NDI1OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/664258?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsnajdr",
            "html_url": "https://github.com/jsnajdr",
            "followers_url": "https://api.github.com/users/jsnajdr/followers",
            "following_url": "https://api.github.com/users/jsnajdr/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsnajdr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsnajdr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsnajdr/subscriptions",
            "organizations_url": "https://api.github.com/users/jsnajdr/orgs",
            "repos_url": "https://api.github.com/users/jsnajdr/repos",
            "events_url": "https://api.github.com/users/jsnajdr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsnajdr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1205087127,
              "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
              "name": "Component: Concurrent Mode",
              "color": "ffccd3",
              "default": false,
              "description": ""
            },
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 15,
          "created_at": "2019-03-01T10:01:51Z",
          "updated_at": "2019-07-01T19:33:28Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Steps to reproduce:**\r\nRun the following app that uses an event-emitting counter and maintains a subscription to render updates:\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction createCounter() {\r\n  let value = 0;\r\n  const listeners = new Set();\r\n\r\n  return {\r\n    get() { return value; },\r\n    on(listener) { listeners.add(listener); },\r\n    off(listener) { listeners.delete(listener); },\r\n    increment() { value++; listeners.forEach(listener => listener()); }\r\n  };\r\n}\r\n\r\nconst Counter = createCounter();\r\n\r\nfunction CounterWithHook() {\r\n  const [counter, setCounter] = React.useState(Counter.get);\r\n\r\n  React.useEffect(() => {\r\n    const onChange = () => setCounter(Counter.get());\r\n    Counter.on(onChange);\r\n    return () => Counter.off(onChange);\r\n  }, []);\r\n\r\n  return <div>counter: {counter}</div>;\r\n}\r\n\r\nReactDOM.render(\r\n  <>\r\n    <CounterWithHook />\r\n    <button onClick={Counter.increment}>increment</button>\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nrequestAnimationFrame(Counter.increment);\r\n```\r\n\r\nThe `requestAnimationFrame` at the end will increment the counter in a slightly insidious way.\r\n\r\n**Expected result:**\r\nAfter loading the app, I see `counter: 1` and clicking the `increment` button updates the UI to `counter: 2`.\r\n\r\n**Actual result:**\r\nAfter loading the app, I see `counter: 0` and clicking the button updates the UI to `counter: 2`.\r\n\r\nThe timing of the `Counter.increment` is such that it happens after the initial render, but before the listener is attached.\r\n\r\nImplementing the same thing with lifecycle methods behaves differently: `componentDidMount` runs soon enough to catch the update.\r\n\r\nIs that expected and a part of the `useEffect` contract? Is there a better way to maintain subscriptions? Note that the missed update came from an independent source, completely outside React."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14980",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14980/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14980/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14980/events",
          "html_url": "https://github.com/facebook/react/issues/14980",
          "id": 415741541,
          "node_id": "MDU6SXNzdWU0MTU3NDE1NDE=",
          "number": 14980,
          "title": "Misleading error description when using wrong useRef",
          "user": {
            "login": "madroneropaulo",
            "id": 4364107,
            "node_id": "MDQ6VXNlcjQzNjQxMDc=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4364107?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/madroneropaulo",
            "html_url": "https://github.com/madroneropaulo",
            "followers_url": "https://api.github.com/users/madroneropaulo/followers",
            "following_url": "https://api.github.com/users/madroneropaulo/following{/other_user}",
            "gists_url": "https://api.github.com/users/madroneropaulo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/madroneropaulo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/madroneropaulo/subscriptions",
            "organizations_url": "https://api.github.com/users/madroneropaulo/orgs",
            "repos_url": "https://api.github.com/users/madroneropaulo/repos",
            "events_url": "https://api.github.com/users/madroneropaulo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/madroneropaulo/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 9,
          "created_at": "2019-02-28T17:35:45Z",
          "updated_at": "2019-12-31T19:39:49Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "There's a misleading error when using wrong the `useRef` hook.\r\n\r\n```\r\nfunction MyComponent() {\r\n    let nameRef = useRef();\r\n\r\n   return (\r\n      <div>\r\n        <input ref=\"nameRef\" type=\"text\" />       \r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nSee the example here https://codesandbox.io/s/yvl21qm62j\r\n\r\nThe code above leads to this error `Function components cannot have refs. Did you mean to use React.forwardRef()?`. I'm moving some class components to Hooks, and stumbled upon this, and it took me a while due to the wrong error message."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14975",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14975/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14975/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14975/events",
          "html_url": "https://github.com/facebook/react/issues/14975",
          "id": 415582896,
          "node_id": "MDU6SXNzdWU0MTU1ODI4OTY=",
          "number": 14975,
          "title": "componentDidUpdate (and componentDidMount) before the updates ref",
          "user": {
            "login": "vflash",
            "id": 1237274,
            "node_id": "MDQ6VXNlcjEyMzcyNzQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1237274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vflash",
            "html_url": "https://github.com/vflash",
            "followers_url": "https://api.github.com/users/vflash/followers",
            "following_url": "https://api.github.com/users/vflash/following{/other_user}",
            "gists_url": "https://api.github.com/users/vflash/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vflash/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vflash/subscriptions",
            "organizations_url": "https://api.github.com/users/vflash/orgs",
            "repos_url": "https://api.github.com/users/vflash/repos",
            "events_url": "https://api.github.com/users/vflash/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vflash/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 620368407,
              "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
              "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
              "name": "Resolution: Needs More Information",
              "color": "fffde7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2019-02-28T11:44:03Z",
          "updated_at": "2020-01-10T11:15:18Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\ncomponentDidUpdate (and componentDidMount) before the updates ref\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codepen.io/anon/pen/eXpENK?editors=0011\r\n\r\n**What is the expected behavior?**\r\ncomponentDidUpdate  (and componentDidMount) after ref update\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nbrowser. last version"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14962",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14962/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14962/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14962/events",
          "html_url": "https://github.com/facebook/react/issues/14962",
          "id": 414808368,
          "node_id": "MDU6SXNzdWU0MTQ4MDgzNjg=",
          "number": 14962,
          "title": "Password input type causes memory leak",
          "user": {
            "login": "ejallday",
            "id": 3165745,
            "node_id": "MDQ6VXNlcjMxNjU3NDU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3165745?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ejallday",
            "html_url": "https://github.com/ejallday",
            "followers_url": "https://api.github.com/users/ejallday/followers",
            "following_url": "https://api.github.com/users/ejallday/following{/other_user}",
            "gists_url": "https://api.github.com/users/ejallday/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ejallday/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ejallday/subscriptions",
            "organizations_url": "https://api.github.com/users/ejallday/orgs",
            "repos_url": "https://api.github.com/users/ejallday/repos",
            "events_url": "https://api.github.com/users/ejallday/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ejallday/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 9,
          "created_at": "2019-02-26T20:39:50Z",
          "updated_at": "2020-01-13T20:42:29Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*Bug*\r\n\r\n**What is the current behavior?**\r\n\r\nAn `<input type=\"password\"/>` causes a memory leak.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou can recreate the behavior by visiting https://iericallen.github.io/test-react/ and following the steps listed.\r\n\r\nPlease view our source code at: https://github.com/iericallen/test-react/tree/source\r\n\r\n**What is the expected behavior?**\r\n\r\nUnmounted components including `<input type=\"password\" />` can be garbage collected after next re-rendering.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOS: macOS X Mojave 10.14.2 (18C54)\r\nChrome: 72.0.3626.109\r\nReact: 16.8.3\r\nReactDOM: 16.8.3"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14941",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14941/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14941/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14941/events",
          "html_url": "https://github.com/facebook/react/issues/14941",
          "id": 413800936,
          "node_id": "MDU6SXNzdWU0MTM4MDA5MzY=",
          "number": 14941,
          "title": "[eslint-plugin-react-hooks] Allow configuration custom hook detection",
          "user": {
            "login": "eps1lon",
            "id": 12292047,
            "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eps1lon",
            "html_url": "https://github.com/eps1lon",
            "followers_url": "https://api.github.com/users/eps1lon/followers",
            "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
            "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
            "organizations_url": "https://api.github.com/users/eps1lon/orgs",
            "repos_url": "https://api.github.com/users/eps1lon/repos",
            "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eps1lon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1249821345,
              "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
              "name": "Component: ESLint Rules",
              "color": "f7afdb",
              "default": false,
              "description": ""
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 3,
          "created_at": "2019-02-24T09:20:22Z",
          "updated_at": "2020-01-10T09:21:26Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\nhttps://codesandbox.io/s/vjqo40v9yy\r\n```js\r\nfunction unstable_useMediaQuery(query) {\r\n  const [matches, setMatches] = React.useState(false);\r\n  //                            ^ [...] called in function which is neither hook nor component\r\n  /* implementation... */\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would like some form of configuration of what is considered a hook. There's already a good entry point for a solution to this problem in\r\nhttps://github.com/facebook/react/blob/c11015ff4f610ac2924d1fc6d569a17657a404fd/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L18https://github.com/facebook/react/blob/c11015ff4f610ac2924d1fc6d569a17657a404fd/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L18 \r\n\r\nThe simplest implementation would allow for a custom regex but I fear that people abuse this until it's very hard to recognize what a custom hook is and what not. Allowing a prefix would solve this particular use case. Maybe as opinionated as `/^${prefix}_use[A-Z0-9].*$/`.\r\n\r\n`useUnstableMediaQuery` is not a good solution IMO since it implies that the media query is unstable. Same for `Unstable_useMediaQuery`. This is pretty hacky since the linter considers this a component. React has already set precedent with prefixing experimental features with `unstable_` so this naming pattern is not that exotic.\r\n\r\nHappy to work on a PR.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14882",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14882/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14882/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14882/events",
          "html_url": "https://github.com/facebook/react/issues/14882",
          "id": 411685106,
          "node_id": "MDU6SXNzdWU0MTE2ODUxMDY=",
          "number": 14882,
          "title": "Reasons React would be calling render() when memo returns false",
          "user": {
            "login": "natew",
            "id": 12100,
            "node_id": "MDQ6VXNlcjEyMTAw",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/natew",
            "html_url": "https://github.com/natew",
            "followers_url": "https://api.github.com/users/natew/followers",
            "following_url": "https://api.github.com/users/natew/following{/other_user}",
            "gists_url": "https://api.github.com/users/natew/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/natew/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/natew/subscriptions",
            "organizations_url": "https://api.github.com/users/natew/orgs",
            "repos_url": "https://api.github.com/users/natew/repos",
            "events_url": "https://api.github.com/users/natew/events{/privacy}",
            "received_events_url": "https://api.github.com/users/natew/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 620368407,
              "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
              "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
              "name": "Resolution: Needs More Information",
              "color": "fffde7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 15,
          "created_at": "2019-02-18T23:37:32Z",
          "updated_at": "2020-01-16T17:39:08Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nMore of a good place to document some behavior.\r\n\r\n**What is the current behavior?**\r\n\r\nIt's hard to isolate why this happens because it's something inside React that's making this decision. Perhaps context is changing. But my biggest frustrations lately have been due to renders happening when they shouldn't, or seem like they shouldn't.\r\n\r\nFor example I can have a component like so:\r\n\r\n```ts\r\nconst Component = React.memo(() => <div />, (a, b) => true)\r\n```\r\n\r\nAnd I'll find it calling render quite often in a performance sensitive area.\r\n\r\nIt would be helpful to have docs somewhere that really go into why a component render is being called.\r\n\r\nFurther, it would be even more helpful to have a sort of \"debug stream\" you could hook into to see React logging reasons why things are updated in a clean fashion. That this doesn't exist already is a bit of a mystery. It would have saved a ridiculous amount of time for myself over the last years, and I'm sure many others. It would look something like:\r\n\r\n```\r\n(render) ComponentName [props changed]\r\n(render) OtherComponentName [props changed] [state changed]\r\n```\r\n\r\nEven better would be to show some sort of tree structure. And show the results of memo/shouldComponentUpdate, and why they may have been ignored:\r\n\r\n```\r\n(render) ComponentName [memo: true | ignored due to context change in: SomeContext] \r\n```\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14878",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14878/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14878/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14878/events",
          "html_url": "https://github.com/facebook/react/issues/14878",
          "id": 411467909,
          "node_id": "MDU6SXNzdWU0MTE0Njc5MDk=",
          "number": 14878,
          "title": "Simple memo components being updated with new set of props during context change",
          "user": {
            "login": "Andarist",
            "id": 9800850,
            "node_id": "MDQ6VXNlcjk4MDA4NTA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Andarist",
            "html_url": "https://github.com/Andarist",
            "followers_url": "https://api.github.com/users/Andarist/followers",
            "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
            "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
            "organizations_url": "https://api.github.com/users/Andarist/orgs",
            "repos_url": "https://api.github.com/users/Andarist/repos",
            "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Andarist/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2019-02-18T13:08:58Z",
          "updated_at": "2020-01-12T19:23:16Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nSimple memo components receive new props during context change if their parent got rerendered.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/jp21pwzrv9\r\n\r\n**What is the expected behavior?**\r\n\r\nConceptually from the user's perspective `React.memo(Component)` & `React.memo(Component, shallowEqual)` should behave exactly the same (but they dont)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCurrent React's master ( 0e67969cb1ad8c27a72294662e68fa5d7c2c9783 ) & current latest release 16.8.2\r\n\r\nI've already written a failing test for this - https://github.com/facebook/react/pull/14876 . Would love to work on fixing this but as mentioned in this PR, I would require some guidance on how this should get fixed properly.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14876",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14876/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14876/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14876/events",
          "html_url": "https://github.com/facebook/react/pull/14876",
          "id": 411222610,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzNzMyMjM2",
          "number": 14876,
          "title": "Add failing test for simple memo components being updated with new se…",
          "user": {
            "login": "Andarist",
            "id": 9800850,
            "node_id": "MDQ6VXNlcjk4MDA4NTA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Andarist",
            "html_url": "https://github.com/Andarist",
            "followers_url": "https://api.github.com/users/Andarist/followers",
            "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
            "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
            "organizations_url": "https://api.github.com/users/Andarist/orgs",
            "repos_url": "https://api.github.com/users/Andarist/repos",
            "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Andarist/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 11,
          "created_at": "2019-02-17T19:06:33Z",
          "updated_at": "2020-01-11T18:53:23Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/14876",
            "html_url": "https://github.com/facebook/react/pull/14876",
            "diff_url": "https://github.com/facebook/react/pull/14876.diff",
            "patch_url": "https://github.com/facebook/react/pull/14876.patch"
          },
          "body": "This is **not ready to be merged yet** because it only provides a failing test, I'd like to work on fixing this issue - but I would really appreciate some guidance with this. I've tried to understand what exactly is happening (wanted to send a PR with a fix already in it 😉 ), but failed to do so - need to dig deeper.\r\n\r\nMy current conclusion is that this fails because of the \"simple memo\" optimization - `workLoop` doesnt see this memo element at all, it \"jumps\" from working on Outer directly to Inner which has fresh `pendingProps` which are used as argument for working on Inner as it correctly has to rerender itself because it reads changed context. So it doesnt bail out on finished work (correctly) and commits used new props as memoized ones later.\r\n\r\n**Why this matters?**\r\nBecause it's inconsistent with \"regular\" memo component. Conceptually from the user's perspective `React.memo(Component)` & `React.memo(Component, shallowEqual)` should behave exactly the same (but they dont)\r\n\r\nI've prepared a demo to showcase the problem - https://codesandbox.io/s/jp21pwzrv9"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14856",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14856/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14856/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14856/events",
          "html_url": "https://github.com/facebook/react/issues/14856",
          "id": 410478306,
          "node_id": "MDU6SXNzdWU0MTA0NzgzMDY=",
          "number": 14856,
          "title": "Chrome 73 breaks wheel events",
          "user": {
            "login": "blixt",
            "id": 158591,
            "node_id": "MDQ6VXNlcjE1ODU5MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/158591?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/blixt",
            "html_url": "https://github.com/blixt",
            "followers_url": "https://api.github.com/users/blixt/followers",
            "following_url": "https://api.github.com/users/blixt/following{/other_user}",
            "gists_url": "https://api.github.com/users/blixt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/blixt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blixt/subscriptions",
            "organizations_url": "https://api.github.com/users/blixt/orgs",
            "repos_url": "https://api.github.com/users/blixt/repos",
            "events_url": "https://api.github.com/users/blixt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/blixt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 22,
          "created_at": "2019-02-14T20:28:58Z",
          "updated_at": "2019-10-20T14:35:14Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "Similar to #8968, but for the `wheel` and `mousewheel` events. They are now passive by default for root elements in Chrome 73 (currently beta) which means React apps that have custom scrolling/zooming behaviors will run into issues.\r\n\r\nThe quick fix may be to manually add event listeners with `{passive: false}` but has the React team considered if this should be configurable for the React event handler?\r\n\r\nBlog post from the Chrome team here: https://developers.google.com/web/updates/2019/02/scrolling-intervention"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14785",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14785/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14785/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14785/events",
          "html_url": "https://github.com/facebook/react/issues/14785",
          "id": 407597506,
          "node_id": "MDU6SXNzdWU0MDc1OTc1MDY=",
          "number": 14785,
          "title": "defaultValue does not work with input when type is set to submit",
          "user": {
            "login": "jakubkosinski",
            "id": 2722,
            "node_id": "MDQ6VXNlcjI3MjI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakubkosinski",
            "html_url": "https://github.com/jakubkosinski",
            "followers_url": "https://api.github.com/users/jakubkosinski/followers",
            "following_url": "https://api.github.com/users/jakubkosinski/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakubkosinski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakubkosinski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakubkosinski/subscriptions",
            "organizations_url": "https://api.github.com/users/jakubkosinski/orgs",
            "repos_url": "https://api.github.com/users/jakubkosinski/repos",
            "events_url": "https://api.github.com/users/jakubkosinski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakubkosinski/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2019-02-07T09:01:40Z",
          "updated_at": "2019-02-08T16:27:02Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you use uncontrolled `<input type=\"submit\" />` and set `defaultValue` attribute, it would be ignored in versions 1.5.0 or higher (there would be no `value` attribute in the HTML result). It was working correctly in older versions. Looks like only `type=\"submit\"` is affected, for other input types `defaultValue` behaves correctly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nCorrect behaviour with react 16.4.2: https://codepen.io/anon/pen/zePmrZ\r\nIncorrect behaviour with react 16.8.1: https://codepen.io/anon/pen/PVOyqV\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen `defaultValue=\"foo\"` is set on `<input type=\"submit\"/>` it should result in `<input type=\"submit\" value=\"foo\" />` in the HTML result.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions starting from 16.5.0\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14762",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14762/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14762/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14762/events",
          "html_url": "https://github.com/facebook/react/pull/14762",
          "id": 407154556,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUwNjkwMjQ3",
          "number": 14762,
          "title": "feat: add recommended config eslint rule",
          "user": {
            "login": "SimenB",
            "id": 1404810,
            "node_id": "MDQ6VXNlcjE0MDQ4MTA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1404810?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SimenB",
            "html_url": "https://github.com/SimenB",
            "followers_url": "https://api.github.com/users/SimenB/followers",
            "following_url": "https://api.github.com/users/SimenB/following{/other_user}",
            "gists_url": "https://api.github.com/users/SimenB/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SimenB/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SimenB/subscriptions",
            "organizations_url": "https://api.github.com/users/SimenB/orgs",
            "repos_url": "https://api.github.com/users/SimenB/repos",
            "events_url": "https://api.github.com/users/SimenB/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SimenB/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 5,
          "created_at": "2019-02-06T09:53:03Z",
          "updated_at": "2020-01-09T21:57:21Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/14762",
            "html_url": "https://github.com/facebook/react/pull/14762",
            "diff_url": "https://github.com/facebook/react/pull/14762.diff",
            "patch_url": "https://github.com/facebook/react/pull/14762.patch"
          },
          "body": "Tested by copying in the built package in a project and following the added instructions in the readme"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14732",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14732/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14732/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14732/events",
          "html_url": "https://github.com/facebook/react/issues/14732",
          "id": 404984850,
          "node_id": "MDU6SXNzdWU0MDQ5ODQ4NTA=",
          "number": 14732,
          "title": "Memory leak on React > 16.2.5",
          "user": {
            "login": "mgreer",
            "id": 643930,
            "node_id": "MDQ6VXNlcjY0MzkzMA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/643930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mgreer",
            "html_url": "https://github.com/mgreer",
            "followers_url": "https://api.github.com/users/mgreer/followers",
            "following_url": "https://api.github.com/users/mgreer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mgreer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mgreer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mgreer/subscriptions",
            "organizations_url": "https://api.github.com/users/mgreer/orgs",
            "repos_url": "https://api.github.com/users/mgreer/repos",
            "events_url": "https://api.github.com/users/mgreer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mgreer/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
      
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 20,
          "created_at": "2019-01-30T22:03:07Z",
          "updated_at": "2020-01-13T21:53:37Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nPossible bug, or unexpected change in internal behavior\r\n\r\n**What is the current behavior?**\r\nWe are seeing a substantial memory leak in our codebase in versions of React > 16.5.2. Bisecting the issue, it seemed to appear at commit 7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nOur apologies, we are unable to fully isolate the issue to a minimal demo, and suspect it is not a bug but a behavior change which our code relied on. The leak seems to be in the messages area, where many components are created and released quickly.\r\n\r\n**What is the expected behavior?**\r\nOld fibers should be garbage collected, but cannot be. Components are retained in memory.\r\nWe have run the affected code area in StrictMode, which allowed us to identify some event leakage but even when this was addressed (by moving listeners to componentDidMount from the constructor) the memory leak continues. There are some findDomNode usages remaining, but even if we move those it does not fill the leak.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.5.3+\r\n\r\nWe are seeking suggestions on what internal could be causing retention of components and nodes by our code, and better ways to isolate the issue.\r\n\r\nThank you!\r\n-Mike"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14724",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14724/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14724/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14724/events",
          "html_url": "https://github.com/facebook/react/pull/14724",
          "id": 404658852,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ4Nzg3OTg3",
          "number": 14724,
          "title": "cloneElement: Added checker for undefined props",
          "user": {
            "login": "buoyantair",
            "id": 5159834,
            "node_id": "MDQ6VXNlcjUxNTk4MzQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/5159834?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/buoyantair",
            "html_url": "https://github.com/buoyantair",
            "followers_url": "https://api.github.com/users/buoyantair/followers",
            "following_url": "https://api.github.com/users/buoyantair/following{/other_user}",
            "gists_url": "https://api.github.com/users/buoyantair/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/buoyantair/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/buoyantair/subscriptions",
            "organizations_url": "https://api.github.com/users/buoyantair/orgs",
            "repos_url": "https://api.github.com/users/buoyantair/repos",
            "events_url": "https://api.github.com/users/buoyantair/events{/privacy}",
            "received_events_url": "https://api.github.com/users/buoyantair/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-01-30T08:39:29Z",
          "updated_at": "2020-01-01T08:50:57Z",
          "closed_at": null,
          "author_association": "NONE",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/14724",
            "html_url": "https://github.com/facebook/react/pull/14724",
            "diff_url": "https://github.com/facebook/react/pull/14724.diff",
            "patch_url": "https://github.com/facebook/react/pull/14724.patch"
          },
          "body": "Extending PR #13387  with revised changes.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14694",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14694/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14694/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14694/events",
          "html_url": "https://github.com/facebook/react/issues/14694",
          "id": 402843937,
          "node_id": "MDU6SXNzdWU0MDI4NDM5Mzc=",
          "number": 14694,
          "title": "Chrome Autofill overwrites values on controlled components",
          "user": {
            "login": "epicfaace",
            "id": 1689183,
            "node_id": "MDQ6VXNlcjE2ODkxODM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1689183?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/epicfaace",
            "html_url": "https://github.com/epicfaace",
            "followers_url": "https://api.github.com/users/epicfaace/followers",
            "following_url": "https://api.github.com/users/epicfaace/following{/other_user}",
            "gists_url": "https://api.github.com/users/epicfaace/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/epicfaace/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/epicfaace/subscriptions",
            "organizations_url": "https://api.github.com/users/epicfaace/orgs",
            "repos_url": "https://api.github.com/users/epicfaace/repos",
            "events_url": "https://api.github.com/users/epicfaace/events{/privacy}",
            "received_events_url": "https://api.github.com/users/epicfaace/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 763742499,
              "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
              "name": "Type: Breaking Change",
              "color": "aa2608",
              "default": false,
              "description": null
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2019-01-24T18:42:29Z",
          "updated_at": "2019-02-04T15:19:29Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug. Initially reported in https://github.com/mozilla-services/react-jsonschema-form/issues/1153\r\n\r\n**What is the current behavior?**\r\nAutofill overwrites existing values in fields when those fields are controlled components in React.\r\n\r\nSee https://jsfiddle.net/epicfaace/9p17e2qx/21/ -- to test this, add a \"Saved Address\" in the Chrome options.\r\n\r\n![2019-01-24 10 37 23](https://user-images.githubusercontent.com/1689183/51700667-91b32a80-1fc4-11e9-876b-6f795225d99b.gif)\r\n\r\n**What is the expected behavior?**\r\nAutofill does not overwrite existing fields. I've made a JSFiddle with a plain HTML form, which works with the expected behavior.\r\n\r\nSee https://jsfiddle.net/epicfaace/1my3f9n4/6/\r\n\r\n![2019-01-24 10 37 02](https://user-images.githubusercontent.com/1689183/51700679-9841a200-1fc4-11e9-9408-dae369ac5366.gif)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.3.2\r\nChrome 71.0.3578.98\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14669",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14669/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14669/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14669/events",
          "html_url": "https://github.com/facebook/react/issues/14669",
          "id": 402294005,
          "node_id": "MDU6SXNzdWU0MDIyOTQwMDU=",
          "number": 14669,
          "title": "Write a test for discrete events in Concurrent Mode",
          "user": {
            "login": "gaearon",
            "id": 810438,
            "node_id": "MDQ6VXNlcjgxMDQzOA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 71502270,
              "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
              "name": "Component: Build Infrastructure",
              "color": "f9d0c4",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": {
            "login": "aweary",
            "id": 6886061,
            "node_id": "MDQ6VXNlcjY4ODYwNjE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "aweary",
              "id": 6886061,
              "node_id": "MDQ6VXNlcjY4ODYwNjE=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/aweary",
              "html_url": "https://github.com/aweary",
              "followers_url": "https://api.github.com/users/aweary/followers",
              "following_url": "https://api.github.com/users/aweary/following{/other_user}",
              "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
              "organizations_url": "https://api.github.com/users/aweary/orgs",
              "repos_url": "https://api.github.com/users/aweary/repos",
              "events_url": "https://api.github.com/users/aweary/events{/privacy}",
              "received_events_url": "https://api.github.com/users/aweary/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "milestone": null,
          "comments": 0,
          "created_at": "2019-01-23T15:29:27Z",
          "updated_at": "2020-01-08T19:14:16Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "body": "See this review comment: \r\n\r\n>Need one more test for the \"counter\" example: each discrete event must commit in sequence. So if you click on an increment button five times, the final result should always be five.\r\n\r\nhttps://github.com/facebook/react/pull/14415#pullrequestreview-183478210"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14658",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14658/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14658/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14658/events",
          "html_url": "https://github.com/facebook/react/issues/14658",
          "id": 401823391,
          "node_id": "MDU6SXNzdWU0MDE4MjMzOTE=",
          "number": 14658,
          "title": "`useCallback()` & `useMemo()` automatically with a Babel Plug-in",
          "user": {
            "login": "DAB0mB",
            "id": 7648874,
            "node_id": "MDQ6VXNlcjc2NDg4NzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/7648874?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DAB0mB",
            "html_url": "https://github.com/DAB0mB",
            "followers_url": "https://api.github.com/users/DAB0mB/followers",
            "following_url": "https://api.github.com/users/DAB0mB/following{/other_user}",
            "gists_url": "https://api.github.com/users/DAB0mB/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DAB0mB/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DAB0mB/subscriptions",
            "organizations_url": "https://api.github.com/users/DAB0mB/orgs",
            "repos_url": "https://api.github.com/users/DAB0mB/repos",
            "events_url": "https://api.github.com/users/DAB0mB/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DAB0mB/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 9,
          "created_at": "2019-01-22T15:38:42Z",
          "updated_at": "2019-03-10T06:45:26Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature request.\r\n\r\n**What is the current behavior?**\r\n\r\nWe need to `useCallback()` and `useMemo()` which seems redundant and can cost us in performance if not used right, which is likely to happen.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```js\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = data.filter(filterPredicate).sort(sortComparator)\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"back-btn\" onClick={() => history.pop()} />\r\n      <ul className=\"data-list\">\r\n        {transformedData.map(({ id, value }) => (\r\n          <li className=\"data-item\" key={id} onClick={() => history.push(`data/${id}`)}>{value}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nJust like the [docs](https://reactjs.org/docs/hooks-reference.html#usecallback) suggest:\r\n\r\n```\r\nIn the future, a sufficiently advanced compiler could create this array automatically.\r\n```\r\n\r\nAccordingly, I have implemented a Babel-plug-in that does exactly that; see [babel-plugin-react-persist](https://github.com/DAB0mB/babel-plugin-react-persist). Given the code snippet above, the plug-in should generate the following output:\r\n\r\n```js\r\nlet _anonymousFnComponent, _anonymousFnComponent2\r\n\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = React.useMemo(() =>\r\n    data.filter(filterPredicate).sort(sortComparator)\r\n  , [data, data.filter, filterPredicate, sortComparator])\r\n\r\n  return React.createElement(_anonymousFnComponent2 = _anonymousFnComponent2 || (() => {\r\n    const _onClick2 = React.useCallback(() => history.pop(), [history, history.pop])\r\n\r\n    return (\r\n      <div>\r\n        <button className=\"back-btn\" onClick={_onClick2} />\r\n        <ul className=\"data-list\">\r\n          {transformedData.map(({ id, value }) =>\r\n            React.createElement(_anonymousFnComponent = _anonymousFnComponent || (() => {\r\n              const _onClick = React.useCallback(() =>\r\n                history.push(`data/${id}`)\r\n              , [history, history.push, id])\r\n\r\n              return (\r\n                <li className=\"data-item\" key={id} onClick={_onClick}>\r\n                  {value}\r\n                </li>\r\n              )\r\n            }), { key: id })\r\n          )}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }), null)\r\n}\r\n```\r\n\r\nThe plug-in will:\r\n\r\n- `useCallback()` automatically when a function is created.\r\n- `useMemo()` automatically when a value is assigned.\r\n- Will memoize inline callbacks.\r\n\r\nI don't see however how can `useEffect()` be inferred automatically and if it's a good idea. The plug-in is not a feature request directly for React, but since it's stated in the docs I thought maybe it can be useful somehow. Maybe it can potentially be included as part of `create-react-app`? Would like to hear your thoughts about it. An alternative solution is suggested at #14406, but I don't see why do this at runtime when everything can be done ahead of time and save processing power.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8-alpha (hooks)\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14557",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14557/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14557/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14557/events",
          "html_url": "https://github.com/facebook/react/pull/14557",
          "id": 397547195,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjQzNDY5NDk1",
          "number": 14557,
          "title": "[WIP] Try to fix scheduler fixture",
          "user": {
            "login": "gaearon",
            "id": 810438,
            "node_id": "MDQ6VXNlcjgxMDQzOA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 1,
          "created_at": "2019-01-09T20:21:32Z",
          "updated_at": "2020-01-23T22:18:46Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/14557",
            "html_url": "https://github.com/facebook/react/pull/14557",
            "diff_url": "https://github.com/facebook/react/pull/14557.diff",
            "patch_url": "https://github.com/facebook/react/pull/14557.patch"
          },
          "body": "It's currently broken. Partially from #14025 but maybe there's bugs. I don't know yet.\r\n\r\nI tried to fix it but 4 is still broken.\r\n\r\n<img width=\"487\" alt=\"screen shot 2019-01-09 at 8 19 49 pm\" src=\"https://user-images.githubusercontent.com/810438/50926090-15f5a180-144c-11e9-9514-54dd1ee21e9c.png\">\r\n\r\nI'm not sure if I need to change the expectations?\r\n\r\nAlso, 8 is broken but only if I go through every test before it first:\r\n\r\n<img width=\"392\" alt=\"screen shot 2019-01-09 at 8 20 20 pm\" src=\"https://user-images.githubusercontent.com/810438/50926113-24dc5400-144c-11e9-8c70-0df37ab6ef3c.png\">\r\n\r\nIt passes in isolation."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14543",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14543/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14543/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14543/events",
          "html_url": "https://github.com/facebook/react/issues/14543",
          "id": 396786559,
          "node_id": "MDU6SXNzdWUzOTY3ODY1NTk=",
          "number": 14543,
          "title": "Add `get` function to `useState`",
          "user": {
            "login": "liyuanqiu",
            "id": 24999464,
            "node_id": "MDQ6VXNlcjI0OTk5NDY0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/24999464?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/liyuanqiu",
            "html_url": "https://github.com/liyuanqiu",
            "followers_url": "https://api.github.com/users/liyuanqiu/followers",
            "following_url": "https://api.github.com/users/liyuanqiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/liyuanqiu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/liyuanqiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/liyuanqiu/subscriptions",
            "organizations_url": "https://api.github.com/users/liyuanqiu/orgs",
            "repos_url": "https://api.github.com/users/liyuanqiu/repos",
            "events_url": "https://api.github.com/users/liyuanqiu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/liyuanqiu/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 29,
          "created_at": "2019-01-08T07:51:31Z",
          "updated_at": "2019-03-31T15:33:17Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- feature\r\n\r\n**What is the current behavior?**\r\nCode from [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html):\r\n```javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n```javascript\r\n// each time \"count\" changed, this arrow function will be created again.\r\n// so that it can access the latest \"count\"\r\nonClick={() => setCount(count + 1)}\r\n```\r\nI don't think it is good to create a fixed function many times, so I try to modify the code:\r\n```javascript\r\nconst [count, setCount] = useState(0);\r\nconst handleClick = useCallback(() => setCount(count + 1), []);\r\n```\r\nBut obviously the callback in `useCallback` couldn't get the latest `count` because I pass in an empty inputs array to avoid this callback been generated again and again.\r\n\r\nSo, in fact, the inputs array decide two things:\r\n1. when to recreate the callback\r\n2. which state can be accessed in the callback\r\n\r\nIn most situation, the two things are one thing, but here they conflict. \r\n\r\nSo I think maybe it's good to add a `get` function to `useState` like this:\r\n```javascript\r\nimport { useState, useCallback } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount, getCount] = useState(0);\r\n\r\n  const handleClick = useCallback(() => setCount(getCount() + 1), []);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={handleClick}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\nMaybe it's confusing because `getCount` can totally replace `count`, but it brings the possible to avoid creating callbacks again and again.\r\n\r\n### Edited\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452237355 exactly resolves the case above. But there‘re many other scenarios can't use `updater` to resolve. Here are some more code snippets:\r\n#### 1. Access states in a timer.\r\n```javascript\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n#### 2. Access states in WebSocket callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  // create a WebSocket client named \"ws\"\r\n  ws.onopen = () => {\r\n    // access states\r\n  };\r\n  ws.onmessage = () => {\r\n    // access states\r\n  };\r\n  return () => ws.close();\r\n}, inputs);\r\n```\r\n#### 3. Access states in Promise\r\n```javascript\r\nuseEffect(() => {\r\n  create_a_promise().then(() => {\r\n    // access states\r\n  });\r\n}, inputs);\r\n```\r\n#### 4. Access states in event callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  function handleThatEvent() {\r\n    // access states\r\n  }\r\n  instance.addEventListener('eventName', handleThatEvent);\r\n  return instance.removeEventListener('eventName', handleThatEvent);\r\n}, inputs);\r\n```\r\n\r\nWe had to use some workaround patterns to resolve those cases, like\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452676760\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453058025\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453079958\r\nOr a funny way:\r\n```javascript\r\nconst [state, setState] = useState();\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n    setState((prevState) => {\r\n      // Now I can do anything with state...🤮\r\n      ...\r\n      return prevState;\r\n    });\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n\r\nSo let's discuss and wait...\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452713416\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React 16.7.0-alpha.2\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14540",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14540/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14540/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14540/events",
          "html_url": "https://github.com/facebook/react/issues/14540",
          "id": 396340261,
          "node_id": "MDU6SXNzdWUzOTYzNDAyNjE=",
          "number": 14540,
          "title": "Nested portals should be discoverable",
          "user": {
            "login": "theKashey",
            "id": 582410,
            "node_id": "MDQ6VXNlcjU4MjQxMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/582410?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theKashey",
            "html_url": "https://github.com/theKashey",
            "followers_url": "https://api.github.com/users/theKashey/followers",
            "following_url": "https://api.github.com/users/theKashey/following{/other_user}",
            "gists_url": "https://api.github.com/users/theKashey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theKashey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theKashey/subscriptions",
            "organizations_url": "https://api.github.com/users/theKashey/orgs",
            "repos_url": "https://api.github.com/users/theKashey/repos",
            "events_url": "https://api.github.com/users/theKashey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theKashey/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2019-01-07T04:02:48Z",
          "updated_at": "2020-01-12T08:20:16Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "This is more about a bridge between actual DOM Tree and React Tree.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nYou can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.\r\n\r\nThis is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's better to explain it by example\r\n- you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.\r\n- inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.\r\n- you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.\r\n\r\nIt's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.\r\n\r\nProposed solution:\r\n- `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.\r\n- `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.\r\n\r\nCons:\r\n- requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.\r\n- does twice dreadfull things than deprecated `findDomNode`\r\n- usage scope is very narrow.\r\n\r\nPros:\r\n- _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.\r\n\r\nExample using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNever worked"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14536",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14536/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14536/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14536/events",
          "html_url": "https://github.com/facebook/react/issues/14536",
          "id": 396204834,
          "node_id": "MDU6SXNzdWUzOTYyMDQ4MzQ=",
          "number": 14536,
          "title": "React.Suspense provide a lifecycle so components can handle the `display:none` removal",
          "user": {
            "login": "oliviertassinari",
            "id": 3165635,
            "node_id": "MDQ6VXNlcjMxNjU2MzU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oliviertassinari",
            "html_url": "https://github.com/oliviertassinari",
            "followers_url": "https://api.github.com/users/oliviertassinari/followers",
            "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
            "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
            "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
            "repos_url": "https://api.github.com/users/oliviertassinari/repos",
            "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109407645,
              "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
              "name": "Component: Suspense",
              "color": "8ffcd6",
              "default": false,
              "description": ""
            },
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 23,
          "created_at": "2019-01-05T22:14:39Z",
          "updated_at": "2019-11-06T20:20:55Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIt's a feature. \r\n\r\n**What is the current behavior?**\r\n\r\nReact.Suspense mounts its children with a `display: none` style if a promise is thrown. Once the thrown promise is resolved, React removes the `display: none` style.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe children components have no easy way to know when the `display: none` style is removed by React. This is problematic when one child component needs to read from the DOM layout to correctly display its elements. Most people wait for the `componentDidMount` callback to trigger, but because the element is `display: none`, it can't read any value from the DOM layout.\r\n\r\nThe issue was discovered in https://github.com/mui-org/material-ui/issues/14077. I believe that React should provide a lifecycle so the children components know when they are visible, that it's safe to do layout computations. \r\n\r\nThe best workaround I'm aware of it to use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) but it requires a polyfill on IE 11 and Safari.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion: 16.7.0-alpha.2"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14535",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14535/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14535/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14535/events",
          "html_url": "https://github.com/facebook/react/issues/14535",
          "id": 396203469,
          "node_id": "MDU6SXNzdWUzOTYyMDM0Njk=",
          "number": 14535,
          "title": "Concurrent mode iOS hover behaviour",
          "user": {
            "login": "subhero24",
            "id": 1171150,
            "node_id": "MDQ6VXNlcjExNzExNTA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1171150?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subhero24",
            "html_url": "https://github.com/subhero24",
            "followers_url": "https://api.github.com/users/subhero24/followers",
            "following_url": "https://api.github.com/users/subhero24/following{/other_user}",
            "gists_url": "https://api.github.com/users/subhero24/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subhero24/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subhero24/subscriptions",
            "organizations_url": "https://api.github.com/users/subhero24/orgs",
            "repos_url": "https://api.github.com/users/subhero24/repos",
            "events_url": "https://api.github.com/users/subhero24/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subhero24/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1205087127,
              "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
              "name": "Component: Concurrent Mode",
              "color": "ffccd3",
              "default": false,
              "description": ""
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 1,
          "created_at": "2019-01-05T21:56:43Z",
          "updated_at": "2019-01-23T14:39:26Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "I hope this is the place to submit issues regarding concurrent mode.\r\nI don't know if this is a bug or intended behaviour, but I have a situation where the my react app behaves differently depending on the use of concurrent mode.\r\n\r\nHere is a link to a codesandbox demo: https://codesandbox.io/s/5xl0vnx11p\r\n\r\nThe behaviour on mobile Safari on iOS (12.1.2) is different whether using ReactDOM.render vs ReactDOM.createRoot. When ReactDOM.render is used, a tap results in an alert and after the alert is dismissed, the hover styles are applied. When using ReactDOM.createRoot, a tap results in the hover styles being applied. A second tap is needed to invoke the click handler.\r\n\r\n(This double tap behaviour from iOS is described [here](https://css-tricks.com/annoying-mobile-double-tap-link-issue/))\r\n\r\nShouldn't the two render methods behave the same in this regard? or is this really intended behaviour?\r\n\r\nBTW: A setTimout arround the mouseEnter event handler body does make ReactDOM.createRoot behave the same way as ReactDOM.render\r\n\r\n\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14508",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14508/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14508/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14508/events",
          "html_url": "https://github.com/facebook/react/issues/14508",
          "id": 394826156,
          "node_id": "MDU6SXNzdWUzOTQ4MjYxNTY=",
          "number": 14508,
          "title": "Make it easier to debug when Context uses defaultValue accidentally due to no provider",
          "user": {
            "login": "steida",
            "id": 66249,
            "node_id": "MDQ6VXNlcjY2MjQ5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/66249?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/steida",
            "html_url": "https://github.com/steida",
            "followers_url": "https://api.github.com/users/steida/followers",
            "following_url": "https://api.github.com/users/steida/following{/other_user}",
            "gists_url": "https://api.github.com/users/steida/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/steida/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/steida/subscriptions",
            "organizations_url": "https://api.github.com/users/steida/orgs",
            "repos_url": "https://api.github.com/users/steida/repos",
            "events_url": "https://api.github.com/users/steida/events{/privacy}",
            "received_events_url": "https://api.github.com/users/steida/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2018-12-29T21:32:16Z",
          "updated_at": "2020-01-15T00:53:24Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "I just spend several hours debugging app blaming everything except me ofc.\r\nI am using this useTheme Hook.\r\n\r\n```ts\r\nimport React from 'react';\r\nimport ThemeContext from '../contexts/ThemeContext';\r\n\r\nconst useTheme = () => {\r\n  const theme = React.useContext(ThemeContext);\r\n  //if (theme == null)\r\n  //  throw Error('useTheme: Please provide ThemeContext value.');\r\n  return theme;\r\n};\r\n\r\nexport default useTheme;\r\n```\r\n\r\nSome styles were light while other dark. Very strange.\r\nThen I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme.\r\nThemeContext had an initial value different than provided.\r\n\r\nWhile it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs.\r\n\r\nTherefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it.\r\n\r\nBecause of DX, React should reconsider default / initial context values. In my humble opinion.\r\n\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14452",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14452/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14452/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14452/events",
          "html_url": "https://github.com/facebook/react/issues/14452",
          "id": 391754899,
          "node_id": "MDU6SXNzdWUzOTE3NTQ4OTk=",
          "number": 14452,
          "title": "Wrong visualization order in User Timing when profiling in Chrome",
          "user": {
            "login": "mareolan",
            "id": 4648469,
            "node_id": "MDQ6VXNlcjQ2NDg0Njk=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4648469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mareolan",
            "html_url": "https://github.com/mareolan",
            "followers_url": "https://api.github.com/users/mareolan/followers",
            "following_url": "https://api.github.com/users/mareolan/following{/other_user}",
            "gists_url": "https://api.github.com/users/mareolan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mareolan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mareolan/subscriptions",
            "organizations_url": "https://api.github.com/users/mareolan/orgs",
            "repos_url": "https://api.github.com/users/mareolan/repos",
            "events_url": "https://api.github.com/users/mareolan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mareolan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2018-12-17T15:10:19Z",
          "updated_at": "2019-02-08T17:17:59Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn the screenshot below the \"DropTarget(Tile) [update]\" should have been visualized above the \"Tile [mount]\". Similarly, the item with \"stop icon\" to the right should have been in the first row.\r\n![image](https://user-images.githubusercontent.com/4648469/50094133-b91f1680-0212-11e9-8cf7-17d131a09d4f.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSorry, I don't have public demo. When the bug happens it doesn't seem to be specific to a specific component / lifecycle event. I'm not sure whether it's React's problem or Chrome's.\r\n\r\n**What is the expected behavior?**\r\nDifferent order.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.6.3 (but I have seen this in 16.4.0 too)\r\nChrome 70.0.3538.110, Windows 10 Home\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14443",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14443/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14443/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14443/events",
          "html_url": "https://github.com/facebook/react/issues/14443",
          "id": 391218542,
          "node_id": "MDU6SXNzdWUzOTEyMTg1NDI=",
          "number": 14443,
          "title": "Warning should appear when versions of react and react-dom do not match",
          "user": {
            "login": "mjhoffm2",
            "id": 29382626,
            "node_id": "MDQ6VXNlcjI5MzgyNjI2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/29382626?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjhoffm2",
            "html_url": "https://github.com/mjhoffm2",
            "followers_url": "https://api.github.com/users/mjhoffm2/followers",
            "following_url": "https://api.github.com/users/mjhoffm2/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjhoffm2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjhoffm2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjhoffm2/subscriptions",
            "organizations_url": "https://api.github.com/users/mjhoffm2/orgs",
            "repos_url": "https://api.github.com/users/mjhoffm2/repos",
            "events_url": "https://api.github.com/users/mjhoffm2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjhoffm2/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 9,
          "created_at": "2018-12-14T18:28:45Z",
          "updated_at": "2019-01-29T22:35:39Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\n\r\nIf the version of react and react-dom do not match, some features fail silently.  See this issue for example: https://github.com/reduxjs/react-redux/issues/1125\r\n\r\nIn this issue, the new Context API wasn't working as intended, but no errors or warnings were visible.  Components simply did not update.  It turns out that this issue was because I updated react to version 16.6.3, but still had react-dom at version 16.5.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to see some sort of warning message in the console in development mode when the versions of react and react-dom do not match.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14442",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14442/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14442/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14442/events",
          "html_url": "https://github.com/facebook/react/issues/14442",
          "id": 391209942,
          "node_id": "MDU6SXNzdWUzOTEyMDk5NDI=",
          "number": 14442,
          "title": "ShallowRenderer does not work with Class.contextType",
          "user": {
            "login": "mpmaia",
            "id": 324301,
            "node_id": "MDQ6VXNlcjMyNDMwMQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/324301?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpmaia",
            "html_url": "https://github.com/mpmaia",
            "followers_url": "https://api.github.com/users/mpmaia/followers",
            "following_url": "https://api.github.com/users/mpmaia/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpmaia/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpmaia/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpmaia/subscriptions",
            "organizations_url": "https://api.github.com/users/mpmaia/orgs",
            "repos_url": "https://api.github.com/users/mpmaia/repos",
            "events_url": "https://api.github.com/users/mpmaia/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpmaia/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 52079258,
              "node_id": "MDU6TGFiZWw1MjA3OTI1OA==",
              "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter",
              "name": "Difficulty: starter",
              "color": "94ce52",
              "default": false,
              "description": null
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            },
            {
              "id": 725156255,
              "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
              "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
              "name": "good first issue (taken)",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 14,
          "created_at": "2018-12-14T18:00:51Z",
          "updated_at": "2019-07-01T12:50:43Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe shallow renderer from the 'react-test-renderer' package does not work with [Class.contextType](https://reactjs.org/docs/context.html#classcontexttype). The component always receives an empty object as the context.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe shallow renderer should forward the context provided to the render method to the rendered component's this.context.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.6.3\r\n\r\n**Steps to reproduce**\r\n\r\nThe test below can be used to reproduce the problem ([Open on codesandbox.io](https://codesandbox.io/s/oql0l6p95)). The first test reproduces the bug and the second test shows a workaround.\r\n\r\n\r\n    import * as React from \"react\";\r\n    import ShallowRenderer from 'react-test-renderer/shallow'\r\n    import PropTypes from 'prop-types';\r\n    \r\n    const TestContext = React.createContext({message:\"TEST1\"});\r\n    class TestShallow extends React.Component {\r\n    \r\n        static contextType = TestContext;\r\n    \r\n        componentDidMount() {\r\n            console.log(this.context.message);\r\n        }\r\n    \r\n        render() {\r\n            return <h1>{this.context.message}</h1>;\r\n        }\r\n    }\r\n    \r\n    it('shallow render with contextType', () => {\r\n    \r\n        const result = new ShallowRenderer().render(<TestShallow />, {message:\"TEST2\"});\r\n        expect(result).toEqual(<h1>TEST2</h1>); //FAILS\r\n    \r\n    });\r\n    \r\n    it('workaround shallow render with contextType', () => {\r\n    \r\n        TestShallow.contextTypes = {\r\n            message: PropTypes.string\r\n        };\r\n    \r\n        const result = new ShallowRenderer().render(<TestShallow />, {message:\"TEST2\"});\r\n        expect(result).toEqual(<h1>TEST2</h1>); //WORKS\r\n    \r\n    });\r\n\r\n\r\nThe problem seems to be located [here](https://github.com/facebook/react/blob/2743fb7b23a5af42059a9b07c5f6048f941709d9/packages/react-test-renderer/src/ReactShallowRenderer.js#L146). The function getMaskedContext() checks the properties declared on type.contextTypes and filters out the properties from the context provided to the shallow render unless the types.contextTypes is declared.\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14406",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14406/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14406/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14406/events",
          "html_url": "https://github.com/facebook/react/issues/14406",
          "id": 388941436,
          "node_id": "MDU6SXNzdWUzODg5NDE0MzY=",
          "number": 14406,
          "title": "Inference of Hooks’ inputs",
          "user": {
            "login": "yuchi",
            "id": 646609,
            "node_id": "MDQ6VXNlcjY0NjYwOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/646609?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuchi",
            "html_url": "https://github.com/yuchi",
            "followers_url": "https://api.github.com/users/yuchi/followers",
            "following_url": "https://api.github.com/users/yuchi/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuchi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuchi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuchi/subscriptions",
            "organizations_url": "https://api.github.com/users/yuchi/orgs",
            "repos_url": "https://api.github.com/users/yuchi/repos",
            "events_url": "https://api.github.com/users/yuchi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuchi/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 8,
          "created_at": "2018-12-08T17:26:02Z",
          "updated_at": "2020-01-10T14:59:47Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "I open this issue ([as suggested by @gaearon on Twitter](https://twitter.com/dan_abramov/status/1070770594323554310)) to discuss how Hook’s inputs argument should be inferred.\r\n\r\n## Background\r\n\r\nThe current [Hooks API reference](https://reactjs.org/docs/hooks-reference.html) cites (emphasis mine):\r\n\r\n> The array of inputs is not passed as arguments to the function. Conceptually, though, that’s what they represent: every value referenced inside the function should also appear in the inputs array. **In the future, a sufficiently advanced compiler could create this array automatically.**\r\n\r\nCaptivated by this sentence (and the idea of bringing “the future” closer) I built [`hooks.macro`][hm], a Babel Macro which tries to do exactly this. That is, to infer the second argument to `useMemo`, `useCallback` and `use*Effect` hooks.\r\n\r\nThe tool trasform this:\r\n\r\n```js\r\nimport { useAutoMemo } from 'hooks.macro';\r\nfunction MyComponent({ propValue }) {\r\n  return useAutoMemo(() => propValue.split('').join('-'));\r\n  //     ---^^^^----                                    ^ no inputs\r\n}\r\n```\r\n\r\nTo this:\r\n\r\n```js\r\nfunction MyComponent({ propValue }) {\r\n  return React.useMemo(() => propValue.split('').join('-'), [propValue]);\r\n  //     ^---^ ^-----^                                       ^-------^\r\n}\r\n```\r\n\r\nIn the process of designing the constraints of that tool, I realized there are more than a few open questions, whose answers can be found only with guidance from the core React team and a broader discussion with the community.\r\n\r\n## Rationale\r\n\r\nWhy should we bother with this topic? The reasons that motivated me in implementing `hooks.macro` were the following.\r\n\r\n1. Failing to populate the inputs array correctly has sad consequences:\r\n\r\n   1. too wide, and it will invalidate the use of memoization itself, and/or bring potential perf issues;\r\n\r\n   2. too narrow, and bugs can be tricky to identify (IMHO unit tests are not viable to avoid this: you need to test _changes_, not just different possible _values_;)\r\n\r\n   3. bugs caused by having non local values are potentially non deterministic.\r\n\r\n2. Keeping the inputs array updated is important, but it’s a matter of discipline:\r\n\r\n   1. when I change the “body” of the hook I need to check it;\r\n\r\n   2. when I change the semantics of a used valued I need to verify if I need to include it (e.g. when it was a constant and now a prop);\r\n\r\n   3. not introducing bugs during merge conflicts is matter of even _higher_ discipline (since usually inputs will fit in a single line, you probably need to edit the line to solve the conflict).\r\n\r\n3. By removing the burden of adding the inputs array, we reduce the mental overhead of using the memoizing hooks (namely `useMemo` and `useCallback`). This let us:\r\n\r\n   1. make following the best practices easier,\r\n\r\n   2. encourage the use of memoization in unexpected places (such as directly inside the final returning JSX of a component).\r\n\r\n4. Nothing is stopping me from shooting my own feet with obvious errors (such as passing the result of a non-memoized array literal ad an input). If a stable enough approach is found, this could be even solved automatically by memoizing all necessary inputs too.\r\n\r\n5. It’s an error-prone and boring practice that can be automated away.\r\n\r\n## Current implementation\r\n\r\n(Straight from [`hooks.macro`’s README][hm])\r\n\r\n#### Features\r\n\r\n1. Extracts all references used, and adds them to the _inputs_ array.\r\n\r\n2. Favors **strict correctness over performance**, but uses **safe optimizations:**\r\n\r\n   1. skips constants and useless inputs;\r\n\r\n   2. traverses all functions called or referenced, and appends _their_ dependencies too, removing the need for unnecessary `useCallback` hooks.\r\n\r\n#### Constraints\r\n\r\n1. Only variables created in the scope of the component body are automatically trapped as inputs.\r\n\r\n2. Only variables, and not properties’ access, are trapped. This means that if you use `obj.prop` only `[obj]` will become part of the memoization invalidation keys. This is a problem for refs, and will be addressed specifically in a future release.\r\n\r\n   You can work around this limitation by creating a variable which holds the current value, such as `const { current } = ref`.\r\n\r\n3. Currently there’s no way to add additional keys for more fine grained cache invalidation. Could be an important escape hatch when you do nasty things, but in that case I’d prefer to use `useMemo`/`useCallback` directly.\r\n\r\n4. Only locally defined functions declarations and explicit function expressions (`let x = () => {}`) are traversed for indirect dependencies — all other function calls (such as `xxx()`) are treated as normal input dependencies and appended too. This is unnecessary (but not harmful) for setters coming from `useState`, and not an issue at all if the function is the result of `useCallback` or `useAutoCallback`.\r\n\r\n## Questions\r\n\r\nAs I said before I have few open questions for the core React team, but I’m sure the whole community will be impactful in the discussion.\r\n\r\n1. What were/are the requirements of the «sufficiently advanced compiler» you envision? Is the current approach of `hooks.macro` aligned with those?\r\n\r\n2. Using a broader approach, Flow/TypeScript hints could give an incredible amount of precision not available on the pure Babel pipeline. I feel pre-pack can help here too (we could help pre-pack do its thing actually) but I’m not sure how.\r\n\r\n3. Are users potentially scared by the amount of black magic involved? I _tried_ to follow the Hooks lead by having very clear, very understandable rules. Is this _enough_?\r\n\r\n4. The auto-closure feature of `useMemo` (you don’t need an arrow function) has received the most negative feedback in the small discussions I had online. Yet I personally find the most interesting hook of this library, since adds so little overhead I can throw it any time I need… potentially abusing it eventually (so, points against it?)\r\n\r\n5. I personally prefer to have a different API that makes it clear that those are not standard hooks without \"inputs\". A Babel plugin that transform all hooks without an explicit inputs array seems silly and scary — you get used to _not_ passing them and you don't have the API signaling you that you need to.\r\n\r\n6. Since this is a specialized form of lambda-lifting, are you willing to add some advanced hooks (with one of your lovely silly prefixes such as `DONT_USE_`) that pass the inputs as arguments to creator/effect function? This open some interesting perf optimization opportunities by hoisting functions higher up.\r\n\r\n[hm]: https://github.com/yuchi/hooks.macro\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14398",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14398/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14398/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14398/events",
          "html_url": "https://github.com/facebook/react/issues/14398",
          "id": 388264035,
          "node_id": "MDU6SXNzdWUzODgyNjQwMzU=",
          "number": 14398,
          "title": "calculating context changes in componentDidUpdate",
          "user": {
            "login": "Lexicality",
            "id": 847422,
            "node_id": "MDQ6VXNlcjg0NzQyMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/847422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lexicality",
            "html_url": "https://github.com/Lexicality",
            "followers_url": "https://api.github.com/users/Lexicality/followers",
            "following_url": "https://api.github.com/users/Lexicality/following{/other_user}",
            "gists_url": "https://api.github.com/users/Lexicality/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Lexicality/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Lexicality/subscriptions",
            "organizations_url": "https://api.github.com/users/Lexicality/orgs",
            "repos_url": "https://api.github.com/users/Lexicality/repos",
            "events_url": "https://api.github.com/users/Lexicality/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Lexicality/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2018-12-06T15:26:50Z",
          "updated_at": "2019-10-28T11:57:59Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThere is no way to see if `componentDidMount` was caused by a context change\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```typescript\r\nimport React from 'react';\r\n\r\ninterface ExampleContext {\r\n    param: string;\r\n}\r\n\r\nconst ExampleContext = React.createContext<ExampleContext>({\r\n    param: 'foo',\r\n});\r\n\r\ninterface ExampleState {\r\n    data: any;\r\n}\r\n\r\nclass Example extends React.Component<{}, ExampleState> {\r\n    static contextType = ExampleContext;\r\n    context!: ExampleContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n        };\r\n    }\r\n\r\n    fetchData(param: string): void {\r\n        // whatever\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(this.context.param);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // ???        \r\n    }\r\n}\r\n```\r\n**What is the expected behavior?**\r\nA 4th parameter for `previousContext`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14357",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14357/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14357/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14357/events",
          "html_url": "https://github.com/facebook/react/issues/14357",
          "id": 385816884,
          "node_id": "MDU6SXNzdWUzODU4MTY4ODQ=",
          "number": 14357,
          "title": "findDOMNode deprecation",
          "user": {
            "login": "eps1lon",
            "id": 12292047,
            "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eps1lon",
            "html_url": "https://github.com/eps1lon",
            "followers_url": "https://api.github.com/users/eps1lon/followers",
            "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
            "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
            "organizations_url": "https://api.github.com/users/eps1lon/orgs",
            "repos_url": "https://api.github.com/users/eps1lon/repos",
            "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eps1lon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 12,
          "created_at": "2018-11-29T16:24:15Z",
          "updated_at": "2019-12-02T20:43:52Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "## Timeline\r\n1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases\r\n2. 16.3 (2018-03-28): `forwardRef` is introduced:\r\n  It can be used in HOCs to avoid using `findDOMNode` on the enhanced component\r\n3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`\r\n4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:\r\n  This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.\r\n5. 16.8 (Q2 2019): stable `React.Concurrent` mode\r\n  \r\n## findDOMNode use cases\r\nIf you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.\r\n### with a planned alternative\r\n- focus handling (React Fire, \"exploratory phase\") \r\n- passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]\r\n\r\n## State of `forwardRef`\r\n`react` has 3.4M downloads/week.\r\n\r\n### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)\r\nA utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version\r\ndoes not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor\r\nissues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.\r\n\r\n### react-docgen (400k downloads/week)\r\nNot recognized as a valid component definition. PR open at [reactjs/react-docgen#311].\r\n\r\n### react-redux (1.4M downloads/week)\r\n`connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given\r\nhowever 3 betas have already been released so it's probably soon.\r\n\r\n### react-router (1.4M downloads/week)\r\n`withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).\r\nHowever no comment about the other components and no major release candidate is published.\r\n\r\n### display name\r\n`React.forwardRef` components are recognized by `react-devtools`. However when wrapped\r\nin a HOC it's very likely that the display name is lost. See [facebook/react#14319]\r\n\r\n### The issue\r\n**Assumptions:**\r\n- you are not in control of your whole component tree i.e. you use components from 3rd party libraries\r\n- you want to use `React.ConcurrentMode`\r\n- Usable includes production and development. It specifically means for development that deprecation warnings in a component\r\n  make that component not usable in development mode because of all the *noise* it adds in those cases.\r\n  *Noise* because it's not actionable if that component is from a 3rd party library.\r\n\r\nIf none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.\r\n\r\nThe mode of a partial tree can only be made more restrictive but not loosened up. If\r\nyou wrap your tree in `React.StrictMode` and use a component from a 3rd party library\r\nthat 3rd party library has to be `React.StrictMode` compliant too. \r\n\r\nThis means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.\r\n\r\nIn addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.\r\n\r\n### Conclusion\r\nRefs are not a viable upgrade path to replace `findDOMNode` yet. \r\nUntil refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.\r\n\r\n## Releated\r\n- [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)\r\n- [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)\r\n- [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)\r\n\r\n[facebook/react#6436]: https://github.com/facebook/react/issues/6436\r\n[facebook/react#13525]: https://github.com/facebook/react/issues/13525\r\n[facebook/react#14319]: https://github.com/facebook/react/issues/14319\r\n[reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311\r\n[ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678\r\n[React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14356",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14356/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14356/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14356/events",
          "html_url": "https://github.com/facebook/react/issues/14356",
          "id": 385733855,
          "node_id": "MDU6SXNzdWUzODU3MzM4NTU=",
          "number": 14356,
          "title": "Sometimes controlled email inputs break in Chrome due to punycoding",
          "user": {
            "login": "Bastian",
            "id": 5033001,
            "node_id": "MDQ6VXNlcjUwMzMwMDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5033001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Bastian",
            "html_url": "https://github.com/Bastian",
            "followers_url": "https://api.github.com/users/Bastian/followers",
            "following_url": "https://api.github.com/users/Bastian/following{/other_user}",
            "gists_url": "https://api.github.com/users/Bastian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Bastian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Bastian/subscriptions",
            "organizations_url": "https://api.github.com/users/Bastian/orgs",
            "repos_url": "https://api.github.com/users/Bastian/repos",
            "events_url": "https://api.github.com/users/Bastian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Bastian/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 7,
          "created_at": "2018-11-29T13:22:22Z",
          "updated_at": "2018-12-11T15:59:57Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a  bug\r\n\r\n**What is the current behavior?**\r\n\r\nIn Chrome, when typing a sharp S (ß, a German letter) in an input field with `type=\"email\"`, it converts the `ß` to `ss` (~~expected~~ unexpected behaviour) and the cursor jumps back to the beginning of the input field (unexpected behaviour). This does only happen if the `ß` is part of the domain.\r\nTrying to type `test@testß.de` will end as `.detest@testss`:\r\n![Example](https://i.imgur.com/SWQ0p4f.gif)\r\n\r\nIt can be tested with the latest Google Chrome: \r\nhttps://codepen.io/anon/pen/MzzEqB\r\nIf you don't have a `ß` on your keyboard, you can reproduce the bug by just Copy&Pasting it.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with Chrome Version 70.0.3538.110 (Official Build) (64-bit) on Ubuntu 18.04 and React 16.6.3\r\n\r\nIn Firefox, this does not happen, as it does not convert `ß` to `ss`. I didn't test other browsers."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14342",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14342/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14342/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14342/events",
          "html_url": "https://github.com/facebook/react/issues/14342",
          "id": 385132578,
          "node_id": "MDU6SXNzdWUzODUxMzI1Nzg=",
          "number": 14342,
          "title": "Fail to render input in a separate window on Edge",
          "user": {
            "login": "haojy",
            "id": 2277444,
            "node_id": "MDQ6VXNlcjIyNzc0NDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2277444?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/haojy",
            "html_url": "https://github.com/haojy",
            "followers_url": "https://api.github.com/users/haojy/followers",
            "following_url": "https://api.github.com/users/haojy/following{/other_user}",
            "gists_url": "https://api.github.com/users/haojy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/haojy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/haojy/subscriptions",
            "organizations_url": "https://api.github.com/users/haojy/orgs",
            "repos_url": "https://api.github.com/users/haojy/repos",
            "events_url": "https://api.github.com/users/haojy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/haojy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 69105383,
              "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
              "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
              "name": "Browser: IE",
              "color": "c7def8",
              "default": false,
              "description": null
            },
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 5,
          "created_at": "2018-11-28T07:15:54Z",
          "updated_at": "2020-01-09T07:15:40Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nOn Edge, when to render any <input> components in a separate window, it comes to react-dom error for `<input>`, and JS error like\r\n\r\n> SCRIPT5673: Unknown runtime error\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. \r\n\r\n`window.open` dose not work well on JSFiddle or CodeSandbox, so put a page link to reproduce the behavior\r\n\r\nhttps://haojy.github.io/issues/input-error-in-separate-window.html\r\n\r\n**What is the expected behavior?**\r\n\r\n`<input>` component should be rendered as expected without errors\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: v16.6.3 and V16.3.0\r\nbrowser:\r\n- only on Edge v42\r\n- works well on IE 11/Chrome 70/Safari 12"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14337",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14337/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14337/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14337/events",
          "html_url": "https://github.com/facebook/react/issues/14337",
          "id": 384982771,
          "node_id": "MDU6SXNzdWUzODQ5ODI3NzE=",
          "number": 14337,
          "title": "[react-dom] getEventKey has IE11 key mapping issue",
          "user": {
            "login": "icfantv",
            "id": 370054,
            "node_id": "MDQ6VXNlcjM3MDA1NA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/370054?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfantv",
            "html_url": "https://github.com/icfantv",
            "followers_url": "https://api.github.com/users/icfantv/followers",
            "following_url": "https://api.github.com/users/icfantv/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfantv/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfantv/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfantv/subscriptions",
            "organizations_url": "https://api.github.com/users/icfantv/orgs",
            "repos_url": "https://api.github.com/users/icfantv/repos",
            "events_url": "https://api.github.com/users/icfantv/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfantv/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 69105383,
              "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
              "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
              "name": "Browser: IE",
              "color": "c7def8",
              "default": false,
              "description": null
            },
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2018-11-27T20:57:59Z",
          "updated_at": "2020-01-10T17:01:15Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (possibly)\r\n\r\n**What is the current behavior?**\r\n\r\nThis may, in fact, fall under the purview of `Only special keys are supported, all others depend on keyboard layout or browser` but figured I'd enter this to be sure.  Additionally, the bookmark in the link specified in the `@see` comment is no longer valid so I can't confirm the official list of keys.  Looking at [the latest version of the spec](https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode), the key in question appears in the `Optionally fixed virtual keys` section rather than the `Fixed virtual keys` section, but then, none of the 1xx keys appear at all in the fixed list.\r\n\r\nThe `translateToKey` hash in the `react-dom` package's `getEventKey` function appears to be missing the `-` (dash) key.  When used with CTRL+SHIFT, this key (and probably others) is reported as `Unidentified` in IE11 and since it's not in the `translateToKey` map, returns back to the code as `Unidentified` which breaks keyboard shortcut handling.\r\n\r\nThis can be seen by navigating to https://w3c.github.io/uievents/tools/key-event-viewer.html and in IE11, pressing `CTRL + SHIFT + -` (note that you will need to check `keydown` under `preventDefault` in the options table or the browser will zoom out.\r\n\r\n**What is the expected behavior?**\r\n\r\nIf it's a bug, it shouldn't allow resolution to just fall through back to the browser.  If it's not, then the code is correct - but then requires special handling.\r\n\r\nIf I add `'189': '-'` to the hash, it works...on a US Keyboard.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested on React 16.6.1 in IE11 on Windows."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14329",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14329/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14329/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14329/events",
          "html_url": "https://github.com/facebook/react/pull/14329",
          "id": 384442931,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjMzNjQ0NzA1",
          "number": 14329,
          "title": "[FIX] Allow shallow renderer to work with new API",
          "user": {
            "login": "mprobber",
            "id": 2939688,
            "node_id": "MDQ6VXNlcjI5Mzk2ODg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2939688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mprobber",
            "html_url": "https://github.com/mprobber",
            "followers_url": "https://api.github.com/users/mprobber/followers",
            "following_url": "https://api.github.com/users/mprobber/following{/other_user}",
            "gists_url": "https://api.github.com/users/mprobber/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mprobber/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mprobber/subscriptions",
            "organizations_url": "https://api.github.com/users/mprobber/orgs",
            "repos_url": "https://api.github.com/users/mprobber/repos",
            "events_url": "https://api.github.com/users/mprobber/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mprobber/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 15,
          "created_at": "2018-11-26T17:51:19Z",
          "updated_at": "2019-12-13T18:56:46Z",
          "closed_at": null,
          "author_association": "NONE",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/14329",
            "html_url": "https://github.com/facebook/react/pull/14329",
            "diff_url": "https://github.com/facebook/react/pull/14329.diff",
            "patch_url": "https://github.com/facebook/react/pull/14329.patch"
          },
          "body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n\r\nHi,\r\nI really like the new `contextType` API in 16.6, but the shallow renderer doesn't seem to provide support for it.  This pull request allows you to pass in an object for `context`, and if `contextType` is defined, will shallow render the component with the provided context, as it did for the old context API."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14319",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14319/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14319/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14319/events",
          "html_url": "https://github.com/facebook/react/issues/14319",
          "id": 384019382,
          "node_id": "MDU6SXNzdWUzODQwMTkzODI=",
          "number": 14319,
          "title": "API for display name on forwardRef, memo and potential future exotic components",
          "user": {
            "login": "eps1lon",
            "id": 12292047,
            "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eps1lon",
            "html_url": "https://github.com/eps1lon",
            "followers_url": "https://api.github.com/users/eps1lon/followers",
            "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
            "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
            "organizations_url": "https://api.github.com/users/eps1lon/orgs",
            "repos_url": "https://api.github.com/users/eps1lon/repos",
            "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eps1lon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 10,
          "created_at": "2018-11-24T20:28:16Z",
          "updated_at": "2020-01-17T22:05:33Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nExpose an API to get the display name of every component (in `__DEV__` only).\r\n\r\n**What is the current behavior?**\r\nMost of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` \r\n (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSince components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:\r\n\r\nhttps://codesandbox.io/s/zqj9v50243\r\n\r\n- `react-redux` creates `\"connect(Component)\"`\r\n- `react-router` creates `\"withRouter(undefined)\"`\r\n\r\n**What is the expected behavior?**\r\nThe new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.\r\n\r\nNow there are a couple of solutions to this issue:\r\n1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)\r\n2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932\r\n3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)\r\n4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI guess this started with `forwardRef` in 16.3.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14292",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14292/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14292/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14292/events",
          "html_url": "https://github.com/facebook/react/issues/14292",
          "id": 382670740,
          "node_id": "MDU6SXNzdWUzODI2NzA3NDA=",
          "number": 14292,
          "title": "Provide a way to pass context to renderToStaticMarkup on the client",
          "user": {
            "login": "gaearon",
            "id": 810438,
            "node_id": "MDQ6VXNlcjgxMDQzOA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 739761016,
              "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
              "name": "Component: Reconciler",
              "color": "f9a798",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            },
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 0,
          "created_at": "2018-11-20T13:47:08Z",
          "updated_at": "2020-01-08T19:14:36Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "body": "See https://github.com/facebook/react/issues/14287#issuecomment-440277999 and https://github.com/facebook/react/pull/14182#issuecomment-440125029. This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14285",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14285/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14285/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14285/events",
          "html_url": "https://github.com/facebook/react/issues/14285",
          "id": 382486022,
          "node_id": "MDU6SXNzdWUzODI0ODYwMjI=",
          "number": 14285,
          "title": "Warn when calling dispatch() from useEffect() cleanup function on unmounting",
          "user": {
            "login": "merongmerongmerong",
            "id": 42024113,
            "node_id": "MDQ6VXNlcjQyMDI0MTEz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/42024113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/merongmerongmerong",
            "html_url": "https://github.com/merongmerongmerong",
            "followers_url": "https://api.github.com/users/merongmerongmerong/followers",
            "following_url": "https://api.github.com/users/merongmerongmerong/following{/other_user}",
            "gists_url": "https://api.github.com/users/merongmerongmerong/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/merongmerongmerong/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/merongmerongmerong/subscriptions",
            "organizations_url": "https://api.github.com/users/merongmerongmerong/orgs",
            "repos_url": "https://api.github.com/users/merongmerongmerong/repos",
            "events_url": "https://api.github.com/users/merongmerongmerong/events{/privacy}",
            "received_events_url": "https://api.github.com/users/merongmerongmerong/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 14,
          "created_at": "2018-11-20T03:34:44Z",
          "updated_at": "2019-03-15T08:36:24Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\naction dispatched in return callback of `useEffect` seem to not work\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/5yqmo128v4\r\n\r\nonly foo -> baz is logged\r\n\r\n```javascript\r\nimport React, { useState, useEffect, useReducer } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction reducer(state, action) {\r\n  console.log(\"bar\", action); // not logged\r\n  // debugger\r\n  return state;\r\n}\r\n\r\nfunction Foo({ value }) {\r\n  const [state, dispatch] = useReducer(reducer, {});\r\n\r\n  useEffect(\r\n    () => {\r\n      return () => {\r\n        console.log(\"foo\");\r\n        // debugger\r\n        dispatch({ type: \"foo\" });\r\n        // debugger\r\n        console.log(\"baz\");\r\n      };\r\n    },\r\n    [state, value]\r\n  );\r\n\r\n  return <p>{value}</p>;\r\n}\r\n\r\nfunction App() {\r\n  const [value, set] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => set(value + 1)}>INC</button>\r\n      {value % 2 ? <Foo value={value} /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n**What is the expected behavior?**\r\nbar is logged in console\r\n(foo -> baz -> bar`action`)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: \"16.7.0-alpha.2\",\r\nreact-dom: \"16.7.0-alpha.2\"\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14213",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14213/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14213/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14213/events",
          "html_url": "https://github.com/facebook/react/issues/14213",
          "id": 380109743,
          "node_id": "MDU6SXNzdWUzODAxMDk3NDM=",
          "number": 14213,
          "title": "Textarea loses focus after inserting paired punctuation with Chinese IME",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following{/other_user}",
            "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2018-11-13T08:26:59Z",
          "updated_at": "2018-11-15T03:06:55Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nTextarea lose focus after insert paired punctuation by \"Chinese-Pinyin 10 key\" input source on IOS safari. And then textarea can't be focused when I click it. But after other element has been focused, the textarea could be focused again.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[CodeSandbox Demo](https://codesandbox.io/s/7w23wpl0q1)\r\n\r\n[steps(youtube video)](https://youtu.be/4PJ2WVD83Eg)\r\n\r\n**What is the expected behavior?**\r\njust work fine!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nversions of React: 16+\r\nOS: IOS\r\nbrowser: safari\r\n\r\n\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14174",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14174/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14174/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14174/events",
          "html_url": "https://github.com/facebook/react/issues/14174",
          "id": 379211041,
          "node_id": "MDU6SXNzdWUzNzkyMTEwNDE=",
          "number": 14174,
          "title": "SetStateAction returned from useState hook dose not accept a second callback argument",
          "user": {
            "login": "cheungseol",
            "id": 12060295,
            "node_id": "MDQ6VXNlcjEyMDYwMjk1",
            "avatar_url": "https://avatars1.githubusercontent.com/u/12060295?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cheungseol",
            "html_url": "https://github.com/cheungseol",
            "followers_url": "https://api.github.com/users/cheungseol/followers",
            "following_url": "https://api.github.com/users/cheungseol/following{/other_user}",
            "gists_url": "https://api.github.com/users/cheungseol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cheungseol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cheungseol/subscriptions",
            "organizations_url": "https://api.github.com/users/cheungseol/orgs",
            "repos_url": "https://api.github.com/users/cheungseol/repos",
            "events_url": "https://api.github.com/users/cheungseol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cheungseol/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 40929155,
              "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
              "name": "Type: Question",
              "color": "cc317c",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 41,
          "created_at": "2018-11-09T15:39:59Z",
          "updated_at": "2020-01-10T03:44:06Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nQuestion\r\n\r\n**What is the current behavior?**\r\nThe SetStateAction returned from useState hook dose not accept a second callback argument. It cannot works like Class Componet's 'setState'  method, which receives a callback param, and can perform the callback after this setState action updates;\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/93mkr1ywpr\r\n\r\n**What is the expected behavior?**\r\nHopes the SetStateAction function can receive a second callback argument, and can used like 'setState' method callback. \r\n\r\nI have read the official note: \r\n\r\n>     // this technically does accept a second argument, but it's already under a deprecation warning\r\n>     // and it's not even released so probably better to not define it.\r\n\r\nIf instead it's working as intended, how can I perform special action after this SetStateAction called ? \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.7.0-alpha.0\r\n\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14171",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14171/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14171/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14171/events",
          "html_url": "https://github.com/facebook/react/pull/14171",
          "id": 379055997,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjI5NjEyNTMx",
          "number": 14171,
          "title": "Fix input autofocus position",
          "user": {
            "login": "mmarkelov",
            "id": 22371328,
            "node_id": "MDQ6VXNlcjIyMzcxMzI4",
            "avatar_url": "https://avatars1.githubusercontent.com/u/22371328?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mmarkelov",
            "html_url": "https://github.com/mmarkelov",
            "followers_url": "https://api.github.com/users/mmarkelov/followers",
            "following_url": "https://api.github.com/users/mmarkelov/following{/other_user}",
            "gists_url": "https://api.github.com/users/mmarkelov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mmarkelov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mmarkelov/subscriptions",
            "organizations_url": "https://api.github.com/users/mmarkelov/orgs",
            "repos_url": "https://api.github.com/users/mmarkelov/repos",
            "events_url": "https://api.github.com/users/mmarkelov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mmarkelov/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 7,
          "created_at": "2018-11-09T07:46:55Z",
          "updated_at": "2020-01-10T14:31:11Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/14171",
            "html_url": "https://github.com/facebook/react/pull/14171",
            "diff_url": "https://github.com/facebook/react/pull/14171.diff",
            "patch_url": "https://github.com/facebook/react/pull/14171.patch"
          },
          "body": "https://github.com/facebook/react/issues/14125\r\n\r\nI am not sure that it is right approach. So it will be fine, if someone could check it. Maybe I miss something."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14170",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14170/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14170/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14170/events",
          "html_url": "https://github.com/facebook/react/issues/14170",
          "id": 379051587,
          "node_id": "MDU6SXNzdWUzNzkwNTE1ODc=",
          "number": 14170,
          "title": "react-test-renderer doesn't support Suspense and lazy nodes",
          "user": {
            "login": "Dem0n13",
            "id": 1087430,
            "node_id": "MDQ6VXNlcjEwODc0MzA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1087430?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Dem0n13",
            "html_url": "https://github.com/Dem0n13",
            "followers_url": "https://api.github.com/users/Dem0n13/followers",
            "following_url": "https://api.github.com/users/Dem0n13/following{/other_user}",
            "gists_url": "https://api.github.com/users/Dem0n13/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Dem0n13/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Dem0n13/subscriptions",
            "organizations_url": "https://api.github.com/users/Dem0n13/orgs",
            "repos_url": "https://api.github.com/users/Dem0n13/repos",
            "events_url": "https://api.github.com/users/Dem0n13/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Dem0n13/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2018-11-09T07:27:53Z",
          "updated_at": "2019-08-18T20:00:33Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "Hello. How can I test components with Suspense/Lazy?\r\nnow renderer.create(...)toTree() throws\r\n\"toTree() does not yet know how to handle nodes with tag=13\"\r\n\r\nreact 16.6.1\r\nreact-test-renderer 16.6.1"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14168",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14168/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14168/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14168/events",
          "html_url": "https://github.com/facebook/react/issues/14168",
          "id": 379028337,
          "node_id": "MDU6SXNzdWUzNzkwMjgzMzc=",
          "number": 14168,
          "title": "Input type email bug",
          "user": {
            "login": "dominicarrojado",
            "id": 6789191,
            "node_id": "MDQ6VXNlcjY3ODkxOTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6789191?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dominicarrojado",
            "html_url": "https://github.com/dominicarrojado",
            "followers_url": "https://api.github.com/users/dominicarrojado/followers",
            "following_url": "https://api.github.com/users/dominicarrojado/following{/other_user}",
            "gists_url": "https://api.github.com/users/dominicarrojado/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dominicarrojado/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dominicarrojado/subscriptions",
            "organizations_url": "https://api.github.com/users/dominicarrojado/orgs",
            "repos_url": "https://api.github.com/users/dominicarrojado/repos",
            "events_url": "https://api.github.com/users/dominicarrojado/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dominicarrojado/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 6,
          "created_at": "2018-11-09T05:28:29Z",
          "updated_at": "2020-01-14T17:48:08Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "https://codepen.io/anon/pen/GwZeNO\r\n\r\nOpen this codepen and paste this \"example@gmail.com 1\"\r\nThen press backspace, notice that the focus changes to the beginning of the input.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14139",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14139/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14139/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14139/events",
          "html_url": "https://github.com/facebook/react/issues/14139",
          "id": 378458607,
          "node_id": "MDU6SXNzdWUzNzg0NTg2MDc=",
          "number": 14139,
          "title": "Regression: react-dom 16.5.2+ Tapping outside of an input on iOS12 does not fire onBlur event",
          "user": {
            "login": "chrstntdd",
            "id": 17863654,
            "node_id": "MDQ6VXNlcjE3ODYzNjU0",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17863654?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrstntdd",
            "html_url": "https://github.com/chrstntdd",
            "followers_url": "https://api.github.com/users/chrstntdd/followers",
            "following_url": "https://api.github.com/users/chrstntdd/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrstntdd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrstntdd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrstntdd/subscriptions",
            "organizations_url": "https://api.github.com/users/chrstntdd/orgs",
            "repos_url": "https://api.github.com/users/chrstntdd/repos",
            "events_url": "https://api.github.com/users/chrstntdd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrstntdd/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
      
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 3,
          "created_at": "2018-11-07T20:35:47Z",
          "updated_at": "2020-01-13T10:58:26Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nOnly on iOS, with both chrome and safai, once an input is focused, attempting to tap outside of it to blur the input, focus is kept and the onBlur event is not fired.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. tap to focus input\r\n2. tap outside of input to blur it\r\n3. observe focus is kept\r\n\r\nexample repo: https://codesandbox.io/s/k351z189vo\r\n\r\n**What is the expected behavior?**\r\nTapping outside of the input should blur the input and remove focus\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis only affects iOS, android still maintains the same expected behavior."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14125",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14125/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14125/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14125/events",
          "html_url": "https://github.com/facebook/react/issues/14125",
          "id": 377987649,
          "node_id": "MDU6SXNzdWUzNzc5ODc2NDk=",
          "number": 14125,
          "title": "Autofocus Text puts cursor at end instead of beginning",
          "user": {
            "login": "Matthew-Goldberg",
            "id": 24279057,
            "node_id": "MDQ6VXNlcjI0Mjc5MDU3",
            "avatar_url": "https://avatars1.githubusercontent.com/u/24279057?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Matthew-Goldberg",
            "html_url": "https://github.com/Matthew-Goldberg",
            "followers_url": "https://api.github.com/users/Matthew-Goldberg/followers",
            "following_url": "https://api.github.com/users/Matthew-Goldberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/Matthew-Goldberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Matthew-Goldberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Matthew-Goldberg/subscriptions",
            "organizations_url": "https://api.github.com/users/Matthew-Goldberg/orgs",
            "repos_url": "https://api.github.com/users/Matthew-Goldberg/repos",
            "events_url": "https://api.github.com/users/Matthew-Goldberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Matthew-Goldberg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 178761159,
              "node_id": "MDU6TGFiZWwxNzg3NjExNTk=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
              "name": "Type: Regression",
              "color": "e11d21",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 7,
          "created_at": "2018-11-06T18:57:12Z",
          "updated_at": "2018-11-09T14:08:59Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIn React 16, a text input with a value and autofocus will set the cursor at the _end_ of the input.\r\n`<input autoFocus={true} type=\"text\" defaultValue=\"4444\" />`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee the React 16 repro here: https://codepen.io/matthewg0/pen/XymjYo\r\n\r\n**What is the expected behavior?**\r\nIn React 15, and in plain HTML, the behavior is that the cursor is placed at the _start_ of the input.\r\nReact 15: https://codepen.io/matthewg0/pen/NEGRzv\r\nPlain HTML: https://codepen.io/matthewg0/pen/wQKoap\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReproduces as of React 16.  Worked as expected in React 15."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14102",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14102/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14102/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14102/events",
          "html_url": "https://github.com/facebook/react/issues/14102",
          "id": 377478350,
          "node_id": "MDU6SXNzdWUzNzc0NzgzNTA=",
          "number": 14102,
          "title": "Synthetic KeyboardEvent should support KeyboardEvent.code",
          "user": {
            "login": "jjspace",
            "id": 8007967,
            "node_id": "MDQ6VXNlcjgwMDc5Njc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8007967?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jjspace",
            "html_url": "https://github.com/jjspace",
            "followers_url": "https://api.github.com/users/jjspace/followers",
            "following_url": "https://api.github.com/users/jjspace/following{/other_user}",
            "gists_url": "https://api.github.com/users/jjspace/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jjspace/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jjspace/subscriptions",
            "organizations_url": "https://api.github.com/users/jjspace/orgs",
            "repos_url": "https://api.github.com/users/jjspace/repos",
            "events_url": "https://api.github.com/users/jjspace/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jjspace/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 127893911,
              "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
              "name": "Component: DOM",
              "color": "fef2c0",
              "default": false,
              "description": null
            },
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            },
            {
              "id": 725156255,
              "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
              "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
              "name": "good first issue (taken)",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 8,
          "created_at": "2018-11-05T16:28:51Z",
          "updated_at": "2020-01-12T16:30:14Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe current synthetic keyboard event does not support the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property.\r\n\r\n**What is the expected behavior?**\r\nThe synthetic keyboard event should pass along the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome ([CanIUse](https://caniuse.com/#feat=keyboardevent-code)) so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added.\r\n\r\nEdit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14099",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14099/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14099/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14099/events",
          "html_url": "https://github.com/facebook/react/issues/14099",
          "id": 377440465,
          "node_id": "MDU6SXNzdWUzNzc0NDA0NjU=",
          "number": 14099,
          "title": "useCallback() invalidates too often in practice",
          "user": {
            "login": "gaearon",
            "id": 810438,
            "node_id": "MDQ6VXNlcjgxMDQzOA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 52,
          "created_at": "2018-11-05T15:06:53Z",
          "updated_at": "2020-01-08T19:14:57Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "body": "This is related to https://github.com/facebook/react/issues/14092, https://github.com/facebook/react/issues/14066, https://github.com/reactjs/rfcs/issues/83, and some other issues.\r\n\r\nThe problem is that we often want to avoid invalidating a callback (e.g. to preserve shallow equality below or to avoid re-subscriptions in the effects). But if it depends on props or state, it's likely it'll invalidate too often. See https://github.com/facebook/react/issues/14092#issuecomment-435907249 for current workarounds.\r\n\r\n`useReducer` doesn't suffer from this because the reducer is evaluated directly in the render phase. @sebmarkbage had an idea about giving `useCallback` similar semantics but it'll likely require complex implementation work. Seems like we'd have to do _something_ like this though.\r\n\r\nI'm filing this just to acknowledge the issue exists, and to track further work on this."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14057",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14057/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14057/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14057/events",
          "html_url": "https://github.com/facebook/react/issues/14057",
          "id": 376232772,
          "node_id": "MDU6SXNzdWUzNzYyMzI3NzI=",
          "number": 14057,
          "title": "Unexpected copies of the props object retained in memory with the new hooks API",
          "user": {
            "login": "localvoid",
            "id": 132045,
            "node_id": "MDQ6VXNlcjEzMjA0NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/132045?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/localvoid",
            "html_url": "https://github.com/localvoid",
            "followers_url": "https://api.github.com/users/localvoid/followers",
            "following_url": "https://api.github.com/users/localvoid/following{/other_user}",
            "gists_url": "https://api.github.com/users/localvoid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/localvoid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/localvoid/subscriptions",
            "organizations_url": "https://api.github.com/users/localvoid/orgs",
            "repos_url": "https://api.github.com/users/localvoid/repos",
            "events_url": "https://api.github.com/users/localvoid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/localvoid/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 739761016,
              "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
              "name": "Component: Reconciler",
              "color": "f9a798",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 7,
          "created_at": "2018-11-01T02:48:53Z",
          "updated_at": "2020-01-11T16:36:25Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nfunction useCustomHook1() {\r\n  useEffect(() => {\r\n    console.log(\"mounted\");\r\n    return () => {\r\n      console.log(\"unmounted\");\r\n    };\r\n  }, []);\r\n}\r\n\r\nfunction Test3(props) {\r\n  useCustomHook1();\r\n  useEffect(() => {\r\n    console.log(props.test);\r\n  });\r\n\r\n  return <div onClick={() => console.log(props.test)}>{props.items.length}</div>;\r\n}\r\n```\r\n\r\n`props` object that were used when component was rendered for the first time is kept alive. Completely unexpected behavior even when developer understands [closure context sharing](https://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/lz61v39r7\r\n\r\n- Select test **3** \r\n- Click on the button \"Create New Array\" 5 times\r\n- Take memory snapshot in the developer tools\r\n- Inspect (array) objects\r\n- There will be 4 arrays retained in memory `t0`, `t-2`, `t-1`, `t`\r\n\r\n**What is the expected behavior?**\r\n\r\nShould be 2 arrays retained in memory `t-1`, `t`."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14049",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14049/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14049/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14049/events",
          "html_url": "https://github.com/facebook/react/issues/14049",
          "id": 376140752,
          "node_id": "MDU6SXNzdWUzNzYxNDA3NTI=",
          "number": 14049,
          "title": "Using both getDerivedStateFromError and getDerivedStateFromProps can be a foot gun",
          "user": {
            "login": "blixt",
            "id": 158591,
            "node_id": "MDQ6VXNlcjE1ODU5MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/158591?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/blixt",
            "html_url": "https://github.com/blixt",
            "followers_url": "https://api.github.com/users/blixt/followers",
            "following_url": "https://api.github.com/users/blixt/following{/other_user}",
            "gists_url": "https://api.github.com/users/blixt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/blixt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blixt/subscriptions",
            "organizations_url": "https://api.github.com/users/blixt/orgs",
            "repos_url": "https://api.github.com/users/blixt/repos",
            "events_url": "https://api.github.com/users/blixt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/blixt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2018-10-31T20:10:47Z",
          "updated_at": "2018-11-04T11:31:08Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nIf `componentDidCatch` and/or `getDerivedStateFromError` put the component in a state that avoids the cause of the error, and `getDerivedStateFromProps` reverts that state change, the error boundary will (obviously) fail to avert disaster.\r\n\r\nhttps://codesandbox.io/s/pj0lwxk15j\r\n\r\nIt sounds very obvious when simplified like this, but when my team updated to React 16.5.x (and 16.6.0), suddenly this started happening for us. So something changed internally, but it's hard to pinpoint what. Unfortunately I haven't been able to create a small repro for that specific case that works in 16.4.2 but not 16.5.0 – so I'm making this issue about avoiding the cause in the first place.\r\n\r\n**What is the expected behavior?**\r\n\r\nNaively, my thinking is that because errors are more exceptional, let the state from error handlers take precedence. Probably there's a reason why this can't happen so a warning of some kind when this can happen would be nice. Two ways to do this comes to mind:\r\n\r\n1. Cross-check that keys in state from `getDerivedStateFromProps` or `setState` in `componentDidCatch` don't collide with `getDerivedStateFromError` (sounds a bit far fetched?)\r\n2. Be more explicit in documentation for error boundaries about how `getDerivedStateFromProps` will run last so that a developer can consider this case\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.5.0 and up (16.4.2 behaves a bit differently – see above), all platforms/browsers."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/14012",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14012/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14012/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14012/events",
          "html_url": "https://github.com/facebook/react/issues/14012",
          "id": 374799870,
          "node_id": "MDU6SXNzdWUzNzQ3OTk4NzA=",
          "number": 14012,
          "title": "Suspense ping shouldn't suspend if all suspended content is already in fallback mode",
          "user": {
            "login": "RichieAHB",
            "id": 1652187,
            "node_id": "MDQ6VXNlcjE2NTIxODc=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1652187?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RichieAHB",
            "html_url": "https://github.com/RichieAHB",
            "followers_url": "https://api.github.com/users/RichieAHB/followers",
            "following_url": "https://api.github.com/users/RichieAHB/following{/other_user}",
            "gists_url": "https://api.github.com/users/RichieAHB/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RichieAHB/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RichieAHB/subscriptions",
            "organizations_url": "https://api.github.com/users/RichieAHB/orgs",
            "repos_url": "https://api.github.com/users/RichieAHB/repos",
            "events_url": "https://api.github.com/users/RichieAHB/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RichieAHB/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109407645,
              "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
              "name": "Component: Suspense",
              "color": "8ffcd6",
              "default": false,
              "description": ""
            },
            {
              "id": 40929151,
              "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
              "name": "Type: Bug",
              "color": "b60205",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 9,
          "created_at": "2018-10-28T21:22:06Z",
          "updated_at": "2019-03-26T01:40:31Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nWhen using suspense and hooks - specifically `useState` and `useEffect` - nested async renders (using `react-cache`) cause state hooks not to be updated. Specifically this happens between the first promise settling and the last promise settling in a `Suspense` component. However the state updates concerned can be outside of the `Suspense` root: https://codesandbox.io/s/wznnxz9pvw\r\n\r\nIn the linked example, moving the mouse will update the displayed coordinates for the first 2000ms (the time at which the first thrown promise resolves) however, after this the UI will not show any updated coordinates until after the final nested promise in the adjacent `Suspense` root settles.\r\n\r\nI may both be using Suspense wrong (given the understandable lack of documentation) as I've been having other bugs with this setup, specifically the above example will sometimes never render beyond the \"loading ...\" placeholder. This is especially noticeable with setting higher timeouts in the `Timeout` component.\r\n\r\nreact 16.7.0-alpha\r\nreact-dom 16.7.0-alpha\r\nreact-cache 2.0.0-alpha\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13991",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13991/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13991/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13991/events",
          "html_url": "https://github.com/facebook/react/issues/13991",
          "id": 374587589,
          "node_id": "MDU6SXNzdWUzNzQ1ODc1ODk=",
          "number": 13991,
          "title": "Hooks + multiple instances of React",
          "user": {
            "login": "brunolemos",
            "id": 619186,
            "node_id": "MDQ6VXNlcjYxOTE4Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/619186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunolemos",
            "html_url": "https://github.com/brunolemos",
            "followers_url": "https://api.github.com/users/brunolemos/followers",
            "following_url": "https://api.github.com/users/brunolemos/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunolemos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunolemos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunolemos/subscriptions",
            "organizations_url": "https://api.github.com/users/brunolemos/orgs",
            "repos_url": "https://api.github.com/users/brunolemos/repos",
            "events_url": "https://api.github.com/users/brunolemos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunolemos/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1109410193,
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              "name": "Component: Hooks",
              "color": "c2f27b",
              "default": false,
              "description": ""
            },
            {
              "id": 710375792,
              "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
              "name": "Type: Discussion",
              "color": "fef2c0",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 189,
          "created_at": "2018-10-27T00:34:08Z",
          "updated_at": "2020-01-21T19:16:00Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "# To people coming from search: please [read this page first](https://reactjs.org/warnings/invalid-hook-call-warning.html). It contains most common possible fixes!\r\n\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nEnhancement\r\n\r\n**What is the current behavior?**\r\n\r\nI had multiple instances of React by mistake.\r\n\r\nWhen trying to use hooks, got this error:\r\n`hooks can only be called inside the body of a function component`\r\n\r\nWhich is not correct since I was using function components. Took me a while to find the real cause of the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nShow the correct error message. Maybe detect that the app has multiple instances of React and say that it may be the reason of bugs. "
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13989",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13989/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13989/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13989/events",
          "html_url": "https://github.com/facebook/react/issues/13989",
          "id": 374451049,
          "node_id": "MDU6SXNzdWUzNzQ0NTEwNDk=",
          "number": 13989,
          "title": "nextContext arg in shouldComponentUpdate() method",
          "user": {
            "login": "konsultacijos",
            "id": 25863232,
            "node_id": "MDQ6VXNlcjI1ODYzMjMy",
            "avatar_url": "https://avatars3.githubusercontent.com/u/25863232?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/konsultacijos",
            "html_url": "https://github.com/konsultacijos",
            "followers_url": "https://api.github.com/users/konsultacijos/followers",
            "following_url": "https://api.github.com/users/konsultacijos/following{/other_user}",
            "gists_url": "https://api.github.com/users/konsultacijos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/konsultacijos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/konsultacijos/subscriptions",
            "organizations_url": "https://api.github.com/users/konsultacijos/orgs",
            "repos_url": "https://api.github.com/users/konsultacijos/repos",
            "events_url": "https://api.github.com/users/konsultacijos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/konsultacijos/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 739761016,
              "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
              "name": "Component: Reconciler",
              "color": "f9a798",
              "default": false,
              "description": null
            },
            {
              "id": 710722093,
              "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
              "name": "Type: Needs Investigation",
              "color": "fbca04",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2018-10-26T16:09:52Z",
          "updated_at": "2020-01-16T20:21:43Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI think it is feature, but could be a bug also\r\n\r\n**What is the current behavior?**\r\nWhen I subscribe to context using React16.6.0 contextType API, component rerenders even when unused context properties was changed. So, I want to use shouldComponentUpdate(), but that method don't have nextContext argument.\r\n\r\nIs there any other way to solve this problem?\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13986",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13986/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13986/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13986/events",
          "html_url": "https://github.com/facebook/react/pull/13986",
          "id": 374380406,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjI2MDk1MzUz",
          "number": 13986,
          "title": "Add errorInfo and prevState parameters to getDerivedStateFromError",
          "user": {
            "login": "bisubus",
            "id": 2905949,
            "node_id": "MDQ6VXNlcjI5MDU5NDk=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2905949?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bisubus",
            "html_url": "https://github.com/bisubus",
            "followers_url": "https://api.github.com/users/bisubus/followers",
            "following_url": "https://api.github.com/users/bisubus/following{/other_user}",
            "gists_url": "https://api.github.com/users/bisubus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bisubus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bisubus/subscriptions",
            "organizations_url": "https://api.github.com/users/bisubus/orgs",
            "repos_url": "https://api.github.com/users/bisubus/repos",
            "events_url": "https://api.github.com/users/bisubus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bisubus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 8,
          "created_at": "2018-10-26T13:19:04Z",
          "updated_at": "2020-01-15T21:17:27Z",
          "closed_at": null,
          "author_association": "NONE",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/13986",
            "html_url": "https://github.com/facebook/react/pull/13986",
            "diff_url": "https://github.com/facebook/react/pull/13986.diff",
            "patch_url": "https://github.com/facebook/react/pull/13986.patch"
          },
          "body": "Improves #13746 by providing `getDerivedStateFromError` with both `error` and `errorInfo` params that are available in `componentDidCatch`.\r\nCloses #13954."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13970",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13970/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13970/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13970/events",
          "html_url": "https://github.com/facebook/react/issues/13970",
          "id": 374044177,
          "node_id": "MDU6SXNzdWUzNzQwNDQxNzc=",
          "number": 13970,
          "title": "16.6 contextType + getDerivedStateFromProps",
          "user": {
            "login": "natew",
            "id": 12100,
            "node_id": "MDQ6VXNlcjEyMTAw",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/natew",
            "html_url": "https://github.com/natew",
            "followers_url": "https://api.github.com/users/natew/followers",
            "following_url": "https://api.github.com/users/natew/following{/other_user}",
            "gists_url": "https://api.github.com/users/natew/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/natew/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/natew/subscriptions",
            "organizations_url": "https://api.github.com/users/natew/orgs",
            "repos_url": "https://api.github.com/users/natew/repos",
            "events_url": "https://api.github.com/users/natew/events{/privacy}",
            "received_events_url": "https://api.github.com/users/natew/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2018-10-25T17:04:42Z",
          "updated_at": "2020-01-10T08:10:34Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nContext not passed into getDerivedStateFromProps:\r\n\r\n```\r\nstatic getDerivedStateFromProps(props, state, context) {}\r\n```\r\n\r\nJust curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.\r\n\r\nJust curious if there's been any discussion on this."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13954",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13954/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13954/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13954/events",
          "html_url": "https://github.com/facebook/react/issues/13954",
          "id": 373616895,
          "node_id": "MDU6SXNzdWUzNzM2MTY4OTU=",
          "number": 13954,
          "title": "Receive previous state in getDerivedStateFromError",
          "user": {
            "login": "bisubus",
            "id": 2905949,
            "node_id": "MDQ6VXNlcjI5MDU5NDk=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2905949?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bisubus",
            "html_url": "https://github.com/bisubus",
            "followers_url": "https://api.github.com/users/bisubus/followers",
            "following_url": "https://api.github.com/users/bisubus/following{/other_user}",
            "gists_url": "https://api.github.com/users/bisubus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bisubus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bisubus/subscriptions",
            "organizations_url": "https://api.github.com/users/bisubus/orgs",
            "repos_url": "https://api.github.com/users/bisubus/repos",
            "events_url": "https://api.github.com/users/bisubus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bisubus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 121709921,
              "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
              "name": "Type: Feature Request",
              "color": "c7def8",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 2,
          "created_at": "2018-10-24T18:28:10Z",
          "updated_at": "2019-11-18T12:03:41Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is feature request.\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:\r\n\r\n```js\r\nclass App extends Component {\r\n  state = {}\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // do we really need this?\r\n    // the state is derived from error, not props\r\n    if (state.error)\r\n      return remapStateToPreferredStructure(state);\r\n  }\r\n\r\n  render() { /* ... */ }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`getDerivedStateFromError` is expected to receive previous state and have\r\n\r\n```\r\ngetDerivedStateFromError(error, state)\r\n```\r\nsignature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.6.0\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13938",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13938/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13938/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13938/events",
          "html_url": "https://github.com/facebook/react/issues/13938",
          "id": 373306184,
          "node_id": "MDU6SXNzdWUzNzMzMDYxODQ=",
          "number": 13938,
          "title": "Error line number in Error Boundary",
          "user": {
            "login": "dehghani-mehdi",
            "id": 9152330,
            "node_id": "MDQ6VXNlcjkxNTIzMzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9152330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dehghani-mehdi",
            "html_url": "https://github.com/dehghani-mehdi",
            "followers_url": "https://api.github.com/users/dehghani-mehdi/followers",
            "following_url": "https://api.github.com/users/dehghani-mehdi/following{/other_user}",
            "gists_url": "https://api.github.com/users/dehghani-mehdi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dehghani-mehdi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dehghani-mehdi/subscriptions",
            "organizations_url": "https://api.github.com/users/dehghani-mehdi/orgs",
            "repos_url": "https://api.github.com/users/dehghani-mehdi/repos",
            "events_url": "https://api.github.com/users/dehghani-mehdi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dehghani-mehdi/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 620368407,
              "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
              "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
              "name": "Resolution: Needs More Information",
              "color": "fffde7",
              "default": false,
              "description": null
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 9,
          "created_at": "2018-10-24T05:03:58Z",
          "updated_at": "2020-01-10T07:35:13Z",
          "closed_at": null,
          "author_association": "NONE",
          "body": "Hey,\r\n\r\nAs I can not reopen issue #13790, I opened this.\r\n\r\nIf you don't like to fix/add my request, simply say `won't fox`, but don't close the issue with simple/not related answer, as @aweary did. React is pro library, you are pro, so act like pros.\r\n\r\nThanks."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13934",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13934/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13934/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13934/events",
          "html_url": "https://github.com/facebook/react/issues/13934",
          "id": 373231550,
          "node_id": "MDU6SXNzdWUzNzMyMzE1NTA=",
          "number": 13934,
          "title": "Update release script to handle alpha react-reconciler deps",
          "user": {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 71502270,
              "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
              "name": "Component: Build Infrastructure",
              "color": "f9d0c4",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": {
            "login": "bvaughn",
            "id": 29597,
            "node_id": "MDQ6VXNlcjI5NTk3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "bvaughn",
              "id": 29597,
              "node_id": "MDQ6VXNlcjI5NTk3",
              "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/bvaughn",
              "html_url": "https://github.com/bvaughn",
              "followers_url": "https://api.github.com/users/bvaughn/followers",
              "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
              "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
              "organizations_url": "https://api.github.com/users/bvaughn/orgs",
              "repos_url": "https://api.github.com/users/bvaughn/repos",
              "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
              "received_events_url": "https://api.github.com/users/bvaughn/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "milestone": null,
          "comments": 1,
          "created_at": "2018-10-23T22:37:35Z",
          "updated_at": "2020-01-08T19:15:21Z",
          "closed_at": null,
          "author_association": "CONTRIBUTOR",
          "body": "This commit 1a57dc6 broke it"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13862",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13862/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13862/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13862/events",
          "html_url": "https://github.com/facebook/react/pull/13862",
          "id": 370742878,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzMzUyNzc1",
          "number": 13862,
          "title": "[WIP] Replay load/error events that happen earlier than commit",
          "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "node_id": "MDQ6VXNlcjYzNjQ4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 5,
          "created_at": "2018-10-16T18:32:13Z",
          "updated_at": "2020-01-08T19:04:50Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/13862",
            "html_url": "https://github.com/facebook/react/pull/13862",
            "diff_url": "https://github.com/facebook/react/pull/13862.diff",
            "patch_url": "https://github.com/facebook/react/pull/13862.patch"
          },
          "body": "If we create an img/image/link those might fire their load event before we commit. If that happens, we need to store the event so that we can replay it during the commit phase.\r\n\r\nI had an idea to fix it but this is still WIP because I actually need to test if this approach works.\r\n\r\n- [x] Write code\r\n- [ ] Write unit tests\r\n- [ ] Write fixtures\r\n"
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13847",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13847/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13847/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13847/events",
          "html_url": "https://github.com/facebook/react/pull/13847",
          "id": 369847701,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjIyNjgwMTUx",
          "number": 13847,
          "title": "Add failing test for expiration",
          "user": {
            "login": "gaearon",
            "id": 810438,
            "node_id": "MDQ6VXNlcjgxMDQzOA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 4,
          "created_at": "2018-10-13T22:32:47Z",
          "updated_at": "2020-01-23T22:15:59Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/13847",
            "html_url": "https://github.com/facebook/react/pull/13847",
            "diff_url": "https://github.com/facebook/react/pull/13847.diff",
            "patch_url": "https://github.com/facebook/react/pull/13847.patch"
          },
          "body": "I don't know if this is a bug but this behavior seems weird.\r\n\r\nThe sequence is:\r\n\r\n* Perform update 1\r\n* Schedule update 2\r\n* Start rendering update 2\r\n* Advance time so that update 2 is expired\r\n* Schedule update 3\r\n* Flush expired work\r\n\r\nMy expectation is this should only flush update 2 (it's the one that expired). Update 3 hasn't expired yet.\r\n\r\nHowever, this flushes update 3 instead. If I revert https://github.com/facebook/react/pull/13503, this flushes both 2 and 3. I can't get it to only flush 2, but that seems like the desired behavior.\r\n\r\nBy itself flushing 3 isn't that bad. The real situation I was trying to reproduce is when we expire another update *while* rendering a just-expired update, and that kicks off another rendering cycle without yielding. But I couldn't get to reproducing that because even a more basic scenario above didn't work as I expected."
        },
        {
          "url": "https://api.github.com/repos/facebook/react/issues/13832",
          "repository_url": "https://api.github.com/repos/facebook/react",
          "labels_url": "https://api.github.com/repos/facebook/react/issues/13832/labels{/name}",
          "comments_url": "https://api.github.com/repos/facebook/react/issues/13832/comments",
          "events_url": "https://api.github.com/repos/facebook/react/issues/13832/events",
          "html_url": "https://github.com/facebook/react/pull/13832",
          "id": 369335880,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjIyMzAyNjYy",
          "number": 13832,
          "title": "Add failing test for Suspense bug",
          "user": {
            "login": "gaearon",
            "id": 810438,
            "node_id": "MDQ6VXNlcjgxMDQzOA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 196858374,
              "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
              "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
              "name": "CLA Signed",
              "color": "e7e7e7",
              "default": false,
              "description": null
            },
            {
              "id": 1775958285,
              "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
              "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
              "name": "React Core Team",
              "color": "9149d1",
              "default": false,
              "description": "Opened by a member of the React Core Team"
            }
          ],
          "state": "open",
          "locked": false,
          "assignee": null,
          "assignees": [
      
          ],
          "milestone": null,
          "comments": 7,
          "created_at": "2018-10-11T22:51:30Z",
          "updated_at": "2020-01-23T22:14:43Z",
          "closed_at": null,
          "author_association": "MEMBER",
          "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/13832",
            "html_url": "https://github.com/facebook/react/pull/13832",
            "diff_url": "https://github.com/facebook/react/pull/13832.diff",
            "patch_url": "https://github.com/facebook/react/pull/13832.patch"
          },
          "body": "I expect that `maxDuration` that is larger than both the actual waiting time *and* the current expiration context timeout should be equivalent to not specifying `maxDuration` at all. But that doesn't seem like what happens. \r\n\r\nA more concrete example:\r\n\r\n```js\r\nimport React, { lazy, unstable_Suspense as Suspense } from \"react\";\r\nimport { unstable_createRoot as createRoot } from \"react-dom\";\r\n\r\nlet done = false;\r\nlet promise;\r\nfunction Delay({ ms, children }) {\r\n  if (done) {\r\n    return children;\r\n  }\r\n  if (!promise) {\r\n    promise = new Promise(resolve => {\r\n      setTimeout(() => {\r\n        done = true;\r\n        resolve();\r\n      }, ms);\r\n    });\r\n  }\r\n  throw promise;\r\n}\r\n\r\nclass Spinner extends React.Component {\r\n  componentDidMount() {\r\n    alert(\"spin\");\r\n  }\r\n  render() {\r\n    console.log(\"spinner\");\r\n    return <h1>🌀 'Loading....'</h1>;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 onClick={() => this.setState({ showStuff: true })}>Suspense</h1>\r\n        {this.state.showStuff && (\r\n          <Suspense maxDuration={2000} fallback={<Spinner />}>\r\n            <Delay ms={10}>Ready</Delay>\r\n          </Suspense>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\ncreateRoot(document.getElementById(\"root\")).render(<App />);\r\n```\r\n\r\nI'd expect `Spinner` to never be shown — or at least the behavior to be consistent between `maxDuration={2000}` and missing `maxDuration`."
        },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13798",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13798/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13798/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13798/events",
            "html_url": "https://github.com/facebook/react/issues/13798",
            "id": 368684060,
            "node_id": "MDU6SXNzdWUzNjg2ODQwNjA=",
            "number": 13798,
            "title": "JAWS reads non-interactive elements as Clickable",
            "user": {
              "login": "Lily418",
              "id": 1368025,
              "node_id": "MDQ6VXNlcjEzNjgwMjU=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/1368025?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/Lily418",
              "html_url": "https://github.com/Lily418",
              "followers_url": "https://api.github.com/users/Lily418/followers",
              "following_url": "https://api.github.com/users/Lily418/following{/other_user}",
              "gists_url": "https://api.github.com/users/Lily418/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/Lily418/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/Lily418/subscriptions",
              "organizations_url": "https://api.github.com/users/Lily418/orgs",
              "repos_url": "https://api.github.com/users/Lily418/repos",
              "events_url": "https://api.github.com/users/Lily418/events{/privacy}",
              "received_events_url": "https://api.github.com/users/Lily418/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 9,
            "created_at": "2018-10-10T14:07:16Z",
            "updated_at": "2019-01-29T20:48:00Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n1. I create an app using [create-react-app](https://github.com/facebook/create-react-app)\r\n2. I use JAWS Professional Edition Version 2018 (build 1710.42 ILM) and Internet Explorer 11 on Windows 7\r\n3. I use arrow keys to navigate to paragraph \"Edit src/App.js and save to reload.\"\r\n4. Jaws announces \"Edit src/App.js and save to reload. **clickable**\"\r\n\r\n**What is the expected behavior?**\r\nThis paragraph is non interactive, it should not be announced as clickable.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- JAWS Professional Edition Version 2018 (build 1710.42 ILM) \r\n- Internet Explorer 11\r\n- Windows 7\r\n- create-react-app 2.0.3\r\n\r\n**suspected cause**\r\nUsing Chrome Event Listener Breakpoints I observed there's a function called `trapClickOnNonInteractiveElement` which is the onclick handler for non interactive elements. This noop function is causing JAWS to think this is an interactive element\r\n\r\n**possible solution**\r\nIn [trapClickOnNonInteractiveElement](https://github.com/facebook/react/blob/8a8d973d3cc5623676a84f87af66ef9259c3937c/packages/react-dom/src/client/ReactDOMComponent.js#L245) there is a comment which reads \r\n```\r\n// TODO: Only do this for the relevant Safaris maybe?\r\n```\r\nI think that this would fix this issue."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13796",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13796/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13796/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13796/events",
            "html_url": "https://github.com/facebook/react/issues/13796",
            "id": 368331135,
            "node_id": "MDU6SXNzdWUzNjgzMzExMzU=",
            "number": 13796,
            "title": "batch.commit() doesn't empty existing container",
            "user": {
              "login": "sophiebits",
              "id": 6820,
              "node_id": "MDQ6VXNlcjY4MjA=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sophiebits",
              "html_url": "https://github.com/sophiebits",
              "followers_url": "https://api.github.com/users/sophiebits/followers",
              "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
              "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
              "organizations_url": "https://api.github.com/users/sophiebits/orgs",
              "repos_url": "https://api.github.com/users/sophiebits/repos",
              "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sophiebits/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1776420141,
                "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
                "url": "https://api.github.com/repos/facebook/react/labels/Partner",
                "name": "Partner",
                "color": "e4bef7",
                "default": false,
                "description": ""
              },
              {
                "id": 710722093,
                "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-10-09T18:07:22Z",
            "updated_at": "2020-01-08T23:42:28Z",
            "closed_at": null,
            "author_association": "COLLABORATOR",
            "body": "If you have\r\n\r\n```\r\n<div id=\"main\">hello</div>\r\n```\r\n\r\nthen run\r\n\r\n```\r\nconst root = ReactDOM.unstable_createRoot($('main'));\r\nconst batch = root.createBatch();\r\nbatch.render('goodbye');\r\nawait batch;\r\nbatch.commit();\r\n```\r\n\r\nthen the div should contain \"goodbye\" but instead contains \"hellogoodbye\". Looks like we are forgetting to empty the container.\r\n\r\nSame issue exists with `unstable_createRoot(...).render(...)`."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13713",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13713/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13713/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13713/events",
            "html_url": "https://github.com/facebook/react/issues/13713",
            "id": 362967976,
            "node_id": "MDU6SXNzdWUzNjI5Njc5NzY=",
            "number": 13713,
            "title": "DOM Event Mount Target Considerations",
            "user": {
              "login": "philipp-spiess",
              "id": 458591,
              "node_id": "MDQ6VXNlcjQ1ODU5MQ==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/458591?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/philipp-spiess",
              "html_url": "https://github.com/philipp-spiess",
              "followers_url": "https://api.github.com/users/philipp-spiess/followers",
              "following_url": "https://api.github.com/users/philipp-spiess/following{/other_user}",
              "gists_url": "https://api.github.com/users/philipp-spiess/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/philipp-spiess/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/philipp-spiess/subscriptions",
              "organizations_url": "https://api.github.com/users/philipp-spiess/orgs",
              "repos_url": "https://api.github.com/users/philipp-spiess/repos",
              "events_url": "https://api.github.com/users/philipp-spiess/events{/privacy}",
              "received_events_url": "https://api.github.com/users/philipp-spiess/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-09-23T19:00:28Z",
            "updated_at": "2018-10-21T01:54:00Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "Given that we’re considering a [rewrite of the event system](https://github.com/facebook/react/pull/13613#issuecomment-420286431) and are thinking about [attaching events to the React root](https://github.com/facebook/react/issues/13525), I thought it would be fitting to explore all our options on where to mount the event listeners a little and combine all the knowledge that is scattered across the repo.\r\n\r\nIn general, there are three candidates for attaching event listeners:\r\n\r\n1. Document  Listeners\r\n2. React Root Listeners\r\n3. Element Listeners\r\n\r\nEvery option comes with shortcomings and I want to summarize what we’ve learned over the years.\r\n\r\n## Document Listeners\r\n\r\nHistorically, React always listened at the document level and implemented a synthetic event system to simulate capture and bubble phases inside the React tree. Most event listeners are listening at the bubble phase which means that users can still add capture-level document listeners and see them fire before React will process the event.\r\n\r\nAdditionally, not all events bubble in the DOM. To support bubbling for all events, React sometimes eagerly adds event listeners (media events, for example) or listens to the capture phase instead.\r\n\r\nWhile it usually works to leave the React event system and attach native listeners when needed, there are certain caveats that come with that. One example is that calling `.stopPropagation()` on a capture document-level listener has no effect (#12518, https://github.com/facebook/react/issues/285#issuecomment-253502585/). Another implication of this is that interoperability between other React roots or third-party frameworks will behave unexpectedly (#8117, #8693).\r\n\r\nSome browsers have certain optimizations in place that make handling of document listeners complicated (Safari is not properly bubbling when document listeners are used #12717, #12989 and Chrome doesn’t respect preventDefault() on touch start at the document level https://github.com/facebook/react/issues/11530#issuecomment-413704069).\r\n\r\nWe’re also never cleaning up document-level listeners (#7128).\r\n\r\nThere are certain benefits of this solution as well. Our current event system can use the same \"event bus\" to implement polyfills that require document based listeners. Implementation of portal-bubbling is easier because we only need to ensure that we’re already listening at the document of the portal target (more on that later).\r\n\r\n## React Root Listeners (#2043)\r\n\r\nOne solution to the issues outlined above is the use of React roots as the mount target for events. This would still rely on event delegation and would require a synthetic event system.\r\n\r\nRoot level listeners would certainly help make bubbling more robust when using multiple React instances since we no longer add all listeners at the same level. This will, however, only work for bubbling. Some events use capturing (`scroll`, `focus`, `blur`, `cancel`, and `close`) and would fire in an inverse bubble order (https://github.com/facebook/react/pull/8117#issuecomment-257024618, https://github.com/facebook/react/pull/12919#issuecomment-392556395). Capture handlers between multiple roots will also always fire in the wrong order.\r\n\r\nPortal bubbling will also become more complicated since we have to find out if the portal root is inside the react-root to see if we need to attach listeners to the portal root as well. Consider the following example, where we need to add listeners to the `#react-root` as well as the `#portal-root`:\r\n\r\n```html\r\n<body>\r\n  <div id=\"react-root\"></div>\r\n  <div id=\"portal-root\"></div>\r\n</body>\r\n```\r\n\r\nAnd compare it with this example, where we don’t need that:\r\n\r\n```html\r\n<body>\r\n  <div id=\"react-root\">\r\n    <div id=\"portal-root\"></div>\r\n  </div>\r\n</body>\r\n```\r\n\r\nI’ve compiled a list of previous implementation attempts and the issues that were pointed out as well:\r\n\r\n| Date          | PR                                          | Issues|\r\n| ------------- | ------------------------------------------- ||\r\n| Oct&nbsp;2016 | https://github.com/facebook/react/pull/8117 | <ul><li>Enter/Leave Shims (https://github.com/facebook/react/pull/8117#issuecomment-256498143)</li><li>Issues when using the same instance of React (https://github.com/facebook/react/pull/8117#issuecomment-256503428)</li><li>Captured events (like focus in Firefox) will fire in reverse order (https://github.com/facebook/react/pull/8117#issuecomment-257024618)</li><li>iOS Tap Highlight (https://github.com/facebook/react/pull/8117#issuecomment-257105712, https://github.com/facebook/react/issues/12989#issuecomment-414266839)</li><li>Select Shims (https://github.com/facebook/react/pull/8117#issuecomment-270206114)</li></ul> |\r\n| Jun&nbsp;2016 | https://github.com/facebook/react/pull/7088 | <ul><li>Firefox v8.01 mousemove events (https://github.com/facebook/react/pull/7088#issuecomment-227191272)</li></ul|\r\n| Aug&nbsp;2014 | https://github.com/facebook/react/pull/2050 | <ul><li>Enter/Leave Shims (https://github.com/facebook/react/pull/2050#issue-19863619)</li></ul|\r\n\r\nIt’s probably possible to work around some/all of the issues. The invalid capturing order can be worked around by adding both a bubble and a capture listener for regular events and then only trigger the appropriate phase. The shims can probably be rewritten and if they need the document, additional listeners could be added. iOS tap highlight could be disabled via CSS. To get rid of some of the edge cases around events that don’t bubble in the browser, we should consider deprecating support for this all together.\r\n\r\n### New Features\r\n\r\nSince we’re taking the time to rethink the event system, I also want us to think about: **Passive Event Listeners (#6436)** and **Web Components (#7901, #9242)**.\r\n\r\nI think we _can_ (albeit with an additional implementation effort) support passive event systems while keep using event delegation: We’d add two different listeners (one for capturing and one for bubbling) and handle them as completely different events. \r\n\r\nSupport for shadow roots is a bit more complex as event delegation doesn’t really make sense there. We can’t easily consider the shadow root the same as a React root or a portal root since we can’t rely on adding listeners to the `#react-root` if it’s the parent of a shadow root. Consider the following case:\r\n\r\n```html\r\n<div id=\"react-root\">\r\n  <!-- Listening on #react-root will catch events inside the #portal-root -->\r\n  <div id=\"portal-root\"></div> \r\n  <!-- Listening on #react-root will NOT catch events inside the #shadow-root -->\r\n  <my-component id=\"shadow-root\"></my-component>\r\n</div>\r\n```\r\n\r\nThere’s a handy comparison of Custom Elements support of different JavaScript framework and [React can definitely do better](https://custom-elements-everywhere.com/#react). With the planned changes to the event system, we should work on that.\r\n\r\n## Element Listeners (sort of #4751)\r\n\r\nThere’s a more radical approach to changing the event system and that is to get rid of event delegation altogether. This is what happens in [Preact](https://github.com/developit/preact/wiki/Differences-to-React#whats-missing), [react-dom-lite](https://github.com/jquense/react-dom-lite/blob/master/src/events/index.js#L35-L36), [Vue.js](https://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/test/unit/modules/vdom/modules/events.spec.js#L5-L14), and probably other frameworks as well (We should research Ember and Angular at this point).\r\n\r\nIn this case, it’s trivial to add support for passive event listeners and bubble/capture will behave as expected. It also allows us to completely remove the need of the synthetic event system as we could rely on the browser for this. We also know that some browsers can better optimize certain events if they are attached directly to the element (#1254, #1964).\r\n\r\nI can think of at least two major roadblocks for this, though:\r\n\r\n1. **Performance** \r\n   Event delegation avoids the need to `addEventListener()` for every element with an event handler. We should figure out how significant this overhead really is - especially while considering the possible bundle size improvement that should make initial-render faster again. This needs to be compared at a real-world application. \r\n\r\n   While doing some [very rough benchmarking](https://github.com/philipp-spiess/react-event-benchmark/tree/755b0e208e6ae920f5b44573f09ffb519eed47ba) (It’s a microbenchmark so the outcomes are not representative for real apps) of an event-system less React, I noticed that there’s another feature of event delegation that is often overlooked: setState batching. Right now, React knows when all event listeners are called and can batch setState calls until this is the case. I looked a bit into a [potential callback mechanism](https://github.com/philipp-spiess/request-post-events-callback) that would fire when all events are processed and before the next frame is drawn but I don’t think this is possible in all browsers. We have to evaluate the performance implications on a real-world application to see how bad this is and how often setState batching is occurring (we could still batch inside the same event listener).\r\n\r\n2. **Portal Bubbling**\r\n   The big issue I see with portal bubbling is that we still need to use event delegation on the portal roots to catch events that are only listened to in parents. In the write-up about React Fire (#13525), @gaearon mentioned that we could use re-dispatching of native events but that would still require us to set up the listeners first.\r\n\r\n## Further Considerations\r\n\r\n- The whole synthetic event system currently accounts for **~20%** of the React DOM bundle size. [Back in July](https://github.com/philipp-spiess/react/commit/b4fda332b2be55e1b12021bd60209c6b442c3cda) I worked on an example that removed everything event related and added a tiny Preact-like system to find out how much we can save. I didn’t look into edge cases too much but I already got most of the tests to pass.\r\n- In general we might also consider adding an API for installing global DOM event handlers (#285) since the upcoming concurrent mode will make it more complicated to listen to arbitrary non React-controlled events (because of them possibly being fired during render time slices). This discussion is out of scope for this write-up though but maybe good to keep in mind.\r\n\r\nThat’s all I have for now. I’m especially curious for ways how we could implement portal bubbling when using element listeners - I’d say this is the biggest uncertainty I have right now. 🙂 \r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13692",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13692/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13692/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13692/events",
            "html_url": "https://github.com/facebook/react/pull/13692",
            "id": 361865019,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjE2NzI4NzAz",
            "number": 13692,
            "title": "allow non-numeric values of 'cols' and 'rows' attributes (#13645)",
            "user": {
              "login": "Simek",
              "id": 719641,
              "node_id": "MDQ6VXNlcjcxOTY0MQ==",
              "avatar_url": "https://avatars2.githubusercontent.com/u/719641?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/Simek",
              "html_url": "https://github.com/Simek",
              "followers_url": "https://api.github.com/users/Simek/followers",
              "following_url": "https://api.github.com/users/Simek/following{/other_user}",
              "gists_url": "https://api.github.com/users/Simek/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/Simek/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/Simek/subscriptions",
              "organizations_url": "https://api.github.com/users/Simek/orgs",
              "repos_url": "https://api.github.com/users/Simek/repos",
              "events_url": "https://api.github.com/users/Simek/events{/privacy}",
              "received_events_url": "https://api.github.com/users/Simek/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 9,
            "created_at": "2018-09-19T18:08:55Z",
            "updated_at": "2020-01-10T09:25:52Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/13692",
              "html_url": "https://github.com/facebook/react/pull/13692",
              "diff_url": "https://github.com/facebook/react/pull/13692.diff",
              "patch_url": "https://github.com/facebook/react/pull/13692.patch"
            },
            "body": "According to HTML spec not only positive numbers are valid values of  'cols' and 'rows' attributes. More information could be found in corresponding issue #13645.\r\n\r\nI'm not sure if `DOMPropertyOperations` is the best fitting file to put that test in. Maybe it should be `ReactDOMIframe` since `frameset` tag is fully related to `iframe`?"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13681",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13681/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13681/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13681/events",
            "html_url": "https://github.com/facebook/react/issues/13681",
            "id": 361413793,
            "node_id": "MDU6SXNzdWUzNjE0MTM3OTM=",
            "number": 13681,
            "title": "How to prevent ReactDOM.render errors from bubbling when otherwise explicitly handled",
            "user": {
              "login": "jneander",
              "id": 880186,
              "node_id": "MDQ6VXNlcjg4MDE4Ng==",
              "avatar_url": "https://avatars2.githubusercontent.com/u/880186?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/jneander",
              "html_url": "https://github.com/jneander",
              "followers_url": "https://api.github.com/users/jneander/followers",
              "following_url": "https://api.github.com/users/jneander/following{/other_user}",
              "gists_url": "https://api.github.com/users/jneander/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/jneander/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/jneander/subscriptions",
              "organizations_url": "https://api.github.com/users/jneander/orgs",
              "repos_url": "https://api.github.com/users/jneander/repos",
              "events_url": "https://api.github.com/users/jneander/events{/privacy}",
              "received_events_url": "https://api.github.com/users/jneander/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 7,
            "created_at": "2018-09-18T17:48:47Z",
            "updated_at": "2019-10-02T00:27:48Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug. Ordinarily, this would probably be considered a feature request. However, the stated purpose of the feature referenced below is being violated in certain environments.\r\n\r\n**What is the current behavior?** \r\n\r\nReact 16+ surfaces an uncaught error during render, even when using `componentDidCatch` as designed or using try/catch around the render. As described in the comment [above the related code](https://github.com/facebook/react/blob/master/packages/shared/invokeGuardedCallbackImpl.js#L32:L49), this is a convenience provided for developers using DevTools for debugging purposes. However, the convenience provided for development debugging is changing behavior in specs, causing failures for otherwise protected code paths, which goes against this statement from the comment description for the code:\r\n\r\n> But because the error happens in a different event loop context, it does not interrupt the normal program flow.\r\n\r\nWhen the error occurs, a spec runner such as Mocha will fail the test with the uncaught error, then continue with the next test. After advancing, the second render of the component will complete and call the ReactDOM.render callback, which continues code from the already-failed test while a subsequent test is in progress. This pollutes the spec suite and leads to other issues that are not produced when using the Production version of React.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nAll relevant code and content has been included in [this CodeSandbox](https://codesandbox.io/s/vvmv7q7o7y). Due to the use of karma/mocha, tests must be run locally. Inline comments add detail to behavior and expectations.\r\n\r\nTo see the tests pass, switch \"test\" to \"production\" in the `karma.js` file.\r\n\r\n**What is the expected behavior?**\r\n\r\nTypically, DevTools are used in a different context from running specs—automation vs investigation, for lack of more precise terms. It should be an option rather than the default when using React in a non-production environment. At least in an environment of `test`, where spec runners are conditionally sensitive to global errors, developers must have the option to disable or disallow this behavior as it is implemented at this time.\r\n\r\nFor a second, perhaps more intuitive option, refer to this portion of the mentioned comment, talking about \"pause on caught exceptions\":\r\n\r\n> This is untintuitive, though, because even though React has caught the error, from the developer's perspective, the error is uncaught.\r\n\r\nWhen an exception during render is captured using `componentDidCatch` or try/catch as mentioned above, the exception should be considered \"caught,\" as the developer has explicitly created an error boundary around this render. In this case, expected behavior would be for the error to not be surfaced globally and for the developer to debug any exceptions within the error boundary they defined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is present only in the non-production version of React 16+. The `development` or `test` environments of React 16+ feature this behavior. React 15.* and below do not have this issue. Prior to React 16, explicit try/catch handlers were solely responsible for being an error boundary during render."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13602",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13602/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13602/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13602/events",
            "html_url": "https://github.com/facebook/react/pull/13602",
            "id": 358345543,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0MTI1NDM4",
            "number": 13602,
            "title": "Hydration warnings with DOM diff in react-reconciler (#10085)",
            "user": {
              "login": "sompylasar",
              "id": 498274,
              "node_id": "MDQ6VXNlcjQ5ODI3NA==",
              "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sompylasar",
              "html_url": "https://github.com/sompylasar",
              "followers_url": "https://api.github.com/users/sompylasar/followers",
              "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
              "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
              "organizations_url": "https://api.github.com/users/sompylasar/orgs",
              "repos_url": "https://api.github.com/users/sompylasar/repos",
              "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sompylasar/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 22,
            "created_at": "2018-09-09T03:13:33Z",
            "updated_at": "2020-01-10T07:02:33Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/13602",
              "html_url": "https://github.com/facebook/react/pull/13602",
              "diff_url": "https://github.com/facebook/react/pull/13602.diff",
              "patch_url": "https://github.com/facebook/react/pull/13602.patch"
            },
            "body": "An attempt to implement the hydration warning and DOM diff in react-reconciler package as requested by @gaearon here: https://github.com/facebook/react/pull/12063#pullrequestreview-142612751\r\n\r\n> What would diffing look like if it was implemented in the reconciler? Feel free to change host config API if necessary — the goal is that all hydratable renderers would get nice warnings, not just DOM.\r\n\r\nThe tests and fixtures were copied from the original PR: https://github.com/facebook/react/pull/12063 and slightly modified (see my review below)."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13567",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13567/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13567/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13567/events",
            "html_url": "https://github.com/facebook/react/issues/13567",
            "id": 357300893,
            "node_id": "MDU6SXNzdWUzNTczMDA4OTM=",
            "number": 13567,
            "title": "Consider stopping auto-adding `px` to number style values (except for a small whitelist)",
            "user": {
              "login": "mgol",
              "id": 1758366,
              "node_id": "MDQ6VXNlcjE3NTgzNjY=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/1758366?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/mgol",
              "html_url": "https://github.com/mgol",
              "followers_url": "https://api.github.com/users/mgol/followers",
              "following_url": "https://api.github.com/users/mgol/following{/other_user}",
              "gists_url": "https://api.github.com/users/mgol/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/mgol/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/mgol/subscriptions",
              "organizations_url": "https://api.github.com/users/mgol/orgs",
              "repos_url": "https://api.github.com/users/mgol/repos",
              "events_url": "https://api.github.com/users/mgol/events{/privacy}",
              "received_events_url": "https://api.github.com/users/mgol/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 11,
            "created_at": "2018-09-05T16:08:37Z",
            "updated_at": "2019-05-14T14:49:38Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA removal of a feature, in a sense.\r\n\r\n**What is the current behavior?**\r\n\r\nReact automatically adds the `px` suffix for numerical values passed to the `style` prop. As some CSS properties accept unitless values, React maintains a blacklist of properties that shouldn't get `px` auto-appended.\r\n\r\nThe problem is that this solution doesn't scale. It requires us to add more & more properties to the list as CSS specs expand and recently the list grows faster; Flexbox & Grid added quite a few of them. What's more confusing, some of those props would work both with & without the `px` suffix and that changes the meaning (`lineHeight` is suffering from that).\r\n\r\nAlthough I'm a React newbie I'm quite familiar with this issue due to being a member of the jQuery Core team. jQuery has the same logic as React here and we keep having to add to the list. We've actually exposed the list at [jQuery.cssNumber](https://api.jquery.com/jQuery.cssNumber/) so that people don't always have to wait for us to add support for a property and do a release.\r\n\r\nThat's why we decided that in jQuery 4 we'll drop the auto-prefixing blacklist and turn to a whitelist that lists only a few most common properties to which we want to auto-append `px` (mostly because they're extremely common and we don't want to break the world too much); we plan to _not_ expand that list unless we missed something really common. You can see the current plan in my PR: https://github.com/jquery/jquery/pull/4055. In particular, see the proposed whitelist in a (visualized) regexp in:\r\nhttps://github.com/jquery/jquery/blob/03e9dba3882868e1ee79f1fb0504326da925644f/src/css/isAutoPx.js.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nI propose that React could do the same thing jQuery is planning to and switch the ever-expanding blacklist of CSS props that shouldn't have the `px` suffix applied to a small whitelist that should have the suffix applied.\r\n\r\nThis topic has been initially described in #13550.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll browses & OSs. I don't know how old this logic is in React."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13560",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13560/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13560/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13560/events",
            "html_url": "https://github.com/facebook/react/issues/13560",
            "id": 357004895,
            "node_id": "MDU6SXNzdWUzNTcwMDQ4OTU=",
            "number": 13560,
            "title": "Remove Factory Components",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 7,
            "created_at": "2018-09-04T22:54:03Z",
            "updated_at": "2020-01-08T19:16:13Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "We support a very unusual kind of components that look like functional components but return an *instance*.\r\n\r\n```js\r\nfunction Hello(props) {\r\n  return {\r\n    componentDidMount() {\r\n      alert('wow')\r\n    }\r\n    render() {\r\n      return <div>Hi, {this.props.name}</div>\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nNote these are *not* functional components. They're pretty exotic and don't offer any practical benefits over classes. At the time they were added (I think 0.14?) it was because we thought other type systems might want to compile to a format like this instead of ES classes-like output. But that didn't happen.\r\n\r\nThere's some complexity associated with continuing to support this. Since this is more confusing than useful, I think we should deprecate them in 16.x and remove in 17.x."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13559",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13559/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13559/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13559/events",
            "html_url": "https://github.com/facebook/react/issues/13559",
            "id": 357001465,
            "node_id": "MDU6SXNzdWUzNTcwMDE0NjU=",
            "number": 13559,
            "title": "\"scheduler\" package umbrella",
            "user": {
              "login": "bvaughn",
              "id": 29597,
              "node_id": "MDQ6VXNlcjI5NTk3",
              "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/bvaughn",
              "html_url": "https://github.com/bvaughn",
              "followers_url": "https://api.github.com/users/bvaughn/followers",
              "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
              "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
              "organizations_url": "https://api.github.com/users/bvaughn/orgs",
              "repos_url": "https://api.github.com/users/bvaughn/repos",
              "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
              "received_events_url": "https://api.github.com/users/bvaughn/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
              "login": "bvaughn",
              "id": 29597,
              "node_id": "MDQ6VXNlcjI5NTk3",
              "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/bvaughn",
              "html_url": "https://github.com/bvaughn",
              "followers_url": "https://api.github.com/users/bvaughn/followers",
              "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
              "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
              "organizations_url": "https://api.github.com/users/bvaughn/orgs",
              "repos_url": "https://api.github.com/users/bvaughn/repos",
              "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
              "received_events_url": "https://api.github.com/users/bvaughn/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "bvaughn",
                "id": 29597,
                "node_id": "MDQ6VXNlcjI5NTk3",
                "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bvaughn",
                "html_url": "https://github.com/bvaughn",
                "followers_url": "https://api.github.com/users/bvaughn/followers",
                "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
                "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
                "organizations_url": "https://api.github.com/users/bvaughn/orgs",
                "repos_url": "https://api.github.com/users/bvaughn/repos",
                "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bvaughn/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": null,
            "comments": 4,
            "created_at": "2018-09-04T22:38:53Z",
            "updated_at": "2020-01-08T19:16:13Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "### Short term\r\n- [x] #13561: Replace the [`__getInteractionsRef` and `__getSubscriberRef` methods](https://github.com/facebook/react/blob/fb88fd9d8c9f72b8e2e7e1ae89652d2a6a707562/packages/schedule/src/Tracking.js#L84-L90) with direct ~~mutable~~ exports  (`__interactions` and `__subscriber`)  and [update the `ScheduleTracking` UMD fork](https://github.com/facebook/react/blob/master/packages/shared/forks/ScheduleTracking.umd.js).\r\n- [x] #13561: Remove `__getInteractionsRef` and `__getSubscriberRef` from the `schedule/tracking` UMD [dev](https://github.com/facebook/react/blob/master/packages/schedule/npm/umd/schedule-tracking.development.js) and [prod](https://github.com/facebook/react/blob/master/packages/schedule/npm/umd/schedule-tracking.production.min.js) bundles since it's not part of the public API.\r\n- [x] Fix interaction-tracking reference count bug (#13574)\r\n- [ ] Split subscriptions entry point apart from tracking (e.g. break `scheduler/tracking` into `scheduler/tracking` and `scheduler/subscriptions`)\r\n\r\n### Long term\r\n- [ ] Move `scheduler` to is own git repo (maybe even its own org) prior to a 1.0 release.\r\n- [ ] Enable it to be used without a build step by replacing the dev/prod check with a single export.\r\n- [ ] Add an ES module entry point as well as the CJS and UMD entry points"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13525",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13525/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13525/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13525/events",
            "html_url": "https://github.com/facebook/react/issues/13525",
            "id": 356103592,
            "node_id": "MDU6SXNzdWUzNTYxMDM1OTI=",
            "number": 13525,
            "title": "React Fire: Modernizing React DOM",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 270986513,
                "node_id": "MDU6TGFiZWwyNzA5ODY1MTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 223,
            "created_at": "2018-08-31T19:45:53Z",
            "updated_at": "2020-01-20T09:23:17Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "\r\n-------------\r\n\r\n**For latest status, see an update from June 5th, 2019: https://github.com/facebook/react/issues/13525#issuecomment-499196939**\r\n\r\n-------------\r\n\r\nThis year, the React team has mostly been focused on [fundamental improvements to React](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html).\r\n\r\nAs this work is getting closer to completion, we're starting to think of what the next major releases of React DOM should look like. There are quite a few [known problems](https://github.com/facebook/react/issues?q=is%3Aopen+is%3Aissue+label%3A%22Type%3A+Bug%22+label%3A%22Component%3A+DOM%22), and some of them are hard or impossible to fix without bigger internal changes.\r\n\r\nWe want to undo past mistakes that caused countless follow-up fixes and created much technical debt. We also want to remove some of the abstraction in the event system which has been virtually untouched since the first days of React, and is a source of much complexity and bundle size.\r\n\r\nWe're calling this effort \"React Fire\".\r\n\r\n### 🔥 React Fire \r\n\r\n**React Fire** is an effort to modernize React DOM. Our goal is to make React better aligned with how the DOM works, revisit some controversial past decisions that led to problems, and make React smaller and faster.\r\n\r\nWe want to ship this set of changes in a future React major release because some of them will unfortunately be breaking. Nevertheless, we think they're worth it. And we have more than 50 thousands components at Facebook to keep us honest about our migration strategy. We can't afford to rewrite product code except a few targeted fixes or automated codemods. \r\n\r\n### Strategy\r\n\r\nThere are a few different things that make up our current plan. We might add or remove something but here's the thinking so far:\r\n\r\n* **Stop reflecting input values in the `value` attribute (https://github.com/facebook/react/issues/11896).** This was originally added in React 15.2.0 via https://github.com/facebook/react/pull/6406. It was very commonly requested because people's conceptual model of the DOM is that the `value` they see in the DOM inspector should match the `value` JSX attribute. But that's not how the DOM works. When you type into a field, the browser doesn't update the `value` attribute. React shouldn't do it either. It turned out that this change, while probably helpful for some code relying on CSS selectors, caused a cascade of bugs — some of them still unfixed to this day. Some of the fallout from this change includes: https://github.com/facebook/react/issues/7179, https://github.com/facebook/react/issues/8395, https://github.com/facebook/react/issues/7328, https://github.com/facebook/react/issues/7233, https://github.com/facebook/react/issues/11881, https://github.com/facebook/react/issues/7253, https://github.com/facebook/react/pull/9584, https://github.com/facebook/react/pull/9806, https://github.com/facebook/react/pull/9714, https://github.com/facebook/react/pull/11534, https://github.com/facebook/react/pull/11746, https://github.com/facebook/react/pull/12925. At this point it's clearly not worth it to keep fighting the browser, and we should revert it. The positive part of this journey is that thanks to tireless work from our DOM contributors (@nhunzaker, @aweary, @jquense, and @philipp-spiess) we now have detailed DOM test fixtures that will help us avoid regressions.\r\n\r\n* **Attach events at the React root rather than the document (https://github.com/facebook/react/issues/2043).** Attaching event handlers to the document becomes an issue when embedding React apps into larger systems. The Atom editor was one of the first cases that bumped into this. Any big website also eventually develops very complex edge cases related to `stopPropagation` interacting with non-React code or across React roots (https://github.com/facebook/react/issues/8693, https://github.com/facebook/react/pull/8117, https://github.com/facebook/react/issues/12518). We will also want to attach events eagerly to every root so that we can do less runtime checks during updates.\r\n\r\n* **Migrate from `onChange` to `onInput` and don’t polyfill it for uncontrolled components (https://github.com/facebook/react/issues/9657).** See the linked issue for a detailed plan. It has been confusing that React uses a different event name for what's known as `input` event in the DOM. While we generally avoid making big changes like this without significant benefit, in this case we *also* want to change the behavior to remove some complexity that's only necessary for edge cases like mutating controlled inputs. So it makes sense to do these two changes together, and use that as an opportunity to make `onInput` and `onChange` work exactly how the DOM events do for uncontrolled components.\r\n\r\n* **Drastically simplify the event system (https://github.com/facebook/react/issues/4751).** The current event system has barely changed since its initial implementation in 2013. It is reused across React DOM and React Native, so it is unnecessarily abstract. Many of the polyfills it provides are unnecessary for modern browsers, and some of them create more issues than they solve. It also accounts for a significant portion of the React DOM bundle size. We don't have a very specific plan here, but we will probably fork the event system completely, and then see how minimal we can make it if we stick closer to what the DOM gives us. It's plausible that we'll get rid of synthetic events altogether. We should stop bubbling events like media events which don’t bubble in the DOM and don’t have a good reason to bubble. We want to retain some React-specific capabilities like bubbling through portals, but we will attempt to do this via simpler means (e.g. re-dispatching the event). Passive events will likely be a part of this. \r\n\r\n* **`className` → `class` (https://github.com/facebook/react/issues/4331, see also https://github.com/facebook/react/issues/13525#issuecomment-417818906 below).** This has been proposed countless times. We're already allowing passing `class` down to the DOM node in React 16. The confusion this is creating is not worth the syntax limitations it's trying to protect against. We wouldn't do this change by itself, but combined with everything else above it makes sense. Note we can’t just allow both without warnings because this makes it very difficult for a component ecosystem to handle. Each component would need to learn to handle both correctly, and there is a risk of them conflicting. Since many components process `className` (for example by appending to it), it’s too error-prone.\r\n\r\n### Tradeoffs\r\n\r\n* We can't make some of these changes if we aim to keep exposing the current private React event system APIs for projects like React Native Web. However, React Native Web will need a different strategy regardless because [React Fabric](http://facebook.github.io/react-native/blog/2018/06/14/state-of-react-native-2018) will likely move more of the responder system to the native side.\r\n\r\n* We may need to drop compatibility with some older browsers, and/or require more standalone polyfills for them. We still care about supporting IE11 but it's possible that we will not attempt to smooth over some of the existing browser differences — which is the stance taken by many modern UI libraries.\r\n\r\n### Rollout Plan\r\n\r\nAt this stage, the project is very exploratory. We don't know for sure if all of the above things will pan out. Because the changes are significant, we will need to dogfood them at Facebook, and try them out in a gradual fashion. This means we'll introduce a feature flag, fork some of the code, and keep it enabled at Facebook for a small group of people. The open source 16.x releases will keep the old behavior, but on master you will be able to run it with the feature flag on.\r\n\r\nI plan to work on the project myself for the most part, but I would very much appreciate more discussion and contributions from @nhunzaker, @aweary, @jquense, and @philipp-spiess who have been stellar collaborators and have largely steered React DOM while we were working on Fiber. If there's some area you're particularly interested in, please let me know and we'll work it out.\r\n\r\nThere are likely things that I missed in this plan. I'm very open to feedback, and I hope this writeup is helpful."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13518",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13518/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13518/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13518/events",
            "html_url": "https://github.com/facebook/react/issues/13518",
            "id": 355723816,
            "node_id": "MDU6SXNzdWUzNTU3MjM4MTY=",
            "number": 13518,
            "title": "Add <progress> to DOM fixtures",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 2,
            "created_at": "2018-08-30T19:32:09Z",
            "updated_at": "2020-01-08T19:16:12Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Maybe I missed it but I don't see this case in DOM fixtures:\r\n\r\nhttps://github.com/facebook/react/pull/7359#discussion_r77518170\r\n\r\nSeems important because it's easy to accidentally gloss over it if we stop syncing attributes and have to edit a bunch of jsdom tests."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13508",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13508/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13508/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13508/events",
            "html_url": "https://github.com/facebook/react/issues/13508",
            "id": 355198151,
            "node_id": "MDU6SXNzdWUzNTUxOTgxNTE=",
            "number": 13508,
            "title": "Relax ToString consistency guarantees",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 40929153,
                "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-08-29T14:50:15Z",
            "updated_at": "2020-01-08T19:16:11Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "We recently chatted about https://github.com/facebook/react/pull/13367 and related work (e.g. https://github.com/facebook/react/pull/13394) with @sebmarkbage, and he raised a good point.\r\n\r\nIt seems like overall treating them consistently is adding significant overhead in the implementation readability. And there’s undoubtedly runtime overhead to it too. There are two separate issues here:\r\n\r\n* **warning** for invalid values\r\n* ensuring that the output for invalid values is **consistent** (e.g. functions are always skipped)\r\n\r\nThe conclusion we came to is that we should keep **warning** for bad values, but **as long as we warn, consistency is not necessary**. It's fine if we sometimes stringify a function, and sometimes skip it, as long as we always warn for those cases\r\n\r\n**Our guiding principle for invalid inputs should be that we handle them with the least amount of overhead** (both at runtime, and in terms of code size), not that they’re always handled the same way.\r\n\r\nOne exception to this is probably Symbols because they throw when stringified. So it seems like skipping them is actually desirable — unless we're okay with errors."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13499",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13499/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13499/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13499/events",
            "html_url": "https://github.com/facebook/react/issues/13499",
            "id": 354697758,
            "node_id": "MDU6SXNzdWUzNTQ2OTc3NTg=",
            "number": 13499,
            "title": "Number input breaks when letter \"e\" is entered",
            "user": {
              "login": "vahnag",
              "id": 5208783,
              "node_id": "MDQ6VXNlcjUyMDg3ODM=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/5208783?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/vahnag",
              "html_url": "https://github.com/vahnag",
              "followers_url": "https://api.github.com/users/vahnag/followers",
              "following_url": "https://api.github.com/users/vahnag/following{/other_user}",
              "gists_url": "https://api.github.com/users/vahnag/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/vahnag/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/vahnag/subscriptions",
              "organizations_url": "https://api.github.com/users/vahnag/orgs",
              "repos_url": "https://api.github.com/users/vahnag/repos",
              "events_url": "https://api.github.com/users/vahnag/events{/privacy}",
              "received_events_url": "https://api.github.com/users/vahnag/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710722093,
                "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 14,
            "created_at": "2018-08-28T11:58:08Z",
            "updated_at": "2020-01-10T16:26:31Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\ninput[type=number] only allows entering numbers and letter \"e\" in the input. Native \"input\" input event is called for both numbers and the letter \"e\". With React the `onChange` event is only called for numbers. There's no way to catch \"e\" with `onChange`.\r\n\r\nThe \"e\" is even being filled when the input is controlled. The only way I can think of to work around this bug right now is to use `onKeyDown` and `preventDefault` when \"e\" or \"E\" is pressed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/ov3ql3ljwz\r\n\r\n**What is the expected behavior?**\r\nIt should pass anything that is being filled into the input to the onChange handler and should not break controlled component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.4.2\r\nChrome: 68.0.3440.106\r\nWindows 10"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13483",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13483/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13483/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13483/events",
            "html_url": "https://github.com/facebook/react/pull/13483",
            "id": 354035894,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjEwOTE2NjQ4",
            "number": 13483,
            "title": "Add a failing test for unnecessary commits",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-08-25T19:02:14Z",
            "updated_at": "2020-01-23T22:13:20Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/13483",
              "html_url": "https://github.com/facebook/react/pull/13483",
              "diff_url": "https://github.com/facebook/react/pull/13483.diff",
              "patch_url": "https://github.com/facebook/react/pull/13483.patch"
            },
            "body": "I think this demonstrates what I've been running into with my time slicing demo. Not sure though — maybe it's a different problem. If there is a good explanation for this behavior I can dig further.\r\n\r\nThe symptom I was seeing is that if I flood the scheduler with enough low pri work, it would make a synchronous long chain of commits during expiration — sometimes locking up the thread for 20 seconds or so. I couldn't find a way to reproduce more than one extra commit in this test, but maybe this is enough to demonstrate the issue?"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13450",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13450/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13450/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13450/events",
            "html_url": "https://github.com/facebook/react/issues/13450",
            "id": 352431414,
            "node_id": "MDU6SXNzdWUzNTI0MzE0MTQ=",
            "number": 13450,
            "title": "UMD builds are not enabled on UNPKG",
            "user": {
              "login": "nickmccurdy",
              "id": 927220,
              "node_id": "MDQ6VXNlcjkyNzIyMA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/927220?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/nickmccurdy",
              "html_url": "https://github.com/nickmccurdy",
              "followers_url": "https://api.github.com/users/nickmccurdy/followers",
              "following_url": "https://api.github.com/users/nickmccurdy/following{/other_user}",
              "gists_url": "https://api.github.com/users/nickmccurdy/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/nickmccurdy/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/nickmccurdy/subscriptions",
              "organizations_url": "https://api.github.com/users/nickmccurdy/orgs",
              "repos_url": "https://api.github.com/users/nickmccurdy/repos",
              "events_url": "https://api.github.com/users/nickmccurdy/events{/privacy}",
              "received_events_url": "https://api.github.com/users/nickmccurdy/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 11,
            "created_at": "2018-08-21T08:14:19Z",
            "updated_at": "2018-11-13T14:11:32Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Visiting https://unpkg.com/react displays the CJS build (https://unpkg.com/react@16.4.2/index.js) when the UMD build (https://unpkg.com/react@16.4.2/umd/react.development.js) should be displayed instead. I also noticed this issue with react-dom, so I assume all packages need to be fixed.\r\n\r\nPlease refer to the usage instructions at the bottom of https://unpkg.com/."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13424",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13424/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13424/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13424/events",
            "html_url": "https://github.com/facebook/react/issues/13424",
            "id": 351662938,
            "node_id": "MDU6SXNzdWUzNTE2NjI5Mzg=",
            "number": 13424,
            "title": "onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 6,
            "created_at": "2018-08-17T16:41:41Z",
            "updated_at": "2020-01-08T19:16:11Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Extracting from https://github.com/facebook/react/issues/12643.\r\n\r\nThis issue has always been in React. I can reproduce it up to React 0.11. However **it's probably extremely rare in practice and isn't worth fixing**. I'm just filing this for posterity.\r\n\r\nHere is a minimal example.\r\n\r\n```js\r\nclass App extends React.Component {\r\n  state = {value: ''}\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\r\n      \"input\",\r\n      () => {\r\n        // COMMENT OUT THIS LINE TO FIX:\r\n        this.setState({});\r\n      },\r\n      true\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"container\"));\r\n```\r\n\r\nTyping doesn't work — unless I comment out that `setState` call in the capture phase listener.\r\n\r\nSay the input is empty and we're typing `a`.\r\n\r\nWhat happens here is that `setState({})` in the capture phase non-React listener runs first. When re-rendering due to that first empty `setState({})`, input props still contain the old value (`\"\"`) while the DOM node's value is new (`\"a\"`). They're not equal, so we'll set the DOM node value to `\"\"` (according to the props) and remember `\"\"` as the current value.\r\n\r\n<img width=\"549\" alt=\"screen shot 2018-08-17 at 1 08 42 am\" src=\"https://user-images.githubusercontent.com/810438/44241204-4b0e0880-a1ba-11e8-847d-bf9ca43eb954.png\">\r\n\r\nThen, `ChangeEventPlugin` tries to decide whether to emit a change event. It asks the tracker whether the value has changed. The tracker compares the presumably \"new\" `node.value` (it's `\"\"` — we've just set it earlier!) with the `lastValue` it has stored (also `\"\"` — and also just updated). No changes!\r\n\r\n<img width=\"505\" alt=\"screen shot 2018-08-17 at 1 10 59 am\" src=\"https://user-images.githubusercontent.com/810438/44241293-e0110180-a1ba-11e8-9c5a-b0d808f745cd.png\">\r\n\r\n\r\nOur `\"a\"` update is lost. We never get the change event, and never actually get a chance to set the correct state."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13413",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13413/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13413/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13413/events",
            "html_url": "https://github.com/facebook/react/issues/13413",
            "id": 351045644,
            "node_id": "MDU6SXNzdWUzNTEwNDU2NDQ=",
            "number": 13413,
            "title": "Umbrella: Chopping Block",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 3,
            "created_at": "2018-08-16T03:50:15Z",
            "updated_at": "2020-01-08T19:16:11Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "I wanted to create a list of things whose existence makes React bigger and more complicated than necessary. This makes them more likely to need to be deprecated and actually removed in a future version. No clue of when this will happen and what the recommended upgrade path will be so don't take this issue as advice that you should move away from them until there's clear upgrade advice. You might make it worse by doing so.\r\n\r\n(This has some overlap with https://github.com/facebook/react/issues/9475 but those seem more longer term.)\r\n\r\n- [ ] __Unsafe Life Cycles without UNSAFE prefix__ - We'll keep the ones prefixed UNSAFE indefinitely but the original ones will likely be deprecated and removed.\r\n\r\n- [ ] __Legacy context__ - `.contextTypes`, `.childContextTypes`, `getChildContext` - The old context is full of edge cases for when it is accidentally supposed to work and the way it is designed requires all React code to become slower just to support this feature.\r\n\r\n- [ ] __String refs__ - This requires current owner to be exposed at runtime. While it is likely that some form of owner will remain, this particular semantics is likely not what we want out of it. So rather than having two owners, we should just remove this feature. It also requires an extra field on every ReactElement which is otherwise not needed.\r\n\r\n- [ ] __Module pattern components__ - This is a little used feature that lets you return a class instance from a regular function without extending `React.Component`. This is not that useful. In practice the ecosystem has moved around ES class like usage, and other language compiling to JS tries to comply with that model as well. The existence of this feature means that we don't know that something is a functional component by just testing if it's a function that is not extending `React.Component`. Instead we have to do some extra feature testing for every functional component there is. It also prevents us from passing the ref as the second argument by default for all functional components without using `forwardRef` since that wouldn't be valid for class components.\r\n\r\n- [ ] __Uncontrolled onInput__ - This is described in #9657. Because we support uncontrolled polyfilling of this event, we have to do pretty invasive operations to the DOM like attaching setters. This is all in support of imperative usage of the DOM which should be out-of-scope for React.\r\n\r\n- [ ] __setState in componentDidCatch__ - Currently we support error recovery in `componentDidCatch` but once we support `getDerivedStateFromCatch` we might want to consider deprecating the old mechanism which automatically first commits null. The semantics of this are a bit weird and requires complicated code that we likely get wrong sometimes.\r\n\r\n- [ ] __Context Object As Consumer__ - Right now it is possible to use the Context object as a Consumer render prop. That's an artifact of reusing the same object allocation but not documented. We'll want to deprecate that and make it the Provider instead.\r\n\r\n- [ ] __No GC of not unmounted roots__ - This likely won't come with a warning. We'll just do it. It's not a breaking behavior other than memory usage. You have to call `unmountComponentAtNode` or that component won't be cleaned up. Almost always it is not cleaned up anyway since if you have at least one subscription that still holds onto it. Arguably this is not even a breaking change. #13293\r\n\r\n- [ ] __unstable_renderSubtreeIntoContainer__ - This is replaced by Portals. It is already problematic since it can't be used in life-cycles but it also add lots of special case code to transfer the context. Since legacy context itself likely will be deprecated, this serves no purposes.\r\n\r\n- [x] __ReactDOM.render with hydration__ - This has already been deprecated. This requires extra code and requires us to generate an extra attribute in the HTML to auto-select hydration. People should be using ReactDOM.hydrate instead. We just need to remove the old behavior and the attribute in ReactDOMServer.\r\n\r\n- [ ] __Return value of `ReactDOM.render()`__ - We can't synchronously return an instance when inside a lifecycle/callback/effect, or in concurrent mode. Should use a ref instead.\r\n\r\n- [ ] __All of `ReactDOM.render()`__ - Switch everyone over to `createRoot`, with an option to make `createRoot` sync."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13407",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13407/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13407/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13407/events",
            "html_url": "https://github.com/facebook/react/pull/13407",
            "id": 350842651,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4NTg3OTQ3",
            "number": 13407,
            "title": "Deprecate undocumented ReactTestUtils.SimulateNative API",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 2,
            "created_at": "2018-08-15T14:58:58Z",
            "updated_at": "2020-01-23T22:11:45Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/13407",
              "html_url": "https://github.com/facebook/react/pull/13407",
              "diff_url": "https://github.com/facebook/react/pull/13407.diff",
              "patch_url": "https://github.com/facebook/react/pull/13407.patch"
            },
            "body": "Fixes https://github.com/facebook/react/issues/11656.\r\n\r\nThis API is counter-intuitive because it only simulates the *React dispatch* of a native event, as opposed to simulating what the *browser* would do on an event. I've seen quite a few people confused by this. It's also completely undocumented.\r\n\r\nI think it's a liability to keep this around."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13400",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13400/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13400/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13400/events",
            "html_url": "https://github.com/facebook/react/issues/13400",
            "id": 350627761,
            "node_id": "MDU6SXNzdWUzNTA2Mjc3NjE=",
            "number": 13400,
            "title": "Boolean DOM properties coerce empty string to false, contrary to HTML standard",
            "user": {
              "login": "motiz88",
              "id": 2246565,
              "node_id": "MDQ6VXNlcjIyNDY1NjU=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/2246565?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/motiz88",
              "html_url": "https://github.com/motiz88",
              "followers_url": "https://api.github.com/users/motiz88/followers",
              "following_url": "https://api.github.com/users/motiz88/following{/other_user}",
              "gists_url": "https://api.github.com/users/motiz88/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/motiz88/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/motiz88/subscriptions",
              "organizations_url": "https://api.github.com/users/motiz88/orgs",
              "repos_url": "https://api.github.com/users/motiz88/repos",
              "events_url": "https://api.github.com/users/motiz88/events{/privacy}",
              "received_events_url": "https://api.github.com/users/motiz88/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 3,
            "created_at": "2018-08-14T23:04:45Z",
            "updated_at": "2018-08-15T00:22:01Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nThis is in kind of the same space as https://github.com/facebook/react/pull/13372 and is an offshoot of my attempt to better [model React DOM props in Flow](https://github.com/facebook/flow/pull/6727).\r\n\r\n**tl;dr:** Should React warn when the value `\"\"` is passed into a known boolean DOM prop?\r\n\r\n---\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDepends on interpretation 😅  This is possibly a bug, definitely an inconsistency worth mitigating IMHO.\r\n\r\n**What is the current behavior?**\r\n\r\nReact normalises values supplied to [known DOM boolean props](https://github.com/facebook/react/blob/69e2a0d732e1ca74f6dc5df9d0ddd0bf24373965/packages/react-dom/src/shared/DOMProperty.js#L278-L331) (e.g. `readOnly`) such that passing the empty string `\"\"` (being falsy in JavaScript) results in the corresponding attribute being omitted from the HTML output. However, in [HTML](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attribute), the empty string is a truthy value in this context; it's one of the values that the standard specifically allows in boolean attributes.\r\n\r\nThe above is a potential source of confusion in itself, but React 16's handling of unknown attributes gives rise to the following hypothetical scenario: a new DOM boolean attribute `foobar` is introduced, some people write JSX code that uses it as `foobar=\"\"` (passed through to HTML, truthy), and later React adds `foobar` to its internal whitelist in a minor/patch version and starts processing it as a boolean (JS falsy, omitted from HTML); this would _technically_ be a breaking change for those people.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/y0pmz9149x\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is definitely a clash of expectations here at the interface of JS and HTML.\r\n\r\n1. Coming from JS, `\"\"` is falsy and treating it as such in a \"boolean\" prop is fine; from this perspective, the current behaviour is justifiable.\r\n2. Coming from HTML, it might not be obvious that React is doing this \"extra\" processing and deviating from what's clearly stated in the HTML spec; from this perspective, the current behaviour is surprising.\r\n\r\nThere probably isn't justification for changing React's actual handling of `\"\"` (not least for fear of breaking code that relies on this long-standing behaviour, see version information below), but perhaps a warning about the ambiguity is warranted, a la #13372?\r\n\r\nNote that a warning won't fully mitigate the worst-case scenario I mentioned above (since we can't warn about a prop that we don't _know_ is a DOM boolean), but at least it would give some signal _after_ the React version update that the code might not be doing the expected thing anymore.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions of React as far back as 0.14 (and probably way older) process whitelisted boolean DOM props the same way."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13342",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13342/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13342/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13342/events",
            "html_url": "https://github.com/facebook/react/issues/13342",
            "id": 348420896,
            "node_id": "MDU6SXNzdWUzNDg0MjA4OTY=",
            "number": 13342,
            "title": "RFC: Omit end tags when possible in ReactDOMServerRenderer",
            "user": {
              "login": "tvler",
              "id": 4934193,
              "node_id": "MDQ6VXNlcjQ5MzQxOTM=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/4934193?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/tvler",
              "html_url": "https://github.com/tvler",
              "followers_url": "https://api.github.com/users/tvler/followers",
              "following_url": "https://api.github.com/users/tvler/following{/other_user}",
              "gists_url": "https://api.github.com/users/tvler/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/tvler/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/tvler/subscriptions",
              "organizations_url": "https://api.github.com/users/tvler/orgs",
              "repos_url": "https://api.github.com/users/tvler/repos",
              "events_url": "https://api.github.com/users/tvler/events{/privacy}",
              "received_events_url": "https://api.github.com/users/tvler/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710332294,
                "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 4,
            "created_at": "2018-08-07T17:41:53Z",
            "updated_at": "2018-10-05T20:56:08Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "# Background\r\n\r\nThere are a lot of instances defined in the HTML spec where end tags can be omitted while still maintaining valid markup.\r\n\r\nSome examples:\r\n\r\n> An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.\r\n\r\n> A p element’s end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hr, main, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element, or an autonomous custom element.\r\n\r\nYou can see all of them over at https://www.w3.org/TR/html5/syntax.html#optional-tags\r\n\r\nUtilizing these rules, I think it may be possible to reduce the amount of html needed to be initially downloaded by the user for serverside rendering.\r\n\r\nDepending on what's being rendered, there could be a significant decrease in html size. Here's an example I pulled from the W3C of a table element utilizing these rules. The difference is 464 bytes compared to 629 – about a **26% decrease** in size.\r\n\r\n```html\r\n<table>\r\n<caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)\r\n<colgroup><col><col><col>\r\n<thead>\r\n<tr>\r\n  <th>Function\r\n  <th>Control Unit\r\n  <th>Central Station\r\n<tbody>\r\n<tr>\r\n  <td>Headlights\r\n  <td>✔\r\n  <td>✔\r\n<tr>\r\n  <td>Interior Lights\r\n  <td>✔\r\n  <td>✔\r\n<tr>\r\n  <td>Electric locomotive operating sounds\r\n  <td>✔\r\n  <td>✔\r\n<tr>\r\n  <td>Engineer’s cab lighting\r\n  <td>\r\n  <td>✔\r\n<tr>\r\n  <td>Station Announcements - Swiss\r\n  <td>\r\n  <td>✔\r\n</table>\r\n```\r\n\r\n# Caveats\r\n\r\n- Even though these rules are in the spec, they still feel like quirks to me. There probably are some browser-to-browser differences in how these are handled.\r\n- Should this even be handled by React? I could see a babel plugin or something like that being a good fit for an optimization like this too.\r\n\r\n# Possible roadmap\r\n\r\n- Research what end tags would be stable to omit (https://www.w3.org/TR/html5/syntax.html#optional-tags)\r\n- Roll out this optimization for a subset of tags\r\n- Gauge real-world load time improvements and continue adding omission cases if everything is looking good"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13332",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13332/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13332/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13332/events",
            "html_url": "https://github.com/facebook/react/issues/13332",
            "id": 348051866,
            "node_id": "MDU6SXNzdWUzNDgwNTE4NjY=",
            "number": 13332,
            "title": "Support cross-renderer portals",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 270986513,
                "node_id": "MDU6TGFiZWwyNzA5ODY1MTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 2,
            "created_at": "2018-08-06T19:26:11Z",
            "updated_at": "2020-01-08T19:16:10Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Currently `createPortal` only works within the current renderer.\r\n\r\nThis means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.\r\n\r\nWith this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.\r\n\r\nAt the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like\r\n\r\n```js\r\n<div>\r\n  <Portal to={ReactART}>\r\n    <surface>\r\n      <rect />\r\n    </surface>\r\n  </Portal>\r\n</div>\r\n```\r\n\r\nBut it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?\r\n\r\nWe'll want to figure something out eventually. For now I'm filing this for future reference."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13321",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13321/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13321/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13321/events",
            "html_url": "https://github.com/facebook/react/pull/13321",
            "id": 347509220,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjA2MTE3NDg4",
            "number": 13321,
            "title": "Provide esm entry point for react-is",
            "user": {
              "login": "TrySound",
              "id": 5635476,
              "node_id": "MDQ6VXNlcjU2MzU0NzY=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/5635476?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/TrySound",
              "html_url": "https://github.com/TrySound",
              "followers_url": "https://api.github.com/users/TrySound/followers",
              "following_url": "https://api.github.com/users/TrySound/following{/other_user}",
              "gists_url": "https://api.github.com/users/TrySound/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/TrySound/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/TrySound/subscriptions",
              "organizations_url": "https://api.github.com/users/TrySound/orgs",
              "repos_url": "https://api.github.com/users/TrySound/repos",
              "events_url": "https://api.github.com/users/TrySound/events{/privacy}",
              "received_events_url": "https://api.github.com/users/TrySound/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": null,
            "comments": 29,
            "created_at": "2018-08-03T19:21:19Z",
            "updated_at": "2019-11-26T07:45:35Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/13321",
              "html_url": "https://github.com/facebook/react/pull/13321",
              "diff_url": "https://github.com/facebook/react/pull/13321.diff",
              "patch_url": "https://github.com/facebook/react/pull/13321.patch"
            },
            "body": "Refs\r\n  https://github.com/facebook/react/issues/13272#issuecomment-409939608\r\n  https://github.com/reactjs/rfcs/pull/38\r\n\r\nIn this PR I modified build script to generate two more bundles\r\n`react-is.development.mjs` and `react-is.production.min.mjs` and\r\nentry point `index.mjs` which reexports all named values depending on\r\nproduction/development environments like this\r\n\r\n```\r\nimport * as dev from './esm/development.mjs'\r\nimport * as prod from './esm/production.min.mjs'\r\n\r\nexport var name =\r\n  process.env.NODE_ENV !== 'production' ? dev.name : prod.name;\r\n```\r\n\r\nI replaced closure wrapper with vendor plugin which is able to process\r\nes modules by replacing them before and returning them after closure\r\nminification.\r\n\r\nTo prove treeshakability of dual entry point we can generate rollup\r\nbundle with `import {} from 'package'`. If nothing will left then\r\nuser bundler is able to eliminate unused code from dual entry point."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13306",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13306/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13306/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13306/events",
            "html_url": "https://github.com/facebook/react/issues/13306",
            "id": 346806017,
            "node_id": "MDU6SXNzdWUzNDY4MDYwMTc=",
            "number": 13306,
            "title": "[Umbrella] Releasing Time Slicing",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 8,
            "created_at": "2018-08-01T23:28:02Z",
            "updated_at": "2020-01-08T19:16:10Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Let's use this to track what's missing before Time Slicing is usable internally and in open source.\r\n**This list is probably very incomplete, feel free to add more.**\r\n\r\n## Initial release (MVP)\r\n\r\n### Core\r\n- [x] Decide on the recommended low/high pri split pattern\r\n- [x] Fix `unstable_deferredUpdates` not being respected in interactive event handlers (reproducible in the fixture) https://github.com/facebook/react/pull/13488\r\n- [x] Fix or provide a workaround for an issue with a chain of synchronous commits on expiration (reproducible in the fixture) https://github.com/facebook/react/pull/13483\r\n- [ ] Resuming\r\n- [ ] Off-screen `<div hidden>` API\r\n\r\n### Scheduler\r\n\r\n- [ ] Decide on naming (@flarnie, React Core team)\r\n- [ ] Adding support for priority (@flarnie)\r\n    * May involve bikeshedding, iteration\r\n    * Will require changes to React Fiber Scheduler\r\n    - [ ] Add a fixture showing using JS Scheduler with React and also external JS\r\n- [ ] Better handle when tab is backgrounded (@flarnie)\r\n- [ ] Improvements to polyfill for rAF\r\n- [ ] Integrate and dogfood with internal FB products - see internal task T32773869 (@flarnie)\r\n- [ ] Create final API which is not renderer-dependent \r\n- [ ] Make `react-dom` depend on it, and publish it in open source (@flarnie, others internally)\r\n\r\n\r\n\r\n---\r\n\r\nRelated: Suspense Umbrella (https://github.com/facebook/react/issues/13206)"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13272",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13272/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13272/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13272/events",
            "html_url": "https://github.com/facebook/react/issues/13272",
            "id": 344676260,
            "node_id": "MDU6SXNzdWUzNDQ2NzYyNjA=",
            "number": 13272,
            "title": "Add ESM build to react-is",
            "user": {
              "login": "pgarciacamou",
              "id": 8354571,
              "node_id": "MDQ6VXNlcjgzNTQ1NzE=",
              "avatar_url": "https://avatars3.githubusercontent.com/u/8354571?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/pgarciacamou",
              "html_url": "https://github.com/pgarciacamou",
              "followers_url": "https://api.github.com/users/pgarciacamou/followers",
              "following_url": "https://api.github.com/users/pgarciacamou/following{/other_user}",
              "gists_url": "https://api.github.com/users/pgarciacamou/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/pgarciacamou/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/pgarciacamou/subscriptions",
              "organizations_url": "https://api.github.com/users/pgarciacamou/orgs",
              "repos_url": "https://api.github.com/users/pgarciacamou/repos",
              "events_url": "https://api.github.com/users/pgarciacamou/events{/privacy}",
              "received_events_url": "https://api.github.com/users/pgarciacamou/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2018-07-26T02:55:29Z",
            "updated_at": "2020-01-10T12:38:11Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nUnable to import individual modules from the package.\r\n\r\n```jsx\r\nimport * as ReactIs from \"react-is\";\r\nReactIs.isValidElementType(<div />); // true\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n```jsx\r\nimport { isValidElementType } from \"react-is\";\r\nisValidElementType(<div />); // true\r\n```\r\n\r\n**Context**\r\n\r\nThis issue arose when trying to to make `react-redux` work with `React.forwardRef` ([see this PR](https://github.com/reduxjs/react-redux/pull/971)), but evidently, `react-is` doesn't allow import/export ESM to enable tree shaking capabilities in `react-redux` (that is my understanding).\r\n\r\nThis issue is following [this comment](https://github.com/reduxjs/react-redux/issues/914#issuecomment-377406113).\r\n\r\nI tried solving this (and totally failed) in https://github.com/facebook/react/pull/13250 before I realised anything about ESM. But this is now over my head, so I'm creating an issue now and see how that follows."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13267",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13267/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13267/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13267/events",
            "html_url": "https://github.com/facebook/react/pull/13267",
            "id": 344382426,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzNzg5MDQ1",
            "number": 13267,
            "title": "[react-dom] Allow additional text inside of a comment node container",
            "user": {
              "login": "r0b1n",
              "id": 548774,
              "node_id": "MDQ6VXNlcjU0ODc3NA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/548774?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/r0b1n",
              "html_url": "https://github.com/r0b1n",
              "followers_url": "https://api.github.com/users/r0b1n/followers",
              "following_url": "https://api.github.com/users/r0b1n/following{/other_user}",
              "gists_url": "https://api.github.com/users/r0b1n/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/r0b1n/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/r0b1n/subscriptions",
              "organizations_url": "https://api.github.com/users/r0b1n/orgs",
              "repos_url": "https://api.github.com/users/r0b1n/repos",
              "events_url": "https://api.github.com/users/r0b1n/events{/privacy}",
              "received_events_url": "https://api.github.com/users/r0b1n/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 6,
            "created_at": "2018-07-25T10:17:50Z",
            "updated_at": "2020-01-10T18:15:33Z",
            "closed_at": null,
            "author_association": "NONE",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/13267",
              "html_url": "https://github.com/facebook/react/pull/13267",
              "diff_url": "https://github.com/facebook/react/pull/13267.diff",
              "patch_url": "https://github.com/facebook/react/pull/13267.patch"
            },
            "body": "### Problem\r\nWhile using `ReactDOM.render` with a comment node as a container it is not possible to have the comment node different then `<!-- react-mount-point-unstable -->`. This makes it hard to identify multiple comment node containers on the page.\r\n\r\n### Solution\r\nMake the container check more relaxed, allow an arbitrary string in a comment node container but still require the string to contain ` react-mount-point-unstable ` marker text inside."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13224",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13224/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13224/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13224/events",
            "html_url": "https://github.com/facebook/react/issues/13224",
            "id": 342104031,
            "node_id": "MDU6SXNzdWUzNDIxMDQwMzE=",
            "number": 13224,
            "title": "Seal or Prevent Extensions on Pooled Events",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 1,
            "created_at": "2018-07-17T21:57:39Z",
            "updated_at": "2020-01-08T19:16:45Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "<s>I'm going to revert</s> I have reverted https://github.com/facebook/react/pull/5947 because it's [very confusing](https://mobile.twitter.com/ReactStudent/status/1018749513572368384) to see Proxies in the console. The warning is just not worth the debugging impediment.\r\n\r\nIn the future, we should consider sealing or preventing extensions to pooled events (if we're not getting rid of pooling altogether, that is). But that would be a breaking change."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13211",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13211/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13211/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13211/events",
            "html_url": "https://github.com/facebook/react/pull/13211",
            "id": 341326780,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjAxNTAxNzY3",
            "number": 13211,
            "title": "Allow third party react-native components to render strings",
            "user": {
              "login": "iyegoroff",
              "id": 4447438,
              "node_id": "MDQ6VXNlcjQ0NDc0Mzg=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/4447438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/iyegoroff",
              "html_url": "https://github.com/iyegoroff",
              "followers_url": "https://api.github.com/users/iyegoroff/followers",
              "following_url": "https://api.github.com/users/iyegoroff/following{/other_user}",
              "gists_url": "https://api.github.com/users/iyegoroff/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/iyegoroff/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/iyegoroff/subscriptions",
              "organizations_url": "https://api.github.com/users/iyegoroff/orgs",
              "repos_url": "https://api.github.com/users/iyegoroff/repos",
              "events_url": "https://api.github.com/users/iyegoroff/events{/privacy}",
              "received_events_url": "https://api.github.com/users/iyegoroff/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 13,
            "created_at": "2018-07-15T14:53:06Z",
            "updated_at": "2020-01-10T22:07:16Z",
            "closed_at": null,
            "author_association": "NONE",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/13211",
              "html_url": "https://github.com/facebook/react/pull/13211",
              "diff_url": "https://github.com/facebook/react/pull/13211.diff",
              "patch_url": "https://github.com/facebook/react/pull/13211.patch"
            },
            "body": "After introducing new invariant checks in react-native 0.56.0 release, third party native components that can render strings became broken - e.g. https://github.com/iyegoroff/react-native-text-gradient/issues/11\r\n\r\nThis PR allows third party components to render strings if they have static property `canRenderString` set to `true`.\r\n\r\nUsage:\r\n\r\n```js\r\nconst ICanRenderString = createReactClass({\r\n  statics: {\r\n    canRenderString: true\r\n  },\r\n  ...\r\n};\r\n\r\nclass ICanRenderStringToo extends React.Component {\r\n  static canRenderString = true;\r\n}\r\n```\r\n\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13206",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13206/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13206/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13206/events",
            "html_url": "https://github.com/facebook/react/issues/13206",
            "id": 341142665,
            "node_id": "MDU6SXNzdWUzNDExNDI2NjU=",
            "number": 13206,
            "title": "[Umbrella] Releasing Suspense",
            "user": {
              "login": "acdlite",
              "id": 3624098,
              "node_id": "MDQ6VXNlcjM2MjQwOTg=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/acdlite",
              "html_url": "https://github.com/acdlite",
              "followers_url": "https://api.github.com/users/acdlite/followers",
              "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
              "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
              "organizations_url": "https://api.github.com/users/acdlite/orgs",
              "repos_url": "https://api.github.com/users/acdlite/repos",
              "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
              "received_events_url": "https://api.github.com/users/acdlite/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 64,
            "created_at": "2018-07-13T20:01:03Z",
            "updated_at": "2020-01-08T19:16:44Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Let's use this issue to track the remaining tasks for releasing Suspense to open source.\r\n\r\n## Initial release (MVP)\r\n\r\n### Core\r\n- [x] API to read context from within any render phase function (@acdlite) [#13139]\r\n- [x] Hide timed-out content instead of deleting it  (@acdlite) [#13120]\r\n- [ ] Automatic injection of context providers per React root (@acdlite) [#13293]\r\n- [ ] Remove `unstable_` prefix from `AsyncMode` (maybe?)\r\n- [ ] Support for synchronous thenables, and for promises that resolve before the render phase is complete.\r\n  - [ ] Confirm that a synchronous thenable that throws an error is handled correctly\r\n- [ ] Confirm it works with `<div hidden>` [#13089]\r\n- [ ] Why does clicking on several detail links in the fixture one by one eventually causes a big placeholder even if I wait for each of them for less than the placeholder delay before clicking the next one ([see tweet](https://mobile.twitter.com/niklasbostrom/status/1025278135082934272))?\r\n\r\n### Simple Cache Provider\r\n- [ ] Cache invalidation (@acdlite) [#13337]\r\n- [ ] Subscriptions (@acdlite) [#13337]\r\n- [ ] Decide on actual name\r\n\r\n### Code splitting\r\n- [x] Support promise as a component type\r\n- [x] (maybe) Open source `lazyLoadComponent`?\r\n\r\n### Test renderer\r\n- [ ] Finalize public APIs for `flushAll`, `yield`, etc\r\n  - Tentative plan is to publish custom matchers for each of the major testing frameworks, a la #13236.\r\n\r\n### Docs\r\n- [ ] Blog post\r\n- [ ] `React.Placeholder`\r\n- [ ] simple-cache-provider\r\n- [ ] Unnamed code-splitting library\r\n\r\n## Follow ups\r\n\r\n### Soft expiration (https://github.com/facebook/react/issues/14248)\r\n- [ ] Implement an API for in-place loading indicators that aren't ancestors\r\n- [ ] Make sure there's a way to avoid flashing the inline spinner if it's fast enough\r\n\r\n### Streaming server renderer\r\n- [ ] Implement a streaming server renderer like the one in @acdlite's ZEIT talk\r\n- [ ] Partial hydration\r\n\r\n------\r\n\r\nRelated: Time Slicing Umbrella (https://github.com/facebook/react/issues/13306)"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13204",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13204/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13204/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13204/events",
            "html_url": "https://github.com/facebook/react/issues/13204",
            "id": 341038585,
            "node_id": "MDU6SXNzdWUzNDEwMzg1ODU=",
            "number": 13204,
            "title": "Longterm support for Internet Explorer",
            "user": {
              "login": "a-reuss",
              "id": 41198378,
              "node_id": "MDQ6VXNlcjQxMTk4Mzc4",
              "avatar_url": "https://avatars3.githubusercontent.com/u/41198378?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/a-reuss",
              "html_url": "https://github.com/a-reuss",
              "followers_url": "https://api.github.com/users/a-reuss/followers",
              "following_url": "https://api.github.com/users/a-reuss/following{/other_user}",
              "gists_url": "https://api.github.com/users/a-reuss/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/a-reuss/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/a-reuss/subscriptions",
              "organizations_url": "https://api.github.com/users/a-reuss/orgs",
              "repos_url": "https://api.github.com/users/a-reuss/repos",
              "events_url": "https://api.github.com/users/a-reuss/events{/privacy}",
              "received_events_url": "https://api.github.com/users/a-reuss/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 4,
            "created_at": "2018-07-13T14:23:24Z",
            "updated_at": "2019-02-01T23:07:14Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**feature**\r\n\r\nI'd like to know how the current roadmap for support of the Internet Explorer (namely the IE11) is. Is there a time frame for which react guarantees IE support and if yes for how long?\r\n\r\nBest regards and thanks for any answer! "
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13104",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13104/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13104/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13104/events",
            "html_url": "https://github.com/facebook/react/issues/13104",
            "id": 335214547,
            "node_id": "MDU6SXNzdWUzMzUyMTQ1NDc=",
            "number": 13104,
            "title": "add support for SyntheticKeyboardEvent#isComposing",
            "user": {
              "login": "mattkrick",
              "id": 5514175,
              "node_id": "MDQ6VXNlcjU1MTQxNzU=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/5514175?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/mattkrick",
              "html_url": "https://github.com/mattkrick",
              "followers_url": "https://api.github.com/users/mattkrick/followers",
              "following_url": "https://api.github.com/users/mattkrick/following{/other_user}",
              "gists_url": "https://api.github.com/users/mattkrick/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/mattkrick/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/mattkrick/subscriptions",
              "organizations_url": "https://api.github.com/users/mattkrick/orgs",
              "repos_url": "https://api.github.com/users/mattkrick/repos",
              "events_url": "https://api.github.com/users/mattkrick/events{/privacy}",
              "received_events_url": "https://api.github.com/users/mattkrick/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2018-06-24T21:49:31Z",
            "updated_at": "2020-01-09T21:25:46Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nSynthetic keyboard events do not contain `isComposing`.\r\nThey should if the value is true, per the w3 spec 4.7.5: https://www.w3.org/TR/uievents/#events-compositionevents\r\n \r\n**What is the expected behavior?**\r\n`event.isComposing === event.nativeEvent.isComposing`\r\n\r\nSyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nall versions, up through at least 16.4.1"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13097",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13097/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13097/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13097/events",
            "html_url": "https://github.com/facebook/react/issues/13097",
            "id": 334981118,
            "node_id": "MDU6SXNzdWUzMzQ5ODExMTg=",
            "number": 13097,
            "title": "Add support for hydrating portals",
            "user": {
              "login": "marcusdarmstrong",
              "id": 3826925,
              "node_id": "MDQ6VXNlcjM4MjY5MjU=",
              "avatar_url": "https://avatars3.githubusercontent.com/u/3826925?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/marcusdarmstrong",
              "html_url": "https://github.com/marcusdarmstrong",
              "followers_url": "https://api.github.com/users/marcusdarmstrong/followers",
              "following_url": "https://api.github.com/users/marcusdarmstrong/following{/other_user}",
              "gists_url": "https://api.github.com/users/marcusdarmstrong/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/marcusdarmstrong/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/marcusdarmstrong/subscriptions",
              "organizations_url": "https://api.github.com/users/marcusdarmstrong/orgs",
              "repos_url": "https://api.github.com/users/marcusdarmstrong/repos",
              "events_url": "https://api.github.com/users/marcusdarmstrong/events{/privacy}",
              "received_events_url": "https://api.github.com/users/marcusdarmstrong/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 19,
            "created_at": "2018-06-22T18:45:31Z",
            "updated_at": "2020-01-10T08:10:42Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nProbably bug, but arguably a feature request, I suppose.\r\n\r\n**What is the current behavior?**\r\n\r\nI've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.\r\n\r\nhttps://jsfiddle.net/y8o5n2zg/\r\n\r\nAs seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in:\r\n> `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in <div>.`\r\n\r\nAdditionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM:\r\n> `<div id=\"test-1\">Hello WorldHello World</div>`\r\n\r\n**What is the expected behavior?**\r\n\r\nIn an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously.\r\n\r\n\r\n#### *Why* I'm doing this edge-case-y nonsense:\r\n\r\nWe're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the page—20-30, perhaps?).\r\n\r\nIn searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case.\r\n\r\nThanks!\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/13044",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/13044/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/13044/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/13044/events",
            "html_url": "https://github.com/facebook/react/issues/13044",
            "id": 332416688,
            "node_id": "MDU6SXNzdWUzMzI0MTY2ODg=",
            "number": 13044,
            "title": "Allow Portals to be used for Reparenting",
            "user": {
              "login": "philipp-spiess",
              "id": 458591,
              "node_id": "MDQ6VXNlcjQ1ODU5MQ==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/458591?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/philipp-spiess",
              "html_url": "https://github.com/philipp-spiess",
              "followers_url": "https://api.github.com/users/philipp-spiess/followers",
              "following_url": "https://api.github.com/users/philipp-spiess/following{/other_user}",
              "gists_url": "https://api.github.com/users/philipp-spiess/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/philipp-spiess/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/philipp-spiess/subscriptions",
              "organizations_url": "https://api.github.com/users/philipp-spiess/orgs",
              "repos_url": "https://api.github.com/users/philipp-spiess/repos",
              "events_url": "https://api.github.com/users/philipp-spiess/events{/privacy}",
              "received_events_url": "https://api.github.com/users/philipp-spiess/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 18,
            "created_at": "2018-06-14T14:01:27Z",
            "updated_at": "2020-01-10T09:40:16Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n[Reparenting](https://github.com/facebook/react/issues/3965) is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted.\r\n\r\n```js\r\nReactDOM.render(<Foo />, container);\r\n// This won't get <Foo /> to be unmounted and mounted again:\r\nReactDOM.render(<Foo />, container);\r\n\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n// This also won't get <Foo /> to be unmounted and mounted again, no matter if \r\n// we change parentComponent (and thus call it from a different parent):\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n```\r\n\r\nHowever this unstable API is [going to be deprecated soon](https://github.com/facebook/react/issues/10143) and recent features like the introduction of the new context API introduced [additional issues](https://github.com/facebook/react/issues/12493).\r\n\r\nAs an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always [create a new mount point](https://github.com/facebook/react/issues/10713) inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this [CodeSandbox](https://codesandbox.io/s/91o7oovo54) where calling the portal from a different portal will cause the `<Leaf />` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc.\r\n\r\nBefore we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12989",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12989/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12989/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12989/events",
            "html_url": "https://github.com/facebook/react/issues/12989",
            "id": 330078193,
            "node_id": "MDU6SXNzdWUzMzAwNzgxOTM=",
            "number": 12989,
            "title": "Consider removing Mobile Safari empty onclick hack",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710722093,
                "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 13,
            "created_at": "2018-06-07T00:36:14Z",
            "updated_at": "2020-01-08T19:16:44Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "See https://github.com/facebook/react/issues/238 and https://github.com/facebook/react/pull/1536 for historical context.\r\n\r\nIs that still relevant? The code is here:\r\n\r\nhttps://github.com/facebook/react/blob/52fbe7612e0527b8c86decac519c344626f6bd72/packages/react-dom/src/client/ReactDOMFiberComponent.js#L244-L245\r\n\r\nEven if it's relevant, can we just feature test it, and not do this hack on other browsers? Seems like a waste of memory for event handlers (even though the function is the same every time)."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12755",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12755/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12755/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12755/events",
            "html_url": "https://github.com/facebook/react/pull/12755",
            "id": 320736869,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MTg2MzAwNzQw",
            "number": 12755,
            "title": "Add test case for getEventTarget",
            "user": {
              "login": "lidoravitan",
              "id": 35113398,
              "node_id": "MDQ6VXNlcjM1MTEzMzk4",
              "avatar_url": "https://avatars0.githubusercontent.com/u/35113398?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lidoravitan",
              "html_url": "https://github.com/lidoravitan",
              "followers_url": "https://api.github.com/users/lidoravitan/followers",
              "following_url": "https://api.github.com/users/lidoravitan/following{/other_user}",
              "gists_url": "https://api.github.com/users/lidoravitan/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/lidoravitan/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/lidoravitan/subscriptions",
              "organizations_url": "https://api.github.com/users/lidoravitan/orgs",
              "repos_url": "https://api.github.com/users/lidoravitan/repos",
              "events_url": "https://api.github.com/users/lidoravitan/events{/privacy}",
              "received_events_url": "https://api.github.com/users/lidoravitan/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 196858374,
                "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 12,
            "created_at": "2018-05-07T09:30:34Z",
            "updated_at": "2020-01-10T13:07:04Z",
            "closed_at": null,
            "author_association": "NONE",
            "pull_request": {
              "url": "https://api.github.com/repos/facebook/react/pulls/12755",
              "html_url": "https://github.com/facebook/react/pull/12755",
              "diff_url": "https://github.com/facebook/react/pull/12755.diff",
              "patch_url": "https://github.com/facebook/react/pull/12755.patch"
            },
            "body": "Added Test case for packages/react-dom/src/events/getEventTarget.js\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12749",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12749/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12749/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12749/events",
            "html_url": "https://github.com/facebook/react/issues/12749",
            "id": 320516537,
            "node_id": "MDU6SXNzdWUzMjA1MTY1Mzc=",
            "number": 12749,
            "title": "IE 11 \"prompt to remember password\" regression bug since 15.2.0",
            "user": {
              "login": "luisrudge",
              "id": 941075,
              "node_id": "MDQ6VXNlcjk0MTA3NQ==",
              "avatar_url": "https://avatars3.githubusercontent.com/u/941075?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/luisrudge",
              "html_url": "https://github.com/luisrudge",
              "followers_url": "https://api.github.com/users/luisrudge/followers",
              "following_url": "https://api.github.com/users/luisrudge/following{/other_user}",
              "gists_url": "https://api.github.com/users/luisrudge/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/luisrudge/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/luisrudge/subscriptions",
              "organizations_url": "https://api.github.com/users/luisrudge/orgs",
              "repos_url": "https://api.github.com/users/luisrudge/repos",
              "events_url": "https://api.github.com/users/luisrudge/events{/privacy}",
              "received_events_url": "https://api.github.com/users/luisrudge/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 69105383,
                "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
                "name": "Browser: IE",
                "color": "c7def8",
                "default": false,
                "description": null
              },
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710722093,
                "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false,
                "description": null
              },
              {
                "id": 178761159,
                "node_id": "MDU6TGFiZWwxNzg3NjExNTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
                "name": "Type: Regression",
                "color": "e11d21",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 16,
            "created_at": "2018-05-05T15:09:17Z",
            "updated_at": "2019-03-04T12:21:15Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "\r\n## Note: this issue seems solved for Edge but not for IE 11, see https://github.com/facebook/react/issues/12749#issuecomment-412671171\r\n\r\n\r\n\r\nThis issue was [already raised](https://github.com/facebook/react/issues/7328), but since it was closed, I'm opening a new one so we can get more traction on this.\r\n\r\nI'm still having this issue with both IE and Edge:\r\n\r\nWorks with 15.1.0: https://codesandbox.io/s/lpvz0zy9wq\r\nDoesn't work with 15.2.0: https://codesandbox.io/s/o9kl2jzo1q\r\nDoesn't work with 15.6.2: https://codesandbox.io/s/38kp95wl96\r\nDoesn't work with 16.3.1: https://codesandbox.io/s/xjpk3wr55p\r\n\r\nIn order to test this effectively, you have to follow a few steps:\r\n\r\n### Using Edge, go to **Settings** >> **View Advanced Settings**, under **Privacy and Services**\r\n\r\n- make sure you have **Offer to save passwords** enabled:\r\n![image](https://user-images.githubusercontent.com/941075/38700796-9c04a542-3e72-11e8-9aa5-b7e068c300b3.png)\r\n\r\n- make sure you don't have any passwords saved in the codesandbox.io domain:\r\n![image](https://user-images.githubusercontent.com/941075/38700921-ee497666-3e72-11e8-8b27-8e64fb6a4e2e.png)\r\n\r\n\r\n## Steps to reproduce when IT WORKS (15.1.0)\r\n\r\n- go to the [15.1.0](https://codesandbox.io/s/lpvz0zy9wq) sandbox\r\n- type a username and a password and hit submit\r\n- you'll see a confirmation panel about saving passwords:\r\n![image](https://user-images.githubusercontent.com/941075/38701037-409fdc70-3e73-11e8-8997-ec8ecc082163.png)\r\n- refresh the page\r\n- type another username and a password and hit submit\r\n- you'll see another confirmation panel about saving passwords:\r\n![image](https://user-images.githubusercontent.com/941075/38701037-409fdc70-3e73-11e8-8997-ec8ecc082163.png)\r\n- refresh the page\r\n- click on the first input\r\n- you'll see a list of the previously used usernames: ![image](https://user-images.githubusercontent.com/941075/38701545-8b5e1e2e-3e74-11e8-932a-ccf18b6a07fc.png)\r\n\r\n## Steps to reproduce when IT DOESN'T WORK (15.2.0, 15.6.2, 16.3.1)\r\n\r\n- remove previously saved passwords from the codesandbox.io domain:\r\n![image](https://user-images.githubusercontent.com/941075/38700921-ee497666-3e72-11e8-8b27-8e64fb6a4e2e.png) \r\n- go to any of the non-working sandboxes ([15.2.0](https://codesandbox.io/s/o9kl2jzo1q), [15.6.2](https://codesandbox.io/s/38kp95wl96), [16.3.1](https://codesandbox.io/s/xjpk3wr55p)\r\n- type a username and a password and hit submit\r\n- there will be no password confirmation panel\r\n- refresh the page\r\n- click on the first input\r\n- there will be no list of previously used usernames"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12717",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12717/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12717/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12717/events",
            "html_url": "https://github.com/facebook/react/issues/12717",
            "id": 318721365,
            "node_id": "MDU6SXNzdWUzMTg3MjEzNjU=",
            "number": 12717,
            "title": "onMouseDown causes splash on real ios browsers",
            "user": {
              "login": "huhaixiao",
              "id": 11453698,
              "node_id": "MDQ6VXNlcjExNDUzNjk4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/11453698?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/huhaixiao",
              "html_url": "https://github.com/huhaixiao",
              "followers_url": "https://api.github.com/users/huhaixiao/followers",
              "following_url": "https://api.github.com/users/huhaixiao/following{/other_user}",
              "gists_url": "https://api.github.com/users/huhaixiao/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/huhaixiao/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/huhaixiao/subscriptions",
              "organizations_url": "https://api.github.com/users/huhaixiao/orgs",
              "repos_url": "https://api.github.com/users/huhaixiao/repos",
              "events_url": "https://api.github.com/users/huhaixiao/events{/privacy}",
              "received_events_url": "https://api.github.com/users/huhaixiao/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 69105358,
                "node_id": "MDU6TGFiZWw2OTEwNTM1OA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20Safari",
                "name": "Browser: Safari",
                "color": "c7def8",
                "default": false,
                "description": null
              },
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 9,
            "created_at": "2018-04-29T14:27:00Z",
            "updated_at": "2018-08-06T23:10:50Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nunexpected **grey splash** caused by `onMouseDown` on real ios device's browsers, both safari and chrome.\r\n[Please checkout this **grey splash** issue first](https://github.com/mui-org/material-ui/issues/11154)\r\nI did some trial later, and find out that vanilla html `<button onmousedown=\"\">btn</button>` doesn't cause **grey splash**, but with React's jsx `<button onMouseDown={()=>{}}></button>`, there is a noticeable **grey splash**\r\n\r\n**What is the expected behavior?**\r\n\r\nwho wants a splash?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.3.2\"\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12615",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12615/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12615/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12615/events",
            "html_url": "https://github.com/facebook/react/issues/12615",
            "id": 314394404,
            "node_id": "MDU6SXNzdWUzMTQzOTQ0MDQ=",
            "number": 12615,
            "title": "Unexpected warning when hydrating with portal and SSR",
            "user": {
              "login": "majelbstoat",
              "id": 425787,
              "node_id": "MDQ6VXNlcjQyNTc4Nw==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/425787?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/majelbstoat",
              "html_url": "https://github.com/majelbstoat",
              "followers_url": "https://api.github.com/users/majelbstoat/followers",
              "following_url": "https://api.github.com/users/majelbstoat/following{/other_user}",
              "gists_url": "https://api.github.com/users/majelbstoat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/majelbstoat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/majelbstoat/subscriptions",
              "organizations_url": "https://api.github.com/users/majelbstoat/orgs",
              "repos_url": "https://api.github.com/users/majelbstoat/repos",
              "events_url": "https://api.github.com/users/majelbstoat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/majelbstoat/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 588833528,
                "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              },
              {
                "id": 717031390,
                "node_id": "MDU6TGFiZWw3MTcwMzEzOTA=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "6ce26a",
                "default": true,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 18,
            "created_at": "2018-04-15T07:50:53Z",
            "updated_at": "2019-06-15T23:54:34Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nGiven the following (simplified) snippet:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  render() {\r\n    if (typeof document === 'undefined') return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n\r\nclass Para extends React.Component {\r\n  render() {\r\n    return (\r\n      <span>\r\n        Some Text\r\n        <HoverMenu />\r\n      </span>\r\n    )\r\n  }\r\n} \r\n```\r\n\r\nwhere `div#root` is a valid `div` that exists, the following error is shown when hydrating after SSR:\r\n\r\n`Warning: Expected server HTML to contain a matching <div> in <span>`\r\n\r\nThe warning goes away if I update the definition of `HoverMenu` to:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  componentDidMount() {\r\n    this.setState({ isActive: true })\r\n  }\r\n  render() {\r\n    const { isActive} = this.state\r\n    if (!isActive) return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n```\r\n\r\nI'd prefer not to do that because of the double rendering caused by `setState` in `componentDidMount`.\r\n\r\nI don't quite understand what that error is telling me. No `<div />` is rendered server-side in either case. The error is particularly confusing, as the `HoverMenu` DOM `div` is not even rendered inside a DOM `span`. (I wonder if this is happening because `HoverMenu` is nested inside a React `span`.)\r\n\r\n**What is the expected behavior?**\r\n\r\nNo error is thrown. Or, at least that the error message is clearer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome 65\r\nReact 16.2\r\n(SSR through Next 5.1)\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12553",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12553/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12553/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12553/events",
            "html_url": "https://github.com/facebook/react/issues/12553",
            "id": 311732588,
            "node_id": "MDU6SXNzdWUzMTE3MzI1ODg=",
            "number": 12553,
            "title": "[meta] Bringing Flow types in line with 16.3 APIs",
            "user": {
              "login": "billyjanitsch",
              "id": 1158733,
              "node_id": "MDQ6VXNlcjExNTg3MzM=",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1158733?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/billyjanitsch",
              "html_url": "https://github.com/billyjanitsch",
              "followers_url": "https://api.github.com/users/billyjanitsch/followers",
              "following_url": "https://api.github.com/users/billyjanitsch/following{/other_user}",
              "gists_url": "https://api.github.com/users/billyjanitsch/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/billyjanitsch/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/billyjanitsch/subscriptions",
              "organizations_url": "https://api.github.com/users/billyjanitsch/orgs",
              "repos_url": "https://api.github.com/users/billyjanitsch/repos",
              "events_url": "https://api.github.com/users/billyjanitsch/events{/privacy}",
              "received_events_url": "https://api.github.com/users/billyjanitsch/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 16,
            "created_at": "2018-04-05T19:06:51Z",
            "updated_at": "2020-01-14T20:15:24Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "Hi!\r\n\r\nI realize that the React team doesn't work on Flow directly, and that the React typings live there. However, there are currently some large gaps in Flow support for the new 16.2/16.3 APIs, and I thought it might be good to raise/track them here, for the benefit of people searching the React tracker.\r\n\r\nI filed issues in the Flow repo for missing typings that didn't have outstanding PRs.\r\n\r\n- [x] `UNSAFE_`-prefixed lifecycles (commit: https://github.com/facebook/flow/commit/cd8fdcdd8719ca0138fb71d30a786d70e98f136c)\r\n- [x] `createContext` (commit: https://github.com/facebook/flow/commit/dd27ebbd14782cc103632e5459e106559d8b5511)\r\n- [x] `createRef` (commits: https://github.com/facebook/flow/commit/dd27ebbd14782cc103632e5459e106559d8b5511, https://github.com/facebook/flow/commit/d74ab13a8dfc5395ec5883aa2fa56be0a03a3a3f)\r\n- [x] `componentDidCatch` (PR: https://github.com/facebook/flow/pull/6044)\r\n- [x] `forwardRef` (PR: https://github.com/facebook/flow/pull/6510)\r\n- [ ] `getDerivedStateFromProps` (PR: https://github.com/facebook/flow/pull/6511)\r\n- [ ] `getSnapshotBeforeUpdate` (PR: https://github.com/facebook/flow/pull/6511)\r\n- [x] `StrictMode` (PR: https://github.com/facebook/flow/pull/6078)\r\n\r\nFeel free to close this issue if you don't think it's useful. But maybe the React team knows someone on the Flow team who can help give priority to these libdef updates (especially those with PRs)?\r\n\r\n❤️"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12441",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12441/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12441/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12441/events",
            "html_url": "https://github.com/facebook/react/issues/12441",
            "id": 308069851,
            "node_id": "MDU6SXNzdWUzMDgwNjk4NTE=",
            "number": 12441,
            "title": "Dangerous strings can reach browser builtins",
            "user": {
              "login": "mikesamuel",
              "id": 368886,
              "node_id": "MDQ6VXNlcjM2ODg4Ng==",
              "avatar_url": "https://avatars1.githubusercontent.com/u/368886?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/mikesamuel",
              "html_url": "https://github.com/mikesamuel",
              "followers_url": "https://api.github.com/users/mikesamuel/followers",
              "following_url": "https://api.github.com/users/mikesamuel/following{/other_user}",
              "gists_url": "https://api.github.com/users/mikesamuel/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/mikesamuel/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/mikesamuel/subscriptions",
              "organizations_url": "https://api.github.com/users/mikesamuel/orgs",
              "repos_url": "https://api.github.com/users/mikesamuel/repos",
              "events_url": "https://api.github.com/users/mikesamuel/events{/privacy}",
              "received_events_url": "https://api.github.com/users/mikesamuel/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 8,
            "created_at": "2018-03-23T15:16:28Z",
            "updated_at": "2019-04-24T15:28:16Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug, but a well known and worked-around one.\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nvar x = 'javascript:alert(1)';\r\nReactDOM.render(\r\n  (<a href={x}>Link</a>),\r\n  document.getElementById('container')\r\n);\r\n```\r\n\r\nproduces a link that alerts.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n* [Load the code above in the codepen REPL](https://jsfiddle.net/Luktwrdm/202/)\r\n* After the REPL loads, click the \"Run\" button at the top left.\r\n* You should see a blue \"link\" in the bottom-right pane.\r\n* Click it.  An alert will popup.\r\n\r\nThe alert should not pop up.\r\n\r\nA simple string that reaches an `href` attribute should not cause arbitrary code execution even with user interaction.\r\n\r\n\r\n**What is the expected behavior?**\r\nA string that reaches a browser builtin like the `HTMLAElement.prototype.href` setter should not cause code execution.\r\n\r\n**Discussion**\r\n\r\n[Polymer Resin](https://docs.google.com/presentation/d/1hepAXMroHSNTM0NV1aGlntjHrw0a0QOM5X5JvfXv_N0/edit#slide=id.g227691820f_0_198) uses hooks in another webcomponents framework to intercept value before they reach browser builtins where they can be vetted.  A similar approach could work for React.\r\n\r\nIt allows values to reach browser builtins when they are innocuous or have a runtime type that indicates that the author intentionally marked them as safe for that kind of browser builtin.\r\n\r\nFor example, an `instanceof SafeURL` would be allowed to reach `HTMLAElement.prototype.href` as would any string that is a relative URL, or one with a whitelisted protocol in (`http`, `https`, `mailto`, `tel`) but not `javascript:...`.\r\n\r\nMany developers know that `<a href={...}>` is risky, but if the link is an implementation detail of a custom React element, then developers don't have the context to know which attributes they need to be careful with.  They shouldn't have to either since it is an implementation detail.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI believe this is widespread across versions.\r\n\r\nAn earlier REPL I tried showed that it worked on version 16.2.0 from https://unpkg.com/react-dom/umd/react-dom.development.js but I don't know what version the jsfiddle above uses.\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12363",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12363/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12363/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12363/events",
            "html_url": "https://github.com/facebook/react/issues/12363",
            "id": 304866202,
            "node_id": "MDU6SXNzdWUzMDQ4NjYyMDI=",
            "number": 12363,
            "title": "React onBlur events not firing during unmount",
            "user": {
              "login": "timjim-kr",
              "id": 13425297,
              "node_id": "MDQ6VXNlcjEzNDI1Mjk3",
              "avatar_url": "https://avatars3.githubusercontent.com/u/13425297?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/timjim-kr",
              "html_url": "https://github.com/timjim-kr",
              "followers_url": "https://api.github.com/users/timjim-kr/followers",
              "following_url": "https://api.github.com/users/timjim-kr/following{/other_user}",
              "gists_url": "https://api.github.com/users/timjim-kr/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/timjim-kr/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/timjim-kr/subscriptions",
              "organizations_url": "https://api.github.com/users/timjim-kr/orgs",
              "repos_url": "https://api.github.com/users/timjim-kr/repos",
              "events_url": "https://api.github.com/users/timjim-kr/events{/privacy}",
              "received_events_url": "https://api.github.com/users/timjim-kr/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              },
              {
                "id": 710722093,
                "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 8,
            "created_at": "2018-03-13T17:38:08Z",
            "updated_at": "2019-09-24T23:22:19Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a DOM element rendered by a React component has focus, and the React component unmounts, the React `onBlur` event does not fire on parent DOM elements.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/134wrzy6q7\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that, just like the browser fires a `focusout` event when removing a DOM node, React would fire an `onBlur` events up to parent nodes when the focused node is removed / unmounted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.2\r\nMac OS X: 10.13.2\r\nBrowser: Chrome 67.0.3366.0, Chrome 64.0.3282.186\r\n\r\nNo idea if this worked in earlier versions of React."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12334",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12334/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12334/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12334/events",
            "html_url": "https://github.com/facebook/react/issues/12334",
            "id": 302645565,
            "node_id": "MDU6SXNzdWUzMDI2NDU1NjU=",
            "number": 12334,
            "title": "For Controlled Input, step does not work as expected unless initialized with null or \"\".",
            "user": {
              "login": "andyboyne",
              "id": 3295544,
              "node_id": "MDQ6VXNlcjMyOTU1NDQ=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/3295544?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/andyboyne",
              "html_url": "https://github.com/andyboyne",
              "followers_url": "https://api.github.com/users/andyboyne/followers",
              "following_url": "https://api.github.com/users/andyboyne/following{/other_user}",
              "gists_url": "https://api.github.com/users/andyboyne/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/andyboyne/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/andyboyne/subscriptions",
              "organizations_url": "https://api.github.com/users/andyboyne/orgs",
              "repos_url": "https://api.github.com/users/andyboyne/repos",
              "events_url": "https://api.github.com/users/andyboyne/events{/privacy}",
              "received_events_url": "https://api.github.com/users/andyboyne/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 6,
            "created_at": "2018-03-06T10:30:40Z",
            "updated_at": "2019-01-12T18:45:17Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "*BUG*\r\n\r\n**What is the current behavior?**\r\nFor input type=\"number\", step does not work as expected if there is an initial value set. Step only seems to get honored if the initial value is \"\" or null.\r\n\r\nExample:\r\nhttps://codepen.io/anon/pen/MQMBmX\r\n\r\nThe example uses a controlled input binding value and step. Step is 1/10th of the value. If you edit the value in the textbox to 50000 and increment using the stepper, it will increment to 50100 (i.e. by the initial value and not by the current step).\r\n\r\nEdit the code so initial value is \"\" or null. Edit textbox to 50000 and step up - value goes to 55000 as expected.\r\n\r\n**What is the expected behavior?**\r\nIt should be possible to render a number input that honors step without having to initialize the input component value to null or \"\" first.\r\n\r\nIt seems when there is an initial value provided, it will write a value attribute into the DOM (e.g. value=\"100\").  When initial value is \"\" or null then just the value attribute is written to DOM with no assignment. e.g. (value).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1  (ported to this version to confirm if still an issue)\r\n0.14.7 (originally found in this version)\r\n\r\nSeems to affect Chrome only (confirmed windows and mac, versions 59 and 64). Bug does not appear in Safari (on a mac at least)."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12247",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12247/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12247/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12247/events",
            "html_url": "https://github.com/facebook/react/issues/12247",
            "id": 298217188,
            "node_id": "MDU6SXNzdWUyOTgyMTcxODg=",
            "number": 12247,
            "title": "Support for changing a Portal's container without remounting children?",
            "user": {
              "login": "danielran",
              "id": 8035790,
              "node_id": "MDQ6VXNlcjgwMzU3OTA=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/8035790?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/danielran",
              "html_url": "https://github.com/danielran",
              "followers_url": "https://api.github.com/users/danielran/followers",
              "following_url": "https://api.github.com/users/danielran/following{/other_user}",
              "gists_url": "https://api.github.com/users/danielran/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/danielran/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/danielran/subscriptions",
              "organizations_url": "https://api.github.com/users/danielran/orgs",
              "repos_url": "https://api.github.com/users/danielran/repos",
              "events_url": "https://api.github.com/users/danielran/events{/privacy}",
              "received_events_url": "https://api.github.com/users/danielran/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 25,
            "created_at": "2018-02-19T09:59:43Z",
            "updated_at": "2019-12-11T11:27:09Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "(This is related to https://github.com/facebook/react/issues/3965.)\r\n\r\nI'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance.\r\n\r\nInstead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.)\r\n\r\nHowever, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this [CodePen](https://codepen.io/anon/pen/PQQKRP).)\r\n\r\nWould it be possible to skip this re-rendering and effectively move the Portal contents instead?"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12235",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12235/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12235/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12235/events",
            "html_url": "https://github.com/facebook/react/issues/12235",
            "id": 297641027,
            "node_id": "MDU6SXNzdWUyOTc2NDEwMjc=",
            "number": 12235,
            "title": "Extracting a Context Stack",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 6,
            "created_at": "2018-02-16T00:04:58Z",
            "updated_at": "2020-01-08T19:17:21Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.\r\n\r\nI think the primary use case is logging explicitly.\r\n\r\nCurrently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.\r\n\r\nWe could provide an API that lazily extracts a whole path of contexts from the tree.\r\n\r\n```js\r\n<FooContext.Provider value={\"foo\"}>\r\n  <FooContext.Provider value={\"bar\"}>\r\n    <FooContext.Provider value={\"baz\"}>\r\n      <App />\r\n    </FooContext.Provider>\r\n  </FooContext.Provider>\r\n</FooContext.Provider>\r\n```\r\n\r\n```js\r\nclass App extends React.Component {\r\n  log() {\r\n    var stack = this.getContextStack(FooContext);\r\n    logToServer(stack); // [\"foo\", \"bar\", \"baz\"]\r\n  }\r\n  render() {\r\n    return <div onClick={this.log} />;\r\n  }\r\n}\r\n```\r\n\r\nIt would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.\r\n\r\ncc @acdlite "
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12227",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12227/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12227/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12227/events",
            "html_url": "https://github.com/facebook/react/issues/12227",
            "id": 297220662,
            "node_id": "MDU6SXNzdWUyOTcyMjA2NjI=",
            "number": 12227,
            "title": "Provide a way to perform a synchronous render into another root during the commit phase",
            "user": {
              "login": "saranrapjs",
              "id": 707098,
              "node_id": "MDQ6VXNlcjcwNzA5OA==",
              "avatar_url": "https://avatars2.githubusercontent.com/u/707098?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/saranrapjs",
              "html_url": "https://github.com/saranrapjs",
              "followers_url": "https://api.github.com/users/saranrapjs/followers",
              "following_url": "https://api.github.com/users/saranrapjs/following{/other_user}",
              "gists_url": "https://api.github.com/users/saranrapjs/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/saranrapjs/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/saranrapjs/subscriptions",
              "organizations_url": "https://api.github.com/users/saranrapjs/orgs",
              "repos_url": "https://api.github.com/users/saranrapjs/repos",
              "events_url": "https://api.github.com/users/saranrapjs/events{/privacy}",
              "received_events_url": "https://api.github.com/users/saranrapjs/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 11,
            "created_at": "2018-02-14T19:41:49Z",
            "updated_at": "2019-11-25T16:58:32Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.\r\n\r\nWe have a component which manages the DOM tree for all nodes below it outside of React — it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:\r\n\r\n```javascript\r\nclass ProseMirror extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// ProseMirror manages the DOM for all nodes below this.el.\r\n\t}\r\n\r\n\tsetRef(el) {\r\n\t\tthis.el = el;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<div ref={this.setRef} />);\r\n\t}\r\n}\r\n```\r\n\r\nAs part of its render cycle, our configuration of ProseMirror ends up calling:\r\n\r\n```javascript\r\nReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);\r\n```\r\n\r\nto render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:\r\n\r\n```javascript\r\nthis.el.querySelector('.my-subcomponent')\r\n```\r\n\r\n...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nQuerying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12209",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12209/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12209/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12209/events",
            "html_url": "https://github.com/facebook/react/issues/12209",
            "id": 296211558,
            "node_id": "MDU6SXNzdWUyOTYyMTE1NTg=",
            "number": 12209,
            "title": "Warn if stringifying an attribute takes too long",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 588833528,
                "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 725156255,
                "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 16,
            "created_at": "2018-02-11T18:14:28Z",
            "updated_at": "2020-01-08T19:17:20Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "With React 16 we don't have an attribute whitelist so both `src={obj}` and `myattribute={obj}` would be valid. The objects get stringified and added as attributes for smooth migration path because a lot of the existing code already depends on this behavior.\r\n\r\nThere is, however, one pitfall here. Sometimes you made do `<div {...rest}>` and not realize that `rest` includes an object whose stringifying is unusually expensive. For example a deeply nested Immutable Map. Now, this wouldn't produce an error, but it would slow down rendering for no good reason.\r\n\r\nWe could protect against this by putting `performance.now()` counters around the places where we stringify attributes. If stringification takes more than, say, 2 milliseconds, then something bad is going on, and we should probably warn."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/12073",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/12073/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/12073/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/12073/events",
            "html_url": "https://github.com/facebook/react/issues/12073",
            "id": 290557932,
            "node_id": "MDU6SXNzdWUyOTA1NTc5MzI=",
            "number": 12073,
            "title": "Fabric Todos",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 2,
            "created_at": "2018-01-22T17:55:39Z",
            "updated_at": "2020-01-08T19:17:20Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "For my own notes here are some spill-overs from the Fabric renderer commit.\r\n\r\n- [ ] Update currentProps for updates in the commit phase. Needs a host effect to be marked and we need a hook to do host updates in the persistent mode.\r\n- [x] Actually use currentProps when extracting events in the component tree.\r\n- [ ] Resuming will need to be able to not reuse host nodes used by another thread.\r\n- [ ] Should always clone direct siblings of a changed node, in case they will relayout."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11972",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11972/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11972/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11972/events",
            "html_url": "https://github.com/facebook/react/issues/11972",
            "id": 286328956,
            "node_id": "MDU6SXNzdWUyODYzMjg5NTY=",
            "number": 11972,
            "title": "Consider removing mouseenter/mouseleave polyfill",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 3,
            "created_at": "2018-01-05T16:00:10Z",
            "updated_at": "2020-01-08T19:17:20Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "As suggested in https://github.com/facebook/react/pull/10247.\r\nNot sure we want to do it, but I decided to create an issue to track future attempts (the PR is stale)."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11949",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11949/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11949/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11949/events",
            "html_url": "https://github.com/facebook/react/issues/11949",
            "id": 285498529,
            "node_id": "MDU6SXNzdWUyODU0OTg1Mjk=",
            "number": 11949,
            "title": "Output JUnit XML test metadata for CircleCI",
            "user": {
              "login": "sophiebits",
              "id": 6820,
              "node_id": "MDQ6VXNlcjY4MjA=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sophiebits",
              "html_url": "https://github.com/sophiebits",
              "followers_url": "https://api.github.com/users/sophiebits/followers",
              "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
              "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
              "organizations_url": "https://api.github.com/users/sophiebits/orgs",
              "repos_url": "https://api.github.com/users/sophiebits/repos",
              "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sophiebits/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 588833528,
                "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false,
                "description": null
              },
              {
                "id": 1776420141,
                "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
                "url": "https://api.github.com/repos/facebook/react/labels/Partner",
                "name": "Partner",
                "color": "e4bef7",
                "default": false,
                "description": ""
              },
              {
                "id": 725156255,
                "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 8,
            "created_at": "2018-01-02T18:08:39Z",
            "updated_at": "2020-01-08T23:42:28Z",
            "closed_at": null,
            "author_association": "COLLABORATOR",
            "body": "# @benbraou has claimed this issue. Please give them a chance to work on this.\r\n\r\n---\r\n\r\nHere's a screenshot of a CircleCI build for another (private) project I'm a part of:\r\n\r\n![image](https://user-images.githubusercontent.com/6820/34494194-1d3d3f70-efa4-11e7-87b7-0ca9961b2934.png)\r\n\r\nIt clearly highlights the parts of the build that failed.\r\n\r\nIn contrast, see one of our builds: https://circleci.com/gh/facebook/react/8402. In this one the ./scripts/circleci/upload_build.sh step failed but you need to scroll through the output a significant amount to see that. This is in part because we have a custom entry point for all our CI steps ([scripts/circleci/test_entry_point.sh](https://github.com/facebook/react/blob/v16.2.0/scripts/circleci/test_entry_point.sh)) to make it easier for us to parallelize some build steps.\r\n\r\nI'd like us to change that test_entry_point.sh script to output JUnit XML metadata for CircleCI as described in https://circleci.com/docs/2.0/collect-test-data/. Then I believe the CircleCI build results page will show exactly which step failed.\r\n\r\n(Bonus: If we can show individual Jest tests that would be even cooler. But I think the most important part is breaking out jest vs flow vs prettier, etc. into separate chunks.)"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11935",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11935/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11935/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11935/events",
            "html_url": "https://github.com/facebook/react/issues/11935",
            "id": 285212510,
            "node_id": "MDU6SXNzdWUyODUyMTI1MTA=",
            "number": 11935,
            "title": "Consider a more specific warning for key={undefined}",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 139653724,
                "node_id": "MDU6TGFiZWwxMzk2NTM3MjQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 40929153,
                "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 8,
            "created_at": "2017-12-30T17:00:45Z",
            "updated_at": "2020-01-08T19:17:19Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):\r\n\r\n>I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.\r\n\r\n>Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?\r\n\r\nI think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11896",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11896/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11896/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11896/events",
            "html_url": "https://github.com/facebook/react/issues/11896",
            "id": 283653451,
            "node_id": "MDU6SXNzdWUyODM2NTM0NTE=",
            "number": 11896,
            "title": "Stop syncing value attribute for controlled inputs",
            "user": {
              "login": "aweary",
              "id": 6886061,
              "node_id": "MDQ6VXNlcjY4ODYwNjE=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/aweary",
              "html_url": "https://github.com/aweary",
              "followers_url": "https://api.github.com/users/aweary/followers",
              "following_url": "https://api.github.com/users/aweary/following{/other_user}",
              "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
              "organizations_url": "https://api.github.com/users/aweary/orgs",
              "repos_url": "https://api.github.com/users/aweary/repos",
              "events_url": "https://api.github.com/users/aweary/events{/privacy}",
              "received_events_url": "https://api.github.com/users/aweary/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 22,
            "created_at": "2017-12-20T18:21:41Z",
            "updated_at": "2018-10-04T06:30:59Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Opening this as a follow up to some quick discussions in https://github.com/facebook/react/issues/11881. Syncing the `value` attribute has been a consistent source of bugs for us, and the benefits of doing so seem minimal. There's some previous discussion on the topic in https://github.com/facebook/react/pull/7359 and in other issues, I can't remember right now 😄 \r\n\r\nThis would be a breaking change, so it would have to be done in a major release. \r\n\r\n## Reasons to keep syncing\r\n\r\n* It prevents `form.reset()` from putting controlled form inputs into a weird state\r\n* Some browser extensions (not sure which) read from the `value` attribute in some cases (not sure which)\r\n* It can be useful for querying inputs with a specific value using an attribute selector\r\n\r\n## Reasons to stop syncing\r\n\r\n* It will reduce the complexity of `react-dom` in a non-trivial way\r\n* In turn, it will likely reduce bundle size as well\r\n* We remove a whole class of bugs (fighting with browsers that want to be helpful about input values)\r\n* Syncing the input value to the attribute potentially exposes sensitive data to third party tools ([1](https://www.reddit.com/r/analytics/comments/7ukw4n/mixpanel_js_library_has_been_harvesting_passwords/))\r\n\r\n______\r\n\r\nWhat do we think? Are these reasons good enough to keep syncing the `value` attribute? Are there other more critical reasons we should keep doing so?\r\n\r\n\r\ncc @nhunzaker @jquense @gaearon "
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11881",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11881/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11881/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11881/events",
            "html_url": "https://github.com/facebook/react/issues/11881",
            "id": 282975575,
            "node_id": "MDU6SXNzdWUyODI5NzU1NzU=",
            "number": 11881,
            "title": "backspace fails to clear values on input type='email'",
            "user": {
              "login": "codeangler",
              "id": 1369197,
              "node_id": "MDQ6VXNlcjEzNjkxOTc=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/1369197?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/codeangler",
              "html_url": "https://github.com/codeangler",
              "followers_url": "https://api.github.com/users/codeangler/followers",
              "following_url": "https://api.github.com/users/codeangler/following{/other_user}",
              "gists_url": "https://api.github.com/users/codeangler/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/codeangler/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/codeangler/subscriptions",
              "organizations_url": "https://api.github.com/users/codeangler/orgs",
              "repos_url": "https://api.github.com/users/codeangler/repos",
              "events_url": "https://api.github.com/users/codeangler/events{/privacy}",
              "received_events_url": "https://api.github.com/users/codeangler/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 7,
            "created_at": "2017-12-18T18:21:42Z",
            "updated_at": "2019-10-03T01:16:07Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug \r\n\r\n**What is the current behavior?**\r\nemail input doesn't control for whitespace // possible variation on [Issue 6368](https://github.com/facebook/react/issues/6368); however, 6368 shows up at 15.0.0 this bug shows up at 15.2\r\n\r\n**If the current behavior is a bug, demo**\r\n\r\nno bug in React 15.0.0\r\nno bug in React 15.1.0\r\nbug on React 15.2\r\n[React~15 fiddle](https://jsfiddle.net/cburnett/79z43qxn/9/)\r\n\r\nbug on React 16 \r\n[React~16 fiddle](https://jsfiddle.net/cburnett/q1297t5w/2/)\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen a user presses down the backspace key and holds it, all values in the input are removed, including the whitespaces  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWorks on 15.1.0\r\nbug at >= 15.2.0 \r\ntesting on Chrome 63\r\nMacOs Sierra 10.12\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11877",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11877/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11877/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11877/events",
            "html_url": "https://github.com/facebook/react/issues/11877",
            "id": 282847262,
            "node_id": "MDU6SXNzdWUyODI4NDcyNjI=",
            "number": 11877,
            "title": "Number input gets cleared when typing period as decimal mark",
            "user": {
              "login": "Hilzu",
              "id": 969840,
              "node_id": "MDQ6VXNlcjk2OTg0MA==",
              "avatar_url": "https://avatars1.githubusercontent.com/u/969840?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/Hilzu",
              "html_url": "https://github.com/Hilzu",
              "followers_url": "https://api.github.com/users/Hilzu/followers",
              "following_url": "https://api.github.com/users/Hilzu/following{/other_user}",
              "gists_url": "https://api.github.com/users/Hilzu/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/Hilzu/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/Hilzu/subscriptions",
              "organizations_url": "https://api.github.com/users/Hilzu/orgs",
              "repos_url": "https://api.github.com/users/Hilzu/repos",
              "events_url": "https://api.github.com/users/Hilzu/events{/privacy}",
              "received_events_url": "https://api.github.com/users/Hilzu/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 13,
            "created_at": "2017-12-18T11:29:42Z",
            "updated_at": "2019-03-25T23:38:32Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nMy OS and browser are configured to a locale that uses comma as the decimal mark (Finland for those interested). In the codepen below when I accidentally type a period after some number the whole input gets cleared. This is somehow related to the parent component's state being updated because if the `defaultValue` prop is removed from the `<Input>` component the input doesn't get cleared.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codepen.io/anon/pen/aEOgNL?editors=0010\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input should retain its visible value even if it would be invalid (can't be converted to a number).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0 and Chrome 63 on macOS 10.12.6.\r\n\r\nTested in Safari 11.0.2 and typing a period kinda works. After typing the first number after the period it gets converted to a comma but the cursor jumps to the beginning.\r\n\r\nAlso tested in Firefox 57.0.1 but it seems to think that period is the correct decimal mark."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11866",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11866/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11866/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11866/events",
            "html_url": "https://github.com/facebook/react/issues/11866",
            "id": 282591514,
            "node_id": "MDU6SXNzdWUyODI1OTE1MTQ=",
            "number": 11866,
            "title": "Improve accidental `void` return in render props?",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 1,
            "created_at": "2017-12-16T02:02:35Z",
            "updated_at": "2020-01-08T19:17:19Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "We know that it is easy to accidentally forget to return from functions or arrow functions. That's why we don't allow returning `undefined` from render functions. (I think we do in the children position but that's harder to disallow.)\r\n\r\n```js\r\nclass Foo extends React.Component {\r\n  render() {\r\n    return this.props.children();\r\n  }\r\n}\r\n```\r\n\r\n```js\r\nfunction Bar() {\r\n  return <Foo>\r\n    {value => {\r\n      <div>\r\n       ...\r\n      </div>\r\n    }}\r\n  </Foo>;\r\n}\r\n```\r\n\r\nor\r\n\r\n```js\r\nfunction BarImpl(props, value) {\r\n  <div>\r\n  </div>\r\n}\r\nfunction Bar(props) {\r\n  return <Foo>{value => BarImpl(props, value)}</Foo>;\r\n}\r\n```\r\n\r\nIt can be difficult to detect an undefined return but the error/warning will also come from the implementation of `Foo`.\r\n\r\nI wonder if we can improve that somehow."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11827",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11827/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11827/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11827/events",
            "html_url": "https://github.com/facebook/react/issues/11827",
            "id": 281072678,
            "node_id": "MDU6SXNzdWUyODEwNzI2Nzg=",
            "number": 11827,
            "title": "Cursor jumps when backspacing in a number input (with ShadowDOM)",
            "user": {
              "login": "YellowKirby",
              "id": 1654019,
              "node_id": "MDQ6VXNlcjE2NTQwMTk=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/1654019?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/YellowKirby",
              "html_url": "https://github.com/YellowKirby",
              "followers_url": "https://api.github.com/users/YellowKirby/followers",
              "following_url": "https://api.github.com/users/YellowKirby/following{/other_user}",
              "gists_url": "https://api.github.com/users/YellowKirby/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/YellowKirby/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/YellowKirby/subscriptions",
              "organizations_url": "https://api.github.com/users/YellowKirby/orgs",
              "repos_url": "https://api.github.com/users/YellowKirby/repos",
              "events_url": "https://api.github.com/users/YellowKirby/events{/privacy}",
              "received_events_url": "https://api.github.com/users/YellowKirby/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 588833528,
                "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              },
              {
                "id": 725156255,
                "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2017-12-11T16:08:07Z",
            "updated_at": "2018-01-15T15:20:56Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nNumber inputs with decimal values in Chrome ShadowDOM do not maintain cursor position as user backspaces in the input field.\r\n\r\nSuper low-quality gif (sorry):\r\n<img src=\"https://thumbs.gfycat.com/TautIncredibleEkaltadeta-size_restricted.gif\"/>\r\n\r\nThis issue appears to be similar to the problem here: https://github.com/facebook/react/pull/7359, but in this case it's only custom elements with a shadow root that exhibit the problem.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n1. Have a React component render a number input: `<input type=\"number\" />`.\r\n2. Attach that React component as part of the ShadowDOM node of a custom element.\r\n3. Enter in some decimal value (e.g., `88.88`) into the input.\r\n4. Slowly backspace in the input. As soon as the decimal point would be the last character, the decimal point is removed and the cursor position jumps to the beginning of the input.\r\n\r\nDemo: https://jsfiddle.net/69z2wepo/94566/\r\n\r\n**What is the expected behavior?**\r\n\r\nThe ShadowDOM case behaves like the other cases: when backspacing in the input, the cursor does not jump to the beginning of the input and the decimal point is not unexpectedly deleted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.2.0 + Chrome 62.0.3202.62 + OSX 10.12.6\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11826",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11826/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11826/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11826/events",
            "html_url": "https://github.com/facebook/react/issues/11826",
            "id": 281014071,
            "node_id": "MDU6SXNzdWUyODEwMTQwNzE=",
            "number": 11826,
            "title": "React does not call onBlur callback",
            "user": {
              "login": "nbob",
              "id": 3524322,
              "node_id": "MDQ6VXNlcjM1MjQzMjI=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/3524322?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/nbob",
              "html_url": "https://github.com/nbob",
              "followers_url": "https://api.github.com/users/nbob/followers",
              "following_url": "https://api.github.com/users/nbob/following{/other_user}",
              "gists_url": "https://api.github.com/users/nbob/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/nbob/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/nbob/subscriptions",
              "organizations_url": "https://api.github.com/users/nbob/orgs",
              "repos_url": "https://api.github.com/users/nbob/repos",
              "events_url": "https://api.github.com/users/nbob/events{/privacy}",
              "received_events_url": "https://api.github.com/users/nbob/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 7,
            "created_at": "2017-12-11T13:20:59Z",
            "updated_at": "2018-08-09T14:12:01Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n**Bug**\r\n\r\n**What is the current behavior?**\r\nWhen input control becomes disabled, React does not call onBlur callback\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal https://jsfiddle.net/c22pez5z/\r\n\r\n**What is the expected behavior?**\r\n1. Focus on input element\r\n2. Press Enter button (it makes input disabled)\r\n3. `Blur counter` and `Native blur counter` should be equal."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11805",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11805/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11805/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11805/events",
            "html_url": "https://github.com/facebook/react/issues/11805",
            "id": 280335165,
            "node_id": "MDU6SXNzdWUyODAzMzUxNjU=",
            "number": 11805,
            "title": "Run benchmark trials in random order",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 760751171,
                "node_id": "MDU6TGFiZWw3NjA3NTExNzE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
                "name": "Difficulty: challenging",
                "color": "f2687c",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 725156255,
                "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 4,
            "created_at": "2017-12-08T01:09:11Z",
            "updated_at": "2020-01-08T19:17:57Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Our current benchmark script runs all trials in a specific order.\r\nYou can try it by running:\r\n\r\n```\r\ncd scripts/bench\r\nyarn\r\nyarn start\r\n```\r\n\r\n(Note: it takes a looong time to finish.)\r\n\r\nI think running all trials in a deterministic order like we do now may actually introduce issues. Such as if some other process starts grabbing CPU in the middle of the trials, a specific set of trials (e.g. \"HN\" benchmark on \"base\" repo)  will be affected, and the results skewed.\r\n\r\nBut if we ran all trials in a random order, I would expect any temporary changes to be evenly distributed between random runs, and thus not favor any particular version or benchmark. Wouldn't that be better?\r\n\r\nDoes this make sense? Tagging as a good issue to look into, but I don't promise this would be easy."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11799",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11799/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11799/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11799/events",
            "html_url": "https://github.com/facebook/react/issues/11799",
            "id": 280295918,
            "node_id": "MDU6SXNzdWUyODAyOTU5MTg=",
            "number": 11799,
            "title": "Consider removing XML compatibility from SSR or hiding it behind an option",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710332294,
                "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 2,
            "created_at": "2017-12-07T22:05:51Z",
            "updated_at": "2020-01-08T19:17:56Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "See https://github.com/facebook/react/pull/11708#issuecomment-349953542.\r\nNot sure if it's important but seems suboptimal to send extra markup if most people don't need XML."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11734",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11734/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11734/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11734/events",
            "html_url": "https://github.com/facebook/react/issues/11734",
            "id": 278323630,
            "node_id": "MDU6SXNzdWUyNzgzMjM2MzA=",
            "number": 11734,
            "title": "value|defaultValue={Symbol|Function} should be ignored, not stringified",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 52079258,
                "node_id": "MDU6TGFiZWw1MjA3OTI1OA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter",
                "name": "Difficulty: starter",
                "color": "94ce52",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              },
              {
                "id": 725156255,
                "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
              "login": "nhunzaker",
              "id": 590904,
              "node_id": "MDQ6VXNlcjU5MDkwNA==",
              "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/nhunzaker",
              "html_url": "https://github.com/nhunzaker",
              "followers_url": "https://api.github.com/users/nhunzaker/followers",
              "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
              "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
              "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
              "repos_url": "https://api.github.com/users/nhunzaker/repos",
              "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
              "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "nhunzaker",
                "id": 590904,
                "node_id": "MDQ6VXNlcjU5MDkwNA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/nhunzaker",
                "html_url": "https://github.com/nhunzaker",
                "followers_url": "https://api.github.com/users/nhunzaker/followers",
                "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
                "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
                "repos_url": "https://api.github.com/users/nhunzaker/repos",
                "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": null,
            "comments": 30,
            "created_at": "2017-12-01T01:01:08Z",
            "updated_at": "2020-01-08T19:17:56Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Regression in master from https://github.com/facebook/react/pull/11534.\r\nFound it thanks to the attribute fixture snapshots."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11689",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11689/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11689/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11689/events",
            "html_url": "https://github.com/facebook/react/issues/11689",
            "id": 277533137,
            "node_id": "MDU6SXNzdWUyNzc1MzMxMzc=",
            "number": 11689,
            "title": "Remove support for TapEventPlugin",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 2,
            "created_at": "2017-11-28T20:49:30Z",
            "updated_at": "2020-01-08T19:17:56Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Some libraries relied on it so we kept it in 16, but it's impossible to support it forever given that we want to make changes to the event system. We should deprecate [the injection it relies on](https://github.com/zilverline/react-tap-event-plugin/blob/f7ed5c560011590d24e07480686b234b2f3ea1f5/src/injectTapEventPlugin.js#L23) and remove it in React 17. The migration path is to turn it into a userland `<Tappable>` component or something like that. Hopefully somebody using `TapEventPlugin` can work on this, as we don't actively use it."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11678",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11678/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11678/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11678/events",
            "html_url": "https://github.com/facebook/react/issues/11678",
            "id": 277211214,
            "node_id": "MDU6SXNzdWUyNzcyMTEyMTQ=",
            "number": 11678,
            "title": "Disabled button click event propagates in IE11",
            "user": {
              "login": "Blasz",
              "id": 2231370,
              "node_id": "MDQ6VXNlcjIyMzEzNzA=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/2231370?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/Blasz",
              "html_url": "https://github.com/Blasz",
              "followers_url": "https://api.github.com/users/Blasz/followers",
              "following_url": "https://api.github.com/users/Blasz/following{/other_user}",
              "gists_url": "https://api.github.com/users/Blasz/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/Blasz/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/Blasz/subscriptions",
              "organizations_url": "https://api.github.com/users/Blasz/orgs",
              "repos_url": "https://api.github.com/users/Blasz/repos",
              "events_url": "https://api.github.com/users/Blasz/events{/privacy}",
              "received_events_url": "https://api.github.com/users/Blasz/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 69105383,
                "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
                "name": "Browser: IE",
                "color": "c7def8",
                "default": false,
                "description": null
              },
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 8,
            "created_at": "2017-11-27T23:55:54Z",
            "updated_at": "2020-01-10T19:00:30Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nClicking a disabled button in IE11 fires a mouse event that bubbles and is caught by parent click event listeners.\r\nThe event is swallowed/not fired in all other major browsers.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\nhttps://codesandbox.io/s/r0q76vqjwn\r\n\r\n**What is the expected behavior?**\r\nThe event should not fire or bubble.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.6.2 - IE11"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11674",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11674/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11674/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11674/events",
            "html_url": "https://github.com/facebook/react/issues/11674",
            "id": 277175370,
            "node_id": "MDU6SXNzdWUyNzcxNzUzNzA=",
            "number": 11674,
            "title": "Resetting a form containing a focused controlled number input puts it out of step with state",
            "user": {
              "login": "aweary",
              "id": 6886061,
              "node_id": "MDQ6VXNlcjY4ODYwNjE=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/aweary",
              "html_url": "https://github.com/aweary",
              "followers_url": "https://api.github.com/users/aweary/followers",
              "following_url": "https://api.github.com/users/aweary/following{/other_user}",
              "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
              "organizations_url": "https://api.github.com/users/aweary/orgs",
              "repos_url": "https://api.github.com/users/aweary/repos",
              "events_url": "https://api.github.com/users/aweary/events{/privacy}",
              "received_events_url": "https://api.github.com/users/aweary/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 0,
            "created_at": "2017-11-27T21:29:06Z",
            "updated_at": "2018-08-30T23:27:11Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Here's a fixture demonstrating the issue (first test case): http://react-number-input-form-reset-bug.surge.sh/number-inputs\r\n\r\nIf you have a controlled number input within a form containing a reset button, hitting Enter can trigger that reset event. This causes the focused input to be reset to the `defaultValue`, which won't be in sync with the tracked value because we do that work on blur for number inputs to avoid triggering validation warnings. This doesn't affect other input types, since the tracked value is updated immediately.\r\n\r\nThis might be a viable tradeoff for avoiding those validation warnings, so I'm not sure if this is actionable, but I wanted to at least document it for future reference.\r\n\r\n\r\ncc @nhunzaker @gaearon \r\n\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11667",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11667/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11667/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11667/events",
            "html_url": "https://github.com/facebook/react/issues/11667",
            "id": 276864227,
            "node_id": "MDU6SXNzdWUyNzY4NjQyMjc=",
            "number": 11667,
            "title": "RFC: Drop isAttributeNameSafe() check in React 17",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              },
              {
                "id": 40929153,
                "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 8,
            "created_at": "2017-11-26T22:50:11Z",
            "updated_at": "2020-01-08T19:17:55Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "We currently validate DOM attributes on the client and ignore the ones with invalid names:\r\n\r\nhttps://github.com/facebook/react/blob/0c164bb4851e78e5f789dd8619f17ffcfee0221f/packages/react-dom/src/client/DOMPropertyOperations.js#L202-L204\r\n\r\nThis check used to be important for safety when we did `innerHTML` rendering on the client side, but it's not anymore. If we just let it call `setAttribute`, the browser would throw on a bad attribute name.\r\n\r\nThis check used to run very infrequently (only for data attributes and custom elements), but now more attributes follow this code path (since any \"simple\" attributes with the same names are effectively treated as unknown attributes). So even though we cache the result, it seems unfortunate to do the work that the browser is already doing for us.\r\n\r\nWhile this would be a breaking change (so it has to go in 17), I think we should just remove this check, and let the browser throw. This does make spreading props blindly a bit more dangerous, but we have a warning so it should be visible."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11656",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11656/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11656/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11656/events",
            "html_url": "https://github.com/facebook/react/issues/11656",
            "id": 276720857,
            "node_id": "MDU6SXNzdWUyNzY3MjA4NTc=",
            "number": 11656,
            "title": "Deprecate TestUtils.SimulateNative",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 139734344,
                "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 3,
            "created_at": "2017-11-25T02:56:16Z",
            "updated_at": "2020-01-08T19:17:55Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "I'm not sure if it was ever intended to be a part of public API.\r\n\r\nIt's not documented, and its naming is misleading because it actually doesn't simulate a native event (oops!). It only simulates what React would do if it *received* that native event. It does that in a way that's very tightly coupled to the event system internals which is unfortunate. It is much better if we can educate people how to dispatch actual browser events in tests instead.\r\n\r\nI think we should just deprecate it. We've removed most tests relying on it, and can leave a test or two until it can be deleted in the next major."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11619",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11619/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11619/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11619/events",
            "html_url": "https://github.com/facebook/react/issues/11619",
            "id": 275927244,
            "node_id": "MDU6SXNzdWUyNzU5MjcyNDQ=",
            "number": 11619,
            "title": "Include component stack in invariants",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 40929153,
                "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false,
                "description": null
              },
              {
                "id": 725156255,
                "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 8,
            "created_at": "2017-11-22T02:46:07Z",
            "updated_at": "2020-01-08T19:17:55Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "IIRC we didn't include it because it was DEV-only. But it's not anymore.\r\nMaybe let's start including it?\r\n\r\nErrors are often more prominent than warnings, and it would be great to have this info in both."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11609",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11609/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11609/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11609/events",
            "html_url": "https://github.com/facebook/react/issues/11609",
            "id": 275730120,
            "node_id": "MDU6SXNzdWUyNzU3MzAxMjA=",
            "number": 11609,
            "title": "Undo operation on text input throws exception in IE9",
            "user": {
              "login": "nhunzaker",
              "id": 590904,
              "node_id": "MDQ6VXNlcjU5MDkwNA==",
              "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/nhunzaker",
              "html_url": "https://github.com/nhunzaker",
              "followers_url": "https://api.github.com/users/nhunzaker/followers",
              "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
              "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
              "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
              "repos_url": "https://api.github.com/users/nhunzaker/repos",
              "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
              "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 69105383,
                "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
                "name": "Browser: IE",
                "color": "c7def8",
                "default": false,
                "description": null
              },
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2017-11-21T14:24:38Z",
            "updated_at": "2018-06-02T21:35:39Z",
            "closed_at": null,
            "author_association": "COLLABORATOR",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug report. It looks like IE9 is unmounting text nodes when undoing text input operations. If the display value of the input is rendered in another component, it raises an exception because IE9 does not allow changes to `nodeValue` on unmounted text nodes.\r\n\r\nI think that's the issue, anyway. It is documented here:\r\n\r\nhttps://connect.microsoft.com/IE/feedbackdetail/view/944330/invalid-argument-error-when-changing-nodevalue-of-a-text-node-removed-by-setting-innerhtml-on-an-ancestor\r\n\r\n**What is the current behavior?**\r\n\r\n1. Open http://react-dom-test-fixtures.surge.sh/number-inputs in IE9\r\n2. Change the text in the first controlled text input\r\n3. Start debugging in the IE9 developer tools\r\n4. Press ctrl+z to undo your text change\r\n5. IE9 raises an exception when setting the nodeValue of the text label to the right of the input \"invalid arguments\":\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis affects IE9 when using React 16. It is also an issue on master.\r\n\r\n--- \r\n\r\nThe issue springs up in ReactDOM.js:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOM.js#L392-L398\r\n\r\nI think there just needs to be a wrapper around the text node to see if it has a parent before updating. Maybe something like:\r\n\r\n```javascript\r\ncommitTextUpdate(\r\n  textInstance: TextInstance,\r\n  oldText: string,\r\n  newText: string,\r\n): void {\r\n  // IE9 will raise an exception if modifying a detached text node\r\n  // https://connect.microsoft.com/IE/feedbackdetail/view/944330/invalid-argument-error-when-changing-nodevalue-of-a-text-node-removed-by-setting-innerhtml-on-an-ancestor\r\n  if (textInstance.parentNode) {\r\n    textInstance.nodeValue = newText;\r\n  }\r\n}\r\n```\r\n\r\nBut that feels like a band-aid solution. I'm curious what is causing the text node to unmount to begin-with."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11570",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11570/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11570/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11570/events",
            "html_url": "https://github.com/facebook/react/issues/11570",
            "id": 274519273,
            "node_id": "MDU6SXNzdWUyNzQ1MTkyNzM=",
            "number": 11570,
            "title": "Reword \"unknown property\" warning to be less obnoxious",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 40929153,
                "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 11,
            "created_at": "2017-11-16T13:40:45Z",
            "updated_at": "2020-01-08T19:17:54Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "I thought before it might cause knee jerk reactions, and it does in practice: https://twitter.com/freeformflo/status/928454078903894016\r\n\r\nI think we should change the phrasing to a more neutral one. Potentially explaining *why* we prefer camel case. "
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11566",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11566/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11566/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11566/events",
            "html_url": "https://github.com/facebook/react/issues/11566",
            "id": 274309362,
            "node_id": "MDU6SXNzdWUyNzQzMDkzNjI=",
            "number": 11566,
            "title": "[Umbrella] New algorithm for resuming interrupted work",
            "user": {
              "login": "acdlite",
              "id": 3624098,
              "node_id": "MDQ6VXNlcjM2MjQwOTg=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/acdlite",
              "html_url": "https://github.com/acdlite",
              "followers_url": "https://api.github.com/users/acdlite/followers",
              "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
              "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
              "organizations_url": "https://api.github.com/users/acdlite/orgs",
              "repos_url": "https://api.github.com/users/acdlite/repos",
              "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
              "received_events_url": "https://api.github.com/users/acdlite/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 1,
            "created_at": "2017-11-15T21:24:06Z",
            "updated_at": "2020-01-08T19:17:54Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "*Resuming* is the ability to re-use fibers after they are interrupted by a higher-priority update. Take the following scenario: A component is updated at a normal, async priority. Before the update is finished processing, a higher-priority update is scheduled (let's say it's synchronous, though it could also be a higher-priority async update). The sync update *interrupts* the async update, leaving it unfinished. After the sync update finishes, we go back to processing the interrupted, async update. It's possible, and even likely, that the interrupted work wasn't touched by the sync work and can be *resumed* without starting over completely.\r\n\r\nThis is an important optimization for several async features we have in mind, including error handling, blockers, pre-rendering, and hidden priority.\r\n\r\nWe used to have an implementation of resuming that mostly worked but had some bugs. A few months ago, I spent some time [identifying the bugs using fuzz testing](https://github.com/facebook/react/pull/9952) and fixing them by iterating on the existing algorithm. I eventually got a [version working that passed all the tests](https://github.com/facebook/react/pull/9695). But even this version didn't have all of the features we wanted, and the algorithm seemed inherently flawed. So we decided it would be best to scrap the existing algorithm and revisit resuming in the future.\r\n\r\nWe now believe we have a better idea of how resuming should work. I'm going to split the work into multiple PRs, and use this issue to keep track of our progress.\r\n\r\nMy apologies if some of my descriptions are hard to follow. It can be difficult to describe without resorting to jargon. I'll iterate on this issue as I work.\r\n\r\n\r\nAlways reconcile against current child set (#11564)\r\n---------------------------------------------------\r\n\r\nThis is a small refactor that reflects what we already do without resuming: the set we reconcile against is always the current set. In the reverted resuming algorithm, the set we reconcile against was sometimes a work-in-progress set, and there are a few code paths that are left over from that implementation.\r\n\r\nStash interrupted children\r\n--------------------------\r\n\r\nWhen cloning a work-in-progress fiber from current, and there is already an existing work-in-progress that was interrupted, stash the interrupted work-in-progress children (and corresponding fields) in case we can reuse them later. In begin phase, add an additional check to see if incoming props/state match the interrupted props/state. If so, bail out and re-use the interrupted children. If not, the interrupted children are no longer useful, because we're about to re-render the parent and overwrite them. (Unmounted fibers actually can be re-used even if we re-render the parent; see next step.)\r\n\r\nThis gets us back to the same functionality we had in the old resuming algorithm. We can now resume interrupted children if we come back to it at the same priority at which it was originally rendered. The main limitation is that the work is lost if the parent is re-rendered at a higher priority.\r\n\r\n**Need a way to distinguish between a work-in-progress fiber and the \"previous current\" fiber*\r\n\r\nPool unmounted, interrupted children so they can resume even if parent re-renders at higher priority\r\n------------------------------------------------------------------------------------\r\n\r\nWhen a fiber is about to be re-rendered, and there are interrupted children that could not be reused, search through the interrupted children and find the ones that are unmounted (don't have an alternate). Stash the unmounted children in a separate set; they can be kept around indefinitely without being overwritten. This set acts like a pool of children. The next time the parent is re-rendered at the priority of the interrupted children, check the pool for matches before creating new fibers.\r\n\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11565",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11565/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11565/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11565/events",
            "html_url": "https://github.com/facebook/react/issues/11565",
            "id": 274279505,
            "node_id": "MDU6SXNzdWUyNzQyNzk1MDU=",
            "number": 11565,
            "title": "React-test-renderer: support for portal",
            "user": {
              "login": "alansouzati",
              "id": 1207250,
              "node_id": "MDQ6VXNlcjEyMDcyNTA=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/1207250?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/alansouzati",
              "html_url": "https://github.com/alansouzati",
              "followers_url": "https://api.github.com/users/alansouzati/followers",
              "following_url": "https://api.github.com/users/alansouzati/following{/other_user}",
              "gists_url": "https://api.github.com/users/alansouzati/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/alansouzati/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/alansouzati/subscriptions",
              "organizations_url": "https://api.github.com/users/alansouzati/orgs",
              "repos_url": "https://api.github.com/users/alansouzati/repos",
              "events_url": "https://api.github.com/users/alansouzati/events{/privacy}",
              "received_events_url": "https://api.github.com/users/alansouzati/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710400704,
                "node_id": "MDU6TGFiZWw3MTA0MDA3MDQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
                "name": "Component: Test Renderer",
                "color": "006b75",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 23,
            "created_at": "2017-11-15T19:40:29Z",
            "updated_at": "2020-01-13T19:36:07Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nThis test\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport renderer from 'react-test-renderer';\r\n\r\nconst Drop = () => (\r\n  createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )\r\n);\r\n\r\ntest('Drop renders', () => {\r\n  const component = renderer.create(\r\n    <div>\r\n      <input />\r\n      <Drop />\r\n    </div>\r\n  );\r\n  const tree = component.toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\n\r\nfails with\r\n\r\n> Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\r\n\r\nThis test passes if I wrap createPortal in a container.\r\n\r\n```javascript\r\n<div>\r\n  {createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )}\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLastest\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11503",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11503/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11503/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11503/events",
            "html_url": "https://github.com/facebook/react/issues/11503",
            "id": 272615283,
            "node_id": "MDU6SXNzdWUyNzI2MTUyODM=",
            "number": 11503,
            "title": "Formalize top-level ES exports",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 55,
            "created_at": "2017-11-09T15:56:42Z",
            "updated_at": "2020-01-08T19:17:54Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Currently we only ship CommonJS versions of all packages. However we might want to ship them as ESM in the future (https://github.com/facebook/react/issues/10021).\r\n\r\nWe can't quite easily do this because we haven't really decided on what top-level ES exports would look like from each package. For example, does `react` have a bunch of named exports, but also a default export called `React`? Should we encourage people to `import *` for better tree shaking? What about `react-test-renderer/shallow` that currently exports a class (and thus would start failing in Node were it converted to be a default export)?"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11461",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11461/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11461/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11461/events",
            "html_url": "https://github.com/facebook/react/issues/11461",
            "id": 271271397,
            "node_id": "MDU6SXNzdWUyNzEyNzEzOTc=",
            "number": 11461,
            "title": "[RN] Don't receive events on unknown tags",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710722093,
                "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 0,
            "created_at": "2017-11-05T12:03:39Z",
            "updated_at": "2020-01-08T19:17:53Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Flow uncovered this:\r\n\r\nhttps://github.com/facebook/react/blob/92b7b172cce9958b846844f0b46fd7bbd8c5140d/packages/react-native-renderer/src/ReactNativeEventEmitter.js#L174-L175\r\n\r\nNeed to verify if we can just return early and not process the events in this case."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11417",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11417/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11417/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11417/events",
            "html_url": "https://github.com/facebook/react/issues/11417",
            "id": 270120147,
            "node_id": "MDU6SXNzdWUyNzAxMjAxNDc=",
            "number": 11417,
            "title": "Treat value={null} as empty string",
            "user": {
              "login": "IndifferentDisdain",
              "id": 1360908,
              "node_id": "MDQ6VXNlcjEzNjA5MDg=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/1360908?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/IndifferentDisdain",
              "html_url": "https://github.com/IndifferentDisdain",
              "followers_url": "https://api.github.com/users/IndifferentDisdain/followers",
              "following_url": "https://api.github.com/users/IndifferentDisdain/following{/other_user}",
              "gists_url": "https://api.github.com/users/IndifferentDisdain/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/IndifferentDisdain/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/IndifferentDisdain/subscriptions",
              "organizations_url": "https://api.github.com/users/IndifferentDisdain/orgs",
              "repos_url": "https://api.github.com/users/IndifferentDisdain/repos",
              "events_url": "https://api.github.com/users/IndifferentDisdain/events{/privacy}",
              "received_events_url": "https://api.github.com/users/IndifferentDisdain/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": true,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 17,
            "created_at": "2017-10-31T21:10:34Z",
            "updated_at": "2019-03-15T17:10:34Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Per @gaearon's request, I'm opening up a new issue based on https://github.com/facebook/react/issues/5013#issuecomment-340898727.\r\n\r\nCurrently, if you create an input like `<input value={null} onChange={this.handleChange} />`, the null value is a flag for React to treat this as an uncontrolled input, and a console warning is generated. However, this is often a valid condition. For example, when creating a new object (initialized w/ default values from the server then passed to the component as props) in a form that requires address, Address Line 2 is often optional. As such, passing null as value to this controlled component is a very reasonable thing to do.\r\n\r\nOne can do a workaround, i.e. `<input value={foo || ''} onChange={this.handleChange} />`, but this is an error-prone approach and quite awkward.\r\n\r\nPer issue referenced above, the React team has planned on treating null as an empty string, but that hasn't yet occurred. I'd like to propose tackling this problem in the near future.\r\n\r\nPlease let me know if I can help further."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11387",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11387/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11387/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11387/events",
            "html_url": "https://github.com/facebook/react/issues/11387",
            "id": 269148824,
            "node_id": "MDU6SXNzdWUyNjkxNDg4MjQ=",
            "number": 11387,
            "title": "createPortal: support option to stop propagation of events in React tree",
            "user": {
              "login": "kib357",
              "id": 347668,
              "node_id": "MDQ6VXNlcjM0NzY2OA==",
              "avatar_url": "https://avatars3.githubusercontent.com/u/347668?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/kib357",
              "html_url": "https://github.com/kib357",
              "followers_url": "https://api.github.com/users/kib357/followers",
              "following_url": "https://api.github.com/users/kib357/following{/other_user}",
              "gists_url": "https://api.github.com/users/kib357/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/kib357/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/kib357/subscriptions",
              "organizations_url": "https://api.github.com/users/kib357/orgs",
              "repos_url": "https://api.github.com/users/kib357/repos",
              "events_url": "https://api.github.com/users/kib357/events{/privacy}",
              "received_events_url": "https://api.github.com/users/kib357/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 75,
            "created_at": "2017-10-27T15:36:49Z",
            "updated_at": "2020-01-09T14:55:26Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11369",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11369/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11369/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11369/events",
            "html_url": "https://github.com/facebook/react/issues/11369",
            "id": 268762895,
            "node_id": "MDU6SXNzdWUyNjg3NjI4OTU=",
            "number": 11369,
            "title": "React should recognize the `valueAsDate` property on DOM elements",
            "user": {
              "login": "kreba",
              "id": 1609828,
              "node_id": "MDQ6VXNlcjE2MDk4Mjg=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/1609828?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/kreba",
              "html_url": "https://github.com/kreba",
              "followers_url": "https://api.github.com/users/kreba/followers",
              "following_url": "https://api.github.com/users/kreba/following{/other_user}",
              "gists_url": "https://api.github.com/users/kreba/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/kreba/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/kreba/subscriptions",
              "organizations_url": "https://api.github.com/users/kreba/orgs",
              "repos_url": "https://api.github.com/users/kreba/repos",
              "events_url": "https://api.github.com/users/kreba/events{/privacy}",
              "received_events_url": "https://api.github.com/users/kreba/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 7,
            "created_at": "2017-10-26T13:37:14Z",
            "updated_at": "2020-01-10T11:39:51Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.\r\n\r\nThe `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.) \r\nThe browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)\r\n\r\nAs indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11347",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11347/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11347/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11347/events",
            "html_url": "https://github.com/facebook/react/issues/11347",
            "id": 267902244,
            "node_id": "MDU6SXNzdWUyNjc5MDIyNDQ=",
            "number": 11347,
            "title": "RFC: Plan for custom element attributes/properties in React 17",
            "user": {
              "login": "robdodson",
              "id": 1066253,
              "node_id": "MDQ6VXNlcjEwNjYyNTM=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/1066253?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/robdodson",
              "html_url": "https://github.com/robdodson",
              "followers_url": "https://api.github.com/users/robdodson/followers",
              "following_url": "https://api.github.com/users/robdodson/following{/other_user}",
              "gists_url": "https://api.github.com/users/robdodson/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/robdodson/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/robdodson/subscriptions",
              "organizations_url": "https://api.github.com/users/robdodson/orgs",
              "repos_url": "https://api.github.com/users/robdodson/repos",
              "events_url": "https://api.github.com/users/robdodson/events{/privacy}",
              "received_events_url": "https://api.github.com/users/robdodson/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 83,
            "created_at": "2017-10-24T05:28:49Z",
            "updated_at": "2020-01-06T23:32:48Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements.\r\n\r\n# TOC/Summary\r\n\r\n- Background\r\n- Proposals\r\n  * Option 1: Only set properties\r\n    + Pros\r\n      - Easy to understand/implement\r\n      - Avoids conflict with future global attributes\r\n      - Takes advantage of custom element \"upgrade\"\r\n      - Custom elements treated like any other React component\r\n    + Cons\r\n      - Possibly a breaking change\r\n      - Need ref to set attribute\r\n      - Not clear how server-side rendering would work\r\n  * Option 2: Properties-if-available\r\n    + Pros\r\n      - Non-breaking change\r\n    + Cons\r\n      - Developers need to understand the heuristic\r\n      - Falling back to attributes may conflict with future globals\r\n  * Option 3: Differentiate properties with a sigil\r\n    + Pros\r\n      - Non-breaking change that developers can opt-in to\r\n      - Similar to how other libraries handle attributes/properties\r\n      - The system is explicit\r\n    + Cons\r\n      - It’s new syntax\r\n      - Not clear how server-side rendering would work\r\n  * Option 4: Add an attributes object\r\n    + Pros\r\n      - The system is explicit\r\n      - Extending syntax may also solve issues with event handling\r\n    + Cons\r\n      - It’s new syntax\r\n      - It may be a breaking change\r\n      - It may be a larger change than any of the previous proposals\r\n  * Option 5: An API for consuming custom elements\r\n    + Pros\r\n      - The system is explicit\r\n      - Non-breaking change\r\n      - Idiomatic to React\r\n    + Cons\r\n      - Could be a lot of work for a complex component\r\n      - May bloat bundle size\r\n      - Config needs to keep pace with the component\r\n\r\n# Background\r\n\r\nWhen React tries to pass data to a custom element it always does so using HTML attributes.\r\n\r\n```jsx\r\n<x-foo bar={baz}> // same as setAttribute('bar', baz)\r\n```\r\n\r\nBecause attributes must be serialized to strings, this approach creates problems when the data being passed is an object or array. In that scenario, we end up with something like:\r\n\r\n```html\r\n<x-foo bar=\"[object Object]\">\r\n```\r\n\r\nThe workaround for this is to use a `ref` to manually set the property.\r\n\r\n```jsx\r\n<x-foo ref={el => el.bar = baz}>\r\n```\r\n\r\nThis workaround feels a bit unnecessary as the majority of custom elements being shipped today are written with libraries which automatically generate JavaScript properties that back all of their exposed attributes. And anyone hand-authoring a vanilla custom element is [encouraged to follow this practice](https://developers.google.com/web/fundamentals/web-components/best-practices#attributes-properties) as well. We'd like to ideally see runtime communication with custom elements in React use JavaScript properties by default.\r\n\r\nThis doc outlines a few proposals for how React could be updated to make this happen.\r\n\r\n# Proposals\r\n\r\n## Option 1: Only set properties\r\n\r\nRather than try to decide if a property or attribute should be set, React could *always* set properties on custom elements. React would **NOT** check to see if the property exists on the element beforehand.\r\n\r\n**Example:**\r\n\r\n```jsx\r\n<x-foo bar={baz}>\r\n```\r\n\r\nThe above code would result in React setting the `.bar` property of the `x-foo` element equal to the value of `baz`.\r\n\r\nFor camelCased property names, React could use the same style it uses today for properties like `tabIndex`.\r\n\r\n```jsx\r\n<x-foo squidInk={pasta}> // sets .squidInk = pasta\r\n```\r\n\r\n### Pros\r\n\r\n#### Easy to understand/implement\r\n\r\nThis model is simple, explicit, and dovetails with React’s [\"JavaScript-centric API to the DOM\"](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this).\r\n\r\nAny element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all \"just work\" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attributes--or-properties) as that mirrors how *modern* (i.e. not oddballs like `<input>`) HTML5 elements (`<video>`, `<audio>`, etc.) have been implemented.\r\n\r\n#### Avoids conflict with future global attributes\r\n\r\nWhen React sets an attribute on a custom element there’s always the risk that a future version of HTML will ship a similarly named attribute and break things. This concern was [discussed with spec authors](https://github.com/w3c/webcomponents/issues/654) but there is no clear solution to the problem. Avoiding attributes entirely (except when a developer explicitly sets one using `ref`) may sidestep this issue until the browsers come up with a better solution.\r\n\r\n#### Takes advantage of custom element \"upgrade\"\r\n\r\nCustom elements can be lazily [upgraded](https://developers.google.com/web/fundamentals/web-components/customelements#upgrades) on the page and some PRPL patterns rely on this technique. During the upgrade process, a custom element can access the properties passed to it by React—even if those properties were set before the definition loaded—and use them to render initial state.\r\n\r\n#### Custom elements treated like any other React component\r\n\r\nWhen React components pass data to one another they already use properties. This would just make custom elements behave the same way.\r\n\r\n### Cons\r\n\r\n#### Possibly a breaking change\r\n\r\nIf a developer has been hand-authoring vanilla custom elements which only have an attributes API, then they will need to update their code or their app will break. The fix would be to use a `ref` to set the attribute (explained below).\r\n\r\n#### Need ref to set attribute\r\n\r\nBy changing the behavior so properties are preferred, it means developers will need to use a `ref` in order to explicitly set an attribute on a custom element.\r\n\r\n```jsx\r\n<custom-element ref={el => el.setAttribute('my-attr', val)} />\r\n```\r\n\r\nThis is just a reversal of the current behavior where developers need a `ref` in order to set a property. Since developers should rarely need to set attributes on custom elements, this seems like a reasonable trade-off.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nIt's not clear how this model would map to server-side rendering custom elements. React could assume that the properties map to similarly named attributes and attempt to set those on the server, but this is far from bulletproof and would possibly require a heuristic for things like camelCased properties -> dash-cased attributes.\r\n\r\n## Option 2: Properties-if-available\r\n\r\nAt runtime React could attempt to detect if a property is present on a custom element. If the property is present React will use it, otherwise it will fallback to setting an attribute. This is the model Preact uses to deal with custom elements.\r\n\r\n**Pseudocode implementation:**\r\n\r\n```js\r\nif (propName in element) {\r\n  element[propName] = value;\r\n} else {\r\n  element.setAttribute(propName.toLowerCase(), value);\r\n}\r\n```\r\n\r\n**Possible steps:**\r\n\r\n* If an element has a defined property, React will use it.\r\n\r\n* If an element has an undefined property, and React is trying to pass it primitive data (string/number/boolean), it will use an attribute.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If an element has an undefined property, and React is trying to pass it an object/array it will set it as a property. This is because some-attr=\"[object Object]” is not useful.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a string/number/boolean, it will use an attribute.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a object/array, it will not do anything.\r\n\r\n### Pros\r\n\r\n#### Non-breaking change\r\n\r\nIt is possible to create a custom element that only uses attributes as its interface. This authoring style is **NOT** encouraged, but it may happen regardless. If a custom element author is relying on this behavior then this change would be non-breaking for them.\r\n\r\n### Cons\r\n\r\n#### Developers need to understand the heuristic\r\n\r\nDevelopers might be confused when React sets an attribute instead of a property depending on how they’ve chosen to load their element.\r\n\r\n#### Falling back to attributes may conflict with future globals\r\n\r\nSebastian [raised a concern](https://github.com/facebook/react/issues/10399#issuecomment-320847065) that using `in` to check for the existence of a property on a custom element might accidentally detect a property on the superclass (HTMLElement).\r\n\r\nThere are also other potential conflicts with global attributes [discussed previously](#avoids-conflict-with-future-global-attributes) in this doc.\r\n\r\n## Option 3: Differentiate properties with a sigil\r\n\r\nReact could continue setting attributes on custom elements, but provide a sigil that developers could use to explicitly set properties instead. This is similar to [the approach used by Glimmer.js](https://www.emberjs.com/blog/2017/10/10/glimmer-progress-report.html#toc_component-attributes).\r\n\r\n**Glimmer example:**\r\n\r\n```html\r\n<custom-img @src=\"corgi.jpg\" @hiResSrc=\"corgi@2x.jpg\" width=\"100%\">\r\n```\r\n\r\nIn the above example, the @ sigil indicates that `src` and `hiResSrc` should pass data to the custom element using properties, and `width` should be serialized to an attribute string.\r\n\r\nBecause React components already pass data to one another using properties, there would be no need for them to use the sigil (although it would work if they did, it would just be redundant). Instead, it would primarily be used as an explicit instruction to pass data to a custom element using JavaScript properties.\r\n\r\n*h/t to @developit of Preact for suggesting this approach :)*\r\n\r\n### Pros\r\n\r\n#### Non-breaking change that developers can opt-in to\r\n\r\nAll pre-existing React + custom element apps would continue to work exactly as they have. Developers could choose if they wanted to update their code to use the new sigil style.\r\n\r\n#### Similar to how other libraries handle attributes/properties\r\n\r\nSimilar to Glimmer, both Angular and Vue use modifiers to differentiate between attributes and properties.\r\n\r\n**Vue example:**\r\n\r\n```html\r\n<!-- Vue will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element :foo=\"bar” :squid.prop=”ink”>\r\n```\r\n\r\n**Angular example:**\r\n\r\n```html\r\n<!-- Angular will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element [attr.foo]=\"bar” [squid]=”ink”>\r\n```\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nShould the sigil switch to using a similarly named attribute?\r\n\r\n## Option 4: Add an attributes object\r\n\r\nReact could add additional syntax which lets authors explicitly pass data as attributes. If developers do not use this attributes object, then their data will be passed using JavaScript properties.\r\n\r\n**Example:**\r\n\r\n```jsx\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst width = '100%';\r\nconst ReactElement = <Test\r\n  foo={bar} // uses JavaScript property\r\n  attrs={{ hello, width }} // serialized to attributes\r\n/>;\r\n```\r\n\r\nThis idea was [originally proposed](https://gist.github.com/treshugart/2fb509a8828adf7fee5245bfa2a54ba7) by @treshugart, author of Skate.js, and is implemented in the [val](https://github.com/skatejs/val) library.\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n#### Extending syntax may also solve issues with event handling\r\n\r\n*Note: This is outside the scope of this document but maybe worth mentioning :)*\r\n\r\nIssue [#7901](https://github.com/facebook/react/issues/7901) requests that React bypass its synthetic event system when declarative event handlers are added to custom elements. Because custom element event names are arbitrary strings, it means they can be capitalized in any fashion. To bypass the synthetic event system today will also mean needing to come up with a heuristic for mapping event names from JSX to `addEventListener`.\r\n\r\n```js\r\n// should this listen for: 'foobar', 'FooBar', or 'fooBar'?\r\nonFooBar={handleFooBar}\r\n```\r\n\r\nHowever, if the syntax is extended to allow attributes it could also be extended to allow events as well:\r\n\r\n```js\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst SquidChanged = e => console.log('yo');\r\nconst ReactElement = <Test\r\n  foo={bar}\r\n  attrs={{ hello }}\r\n  events={{ SquidChanged}} // addEventListener('SquidChanged', …)\r\n/>;\r\n```\r\n\r\nIn this model the variable name is used as the event name. No heuristic is needed.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### It may be a breaking change\r\n\r\nIf any components already rely on properties named `attrs` or `events`, it could break them.\r\n\r\n#### It may be a larger change than any of the previous proposals\r\n\r\nFor React 17 it may be easier to make an incremental change (like one of the previous proposals) and position this proposal as something to take under consideration for a later, bigger refactor.\r\n\r\n## Option 5: An API for consuming custom elements\r\n\r\n*This proposal was offered by @sophiebits and @gaearon from the React team*\r\n\r\nReact could create a new API for consuming custom elements that maps the element’s behavior with a configuration object.\r\n\r\n**Pseudocode example:**\r\n\r\n```js\r\nconst XFoo = ReactDOM.createCustomElementType({\r\n  element: ‘x-foo’,\r\n  ‘my-attr’: // something that tells React what to do with it\r\n  someRichDataProp: // something that tells React what to do with it\r\n});\r\n```\r\n\r\nThe above code returns a proxy component, `XFoo` that knows how to pass data to a custom element depending on the configuration you provide. You would use this proxy component in your app instead of using the custom element directly.\r\n\r\n**Example usage:**\r\n\r\n```jsx\r\n<XFoo someRichDataProp={...} />\r\n```\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React the exact behavior they want.\r\n\r\n#### Non-breaking change\r\n\r\nDevelopers can opt-in to using the object or continue using the current system.\r\n\r\n#### Idiomatic to React\r\n\r\nThis change doesn’t require new JSX syntax, and feels more like other APIs in React. For example, PropTypes (even though it’s being moved into its own package) has a somewhat similar approach.\r\n\r\n### Cons\r\n\r\n#### Could be a lot of work for a complex component\r\n\r\nPolymer’s [paper-input](https://www.webcomponents.org/element/PolymerElements/paper-input/elements/paper-input) element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write.\r\n\r\n#### May bloat bundle size\r\n\r\nRelated to the above point, each custom element class now incurs the cost of its definition + its config object size.\r\n\r\n*Note: I'm not 100% sure if this is true. Someone more familiar with the React build process could verify.*\r\n\r\n#### Config needs to keep pace with the component\r\n\r\nEvery time the component does a minor version revision that adds a new property, the config will need to be updated as well. That’s not difficult, but it does add maintenance. Maybe if configs are generated from source this is less of a burden, but that may mean needing to create a new tool to generate configs for each web component library.\r\n\r\n\r\ncc @sebmarkbage @gaearon @developit @treshugart @justinfagnani"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11330",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11330/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11330/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11330/events",
            "html_url": "https://github.com/facebook/react/issues/11330",
            "id": 267503579,
            "node_id": "MDU6SXNzdWUyNjc1MDM1Nzk=",
            "number": 11330,
            "title": "Consider Publishing External requestIdleCallback Polyfill",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
              "login": "aweary",
              "id": 6886061,
              "node_id": "MDQ6VXNlcjY4ODYwNjE=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/aweary",
              "html_url": "https://github.com/aweary",
              "followers_url": "https://api.github.com/users/aweary/followers",
              "following_url": "https://api.github.com/users/aweary/following{/other_user}",
              "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
              "organizations_url": "https://api.github.com/users/aweary/orgs",
              "repos_url": "https://api.github.com/users/aweary/repos",
              "events_url": "https://api.github.com/users/aweary/events{/privacy}",
              "received_events_url": "https://api.github.com/users/aweary/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "aweary",
                "id": 6886061,
                "node_id": "MDQ6VXNlcjY4ODYwNjE=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2017-10-22T22:16:59Z",
            "updated_at": "2020-01-08T19:18:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "We require a high fidelity requestIdleCallback polyfill and pretty much all of them out there are not. We can always fallback to our internal fallback but that still means that others have to ship their own, which isn't cooperating with ours. (Even at FB we have two.)\r\n\r\nOur built-in one is not yet implementing the `timeout` option but since we want to start using it, we probably should.\r\n\r\nThis can become even more interesting if a [priority queue option](https://github.com/w3c/requestidlecallback/issues/68) lands (if it is sufficient for us), since we can start polyfilling that option even in native requestIdleCallback implementations."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11211",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11211/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11211/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11211/events",
            "html_url": "https://github.com/facebook/react/issues/11211",
            "id": 265143974,
            "node_id": "MDU6SXNzdWUyNjUxNDM5NzQ=",
            "number": 11211,
            "title": "Use the native `beforeinput` event if it's supported",
            "user": {
              "login": "ianstormtaylor",
              "id": 311752,
              "node_id": "MDQ6VXNlcjMxMTc1Mg==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/311752?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ianstormtaylor",
              "html_url": "https://github.com/ianstormtaylor",
              "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
              "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
              "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
              "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
              "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
              "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
              "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 12,
            "created_at": "2017-10-13T01:45:04Z",
            "updated_at": "2020-01-10T20:02:13Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now, the synthetic `onBeforeInput` event is being created based on two other events:\r\n\r\n- `textInput` when possible—which is in Webkit.\r\n- `keypress` as a fallback.\r\n\r\nBut these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:\r\n\r\n- `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.\r\n- `getTargetRanges()` tells you where the input is taking place in the DOM.\r\n\r\nRight now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:\r\n\r\n- `beforeinput`\r\n- `textInput`\r\n- `keypress`\r\n\r\nWhich guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.\r\n\r\n---\r\n\r\nThe `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).) \r\n\r\nWithout that extra information you have to fallback to hackier behavior—allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.\r\n\r\n---\r\n\r\nThere is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.\r\n\r\n\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11101",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11101/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11101/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11101/events",
            "html_url": "https://github.com/facebook/react/issues/11101",
            "id": 262961656,
            "node_id": "MDU6SXNzdWUyNjI5NjE2NTY=",
            "number": 11101,
            "title": "Type Fiber by tag as disjoint union",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 40929153,
                "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 0,
            "created_at": "2017-10-04T23:26:51Z",
            "updated_at": "2020-01-08T19:18:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "@sebmarkbage tried this in https://github.com/facebook/react/pull/8545 but Flow couldn't handle it well.\r\nMight be worth trying again someday."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11097",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11097/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11097/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11097/events",
            "html_url": "https://github.com/facebook/react/issues/11097",
            "id": 262945079,
            "node_id": "MDU6SXNzdWUyNjI5NDUwNzk=",
            "number": 11097,
            "title": "Umbrella: React DOM Bugs",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710615342,
                "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 4,
            "created_at": "2017-10-04T22:02:59Z",
            "updated_at": "2020-01-08T19:18:24Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "Since I was going through all open issues yesterday and today, I also compiled a list of things that seem broken in ReactDOM, grouped by areas.\r\n\r\nI don’t think all of these issues are equally important but I’d like to start a discussion around how we can start attacking them—both in shorter and in longer term. For example any potential fixes to the onChange event logic would need to take https://github.com/facebook/react/issues/9657 into account (or even inform it).\r\n\r\nI think it would be a good topic for our next chat, cc @jquense @aweary @nhunzaker. Maybe we could also broadcast it this time? 😃  \r\n\r\n## Autofill\r\n\r\n* [ ] https://github.com/facebook/react/issues/1159 Provide a way to handle browser-autocompleted form values on controlled components\r\n* [ ] https://github.com/facebook/react/issues/7328 IE 11 and Edge no longer prompt to remember password on controlled form\r\n* [ ] https://github.com/facebook/react/issues/10468 DOM Fixture Form Coverage: Restored State and Auto-fill \r\n\r\n## Composition Events\r\n\r\n### Issues\r\n\r\n* [x] https://github.com/facebook/react/issues/10217 Incorrect data in compositionend event when typing Korean on IE11\r\n* [ ] https://github.com/facebook/react/issues/3926 Change event fires too many times when inputing Chinese characters\r\n* [ ] https://github.com/facebook/react/issues/8423 onChange does not work well with IE11 at Japanese IME. in React 15.4.0\r\n\r\n### PRs\r\n\r\n* [x] https://github.com/facebook/react/pull/7926 Try to generate a beforeInput event for buggy composition scenarios in IE\r\n* [x] https://github.com/facebook/react/pull/8438 Handle composition events in ChangeEventPlugin\r\n\r\n## Mouse Enter / Leave\r\n\r\n* [ ] https://github.com/facebook/react/issues/4251 mouseenter fires on disabled inputs whereas mouseleave does not\r\n* [ ] https://github.com/facebook/react/issues/10109 Mouseenter event not triggered when cursor moves from disabled button\r\n* [ ] https://github.com/facebook/react/issues/7135 onMouseEnter propagation in double reactroot\r\n* [ ] https://github.com/facebook/react/issues/6807 onMouseLeave not working as expected\r\n* [ ] https://github.com/facebook/react/issues/13956 onMouseEnter doesn't fire under removed node\r\n\r\n## Input, Checkbox, and Select\r\n\r\n* [x] https://github.com/facebook/react/issues/4672 Change event does not fire in IE and Edge under certain circumstances\r\n* [x] https://github.com/facebook/react/issues/4854 Pressing spacebar on a checked radio button only fires click in some browsers\r\n* [x] https://github.com/facebook/react/issues/6368 Input type 'email' as controlled component does not control white spaces\r\n* [ ] https://github.com/facebook/react/issues/6951 Changing state in onFocus and onChange for a select multiple element does not work in Firefox\r\n* [x] https://github.com/facebook/react/issues/7024 select onChange not firing when using keyboard\r\n* [ ] https://github.com/facebook/react/issues/7281 Input onChange not triggered every time in IE11 if e.preventDefault() used\r\n* [ ] https://github.com/facebook/react/issues/7489 input element `setSelectionRange` after backspace does not work in IE10\r\n* [x] https://github.com/facebook/react/issues/7630 Radio buttons are not correctly checked when using multiple lists of radio buttons\r\n* [ ] https://github.com/facebook/react/issues/7769 input autoFocus causes focus to be emitted before ref\r\n* [ ] https://github.com/facebook/react/issues/8514 Undo behavior in controlled textareas works differently from the default behaviour in chrome\r\n* [ ] https://github.com/facebook/react/issues/8531 IE10 triggers onChange twice when replacing a text selection \r\n* [x] https://github.com/facebook/react/issues/8642 textarea + onFocus + stopPropagation = incorrect cursor rendering on Firefox\r\n* [x] https://github.com/facebook/react/issues/8876 onBeforeInput fires after Edge updates the DOM\r\n* [ ] https://github.com/facebook/react/issues/8938 Clear button on iOS date input does not return correct event value \r\n* [ ] https://github.com/facebook/react/issues/9023 event.preventDefault in click handler does not prevent onChange from being called \r\n* [x] https://github.com/facebook/react/issues/11010 Reset of select ignores defaultValue\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/11073",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/11073/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/11073/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/11073/events",
            "html_url": "https://github.com/facebook/react/issues/11073",
            "id": 262588829,
            "node_id": "MDU6SXNzdWUyNjI1ODg4Mjk=",
            "number": 11073,
            "title": "Performance enhancements in niche situations",
            "user": {
              "login": "dakom",
              "id": 6406986,
              "node_id": "MDQ6VXNlcjY0MDY5ODY=",
              "avatar_url": "https://avatars3.githubusercontent.com/u/6406986?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/dakom",
              "html_url": "https://github.com/dakom",
              "followers_url": "https://api.github.com/users/dakom/followers",
              "following_url": "https://api.github.com/users/dakom/following{/other_user}",
              "gists_url": "https://api.github.com/users/dakom/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/dakom/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/dakom/subscriptions",
              "organizations_url": "https://api.github.com/users/dakom/orgs",
              "repos_url": "https://api.github.com/users/dakom/repos",
              "events_url": "https://api.github.com/users/dakom/events{/privacy}",
              "received_events_url": "https://api.github.com/users/dakom/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2017-10-03T21:14:04Z",
            "updated_at": "2017-11-03T15:25:10Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "I hit on a couple things that were a bit surprising to me... not sure what I'm really asking here, other than if these things are documented somewhere. Also kinda just going with the flow where this seems to be the place to raise generic \"issues\" even if they're not bugs :)\r\n\r\n1. keys can make things slower\r\n\r\nI had a bunch of items, and the only thing that changed was their x/y positions. adding a key with index made rendering slower. It's possible this is short-sighted though since it could very well change once that \"layer\" has more items changing above/below it, but I found it interesting.\r\n\r\n2. rendering null makes a _huge_ difference\r\n\r\nI had two test cases - a full graphics pipeline vs. an essentially empty POJO renderer. The difference in speed didn't matter about the data or graphics, but rather about what was returned in the components `render()`. For DOM this doesn't work of course - but for custom renderers, when it's known that a certain type of element will be an edge node - doing the side effects in render() (or some other lifecycle) and then returning `null` is _significantly_ faster than even a straight functional component that returns a simple element (which does the same side effects). This makes sense, since react then has less branches to consider (even if those branches point to nothing other than simple objects).\r\n\r\n\r\n\r\n\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10879",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10879/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10879/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10879/events",
            "html_url": "https://github.com/facebook/react/issues/10879",
            "id": 261028024,
            "node_id": "MDU6SXNzdWUyNjEwMjgwMjQ=",
            "number": 10879,
            "title": "\"Did not expect server HTML to contain the text node\" due to whitespace in React 16",
            "user": {
              "login": "TimoRuetten",
              "id": 7010059,
              "node_id": "MDQ6VXNlcjcwMTAwNTk=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/7010059?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/TimoRuetten",
              "html_url": "https://github.com/TimoRuetten",
              "followers_url": "https://api.github.com/users/TimoRuetten/followers",
              "following_url": "https://api.github.com/users/TimoRuetten/following{/other_user}",
              "gists_url": "https://api.github.com/users/TimoRuetten/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/TimoRuetten/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/TimoRuetten/subscriptions",
              "organizations_url": "https://api.github.com/users/TimoRuetten/orgs",
              "repos_url": "https://api.github.com/users/TimoRuetten/repos",
              "events_url": "https://api.github.com/users/TimoRuetten/events{/privacy}",
              "received_events_url": "https://api.github.com/users/TimoRuetten/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 21,
            "created_at": "2017-09-27T15:55:53Z",
            "updated_at": "2020-01-20T10:59:22Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears:\r\n\r\n`Warning: Did not expect server HTML to contain the text node \"\r\n  \" in <div>.`\r\n\r\nWe are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10871",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10871/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10871/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10871/events",
            "html_url": "https://github.com/facebook/react/issues/10871",
            "id": 260970779,
            "node_id": "MDU6SXNzdWUyNjA5NzA3Nzk=",
            "number": 10871,
            "title": "Multiple onFocus events fired on single focus in Safari",
            "user": {
              "login": "mbryla",
              "id": 1191038,
              "node_id": "MDQ6VXNlcjExOTEwMzg=",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1191038?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/mbryla",
              "html_url": "https://github.com/mbryla",
              "followers_url": "https://api.github.com/users/mbryla/followers",
              "following_url": "https://api.github.com/users/mbryla/following{/other_user}",
              "gists_url": "https://api.github.com/users/mbryla/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/mbryla/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/mbryla/subscriptions",
              "organizations_url": "https://api.github.com/users/mbryla/orgs",
              "repos_url": "https://api.github.com/users/mbryla/repos",
              "events_url": "https://api.github.com/users/mbryla/events{/privacy}",
              "received_events_url": "https://api.github.com/users/mbryla/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 15,
            "created_at": "2017-09-27T13:18:30Z",
            "updated_at": "2019-04-08T21:40:50Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "I'd like to report a possible bug.\r\n\r\n1. Brief description\r\nOnFocus synthetic event is fired multiple times on single focus occurrence in Safari. Expected behaviour is for it to be fired only once per focus.\r\n\r\n2. Live demo: https://codesandbox.io/s/101pnjxq27\r\n\r\n3. Minimal steps to reproduce\r\n- install create-react-app\r\n`$ npm install -g create-react-app`\r\n\r\n- create an example application\r\n`$ create-react-app input-focus-test`\r\n`$ cd input-focus-test`\r\n\r\n- edit application file and add input with onFocus event handler\r\n`$ vi src/App.js`\r\n\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  handleOnFocus = evt => {\r\n        console.log('handleOnFocus', evt);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to React</h1>\r\n        </header>\r\n        <p className=\"App-intro\">\r\n          To get started, edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p>\r\n          Input\r\n          <input onFocus={this.handleOnFocus}/>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n- start application\r\n`$ npm run start`\r\n\r\n- open up locahost:3000 in Safari\r\n- click on the input field with developer’s console opened\r\n- notice focus event fired multiple times\r\n\r\n4. Additional info\r\nThis issue has been found in the following environment:\r\n- macOS Sierra version 10.12.6 (also tested and found on High Sierra)\r\n- Safari 10.1.2 (also tested and found in Safari 10.0 and Safari 11, seems to work on latest Safari mobile, Chrome and Firefox)\r\n- React JS 15.5.4 (also tested and found in React 16)\r\n- example steps to reproduce above generated with create-react-app version 1.4.1\r\n\r\nSome of our observations that might come in handy:\r\n- this issue seems to behave randomly to some extent\r\n- event is usually fired twice when changing focus from input to input (so first click on input fires two events, consequential fire only one, but when changing focus to a different input field it fires twice again)\r\n- additional interesting behavior happens with multiple input fields; for instance with input fields 1 and 2, first focus on input 1 generates two events onFocus with input 1, but then focus on input 2 sometimes generates three events: onFocus with input 1, then input 2, then input 1 again as targets.\r\n"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10713",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10713/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10713/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10713/events",
            "html_url": "https://github.com/facebook/react/issues/10713",
            "id": 257866486,
            "node_id": "MDU6SXNzdWUyNTc4NjY0ODY=",
            "number": 10713,
            "title": "What should portals do when container has a child managed by React?",
            "user": {
              "login": "siddharthkp",
              "id": 1863771,
              "node_id": "MDQ6VXNlcjE4NjM3NzE=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/1863771?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/siddharthkp",
              "html_url": "https://github.com/siddharthkp",
              "followers_url": "https://api.github.com/users/siddharthkp/followers",
              "following_url": "https://api.github.com/users/siddharthkp/following{/other_user}",
              "gists_url": "https://api.github.com/users/siddharthkp/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/siddharthkp/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/siddharthkp/subscriptions",
              "organizations_url": "https://api.github.com/users/siddharthkp/orgs",
              "repos_url": "https://api.github.com/users/siddharthkp/repos",
              "events_url": "https://api.github.com/users/siddharthkp/events{/privacy}",
              "received_events_url": "https://api.github.com/users/siddharthkp/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 20,
            "created_at": "2017-09-14T21:46:38Z",
            "updated_at": "2019-11-12T13:38:00Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n`ReactDOM.unstable_createPortal(<Component/>, target)` appends the rendered component in the target instead of replacing the contents of the target\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**\r\n\r\nhttps://codesandbox.io/s/pjx8x9z2o7\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should replace the contents of the target with the new rendered component\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.0.0-rc.3\r\nreact-dom@16.0.0-rc.3\r\n\r\n\r\nNote: I might have completely misunderstood how portals work. @gaearon [encouraged me](https://twitter.com/dan_abramov/status/908443416173924352) to open this issue 😄 "
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10703",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10703/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10703/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10703/events",
            "html_url": "https://github.com/facebook/react/issues/10703",
            "id": 257551625,
            "node_id": "MDU6SXNzdWUyNTc1NTE2MjU=",
            "number": 10703,
            "title": "A faster diff algorithm",
            "user": {
              "login": "thomas-jeepe",
              "id": 12104698,
              "node_id": "MDQ6VXNlcjEyMTA0Njk4",
              "avatar_url": "https://avatars1.githubusercontent.com/u/12104698?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/thomas-jeepe",
              "html_url": "https://github.com/thomas-jeepe",
              "followers_url": "https://api.github.com/users/thomas-jeepe/followers",
              "following_url": "https://api.github.com/users/thomas-jeepe/following{/other_user}",
              "gists_url": "https://api.github.com/users/thomas-jeepe/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/thomas-jeepe/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/thomas-jeepe/subscriptions",
              "organizations_url": "https://api.github.com/users/thomas-jeepe/orgs",
              "repos_url": "https://api.github.com/users/thomas-jeepe/repos",
              "events_url": "https://api.github.com/users/thomas-jeepe/events{/privacy}",
              "received_events_url": "https://api.github.com/users/thomas-jeepe/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 23,
            "created_at": "2017-09-13T23:33:37Z",
            "updated_at": "2019-11-12T08:52:28Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "This is an invitation to discussion...\r\n\r\nSo, react is pretty freaking awesome and I used it quite a bit. One thing unfortunately where react is not as strong is in performance, which gave roots to Inferno and Preact. Although, this is generally a non-issue on desktop, while mobile might be a bottleneck.\r\n\r\nI know many members of the team have been working on improving bundle size (I believe through rollup support in a talk I heard), asynchronous scheduling, etc. I am also aware that @trueadm (the creator of inferno) joined the React team and is working on improving it.\r\n\r\nThe point I want to bring up is this library [petit-dom](https://github.com/yelouafi/petit-dom). It uses, is a diff algorithm (links that explain it provided in the README) and it seems to score incredibly on [vdom performance tests](https://github.com/krausest/js-framework-benchmark). In fact, it is only beat by 2 technologies, vanillajs and surplusjs [per the benchmark snapshot](https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html).\r\n\r\npetit-dom beats inferno, preact, mithril, vue, angular, etc. Of course, it is not a proper js framework, however the point I am trying to make is that it is far faster and a major difference between the other frameworks seems to be its diff algorithm.\r\n\r\nI realize this would mean a rewrite of a good portion of react-dom, which is why it is simply a discussion :D.\r\n\r\nIf this is unfeasible, or simply going after the wrong target/bottleneck, let me know as it is after all a discussion."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10657",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10657/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10657/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10657/events",
            "html_url": "https://github.com/facebook/react/issues/10657",
            "id": 256445676,
            "node_id": "MDU6SXNzdWUyNTY0NDU2NzY=",
            "number": 10657,
            "title": "BFcache, SSR and form elements",
            "user": {
              "login": "oliviertassinari",
              "id": 3165635,
              "node_id": "MDQ6VXNlcjMxNjU2MzU=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/oliviertassinari",
              "html_url": "https://github.com/oliviertassinari",
              "followers_url": "https://api.github.com/users/oliviertassinari/followers",
              "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
              "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
              "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
              "repos_url": "https://api.github.com/users/oliviertassinari/repos",
              "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
              "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 2,
            "created_at": "2017-09-09T15:23:08Z",
            "updated_at": "2020-01-09T21:52:46Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n Bug\r\n\r\n**What is the current behavior?**\r\n\r\nLet's say you start filling a form input type text or a select element with `foo`. Then you click on a link and press the back button. The browser back-forward cache will kick in and change the initial value of the form elements. We will get our `foo` value back.\r\nHowever, React doesn't account for it when the component is controlled.\r\n\r\nI have tried reproducing the behavior with jsfiddle with [react@latest](https://jsfiddle.net/d4fovwxx/) and [react@next](https://jsfiddle.net/vm5vouqo/) with no luck as the BFcache doesn't kick in without SSR.\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect React triggering a `onChange` event to replicate the actual form value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React `@latest`.\r\n- Chrome `@latest`\r\n\r\nWe have been [using the following hack](https://github.com/callemall/material-ui/blob/v1-beta/src/Input/Input.js#L349-#L356) on Material-UI:\r\n```js\r\n  componentDidMount() {\r\n    // Fix SSR issue with the go back feature of the browsers.\r\n    // Let's say you start filling the input with \"foo\", you change the page then after comes back.\r\n    // The browser will reset the input value to \"foo\", but we also need to tell React about it.\r\n    this.handleChange({\r\n      target: this.input,\r\n    });\r\n  }\r\n```\r\n\r\nBut it comes with issues: https://github.com/callemall/material-ui/pull/8110.\r\nSo instead, we tried simulating a change event [as suggested in StackOverflow](https://stackoverflow.com/questions/23892547/what-is-the-best-way-to-trigger-onchange-event-in-react-js) but it doesn't work anymore\r\n```js\r\nvar event = new Event('input', { bubbles: true });\r\nelement.dispatchEvent(event);\r\n```\r\n\r\nSo for now, we are going to disable the BFcache with `<form autoComplete=\"off\">`."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10589",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10589/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10589/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10589/events",
            "html_url": "https://github.com/facebook/react/issues/10589",
            "id": 254514316,
            "node_id": "MDU6SXNzdWUyNTQ1MTQzMTY=",
            "number": 10589,
            "title": "Make on/off, yes/no boolean attributes work",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 6,
            "created_at": "2017-09-01T01:49:25Z",
            "updated_at": "2020-01-08T19:18:24Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "When you pass a boolean to some attributes (e.g. `autoSave`, `autoCorrect`) in 15, they don't work correctly because they actually want a specific string (`yes` and `no`). I think there were also some attributes that want `on` and `off`.\r\n\r\nLet's just “make them work”? Could use a special flag/whitelist for that. There should be very few of these.\r\n\r\nSimilarly we should probably make `<script crossOrigin />` be valid and turn into `<script crossOrigin=\"anonymous\" />`. Currently I don’t think this works on master."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10580",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10580/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10580/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10580/events",
            "html_url": "https://github.com/facebook/react/issues/10580",
            "id": 254194828,
            "node_id": "MDU6SXNzdWUyNTQxOTQ4Mjg=",
            "number": 10580,
            "title": "Implement Silent Updates in the State Update Queue",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 6,
            "created_at": "2017-08-31T02:48:27Z",
            "updated_at": "2020-01-08T19:18:23Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "[Reason React](https://github.com/reasonml/reason-react) has silent updates. Meaning it's a normal update in the state queue that can be reverted. The only difference is, it doesn't need a rerender by itself. If props have changed, it does rerender.\r\n\r\nUnclear if we expose this to the existing ClassComponent API or make it a feature of new APIs."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10506",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10506/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10506/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10506/events",
            "html_url": "https://github.com/facebook/react/issues/10506",
            "id": 251810580,
            "node_id": "MDU6SXNzdWUyNTE4MTA1ODA=",
            "number": 10506,
            "title": "Symbol Tagging for dangerouslySetInnerHTML to Help Prevent XSS",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 0,
            "created_at": "2017-08-22T01:13:23Z",
            "updated_at": "2020-01-08T19:18:23Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "If you're spreading props from a user provided source we have a XSS. E.g.\r\n\r\n```js\r\nvar data = JSON.parse(decodeURI(location.search.substr(1)));\r\n\r\nfunction Foo(props) {\r\n  return <div><div {...props} /><span>{props.content}</span></div>;\r\n}\r\n\r\nReactDOM.render(<Foo {...data} />, container);\r\n```\r\n\r\nThat's already true today because this URL is now an XSS hole:\r\n```\r\n?{\"content\":\"Hello\",\"dangerouslySetInnerHTML\":{\"__html\":\"<a%20onclick=\\\"alert(%27p0wned%27)\\\">Click%20me</a>\"}}\r\n```\r\n\r\nThis is very uncommon. There are many different ways to screw up getting user data. However doing that + also spreading is unusual. We decided in #3473 that React should add an extra layer of protection for these types of mistakes. This one is __much__ more uncommon than the one in #3473 though.\r\n\r\nYou should already have a pretty centralized way of sanitizing these objects so it seems to me that adding a Symbol to this object shouldn't be that big of a deal though.\r\n\r\nEither:\r\n\r\n```js\r\n{ $$typeof:Symbol.for('react.rawhtml'), __html: myHTML }\r\n```\r\nor:\r\n```js\r\n{ [Symbol.for('react.rawhtml')]: myHTML }\r\n```"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10474",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10474/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10474/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10474/events",
            "html_url": "https://github.com/facebook/react/issues/10474",
            "id": 250734072,
            "node_id": "MDU6SXNzdWUyNTA3MzQwNzI=",
            "number": 10474,
            "title": "The fake event trick for rethrowing errors in DEV fires unexpected global error handlers and makes testing harder",
            "user": {
              "login": "brandonbloom",
              "id": 119164,
              "node_id": "MDQ6VXNlcjExOTE2NA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/119164?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/brandonbloom",
              "html_url": "https://github.com/brandonbloom",
              "followers_url": "https://api.github.com/users/brandonbloom/followers",
              "following_url": "https://api.github.com/users/brandonbloom/following{/other_user}",
              "gists_url": "https://api.github.com/users/brandonbloom/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/brandonbloom/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/brandonbloom/subscriptions",
              "organizations_url": "https://api.github.com/users/brandonbloom/orgs",
              "repos_url": "https://api.github.com/users/brandonbloom/repos",
              "events_url": "https://api.github.com/users/brandonbloom/events{/privacy}",
              "received_events_url": "https://api.github.com/users/brandonbloom/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 45,
            "created_at": "2017-08-16T19:28:44Z",
            "updated_at": "2019-01-29T08:07:08Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "I'm trying to make use of componentDidCatch in the React 16 beta. I already had a global window error handler which was working fine, but it unexpectedly catches errors that I would expect componentDidCatch to have handled. That is, component-local errors are being treated as window-global errors in dev builds.\r\n\r\nThe problem seems to stem from `invokeGuardedCallbackDev` in `ReactErrorUtils.js`. I think that this entire `__DEV__` block of code is problematic. The stated rational is:\r\n\r\n```\r\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\r\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\r\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\r\n  // functions in invokeGuardedCallback, and the production version of\r\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\r\n  // like caught exceptions, and the DevTools won't pause unless the developer\r\n  // takes the extra step of enabling pause on caught exceptions. This is\r\n  // untintuitive, though, because even though React has caught the error, from\r\n  // the developer's perspective, the error is uncaught.\r\n```\r\n\r\nThis is misguided because it's not about pausing on exceptions, it's about \"pause on _uncaught_ exceptions.\" However, `componentDidCatch` makes exceptions _caught_!\r\n\r\nRather than switching on prod vs dev and using try/catch in prod and window's error handler in dev, React should always use try/catch, but rethrow if you reach the root without hitting a componentDidCatch handler. This would preserve the correct \"pause on uncaught exceptions\" behavior without messing with global error handlers."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10468",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10468/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10468/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10468/events",
            "html_url": "https://github.com/facebook/react/issues/10468",
            "id": 250607684,
            "node_id": "MDU6SXNzdWUyNTA2MDc2ODQ=",
            "number": 10468,
            "title": "DOM Fixture Form Coverage: Restored State and Auto-fill",
            "user": {
              "login": "nhunzaker",
              "id": 590904,
              "node_id": "MDQ6VXNlcjU5MDkwNA==",
              "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/nhunzaker",
              "html_url": "https://github.com/nhunzaker",
              "followers_url": "https://api.github.com/users/nhunzaker/followers",
              "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
              "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
              "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
              "repos_url": "https://api.github.com/users/nhunzaker/repos",
              "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
              "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 725156255,
                "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 18,
            "created_at": "2017-08-16T12:21:43Z",
            "updated_at": "2020-01-21T00:02:50Z",
            "closed_at": null,
            "author_association": "COLLABORATOR",
            "body": "Follow up from https://github.com/facebook/react/pull/10456. Presently, we don't have a manual fixture that ensures that form state is captured when the browser provides input on behalf of the user.\r\n\r\n- [ ] Restored form state\r\n- [ ] Autocomplete state\r\n\r\n**Other notes**\r\n\r\nAs a reference point, I'd like to find some documentation around how restored state works. I think I might be using the wrong search terms. Does anyone have a link handy?"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10441",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10441/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10441/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10441/events",
            "html_url": "https://github.com/facebook/react/issues/10441",
            "id": 249669043,
            "node_id": "MDU6SXNzdWUyNDk2NjkwNDM=",
            "number": 10441,
            "title": "Cross-origin error passed to componentDidCatch incorrectly",
            "user": {
              "login": "bvaughn",
              "id": 29597,
              "node_id": "MDQ6VXNlcjI5NTk3",
              "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/bvaughn",
              "html_url": "https://github.com/bvaughn",
              "followers_url": "https://api.github.com/users/bvaughn/followers",
              "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
              "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
              "organizations_url": "https://api.github.com/users/bvaughn/orgs",
              "repos_url": "https://api.github.com/users/bvaughn/repos",
              "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
              "received_events_url": "https://api.github.com/users/bvaughn/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710722093,
                "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
              "login": "bvaughn",
              "id": 29597,
              "node_id": "MDQ6VXNlcjI5NTk3",
              "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/bvaughn",
              "html_url": "https://github.com/bvaughn",
              "followers_url": "https://api.github.com/users/bvaughn/followers",
              "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
              "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
              "organizations_url": "https://api.github.com/users/bvaughn/orgs",
              "repos_url": "https://api.github.com/users/bvaughn/repos",
              "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
              "received_events_url": "https://api.github.com/users/bvaughn/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "bvaughn",
                "id": 29597,
                "node_id": "MDQ6VXNlcjI5NTk3",
                "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bvaughn",
                "html_url": "https://github.com/bvaughn",
                "followers_url": "https://api.github.com/users/bvaughn/followers",
                "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
                "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
                "organizations_url": "https://api.github.com/users/bvaughn/orgs",
                "repos_url": "https://api.github.com/users/bvaughn/repos",
                "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bvaughn/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": null,
            "comments": 55,
            "created_at": "2017-08-11T15:25:18Z",
            "updated_at": "2020-01-08T19:18:58Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "tl;dr React is passing \"A cross-origin error was thrown\" to `componentDidCatch` when there are no cross-origin scripts.\r\n\r\nSee [this discussion thread](https://github.com/facebook/react/pull/10353#issuecomment-321528685) and [this repro case](https://github.com/tessin/tessin-mini).\r\n\r\nI was able to confirm the behavior. A quick look at `onError` showed a null `event.error`."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10390",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10390/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10390/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10390/events",
            "html_url": "https://github.com/facebook/react/issues/10390",
            "id": 248137551,
            "node_id": "MDU6SXNzdWUyNDgxMzc1NTE=",
            "number": 10390,
            "title": "react-test-renderer and shallow API mismatch",
            "user": {
              "login": "statianzo",
              "id": 57737,
              "node_id": "MDQ6VXNlcjU3NzM3",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57737?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/statianzo",
              "html_url": "https://github.com/statianzo",
              "followers_url": "https://api.github.com/users/statianzo/followers",
              "following_url": "https://api.github.com/users/statianzo/following{/other_user}",
              "gists_url": "https://api.github.com/users/statianzo/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/statianzo/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/statianzo/subscriptions",
              "organizations_url": "https://api.github.com/users/statianzo/orgs",
              "repos_url": "https://api.github.com/users/statianzo/repos",
              "events_url": "https://api.github.com/users/statianzo/events{/privacy}",
              "received_events_url": "https://api.github.com/users/statianzo/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 204945357,
                "node_id": "MDU6TGFiZWwyMDQ5NDUzNTc=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
                "name": "Component: Shallow Renderer",
                "color": "eb6420",
                "default": false,
                "description": null
              },
              {
                "id": 710400704,
                "node_id": "MDU6TGFiZWw3MTA0MDA3MDQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
                "name": "Component: Test Renderer",
                "color": "006b75",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 2,
            "created_at": "2017-08-04T23:13:20Z",
            "updated_at": "2018-08-03T20:57:16Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\nCurrently, `react-test-renderer` and `react-test-renderer/shallow` have different APIs. Is there a reason for this? It would be helpful switching between them if shallow supported `create`. I can put together a PR for it if there's interest.\r\n\r\n## react-test-renderer\r\n\r\n```javascript\r\nimport TestRenderer from 'react-test-renderer';\r\n\r\nit('renders', () => {\r\n  const result = TestRenderer.create(<MyComponent />);\r\n  expect(result).toMatchSnapshot();\r\n});\r\n```\r\n\r\n## shallow\r\n\r\n```javascript\r\nimport ShallowRenderer from 'react-test-renderer/shallow';\r\n\r\nit('renders', () => {\r\n  const renderer = new ShallowRenderer()\r\n  const result = renderer.render(<MyComponent />);\r\n  expect(result).toMatchSnapshot();\r\n});\r\n```"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10389",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10389/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10389/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10389/events",
            "html_url": "https://github.com/facebook/react/issues/10389",
            "id": 248114062,
            "node_id": "MDU6SXNzdWUyNDgxMTQwNjI=",
            "number": 10389,
            "title": "<video /> attribute needed but not guaranteed by React",
            "user": {
              "login": "elrumordelaluz",
              "id": 784056,
              "node_id": "MDQ6VXNlcjc4NDA1Ng==",
              "avatar_url": "https://avatars3.githubusercontent.com/u/784056?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/elrumordelaluz",
              "html_url": "https://github.com/elrumordelaluz",
              "followers_url": "https://api.github.com/users/elrumordelaluz/followers",
              "following_url": "https://api.github.com/users/elrumordelaluz/following{/other_user}",
              "gists_url": "https://api.github.com/users/elrumordelaluz/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/elrumordelaluz/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/elrumordelaluz/subscriptions",
              "organizations_url": "https://api.github.com/users/elrumordelaluz/orgs",
              "repos_url": "https://api.github.com/users/elrumordelaluz/repos",
              "events_url": "https://api.github.com/users/elrumordelaluz/events{/privacy}",
              "received_events_url": "https://api.github.com/users/elrumordelaluz/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 332720629,
                "node_id": "MDU6TGFiZWwzMzI3MjA2Mjk=",
                "url": "https://api.github.com/repos/facebook/react/labels/HTML",
                "name": "HTML",
                "color": "f7c6c7",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 28,
            "created_at": "2017-08-04T20:50:39Z",
            "updated_at": "2019-11-07T12:34:30Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.\r\n\r\nIf I understand well, react will ensure the property is set anyway. \r\n\r\n**Current behaviour**\r\nReact renders the html `<video />` element without the attribute `muted` when explicitly passed.\r\n\r\n**Demo time**\r\nIn [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:\r\n![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)\r\n\r\nActually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.\r\n\r\n**The point**\r\nI think is most a _specific need_ than the _expected behaviour_.\r\nFrom the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.\r\n\r\nBut there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.\r\nThe part interested is\r\n> `<video muted>` elements will also be allowed to autoplay without a user gesture.\r\n\r\nSo, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.\r\n\r\nThere's a similar [issue](https://github.com/facebook/react/issues/6544)"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10382",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10382/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10382/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10382/events",
            "html_url": "https://github.com/facebook/react/issues/10382",
            "id": 248003365,
            "node_id": "MDU6SXNzdWUyNDgwMDMzNjU=",
            "number": 10382,
            "title": "Too much unnecessary updates when a child element is moved to the front",
            "user": {
              "login": "yelouafi",
              "id": 5453835,
              "node_id": "MDQ6VXNlcjU0NTM4MzU=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/5453835?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/yelouafi",
              "html_url": "https://github.com/yelouafi",
              "followers_url": "https://api.github.com/users/yelouafi/followers",
              "following_url": "https://api.github.com/users/yelouafi/following{/other_user}",
              "gists_url": "https://api.github.com/users/yelouafi/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/yelouafi/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/yelouafi/subscriptions",
              "organizations_url": "https://api.github.com/users/yelouafi/orgs",
              "repos_url": "https://api.github.com/users/yelouafi/repos",
              "events_url": "https://api.github.com/users/yelouafi/events{/privacy}",
              "received_events_url": "https://api.github.com/users/yelouafi/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 7,
            "created_at": "2017-08-04T13:18:50Z",
            "updated_at": "2018-03-01T13:28:14Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nNot sure if it's a bug or an 'accepted' behavior. But this can affect performance in some situations or even 'break the expectations' in others (e.g. animating moved elements [i.e. simple moves]) \r\n\r\n**What is the current behavior?**\r\n\r\nWhen a child element moves from the end of the list to the front  React actually moves all the other elements after the moved/last element instead of simply inserting the moved element at the front of the list.\r\n\r\nThis also can be stated more generally for an element or a block of elements moving backward with a significant shift.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nHere is a [demo](https://codesandbox.io/s/wjZkrGVzJ) that shows the DOM operations performed on DOM nodes (moves & insertions) during reconciliation. To reproduce the issue\r\n\r\n- type '0123456789x' in the input field then click `Patch!`\r\n\r\n- now type 'x0123456789' (move the last 'x' to the front) then click `Patch!` again\r\n\r\nHere's the output\r\n\r\n![image](https://user-images.githubusercontent.com/5453835/28969007-affc2dae-791a-11e7-951a-37856bc53f00.png)\r\n\r\nInstead of moving the 'x' to the front. React actually moves all the other elements after the 'x'\r\n\r\n*Note: the demo uses MutationObserver api to find out the operations. But you can also verify this behavior directly by commenting out the code that activates the dom observer (in componentDidMount) and watch the dom operations manually in the devtools element inspector*\r\n\r\n**What is the expected behavior?**\r\n\r\nReact should perform the minimal number of operations. I know that the 'minimum' will vary for each situation and not trivial to infer for the general case. But for some common cases like this one it should be feasible.\r\n\r\nFor info this use case is handled in most of the other virtual dom libs like preact, snabbdom. Inferno is a remarkable case as it will always infer the minimum number of operations (it uses an algorithm to find the [longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) on an array containing the indexes of the old elements).\r\n\r\nI found this behavior while working on a demo to find out how vdom libs rearrange nodes during children reconciliation. For example here is the same output for other libs ([demo](https://codesandbox.io/s/BkLpXYQn))\r\n\r\n![image](https://user-images.githubusercontent.com/5453835/28969902-567219c0-791e-11e7-9f3d-29bf988cdab1.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe demo uses the 0.16 version. But I tried with 0.15 and it has the same behavior"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10143",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10143/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10143/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10143/events",
            "html_url": "https://github.com/facebook/react/issues/10143",
            "id": 242029054,
            "node_id": "MDU6SXNzdWUyNDIwMjkwNTQ=",
            "number": 10143,
            "title": "Remove unstable_renderIntoContainer",
            "user": {
              "login": "gaearon",
              "id": 810438,
              "node_id": "MDQ6VXNlcjgxMDQzOA==",
              "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gaearon",
              "html_url": "https://github.com/gaearon",
              "followers_url": "https://api.github.com/users/gaearon/followers",
              "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
              "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
              "organizations_url": "https://api.github.com/users/gaearon/orgs",
              "repos_url": "https://api.github.com/users/gaearon/repos",
              "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
              "received_events_url": "https://api.github.com/users/gaearon/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 763742499,
                "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false,
                "description": null
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": {
              "url": "https://api.github.com/repos/facebook/react/milestones/40",
              "html_url": "https://github.com/facebook/react/milestone/40",
              "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
              "id": 2937756,
              "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
              "number": 40,
              "title": "17.0.0",
              "description": "",
              "creator": {
                "login": "gaearon",
                "id": 810438,
                "node_id": "MDQ6VXNlcjgxMDQzOA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 8,
              "closed_issues": 2,
              "state": "open",
              "created_at": "2017-11-26T22:47:57Z",
              "updated_at": "2020-01-16T20:59:01Z",
              "due_on": null,
              "closed_at": null
            },
            "comments": 15,
            "created_at": "2017-07-11T12:25:32Z",
            "updated_at": "2020-01-08T19:18:58Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "My hunch is we want to remove it before 16 because `unstable_createPortal` accomplishes the same thing. I remember `unstable_renderIntoContainer` adding a bunch of complexity that would be nice to get rid of before committing to support it for another release cycle."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10109",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10109/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10109/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10109/events",
            "html_url": "https://github.com/facebook/react/issues/10109",
            "id": 240614711,
            "node_id": "MDU6SXNzdWUyNDA2MTQ3MTE=",
            "number": 10109,
            "title": "Mouseenter event not triggered when cursor moves from disabled button",
            "user": {
              "login": "stepancar",
              "id": 2854910,
              "node_id": "MDQ6VXNlcjI4NTQ5MTA=",
              "avatar_url": "https://avatars1.githubusercontent.com/u/2854910?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/stepancar",
              "html_url": "https://github.com/stepancar",
              "followers_url": "https://api.github.com/users/stepancar/followers",
              "following_url": "https://api.github.com/users/stepancar/following{/other_user}",
              "gists_url": "https://api.github.com/users/stepancar/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/stepancar/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/stepancar/subscriptions",
              "organizations_url": "https://api.github.com/users/stepancar/orgs",
              "repos_url": "https://api.github.com/users/stepancar/repos",
              "events_url": "https://api.github.com/users/stepancar/events{/privacy}",
              "received_events_url": "https://api.github.com/users/stepancar/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 127893911,
                "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false,
                "description": null
              },
              {
                "id": 40929151,
                "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 10,
            "created_at": "2017-07-05T11:01:18Z",
            "updated_at": "2019-04-06T13:45:34Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "BUG.\r\n\r\nMouseenter event not triggered when cursor moves from disabled button\r\nsee [example](https://alfa-laboratory.github.io/arui-feather/styleguide/#playground/code=%3Cdiv%3E%0A%20%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20disabled=%7B%20true%20%7D%3EDisabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%3ENot%20Disabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%20%0A%3C/div%3E)\r\n\r\n\r\n**What is the expected behavior?**\r\nShould trigger Mouseenter event\r\n\r\nReact 15.5.3\r\nLatest Chrome\r\nMacOs 10.12.5"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10085",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10085/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10085/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10085/events",
            "html_url": "https://github.com/facebook/react/issues/10085",
            "id": 239916842,
            "node_id": "MDU6SXNzdWUyMzk5MTY4NDI=",
            "number": 10085,
            "title": "Nicer Formatting of SSR Validation",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 710332294,
                "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false,
                "description": null
              },
              {
                "id": 760751171,
                "node_id": "MDU6TGFiZWw3NjA3NTExNzE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
                "name": "Difficulty: challenging",
                "color": "f2687c",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              },
              {
                "id": 717031390,
                "node_id": "MDU6TGFiZWw3MTcwMzEzOTA=",
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "6ce26a",
                "default": true,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 34,
            "created_at": "2017-07-01T00:58:07Z",
            "updated_at": "2020-01-08T19:18:58Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff.\r\n\r\n1) Instead of warning add [these warn calls](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L74-L115) to a global buffer (array, map, set, whatever).\r\n\r\n2) Inside [prepareForCommit](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberEntry.js#L190), issue all the currently batched up warnings as a single message. \r\n\r\n3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g.\r\n\r\n```\r\n...\r\n<div className=\"unchanged\">\r\n- <div className=\"foo\" />\r\n+ <div className=\"bar\">…</div>\r\n+ <span />\r\n</div>\r\n...\r\n<div className=\"another_unchanged\">\r\n- <span />\r\n</div>\r\n...\r\n```\r\n\r\nThis strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10051",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10051/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10051/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10051/events",
            "html_url": "https://github.com/facebook/react/issues/10051",
            "id": 238751719,
            "node_id": "MDU6SXNzdWUyMzg3NTE3MTk=",
            "number": 10051,
            "title": "Include canary tests of community packages as part of the release process",
            "user": {
              "login": "ljharb",
              "id": 45469,
              "node_id": "MDQ6VXNlcjQ1NDY5",
              "avatar_url": "https://avatars1.githubusercontent.com/u/45469?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ljharb",
              "html_url": "https://github.com/ljharb",
              "followers_url": "https://api.github.com/users/ljharb/followers",
              "following_url": "https://api.github.com/users/ljharb/following{/other_user}",
              "gists_url": "https://api.github.com/users/ljharb/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/ljharb/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/ljharb/subscriptions",
              "organizations_url": "https://api.github.com/users/ljharb/orgs",
              "repos_url": "https://api.github.com/users/ljharb/repos",
              "events_url": "https://api.github.com/users/ljharb/events{/privacy}",
              "received_events_url": "https://api.github.com/users/ljharb/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 6,
            "created_at": "2017-06-27T06:44:09Z",
            "updated_at": "2020-01-10T16:42:53Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "(cc @gaearon, from https://github.com/yannickcr/eslint-plugin-react/issues/1258#issuecomment-311211399)\r\n\r\nIn general, there's lots of little utilities that are helpful to have as standalone packages. One of them is https://unpkg.com/airbnb-prop-types@2.7.0/build/helpers/getComponentName.js, for example.\r\n\r\nIt'd be ideal for the React team to maintain this package - primarily, so that it would be guaranteed to either not break when a new React version is released, or be updated to work with the upcoming version prior to release.\r\n\r\nIn the interests of the React team not signing up to maintain all the package requests that might come in, would it be possible to make \"part of the release process\" be \"ensure compatible versions of community packages exist\"? I'd be happy to create the above package, for example, and I know the community would love a guarantee that enzyme would always work with any official React version release, prior to the release."
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10049",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10049/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10049/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10049/events",
            "html_url": "https://github.com/facebook/react/issues/10049",
            "id": 238704590,
            "node_id": "MDU6SXNzdWUyMzg3MDQ1OTA=",
            "number": 10049,
            "title": "Render Callbacks Fire Even Though an Error Happened",
            "user": {
              "login": "sebmarkbage",
              "id": 63648,
              "node_id": "MDQ6VXNlcjYzNjQ4",
              "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sebmarkbage",
              "html_url": "https://github.com/sebmarkbage",
              "followers_url": "https://api.github.com/users/sebmarkbage/followers",
              "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
              "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
              "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
              "repos_url": "https://api.github.com/users/sebmarkbage/repos",
              "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
              "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 739761016,
                "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false,
                "description": null
              },
              {
                "id": 1775958285,
                "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
                "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
                "name": "React Core Team",
                "color": "9149d1",
                "default": false,
                "description": "Opened by a member of the React Core Team"
              },
              {
                "id": 710375792,
                "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
              "login": "acdlite",
              "id": 3624098,
              "node_id": "MDQ6VXNlcjM2MjQwOTg=",
              "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/acdlite",
              "html_url": "https://github.com/acdlite",
              "followers_url": "https://api.github.com/users/acdlite/followers",
              "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
              "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
              "organizations_url": "https://api.github.com/users/acdlite/orgs",
              "repos_url": "https://api.github.com/users/acdlite/repos",
              "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
              "received_events_url": "https://api.github.com/users/acdlite/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "acdlite",
                "id": 3624098,
                "node_id": "MDQ6VXNlcjM2MjQwOTg=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/acdlite",
                "html_url": "https://github.com/acdlite",
                "followers_url": "https://api.github.com/users/acdlite/followers",
                "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
                "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
                "organizations_url": "https://api.github.com/users/acdlite/orgs",
                "repos_url": "https://api.github.com/users/acdlite/repos",
                "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
                "received_events_url": "https://api.github.com/users/acdlite/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": null,
            "comments": 1,
            "created_at": "2017-06-27T00:19:04Z",
            "updated_at": "2020-01-08T19:18:57Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "I think something like this both throws and prints success.\r\n\r\n```js\r\nfunction Throw() {\r\n  throw new Error();\r\n}\r\nReactDOM.render(<Throw />, () => console.log('success'));\r\n```\r\n\r\nThis means that it is not safe to wrap this in a Promise like this for example:\r\n\r\n```js\r\nnew Promise(resolve => ReactDOM.render(..., ..., resolve));\r\n```\r\n\r\nBecause if this throws, then the error is silenced. The Promise was already resolved. I hit this in the ServerIntegration-test"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10021",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10021/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10021/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10021/events",
            "html_url": "https://github.com/facebook/react/issues/10021",
            "id": 237665439,
            "node_id": "MDU6SXNzdWUyMzc2NjU0Mzk=",
            "number": 10021,
            "title": "Feature request: Add a \"module\" entry in package.json to export ES2015 version of React",
            "user": {
              "login": "misterfresh",
              "id": 2299642,
              "node_id": "MDQ6VXNlcjIyOTk2NDI=",
              "avatar_url": "https://avatars3.githubusercontent.com/u/2299642?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/misterfresh",
              "html_url": "https://github.com/misterfresh",
              "followers_url": "https://api.github.com/users/misterfresh/followers",
              "following_url": "https://api.github.com/users/misterfresh/following{/other_user}",
              "gists_url": "https://api.github.com/users/misterfresh/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/misterfresh/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/misterfresh/subscriptions",
              "organizations_url": "https://api.github.com/users/misterfresh/orgs",
              "repos_url": "https://api.github.com/users/misterfresh/repos",
              "events_url": "https://api.github.com/users/misterfresh/events{/privacy}",
              "received_events_url": "https://api.github.com/users/misterfresh/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 71502270,
                "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false,
                "description": null
              },
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 18,
            "created_at": "2017-06-21T21:09:32Z",
            "updated_at": "2020-01-10T13:19:32Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nReact ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nInstall react and try to import it in a browser with native modules enabled.\r\n\r\n**What is the expected behavior?**\r\nHave an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions"
          },
          {
            "url": "https://api.github.com/repos/facebook/react/issues/10020",
            "repository_url": "https://api.github.com/repos/facebook/react",
            "labels_url": "https://api.github.com/repos/facebook/react/issues/10020/labels{/name}",
            "comments_url": "https://api.github.com/repos/facebook/react/issues/10020/comments",
            "events_url": "https://api.github.com/repos/facebook/react/issues/10020/events",
            "html_url": "https://github.com/facebook/react/issues/10020",
            "id": 237657832,
            "node_id": "MDU6SXNzdWUyMzc2NTc4MzI=",
            "number": 10020,
            "title": "Feature request: renderTypes",
            "user": {
              "login": "ljharb",
              "id": 45469,
              "node_id": "MDQ6VXNlcjQ1NDY5",
              "avatar_url": "https://avatars1.githubusercontent.com/u/45469?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ljharb",
              "html_url": "https://github.com/ljharb",
              "followers_url": "https://api.github.com/users/ljharb/followers",
              "following_url": "https://api.github.com/users/ljharb/following{/other_user}",
              "gists_url": "https://api.github.com/users/ljharb/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/ljharb/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/ljharb/subscriptions",
              "organizations_url": "https://api.github.com/users/ljharb/orgs",
              "repos_url": "https://api.github.com/users/ljharb/repos",
              "events_url": "https://api.github.com/users/ljharb/events{/privacy}",
              "received_events_url": "https://api.github.com/users/ljharb/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 121709921,
                "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false,
                "description": null
              }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [
        
            ],
            "milestone": null,
            "comments": 29,
            "created_at": "2017-06-21T20:40:15Z",
            "updated_at": "2020-01-13T22:58:16Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nPer some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render.\r\n\r\nHere's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet):\r\n```jsx\r\nfunction Foo({ yes }){\r\n  return yes ? <Bar /> : <div />;\r\n}\r\nFoo.renderTypes = [Bar, 'div'];\r\n\r\n\r\nclass Bar extends React.Component {\r\n  static renderTypes = [Button];\r\n\r\n  render() {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n```jsx\r\nfunction Foo({ yes }): React.Element<Bar | 'div'> {\r\n  return yes ? <Bar /> : <div />;\r\n}\r\n\r\nclass Bar extends React.Component {\r\n  render(): React.Element<Button> {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n\r\nInside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a `<ButtonRow>`, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `<SpecialProductButton />` that in turn renders a `<Button>` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted.\r\n\r\nHaving `.renderTypes` would allow us to widen our `children` propType to allow for either a `<Button>`, or *anything that renders a `<Button>`*, which helps us maintain separation of concerns (the package doesn't have to know about `<SpecialProductButton>` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside `<ButtonRow>`).\r\n\r\nI imagine the implementation to be:\r\n 1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)\r\n 1. in development only and if `.renderTypes` exists on the component\r\n 1. evaluate the equivalent of [`elementType`](https://www.npmjs.com/package/airbnb-prop-types)`(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,\r\n 1. just like propTypes, log the error if one is returned\r\n\r\n(cc @spicyj)"
          }
        ]