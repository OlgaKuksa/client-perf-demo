(this["webpackJsonpclient-perf-demo"]=this["webpackJsonpclient-perf-demo"]||[]).push([[0],{23:function(e){e.exports=JSON.parse('[{"id":555221620,"title":"Question: Can the useContext hook be used without a provider?","body":"Is it a correct form to use the useContext hook without the enclosing provider?\\r\\n\\r\\nSee this simple [sandbox](https://codesandbox.io/s/3q2x15l4rm) which uses  the JediContext.Provider.\\r\\n\\r\\nIn this modified [sandbox](https://codesandbox.io/s/react-hooks-usecontext-z2ryh) I removed the provider and the useContext hook still works.\\r\\n\\r\\nWhat are the consequences of using the useContext hook without a provider?","number":17912,"user":{"login":"AjaxSolutions"},"state":"open","created_at":"2020-01-26T12:30:09Z"},{"id":555126673,"title":"Bug: startTransition suspends immediately in odd circumstances","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact version: 0.0.0-experimental-f42431abe\\r\\n\\r\\nPlease note that I do realize my repro steps are poor at best. I\'m *not* filing this issue in hopes of support; I\'m only filing this issue to provide one more datum point to help diagnose what I believe to be a bug, which I\'m assuming you\'ll see more reports of.\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\ntl;dr - there are some circumstances when a thrown promise inside a hook causes an immediate suspense, instead of respecting the startTransition it\'s inside of.\\r\\n\\r\\nstartTransition for me is always, in this case, called outside of the normal React handlers. In this case history.listen\\r\\n\\r\\nhttps://github.com/arackaf/booklist/blob/special/suspense-blog/react/modules/books/booksSearchState.ts#L75\\r\\n\\r\\nThis is my Suspense-enabled hook that\'s called as a result of the state update inside the code above\\r\\n\\r\\nhttps://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/useQuery.js#L22\\r\\n\\r\\nthe Promise throwing happens here\\r\\n\\r\\nhttps://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/queryManager.js#L116\\r\\n\\r\\nHere\'s the specific chain of events that leads to the breakage. \\r\\n\\r\\nThings work so long as there\'s always been an existing promise, for the queryManager to throw, ie line 116 in the code immediately above. But the minute there\'s cached results, and the queryManager invoke\'s the hook\'s setState method (which it passed it), ie line 120 here\\r\\n\\r\\nhttps://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/queryManager.js#L120\\r\\n\\r\\nthen all future suspenses immediately start suspending, and I always get my fallback, always.\\r\\n\\r\\nThe setState method is shared between the hook, and queryManager here\\r\\n\\r\\nhttps://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/useQuery.js#L17\\r\\n\\r\\nI stress that I do *not* need support, here; this is just a side project, an unimportant one, and this whole branch is only for Suspense experimenting. But something does definitely appear to be wrong, and I\'m hoping this report can help you guys find it.\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nstartTransition only works until the hook\'s setState is called from the queryManager it creates, at which point startTransition always triggers hard suspenses, showing my fallback.\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nstartTransition should never trigger the fallback until the timeout has expired. \\r\\n","number":17911,"user":{"login":"arackaf"},"state":"open","created_at":"2020-01-25T19:24:27Z"},{"id":555111423,"title":"Implemented Profiler onCommit() and onPostCommit() hooks","body":"This PR adds two new callbacks to the Profiler, `onCommit` and `onPostCommit`, as proposed in [RFC 139](https://github.com/bvaughn/rfcs/blob/profiler-commit-durations/text/0000-profiler-measure-commit-durations.md) (https://github.com/reactjs/rfcs/pull/139).\\r\\n\\r\\nThere are a couple of rough edges in the current implementation. I\'ve added TODO comments to later address these (after we do some planned refactoring).\\r\\n\\r\\n- [x] Implement RFC.\\r\\n- [ ] Add DevTools hook for capturing passive effect durations.","number":17910,"user":{"login":"bvaughn"},"state":"open","created_at":"2020-01-25T17:24:36Z"},{"id":555074919,"title":"Bug: Events from an <input> in the <legend> of a disabled <fieldset> get supressed","body":"The closest related issue I could, is somewhat of the inverse of this one: #7711\\r\\n\\r\\nReact version: 16.12 (older versions as well)\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Create a component\\r\\n2. Add state indicating whether it is enabled or disabled (advised to start as enabled)\\r\\n3. On render, let the component return a `<fieldset>` with: a `<legend>` containing an `<input>` (checkbox) element, and another form element (`<select>`, `<input>`, `<textarea>`).\\r\\n4. Add the `disabled` attribute that follows the aforementioned state to the `<fieldset>`.\\r\\n5. Make the `onChange` event of the `<input>` in the `<fieldset>` responsible for modifying the state of the component (enabled/disabled). \\r\\n6. Run an app that uses the described component.\\r\\n7. Disable the `<fieldset>` using the `<input>` in its `<legend>`.\\r\\n8. (Try to) enable the `<fieldset>`.\\r\\n\\r\\nLink to code example: [Sandbox](https://codesandbox.io/s/wizardly-ellis-45sel?fontsize=14&hidenavigation=1&theme=dark)\\r\\n\\r\\n```jsx\\r\\nimport React from \\"react\\";\\r\\n\\r\\nexport default function App() {\\r\\n  const [enabled, setEnabled] = React.useState(true);\\r\\n  return <React.Fragment>\\r\\n    <fieldset disabled={!enabled}>\\r\\n      <legend>\\r\\n        <input \\r\\n          type=\\"checkbox\\"\\r\\n          checked={enabled}\\r\\n          onChange={(evt)=>{setEnabled(evt.target.checked);}}/>\\r\\n      </legend>\\r\\n      <textarea></textarea>\\r\\n    </fieldset>\\r\\n    <p>\\r\\n      Disable the above fieldset by unchecking the checkbox. Checking the box once again does not re-enable the fieldset however.\\r\\n    </p>\\r\\n  </React.Fragment>;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n## The current behavior\\r\\nEnabling the `<fieldset>` using the `<input>` in its `<legend>` changes the state of the `<input>` in unchecked fashion; it does not fire its `onChange` event and its value does thus no longer match the state of the component.\\r\\n\\r\\n## The expected behavior\\r\\nBased on the [W3C](https://www.w3.org/html/wiki/Elements/fieldset) and [WHATWG](https://html.spec.whatwg.org/multipage/form-elements.html#the-fieldset-element) spec, the contents of the first `<legend>` of a `<fieldset>` should not be disabled when that fieldset is disabled. \\r\\n\\r\\nOne would expect that if an element does not appear disabled, its events will be triggered. ","number":17909,"user":{"login":"MatthijsMud"},"state":"open","created_at":"2020-01-25T11:35:42Z"},{"id":554992002,"title":"Rewrite useTransition to better handle overlapping transitions","body":"When the user interacts with the UI more quickly than it can respond, you usually don\'t want to update the screen with anything that isn\'t the last thing the user requested.\\r\\n\\r\\nFor example, if you click on multiple tabs in, we should not switch to any tab that isn\'t the last one you clicked. The last tab navigation supersedes all the previous ones.\\r\\n\\r\\nHowever, this only applies to transitions that update the same part of the UI. For example, if you click a new tab, and in the meantime you click a drop-down menu, it doesn\'t matter whether the tab or the menu appears first. They are independent, parallel transitions.\\r\\n\\r\\nTo implement this behavior, we will treat transitions as **overlapping** if they share at least one state queue between them. The result of the most recent transition in an overlapping sequence is considered the **terminal** state. The rest are considered **intermediate** states. We will avoid showing intermediate states by batching them together with the terminal one.\\r\\n\\r\\nWhen there are overlapping transitions, the `isPending` states of the `useTransition` hooks that correspond to the intermediate states are turned off (unless they happen to be the same `useTransition` hook as the terminal one).\\r\\n\\r\\n---\\r\\n\\r\\nI iterated on the implementation several times. I\'ve squashed most of the commits to reduce noise when reviewing. You can see some of the unsquashed steps in https://github.com/facebook/react/pull/17418. If this is too much to review in a single PR, I can split the commits back up again; however, I don\'t think it\'s worth landing in more than two steps because there are only two useful features here. Increasing the granularity would increase the risk of landing without much benefit.\\r\\n\\r\\n## Example (demo)\\r\\n\\r\\nThe example demo is a tab switcher. Pay attention to when the pending spinner disappears, and when the tab content is allowed to switch.\\r\\n\\r\\nBefore this PR: https://codesandbox.io/s/elastic-hawking-69381\\r\\nAfter this PR: https://codesandbox.io/s/beautiful-goldstine-u157u","number":17908,"user":{"login":"acdlite"},"state":"open","created_at":"2020-01-24T22:52:51Z"},{"id":554888118,"title":"Remove unused modules from legacy event responders","body":"## Summary\\r\\n\\r\\nRemoves unused event modules implemented with the legacy responder system. These modules are not used internally and never tested in production environments.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn test`","number":17907,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-24T18:30:04Z"},{"id":554884270,"title":"[react-interactions] use dom-event-testing-library for Drag tests","body":"@necolas wrote an awesome testing library for DOM events, we should probably use it for the drag tests too. The PR replaces the hacky MouseEvents logic that was there before and makes the tests easier to read and more consistent with other responder tests. Hopefully it also helps with https://github.com/facebook/react/pull/17896.","number":17906,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-24T18:20:49Z"},{"id":554844624,"title":"installed but not showing up on dev tools menu","body":"\ud83d\udc49 Please follow one of these issue templates:\\r\\n- https://github.com/facebook/react/issues/new/choose\\r\\n\\r\\nNote: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.\\r\\n","number":17905,"user":{"login":"tuxedo007"},"state":"closed","created_at":"2020-01-24T16:50:42Z"},{"id":554716894,"title":"[WIP] Upgrade to Jest 25","body":"This PR upgrades us to the latest version of Jest. Unfortunately, we run into issues doing this due to the fact newer versions of JSDOM require `testURL` to be `http://localhost`. Historically, this has been `about:blank` for our tests, because we depend on behavior differences in JSDOM that ensure our existing tests work as expected and changing the `testURL` (as I\'ve done in this PR) now causes many of our tests to fail. As per the comment in our `config.base.js` by @SimenB :\\r\\n\\r\\n```\\r\\n  // Jest changed from `about:blank` to `http://localhost` default in 24.5 (https://github.com/facebook/jest/pull/6792)\\r\\n  // in order to address https://github.com/facebook/jest/issues/6766. If one uses `about:blank` in JSDOM@11.12 or\\r\\n  // newer, it fails with `SecurityError: localStorage is not available for opaque origins`. However, some of React\'s\\r\\n  // tests depend on `about:blank` being the domain (for e.g. `url` in `img` tags). So we set `about:blank` here to\\r\\n  // keep the current behavior and make sure to keep the version of JSDOM to version lower than 11.12. This will have\\r\\n  // to be addressed properly when Jest 25 is released, as it will come with a newer version of JSDOM.\\r\\n```\\r\\n\\r\\nI\'m unsure as to how we can resolve this. Maybe @SimenB has some ideas?","number":17904,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-24T12:46:28Z"},{"id":554453608,"title":"Use CommonJS outside of src","body":"This might help fix the issue @trueadm was seeing when upgrading Jest. ","number":17903,"user":{"login":"gaearon"},"state":"closed","created_at":"2020-01-23T22:53:11Z"},{"id":554441785,"title":"Update google-closure-compiler","body":"## Summary\\r\\n\\r\\nUpdates the google-closure-compiler dependency\\r\\n\\r\\n## Test Plan\\r\\n\\r\\nCI\\r\\n","number":17902,"user":{"login":"necolas"},"state":"open","created_at":"2020-01-23T22:22:30Z"},{"id":554435533,"title":"Update various monorepo dependencies","body":"# Summary\\r\\n\\r\\nUpdates various monorepo dependencies. Will update the closure compiler dependency separately.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn test`\\r\\n","number":17901,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-23T22:08:33Z"},{"id":554423884,"title":"Update misc dependencies with new patch releases","body":"## Summary\\r\\n\\r\\nUpdates packages with new patch releases. The exception is `art`, which causes tests to fail when updated, due a change in `art`\'s logic determining `canvas` support.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn test`\\r\\n","number":17900,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-23T21:43:06Z"},{"id":554247999,"title":"Bug: styles object using css variables and both a shorthand and a specific property renders incorrectly","body":"React does not produce the correct css inline styles when using css variables for both the shorthand property and another specific one (like `padding` and `paddingRight`).\\r\\n\\r\\nThe styles object:\\r\\n\\r\\n```js\\r\\n{\\r\\n  padding: \\"calc(var(--spacing) * 1)\\",\\r\\n  paddingRight: \\"calc(var(--spacing) * 3)\\",\\r\\n  paddingBottom: \\"calc(var(--spacing) * 4)\\"\\r\\n};\\r\\n```\\r\\nproduces the following styles:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/23476208/72995030-1d39e400-3df0-11ea-9235-0e6ad00718b2.png)\\r\\n\\r\\nand the following html:\\r\\n```html\\r\\n<span style=\\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\\">App</span>\\r\\n```\\r\\n\\r\\neven though the computed properties tab of the dev-tools appear to be correct and the padding is properly rendered in the screen:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/23476208/72995225-6e49d800-3df0-11ea-9770-98f062008ca3.png)\\r\\n\\r\\nIf I remove the css-variable, everything works as expected.\\r\\n\\r\\n**React version**: From v15.0.0 to 16.12.0\\r\\n\\r\\n_Note_: Below v15.0.0 the styles are correctly produced:\\r\\n\\r\\n```html\\r\\n<span style=\\"padding:calc(var(--spacing) * 1);padding-right:calc(var(--spacing) * 3);padding-bottom:calc(var(--spacing) * 4);\\">App</span>\\r\\n```\\r\\n\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Add a style object to a component that has both a property shorthand and a specific one (like `padding` and `paddingRight`) and uses a css variable (like `var(--spacing)`.\\r\\n2. Render that component and inspect using dev-tools.\\r\\n\\r\\nLink to code example: https://codesandbox.io/s/heuristic-wood-bjr1y\\r\\n\\r\\nstyles object:\\r\\n```js\\r\\n{\\r\\n  padding: \\"calc(var(--spacing) * 1)\\",\\r\\n  paddingRight: \\"calc(var(--spacing) * 3)\\",\\r\\n  paddingBottom: \\"calc(var(--spacing) * 4)\\"\\r\\n};\\r\\n```\\r\\n## The current behavior\\r\\n\\r\\nReact does not produces the correct css inline styles when using css variables for both the shorthand property and another specific one:\\r\\n\\r\\n```html\\r\\n<span style=\\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\\">App</span>\\r\\n```\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nInline styles using css variables that have both a shorthand and a specific one should produce the correct styles.\\r\\n```html\\r\\n<span style=\\"padding: calc(var(--spacing) * 1); padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4);\\">App</span>\\r\\n```","number":17899,"user":{"login":"joaomoleiro"},"state":"open","created_at":"2020-01-23T15:58:13Z"},{"id":554225756,"title":"[Do not merge] Provide React Element introspection warning","body":"Example of how we might warn on React Element introspection","number":17898,"user":{"login":"trueadm"},"state":"open","created_at":"2020-01-23T15:21:36Z"},{"id":554195282,"title":"chore: update to latest release of babel","body":"\x3c!--\\r\\n  Thanks for submitting a pull request!\\r\\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\\r\\n\\r\\n  Before submitting a pull request, please make sure the following is done:\\r\\n\\r\\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n  2. Run `yarn` in the repository root.\\r\\n  3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n  10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\\r\\n--\x3e\\r\\n\\r\\n## Summary\\r\\n\\r\\nFixes a couple of the test failures from #17896 and reduces the diff.\\r\\n\\r\\nUpdated babel by deleting everything `@babel/*` in the lockfile and running `yarn`\\r\\n\\r\\n(Ironically my PR to Babel which broke the test: https://github.com/babel/babel/pull/10361)\\r\\n\\r\\n\x3c!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? --\x3e\\r\\n\\r\\n## Test Plan\\r\\n\\r\\nGreen CI\\r\\n\\r\\n\x3c!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. --\x3e\\r\\n","number":17897,"user":{"login":"SimenB"},"state":"closed","created_at":"2020-01-23T14:33:29Z"},{"id":554176616,"title":"chore: upgrade to jest 25","body":"## Summary\\r\\n\\r\\nThe changes to the test code relate to changes in JSDOM that come with Jest 25:\\r\\n\\r\\n* Several JSDOM workarounds are no longer needed.\\r\\n* Several tests made assertions to match incorrect JSDOM behavior (e.g. `setAttribute` calls) that JSDOM has now patched to match browsers.\\r\\n  * https://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh\\r\\n* JSDOM no longer triggers default actions when dispatching click events. \\r\\n  * https://codesandbox.io/s/beautiful-cdn-ugn8f\\r\\n* JSDOM fixed (jsdom/jsdom#2700) a bug so that calling `focus()` on an already focused element does not dispatch a `FocusEvent`.\\r\\n* JSDOM now supports passive events.\\r\\n* JSDOM has improved support for custom CSS properties.\\r\\n  * But requires jsdom/cssstyle#112 to land to support webkit prefixed properties.\\r\\n\\r\\nCloses #17012\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn test`\\r\\n","number":17896,"user":{"login":"SimenB"},"state":"closed","created_at":"2020-01-23T14:02:28Z"},{"id":554113672,"title":"Bug: fix BigInt in copyElementPath in react-devtools","body":"This is a continuation of an previous issue to add support for the BigInt data type in React DevTools.\\r\\n\\r\\nOriginal PR https://github.com/facebook/react/pull/17233 (merged)\\r\\n\\r\\nThis happens when you try to copy a BigInt value to clipboard via React DevTools.\\r\\n\\r\\n![](https://image.prntscr.com/image/c4SnNIPXR1GlSXIt49FOlw.png)\\r\\n\\r\\nWould @nutboltu mind taking a look?\\r\\n\\r\\n```\\r\\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\\r\\n    at JSON.stringify (<anonymous>)\\r\\n    at c (backend.js:1)\\r\\n    at Object.copyElementPath (backend.js:6)\\r\\n    at t.<anonymous> (backend.js:6)\\r\\n    at t.r.emit (backend.js:6)\\r\\n    at backend.js:32\\r\\n    at t (backend.js:8)\\r\\nc @ backend.js:1\\r\\ncopyElementPath @ backend.js:6\\r\\n(anonymous) @ backend.js:6\\r\\nr.emit @ backend.js:6\\r\\n(anonymous) @ backend.js:32\\r\\nt @ backend.js:8\\r\\npostMessage (async)\\r\\n(anonymous) @ contentScript.js:1\\r\\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property \'message\' of null\\r\\n    at trackError (<./app-insights/app-insights>:50)\\r\\n    at eval (<./app-insights/app-insights>:22)\\r\\ntrackError @ <./app-insights/app-insights>:50\\r\\neval @ <./app-insights/app-insights>:22\\r\\nsetTimeout (async)\\r\\neval @ <./app-insights/app-insights>:21\\r\\nerror (async)\\r\\ninitAppInsights @ <./app-insights/app-insights>:17\\r\\nmain @ VM70658 client>:101\\r\\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31\\r\\nasync function (async)\\r\\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27\\r\\n(anonymous) @ 219:3435\\r\\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\\r\\n    at JSON.stringify (<anonymous>)\\r\\n    at c (backend.js:1)\\r\\n    at Object.copyElementPath (backend.js:6)\\r\\n    at t.<anonymous> (backend.js:6)\\r\\n    at t.r.emit (backend.js:6)\\r\\n    at backend.js:32\\r\\n    at t (backend.js:8)\\r\\nc @ backend.js:1\\r\\ncopyElementPath @ backend.js:6\\r\\n(anonymous) @ backend.js:6\\r\\nr.emit @ backend.js:6\\r\\n(anonymous) @ backend.js:32\\r\\nt @ backend.js:8\\r\\npostMessage (async)\\r\\n(anonymous) @ contentScript.js:1\\r\\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property \'message\' of null\\r\\n    at trackError (<./app-insights/app-insights>:50)\\r\\n    at eval (<./app-insights/app-insights>:22)\\r\\ntrackError @ <./app-insights/app-insights>:50\\r\\neval @ <./app-insights/app-insights>:22\\r\\nsetTimeout (async)\\r\\neval @ <./app-insights/app-insights>:21\\r\\nerror (async)\\r\\ninitAppInsights @ <./app-insights/app-insights>:17\\r\\nmain @ VM70658 client>:101\\r\\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31\\r\\nasync function (async)\\r\\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27\\r\\n(anonymous) @ 219:3435\\r\\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\\r\\n    at JSON.stringify (<anonymous>)\\r\\n    at c (backend.js:1)\\r\\n    at Object.copyElementPath (backend.js:6)\\r\\n    at t.<anonymous> (backend.js:6)\\r\\n    at t.r.emit (backend.js:6)\\r\\n    at backend.js:32\\r\\n    at t (backend.js:8)\\r\\nc @ backend.js:1\\r\\ncopyElementPath @ backend.js:6\\r\\n(anonymous) @ backend.js:6\\r\\nr.emit @ backend.js:6\\r\\n(anonymous) @ backend.js:32\\r\\nt @ backend.js:8\\r\\npostMessage (async)\\r\\n(anonymous) @ contentScript.js:1\\r\\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property \'message\' of null\\r\\n    at trackError (<./app-insights/app-insights>:50)\\r\\n    at eval (<./app-insights/app-insights>:22)\\r\\n```","number":17895,"user":{"login":"leidegre"},"state":"open","created_at":"2020-01-23T11:59:29Z"},{"id":553946628,"title":"Bug: button onFocus not called when focus() called from useEffect cleanup","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Have a `<button/>` HTML element with `onFocus` event handler defined\\r\\n```\\r\\n<button ref={btnRef} onFocus={() => console.log(\\"I\'m in focus\\")}>Focus Target</button>\\r\\n```\\r\\n2. Have another component with `useEffect` cleanup code which will call `focus()`\\r\\n```\\r\\nReact.useEffect(() => {\\r\\n  const ref = btnRef.current;  // btnRef is a ref to the button component above\\r\\n  return () => {\\r\\n    console.log(\\"effect cleanup \\", new Date().toISOString());\\r\\n    ref.focus();\\r\\n  };\\r\\n}, []);\\r\\n```\\r\\n\\r\\nWhen the cleanup code from `useEffect` is called, `onFocus` event handler of the `button` is not called. The `button` is rendered in a component which is mounted when `useEffect` cleanup executes. For example it can be in the parent component.\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example: https://codesandbox.io/s/onfocus-not-called-from-useeffect-cleanup-npw7k\\r\\n\\r\\n1. Open example in browser (tested in Chrome 79.0.3945.88 and in Firefox 72.0.1).\\r\\n2. Open dev console\\r\\n3. Click on Focus target button. See another component below it with two buttons.\\r\\n4. Remove focus from Focus target button by setting it in adjacent input field \\r\\n5. Click on Set focus button. Observe that focus is set to Focus target button and in console see message \'I\'m in focus...\'. This message is logged from `onFocus` event handler\\r\\n6. Remove focus from Focus target button.\\r\\n7. Click Close me button. Observe that focus is set to Focus target button but no message in console from `onFocus` event handler\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\n`onFocus` is not called\\r\\n\\r\\n## The expected behavior\\r\\n`onFocus` is called","number":17894,"user":{"login":"fyodore82"},"state":"open","created_at":"2020-01-23T05:30:23Z"},{"id":553833058,"title":"[react-test-renderer]: Cannot read property \'current\' of undefined","body":"Searched online and the only solution was to keep react, react-dom, and react-test-renderer packages the same version. I have those three packages as the same version (^16.8.6) but I\'m still getting the error.\\r\\n\\r\\nReact version: 16.8.6\\r\\nReact DOM version: 16.8.6\\r\\nReact Test Renderer: 16.8.6\\r\\n\\r\\nMy test script is `jest --env=jsdom`\\r\\n\\r\\nUsing Babel v7.\\r\\n\\r\\n<img width=\\"866\\" alt=\\"Screen Shot 2020-01-22 at 5 28 39 PM\\" src=\\"https://user-images.githubusercontent.com/8991960/72940334-b4ddfa80-3d3c-11ea-811c-36b8e6ad0052.png\\">\\r\\n\\r\\nThis is my test code:\\r\\n\\r\\n<img width=\\"401\\" alt=\\"Screen Shot 2020-01-22 at 5 29 39 PM\\" src=\\"https://user-images.githubusercontent.com/8991960/72940386-ce7f4200-3d3c-11ea-8b9b-ad98073b4fe8.png\\">\\r\\n\\r\\n.babelrc:\\r\\n\\r\\n<img width=\\"433\\" alt=\\"Screen Shot 2020-01-22 at 5 30 01 PM\\" src=\\"https://user-images.githubusercontent.com/8991960/72940404-db039a80-3d3c-11ea-85f1-30e71da90390.png\\">\\r\\n\\r\\njest.config.js\\r\\n\\r\\n<img width=\\"679\\" alt=\\"Screen Shot 2020-01-22 at 5 30 24 PM\\" src=\\"https://user-images.githubusercontent.com/8991960/72940429-e787f300-3d3c-11ea-8ed9-fcf99f4efc67.png\\">\\r\\n","number":17893,"user":{"login":"sahibjotsaggu"},"state":"open","created_at":"2020-01-22T22:31:31Z"},{"id":553735980,"title":"Update to flow 0.97","body":"## Summary\\r\\n\\r\\nUpdates to Flow 0.97.\\r\\n\\r\\n[Flow made some changes](https://github.com/facebook/flow/issues/7702#issuecomment-491916906) when refining `mixed` to a function. But I don\'t understand how to fix our types to avoid this error, so I used `$FlowFixMe` to suppress them instead. Open to suggestions.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn flow dom`","number":17892,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-22T19:08:51Z"},{"id":553674013,"title":"Bug: Cannot download experimental React build from CI","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nFollowing the [instructions](https://github.com/facebook/react/tree/master/packages/react-devtools#download-from-ci) for local development of react-devtools, it\'s not possible to download the experimental build from CI.\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Run the `./scripts/release/download-experimental-build.js` command from the root of the repository.\\r\\n2. The following error will be thrown\\r\\n```\\r\\nCannot read property \'build_num\' of undefined\\r\\n\\r\\nTypeError: \\r\\n    at run (facebook/react/scripts/release/shared-commands/get-latest-master-build-number.js:21:4)\\r\\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\\r\\n    at async facebook/react/scripts/release/node_modules/progress-estimator/src/logger.js:58:27\\r\\n    at async run (facebook/react/scripts/release/download-experimental-build.js:21:22)\\r\\n```","number":17891,"user":{"login":"ahmehri"},"state":"open","created_at":"2020-01-22T17:03:39Z"},{"id":553614069,"title":"Bug: ref object always return null with hooks","body":"the issue only happen with flatList\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/15056155/72907003-d4285800-3d3b-11ea-9d87-5f84ce22cea6.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nimport React, { useState, useRef, useEffect } from \'react\';\\r\\nimport { View, Text, FlatList, Button } from \'react-native\';\\r\\nimport Animated, { Transitioning, Transition } from \'react-native-reanimated\';\\r\\nimport PropTypes from \'prop-types\';\\r\\nimport styles from \'./styles\';\\r\\n\\r\\nconst AnimatedHorizontalList = ({ data }) => {\\r\\n  const [list, setList] = useState([]);\\r\\n\\r\\n  const ref = useRef();\\r\\n\\r\\n  const transition = (\\r\\n    <Transition.Sequence>\\r\\n      <Transition.Out delayMs={200} type=\\"scale\\" />\\r\\n      <Transition.Change delayMs={200} interpolation=\\"easeInOut\\" />\\r\\n      <Transition.In delayMs={2000} type=\\"fade\\" />\\r\\n    </Transition.Sequence>\\r\\n  );\\r\\n\\r\\n  useEffect(() => {\\r\\n      ref.current.animateNextTransition();\\r\\n      setList(data);\\r\\n  });\\r\\n\\r\\n  const renderItem = ({ item }) => {\\r\\n    return (\\r\\n      <Transitioning.View ref={ref} transition={transition}>\\r\\n        <View>\\r\\n          <Text>{item}</Text>\\r\\n        </View>\\r\\n      </Transitioning.View>\\r\\n    );\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <View style={styles.container}>\\r\\n      <FlatList horizontal data={list} renderItem={renderItem} />\\r\\n    </View>\\r\\n  );\\r\\n};\\r\\n\\r\\nAnimatedHorizontalList.propTypes = {};\\r\\nexport default AnimatedHorizontalList;\\r\\n\\r\\n```","number":17890,"user":{"login":"dev-ahmed"},"state":"closed","created_at":"2020-01-22T15:25:06Z"},{"id":553404369,"title":"Remove call to finishHooks when doing a static render.","body":"\x3c!--\\r\\n  Thanks for submitting a pull request!\\r\\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\\r\\n\\r\\n  Before submitting a pull request, please make sure the following is done:\\r\\n\\r\\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n  2. Run `yarn` in the repository root.\\r\\n  3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n  10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\\r\\n--\x3e\\r\\n\\r\\n## Summary\\r\\nFixes #16416 . If you had a `renderToStaticMarkup` or `renderToString` inside the hook, it would cause all the hooks to finish and set `workInProgressHook` to `null`. In this PR, I am trying to call the `finishHooks` only when we\'re not doing a static markup. \\r\\n\\r\\n\\r\\n## Test Plan\\r\\nIts my first issue so I might have missed something. I ran `yarn test`, `yarn linc` and `yarn flow`, they are all passing. Also, I am not sure how to add a test for this.\\r\\n\\r\\n\\r\\n","number":17889,"user":{"login":"ijxsid"},"state":"open","created_at":"2020-01-22T09:13:00Z"},{"id":553134851,"title":"Remove dynamic GKs for selective/train","body":"There are shipped/shipping.","number":17888,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2020-01-21T21:17:30Z"},{"id":553093912,"title":"Make disable context flag dynamic for WWW","body":"I want to make a GK to turn it off. To prevent more usages from being added.","number":17887,"user":{"login":"gaearon"},"state":"closed","created_at":"2020-01-21T19:54:40Z"},{"id":553076397,"title":"Bug: state is not stable for local component","body":"React version: 16.12.0\\r\\nDon\'t know if this the intended behavior or a bug... if not a bug it should be documented somewhere.\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n[link to code example](https://codepen.io/hagaigold/pen/xxbmqoR)\\r\\n\\r\\n## The current behavior\\r\\n\\r\\na local (to a function) component is destroyed every render, while an expression is not.\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nboth local components and the JSX expression beave the same.","number":17886,"user":{"login":"hagaigold"},"state":"closed","created_at":"2020-01-21T19:19:57Z"},{"id":553070324,"title":"Enable a lint rule not to define after return and fix existing callsites","body":"https://twitter.com/therealyashsriv/status/1219691914523545601\\r\\n\\r\\nWe shouldn\'t generate code that might cause browser or linting to complain.\\r\\n\\r\\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/legacy-events/SyntheticEvent.js#L259\\r\\n\\r\\nIt\'s also just a confusing pattern at best.","number":17885,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2020-01-21T19:07:16Z"},{"id":553050426,"title":"Bug: ReturnType<EffectCallback> prevents optional chaining sugar","body":"React version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n```ts\\r\\nimport { EffectCallback, RefObject, useLayoutEffect, useRef } from \'react\';\\r\\n\\r\\ninterface RenderingContextMap {\\r\\n  \'2d\': CanvasRenderingContext2D;\\r\\n  \'bitmaprenderer\': ImageBitmapRenderingContext;\\r\\n  \'webgl\': WebGLRenderingContext;\\r\\n  \'webgl2\': WebGL2RenderingContext;\\r\\n}\\r\\n\\r\\nfunction useDraw<Id extends keyof RenderingContextMap>(\\r\\n  contextId: Id,\\r\\n  create?: (\\r\\n    ctx: RenderingContextMap[Id],\\r\\n    isStale: () => boolean\\r\\n  ) => ReturnType<EffectCallback>\\r\\n): RefObject<HTMLCanvasElement> {\\r\\n  const ref = useRef<HTMLCanvasElement>(null);\\r\\n\\r\\n  useLayoutEffect(\\r\\n    () => {\\r\\n      const ctx = ref.current?.getContext(contextId) as RenderingContextMap[Id] | null;\\r\\n\\r\\n      if (create && ctx) {\\r\\n        let stale = false;\\r\\n        const destroy = create(ctx, () => stale);\\r\\n\\r\\n        return () => {\\r\\n          stale = true;\\r\\n          destroy?.();\\r\\n//        ^^^^^^^ ts(2349)\\r\\n        };\\r\\n      }\\r\\n    },\\r\\n    [create, ref.current]\\r\\n  );\\r\\n\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n\\r\\n## The current behavior\\r\\n\\r\\n> This expression is not callable.\\r\\n  Not all constituents of type \'void | (() => void | undefined)\' are callable.\\r\\n    Type \'void\' has no call signatures.\\r\\n\\r\\nThe error makes sense, because `void` does not mean `undefined`, it means the type could be anything, and should not be observed. However, it is inconvenient because this is contrary to the contract explained below.\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\n`ReturnType<EffectCallback>` _should_ be `undefined | (() => void)` instead, so optional chaining on the teardown function will be allowed.\\r\\n\\r\\nThe contract for this interface, as noted by the [latest relevant commit](https://github.com/facebook/react/commit/66eb29374239945c3a512a88aa2480637f62e5cc):\\r\\n\\r\\n> Assume Effect hook returns either a function or undefined\\r\\n\\r\\nOn the contrary, `void` type signifies that the return type of the function will not be observed<sup>[1](#user-content-source-1) [2](#user-content-source-2)</sup>, allowing a function implementing the interface to return _anything_ with the assurance that its return value will be ignored by the caller. It is _not_ interchangeable with `undefined`.\\r\\n\\r\\nThe reason I request `undefined | (() => void)` instead of `undefined | (() => void | undefined)` goes along the same logic; the return value of the teardown function _should_ be ignored,\\r\\n\\r\\nCurrently, my work-around is to use `if (destroy) destroy();` instead of `destroy?.();`.\\r\\n\\r\\n#### Sources: \\r\\n\\r\\n1. <a id=\\"source-1\\" href=\\"https://github.com/Microsoft/TypeScript/issues/25481\\">void is not assignable to undefined with function types</a>\\r\\n2. <a id=\\"source-2\\" href=\\"https://stackoverflow.com/a/58885486/1541563\\">Why does TypeScript have both `void` and `undefined`?</a>","number":17884,"user":{"login":"patrickroberts"},"state":"closed","created_at":"2020-01-21T18:24:37Z"},{"id":553048226,"title":"Bug: onPointerEnterCapture and onPointerLeaveCapture result in `unknown event handler property`","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact version: v16.12.0 from https://unpkg.com/react/umd/react.development.js\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. attach onPointerEnterCapture to a JSX element\\r\\n2. observe `unknown event handler property` error in console\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example: https://jsfiddle.net/tommedema/1uqoemxs/2/\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nIt displays a `unknown event handler property` warning\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nThe capturing phase of the onPointerEnter and onPointerLeave events should be supported","number":17883,"user":{"login":"tommedema"},"state":"open","created_at":"2020-01-21T18:19:58Z"},{"id":553014348,"title":"Update legacy context warning message","body":"After speaking to @gaearon, we spoke about how we can improve the warning message when using StrictMode with legacy context. Previously, we would output all the offending components and the component stack of the StrictMode, which wasn\'t that useful in practice. With the changes in this PR, we now output the component stack of the component that most frequently had legacy context warnings in StrictMoode.","number":17882,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-21T17:12:08Z"},{"id":553001408,"title":"Bug: standalone react devtools can\'t save settings","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nI don\u2019t know if save settings are not supported in standalone react devtools, but I think it\'s a very basic function.\\r\\nI use it to debug react project in electron, the repository is [coo](https://github.com/tjx666/coo). You may need to fallback the code to commit id: 44726520aa417b82712b5a4d91e14100048f23c3\\r\\n\\r\\nReact version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1.start standalone react devtools and set theme dark\\r\\n2.restart standalone react devtools, but the theme is still auto\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example:\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\ncan\'t save settings\\r\\n## The expected behavior\\r\\nsupport save settings\\r\\n","number":17881,"user":{"login":"tjx666"},"state":"open","created_at":"2020-01-21T16:50:10Z"},{"id":552887553,"title":"Add unstable_renderSubtreeIntoContainer and unstable_createPortal feature flags","body":"This PR adds two feature flags:\\r\\n\\r\\n- `disableUnstableRenderSubtreeIntoContainer` for `ReactDOM.unstable_renderSubtreeIntoContainer`\\r\\n- `disableUnstableCreatePortal` for `ReactDOM.unstable_createPortal`\\r\\n\\r\\nThese disable the relevant unstable/deprecated ReactDOM APIs. Additionally `ReactDOM.unstable_renderSubtreeIntoContainer` has a deprecation warning message as follows:\\r\\n\\r\\n`The ReactDOM.unstable_renderSubtreeIntoContainer() is deprecated and will be removed in a future major release. Consider using React Portals instead.`\\r\\n\\r\\nI also changed the flowconfig to have the follow config, otherwise CI fails on this PR:\\r\\n\\r\\n`server.max_workers=4`","number":17880,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-21T13:47:16Z"},{"id":552833959,"title":"Bug: Hooks fail with renderToString","body":"So I\'m loading a precompiled react file into my server.js and using that to rendertostring.\\r\\n(there is a very good reason why I\'m doing it like this, don\'t ask about it, that\'s no part of the issue here)\\r\\n\\r\\nThis actually works but the moment you introduce hooks... it all goes to hell. I\'ve tried setting react/react-dom as externals and such. Nothing works. It keeps throwing the same issue.\\r\\n\\r\\n1. There are no mismatching versions\\r\\n2. There are no duplicate react versions I can see\\r\\n3. The rules of hooks are not broken as far as I know.\\r\\n\\r\\nReact version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. https://github.com/Pixelatex/hooks-ssr-issue\\r\\n2. Yarn build\\r\\n3. Yarn serve\\r\\n4. Go to localhost:3000 and see it crash, removing the hooks from app.js shows it working.\\r\\n\\r\\n\\r\\nLink to code example:\\r\\n\\r\\nhttps://github.com/Pixelatex/hooks-ssr-issue\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nIt should render a string with the resulting html.\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nHooks should just work.","number":17879,"user":{"login":"Pixelatex"},"state":"closed","created_at":"2020-01-21T12:02:32Z"},{"id":552822703,"title":"Add React.createFactory() deprecation warning","body":"This PR adds a deprecation warning when `React.createFactory` is used in DEV. This is a follow up to the comment in https://github.com/facebook/react/pull/17873#issuecomment-576460189.\\r\\n\\r\\nThe warning is as follows:\\r\\n\\r\\n`Warning: React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.`","number":17878,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-21T11:38:48Z"},{"id":552711153,"title":"Bug: Child event listener is called after parent\'s one when rendered conditionally","body":"React version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\nIf we have some `Parent` component which has event listener `document.addEventListener(\'mousedown\', cb)` in `useEffect` or `cDM` and `Children` component which is rendered conditionally with element which has a listener on `onMouseDown` too then after Child is rendered callback action on `Parent` listener is called first.\\r\\n\\r\\nLink to code example: https://codesandbox.io/s/throbbing-sun-ub2kd\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nconsole.log output\\r\\n\\r\\n```\\r\\napp \\r\\nchild \\r\\napp \\r\\nchild \\r\\n```\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nconsole.log output\\r\\n```\\r\\nchild \\r\\napp \\r\\nchild \\r\\napp \\r\\n```\\r\\n\\r\\nNot 100% this is bug or expected - I already find a way how to hack this.\\r\\n\\r\\nBut if we treat this as a bug I\'ve made some debugging which hopefully may be helpful (ofc I may be wrong, I\'m not enough familiar with library code). \\r\\n\\r\\nAs I noticed this happens because `addEventBubbleListener` action which adds listeners to document, and in this particular situation listener to Child element is added after parents one because is rendered later on because of some users action .","number":17877,"user":{"login":"michalak111"},"state":"open","created_at":"2020-01-21T08:59:01Z"},{"id":552609770,"title":"Bug: Devtools shows Anonymous for memoized function components","body":"![image](https://user-images.githubusercontent.com/34125384/72774268-0794b500-3c5e-11ea-9840-93620f87dbe5.png)\\r\\n\\r\\nReact version: 16.12.0\\r\\nReact dev tools version: 4.4.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. create-react-app\\r\\n2. Render memoized function component \\r\\n3. Inspect the component with latest React dev tools chrome extension\\r\\n\\r\\n## The current behavior\\r\\nComponent\'s name in devtools is Anonymous, I\'ve seen adding a displayName work in the past but it does not anymore.\\r\\n\\r\\n## The expected behavior\\r\\nName of component in devtools should be the set displayName.","number":17876,"user":{"login":"jwongnz"},"state":"closed","created_at":"2020-01-21T03:53:39Z"},{"id":552550485,"title":"Remove FB specific React isomorphic build","body":"I removed unstable_SuspenseList internally. We don\'t need the FB build. I plan on also removing the ReactDOM fb specific entry. We shouldn\'t add any more FB specific internals nor APIs. If they\'re experimental they should go onto the experimental builds to avoid too many permutations.\\r\\n","number":17875,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2020-01-20T23:29:21Z"},{"id":552348902,"title":"Add disable <textarea/> children flag","body":"This PR adds a feature flag `disableTextareaChildren` that disables support for `<textarea>` `children` content. This PR is kind of a follow up to https://github.com/facebook/react/pull/11639 but wraps the changes in a feature flag and keeps around the DEV warning message.","number":17874,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-20T14:54:31Z"},{"id":552300328,"title":"Add feature flag around React.createFactory","body":"This PR adds a `disableCreateFactory` feature flag that allows us to disable `React.createFactory` from being exported from the React package. I also had to update all tests that made use of this API and move them to `React.createElement`.","number":17873,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-20T13:29:08Z"},{"id":552164654,"title":"Error: \\"Could not find node with id \\"2153\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.4.0-f749045a5\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159909\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159855)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160378)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:323092)\\r\\n    at ei (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58864)\\r\\n    at yl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:106932)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99474)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99399)\\r\\n    at fc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96173)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17872,"user":{"login":"cristinamarin22"},"state":"open","created_at":"2020-01-20T09:09:40Z"},{"id":551971613,"title":"Bug: React.Node should not have `true`, or PropTypes.node warns it","body":"React version: 16.8.6\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n```js\\r\\nimport PropTypes from \'prop-types\';\\r\\n\\r\\ntype Props = {\\r\\n  component: React.Node\\r\\n};\\r\\n\\r\\nfunction Container(props: Props) {\\r\\n  return ...;\\r\\n}\\r\\n\\r\\nContainer.propTypes = {\\r\\n  component: PropTypes.node\\r\\n}\\r\\n\\r\\n<Container component={true} />\\r\\n```\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nFlow does not emit error (as React.Node accepts `true`), but PropTypes.node emits below runtime error in browser\'s console.\\r\\n\\r\\n```\\r\\nInvalid prop `component` supplied to `Container`, expected a ReactNode.\\r\\n```\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nFlow emits type error.\\r\\n\\r\\n----\\r\\n\\r\\n[According to a maintainer of prop-types](https://github.com/facebook/prop-types/issues/310#issuecomment-574986751), formerly React itself did not accept `true` for JSX node (in flow `React.Node`) (so not changing prop-types for now), is it right?","number":17871,"user":{"login":"ypresto"},"state":"closed","created_at":"2020-01-19T19:30:36Z"},{"id":551927015,"title":"Bug: useState and useReducer dispatcher should return the same reference.","body":"Not really a bug but something that bothered/concerned me when writing hooks. Initially, I thought the dispatcher functions for `useState` and `useReducer` retained the same reference, but it wasn\'t until today when the dispatcher functions caused my `useEffect` hooks to re-run.\\r\\n\\r\\nI was expecting this:\\r\\n\\r\\n```js\\r\\nconst [myState, setState] = React.useState(myInitialValue);\\r\\n\\r\\nReact.useEffect(() => {\\r\\n  console.log(\\"Dispatcher changed!\\");\\r\\n}, [setState]);\\r\\n\\r\\nReact.useEffect(() => {\\r\\n  // Trigger an update on mount\\r\\n  setState(newValue);\\r\\n}, []);\\r\\n```\\r\\nNot to log \\"Dispatcher changed!\\"\\r\\n\\r\\nI think these dispatcher functions should really retain its references across updates and re-renders (since old dispatcher references can still update the state), or is there any motivation as to why the reference isn\'t kept?","number":17870,"user":{"login":"LXSMNSYC"},"state":"closed","created_at":"2020-01-19T14:05:40Z"},{"id":551906353,"title":"Hi i got an error while compaling by code , and i had downloaded my React Devtools and added to the extensions now i can see in console (HMR) waiting for the update from WDS , i am not aware wat to do can you please help me out with these issues ","body":"\ud83d\udc49 Please follow one of these issue templates:\\r\\n- https://github.com/facebook/react/issues/new/choose\\r\\n\\r\\nNote: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.\\r\\n","number":17869,"user":{"login":"RajeshDundurthi"},"state":"closed","created_at":"2020-01-19T11:08:38Z"},{"id":551905906,"title":"I was getting an issue about React Devtools and i had downloaded that and as per the instructions ","body":"\ud83d\udc49 Please follow one of these issue templates:\\r\\n- https://github.com/facebook/react/issues/new/choose\\r\\n\\r\\nNote: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.\\r\\n","number":17868,"user":{"login":"RajeshDundurthi"},"state":"closed","created_at":"2020-01-19T11:05:12Z"},{"id":551851106,"title":"Question: React apollo hooks fails after adding react-native to monorepo","body":"I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:\\r\\n[![enter image description here][1]][1]\\r\\n\\r\\n\\r\\n  [1]: https://i.stack.imgur.com/KbvYG.png\\r\\n\\r\\nI am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.\\r\\n\\r\\nIs there any way how can I solve it?\\r\\n\\r\\nApollo controller\\r\\n\\r\\n    import { useQuery } from \\"@apollo/react-hooks\\";\\r\\n    import gql from \\"graphql-tag\\";\\r\\n    \\r\\n    export const useHelloQuery = () => useQuery(\\r\\n         gql`\\r\\n             {\\r\\n                 hello\\r\\n             }\\r\\n         `\\r\\n    )\\r\\n\\r\\n\\r\\nReact component:\\r\\n\\r\\n    function Test() {\\r\\n         const data = useHelloQuery();\\r\\n    \\r\\n         return (\\r\\n              <Text>awesoe</Text>\\r\\n         );\\r\\n    }\\r\\n    \\r\\n\\r\\nbefore adding react-native it was exactly same","number":17867,"user":{"login":"PixelMooort"},"state":"closed","created_at":"2020-01-19T01:43:43Z"},{"id":551772106,"title":"Bug: Error: EMFILE: too many open files, open \'C:\\\\xxx\\\\web\\\\build\\\\static\\\\js\\\\main.b1a04325.chunk.js\'","body":"I use `serve` to serve my React app because this docs said so: https://create-react-app.dev/docs/deployment/\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact version: 16.12.0\\r\\nOS: Win 10 x64\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Create a React app.\\r\\n2. Let a lot of users use it.\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nAfter dozens of minutes of access (~ 20 requests/second), I always encounter such error. It seems that too many people are reading the static files.\\r\\n\\r\\n```\\r\\nMicrosoft Windows [Version 10.0.17763.914]\\r\\n(c) 2018 Microsoft Corporation\\r\\n\\r\\nC:\\\\xxx\\\\web>serve -s build -l 6001\\r\\n\\r\\nC:\\\\xxx\\\\web>\\"node\\"  \\"C:\\\\Users\\\\Administrator\\\\AppData\\\\Roaming\\\\npm\\\\\\\\node_modules\\\\serve\\\\bin\\\\serve.js\\" -s build -l 6001\\r\\n\\r\\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\r\\n   \u2502                                                 \u2502\\r\\n   \u2502   Serving!                                      \u2502\\r\\n   \u2502                                                 \u2502\\r\\n   \u2502   - Local:            http://localhost:6001     \u2502\\r\\n   \u2502   - On Your Network:  http://172.17.10.7:6001   \u2502\\r\\n   \u2502                                                 \u2502\\r\\n   \u2502   Copied local address to clipboard!            \u2502\\r\\n   \u2502                                                 \u2502\\r\\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\r\\n\\r\\n\\r\\nINFO: Gracefully shutting down. Please wait...\\r\\nevents.js:187\\r\\n      throw er; // Unhandled \'error\' event\\r\\n      ^\\r\\n\\r\\nError: EMFILE: too many open files, open \'C:\\\\xxx\\\\web\\\\build\\\\static\\\\js\\\\main.b1a04325.chunk.js\'\\r\\nEmitted \'error\' event on ReadStream instance at:\\r\\n    at internal/fs/streams.js:120:12\\r\\n    at FSReqCallback.oncomplete (fs.js:146:23) {\\r\\n  errno: -4066,\\r\\n  code: \'EMFILE\',\\r\\n  syscall: \'open\',\\r\\n  path: \'C:\\\\\\\\xxx\\\\\\\\web\\\\\\\\build\\\\\\\\static\\\\\\\\js\\\\\\\\main.b1a04325.chunk.js\'\\r\\n}\\r\\n```\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nNo error.\\r\\n","number":17866,"user":{"login":"hsluoyz"},"state":"closed","created_at":"2020-01-18T13:51:58Z"},{"id":551688408,"title":"[DO-NOT-MERGE][Native] Migrate focus/blur to call TextInputState with the host component","body":"In order to make focus/blur work for Fabric we need to make event targets be a component instance instead of a react tag. \\r\\n\\r\\nThat PR has landed behind a feature flag. Before we can land this we need that to roll out completely and flip the feature flag on by default.\\r\\n\\r\\nThis PR then updates the Renderer integration with TextInputState to handle instances instead of reactTag.\\r\\n\\r\\nIn order to make that work, we have to have an instance. Which means that components with NativeMethodsMixin and ReactNative.NativeComponent will no longer be able to call `.focus` or `.blur`. This is a breaking change but we are okay with that. For Fabric components implemented with those aren\'t supported anyways.\\r\\n\\r\\nThis changes the HostComponents, making them pass themselves to TextInputState.\\r\\n\\r\\nAlso added tests.\\r\\n\\r\\nFor Facebook employees: \\r\\nThis PR will need to land and by synced in conjunction with D19458214","number":17865,"user":{"login":"TheSavior"},"state":"open","created_at":"2020-01-18T00:10:59Z"},{"id":551687381,"title":"Add different string ref warning when owner and self are different","body":"When owner and self are different for string refs, we can\'t easily convert them to callback refs. This PR adds a warning for string refs for everyone when owner and self are different to tell users to manually update these refs.","number":17864,"user":{"login":"lunaruan"},"state":"closed","created_at":"2020-01-18T00:06:35Z"},{"id":551483050,"title":"Update","body":"\x3c!--\\r\\n  Thanks for submitting a pull request!\\r\\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\\r\\n\\r\\n  Before submitting a pull request, please make sure the following is done:\\r\\n\\r\\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n  2. Run `yarn` in the repository root.\\r\\n  3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n  10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\\r\\n--\x3e\\r\\n\\r\\n## Summary\\r\\n\\r\\n\x3c!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? --\x3e\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n\x3c!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. --\x3e\\r\\n","number":17863,"user":{"login":"pl2476"},"state":"closed","created_at":"2020-01-17T15:35:26Z"},{"id":551388653,"title":"API for display name on forwardRef, memo and potential future exotic components","body":"Continuation of #14319 which was closed by a bot. I would hope that a maintainer takes the time and reopens the original issue and closes this one, thanks.\\r\\n\\r\\nTL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?\\r\\n\\r\\n\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nExpose an API to get the display name of every component (in `__DEV__` only).\\r\\n\\r\\n**What is the current behavior?**\\r\\nMost of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` \\r\\n (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\\"connect(WrappedComponent)\\"` as a `displayName`.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nSince components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:\\r\\n\\r\\nhttps://codesandbox.io/s/zqj9v50243\\r\\n\\r\\n- `react-redux` creates `\\"connect(Component)\\"`\\r\\n- `react-router` creates `\\"withRouter(undefined)\\"`\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe new \\"exotic-components\\" should work with the existing 3rd party libraries WRT to `displayName`.\\r\\n\\r\\nNow there are a couple of solutions to this issue:\\r\\n1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)\\r\\n2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932\\r\\n3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)\\r\\n4. Set a `name` (or `displayName` no preference here) property on those \\"exotic-components\\" (don\'t know how to call them). Naive implementation e.g.: `name: \'ForwardRef(\' + fn.name + \')\'`.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI guess this started with `forwardRef` in 16.3.\\r\\n","number":17862,"user":{"login":"eps1lon"},"state":"closed","created_at":"2020-01-17T12:29:49Z"},{"id":551387663,"title":"Remove ReactInstanceMap_DO_NOT_USE shim","body":"This was recently remove internally, so we no longer need to keep it for the www sync.","number":17861,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-17T12:27:29Z"},{"id":551383294,"title":"Question: I have a lot of very nice and smart vuejs components. is there a way to use it in an react project? ","body":"\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8\\r\\n\\r\\nAs it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.\\r\\n\\r\\n## Coding Questions\\r\\n\\r\\nIf you have a coding question related to CLOSE THIS PAGE - NOW and CLOSE THIS PAGE - NOW DOM, it might be better suited for Stack Overflow. It\'s a great place to browse through frequent questions about using CLOSE THIS PAGE - NOW, as well as ask for help with specific questions.\\r\\n\\r\\nhttps://stackoverflow.com/questions/tagged/CLOSE THIS PAGE - NOW\\r\\n\\r\\n## Talk to other CLOSE THIS PAGE - NOW developers\\r\\n\\r\\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of CLOSE THIS PAGE - NOW.\\r\\n\\r\\nhttps://CLOSE THIS PAGE - NOWjs.org/community/support.html#popular-discussion-forums\\r\\n\\r\\n## Proposals\\r\\n\\r\\nIf you\'d like to discuss topics related to the future of CLOSE THIS PAGE - NOW, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.\\r\\n\\r\\nhttps://github.com/CLOSE THIS PAGE - NOWjs/rfcs\\r\\n","number":17860,"user":{"login":"kainbacher"},"state":"closed","created_at":"2020-01-17T12:17:34Z"},{"id":551368306,"title":"[react-interactions] Remove deprecated Scope APIs + update Focus components","body":"This PR removes the deprecated Scope APIs that handled traversal. These APIs are no longer used internally, and instead now use React Context and the `scope.getChildContextValues()` API exclusively.\\r\\n\\r\\nUnfortunately, I\'ve decided to also remove the `accessibility` directory from the React repository for now, which includes the accessibility components. Many of the tests/docs/components were out of date compared to their latest versions, which were migrated to our internal FB repository last year. Keeping the components in sync proved to be very time-consuming because of several differences. Notably, our internal Jest tests for these components made usage of our internal testing infrastructure which is not available in open-source right now, plus there were usages of other bits of Facebook IP that I\'d have to remove before syncing back over.\\r\\n\\r\\nA more effecient long-term strategy will be to work with the partner teams involved and come up with a plan that involves moving these components back into open-source, probably under a different repository maybe, or maybe a different project relating to Facebook\'s accessibility work.","number":17859,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-17T11:42:30Z"},{"id":551340424,"title":"I used a class component before this. But I liked the hooks more. It\u2019s very comfortable to work with him and it\u2019s not difficult to understand. Thanks to your team for this !","body":"\ud83d\udc49 Please follow one of these issue templates:\\r\\n- https://github.com/facebook/react/issues/new/choose\\r\\n\\r\\nNote: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.\\r\\n","number":17858,"user":{"login":"madly0894"},"state":"closed","created_at":"2020-01-17T10:43:38Z"},{"id":551324853,"title":"chore: update istanbul-reports to remove handlebars dependency","body":"\x3c!--\\r\\n  Thanks for submitting a pull request!\\r\\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\\r\\n\\r\\n  Before submitting a pull request, please make sure the following is done:\\r\\n\\r\\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n  2. Run `yarn` in the repository root.\\r\\n  3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n  10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\\r\\n--\x3e\\r\\n\\r\\n## Summary\\r\\n\\r\\nMakes `yarn audit` happier\\r\\n\\r\\n## Test Plan\\r\\n\\r\\nHTML coverage report still works","number":17857,"user":{"login":"SimenB"},"state":"open","created_at":"2020-01-17T10:14:31Z"},{"id":550950546,"title":"Bug: strict equality operator for comparison of oldProps and newProps and/or old & new context will not work since THOSE ARE OBJECTS","body":"In React Fiber implementation everywhere prop objects are checked using \\"===\\" operator, which in case of object doesn\u2019t verify using deep equality check, and works like a reference equality.\\r\\nSee below for the code mentions. \\r\\n\\r\\nReact version:\\r\\n16.12.0\\r\\nReact-Dom version:\\r\\n16.11.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Write the following code to test it.\\r\\n2. Check in the console.\\r\\n\\r\\n```js\\r\\n\\r\\nconst logDifferences = (nameOfComponent) => (oldProps, newProps) => {\\r\\n  const serializedOldProps = JSON.stringify(oldProps);\\r\\n  const serializedNewProps = JSON.stringify(newProps);\\r\\n  console.warn(`[${nameOfComponent}] Differences --\x3e `, \\"old props :\\", serializedOldProps, \\"new props :\\", serializedNewProps, \\"verdict : \\", serializedOldProps !== serializedNewProps);\\r\\n};\\r\\n\\r\\nclass Child extends React.Component {\\r\\n  componentWillReceiveProps (nextProps, nextContext) {\\r\\n    logDifferences(\\"Child\\")(this.props, nextProps);\\r\\n  }\\r\\n\\r\\n  render () {\\r\\n    return (<>Child got rendered at : {new Date().toISOString()}</>);\\r\\n  }\\r\\n}\\r\\n\\r\\nclass SweetChild extends React.PureComponent {\\r\\n  componentWillReceiveProps (nextProps, nextContext) {\\r\\n    logDifferences(\\"SweetChild\\")(this.props, nextProps);\\r\\n  }\\r\\n\\r\\n  render () {\\r\\n    return (<>Sweet Child got rendered at : {new Date().toISOString()}</>);\\r\\n  }\\r\\n}\\r\\n\\r\\nclass Parent extends React.Component {\\r\\n  state = {currentDate: new Date()};\\r\\n\\r\\n  componentDidMount() {\\r\\n    setInterval(()=> this.setState({currentDate: new Date()}), 500);\\r\\n  }\\r\\n  \\r\\n  render() {    \\r\\n    return (\\r\\n      <div>\\r\\n        Parent state updated at : {this.state.currentDate.toISOString()}\\r\\n        <br />\\r\\n        <Child a=\\"1\\" b={4}/>\\r\\n        <br />\\r\\n        <SweetChild a=\\"1\\" b={4}/>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n} \\r\\n\\r\\nReactDOM.render(<Parent />, document.body);\\r\\n\\r\\n```\\r\\n\\r\\nLink to code example:\\r\\n\\r\\nhttps://codepen.io/ppanda-beta/pen/gObdvwO?editors=0011\\r\\n\\r\\n\\r\\n## The current behavior\\r\\nFor Component instances, `componentWillReceiveProps` is  called and component is re rendered\\r\\nFor PureComponent instances, `componentWillReceiveProps` is  called but component is not re rendered when props are `shallowEqual`\\r\\n\\r\\n\\r\\n## The expected behavior\\r\\nFor both Component and PureComponent, componentWillReceiveProps should not be called, and not rerendered. \\r\\n\\r\\n\\r\\n## Possible reasons \\r\\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1034\\r\\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1051-L1056\\r\\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1052-L1053\\r\\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1069-L1070\\r\\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1060-L1063\\r\\nhttps://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L286-L288\\r\\n\\r\\n## Temporary Solution\\r\\nOverride `  shouldComponentUpdate(nextProps, nextState, nextContext)` to stop extra re-rendering. \\r\\n","number":17856,"user":{"login":"pPanda-beta"},"state":"closed","created_at":"2020-01-16T17:27:25Z"},{"id":550945196,"title":"Bug: DevTools DOM highlighting gets stuck after a prolonged hover","body":"## Steps To Reproduce\\r\\n\\r\\n1. Hover a component in DevTools\\r\\n2. *Keep hovering it for a second or so*\\r\\n3. Quickly move the cursor out of the DevTools without hovering anything else\\r\\n\\r\\nExpected: DOM highlighting goes away.\\r\\nActual: DOM highlighting gets stuck.\\r\\n\\r\\n![](https://d1sz9tkli0lfjq.cloudfront.net/items/2o2r240l0o3i1B0d1n3J/Screen%20Recording%202020-01-16%20at%2005.14%20PM.gif?v=e1a91e13)","number":17855,"user":{"login":"gaearon"},"state":"open","created_at":"2020-01-16T17:16:35Z"},{"id":550717611,"title":"Question: react lib context overrides app context","body":"Hi, I believe that this can potentially be an issue, though I\'m not sure.\\r\\n\\r\\nI was wondering about good patterns concerning the react context.\\r\\n\\r\\nLet\'s get a public library, for example `react-intl` that exposes a Provider (IntlProvider).\\r\\nLet\'s create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`.\\r\\nNow let\'s imagine I create a web app and use both `barLib` and `react-intl`.\\r\\n\\r\\nI don\'t expect the `barLib` to ever override my react-intl context, because i\'m not aware it uses internally the `react-intl` lib.\\r\\nBut the `barLib` can accidentally override the react-intl context => https://codesandbox.io/s/embedded-contexts-test-z8e7b\\r\\n\\r\\nThis kinda breaks the isolation of libs IMO.\\r\\n\\r\\nI see several solutions :\\r\\n- Don\'t use an other lib context in the `barLib` (pretty extreme)\\r\\n- Check that there is not already an intl context in the `barLib`, if so merge the context values ?\\r\\n\\r\\nI\'m not convinced with either solutions, what do you guys think about it ?","number":17854,"user":{"login":"TomPradat"},"state":"closed","created_at":"2020-01-16T10:33:57Z"},{"id":550699542,"title":"Bug: useRef can not return a persist ref object","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact version:\\r\\n\\r\\n16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Click Button\uff0cView print data\\r\\n2. Click Button\uff0cView print data\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example:\\r\\nhttps://codesandbox.io/s/kind-fog-mce7w\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\nEvery time you click the button, the printed data will change\\r\\n\\r\\n## The expected behavior\\r\\nEvery time I click the button, the printed data should be an empty object","number":17853,"user":{"login":"janryWang"},"state":"closed","created_at":"2020-01-16T10:02:14Z"},{"id":550663165,"title":"Fresh cleanup","body":"\x3c!--\\r\\n  Thanks for submitting a pull request!\\r\\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\\r\\n\\r\\n  Before submitting a pull request, please make sure the following is done:\\r\\n\\r\\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n  2. Run `yarn` in the repository root.\\r\\n  3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n  10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\\r\\n--\x3e\\r\\n\\r\\n## Summary\\r\\n\\r\\n\x3c!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? --\x3e\\r\\n\\r\\nI was trying to read react-refresh but it wasn\'t easy to read for me as there were a lot of big nested if blocks there with a one-liner else block.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n\x3c!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. --\x3e\\r\\n\\r\\nNothing comes to my mind about this part.\\r\\n","number":17852,"user":{"login":"mamal72"},"state":"closed","created_at":"2020-01-16T08:55:26Z"},{"id":550369388,"title":"Docs: React documentation is the documentation I have ever seen. It dosent even properly tell how to get started and create new app. Take some inspiration from documentation of Django, Flutter, Vue, Angular, etc ","body":"\ud83d\udea8 This issue tracker is not for documentation issues. \ud83d\udea8\\r\\n\\r\\nThe React website is hosted on a separate repository. You may let the\\r\\nteam know about any issues with the documentation by opening an issue there:\\r\\n- https://github.com/reactjs/reactjs.org/issues/new\\r\\n","number":17851,"user":{"login":"dev-akshat"},"state":"closed","created_at":"2020-01-15T18:59:24Z"},{"id":550368448,"title":"React documentation is the worst documentation I have ever seen. I couldn\'t even create the app while going through documentation. Take some learning from documentation of Django, Flutter, Vue, Angular, etc","body":"\ud83d\udc49 Please follow one of these issue templates:\\r\\n- https://github.com/facebook/react/issues/new/choose\\r\\n\\r\\nNote: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.\\r\\n","number":17850,"user":{"login":"dev-akshat"},"state":"closed","created_at":"2020-01-15T18:57:25Z"},{"id":550330074,"title":"Fix DevTools Flow error for key-sort function","body":"Unblocks Flow upgrade #17842","number":17849,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-15T17:33:30Z"},{"id":550322497,"title":"Fix Cannot read property \'sub\' of undefined when navigating to plain-text pages","body":"This PR fixes: #17832\\r\\n\\r\\n* Still inject Global Hook Code in text/plain case. It hasn\'t been ignored unintentionally in #17739\\r\\n\\r\\n\\r\\n","number":17848,"user":{"login":"wfnuser"},"state":"open","created_at":"2020-01-15T17:18:24Z"},{"id":550293021,"title":"Bug: Type Error:undefined is not an object (evaluating\'_expo.default.fileSystem\')","body":"\\r\\n![ERROR](https://user-images.githubusercontent.com/58271750/72451076-4e446400-37b3-11ea-991f-fd2ea391510a.PNG)\\r\\n\x3c!--\\r\\nim using react native to run my app. but i keep getting this error [see image attached] . plx someone help me.\\r\\n{ expo-file-system folder is already installed.}\\r\\n--\x3e\\r\\n\\r\\nReact version:\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1.\\r\\n2.\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example:\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\n\\r\\n\\r\\n## The expected behavior\\r\\n","number":17847,"user":{"login":"aboudi619"},"state":"closed","created_at":"2020-01-15T16:26:40Z"},{"id":550266030,"title":"Warning: Did not expect server HTML to contain the [first prerendered] text node \\"[chinese characters]\\"","body":"I don\'t even know where to start with this. When I inspect the source of this error, it is a very well-written section of code, but I can find almost no documentation on this problem anywhere. I don\'t know what causes it and short of spending the next two weeks stepping through React and Next.js, I have no way of know where to start. I thought I had fixed the problem by making FontAwesome a dynamic import, but then the text next to it through the same error. I\'ve also had classes causing errors by not resolving to the same class names on hydration as the prerendered HTML has. I don\'t understand this problem and I don\'t know what it means. \\r\\n\\r\\nHere\'s my package.json, if that helps anything. This problem doesn\'t make any sense to me but i\'ve been running into it since I started with next.js, but I don\'t know anything about it. \\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"name\\": \\"next-project\\",\\r\\n  \\"version\\": \\"1.0.0\\",\\r\\n  \\"description\\": \\"\\",\\r\\n  \\"main\\": \\"src/pages/index.ts\\",\\r\\n  \\"scripts\\": {\\r\\n    \\"dev\\": \\"rm -rf .next .expo && next dev\\",\\r\\n    \\"build\\": \\"next build\\",\\r\\n    \\"start\\": \\"next start\\",\\r\\n    \\"next\\": \\"next\\"\\r\\n  },\\r\\n  \\"author\\": \\"https://github.com/arlen22/\\",\\r\\n  \\"license\\": \\"ISC\\",\\r\\n  \\"dependencies\\": {\\r\\n    \\"@expo/vector-icons\\": \\"^10.0.6\\",\\r\\n    \\"@unimodules/core\\": \\"^5.0.0\\",\\r\\n    \\"@unimodules/react-native-adapter\\": \\"^5.0.0\\",\\r\\n    \\"@zeit/next-css\\": \\"^1.0.1\\",\\r\\n    \\"babel-preset-expo\\": \\"^8.0.0\\",\\r\\n    \\"expo-asset\\": \\"^8.0.0\\",\\r\\n    \\"expo-font\\": \\"^8.0.0\\",\\r\\n    \\"native-base\\": \\"^2.13.8\\",\\r\\n    \\"next\\": \\"^9.1.5\\",\\r\\n    \\"next-fonts\\": \\"^0.19.0\\",\\r\\n    \\"next-images\\": \\"^1.2.0\\",\\r\\n    \\"next-progressbar\\": \\"^1.0.0\\",\\r\\n    \\"node-fetch\\": \\"^2.6.0\\",\\r\\n    \\"react\\": \\"^16.12.0\\",\\r\\n    \\"react-dom\\": \\"^16.12.0\\",\\r\\n    \\"react-icons\\": \\"^3.8.0\\",\\r\\n    \\"react-native-drawer-layout\\": \\"^2.0.0\\",\\r\\n    \\"react-native-web\\": \\"^0.11.7\\",\\r\\n    \\"rxjs\\": \\"^6.5.4\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"@expo/next-adapter\\": \\"^2.0.0-beta.10\\",\\r\\n    \\"@types/node\\": \\"^12.12.18\\",\\r\\n    \\"@types/react\\": \\"^16.9.16\\",\\r\\n    \\"@types/react-native\\": \\"^0.60.25\\",\\r\\n    \\"@types/react-native-drawer-layout\\": \\"^1.3.5\\",\\r\\n    \\"file-loader\\": \\"^5.0.2\\",\\r\\n    \\"next-transpile-modules\\": \\"^2.3.1\\",\\r\\n    \\"typescript\\": \\"^3.7.3\\",\\r\\n    \\"url-loader\\": \\"^3.0.0\\"\\r\\n  }\\r\\n}\\r\\n```","number":17846,"user":{"login":"Arlen22"},"state":"open","created_at":"2020-01-15T15:41:52Z"},{"id":549950806,"title":"Bug: Uncaught TypeError: Cannot read property \'nextSibling\' of null","body":"I am using [react-rehype](https://github.com/rehypejs/rehype-react) (latest version) to parse and format Markdown content that is continuously updating based on user input. On certain changes, particularly the creation of list items, I get an error message `Uncaught TypeError: Cannot read property \'nextSibling\' of null`.\\r\\n\\r\\nBefore I see the error message in the console, I see an unclosed comment tag when I inspect the element that is rendering the formatted text:\\r\\n![Screenshot 2020-01-13 at 9 59 45 AM](https://user-images.githubusercontent.com/46464143/72378704-c54ffe80-36c6-11ea-8a7f-ffa0918146d4.png)\\r\\n\\r\\nThe stack trace is all within React code:\\r\\n![Screenshot 2020-01-13 at 9 57 33 AM](https://user-images.githubusercontent.com/46464143/72378741-d7ca3800-36c6-11ea-9aac-50d9ca13e0ea.png)\\r\\n\\r\\nReact version: 15.6.0\\r\\n\\r\\n## Steps To Reproduce \\r\\n\\r\\nSmall repo with repro steps is at: https://github.com/bethanyaconnor/rehype-react-bug\\r\\n\\r\\n## The current behavior\\r\\nEventually, the component crashes in React code that updates the component on state change.\\r\\n\\r\\n## The expected behavior\\r\\nThere is no JS errors/crashes.\\r\\n","number":17845,"user":{"login":"bethanyaconnor"},"state":"open","created_at":"2020-01-15T03:56:28Z"},{"id":549942112,"title":"Question: why cann\'t I set echarts instance using useState?","body":"\\r\\n\\r\\n## Coding Questions\\r\\ni try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined\\r\\n```\\r\\nconst [instance, setInstance] = useState<ECharts | undefined>(undefined);\\r\\n\\r\\nconst chartInstance = echarts.init(root.current);\\r\\n    setInstance(prev => {\\r\\n        console.log(\'prev instance\', prev); // first time: undefined, then Echarts instance\\r\\n        return prev || chartInstance;\\r\\n    });\\r\\n    console.log(\'instance: \', instance, chartInstance); // instance is always undefined\\r\\n```\\r\\n\\r\\n\\r\\n","number":17844,"user":{"login":"hahabazinga"},"state":"closed","created_at":"2020-01-15T03:23:40Z"},{"id":549897088,"title":"the worst arabic translation ","body":"language and translation\\r\\ni\'m sure that you translated your react site by google \\r\\nthe worst result at all \\r\\ni hope you correct it \\r\\n\\r\\nhttps://github.com/reactjs/rfcs\\r\\n","number":17843,"user":{"login":"MaherAlshaar"},"state":"closed","created_at":"2020-01-15T00:31:27Z"},{"id":549882962,"title":"Update to flow-bin@0.89","body":"## Summary\\r\\n\\r\\nIncremental Flow update.\\r\\nVersions above 0.89 introduce new types of error.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn flow dom`\\r\\n","number":17842,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-14T23:44:58Z"},{"id":549876206,"title":"Removed \'reactInternal\' reference in DevTools overlay highlighter","body":"Verified observable behavior after this change matches behavior before.\\r\\n\\r\\nResolves #17822","number":17841,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-14T23:23:59Z"},{"id":549842275,"title":"[Fresh] Support DevTools v3","body":"I haven\'t verified but I think this would fix the issue we\'ve seen with the old version of the global hook.","number":17840,"user":{"login":"gaearon"},"state":"open","created_at":"2020-01-14T21:57:48Z"},{"id":549833476,"title":"Update typescript package and jest preprocessor","body":"## Summary\\r\\n\\r\\n* Updates typescript from 1.8 to 3.7\\r\\n* Updates the preprocessor code to work with 3.7\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn test`\\r\\n","number":17839,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-14T21:38:11Z"},{"id":549832711,"title":"Re-enabled DevTools context menu option in Firefox","body":"This enables function prop (or state or hooks) to be inspected.\\r\\n\\r\\nResolves #17681","number":17838,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-14T21:36:39Z"},{"id":549823608,"title":"Add support for Node v13 for development","body":"## Summary\\r\\n\\r\\nI can\'t build with Node v13 installed.\\r\\nThis should fix that\\r\\n","number":17837,"user":{"login":"jasonwilliams"},"state":"closed","created_at":"2020-01-14T21:17:49Z"},{"id":549692581,"title":"Bug: state not changing inside function declared in functional component","body":"I have a stateful component (using react hooks) and a stateless layout component.\\r\\nThe state behaves unexpectedly, as in 2 functions defined inside the stateful component, one gets the current value of the state and the other one gets the default value of the state.\\r\\n\\r\\nReact version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Open Console log\\r\\n2. Click on any cyan item (should log item index and editMode value)\\r\\n3. Click on Map (white area, should log \\"MAP click\\" and editMode value)\\r\\n4. Click on toggle button (should change editMode value to true)\\r\\n5. Click on Map (should log same message plus \\"On edit mode\\")\\r\\n6. Click on any cyan item (should log same message plus \\"On edit mode\\", **it doesn\'t**)\\r\\n\\r\\nLink to code example:\\r\\n\\r\\nhttps://codesandbox.io/s/sweet-smoke-tpjge\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nEditMode value does not change on \\"onItemClick\\" function, \\r\\nbut it does inside \\"onMapClick\\" function\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nEditMode value should behave consistently across all function definitions inside its scope\\r\\n\\r\\n## screenshots\\r\\n### EditMode FALSE\\r\\n![Screenshot from 2020-01-14 10-53-12](https://user-images.githubusercontent.com/16729556/72364514-45bd3200-36bc-11ea-96b4-5a1aecb903a5.png)\\r\\n\\r\\n### EditMode TRUE\\r\\n![Screenshot from 2020-01-14 10-53-55](https://user-images.githubusercontent.com/16729556/72364512-45bd3200-36bc-11ea-8bf8-d4cb6e62691b.png)\\r\\n","number":17836,"user":{"login":"barucAlmaguer"},"state":"closed","created_at":"2020-01-14T16:50:44Z"},{"id":549598947,"title":"[react-interactions] Add DO_NOT_USE to Scope methods","body":"In attempt to make it clearer about existing experimental APIs and their internal usage. In the long term, the Scopes API is expected to change/go-away but for now, given it\'s internal usage we\'ll have to find incremental ways to safely migrate to better options. This PR is one small step of many in order to do that. This PR makes the following changes:\\r\\n\\r\\n- Adds a `DO_NOT_USE` prefix to most Scope API methods that are potentially dangerous and will likely change or go away.\\r\\n- Provides a new experiemental method call `getChildContextValues` that attempts to work with existing React Context. It find the nearest child context values for a given type and returns them as part of an array. The idea is to internally use this approach and gradually deprecate and remove the DO_NOT_USE APIs.","number":17835,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-14T14:20:06Z"},{"id":549590654,"title":"[fail] move IsThisRendererActing to own namespace","body":"The `Events` namespace on the secret object might be disappearing, so `IsThisRendererActing` can\'t live on it anymore. This PR -\\r\\n- moves `IsThisRendererActing` from `ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Events` to `ReactDOM....Tests` \\r\\n","number":17834,"user":{"login":"threepointone"},"state":"open","created_at":"2020-01-14T14:06:45Z"},{"id":549521289,"title":"Bug:  \\"NotFoundError\\" when removeChildFromContainer -> container.removeChild(child) is called","body":"React throw an unhandled exception  \\"NotFoundError\\" when removeChildFromContainer -> container.removeChild(child) is called on a node that doesn\'t contains the child anymore.\\r\\nThis only occurs in IE 11. \\r\\n\\r\\nReact version: v16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Detach the Portal DOM element by an external library.\\r\\n2. In my scenario element where the portal is attached to is removed by asp POST back  (partial update of a Panel) \\r\\nThe same situation happens to a number of people but is hard to reproduce in a clean environment. For example https://stackoverflow.com/questions/57678799/react-portal-cannot-be-unmounted-without-non-react-dom-parent-how-can-i-unmoun\\r\\n\\r\\n\\r\\n## The current behavior\\r\\n \\"NotFoundError\\" when removeChildFromContainer -> container.removeChild(child) is called\\r\\n\\r\\n## The expected behavior\\r\\nCan we if(container.contains(child)) be added to removeChildFromContainer? This seems to solve the issue.\\r\\n\\r\\nI am happy to provide more details if something is unclear :)\\r\\n","number":17833,"user":{"login":"vkuba"},"state":"closed","created_at":"2020-01-14T12:00:14Z"},{"id":549445954,"title":"[react-devtools-extensions] Bug: Uncaught TypeError: Cannot read property \'sub\' of undefined when navigating to plain-text pages","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact Developer Tools: 4.4.0 f749045a5 (1/3/2020) from chrome webstore\\r\\nChromium: 81.0.4024.0 snapshot\\r\\nUbuntu: 18.04\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Open chrome with React Developer Tools installed\\r\\n2. Open developer console\\r\\n3. In console settings (cogwheel in console\'s top right corner)  check \\"Preserve log\\" checkbox (to make sure that the log is not overwritten on navigation)\\r\\n4. Navigate to a React-enabled website, e.g. `https://reactjs.org`\\r\\n5. Navigate to a plain-text page, such as `https://reactjs.org/robots.txt`\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nError is printed in console:\\r\\n\\r\\n```\\r\\nbackend.js:32 Uncaught TypeError: Cannot read property \'sub\' of undefined\\r\\n    at g (backend.js:32)\\r\\n    at e (backend.js:8)\\r\\ng @ backend.js:32\\r\\ne @ backend.js:8\\r\\npostMessage (async)\\r\\na @ contentScript.js:1\\r\\n117 @ contentScript.js:1\\r\\nn @ contentScript.js:1\\r\\n(anonymous) @ contentScript.js:1\\r\\n(anonymous) @ contentScript.js:1\\r\\n\\r\\n```\\r\\nwhere `backend.js` is a link to `chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js`\\r\\n\\r\\n`fmkadmapgofadopljbjfkapdkoienihi` is an ID of React Developer Tools: I verified by opening `chrome://extensions/` and performing page search for this ID.\\r\\n\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nNo errors\\r\\n\\r\\n## Notes\\r\\n\\r\\nIt\'s a convoluted usecase, but I thought it may help to catch bugs for more important ones. \\r\\n\\r\\nI am not sure whether it\'s plain-text-ness of the page that is important, but that\'s how you can reproduce it.\\r\\n\\r\\nThe hypothesis is that dev tools do not expect HTML tree to disappear on navigation, or either extension enters a state where it cannot digest the plain text pages (and it probably shouldn\'t try).\\r\\n\\r\\n\\r\\n<sup>\\r\\nP.S. Thanks for the refreshed extension, it makes dev experience so wonderful! \u2764\ufe0f \\r\\n</sup>","number":17832,"user":{"login":"ivan-aksamentov"},"state":"open","created_at":"2020-01-14T09:43:10Z"},{"id":549309266,"title":"Bug: I shouldn\'t own the DOM fixtures website","body":"Some folks at Google are helping us to think through some ideas to help our input code be more sane, and we discovered that our DOM Text Fixtures site (http://react-dom-fixtures.surge.sh) was both:\\r\\n\\r\\n- _Very_ out of date\\r\\n- Owned by me\\r\\n\\r\\nBoth seem fixable. However I think a good first start is to figure out a way to publicly host the fixtures where I am not a bottleneck.\\r\\n\\r\\nWhat do you think? Could we setup a deploy process - maybe with netlify - to deploy the fixtures automatically?","number":17831,"user":{"login":"nhunzaker"},"state":"open","created_at":"2020-01-14T03:27:48Z"},{"id":549249756,"title":"Bug: React.forwardRef() wrapped component does not have it\'s static \\"displayName set by default","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\nI was am using `enzyme` for testing and `react-display-name` within the testing environment.  As seen by this code sandbox (https://codesandbox.io/s/vigorous-chatelet-qgwwd), the display name of a stateless functional component is the name of the function.  The display name of a `React.forwardRef()` component class is \\"Unknown\\" while the instance has the display name \\"ForwardRef(<function name>)\\" . I would love it if the resulting object that represents the forward ref definition has the same static name as the instance.\\r\\n\\r\\nReact version:\\r\\n16.12.0\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. \\r\\n2.\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example:\\r\\nhttps://codesandbox.io/s/vigorous-chatelet-qgwwd\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\nComponent display name = \\"Unknown\\"\\r\\nInstance display name = \\"ForwardRef(<function name>)\\"\\r\\n\\r\\n## The expected behavior\\r\\nComponent display name = \\"ForwardRef(<function name>)\\"\\r\\nInstance display name = \\"ForwardRef(<function name>)\\"\\r\\n","number":17830,"user":{"login":"heath-freenome"},"state":"closed","created_at":"2020-01-13T23:52:10Z"},{"id":549229545,"title":"Update babel-eslint and eslint packages","body":"## Summary\\r\\n\\r\\nWe need to update our eslint dependencies as they have fallen behind.\\r\\n\\r\\nThis patch updates the main `eslint` package and adds `eslint-config-prettier` to silence errors related to formatting, which `prettier` manages.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\n`yarn lint`.\\r\\n\\r\\n## Notes\\r\\n\\r\\nThis diff does not update eslint plugin packages, because adding the following results in `yarn lint` failing with the attached error message.\\r\\n\\r\\n```diff\\r\\ndiff --git a/package.json b/package.json\\r\\nindex d64d53a6a..a3159d8b4 100644\\r\\n--- a/package.json\\r\\n+++ b/package.json\\r\\n@@ -47,12 +47,13 @@\\r\\n     \\"danger\\": \\"^9.1.8\\",\\r\\n     \\"error-stack-parser\\": \\"^2.0.2\\",\\r\\n     \\"eslint\\": \\"^6.8.0\\",\\r\\n-    \\"eslint-config-fbjs\\": \\"^1.1.1\\",\\r\\n+    \\"eslint-config-fbjs\\": \\"^3.1.1\\",\\r\\n     \\"eslint-plugin-babel\\": \\"^5.3.0\\",\\r\\n     \\"eslint-plugin-flowtype\\": \\"^2.25.0\\",\\r\\n     \\"eslint-plugin-jest\\": \\"^22.15.0\\",\\r\\n+    \\"eslint-plugin-jsx-a11y\\": \\"^6.2.3\\",\\r\\n     \\"eslint-plugin-no-for-of-loops\\": \\"^1.0.0\\",\\r\\n-    \\"eslint-plugin-react\\": \\"^6.7.1\\",\\r\\n+    \\"eslint-plugin-react\\": \\"^7.17.0\\",\\r\\n     \\"eslint-plugin-react-internal\\": \\"link:./scripts/eslint-rules\\",\\r\\n     \\"fbjs-scripts\\": \\"^0.8.3\\",\\r\\n     \\"filesize\\": \\"^3.5.6\\",\\r\\n```\\r\\n\\r\\n```console\\r\\nexport * from \'./src/ReactIs\';\\r\\n^^^^^^\\r\\n\\r\\nSyntaxError: Unexpected token export\\r\\n    at Module._compile (internal/modules/cjs/loader.js:723:23)\\r\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\\r\\n    at Module.load (internal/modules/cjs/loader.js:653:32)\\r\\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\\r\\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\\r\\n    at Module.require (internal/modules/cjs/loader.js:692:17)\\r\\n    at require (internal/modules/cjs/helpers.js:25:18)\\r\\n    at Object.<anonymous> (/Users/necolas/OpenSource/github/facebook/react/node_modules/prop-types/index.js:9:17)\\r\\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\\r\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\\r\\nerror Command failed with exit code 1.\\r\\n```\\r\\n","number":17829,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-13T22:54:58Z"},{"id":548805015,"title":"Bug: Custom postMessage breaks in Safari","body":"If you implement your own custom post message in a component it seems like `react-dom.development.js` picks this up and throws errors.\\r\\n\\r\\n    SyntaxError: The string did not match the expected pattern.  react-dom.development.js:469\\r\\n\\r\\nReact version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Open Safari version 13.0.2 (OsX Mojave) or iPhone with mobile Safari iOs 12.4\\r\\n2. Using this code when you press the button you get an exception.\\r\\n\\r\\n        class TodoApp extends React.Component {\\r\\n          onClick = () => {\\r\\n            window.postMessage(`custom.sizeSelect:14`, window);\\r\\n          }\\r\\n          \\r\\n          render() {\\r\\n            return (\\r\\n              <div>\\r\\n                <button onClick={this.onClick}>\\r\\n                  Bug\\r\\n                </button>\\r\\n              </div>\\r\\n            )\\r\\n          }\\r\\n        }\\r\\n\\r\\n        ReactDOM.render(<TodoApp />, document.querySelector(\\"#app\\"))\\r\\n\\r\\nLink to code example: https://jsfiddle.net/j4zw7nt1/\\r\\n\\r\\n## The current behavior\\r\\nException.\\r\\n\\r\\n## The expected behavior\\r\\nReact should try to detect if the `postMessage` was actually an internal one or if it\'s an custom/external `postMessage` that it should ignore.\\r\\n\\r\\nWorst thing is that our consultants who made this app hasn\'t configured it to use react production mode so now we have this bug on production as well :<","number":17828,"user":{"login":"OZZlE"},"state":"closed","created_at":"2020-01-13T09:30:10Z"},{"id":548737939,"title":"help~When I use React.createElement directly and How to pack the component?","body":"hello all.\\r\\n\\r\\nI was met a problem when I published a react component, I need to help and discuss with you all \\r\\nI am going to write a component to load `React Component from CDN` and make it like a wrapper component.\\r\\n\\r\\n```jsx\\r\\nimport React, { Component } from \'react\';\\r\\nimport scriptjs from \'scriptjs\';\\r\\n\\r\\nconst DEV_SCRIPT =\\r\\n  \'https://dev/cdn/resource/phoenix-header.js\';\\r\\nconst PROD_SCRIPT =\\r\\n  \'https://cdn/resource/phoenix-header.js\';\\r\\n\\r\\nclass PhoenixHeaderWrapper extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.type = null;\\r\\n    this.scriptUrl =\\r\\n      props.scriptUrl || (props.env !== \'PROD\' ? DEV_SCRIPT : PROD_SCRIPT);\\r\\n    this.state = {\\r\\n      cmp: null,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    scriptjs(this.scriptUrl, () => {\\r\\n      this.type = window.PhoenixHeader;\\r\\n      this.createOrUpdateComponent();\\r\\n    });\\r\\n  }\\r\\n\\r\\n  createOrUpdateComponent() {\\r\\n    const { scriptUrl, ...otherProps } = this.props;\\r\\n    if (!this.type) {\\r\\n      console.error(\'load component failed\');\\r\\n      return;\\r\\n    }\\r\\n    const cmp = React.createElement(this.type, otherProps || {});  // this is point\\r\\n    this.setState({ cmp });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { cmp } = this.state;\\r\\n    return cmp;\\r\\n  }\\r\\n}\\r\\n\\r\\nPhoenixHeaderWrapper.defaultProps = {\\r\\n  scriptUrl: \'\',\\r\\n  env: \'PROD\',\\r\\n};\\r\\n\\r\\nexport default PhoenixHeaderWrapper;\\r\\n\\r\\n```\\r\\n\\r\\nand then, I do it just like do a normal react component that I was set the webpack config like below:\\r\\n\\r\\n```js\\r\\n// PhoenixHeader\\r\\n  output: {\\r\\n    publicPath: \'./\',\\r\\n    filename: \'phoenix-header.js\',\\r\\n    path: paths.appBuild,\\r\\n    library: \'PhoenixHeader\',\\r\\n    libraryTarget: \'commonjs2\',\\r\\n    libraryExport: \'default\',\\r\\n  },\\r\\n  mode: \'production\',\\r\\n  externals: {\\r\\n    react: {\\r\\n      commonjs: \'react\',\\r\\n      commonjs2: \'react\',\\r\\n      amd: \'react\',\\r\\n      root: \'React\',\\r\\n    },\\r\\n    [\'react-dom\']: {\\r\\n      commonjs: \'react-dom\',\\r\\n      commonjs2: \'react-dom\',\\r\\n      amd: \'react-dom\',\\r\\n      root: \'ReactDom\',\\r\\n    },\\r\\n  },\\r\\n```\\r\\n\\r\\nand then, I run the `npm run build && npm publish` to publish it.\\r\\n\\r\\nIn my own object which use the PhoenixHeader component as a npm package. \\r\\n\\r\\n```jsx\\r\\n// app.jsx\\r\\nimport React from \'react\';\\r\\nimport PhoenixHeader from \'phoenix-header\';\\r\\nimport \'./App.css\';\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <PhoenixHeader />\\r\\n      <header className=\\"App-header\\">\\r\\n        <p>\\r\\n          Edit <code>src/App.js</code> and save to reload.\\r\\n        </p>\\r\\n        <a\\r\\n          className=\\"App-link\\"\\r\\n          href=\\"https://reactjs.org\\"\\r\\n          target=\\"_blank\\"\\r\\n          rel=\\"noopener noreferrer\\"\\r\\n        >\\r\\n          Learn React\\r\\n        </a>\\r\\n      </header>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n\\r\\n```\\r\\nafter `npm start`, it show me a error:\\r\\n![image](https://user-images.githubusercontent.com/12051024/72236068-4d270180-3610-11ea-9e62-7a69a2972e15.png)\\r\\n\\r\\n**That it is my confusion is, why `createElement` not in this scope.**\\r\\n\\r\\nso I try to make react set into global:\\r\\n```js\\r\\nwindow.React = React;\\r\\n```\\r\\n\\r\\nYes, it\'s work for me.\\r\\n\\r\\n**But someone would like to tell me why need to make React set into global?**\\r\\n\\r\\n**And am I need to build this wrapper component which do not external the react when I was build?**\\r\\n\\r\\nlet\'s discuss or give me more suggest about this wrapper component please  \ud83d\ude4f","number":17827,"user":{"login":"Here21"},"state":"closed","created_at":"2020-01-13T06:51:35Z"},{"id":548674493,"title":"Bug: <select> element with static value but async options may have unexpected behavior.","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact version:  16.12.0\\r\\n\\r\\nI\'m not sure if this is a bug or an acceptable behavior.\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Render a &lt;select&gt; element.\\r\\n2. Pass a value or defaultValue to it.\\r\\n3. Render it\'s &lt;option&gt; elements  asynchronously.\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example: https://codesandbox.io/s/select-element-with-static-value-but-async-options-l3hns\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\n\\r\\n&lt;select&gt; element with static value but async options ignores it\'s value or defaultValue props until the &lt;select&gt; element get re-rendered.\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\n&lt;select&gt; element should not ignores it\'s value or defaultValue props silently.\\r\\n","number":17826,"user":{"login":"j-sen"},"state":"closed","created_at":"2020-01-13T02:48:02Z"},{"id":548632649,"title":"Grammar fix","body":"Just going through the source to get a better understanding of React and saw a grammar mistake.\\r\\n\\r\\nreplaced \'add\' with \'subtract\'","number":17825,"user":{"login":"haseebdaone"},"state":"open","created_at":"2020-01-12T21:50:24Z"},{"id":548587406,"title":"[Fresh] Fix edge case with early function call","body":"When a component calls custom Hooks, we \\"collect\\" a signature in two steps.\\r\\n\\r\\nhttps://github.com/facebook/react/blob/64aae7b06fa47e126b0ba9c0ba9896caa803528e/packages/react-refresh/src/ReactFreshRuntime.js#L582-L603\\r\\n\\r\\nFor example, given this component:\\r\\n\\r\\n```js\\r\\nfunction App() {\\r\\n  const x = useFancyState(\'x\')\\r\\n  const y = useFancyState(\'x\')\\r\\n}\\r\\n\\r\\nfunction useFancyState(value) {\\r\\n  return React.useState(value)\\r\\n}\\r\\n```\\r\\n\\r\\nwe want to:\\r\\n\\r\\n1. First, establish that `App` has two `useFancyState` calls.\\r\\n   - Our transform does this with a call like `_s(App, \'useFancyState(x) useFancyState(y)\', () => [useFancyState, useFancyState])`\\r\\n2. Then, when we\'re inside `App` for the first time, trigger the function to save their identities\\r\\n   - Our transform does this with a call like `_s()`\\r\\n\\r\\nWe intentionally trigger the function to save function identities lazily on first render. This is so that we don\'t change the module definition order when you have inline requires.\\r\\n\\r\\nWe reuse the same function to minimize the transform noise. So we count calls. First call saves `() => [useFancyState, useFancyState]`, second call actually triggers it to get references. Next calls don\'t do anything.\\r\\n\\r\\nThis usually works, but it breaks in the corner case like this:\\r\\n\\r\\n```js\\r\\nrender(<App />);\\r\\n\\r\\nfunction App() { ... }\\r\\nfunction useFancyState() { ... }\\r\\n```\\r\\n\\r\\nThis is because we end up *inside* `App` before the *first* call injected by our transform runs. So we get the \\"inside\\" call before we get the \\"outside\\" call.\\r\\n\\r\\nThis is edge casey but can happen in environments like CodeSandbox where you write all code in one file.\\r\\n\\r\\nThe fix is to not rely on the call index, and instead to look at what we\'re passing. With this fix, we ignore all empty `_s()` calls until after we actually get the first `_s(App, ...)` registration call. To make this clearer, I\'m changing a number tracking the call number to a status enum.\\r\\n\\r\\nA regression test is added. This should fix [this broken case](https://codesandbox.io/s/invalid-value-used-as-weak-map-key-broken-react-fresh-y2mx3) on CodeSandbox. (After CodeSandbox updates `react-refresh` to the version with this fix.)","number":17824,"user":{"login":"gaearon"},"state":"closed","created_at":"2020-01-12T15:44:17Z"},{"id":548521962,"title":"Error: \\"Could not find node with id \\"32\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17823,"user":{"login":"amitbaral"},"state":"closed","created_at":"2020-01-12T05:04:15Z"},{"id":548446600,"title":"DevTools: Refactor Overlay to remove \\"reactInternal\\" hack","body":"See #17798","number":17822,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-11T15:59:04Z"},{"id":548344892,"title":"Error: \\"Could not find node with id \\"350\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17821,"user":{"login":"tofikabdullayev"},"state":"closed","created_at":"2020-01-10T23:55:25Z"},{"id":548286386,"title":"Bug: setState triggers render but doesn\'t update state","body":"\x3c!--\\r\\n  Please provide a clear and concise description of what the bug is. Include\\r\\n  screenshots if needed. Please test using the latest version of the relevant\\r\\n  React packages to make sure your issue has not already been fixed.\\r\\n--\x3e\\r\\n\\r\\nReact version: 16.12.0\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Run example application\\r\\n2. Click \\"Doit\\" button\\r\\n3. Observe browser console and state rendered by component\\r\\n\\r\\n\x3c!--\\r\\n  Your bug will get fixed much faster if we can run your code and it doesn\'t\\r\\n  have dependencies other than React. Issues without reproduction steps or\\r\\n  code examples may be immediately closed as not actionable.\\r\\n--\x3e\\r\\n\\r\\nLink to code example: https://github.com/oliversturm/react-render-without-state-change\\r\\n\\r\\n\x3c!--\\r\\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\\r\\n  repository on GitHub, or provide a minimal code example that reproduces the\\r\\n  problem. You may provide a screenshot of the application if you think it is\\r\\n  relevant to your bug report. Here are some tips for providing a minimal\\r\\n  example: https://stackoverflow.com/help/mcve.\\r\\n--\x3e\\r\\n\\r\\n## The current behavior\\r\\n\\r\\nThe button click event handler triggers a lengthy operation that periodically calls `setState` to update the state label in the UI. To prevent state update batching, the process is started using `setTimeout`. A line of console output is written in the render function, and this output shows 1000 times on the console. At the same time, the state does not change and the component rendering does not reflect any updated state until such time the busy-loop process ends.\\r\\n\\r\\n## The expected behavior\\r\\n\\r\\nI\'m investigating options to trigger UI updates from long-running processes like that modelled in this example. I would prefer option 1 for expected behavior: when `setState` is called, it should update the state and then trigger a render.\\r\\n\\r\\nSince I don\'t know whether my approach is the \\"correct\\" or intended one for my purpose, I would also accept option 2: no state change, no render. In this case I\'m back to researching other alternatives.\\r\\n\\r\\nIn any case it seems wrong to me that renders are triggered by the `setState` calls, even though no state change takes place. This is why I\'m reporting the issue as a bug.","number":17820,"user":{"login":"oliversturm"},"state":"closed","created_at":"2020-01-10T20:56:03Z"},{"id":548028528,"title":"Error: \\"f.hasOwnProperty is not a function\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Opened components tree\\r\\n2. Clicked Context.Provider\\r\\n3. Clicked \\"SomeProvider\\" component right above that Context.Provider\\r\\n\\r\\nThis issue does not happen if I click \\"SomeProvider\\" first. only after clicking Context.Provider within this \\"SomeProvider\\" wrapper component.\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:268899)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46436\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3676)\\r\\n    at $o (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46146)\\r\\n    at na (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46382)\\r\\n\\r\\nComponent stack: in ha\\r\\n    in div\\r\\n    in ya\\r\\n    in Ea\\r\\n    in div\\r\\n    in div\\r\\n    in ya\\r\\n    in Ea\\r\\n    in div\\r\\n    in Unknown\\r\\n    in div\\r\\n    in bi\\r\\n    in div\\r\\n    in Ai\\r\\n    in Suspense\\r\\n    in ei\\r\\n    in div\\r\\n    in div\\r\\n    in la\\r\\n    in Ur\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17819,"user":{"login":"MichaelOstrovsky"},"state":"closed","created_at":"2020-01-10T11:31:27Z"},{"id":547820773,"title":"Updates @babel/plugin-transform-modules-umd to 7.7.0+","body":"## Summary\\r\\nThis fixes a bug in babel that was producing UMD modules that were incompatible with ES6 module loader in browsers.\\r\\n\\r\\n## Test Plan\\r\\nRan `yarn test` and `yarn test-prod`.  There were 3 failures in `yarn test-prod` that make no sense to me (external developer) and I\'m hoping someone can give feedback on how to address them in this PR description.\\r\\n\\r\\nFixes #17352 ","number":17818,"user":{"login":"MicahZoltu"},"state":"closed","created_at":"2020-01-10T01:55:23Z"},{"id":547796868,"title":"Fix issue template for questions","body":"Fixes the syntax for adding multiple labels.\\r\\n\\r\\nSee formatting is now correct: https://github.com/necolas/react/blob/github-question-template/.github/ISSUE_TEMPLATE/question.md","number":17817,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-10T00:24:16Z"},{"id":547661440,"title":"Add GitHub issue templates","body":"Adds issue and PR templates based on those we developed for React Native. Issues that are questions or related to documentation will automatically be labelled as \\"Resolution: Invalid\\" to help with triaging.","number":17815,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-09T19:00:53Z"},{"id":547628926,"title":"emoji in useState string makes useState stop working","body":"I am running on latest React. When I try to use unicode emojis in a useState string, the useState function stops updating the string.\\r\\n\\r\\nExample:\\r\\n```javascript\\r\\nconst [text, setText] = useState(\'\ud83d\ude00\');\\r\\n\\r\\nconsole.log(text);\\r\\n```\\r\\n\\r\\nEmoji will be visibile in console log. However, when I run:\\r\\n\\r\\n```javascript\\r\\nsetText(\'different text\');\\r\\n```\\r\\n\\r\\n`text` now is an empty string.\\r\\n\\r\\nWhat is happening? Why? How can I solve it?","number":17814,"user":{"login":"TheRav3n"},"state":"closed","created_at":"2020-01-09T17:50:18Z"},{"id":547610791,"title":"[DevTools] Component inspector not loading for large components","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug report.\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe component inspector works fine on most components, but on ones that are particularly large with many large props it is stuck on \\"Loading...\\".\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nYou should be able to reproduce the issue on: https://data.world/jonloyens/an-intro-to-dataworld-dataset\\r\\n\\r\\nNavigate to the component with the key: \\"jonloyens/an-intro-to-dataworld-dataset\\". Other components above and below that one will load, but that one specifically will not.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should load the component tree eventually. Previous to the 4.3.0 update these components loaded fine.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nOur app uses React version 16.8.3.\\r\\nI am on dev tools version 4.3.0 on Chrome 79.0.3945.88 on MacOS Catalina 10.15.2 (but others on earlier versions of MacOS are having the same issue).\\r\\n\\r\\nI have a suspicion that this may be related to https://github.com/facebook/react/pull/17579 as this change has made a big impact on our app (mostly in a good way). We use ImmutableJS, and that change has made it much easier to navigate Immutable props since it preloads the values. The component that is loading slowly uses a proportionately large number of Immutable props to other components.\\r\\n","number":17813,"user":{"login":"katz12"},"state":"closed","created_at":"2020-01-09T17:12:37Z"},{"id":547566125,"title":"Get Dom Element by Component Name","body":"**Do you want to request a *feature* or report a *bug*?** Feature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nReact dev tools has the very useful \\"inspect dom node\\" feature that ties a component in your tree to its particular dom node.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIn e2e testing scenarios using tools such as cypress I often find myself sprinkling data test id attributes throughout my code to select certain elements with which to do various assertions. I\'ve found that these test id attributes closely mirror the component hierarchy. Instead of needing to declare this essentially duplicate information it would be useful if there was a utility which allowed me to programmatically retrieve a dom node that corresponds to a particular component\'s name for testing purposes. Ideally, this would essentially mirror the functionality of the \\"inspect dom node\\" feature in react dev tools.\\r\\n","number":17812,"user":{"login":"bradenhs"},"state":"open","created_at":"2020-01-09T15:56:37Z"},{"id":547481101,"title":"Bump Prettier","body":"This reformatting is unfortunately rather invasive due to changes in function indentation heuristics. I find it a lot better though.\\r\\n\\r\\nI do this now to unblock https://github.com/facebook/react/pull/17805 which is stuck due to `<{...}>` syntax being unrecognized by Prettier.","number":17811,"user":{"login":"gaearon"},"state":"closed","created_at":"2020-01-09T13:34:42Z"},{"id":547480562,"title":"UseEffect","body":" 54 | console.log(props.match);\\r\\n  55 | const classes = useStyles();\\r\\n  56 | React.useEffect(() => {\\r\\n> 57 |   fetchChannelById(props.match.param.id);\\r\\n     | ^  58 | }, [fetchChannelById]);\\r\\n  59 | return (\\r\\n  60 |   <div className={classes.card}>\\r\\n\\r\\nprops.match.param is not working. My code is fine. if hard code id my app is working. fine. Please fix it\\r\\n\\r\\n\\r\\n\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17810,"user":{"login":"LIJIOJOHN123"},"state":"closed","created_at":"2020-01-09T13:33:43Z"},{"id":547473102,"title":"In React and react-dom 16 Upgrade, getting error: Uncaught TypeError: Cannot read property \'input\' of undefined","body":"I am trying to upgrade my Reactjs and react-dom versions from v15.6.2 to ^v16.0.0 and am getting the above error.\\r\\n\\r\\nClicking through the error in the console, I see that the _React$DOM is undefined. I have followed all the migration instructions on the React.org site and looked extensively, but cannot seem to get rid of this error on versions of react and react-dom of v16 and above.\\r\\n\\r\\nAny ideas on what that issue is and how I can resolve it?\\r\\n\\r\\nBelow are my package.json and webpack.config. They are pre-upgrade to v16, but I have tried adding core-js per Reactjs.org.\\r\\n\\r\\n```\\r\\nvar _React$DOM = _react2.default.DOM,\\r\\n    input = _React$DOM.input, <<< Here is the highlighted error\\r\\n    select = _React$DOM.select,\\r\\n    textarea = _React$DOM.textarea;\\r\\nMy dependencies in package.json:\\r\\n```\\r\\n\\r\\n\\r\\n ```\\r\\n \\"devDependencies\\": {\\r\\n    \\"babel-loader\\": \\"^7.1.5\\",\\r\\n    \\"babel-preset-es2015\\": \\"^6.1.18\\",\\r\\n    \\"babel-preset-react\\": \\"^6.1.18\\",\\r\\n    \\"babel-preset-stage-0\\": \\"^6.24.1\\",\\r\\n    \\"chai\\": \\"^4.1.2\\",\\r\\n    \\"chai-jquery\\": \\"^2.0.0\\",\\r\\n    \\"css-loader\\": \\"^1.0.0\\",\\r\\n    \\"eslint-config-rallycoding\\": \\"^3.2.0\\",\\r\\n    \\"mocha\\": \\"^5.2.0\\",\\r\\n    \\"react-addons-test-utils\\": \\"^15.0.1\\",\\r\\n    \\"style-loader\\": \\"^0.21.0\\",\\r\\n    \\"webpack-cli\\": \\"^3.1.0\\",\\r\\n    \\"webpack-dev-server\\": \\"^3.1.8\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"actioncable\\": \\"^5.2.4\\",\\r\\n    \\"axios\\": \\"^0.18.0\\",\\r\\n    \\"babel-core\\": \\"^6.2.1\\",\\r\\n    \\"babel-polyfill\\": \\"^6.26.0\\",\\r\\n    \\"babel-preset-stage-1\\": \\"^6.1.18\\",\\r\\n    \\"cloudinary-core\\": \\"^2.5.0\\",\\r\\n    \\"cloudinary-react\\": \\"^1.0.6\\",\\r\\n    \\"dotenv-webpack\\": \\"^1.5.5\\",\\r\\n    \\"file-loader\\": \\"^2.0.0\\",\\r\\n    \\"jquery\\": \\"^3.3.1\\",\\r\\n    \\"jsdom\\": \\"^12.0.0\\",\\r\\n    \\"lodash\\": \\"^4.1.0\\",\\r\\n    \\"prop-types\\": \\"^15.6.1\\",\\r\\n    \\"react\\": \\"^15.6.2\\",\\r\\n    \\"react-bootstrap\\": \\"^0.32.1\\",\\r\\n    \\"react-day-picker\\": \\"^7.1.6\\",\\r\\n    \\"react-dom\\": \\"^15.6.2\\",\\r\\n    \\"react-dropzone\\": \\"^5.0.1\\",\\r\\n    \\"react-helmet\\": \\"^5.2.0\\",\\r\\n    \\"react-redux\\": \\"^5.0.7\\",\\r\\n    \\"react-router-dom\\": \\"^4.3.1\\",\\r\\n    \\"react-stripe-elements\\": \\"^2.0.1\\",\\r\\n    \\"redux\\": \\"^4.0.0\\",\\r\\n    \\"redux-form\\": \\"^7.4.2\\",\\r\\n    \\"redux-thunk\\": \\"^2.2.0\\",\\r\\n    \\"sha1\\": \\"^1.1.1\\",\\r\\n    \\"webpack\\": \\"^4.17.2\\"\\r\\n  }\\r\\n```\\r\\nMy webpack.config:\\r\\n\\r\\n```\\r\\nconst webpack = require(\'webpack\');\\r\\nconst Dotenv = require(\'dotenv-webpack\');\\r\\nconst raf = require(\'raf\')\\r\\n\\r\\nconst path = require(\'path\');\\r\\n\\r\\n\\r\\nmodule.exports = {\\r\\n  mode: \'none\',\\r\\n  watch: false,\\r\\n  entry: [\\r\\n    \'babel-polyfill\', \'./src/index.js\'\\r\\n  ],\\r\\n  output: {\\r\\n    path: __dirname,\\r\\n    publicPath: \'/\',\\r\\n    filename: \'bundle.js\'\\r\\n  },\\r\\n  module: {\\r\\n    rules: [\\r\\n      {\\r\\n        test: /\\\\.(jpg|png|svg)$/,\\r\\n        use: [\\r\\n          {\\r\\n            loader: \'file-loader\',\\r\\n            options: {\\r\\n              name: \'[path][name].[hash].[ext]\'\\r\\n            }\\r\\n          }\\r\\n        ]\\r\\n      },\\r\\n      {\\r\\n        test: /\\\\.js?$/,\\r\\n        exclude: /node_modules/,\\r\\n        use:\\r\\n          { loader: \'babel-loader\',\\r\\n        options: {\\r\\n         presets: [\'react\', \'es2015\', \'stage-0\']\\r\\n       }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    ] // end of loaders\\r\\n\\r\\n  devServer: {\\r\\n    historyApiFallback: true,\\r\\n    contentBase: \'./\'\\r\\n  },\\r\\n  plugins: [\\r\\n    new webpack.DefinePlugin({\\r\\n      \'process.env.NODE_ENV\': JSON.stringify(process.env.NODE_ENV)\\r\\n    }),\\r\\n    new Dotenv()\\r\\n  ]\\r\\n};\\r\\n```","number":17809,"user":{"login":"chikarao"},"state":"closed","created_at":"2020-01-09T13:19:55Z"},{"id":547431135,"title":"react-hooks/rules-of-hooks is taking useRouterHistory as hook","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\neslint gives error when useRouterHistory function of React router 3 is used along with eslint-plugin-react-hooks saying that \\r\\n\\r\\nerror  React Hook \\"useRouterHistory\\" is called in function \\"getSsrWebRoute\\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should whitelist library functions\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest","number":17808,"user":{"login":"zeel-swiggy"},"state":"closed","created_at":"2020-01-09T11:50:43Z"},{"id":547358074,"title":"how to expose ConcurrentModeAPIs for   \\"react\\": \\"16.12.0\\"? ","body":"I\'d like to use  ConcurrentMode at version 16.12.0,  I have lots of dependencies that explicitly depend on react verision  above 16, that is I can\'t install react@experimetal, anyway to enable it for react 16?","number":17807,"user":{"login":"videni"},"state":"closed","created_at":"2020-01-09T09:35:02Z"},{"id":547173552,"title":"Add configuration for the \\"Stale\\" GitHub App","body":"Configuration for the bot that marks and closes stale issues and pull requests.\\r\\nhttps://probot.github.io/apps/stale/","number":17806,"user":{"login":"necolas"},"state":"closed","created_at":"2020-01-09T00:08:02Z"},{"id":547086642,"title":"Update Flow to 0.84","body":"Updating to v0.84 first is a first step that avoids breaking changes in subsequent versions of Flow. v0.84 includes the new inexact object syntax, which is necessary to align with fbsource and unblock RN sync fix. Afterwards we can continue updating Flow in increments.","number":17805,"user":{"login":"gaearon"},"state":"closed","created_at":"2020-01-08T20:31:45Z"},{"id":547078226,"title":"Can\'t use SVG from package when using `import {ReactComponent as Foo} from \\"./foo.svg\\"`","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nEdit: To clarify, importing SVGs directly works fine, as described here: https://create-react-app.dev/docs/adding-images-fonts-and-files/#adding-svgs. It only fails when used indirectly through an NPM package.\\r\\n\\r\\nWhen using a Component that contains an SVG referenced in a package using the pattern `import {ReactComponent as Foo} from \\"./foo.svg\\"\', React raises this error:\\r\\n\\r\\n> Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it\'s defined in, or you might have mixed up default and named imports.\\r\\n> \\r\\n> Check the render method of `Foo`.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nReproduced here: https://github.com/neolefty/indirect-svg\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAn SVG imported using `import {ReactComponent as Foo} from \\"./foo.svg\\"` in an NPM package should render in a project that depends on it.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nFound in 16.12.0 / Linux / Chrome. Not tested in previous versions of React.","number":17804,"user":{"login":"neolefty"},"state":"closed","created_at":"2020-01-08T20:13:21Z"},{"id":546731896,"title":"Error: \\"Could not find node with id \\"27720\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67999)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108660)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17802,"user":{"login":"vkouk"},"state":"closed","created_at":"2020-01-08T09:09:11Z"},{"id":546658888,"title":"How to close the current browser window/tab in React?","body":"I want to close the current tab or window when the user clicks \\"Close\\" button.\\r\\n\\r\\n```js\\r\\nonClose() {\\r\\n    window.opener = null;\\r\\n    window.open(\'\', \'_self\');\\r\\n    window.close();\\r\\n  }\\r\\n```\\r\\n\\r\\nI tried the above code, but it\'s not working. My env is:\\r\\n\\r\\n```\\r\\nWindows 10 x64\\r\\nChrome 79.0.3945.88\\r\\nReact 16.12.0\\r\\n```\\r\\n\\r\\nIs it supported?\\r\\n\\r\\n\\r\\n","number":17801,"user":{"login":"hsluoyz"},"state":"closed","created_at":"2020-01-08T05:50:37Z"},{"id":546637358,"title":"Can\'t change title of react app for social sharing","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug (or a misunderstanding on my part)\\r\\n\\r\\n**What is the current behavior?**\\r\\nEven after I set the title of my react app, when sending the website url in a text the title still shows up as \\"React App\\" (I\'m expecting it to be \\"Stamper\\")\\r\\n![image](https://user-images.githubusercontent.com/18056644/71949978-9ce67280-31a3-11ea-8a09-21ebc95508a6.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI\'m currently setting my title by editing `document.title` in `App.js` as below. Perhaps I should be doing this a different way? I also altered the `name` field in `package.json`.\\r\\n~~~\\r\\nimport \'./App.scss\';\\r\\nimport React, {Component} from \\"react\\";\\r\\nimport View from \\"./View.js\\"\\r\\n\\r\\nfunction App() {\\r\\n  document.title = \\"Stamper\\"\\r\\n  return (\\r\\n    <div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n~~~\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThis texting error occurs when on iOS (I haven\'t tested android), I don\'t know how it would behave on previous versions of react.\\r\\n","number":17800,"user":{"login":"maayanalbert"},"state":"closed","created_at":"2020-01-08T04:24:49Z"},{"id":546568066,"title":"Revert \\"Revert \\"Dispatch commands to both UIManagers from both renderers (#17211)\\" (#17232)\\"","body":"This reverts commit d0fc0ba0a688950b8ab24a89f14888a19efa2444.\\r\\n\\r\\nThis is a reland of #17211.\\r\\n\\r\\nThis is our second attempt at making calls to dispatchCommand in Fabric go through the FabricUIManager. This had to be reverted before because the native code didn\'t have these commands implemented yet for Fabric. They do now so this is safe to land. ","number":17799,"user":{"login":"TheSavior"},"state":"closed","created_at":"2020-01-07T23:48:31Z"},{"id":546454274,"title":"Rename internal fields","body":"One day we\'ll use private fields for this but until then I\'m just going to rename these every version until people get the hint.\\r\\n\\r\\nThis is actually better than if we change fields while keeping the same name. Because at least this will fail early (and often bailout) where as once found, people tend to assume that the data structure is there and as such throws random  errors to users.","number":17798,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2020-01-07T19:05:08Z"},{"id":546436475,"title":"Renamed \\"ReactDOM-fb\\" imports to \\"ReactDOM\\" in www shims","body":"`ReactDOM-fb` was recently removed in www, which would cause all of these shims to break on the next sync.","number":17797,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-07T18:23:52Z"},{"id":546362207,"title":"Error: \\"Could not find node with id \\"834\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17796,"user":{"login":"marcinant"},"state":"closed","created_at":"2020-01-07T15:55:45Z"},{"id":546239135,"title":"Error: \\"Could not find node with id \\"815\\" in commit tree\\"","body":"\\r\\n![Screenshot 2020-01-07 at 5 14 39 PM](https://user-images.githubusercontent.com/6754181/71893299-3b0d1500-3171-11ea-8414-b7222c9a5b5e.png)\\r\\nDescribe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17795,"user":{"login":"elvisjfern"},"state":"closed","created_at":"2020-01-07T11:45:11Z"},{"id":546192748,"title":"flushPassiveEffects and IsThisRendererActing are on the wrong \\"secret\\" object","body":"They\'re currently attached to the \\"Events\\" namespace but they don\'t have anything to do with events. It needs to move to its own names on the secret object.\\r\\n\\r\\nOnce we delete Events, after ReactTestUtils and RNW are fixed, then we won\'t be able to clean up the array because these two are on it.\\r\\n\\r\\nAdditionally the IsSomeRendererActing field is in the production bundles.\\r\\n\\r\\nWe need to make all of these DEV-only.","number":17794,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2020-01-07T10:06:09Z"},{"id":546058342,"title":"Support preallocated DOM nodes","body":"I am writing an board game in PixiJS and React. The core part is in PIXI with it managing the WebGL rendering context and the canvas. I want to add UI on top and below the canvas.\\r\\n\\r\\nRight now, I would have to use two root nodes in React to implement this - one above and one below. If I initialize the canvas in a component, there is a risk of React unmounting it and there is no way to handle orientation changes (on Cordova) while preserving the canvas object but scrapping rest of the UI (all of the React tree for a different layout).\\r\\n\\r\\nWhat I wanted is a way to specify in a React Compnent to render the DOM node \u201cas is\u201d.","number":17793,"user":{"login":"SukantPal"},"state":"closed","created_at":"2020-01-07T03:30:08Z"},{"id":546012324,"title":"Recommendation - research a Component-Oriented Programming approaches in game development for improving code reuse","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\nI want to recommend to research one of variants Component-Oriented Programming (COP) approaches in game programming with which I worked in the past.\\r\\n \\r\\nMost programmers know only one way to reuse code in OOP - inheritance. Because of this, a lot of articles are distributed on the Internet with incorrect comparison of classes with functions.\\r\\nAlso you often changed approaches of code reuse - mixins, HOC, render props, hooks.\\r\\nBut already has long been a quality solutions for reusing code (for example: \u201ccomponent\u201d game programming pattern, Entity Component System).\\r\\nhttps://gameprogrammingpatterns.com/component.html (find text \u201cclass ContainerObject\u201d in page for example)\\r\\nhttps://www.raywenderlich.com/2806-introduction-to-component-based-architecture-in-games#toc-anchor-006\\r\\n \\r\\nGood example using COP has in Unity3d engine. Including for creating UI.\\r\\nhttps://docs.unity3d.com/Manual/Components.html\\r\\n \\r\\nHere is an examples of using a some variant COP approach in React. The variant like approach in Unity3d.\\r\\nThe examples for demonstration. The solution is not completed and not optimized.\\r\\n- https://codesandbox.io/s/example-of-cop-approach-from-game-programming-in-react-6yt8c \\r\\nExample of adding additional logic to component  in runtime and of logic reuse outside class component\\r\\n- https://codesandbox.io/s/second-example-of-cop-approach-from-game-programming-in-react-zo2yy \\r\\nthere a several examples using this aproah. React components structure was changed for more flexibility.\\r\\n \\r\\nComparison of some features:\\r\\n![image](https://user-images.githubusercontent.com/15384809/71858836-e046cf80-3116-11ea-9282-8ecba214784b.png)\\r\\n\\r\\n\\r\\nIf you don\u2019t want to add a similar implementation to the React sources, you can to write a similar example in the documentation. In order not to mislead people, as if only hooks allow to write reusable code effectively in react.\\r\\n\\r\\nAlso I suppose that this approach can be adapted for functional components.\\r\\nThus, this will get rid of some of the shortcomings of the hooks.\\r\\n\\r\\nWe can discuss about the approach in the Issue.\\r\\n","number":17792,"user":{"login":"sergeysibara"},"state":"closed","created_at":"2020-01-07T00:35:09Z"},{"id":545956725,"title":"Allow load information from my component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nIts a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n**Im trying to watch all the properties in the tab components but it get stuck when I click in a component from my project, I\xb4ve tried this in all my repositories and i get the same problem.**\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/40034969/71851264-c6b47200-309b-11ea-98a7-b31c245bf4be.png)\\r\\n\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nits supposed to show al the info from my component\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: \\"16.7.0\\",\\r\\nBrowser: Chrome,\\r\\nOS: Apple\'s macOS,\\r\\nAnd this was working the last weekend with no problem\\r\\n","number":17791,"user":{"login":"EduardoSaavedra"},"state":"closed","created_at":"2020-01-06T21:47:07Z"},{"id":545840377,"title":"Renamed \\"backend.js\\" to \\"react_devtools_backend.js\\"","body":"To reduce confusion when profiling:\\r\\n![Screen Shot 2020-01-06 at 9 16 05 AM](https://user-images.githubusercontent.com/29597/71834979-5985ea00-3065-11ea-94fe-7912213fbd1f.png)\\r\\n","number":17790,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-06T17:17:37Z"},{"id":545835376,"title":"DevTools: Improve function props display for inspected elements","body":"Resolves #17781\\r\\n\\r\\n## Before\\r\\n![Screen Shot 2020-01-06 at 9 13 29 AM](https://user-images.githubusercontent.com/29597/71834763-d2d10d00-3064-11ea-91bd-973e15371a14.png)\\r\\n\\r\\n## After\\r\\n![Screen Shot 2020-01-06 at 9 02 43 AM](https://user-images.githubusercontent.com/29597/71834216-86390200-3063-11ea-8610-1367a76d30e9.png)\\r\\n","number":17789,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-06T17:07:07Z"},{"id":545729588,"title":"Error: \\"Could not find node with id \\"1804\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Opened profiler\\r\\n2. Recorded session\\r\\n3. Clicked \\"Ranked\\" button\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17788,"user":{"login":"gricard"},"state":"closed","created_at":"2020-01-06T13:33:48Z"},{"id":545706353,"title":"when i lazy load a function component, the chunk had Loaded twice","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nwhen i lazy load a function component, the chunk had Loaded twice\\r\\n\\r\\n**What is the current behavior?**\\r\\nwhen i lazy load a function component, the chunk had Loaded twice\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nif the component had Loaded, it Should not load again\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nV 16.12\\r\\n","number":17787,"user":{"login":"webKity"},"state":"closed","created_at":"2020-01-06T12:38:59Z"},{"id":545681799,"title":"Concurrent mode renders components twice with different identities","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf concurrent mode is enabled, React renders functional components twice and (what\'s worse) with different identities under certain circumstances. The source code below always produces the bug.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\n```typescript\\r\\nlet instanceId = 0;\\r\\n\\r\\nconst MyFunctionalComponent = (props: any) => {\\r\\n    console.log(\'Instance \' + useRef(instanceId++).current);\\r\\n    return <h1>Hello world.</h1>;\\r\\n};\\r\\n\\r\\nconst rootElement = document.getElementById(\'root\');\\r\\n\\r\\n(ReactDOM as any).createRoot(rootElement).render(<MyFunctionalComponent />);\\r\\n\\r\\n// Doesn\'t produce the bug:\\r\\n// ReactDOM.render(<MyFunctionalComponent />, rootElement);\\r\\n```\\r\\n\\r\\nOutput:\\r\\n```\\r\\nInstance 0\\r\\nInstance 1\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nOne or more lines \\"Instance 0\\" in the console log. (Better: One single line \\"Instance 0\\".)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n0.0.0-experimental-f42431abe\\r\\n\\r\\n**Additional notes**\\r\\n\\r\\nThe bug also happens deep in the component tree and can cause costly operations to be performed twice. (In my case, those operations are done asynchronously in a class instance memorized via `useRef`.)","number":17786,"user":{"login":"sschultze"},"state":"closed","created_at":"2020-01-06T11:33:12Z"},{"id":545635918,"title":"Error: \\"Context menu with id \\"SelectedElement\\" already registered.\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Just tryed to use `Components` tab\\r\\n\\r\\nEdit :  error seems to appear using Firefox, not Chrome\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.4.0-f749045a5\\r\\n\\r\\nComponent stack: in Vo\\r\\n    in bi\\r\\n    in div\\r\\n    in Ai\\r\\n    in Suspense\\r\\n    in ei\\r\\n    in div\\r\\n    in div\\r\\n    in la\\r\\n    in Ur\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17785,"user":{"login":"MrOrgani"},"state":"closed","created_at":"2020-01-06T09:48:35Z"},{"id":545623096,"title":"Hydrate app won\'t override className for same element but different props and content","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nPlease see https://jsfiddle.net/cerhqy9f/1/\\r\\nThe server returned a div with class `yellow`, and the client want to change it to a div with class `red`. \\r\\nThen the hydrated app contains new content but the old class `yellow`\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\noverride the class \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.12.0\\r\\n","number":17784,"user":{"login":"zhipu123"},"state":"closed","created_at":"2020-01-06T09:18:46Z"},{"id":545469060,"title":"useCallback doesn\'t update the scope of function","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\nhttps://codesandbox.io/s/wizardly-surf-qd9s1\\r\\nI\'m trying to add an eventListener to an element based on a condition, But something weird is happening. I used useCallback(fn, [deps]), but on changing dependencies, it doesn\'t update the scope of function.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAccessing to most updated values in state from callback.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest.","number":17783,"user":{"login":"alirezavalizade"},"state":"closed","created_at":"2020-01-05T21:26:55Z"},{"id":545459168,"title":"Parsing error: Unexpected token","body":"When I Try To Run My React App It Says [This](https://gist.github.com/Hoidberg/435a70f80a33668716eadec1907df174) Which Is Preventing Me From Running The App. Is There Any Way I Can Fix It?\\r\\n","number":17782,"user":{"login":"Hoidberg"},"state":"closed","created_at":"2020-01-05T19:52:18Z"},{"id":545422114,"title":"Dev Tools UI: Bad readability of props of type function","body":"Dev Tools evolved a lot the last months.\\r\\n\\r\\nLast version doesn\'t display well functions in props, it leaves an empty field so hard to see if the prop is really passed and if there\'s really and function passes in the props of the component.\\r\\n\\r\\nFor example  i dont\' know if the prop `onChange` really exists as a prop of the component `TokenInput`.\\r\\nDon\'t know also which props are undefined.\\r\\n\\r\\nCould be also great to use the propTypes to show the types of the props.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/25119847/71781247-b5e8fb00-2fcc-11ea-9a08-86f7b772a138.png)\\r\\n\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/25119847/71781235-8c2fd400-2fcc-11ea-8c3f-fb0afe3ab8fc.png)\\r\\n","number":17781,"user":{"login":"Aarbel"},"state":"closed","created_at":"2020-01-05T14:06:53Z"},{"id":545326788,"title":"square wont move on _dragTask()","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nreport a bug\\r\\n**What is the current behavior?**\\r\\nthe square should move, but it doesnt. i should be able to get it coordinates.\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n```\\r\\nimport React from \'react\';\\r\\nimport \'./App.css\';\\r\\n\\r\\nclass App extends React.Component {\\r\\n\\r\\n  componentDidMount() {\\r\\n  }\\r\\n\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      MainContainer: {backgroundColor: \\"#282c34\\", display: \\"flex\\", minHeight: \\"100vh\\"},\\r\\n      ObjectMap: [],\\r\\n    }\\r\\n    this._createObject = this._createObject.bind(this);\\r\\n    this._createBox = this._createBox.bind(this);\\r\\n    this._buttonCreateBox1 = this._buttonCreateBox1.bind(this);\\r\\n    this._dragTask = this._dragTask.bind(this);\\r\\n  }\\r\\n\\r\\n  _createObject = (object) => {\\r\\n    var ObjectMap = this.state.ObjectMap;\\r\\n    ObjectMap.push(object);\\r\\n    this.setState({ObjectMap: ObjectMap});\\r\\n  }\\r\\n\\r\\n  _createBox = (style) => {\\r\\n    var object = {position: \\"absolute\\", top: this.state.positionX, left: this.state.positionY};\\r\\n    var styleObject = Object.assign({},\\r\\n      object, style\\r\\n    )\\r\\n    return (\\r\\n      <div style={styleObject} draggable=\\"true\\" onDragEnd={(event) => {this._dragTask(event)}}>\\r\\n\\r\\n      </div>\\r\\n      );\\r\\n    \\r\\n  }\\r\\n\\r\\n  _dragTask(event) {\\r\\n    event.persist();\\r\\n    this.setState({positionX: event.screenX, positionY: event.screenY}, () => { console.log(\\"Page X:\\"+ this.state.positionX + \\" Page Y:\\" + this.state.positionY); });\\r\\n  }\\r\\n\\r\\n  _buttonCreateBox1 = () => {\\r\\n    this._createObject(this._createBox({backgroundColor: \\"white\\", width: \\"300px\\", height: \\"300px\\"}));\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div style={this.state.MainContainer}>\\r\\n        <button type=\\"button\\" onClick={ this._buttonCreateBox1 }>Click Me!</button>\\r\\n        {\\r\\n          this.state.ObjectMap.map((item, index) => {\\r\\n            return item\\r\\n          })\\r\\n        }\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\nexport default App;\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAs said above, the square should move.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nAll platforms, and every browser as far as i know.\\r\\n","number":17780,"user":{"login":"joaoalbertocsjunior"},"state":"closed","created_at":"2020-01-04T20:09:08Z"},{"id":545317342,"title":"SuspenseList tail property not working on re-renders","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nI am reporting a possible bug or otherwise requesting clarification.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen a component with a SuspenseList re-renders (such as when it is is passed a new resource), the SuspenseList component still  respects the revealOrder=\\"forwards\\" or revealOrder=\\"backwards\\" prop but does not respect the tail=\\"collapsed\\" or tail=\\"hidden\\" prop.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/exciting-cherry-g9uc9\\r\\n\\r\\nIn order to see bug: \\r\\n1) Refresh the Code Sandbox browser and see that \\"Loading profile...\\" displays and \\"Loading posts...\\" does not due to the tail being collapsed.  This is the expected behavior.\\r\\n2) Press the \\"Next\\" button.  Both \\"Loading Profile...\\" and \\"Loading posts...\\" display.  The tail is no longer collapsed.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe expected behavior would be for the tail to be collapsed when pressing the \\"Next\\" button. \\"Loading profile...\\" should be displayed, but not \\"Loading posts...\\"\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis affects only the experimental Concurrent Mode build of React.\\r\\n","number":17779,"user":{"login":"kmurgic"},"state":"open","created_at":"2020-01-04T18:44:35Z"},{"id":545295598,"title":"Component Hydration Not Correctly Diffing SVG Path Element","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nA component containing an SVG is incorrectly rendered on the client when the `<path>` element is expected to change from server to client.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/next-not-updaing-svg-path-xl1u4\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect that when the component is rendered on the client, it would recognize that typeof window !== \'undefined\' and render a blue square rather than a red circle.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThe above example with React 16.12 and in Brave Browser (Chromium). I also tested with 16.7 and had the same behavior.","number":17778,"user":{"login":"davidgolden"},"state":"closed","created_at":"2020-01-04T15:12:52Z"},{"id":545287370,"title":"Feature Request: Selectively Retrieve Values from Context and update components accordingly","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCurrently, any changes in the context will update all components.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nCurrently, when subscribing to context, if any value in the context changes, all consumers will be updated:\\r\\n\\r\\n```jsx\\r\\nconst value = useContext(MyContext);\\r\\n```\\r\\n\\r\\nMy suggestion is the following: optionally, allow receiving specific values from context values and only update the components if the returned values change. Here is an example:\\r\\n\\r\\n```jsx\\r\\nconst data = useContext(MyContext, value => value.data); // value = context value\\r\\n```\\r\\n\\r\\nWhen the second function argument is defined, only the returned value from the function will be compared and accessed. This will simplify a lot of workflows where multiple contexts are used for multiple values in order to reduce the number of context updates. Here is an example from [Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) (modified a little bit):\\r\\n\\r\\n```jsx\\r\\nfunction TodosApp() {\\r\\n  // Note: `dispatch` won\'t change between re-renders\\r\\n  const [todos, dispatch] = useReducer(todosReducer);\\r\\n\\r\\n  return (\\r\\n    <TodosData.Provider value={todos}>\\r\\n      <TodosDispatch.Provider value={dispatch}>\\r\\n        <DeepTree todos={todos} />\\r\\n      </TodosDispatch.Provider>\\r\\n    </TodosData.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction DeepChild(props) {\\r\\n  // If we want to perform an action, we can get dispatch from context.\\r\\n  const dispatch = useContext(TodosDispatch);\\r\\n\\r\\n  function handleClick() {\\r\\n    dispatch({ type: \'add\', text: \'hello\' });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <button onClick={handleClick}>Add todo</button>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction AnotherDeepChild(props) {\\r\\n  const data = useContext(TodosData);\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nWith the proposed API addition, we can just use the same context to do retrieve two different values:\\r\\n\\r\\n```jsx\\r\\nfunction TodosApp() {\\r\\n  // Note: `dispatch` won\'t change between re-renders\\r\\n  const [todos, dispatch] = useReducer(todosReducer);\\r\\n\\r\\n  return (\\r\\n    <TodosContext.Provider value={{ todos, dispatch }}>\\r\\n        <DeepTree todos={todos} />\\r\\n    </TodosContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction DeepChild(props) {\\r\\n  const dispatch = useContext(TodosContext, value => value.dispatch);\\r\\n}\\r\\n\\r\\nfunction AnotherDeepChild(props) {\\r\\n  const todos = useContext(TodosContext, value => value.todos);\\r\\n}\\r\\n```\\r\\n\\r\\nAnother useful scenario for this addition is dynamically selecting items from a centralized store based on context. If a developer needs to selectively retrieve specific values from an object, they can do it very easily. Something similar to Redux\' `useSelector` but is part of a normal Context Flow:\\r\\n\\r\\n```jsx\\r\\nfunction UserInfoApp() {\\r\\n  // Note: `dispatch` won\'t change between re-renders\\r\\n  const [user, dispatch] = useReducer(userReducer, { name: ..., dob: ..., active: ... });\\r\\n\\r\\n  return (\\r\\n    <UserInfoContext.Provider value={user}>\\r\\n        <DeepTree todos={todos} />\\r\\n    </UserInfoContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction UserInfoTable(props) {\\r\\n  const name = useContext(UserInfoContext, value => value.name);\\r\\n  const dob = useContext(UserInfoContext, value => value.dob);\\r\\n}\\r\\n\\r\\nfunction UserActiveTracker(props) {\\r\\n  const todos = useContext(UserInfoContext, value => value.active);\\r\\n}\\r\\n```\\r\\n\\r\\nNow, if `active` value is changed, only `UserActiveTracker` will be updated. If `name` or `dob` is changed, only `UserInfoTable` will be activated. \\r\\n\\r\\nThe API can also be implemented for `Context.Consumer` component:\\r\\n\\r\\n```jsx\\r\\n<MyContext.Consumer selector={value => value.active}> ... </MyContext.Consumer>\\r\\n```\\r\\n\\r\\nand `static contextType` static class variable:\\r\\n\\r\\n```jsx\\r\\nclass MyComponent extends React.Component {\\r\\n  static contextType = MyContext;\\r\\n  static contextSelector = value => value.active;\\r\\n\\r\\n  render() {\\r\\n    const val = this.context.active;\\r\\n    const wrongVal = this.context.name; // = undefined\\r\\n\\r\\n    return ...\\r\\n  }\\r\\n}\\r\\n```\\r\\n","number":17777,"user":{"login":"GasimGasimzada"},"state":"closed","created_at":"2020-01-04T13:51:19Z"},{"id":545285055,"title":"Allow direct construction of components when implementing a custom ComponentFactory ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen implementing a `ComponentFactory` the type is returned in the `ReactElement` instead of a constructed instance of the class.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAn optional function to create the instance could be included on the `ReactElement` interface:\\r\\n```\\r\\n    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\\r\\n        type: T;\\r\\n        props: P;\\r\\n        key: Key | null;\\r\\n        construct: () => InstanceType<T> // example return type\\r\\n    }\\r\\n```\\r\\nThis would allow the developer to provide default logic when constructing the instance.\\r\\n\\r\\nMy use case for this is to enable Dependency Injection of constructor params.\\r\\n","number":17776,"user":{"login":"Roaders"},"state":"closed","created_at":"2020-01-04T13:27:24Z"},{"id":545267184,"title":"Scope dev tools wildcard styles within DevTools CSS class","body":"Previously, wildcard selector was used to apply global styles that are related to DevTools. However, due to the fact that wildcard selectors will be used throughout the website, `react-devtools-inline` package bleeds out its styles outside its scope. So, in this PR, I am scoping these styles within `DevTools` main container\'s class name.\\r\\n\\r\\nIn this PR, I have added selectors for DevTools class and all the items within DevTools class.\\r\\n\\r\\nApplied styles were tested using React DevTools app (package: `react-devtools`) by inspecting them through Electron\'s chrome inspector.\\r\\n\\r\\nReferencing issue: https://github.com/facebook/react/issues/16456\\r\\n","number":17775,"user":{"login":"GasimGasimzada"},"state":"closed","created_at":"2020-01-04T10:08:35Z"},{"id":545216977,"title":"Remove special casing of toString values when enableTrustedTypesIntegration","body":"As far as I can tell, we only toString in user space because of IE8/9. I tested in IE10 and IE11 and it doesn\'t seem to be an issue there.\\r\\n\\r\\nWe don\'t really support IE8/9 anymore and by the time this flag is on, it should be fine to stop supporting IE8/9. Arguably it\'s already ok to break it since we\'ve done so with other IE8/9 things.","number":17774,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2020-01-04T00:33:19Z"},{"id":545213434,"title":"Remove toString of dangerouslySetInnerHTML","body":"As far as I can tell, the toString call was added here:\\r\\n\\r\\nhttps://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887\\r\\n\\r\\nHowever, we don\'t toString the HTML in the initial creation. Only updates. It was never really needed.\\r\\n\\r\\nSubsequently when we added Trusted Types, this needed to be changed to a special call but we really should just always let it pass through.\\r\\n\\r\\n_Interestingly we should probably always let values pass through except for\\r\\nwhen we need to do something special with the string which is rare._","number":17773,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2020-01-04T00:12:02Z"},{"id":545199296,"title":"[DO NOT MERGE] Root event marks","body":"Creating this work in progress PR to simplify the process of syncing the build to FB for testing.","number":17772,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-03T23:06:04Z"},{"id":545171861,"title":"DevTools Profiler: Improve how empty commits are filtered","body":"DevTools Profiler: Improve how empty commits are filtered\\r\\n\\r\\nPreviously, DevTools filtered empty commits on the backend, while profiling, through the use of a bailout heuristic that React currently happens to use. This approach was brittle and may have exacerbated the long-standing Profiler bug #16446.\\r\\n\\r\\nThis PR removes that heuristic and adds as a post-processing filtering pass instead. This removes the coupling between DevTools and a React internal implementation detail that may change.\\r\\n\\r\\nI believe DevTools has two choices of criteria for this filtering:\\r\\n* Filter commits that have no actual duration metadata.\\r\\n* Filter commits that have no recorded operations (no mutations to the tree, no changed tree base durations).\\r\\n\\r\\nI chose the first option, filtering by commits that have no reported\xa0metadata. It will miss an edge case, `unmountComponentAtNode`, but we would have nothing meaningful to show in the Profiler for that case anyway. (This particular case is why one of the snapshots changed with this commit.)\\r\\n\\r\\nThe second option, filtering by recorded operations, could potentially miss a more important edge case: where a component *did* render, but its `treeBaseDuration` didn\'t change. (In that event, there would be no tree `operations` sent.)\\r\\n\\r\\nI believe this PR might resolve the longstanding issue #16446 but since it\'s very hard to reproduce, I\'m not sure.","number":17771,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-03T21:30:00Z"},{"id":545168838,"title":"Rendering React component on server to take a screenshot of it","body":"My React application has a list of to do lists like this:\\r\\n\\r\\n<img width=\\"1082\\" alt=\\"figma_canvases\\" src=\\"https://user-images.githubusercontent.com/12554095/71749785-47206c00-2e2b-11ea-8d0c-5a82ceba1b05.png\\">\\r\\n\\r\\n> Replace the Figma canvas preview images with todo lists above.\\r\\n\\r\\nIn the list of todo lists, I\'d like to include a preview of each list as well as its name.\\r\\n\\r\\nHere\'s what I thought of to achieve this:\\r\\n- Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`.\\r\\n- Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page\\r\\n\\r\\nHowever, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won\'t work?\\r\\n\\r\\nI\'ve looked at `repng` [1] so far but it hasn\'t worked for the components I tested it with.\\r\\n\\r\\n[1] https://github.com/jxnblk/repng","number":17770,"user":{"login":"veeral-patel"},"state":"closed","created_at":"2020-01-03T21:21:32Z"},{"id":545101832,"title":"Error: \\"Could not find node with id \\"1145\\" in commit tree\\" on React Profiler","body":"Describe what you were doing when the bug occurred:\\r\\n1. Open ranked tab\\r\\n2. Changing \\"Render at\\" repeatedly\\r\\n3. Error appeared\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67999)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108660)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17769,"user":{"login":"fidellr"},"state":"closed","created_at":"2020-01-03T18:16:47Z"},{"id":545082416,"title":"DevTools: Replaced unsafe hasOwnProperty() calls","body":"DevTools previously called `value.hasOwnProperty(\'foo\')` in several places with user-defined values. This could lead to runtime errors if those values had an overridden attribute. This commit replaces those calls with `hasOwnProperty.call(value, \'foo\')` instead.\\r\\n\\r\\nNew test cases have been added.\\r\\n\\r\\nResolves #17761\\r\\nResolves half of #17764","number":17768,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-03T17:20:19Z"},{"id":545009451,"title":"Cannot analyse component State","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n- Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n- On trying to analyse a component State using React Developer Tools, the analyse pane stays in the `Loading ...` state and throws this error\\r\\n```js\\r\\nUncaught TypeError: Cannot read property \'name\' of undefined\\r\\n    at O (backend.js:1)\\r\\n    at s (backend.js:1)\\r\\n    at s (backend.js:1)\\r\\n    at s (backend.js:1)\\r\\n    at l (backend.js:1)\\r\\n    at Object.inspectElement (backend.js:6)\\r\\n    at t.<anonymous> (backend.js:6)\\r\\n    at t.r.emit (backend.js:6)\\r\\n    at backend.js:32\\r\\n    at t (backend.js:8)\\r\\n```\\r\\n**What is the expected behavior?**\\r\\n- Able to analyse component State as in the previous React Dev Tools versions. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- React Developer Tools version: 4.3.0 (12/20/2019)\\r\\n- React Version: ^16.4.0\\r\\n- Browsers:\\r\\n  - Chrome: Version 79.0.3945.88 (Official Build) (64-bit)\\r\\n  - Brave: Version 1.1.23 Chromium: 79.0.3945.88 (Official Build) (64-bit)\\r\\n\\r\\n\\r\\n","number":17767,"user":{"login":"rakhi2104"},"state":"closed","created_at":"2020-01-03T14:13:20Z"},{"id":544974993,"title":"npm run build error","body":"I am getting an error while run command \\r\\nnpm run build\\r\\n\\r\\n\\r\\nCreating an optimized production build...\\r\\nFailed to compile.\\r\\n\\r\\nCannot set property \'value\' of undefined\\r\\nCompileError: Begins at CSS selector undefined\\r\\n\\r\\n\\r\\nnpm ERR! code ELIFECYCLE\\r\\nnpm ERR! errno 1\\r\\nnpm ERR! account-opening@0.1.0 build: `react-scripts build`\\r\\nnpm ERR! Exit status 1\\r\\nnpm ERR! \\r\\nnpm ERR! Failed at the account-opening@0.1.0 build script.\\r\\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\\r\\n\\r\\nnpm ERR! A complete log of this run can be found in:\\r\\nnpm ERR!     /Users/macbook/.npm/_logs/2020-01-03T12_25_17_735Z-debug.log\\r\\nS-MacBook-Air:account-opening-frontend macbook$ \\r\\n\\r\\n\\r\\nMy package.json\\r\\n\\r\\n{\\r\\n  \\"name\\": \\"account-opening\\",\\r\\n  \\"version\\": \\"0.1.0\\",\\r\\n  \\"author\\": {\\r\\n    \\"name\\": \\"Sourabh Parmar\\"\\r\\n  },\\r\\n  \\"private\\": true,\\r\\n  \\"dependencies\\": {\\r\\n    \\"@material-ui/core\\": \\"^3.9.2\\",\\r\\n    \\"@material-ui/icons\\": \\"^3.0.2\\",\\r\\n    \\"axios\\": \\"^0.18.1\\",\\r\\n    \\"browserslist\\": \\"^4.8.3\\",\\r\\n    \\"date-fns\\": \\"^1.30.1\\",\\r\\n    \\"detect-browser\\": \\"^4.5.0\\",\\r\\n    \\"material-ui-pickers\\": \\"^2.2.4\\",\\r\\n    \\"moment\\": \\"^2.24.0\\",\\r\\n    \\"react\\": \\"^16.8.2\\",\\r\\n    \\"react-cropper\\": \\"^1.2.0\\",\\r\\n    \\"react-datepicker\\": \\"^2.8.0\\",\\r\\n    \\"react-dom\\": \\"^16.8.2\\",\\r\\n    \\"react-facebook-pixel\\": \\"^0.1.3\\",\\r\\n    \\"react-ga\\": \\"^2.6.0\\",\\r\\n    \\"react-helmet\\": \\"^5.2.0\\",\\r\\n    \\"react-html5-camera-photo\\": \\"^1.2.9\\",\\r\\n    \\"react-imgpro\\": \\"^1.4.1\\",\\r\\n    \\"react-modal\\": \\"^3.11.1\\",\\r\\n    \\"react-overlays\\": \\"^1.2.0\\",\\r\\n    \\"react-redux\\": \\"^6.0.1\\",\\r\\n    \\"react-router\\": \\"^4.3.1\\",\\r\\n    \\"react-router-dom\\": \\"^4.3.1\\",\\r\\n    \\"react-scripts\\": \\"^3.3.0\\",\\r\\n    \\"redux\\": \\"^4.0.1\\",\\r\\n    \\"redux-saga\\": \\"^1.0.2\\",\\r\\n    \\"secure-ls\\": \\"^1.2.5\\"\\r\\n  },\\r\\n  \\"scripts\\": {\\r\\n    \\"start\\": \\"react-scripts start\\",\\r\\n    \\"build\\": \\"react-scripts build\\",\\r\\n    \\"test\\": \\"react-scripts test\\",\\r\\n    \\"eject\\": \\"react-scripts eject\\",\\r\\n    \\"zip\\": \\"gzip -r build\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"eslint-config-prettier\\": \\"^3.3.0\\",\\r\\n    \\"eslint-plugin-prettier\\": \\"^2.6.2\\",\\r\\n    \\"lint-staged\\": \\"^7.2.2\\",\\r\\n    \\"prettier\\": \\"^1.14.2\\"\\r\\n  },\\r\\n  \\"eslintConfig\\": {\\r\\n    \\"extends\\": \\"react-app\\"\\r\\n  },\\r\\n  \\"browserslist\\": [\\r\\n    \\">0.2%\\",\\r\\n    \\"not dead\\",\\r\\n    \\"not ie <= 11\\",\\r\\n    \\"not op_mini all\\"\\r\\n  ]\\r\\n}\\r\\n\\r\\nComplete Log\\r\\n\\r\\n\\r\\n0 info it worked if it ends with ok\\r\\n1 verbose cli [ \'/usr/local/bin/node\', \'/usr/local/bin/npm\', \'run\', \'build\' ]\\r\\n2 info using npm@6.13.4\\r\\n3 info using node@v11.13.0\\r\\n4 verbose run-script [ \'prebuild\', \'build\', \'postbuild\' ]\\r\\n5 info lifecycle account-opening@0.1.0~prebuild: account-opening@0.1.0\\r\\n6 info lifecycle account-opening@0.1.0~build: account-opening@0.1.0\\r\\n7 verbose lifecycle account-opening@0.1.0~build: unsafe-perm in lifecycle true\\r\\n8 verbose lifecycle account-opening@0.1.0~build: PATH: /usr/local/lib/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/Users/macbook/arit-projects/ao-checkoutysc/account-opening-frontend/node_modules/.bin:/Users/macbook/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/macbook/.cargo/bin\\r\\n9 verbose lifecycle account-opening@0.1.0~build: CWD: /Users/macbook/arit-projects/ao-checkoutysc/account-opening-frontend\\r\\n10 silly lifecycle account-opening@0.1.0~build: Args: [ \'-c\', \'react-scripts build\' ]\\r\\n11 silly lifecycle account-opening@0.1.0~build: Returned: code: 1  signal: null\\r\\n12 info lifecycle account-opening@0.1.0~build: Failed to exec build script\\r\\n13 verbose stack Error: account-opening@0.1.0 build: `react-scripts build`\\r\\n13 verbose stack Exit status 1\\r\\n13 verbose stack     at EventEmitter.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-lifecycle/index.js:332:16)\\r\\n13 verbose stack     at EventEmitter.emit (events.js:193:13)\\r\\n13 verbose stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-lifecycle/lib/spawn.js:55:14)\\r\\n13 verbose stack     at ChildProcess.emit (events.js:193:13)\\r\\n13 verbose stack     at maybeClose (internal/child_process.js:1001:16)\\r\\n13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:266:5)\\r\\n14 verbose pkgid account-opening@0.1.0\\r\\n15 verbose cwd /Users/macbook/arit-projects/ao-checkoutysc/account-opening-frontend\\r\\n16 verbose Darwin 18.6.0\\r\\n17 verbose argv \\"/usr/local/bin/node\\" \\"/usr/local/bin/npm\\" \\"run\\" \\"build\\"\\r\\n18 verbose node v11.13.0\\r\\n19 verbose npm  v6.13.4\\r\\n20 error code ELIFECYCLE\\r\\n21 error errno 1\\r\\n22 error account-opening@0.1.0 build: `react-scripts build`\\r\\n22 error Exit status 1\\r\\n23 error Failed at the account-opening@0.1.0 build script.\\r\\n23 error This is probably not a problem with npm. There is likely additional logging output above.\\r\\n24 verbose exit [ 1, true ]\\r\\n\\r\\n\\r\\n","number":17766,"user":{"login":"yuvraj88"},"state":"closed","created_at":"2020-01-03T12:29:26Z"},{"id":544970134,"title":"[react-interactions] Fix Hover issues with portals","body":"This PR fixes an issue discovered internally with the Hover responder and React Portals. Specifically, the `onHoverEnd` events were not firing when we moved focus through a React Portal. The reason for this is because, by their nature, portal nodes are within other parts of the DOM tree, that are not linked to that of the \\"target\\" portion of the tree. That means, moving into a portal will be the last time we get a `pointerleave` event fire because we only track `pointerleave` for target events. We should instead be tracking this for root events, as portals are in another part of the document. I\'ve also added a regression test that shows this error (will fail if you revert Hover.js).","number":17765,"user":{"login":"trueadm"},"state":"closed","created_at":"2020-01-03T12:13:19Z"},{"id":544929157,"title":"React Developer Tools react-router-dom e.hasOwnProperty is not a function, Cannot read property \'name\' of undefined","body":"bug\\r\\nUncaught TypeError: Cannot read property \'name\' of undefined\\r\\nUncaught TypeError: e.hasOwnProperty is not a function\\r\\n\\r\\ninfinite loading in component view\\r\\n![image](https://user-images.githubusercontent.com/8398353/71717720-a37e8e00-2e21-11ea-82a3-cc6d815158fc.png)\\r\\n\\r\\nReproduce:\\r\\nuse hook useRouter or HOC withRouter from react-router-dom and select component with hook/hoc in components view react developer tools\\r\\nIssue is caused by not-bug https://github.com/hapijs/hapi/issues/3280\\r\\n(query object does not have constructor and does not have hasOwnProperty)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/8398353/71717283-4afac100-2e20-11ea-9f86-84f63cb73ab1.png)\\r\\n![image](https://user-images.githubusercontent.com/8398353/71717412-b6dd2980-2e20-11ea-8514-04708cf02015.png)\\r\\n![image](https://user-images.githubusercontent.com/8398353/71717397-a75de080-2e20-11ea-9dc3-35da5a4f0ff4.png)\\r\\n","number":17764,"user":{"login":"yrambler2001"},"state":"closed","created_at":"2020-01-03T10:09:22Z"},{"id":544923739,"title":" Warning: An update to SearchPage inside a test was not wrapped in act(...).","body":"Using Jest and Enzyme.\\r\\n\\r\\n<img width=\\"1025\\" alt=\\"Screenshot 2020-01-02 at 17 10 58\\" src=\\"https://user-images.githubusercontent.com/37377831/71716992-8096ae80-2e0e-11ea-9a2b-a39ac04ea53e.png\\">\\r\\n\\r\\n\\r\\nThe Bug is happening for this test.\\r\\n\\r\\n![Screenshot 2020-01-03 at 09 52 39](https://user-images.githubusercontent.com/37377831/71717086-cfdcdf00-2e0e-11ea-8432-a4f770476e4c.png)\\r\\n\\r\\n","number":17763,"user":{"login":"SarpongAbasimi"},"state":"closed","created_at":"2020-01-03T09:53:57Z"},{"id":544922195,"title":"Bug: Component state resets inconsistently with Suspense for data fetching","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nHere is the codesandbox example: https://codesandbox.io/s/blissful-wilbur-xz8dy\\r\\n\\r\\n##### Background\\r\\nIn the sandbox, there are two main components; `<Parent />` and `<Child />`. `Parent` is rendered as a child of React.Suspense. `Child` is rendered as a child of `Parent`. `Parent` has a count variables coming from a useState hook.\\r\\n\\r\\nThere is a fake fetch function, which gets data from a `Map`. We pass the count as the key to the fetch call. If data is not found, it throws a promise which will set the data on the map after one second.\\r\\n\\r\\n##### Issue\\r\\nThe `count` state gets reset to its initial state when we call the `fetch()` function from the `Parent` component. However, it preserves the last state if we call the `fetch()` only from the `Child` component.\\r\\n\\r\\nThis behaviour change can be observed by looking at the console.log. With the fetch call in the Parent component, it fires the fetch() call as many times until the same count is received twice. With the fetch call only in the Child component, it renders correctly the first time.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI suppose the behaviour of the `count` state should be consistent despite of from where we call the `fetch()` function. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.12, React-DOM 16.12","number":17762,"user":{"login":"pupudu"},"state":"closed","created_at":"2020-01-03T09:49:35Z"},{"id":544840157,"title":"Error: \\"f.hasOwnProperty is not a function\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Open https://codesandbox.io/s/angry-mestorf-cbvdv\\r\\n2. Open DevTools, and try to inspect the <App> component\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:268899)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46436\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3676)\\r\\n    at $o (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46146)\\r\\n    at na (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46382)\\r\\n\\r\\nComponent stack: in ha\\r\\n    in div\\r\\n    in Ka\\r\\n    in div\\r\\n    in bi\\r\\n    in div\\r\\n    in Ai\\r\\n    in Suspense\\r\\n    in ei\\r\\n    in div\\r\\n    in div\\r\\n    in la\\r\\n    in Ur\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17761,"user":{"login":"yume-chan"},"state":"closed","created_at":"2020-01-03T03:51:53Z"},{"id":544775730,"title":"DevTools Profiler commit selector wraps around","body":"I used to disable the <- and -> buttons when you reached the beginning or end of the profiler data. This can be kind of annoying though when you just want to get to the last commit, and I don\'t think there\'s a good reason to enforce it anyway, so I backed that change out. The buttons now wrap around at the beginning or end of the list.\\r\\n\\r\\n![Demo video](https://user-images.githubusercontent.com/29597/71697409-c7cc6300-2d6c-11ea-9cfb-3ffa7b8f1a49.gif)\\r\\n","number":17760,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-02T22:33:25Z"},{"id":544719175,"title":"Partial fix DevTools Profiler \\"Could not find node\u2026\\" error","body":"DevTools records the following information while profiling:\\r\\n1. A snapshot of the React tree when profiling started.\\r\\n1. The [operations array](https://github.com/facebook/react/blob/master/packages/react-devtools/OVERVIEW.md#serializing-the-tree) for each commit.\\r\\n1. Profiling metadata (e.g. durations, which values changed, etc.) for each commit.\\r\\n\\r\\nIt uses this information (snapshot + operations diff) to reconstruct the state of the application for a given commit as it\'s viewed in the Profiler UI. Because of this, it\'s very important that the operations and metadata arrays align. If they don\'t align, the profiler will be unable to correctly reconstruct the tree for a given commit, and it will likely throw errors (like \\"Could not find node\u2026\\")\\r\\n\\r\\n#16446 tracks a long-standing bug where the profiler is unable to correctly regenerate the tree for a commit. I believe it is because the two arrays I mentioned above are misaligned. I am still not entirely sure what causes the original bug, but I made it worse with PR #17253 by introducing another potential way for it to happen. This PR addresses that regression at least (and adds test coverage for it).\\r\\n\\r\\nI will follow up this afternoon on the original #16446 issue. I think I may have [a lead](https://github.com/facebook/react/issues/16446#issuecomment-570289883) on what\'s happening at least, if not exactly an idea of how to reproduce it. I believe this fix is worth landing on its own though, since it seems to have made the bug easier to trigger.","number":17759,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-02T19:46:51Z"},{"id":544666379,"title":"Fixed CircleCI DevTools build artifact tar internal structure","body":"Oops. Previously the `tar.gz` file had nested folders instead of it, which made it awkward to work with.","number":17758,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-02T17:14:21Z"},{"id":544636166,"title":"Added missing guard to DevTools for Objects with null proto","body":"This prevents a runtime error from occurring when these objects are inspected.\\r\\n\\r\\nResolves #17754","number":17757,"user":{"login":"bvaughn"},"state":"closed","created_at":"2020-01-02T15:56:47Z"},{"id":544567936,"title":"read props of element","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nI want to request a **feature**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n[This](https://codesandbox.io/embed/competent-sunset-8xcvp?fontsize=14&hidenavigation=1&theme=dark) is the current behavior. \\r\\n\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nExpected behavior is to access all it\'s attribute, using props or something.\\r\\n\\r\\n![](https://i.stack.imgur.com/R9Ziy.png)\\r\\n\\r\\nLike in the image instead of writing `active={this.state.navState===\'expired\'}` and `active={this.state.navState===\'todo\'}` or anything. I can directly write `active={this.state.navState===this.props.name}`\\r\\n \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n**Environment:**\\r\\n - react Version ^16.12.0\\r\\n - OS: Win 10\\r\\n - Browser: Chrome\\r\\n - Browser Version  :79.0.3945.88 (Official Build) (64-bit)\\r\\n\\r\\nAs far as I know, NO","number":17756,"user":{"login":"maifeeulasad"},"state":"closed","created_at":"2020-01-02T12:55:25Z"},{"id":544513837,"title":"Implement a method in serviceWorker.js file for skipWaiting in service worker life cycle","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\nI have propose for implementing a method in CRA that skip waiting for service-worker after new update in app detected by it\\r\\n","number":17755,"user":{"login":"saeedhemmati"},"state":"closed","created_at":"2020-01-02T09:59:59Z"},{"id":544512526,"title":"DevTools can\'t inspect object without prototype","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n1. Select a component\\r\\n2. The right panel (property panel?) always shows `Loading...` \\r\\n3. The following error is printed to the console.\\r\\n\\r\\n```\\r\\nbackend.js:1 Uncaught TypeError: Cannot read property \'name\' of undefined\\r\\n    at O (backend.js:1)\\r\\n    at s (backend.js:1)\\r\\n    at s (backend.js:1)\\r\\n    at l (backend.js:1)\\r\\n    at Object.inspectElement (backend.js:6)\\r\\n    at t.<anonymous> (backend.js:6)\\r\\n    at t.r.emit (backend.js:6)\\r\\n    at backend.js:32\\r\\n    at t (backend.js:8)\\r\\n```\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1330321/71661150-497dba00-2d88-11ea-8df1-235f24ba793f.png)\\r\\n\\r\\nI don\'t know why you minify the output, but the call stack points to here:\\r\\n\\r\\nhttps://github.com/facebook/react/blob/f887d1aa27336baa0bc292158793a5a244c712b6/packages/react-devtools-shared/src/utils.js#L391\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/falling-wave-1j0qe\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nReact DevTools displays the props of the selected component.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.12.0\\r\\nChrome 79.0.3945.88\\r\\nIDK","number":17754,"user":{"login":"yume-chan"},"state":"closed","created_at":"2020-01-02T09:56:13Z"},{"id":544428298,"title":"Unexpected different DOM updating behavior","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nA bug, I guess. Unclear\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nOn mouse move on a canvas element, I\'m re-rendering the entire React tree, which includes this canvas and a few label + radio inputs. Depending on how the labels are added to the virtual tree, the browser selection gets weird.\\r\\n\\r\\nWhen we use\\r\\n```js\\r\\n<ElementOption />\\r\\n```\\r\\n\\r\\nthen, whenever we start dragging on the canvas, the text above gets highlighted which is annoying. Note that on the Chrome dev tools, the label gets updated on every mouse move.\\r\\n\\r\\n![ezgif-3-6b46fe8cddc7](https://user-images.githubusercontent.com/197597/71649526-6f418b00-2cc4-11ea-9341-776d8373a0e2.gif)\\r\\n\\r\\n\\r\\nbut, when we render without a component:\\r\\n```js\\r\\n{ElementOption()}\\r\\n```\\r\\nthen the label doesn\'t get updated and there\'s no bad selection behavior.\\r\\n![ezgif-3-c743795e5f15](https://user-images.githubusercontent.com/197597/71649512-4ae5ae80-2cc4-11ea-8c53-9686e2bbb6dc.gif)\\r\\n\\r\\nHere\'s the codesandbox with the full code: https://codesandbox.io/s/frosty-silence-etx23\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'m not really sure to be honest. I\'m not exactly sure why the label gets updated when rendered through a component, since there should be no changes.\\r\\n\\r\\nMy educated guess is that once the update gets removed, then the text selection behavior won\'t be an issue anymore.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.2, Chrome, MacOS\\r\\n","number":17753,"user":{"login":"vjeux"},"state":"closed","created_at":"2020-01-02T02:38:04Z"},{"id":544426514,"title":"Error: \\"Could not find node with id \\"2456\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.3.0-3e0967783\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\\r\\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\\r\\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67999)\\r\\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108660)\\r\\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\\r\\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\\r\\n\\r\\nComponent stack: in Sl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in vo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Qi\\r\\n    in Ve\\r\\n    in nn\\r\\n    in Da\\r\\n    in Yc","number":17752,"user":{"login":"vohuuhuy"},"state":"closed","created_at":"2020-01-02T02:23:32Z"},{"id":544406242,"title":"My Navbar work fine until next day","body":"Hi, I\'m Newbie for Web Dev. I\'m starting learning React and next.js and i got issue now i have to do a Navbar so I use Navbar from reactstrap to my next.js project it work fine but nextday I open my project and then my project kaboom.\\r\\n\\r\\n==\\r\\n\\r\\nError: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\r\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\r\\n2. You might be breaking the Rules of Hooks\\r\\n3. You might have more than one copy of React in the same app\\r\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\\r\\n\u25b6 2 stack frames were collapsed.\\r\\nExample\\r\\n./components/MainNav.js:19\\r\\n  16 | import \'bootstrap/dist/css/bootstrap.min.css\'\\r\\n  17 | \\r\\n  18 | const Example = (props) => {\\r\\n> 19 |   const [isOpen, setIsOpen] = useState(false);\\r\\n  20 | \\r\\n  21 |   const toggle = () => setIsOpen(!isOpen);\\r\\n  22 | \\r\\nView compiled\\r\\n\u25b6 11 stack frames were collapsed.\\r\\n\\r\\n==\\r\\n\\r\\nThis is my Navbar Code\\r\\n\\r\\n==\\r\\n```\\r\\nimport React, { useState } from \'react\';\\r\\nimport {\\r\\n  Collapse,\\r\\n  Navbar,\\r\\n  NavbarToggler,\\r\\n  NavbarBrand,\\r\\n  Nav,\\r\\n  NavItem,\\r\\n  NavLink,\\r\\n  UncontrolledDropdown,\\r\\n  DropdownToggle,\\r\\n  DropdownMenu,\\r\\n  DropdownItem,\\r\\n  NavbarText\\r\\n} from \'reactstrap\';\\r\\nimport \'bootstrap/dist/css/bootstrap.min.css\'\\r\\n\\r\\nconst Example = (props) => {\\r\\n  const [isOpen, setIsOpen] = useState(false);\\r\\n\\r\\n  const toggle = () => setIsOpen(!isOpen);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Navbar color=\\"light\\" light expand=\\"md\\">\\r\\n        <NavbarBrand href=\\"/\\">reactstrap</NavbarBrand>\\r\\n        <NavbarToggler onClick={toggle} />\\r\\n        <Collapse isOpen={isOpen} navbar>\\r\\n          <Nav className=\\"mr-auto\\" navbar>\\r\\n            <NavItem>\\r\\n              <NavLink href=\\"/\\">HOME</NavLink>\\r\\n            </NavItem>\\r\\n            <NavItem>\\r\\n              <NavLink href=\\"/\\">WHAT</NavLink>\\r\\n            </NavItem>\\r\\n            <NavItem>\\r\\n              <NavLink href =\\"/\\">WHO</NavLink>\\r\\n            </NavItem>\\r\\n            <NavItem>\\r\\n              <NavLink href =\\"/\\">BRANCH</NavLink>\\r\\n            </NavItem>\\r\\n            <NavItem>\\r\\n              <NavLink href =\\"/\\">WHERE</NavLink>\\r\\n            </NavItem>\\r\\n            <NavItem>\\r\\n              <NavLink href =\\"/\\">WHEN</NavLink>\\r\\n            </NavItem>\\r\\n            <NavItem>\\r\\n              <NavLink href =\\"/\\">FAQS</NavLink>\\r\\n            </NavItem>\\r\\n            <NavItem>\\r\\n              <NavLink href =\\"/\\">GAME</NavLink>\\r\\n            </NavItem>\\r\\n          </Nav>\\r\\n          <NavbarText>Simple Text</NavbarText>\\r\\n        </Collapse>\\r\\n      </Navbar>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Example;\\r\\n```\\r\\n==\\r\\n\\r\\nWhat wrong is it and what should i do to resolve this. Thank.\\r\\n","number":17751,"user":{"login":"KlitB"},"state":"closed","created_at":"2020-01-01T22:36:31Z"},{"id":544184812,"title":"Error: \\"Could not find commit data for root \\"5621\\" and commit 7\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163226)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332702)\\r\\n    at uc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332919)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46341\\r\\n\\r\\nComponent stack: in uc\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17750,"user":{"login":"ashercoren"},"state":"closed","created_at":"2019-12-31T13:04:12Z"},{"id":544131438,"title":"Error: \\"Could not find node with id \\"57\\" in commit tree\\"","body":"I\'m tried to use *Profilter tool on Chrome browser, but i got this error when i review the rank of list Elements.  I don\'t know what is that ?\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17749,"user":{"login":"ngoxuanhien"},"state":"closed","created_at":"2019-12-31T08:56:10Z"},{"id":544065210,"title":"I can\'t get the latest status value in the initialization method","body":"I try to get the latest state value in the initialization method, but the result is not satisfactory\u3002\\r\\nAll this happens in function components\u3002\\r\\n\\r\\n1.react version is 16.12.0\uff1b\\r\\n2.react-dom version is 16.12.0\uff1b\\r\\n\\r\\nthis is my demo code :\\r\\n\\r\\n```\\r\\nimport React,{useState,useEffect} from \'react\';\\r\\n\\r\\nconst App=()=>{\\r\\n\\t/*button click*/\\r\\n\\tconst btnClick = ()=>{\\r\\n\\t\\tconsole.log(\\"initButton getting state is====>\\",nowState); //can\'t get now state ,all is init value\\r\\n\\t}\\r\\n\\t/*init a button*/ \\r\\n\\tconst initTitle = ()=>{\\r\\n\\t\\treturn (\\r\\n\\t\\t\\t<button onClick={btnClick}>click</button>\\r\\n\\t\\t)\\r\\n\\t}\\r\\n\\tconst [title, settitle] = useState();\\r\\n\\r\\n\\t/*now state*/\\r\\n\\tconst [nowState, setNowState] = useState(0);\\r\\n\\tconsole.log(\\"now state is====>\\",nowState);\\r\\n\\r\\n\\tuseEffect(()=>{\\r\\n\\t\\tsettitle(initTitle());\\r\\n\\t},[])\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<>\\r\\n\\t\\t\\t{title}\\r\\n\\t\\t\\t<button onClick={()=>setNowState(nowState + 1)}>change now state</button>\\r\\n\\t\\t</>\\r\\n\\t);\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n```\\r\\n","number":17748,"user":{"login":"lmxyjy"},"state":"closed","created_at":"2019-12-31T02:08:08Z"},{"id":544002921,"title":"ReactDOM.createRoot does not exist","body":"Hi,\\r\\n\\r\\nI am trying the new react experimental in a very simple existing app we had. Although I have changed the react versions in my package.json but it seems it doesn\'t recognize ReactDOM.createRoot. \\r\\n\\r\\n> Property \'createRoot\' does not exist on type \'typeof import(\\"D:/repo/app/packages/experiences/home/node_modules/@types/react-dom/index\\")\'. \\r\\n\\r\\nAny ideas how to resolve this? Thank you in advance.\\r\\n\\r\\n`\\"dependencies\\": {\\r\\n        \\"@types/jest\\": \\"24.0.17\\",\\r\\n        \\"@types/node\\": \\"12.7.1\\",\\r\\n        \\"@types/react\\": \\"16.9.1\\",\\r\\n        \\"@types/react-dom\\": \\"16.8.5\\",\\r\\n        \\"node-sass\\": \\"^4.12.0\\",\\r\\n        \\"react\\": \\"experimental\\",\\r\\n        \\"react-dom\\": \\"experimental\\",\\r\\n        \\"react-scripts\\": \\"3.1.2\\",\\r\\n        \\"typescript\\": \\"3.5.3\\"\\r\\n    },\\r\\n    \\"scripts\\": {\\r\\n        \\"start\\": \\"react-app-rewired start\\",\\r\\n        \\"build\\": \\"react-app-rewired build\\",\\r\\n        \\"disabled:test\\": \\"react-app-rewired test\\",\\r\\n        \\"eject\\": \\"react-scripts eject\\"\\r\\n    },\\r\\n    \\"eslintConfig\\": {\\r\\n        \\"extends\\": \\"react-app\\",\\r\\n        \\"rules\\": {\\r\\n            \\"@typescript-eslint/no-angle-bracket-type-assertion\\": \\"off\\"\\r\\n        }\\r\\n    },\\r\\n    \\"browserslist\\": {\\r\\n        \\"production\\": [\\r\\n            \\">0.2%\\",\\r\\n            \\"not dead\\",\\r\\n            \\"not op_mini all\\"\\r\\n        ],\\r\\n        \\"development\\": [\\r\\n            \\"last 1 chrome version\\",\\r\\n            \\"last 1 firefox version\\",\\r\\n            \\"last 1 safari version\\"\\r\\n        ]\\r\\n    },\\r\\n    \\"devDependencies\\": {\\r\\n        \\"@babel/core\\": \\"^7.7.7\\",\\r\\n        \\"@teamsupercell/typings-for-css-modules-loader\\": \\"^2.1.0\\",\\r\\n        \\"css-loader\\": \\"^3.2.0\\",\\r\\n        \\"customize-cra\\": \\"^0.8.0\\",\\r\\n        \\"react-app-rewired\\": \\"^2.1.4\\",\\r\\n        \\"worker-loader\\": \\"2.0.0\\"\\r\\n    }\\r\\n}\\r\\n`\\r\\n\\r\\n","number":17747,"user":{"login":"Kajmeh"},"state":"closed","created_at":"2019-12-30T20:30:54Z"},{"id":543990567,"title":"Build and store DevTools artifacts in Circle CI","body":"Might as well leverage Circle CI to test our DevTools builds, and if we\'re doing that- we might as well store the artifacts as well. Maybe in the future, we should release DevTools directly from CI artifacts as well, like we do for NPM packages.\\r\\n\\r\\nLet\'s see if these changes actually work... \ud83d\ude04","number":17746,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-30T19:45:27Z"},{"id":543988096,"title":"[Hooks] useEffect is behaving little odd","body":"I want to convert my class component to a functional component so I am trying to mimic the behavior of the `componentDidMount()` and `componentWillUnmount()` using `useEffect()` hook. I am using Redux to store my state.\\r\\n\\r\\n***My class Implementaion of `componentDidMount()` and `componentWillUnmount()`***\\r\\n![image](https://user-images.githubusercontent.com/11327529/71596920-4952a400-2b67-11ea-978b-7959a0f421e3.png)\\r\\n\\r\\n***My `useEffect()` Implementaion***\\r\\n![image](https://user-images.githubusercontent.com/11327529/71596994-8e76d600-2b67-11ea-8f0b-90881bfa47f0.png)\\r\\n\\r\\n\\r\\nMy app basically shows a list of expenses in a table which are stored in the firebase database. I\'m using a `loading` flag to show a spinner while fetching data from firebase. but with my current implementation if I don\'t set the flag conditionally every time firebase sends me data or I add data to firebase the `loading` flag is overwritten to false.\\r\\nso ***I\'m checking if the loading flag is true then only I will set it false otherwise not***.\\r\\n`loading` flag behaving as expected in the class implementation but in functional component implementation after setting it true using `setLoadingTrue()` I\'m seeing it `false` in the logs although the redux dev tools saying that the variable is set `true`.\\r\\n![image](https://user-images.githubusercontent.com/11327529/71597446-29bc7b00-2b69-11ea-8354-668b2b3187ef.png)\\r\\n![image](https://user-images.githubusercontent.com/11327529/71597474-48bb0d00-2b69-11ea-8cab-b5482292f6ed.png)\\r\\n\\r\\nis there any better way to do the same?","number":17745,"user":{"login":"ssahaxd"},"state":"closed","created_at":"2019-12-30T19:35:32Z"},{"id":543947506,"title":"More clear hooks warning for why a function is not considered as a component","body":"This fixes the issue #17736","number":17744,"user":{"login":"Nilomiranda"},"state":"open","created_at":"2019-12-30T17:04:43Z"},{"id":543588732,"title":"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.","body":"```js\\r\\nimport React from \\"react\\";\\r\\nimport * as reactNative from \\"react-native\\";\\r\\nimport { MapView } from \\"react-native-maps\\";\\r\\n\\r\\nexport default class App extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      region: {\\r\\n        latitude: 37.78825,\\r\\n        longitude: -122.4324,\\r\\n        latitudeDelta: 0.922,\\r\\n        longitudeDelta: 0.0421\\r\\n      }\\r\\n    };\\r\\n  }\\r\\n  render() {\\r\\n    return (\\r\\n      <reactNative.View style={styles.container}>\\r\\n        <reactNative.Text>home screen</reactNative.Text>\\r\\n        <MapView\\r\\n          initialRegion={this.state.region}\\r\\n          ShowsCompass={true}\\r\\n          rotateEnabled={false}\\r\\n          Style={{ flex: 1 }}\\r\\n        ></MapView>\\r\\n      </reactNative.View>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst styles = reactNative.StyleSheet.create({\\r\\n  container: {\\r\\n    flex: 1,\\r\\n    backgroundColor: \\"#fff\\"\\r\\n  }\\r\\n});\\r\\n```\\r\\n\\r\\n**Edited** for formatting by @bvaughn","number":17743,"user":{"login":"khaled4121"},"state":"closed","created_at":"2019-12-29T21:59:37Z"},{"id":543556835,"title":"Make hooks API more obvious","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nHooks were introduced in React 16.8. It\'s interesting feature which allows use state and other React features without writing a class, but unfortunately it\'s very difficult to understand. When I see a class component I understand that React creates instance of this class which holds some state and React calls lifecycle methods in different situations during mounting, props changing and unmounting. It makes me write a bit more code but all this code is verbose and easy to understand if you know some basic (not React-specific) JavaScript conceptions. It is said in [Hooks documentation](https://reactjs.org/docs/hooks-intro.html):\\r\\n\\r\\n> In addition to making code reuse and code organization more difficult, we\u2019ve found that classes can be a large barrier to learning React. You have to understand how this works in JavaScript, which is very different from how it works in most languages. You have to remember to bind the event handlers.\\r\\n\\r\\nYes, all of these facts are possible. You have to understand how JavaScript works if you want to use it to build programs. Yes, JavaScript Object Model differs from the other languages like C++ or Java. But I think it\'s fair enough: if you want to use JavaScript you need to understand how it works. E.g. if you want to write iOS native programs with Objective C you have to understand now reference counting works and it\'s OK. A lot of well known projects like [mocha](https://mochajs.org/) or [jQuery](https://jquery.com/) uses `this` concept.\\r\\n\\r\\nOf course you can use another approach and write code in functional way when you have strict separation between data and functions processing this data. In this case function receives data as a parameters, process it and return new date. It\'s also OK.\\r\\n\\r\\nBut when you try to mix stateful components and pure functions without closures to store some state it makes code very tricky.\\r\\n\\r\\nLast few months a lot of people have told me that Hooks are awesome and it\'s easier to understand than class components and shows me examples like this:\\r\\n\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nfunction Example() {\\r\\n  // Declare a new state variable, which we\'ll call \\"count\\"\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <p>You clicked {count} times</p>\\r\\n      <button onClick={() => setCount(count + 1)}>\\r\\n        Click me\\r\\n      </button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nBut when I asked about how this example works almost none of them answered. Why first `Example` is called `useState` returns 0 and second one - 1? This function is called with no parameters 2 times and returns different results. I see no closure. How does it work? How can I test it without some special React magic? How can I emulate the second call without the first one? Where is the state actually stored? You have to understand React sources deeply to answer all these questions.\\r\\n\\r\\nThe only possibility to implement `useState` is a global variable inside React and there are a lot of articles on the Internet that global variables are very fragile approach and if you can avoid using it - it\'s better to avoid it.\\r\\n\\r\\nI have a big code base and it\'s very important to understand which component has it\'s own state and which does not. Before React 16.8 it was clear: functional components do not have own state and class components have but now there is no strict border and any functional component can be stateful. This makes it more difficult to refactor code base.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIf I call function with particular parameters twice I receive the same results. `useState` and other Hooks do not have such behavior. I think it\'s possible to make hooks more obvious if there will be explicit parameter `context`:\\r\\n\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nfunction Example(context) {\\r\\n  // Declare a new state variable, which we\'ll call \\"count\\"\\r\\n  const [count, setCount] = useState(context, 0);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <p>You clicked {count} times</p>\\r\\n      <button onClick={() => setCount(count + 1)}>\\r\\n        Click me\\r\\n      </button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nReact will provide `context` to functional components and it will be clear how `useState` works without looking throw source codes of React. Also it will be easier to refactor and test such code.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17742,"user":{"login":"0e39bf7b"},"state":"closed","created_at":"2019-12-29T20:32:06Z"},{"id":543535487,"title":"hydrate SVG error: Expected server HTML to contain a matching <clipPath> in <svg>","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIt seems like `ReactDOM.hydrate` doesn\'t play nice with certain kinds of inline SVGs.\\r\\nSpecifically ones that have `clipPath`s\\r\\n\\r\\nWhen nextjs tries calling hydrate on a page with one of these SVGs, the offending part of the svg flashes quickly then react throws this error to the console.\\r\\n\\r\\n```\\r\\nExpected server HTML to contain a matching <clipPath> in <svg>.\\r\\n```\\r\\n\\r\\nI have a very small example of this happening here https://github.com/Delray-Devs/site/tree/brokenSVG\\r\\n\\r\\nThe strange part is when next builds the site statically it all works.\\r\\n\\r\\nI originally opened this issue on zeit/nextjs, but @timneutkens suggested I open the issue here.\\r\\n\\r\\nSee https://github.com/zeit/next.js/issues/9871 for all the details.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe SVG containing the `clipPath` gets rendered correctly on the client side.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: 16.12, not sure about previous versions\\r\\nBrowser: Firefox and Chrome\\r\\nOS: macOS\\r\\n","number":17741,"user":{"login":"benbot"},"state":"open","created_at":"2019-12-29T19:33:12Z"},{"id":543489280,"title":"Devtools renable copy attr context menu for firefox","body":"Verified that the \\"copy attribute\\" context menu option works correctly in Firefox after making this change.\\r\\n\\r\\nRelates to #17681 \\r\\n\\r\\n## Permissions\\r\\n\\r\\nNote that this relies on adding a new [`clipboardWrite` permission](https://developer.chrome.com/apps/declare_permissions) to the Firefox extension manifest. If this is considered a problem, we could make it an optional permission that we [request at runtime](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/permissions/request) instead.\\r\\n\\r\\nChrome does not seem to require any additional permissions for this to continue working as before.\\r\\n\\r\\n## Testing\\r\\n\\r\\nHere\'s the feature working in Firefox for the first time (after this change):\\r\\n\\r\\n![Firefox \\"copy attribute\\" context menu demo](https://user-images.githubusercontent.com/29597/71560367-e275a380-2a1d-11ea-8b56-7f3802680dfe.gif)\\r\\n\\r\\nAnd here\'s the feature still working on Chrome as before:\\r\\n![Chrome \\"copy attribute\\" context menu demo](https://user-images.githubusercontent.com/29597/71560419-a7c03b00-2a1e-11ea-90c6-8093ddb9867a.gif)\\r\\n","number":17740,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-29T17:27:55Z"},{"id":543484495,"title":"Make DevTools check document.contentType before injecting","body":"It should only inject the global hook into HTML documents. This will avoid breaking syntax highlighting for e.g. XML documents.\\r\\n\\r\\nThis fixes the following use case:\\r\\n1. Install React DevTools add-on in Firefox Developer Edition.\\r\\n1. Open an XML file (e.g. [www.w3schools.com/xml/note.xml](https://www.w3schools.com/xml/note.xml)).\\r\\n1. Verify syntax highlighting works.\\r\\n\\r\\nNote that if the React DevTools tab is already open before navigating to an XML document, syntax highlighting may not work.\\r\\n\\r\\nResolves #17620","number":17739,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-29T17:15:18Z"},{"id":543398058,"title":"Add colors to component\'s name ( in Component tree ) for visual feedback about type of Component or Node","body":"**What is the current behavior?**\\r\\n\\r\\nAll the components name  in the Component tree are of the same color\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIt would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.\\r\\n","number":17738,"user":{"login":"AnilSonix"},"state":"closed","created_at":"2019-12-29T13:28:56Z"},{"id":543352677,"title":"Hooks performance feature-request: do not trigger re-render","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nSomething in between. First I thought I found a bug, then I thought maybe I am not \\"thinking in hooks\\". Then I thought maybe this is a feature to be implemented.\\r\\n\\r\\n**What is the current behavior?**\\r\\nLook at the custom hook and the component that uses it below:\\r\\n```tsx\\r\\nfunction useTestHook() {\\r\\n  const [_, setState1]: any = React.useState(1);\\r\\n  const [state2, __]: any = React.useState(-1);\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    setInterval(() => {\\r\\n      console.log(\' --- set interval running\');\\r\\n      setState1((current: number) => current + 1);\\r\\n    }, 1000);\\r\\n  }, []);\\r\\n\\r\\n  return React.useMemo(() => state2, [state2]);\\r\\n}\\r\\n\\r\\nfunction TestComponent() {\\r\\n  const state2 = useTestHook();\\r\\n  console.log(\' --- component re-rendering\');\\r\\n\\r\\n  return <button>state2: {state2}</button>;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nFirst I expected my component not to re-render when `setState1` under `setInterval` invoked.\\r\\n\\r\\n**Which versions of React, and which browser?**\\r\\n```json\\r\\n{\\r\\n    \\"react\\": \\"^16.11.0\\",\\r\\n    \\"react-dom\\": \\"^16.11.0\\",\\r\\n}\\r\\n```\\r\\n\\r\\nAnd I thought `useTestHook` would keep re-invoking for itself.\\r\\n\\r\\nI think I\'ll find it helpful to have such a thing to bypass custom hook invoking re-render for it\'s user.","number":17737,"user":{"login":"Ardeshir81"},"state":"closed","created_at":"2019-12-29T10:28:54Z"},{"id":543341123,"title":"More clear hooks warning for why a function is not considered as a component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n*bug*\\r\\n**What is the current behavior?**\\r\\nIn current behaviour, I can create a functional component that starts with lowercase and I can use it by importing it with the uppercase name. But if I start using hooks in this lowercase named component, React will give error `React Hook \\"useState\\" is called in function \\"login\\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks`.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nReproduce bug [here](https://codesandbox.io/s/cranky-darwin-rnh4y)\\r\\n**What is the expected behavior?**\\r\\nThe expected behaviour is that I should get a warning at the first point when I am creating a component which starts with lowercase and if I am using hooks into a functional component that starts with lowercase then it should give useful warning something like `start component with uppercase`.\\r\\n\\r\\nI  know as a developer that I should always start my component with Uppercase letter. But if by mistake someone creates a component with a lowercase letter and tries to use hooks, he will have no clue what is wrong with his code.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\"react\\": \\"^16.12.0\\",\\r\\n\\"react-dom\\": \\"^16.12.0\\",\\r\\n\\"react-scripts\\": \\"3.3.0\\"\\r\\nChrome: 79.0.3945.88 (Official Build) (64-bit)\\r\\nOS: Ubuntu 18.04.3 LTS x86_64","number":17736,"user":{"login":"aditya81070"},"state":"open","created_at":"2019-12-29T08:59:01Z"},{"id":543315389,"title":"Error: \\"Could not find node with id \\"5268\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. clicked \\"Ranked\\" in \\"Profiler\\"\\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17735,"user":{"login":"cellog"},"state":"closed","created_at":"2019-12-29T04:21:45Z"},{"id":543281760,"title":"Error: \\"Could not find node with id \\"318\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Start/Stop Profiling\\r\\n2. Click \\"Ranked\\" tab\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17734,"user":{"login":"dmi3x"},"state":"closed","created_at":"2019-12-28T21:16:44Z"},{"id":543264664,"title":"Added missing Flow type coverage to DevTools context menu","body":"Oops. We should probably have a lint rule that complains if we forget to add the copyright+flow boilerplate to new files.\\r\\n\\r\\nThe `data` param should probably be a generic type, but I\'m not sure how to satisfy Flow with the current top-level `idToShowFnMap` Map. At least this adds basic coverage (which was missing before, oops).","number":17733,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-28T18:15:52Z"},{"id":543261236,"title":"Bump handlebars from 4.1.2 to 4.5.3","body":"Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [handlebars\'s changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*\\n\\n> ## v4.5.3 - November 18th, 2019\\n> Bugfixes:\\n> \\n> - fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences - f7f05d7\\n> - fix: add more properties required to be enumerable - 1988878\\n> \\n> Chores / Build:\\n> - fix: use !== 0 instead of != 0 - c02b05f\\n> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, \\n>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0\\n> \\n> Security:\\n> \\n> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` \\n>   have been added to the list of \\"properties that must be enumerable\\".\\n>   If a property by that name is found and not enumerable on its parent, \\n>   it will silently evaluate to `undefined`. This is done in both the compiled template and the \\"lookup\\"-helper. \\n>   This will prevent new Remote-Code-Execution exploits that have been\\n>   published recently.\\n> \\n> Compatibility notes: \\n> \\n> - Due to the security-fixes. The semantics of the templates using\\n>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return \\n>   `undefined` rather than their actual value from the proto.\\n> - The semantics have not changed in cases where the properties are  enumerable, as in:\\n> \\n> ```js\\n> {\\n>   __proto__: \'some string\'\\n> }\\n> ```\\n> \\n> - The change may be breaking in that respect, but we still only \\n>   increase the patch-version, because the incompatible use-cases\\n>   are not intended, undocumented and far less important than fixing\\n>   Remote-Code-Execution exploits on existing systems.\\n> \\n> \\n> \\n> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)\\n> \\n> ## v4.5.2 - November 13th, 2019\\n> # Bugfixes\\n> \\n> - fix: use String(field) in lookup when checking for \\"constructor\\" - d541378\\n> - test: add fluent API for testing Handlebars - c2ac79c\\n> \\n> Compatibility notes:\\n> - no incompatibility are to be expected\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3\\n- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes\\n- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences\\n- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable\\n- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to \\"runtime\\"-environment\\n- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs\\n- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions\\n- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions\\n- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0\\n- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2\\n- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)\\n\\nDependabot will resolve any conflicts with this PR as long as you don\'t alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n\\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\\n\\n</details>","number":17732,"user":{"login":"dependabot[bot]"},"state":"closed","created_at":"2019-12-28T17:47:32Z"},{"id":543261032,"title":"Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/ssr","body":"Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.5.3.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [handlebars\'s changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*\\n\\n> ## v4.5.3 - November 18th, 2019\\n> Bugfixes:\\n> \\n> - fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences - f7f05d7\\n> - fix: add more properties required to be enumerable - 1988878\\n> \\n> Chores / Build:\\n> - fix: use !== 0 instead of != 0 - c02b05f\\n> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, \\n>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0\\n> \\n> Security:\\n> \\n> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` \\n>   have been added to the list of \\"properties that must be enumerable\\".\\n>   If a property by that name is found and not enumerable on its parent, \\n>   it will silently evaluate to `undefined`. This is done in both the compiled template and the \\"lookup\\"-helper. \\n>   This will prevent new Remote-Code-Execution exploits that have been\\n>   published recently.\\n> \\n> Compatibility notes: \\n> \\n> - Due to the security-fixes. The semantics of the templates using\\n>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return \\n>   `undefined` rather than their actual value from the proto.\\n> - The semantics have not changed in cases where the properties are  enumerable, as in:\\n> \\n> ```js\\n> {\\n>   __proto__: \'some string\'\\n> }\\n> ```\\n> \\n> - The change may be breaking in that respect, but we still only \\n>   increase the patch-version, because the incompatible use-cases\\n>   are not intended, undocumented and far less important than fixing\\n>   Remote-Code-Execution exploits on existing systems.\\n> \\n> \\n> \\n> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)\\n> \\n> ## v4.5.2 - November 13th, 2019\\n> # Bugfixes\\n> \\n> - fix: use String(field) in lookup when checking for \\"constructor\\" - d541378\\n> - test: add fluent API for testing Handlebars - c2ac79c\\n> \\n> Compatibility notes:\\n> - no incompatibility are to be expected\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3\\n- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes\\n- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences\\n- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable\\n- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to \\"runtime\\"-environment\\n- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs\\n- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions\\n- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions\\n- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0\\n- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2\\n- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.5.3)\\n</details>\\n<details>\\n<summary>Maintainer changes</summary>\\n\\nThis version was pushed to npm by [knappi](https://www.npmjs.com/~knappi), a new releaser for handlebars since your current version.\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.6&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)\\n\\nDependabot will resolve any conflicts with this PR as long as you don\'t alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n\\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\\n\\n</details>","number":17731,"user":{"login":"dependabot[bot]"},"state":"closed","created_at":"2019-12-28T17:46:57Z"},{"id":543260990,"title":"Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/dom","body":"Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.5.3.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [handlebars\'s changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*\\n\\n> ## v4.5.3 - November 18th, 2019\\n> Bugfixes:\\n> \\n> - fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences - f7f05d7\\n> - fix: add more properties required to be enumerable - 1988878\\n> \\n> Chores / Build:\\n> - fix: use !== 0 instead of != 0 - c02b05f\\n> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, \\n>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0\\n> \\n> Security:\\n> \\n> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` \\n>   have been added to the list of \\"properties that must be enumerable\\".\\n>   If a property by that name is found and not enumerable on its parent, \\n>   it will silently evaluate to `undefined`. This is done in both the compiled template and the \\"lookup\\"-helper. \\n>   This will prevent new Remote-Code-Execution exploits that have been\\n>   published recently.\\n> \\n> Compatibility notes: \\n> \\n> - Due to the security-fixes. The semantics of the templates using\\n>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return \\n>   `undefined` rather than their actual value from the proto.\\n> - The semantics have not changed in cases where the properties are  enumerable, as in:\\n> \\n> ```js\\n> {\\n>   __proto__: \'some string\'\\n> }\\n> ```\\n> \\n> - The change may be breaking in that respect, but we still only \\n>   increase the patch-version, because the incompatible use-cases\\n>   are not intended, undocumented and far less important than fixing\\n>   Remote-Code-Execution exploits on existing systems.\\n> \\n> \\n> \\n> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)\\n> \\n> ## v4.5.2 - November 13th, 2019\\n> # Bugfixes\\n> \\n> - fix: use String(field) in lookup when checking for \\"constructor\\" - d541378\\n> - test: add fluent API for testing Handlebars - c2ac79c\\n> \\n> Compatibility notes:\\n> - no incompatibility are to be expected\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3\\n- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes\\n- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences\\n- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable\\n- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to \\"runtime\\"-environment\\n- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs\\n- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions\\n- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions\\n- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0\\n- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2\\n- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.5.3)\\n</details>\\n<details>\\n<summary>Maintainer changes</summary>\\n\\nThis version was pushed to npm by [knappi](https://www.npmjs.com/~knappi), a new releaser for handlebars since your current version.\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.6&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)\\n\\nDependabot will resolve any conflicts with this PR as long as you don\'t alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n\\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\\n\\n</details>","number":17730,"user":{"login":"dependabot[bot]"},"state":"closed","created_at":"2019-12-28T17:46:51Z"},{"id":543260947,"title":"Bump handlebars from 4.0.11 to 4.5.3 in /fixtures/expiration","body":"Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.11 to 4.5.3.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [handlebars\'s changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*\\n\\n> ## v4.5.3 - November 18th, 2019\\n> Bugfixes:\\n> \\n> - fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences - f7f05d7\\n> - fix: add more properties required to be enumerable - 1988878\\n> \\n> Chores / Build:\\n> - fix: use !== 0 instead of != 0 - c02b05f\\n> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, \\n>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0\\n> \\n> Security:\\n> \\n> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` \\n>   have been added to the list of \\"properties that must be enumerable\\".\\n>   If a property by that name is found and not enumerable on its parent, \\n>   it will silently evaluate to `undefined`. This is done in both the compiled template and the \\"lookup\\"-helper. \\n>   This will prevent new Remote-Code-Execution exploits that have been\\n>   published recently.\\n> \\n> Compatibility notes: \\n> \\n> - Due to the security-fixes. The semantics of the templates using\\n>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return \\n>   `undefined` rather than their actual value from the proto.\\n> - The semantics have not changed in cases where the properties are  enumerable, as in:\\n> \\n> ```js\\n> {\\n>   __proto__: \'some string\'\\n> }\\n> ```\\n> \\n> - The change may be breaking in that respect, but we still only \\n>   increase the patch-version, because the incompatible use-cases\\n>   are not intended, undocumented and far less important than fixing\\n>   Remote-Code-Execution exploits on existing systems.\\n> \\n> \\n> \\n> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)\\n> \\n> ## v4.5.2 - November 13th, 2019\\n> # Bugfixes\\n> \\n> - fix: use String(field) in lookup when checking for \\"constructor\\" - d541378\\n> - test: add fluent API for testing Handlebars - c2ac79c\\n> \\n> Compatibility notes:\\n> - no incompatibility are to be expected\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3\\n- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes\\n- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences\\n- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable\\n- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to \\"runtime\\"-environment\\n- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs\\n- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions\\n- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions\\n- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0\\n- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2\\n- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.11...v4.5.3)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.11&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)\\n\\nDependabot will resolve any conflicts with this PR as long as you don\'t alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n\\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\\n\\n</details>","number":17729,"user":{"login":"dependabot[bot]"},"state":"closed","created_at":"2019-12-28T17:46:45Z"},{"id":543260937,"title":"Bump handlebars from 4.0.10 to 4.5.3 in /fixtures/attribute-behavior","body":"Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.10 to 4.5.3.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [handlebars\'s changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*\\n\\n> ## v4.5.3 - November 18th, 2019\\n> Bugfixes:\\n> \\n> - fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences - f7f05d7\\n> - fix: add more properties required to be enumerable - 1988878\\n> \\n> Chores / Build:\\n> - fix: use !== 0 instead of != 0 - c02b05f\\n> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, \\n>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0\\n> \\n> Security:\\n> \\n> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` \\n>   have been added to the list of \\"properties that must be enumerable\\".\\n>   If a property by that name is found and not enumerable on its parent, \\n>   it will silently evaluate to `undefined`. This is done in both the compiled template and the \\"lookup\\"-helper. \\n>   This will prevent new Remote-Code-Execution exploits that have been\\n>   published recently.\\n> \\n> Compatibility notes: \\n> \\n> - Due to the security-fixes. The semantics of the templates using\\n>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return \\n>   `undefined` rather than their actual value from the proto.\\n> - The semantics have not changed in cases where the properties are  enumerable, as in:\\n> \\n> ```js\\n> {\\n>   __proto__: \'some string\'\\n> }\\n> ```\\n> \\n> - The change may be breaking in that respect, but we still only \\n>   increase the patch-version, because the incompatible use-cases\\n>   are not intended, undocumented and far less important than fixing\\n>   Remote-Code-Execution exploits on existing systems.\\n> \\n> \\n> \\n> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)\\n> \\n> ## v4.5.2 - November 13th, 2019\\n> # Bugfixes\\n> \\n> - fix: use String(field) in lookup when checking for \\"constructor\\" - d541378\\n> - test: add fluent API for testing Handlebars - c2ac79c\\n> \\n> Compatibility notes:\\n> - no incompatibility are to be expected\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3\\n- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes\\n- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences\\n- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable\\n- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to \\"runtime\\"-environment\\n- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs\\n- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions\\n- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions\\n- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0\\n- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2\\n- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.10...v4.5.3)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.10&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)\\n\\nDependabot will resolve any conflicts with this PR as long as you don\'t alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n\\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\\n\\n</details>","number":17728,"user":{"login":"dependabot[bot]"},"state":"closed","created_at":"2019-12-28T17:46:44Z"},{"id":543260887,"title":"Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/fiber-debugger","body":"Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.5.3.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [handlebars\'s changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*\\n\\n> ## v4.5.3 - November 18th, 2019\\n> Bugfixes:\\n> \\n> - fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences - f7f05d7\\n> - fix: add more properties required to be enumerable - 1988878\\n> \\n> Chores / Build:\\n> - fix: use !== 0 instead of != 0 - c02b05f\\n> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, \\n>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0\\n> \\n> Security:\\n> \\n> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` \\n>   have been added to the list of \\"properties that must be enumerable\\".\\n>   If a property by that name is found and not enumerable on its parent, \\n>   it will silently evaluate to `undefined`. This is done in both the compiled template and the \\"lookup\\"-helper. \\n>   This will prevent new Remote-Code-Execution exploits that have been\\n>   published recently.\\n> \\n> Compatibility notes: \\n> \\n> - Due to the security-fixes. The semantics of the templates using\\n>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return \\n>   `undefined` rather than their actual value from the proto.\\n> - The semantics have not changed in cases where the properties are  enumerable, as in:\\n> \\n> ```js\\n> {\\n>   __proto__: \'some string\'\\n> }\\n> ```\\n> \\n> - The change may be breaking in that respect, but we still only \\n>   increase the patch-version, because the incompatible use-cases\\n>   are not intended, undocumented and far less important than fixing\\n>   Remote-Code-Execution exploits on existing systems.\\n> \\n> \\n> \\n> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)\\n> \\n> ## v4.5.2 - November 13th, 2019\\n> # Bugfixes\\n> \\n> - fix: use String(field) in lookup when checking for \\"constructor\\" - d541378\\n> - test: add fluent API for testing Handlebars - c2ac79c\\n> \\n> Compatibility notes:\\n> - no incompatibility are to be expected\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3\\n- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes\\n- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add \\"no-prototype-builtins\\" eslint-rule and fix all occurences\\n- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable\\n- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to \\"runtime\\"-environment\\n- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs\\n- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions\\n- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions\\n- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0\\n- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2\\n- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.5.3)\\n</details>\\n<details>\\n<summary>Maintainer changes</summary>\\n\\nThis version was pushed to npm by [knappi](https://www.npmjs.com/~knappi), a new releaser for handlebars since your current version.\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.6&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)\\n\\nDependabot will resolve any conflicts with this PR as long as you don\'t alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n\\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\\n\\n</details>","number":17727,"user":{"login":"dependabot[bot]"},"state":"closed","created_at":"2019-12-28T17:46:36Z"},{"id":543201900,"title":"TypeScript Linting Issues With \'react-test-renderer/shallow\'","body":"First of all, I don\'t know why this project on npm points to this repo, but that\'s pretty sloppy...\\r\\n\\r\\nAnyway, I am using reanct-test-renderer\'s shallow rendering like so:\\r\\n```\\r\\nimport ShallowRenderer from \'react-test-renderer/shallow\';\\r\\n\\r\\ndescribe(\'LoginSection\', () => {\\r\\n\\r\\n    describe(\'Passing props to LoginBtn Child\', () => {\\r\\n\\r\\n        it(\'should pass \\"false\\" to LoginBtn when given no props.\', () => {\\r\\n\\r\\n            const shallowRenderer = new ShallowRenderer();\\r\\n            shallowRenderer.render(<LoginSection />);\\r\\n            const shallowResult = shallowRenderer.getRenderOutput();\\r\\n\\r\\n            expect(shallowResult.props.children).toContainEqual(\\r\\n                <LoginBtn currentlyLoggedIn={false} />,\\r\\n            );\\r\\n\\r\\n        });\\r\\n    });\\r\\n});\\r\\n```\\r\\n\\r\\nThis test passes, but I\'m getting linting errors on the import statement gives me an error message, `Could not find a declaration file for module \'react-test-renderer/shallow\'. \'/Users/jim/..../node_modules/react-test-renderer/shallow.js\' implicitly has an \'any\' type.\\r\\n  Try `npm install @types/react-test-renderer` if it exists or add a new declaration (.d.t`\\r\\n\\r\\nOnce I install the types package `npm install @types/react-test-renderer` then that linting error goes away, but then there is a new linting error underlining `new ShallowRenderer()` with the message, `This expression is not constructable.\\r\\n  Type \'typeof import(\\"/Users/jim/....../node_modules/@types/react-test-renderer/shallow/index\\")\' has no construct signatures.`\\r\\n\\r\\nAnd this is where I am stuck... \ud83e\udd14 ","number":17726,"user":{"login":"JimLynchCodes"},"state":"closed","created_at":"2019-12-28T15:06:58Z"},{"id":543093921,"title":"The components tab don\'t show up in Chrome DevTools panel","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe react components tab never shows up in my Chrome DevTools panel, even the React DevTools extension report that it detects React on the current page. (Sometimes it even don\'t report it at all)\\r\\n\\r\\nWhen I use preact and the provided React DevTools connector `preact/debug`, the extension reports that the page is using a development build of React.\\r\\n\\r\\nWhen I uses React directly, the React DevTools don\'t report anything at all.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:** [an github repo](https://github.com/KsRyY/MyLittlePony)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe components tab will show up in the Chrome DevTools panel\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Preact X, compatible with the current latest version of React. (I also tested it with the current version of React)\\r\\n","number":17725,"user":{"login":"KsRyY"},"state":"closed","created_at":"2019-12-28T08:16:30Z"},{"id":542941790,"title":"Fix various typos","body":"I came across a few typos in test fixtures and comments while experimenting with a source code spell checker. Apart from these, there don\'t appear to be other typos in fixtures/ or scripts/, so kudos :)","number":17724,"user":{"login":"iamkaransharma"},"state":"closed","created_at":"2019-12-27T17:32:52Z"},{"id":542804579,"title":"Function passed as parameter and saved in Context API store takes old store from Context API","body":"When I get 401 status code from backend I run refreshToken method with passing the function where expired token occurred. In refreshToken method I get new token and set in refreshTokenLastFunc property function from parameter.\\r\\n\\r\\nThen I watch when refreshTokenLastFunc was updated using React useEffect and run once again the function where expired token occurred.\\r\\n\\r\\nThe problem is while I run store.refreshTokenLastFunc() in useEffect, the function in refreshTokenLastFunc property uses old Context API store(so it uses old token not the new one). You can read my comment in useEffect for store.refreshTokenLastFunc.\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI don\'t actually know if it is a React bug or I don\'t understand JS properly\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf I ran **store.refreshTokenLastFunc**  function in useEffect it takes old store, not the new one\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI want **store.refreshTokenLastFunc**  function to run with new store, because store was modified before this function run\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact verison: 16.12.0\\r\\nBrowser: Google Chrome: 79\\r\\n\\r\\nMy code:\\r\\n```js\\r\\nexport const StoreProvider = props => {\\r\\n  const getToken = () => localStorage.getItem(\\"token\\");\\r\\n\\r\\n  const initState = () => ({\\r\\n    token: getToken(),\\r\\n    isAuth: false,\\r\\n    userRole: \\"old role\\",\\r\\n    mainUrl: MainUrl,\\r\\n    apiUrl: ApiUrl,\\r\\n    refreshTokenLastFunc: () => {}\\r\\n  });\\r\\n\\r\\n  const [store, setStore] = useState(initState());\\r\\n\\r\\n  const getUserInfo = async () => {\\r\\n    if (getToken()) {\\r\\n      try {\\r\\n        const apiConfig = {\\r\\n          method: \\"GET\\",\\r\\n          headers: {\\r\\n            \\"Content-Type\\": \\"application/json\\",\\r\\n            Authorization: `Bearer ${store.token}`\\r\\n          }\\r\\n        };\\r\\n\\r\\n        const response = await fetch(`${store.apiUrl}get-me`, apiConfig);\\r\\n        const responseJson = await response.json();\\r\\n\\r\\n        if (response.ok) {\\r\\n          // Update Context API\\r\\n          setStore({\\r\\n            ...store,\\r\\n            userRole: responseJson.role,\\r\\n            userName: responseJson.name,\\r\\n            userGroupId: responseJson.group_id,\\r\\n            isAuth: true\\r\\n          });\\r\\n        } else if (response.status === 401) {\\r\\n          refreshToken(getUserInfo);\\r\\n        } else {\\r\\n          throw new Error(`Some error occurred`);\\r\\n        }\\r\\n      } catch (error) {\\r\\n        console.log(error);\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const refreshToken = async func => {\\r\\n    try {\\r\\n      const apiConfig = {\\r\\n        method: \\"GET\\",\\r\\n        headers: {\\r\\n          Accept: \\"application/json\\",\\r\\n          Authorization: `Bearer ${store.token}`\\r\\n        }\\r\\n      };\\r\\n\\r\\n      const response = await fetch(`${store.mainUrl}refresh-token`, apiConfig);\\r\\n      const responseJson = await response.json();\\r\\n\\r\\n      if (response.ok) {\\r\\n        // Update token in local storage\\r\\n        localStorage.setItem(\\"token\\", responseJson.token);\\r\\n        // Update Context API\\r\\n        setStore({\\r\\n          ...store,\\r\\n          userRole: \\"new role\\",\\r\\n          token: responseJson.token,\\r\\n          refreshTokenLastFunc: func\\r\\n        });\\r\\n      } else {\\r\\n        throw new Error(`Some error...`);\\r\\n      }\\r\\n    } catch (error) {\\r\\n      throw error;\\r\\n    }\\r\\n  };\\r\\n\\r\\n  useEffect(() => {\\r\\n    getUserInfo();\\r\\n  }, []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    // If I console log my store before calling function, store is correctly updated, but the function uses old store.\\r\\n    console.log(\\"store from useEffect: \\", store); // store.userRole = \'new role\' which is correct\\r\\n    store.refreshTokenLastFunc(); // store.userRole = \'old role\' which should be \'new role\'\\r\\n  }, [store.refreshTokenLastFunc]);\\r\\n\\r\\n  return (\\r\\n    <StoreContext.Provider value={[store, setStore, logout, getUserInfo]}>\\r\\n      {props.children}\\r\\n    </StoreContext.Provider>\\r\\n  );\\r\\n};\\r\\n```","number":17723,"user":{"login":"Ghost180195"},"state":"closed","created_at":"2019-12-27T09:06:55Z"},{"id":542776109,"title":"Use React.cloneElement return undefine","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nmaybe a bug\\r\\n**What is the current behavior?**\\r\\n\\r\\nI use React.cloneElement to render router components and transfer `props` to them.\\r\\nBut in router page, this.props members such as interval is `undefine`.\\r\\n\\r\\n```\\r\\nconst reactPropsChildren = React.Children.map(this.props.children, child =>\\r\\n            React.cloneElement(\\r\\n                child as React.ReactElement<any>, {\\r\\n                interval,\\r\\n                columnList, changeColumn: this.changeColumn,\\r\\n                experimentUpdateBroadcast,\\r\\n                trialsUpdateBroadcast,\\r\\n                metricGraphMode, changeMetricGraphMode: this.changeMetricGraphMode\\r\\n            })\\r\\n        );\\r\\n```\\r\\n\\r\\nmy router file is:\\r\\n```\\r\\n<BrowserRouter>\\r\\n      <Switch>\\r\\n        <App>\\r\\n          <Route path=\\"/oview\\" component={Overview} ></Route>\\r\\n          <Route path=\\"/detail\\" component={TrialsDetail}></Route>\\r\\n          <Redirect to=\\"/oview\\" />\\r\\n        </App>\\r\\n      </Switch>\\r\\n    </BrowserRouter>\\r\\n```\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nthis.props members are not undefine.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```\\r\\n\\"react-router-dom\\": \\"^5.1.2\\",\\r\\n\\"react\\": \\"^16.8.6\\",\\r\\n\\"react-dom\\": \\"^16.8.6\\",\\r\\n\\"@types/react\\": \\"16.4.17\\",\\r\\n```\\r\\n","number":17722,"user":{"login":"lvybriage"},"state":"closed","created_at":"2019-12-27T07:15:46Z"},{"id":542733259,"title":"Merge pull request #1 from facebook/master","body":"merge master\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17721,"user":{"login":"petsgre"},"state":"closed","created_at":"2019-12-27T03:51:36Z"},{"id":542684077,"title":"What is the motivation to have `useEffect` dependency as an array as opposed to object?","body":"This is not an issue/bug. This is more my curiosity to understand the design decision to have `useEffect`, `useCallback` and `useMemo` dependencies as an array instead of an object.\\r\\n\\r\\nEg.\\r\\n\\r\\n```\\r\\nuseEffect(\\r\\n  () => {\\r\\n    // do something with deps\\r\\n    return () => {\\r\\n      // cleanup\\r\\n    };\\r\\n  },\\r\\n  [a, b],\\r\\n);\\r\\n\\r\\n```\\r\\n\\r\\nWhat is the idea behind dependencies `[a, b]` being an array. Is there any specific reason for why it\'s not an object `{ a: a, b: b }`?\\r\\n\\r\\nAccessing objects by their key is arguably faster than iterating and accessing arrays by their index but we\'d need to store and retrieve them in an efficient way for this argument to be valid. Is it just a matter of convenience to keep things simple or is there a perf reason behind the decision?\\r\\n\\r\\nWhat adds to my curiosity is that props passed to components is an object and not an array. \\r\\n\\r\\n```\\r\\nReact.createElement(Comp, { a: \'a\', b: \'b\' }, null)\\r\\n```\\r\\n\\r\\nHere, the props could have been `[a, b]` but the downside is that users should consume the props in JSX in the right array order.\\r\\n\\r\\nI see both of them as dependencies to invoke the function again when dependencies change and would like to understand the reasoning behind using array in one place and object in the other.","number":17720,"user":{"login":"flexdinesh"},"state":"closed","created_at":"2019-12-26T22:24:16Z"},{"id":542645070,"title":"[DevTools] Cannot type into search box in Firefox when browser find-as-you-type setting enabled","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n1. Enable Firefox Preferences > Browsing > Search for text when you start typing\\r\\n<img width=\\"455\\" alt=\\"Screen Shot 2019-12-26 at 10 56 15 AM\\" src=\\"https://user-images.githubusercontent.com/157270/71487107-65a0ba80-27ce-11ea-967c-4e9271ae4c22.png\\">\\r\\n1. Open React Devtools\\r\\n1. Note that you can paste text into the search box, but keyboard input will not show any input\\r\\n1. Disable above setting\\r\\n1. Note that Devtools search accepts keyboard input\\r\\n\\r\\n**What is the expected behavior?**\\r\\n1. Components search works regardless of find-as-you-type setting\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nFirefox 72.0b10 on macOS 10.14.6\\r\\nDevtools 4.3.0","number":17719,"user":{"login":"swrobel"},"state":"open","created_at":"2019-12-26T18:58:57Z"},{"id":542580844,"title":"[TypeScript]Is there any way to define the state variables when using functional component? ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\nIf there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17718,"user":{"login":"luffywuliao"},"state":"closed","created_at":"2019-12-26T15:11:03Z"},{"id":542470018,"title":"why not the useMemo memory Multiple value","body":"```jsx\\r\\n  const [value, valueSetState] = useState(0)\\r\\n  const obj ={}\\r\\n  const valueMemo = useMemo(() => obj, [value])\\r\\n  if (!window.array) window.array = []\\r\\n  window.array.push(valueMemo)\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => valueSetState(1)}>A</button>\\r\\n      <button onClick={() => valueSetState(2)}>B</button>\\r\\n      <button onClick={() => valueSetState(1)}>C</button>\\r\\n    </>\\r\\n  )\\r\\nfunction someExpensive(arg){\\r\\n//do some expensive with arg\\r\\nreturn {}\\r\\n}\\r\\n```\\r\\nafter we click A,B,C button\\r\\ni think window.array[1] === window.array[3] is true, but now is false\\r\\n","number":17717,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-12-26T07:48:38Z"},{"id":542456434,"title":"Unknown priority level","body":"I am trying to integrate react cdn in my existing project but when I am trying to use useEffect hooks it\'s given me an error:\\r\\n\\r\\nUncaught Error: Unknown priority level.\\r\\n    at reactPriorityToSchedulerPriority (react-dom-min.js:12286)\\r\\n    at runWithPriority$2 (react-dom-min.js:12294)\\r\\n    at flushPassiveEffects (react-dom-min.js:25507)\\r\\n    at react-dom-min.js:25386\\r\\n    at workLoop (react.min.js:2919)\\r\\n    at flushWork (react.min.js:2874)\\r\\n    at MessagePort.performWorkUntilDeadline (react.min.js:2481)","number":17716,"user":{"login":"mohamedshahid"},"state":"closed","created_at":"2019-12-26T06:56:28Z"},{"id":542455782,"title":"Error: \\"Could not find node with id \\"6\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17715,"user":{"login":"meet-panchal"},"state":"closed","created_at":"2019-12-26T06:53:33Z"},{"id":542391947,"title":"Error: \\"Could not find node with id \\"72\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17714,"user":{"login":"youhosi"},"state":"closed","created_at":"2019-12-25T22:49:08Z"},{"id":542357067,"title":"Try to mock didMount with useEffect, but keep getting weird warning (20 line codesandbox inside)","body":"**Current behavior**\\r\\n\\r\\nWe are supposed to do\\r\\n```js\\r\\nuseEffect(()=> {\\r\\n   loadData()\\r\\n}, [])\\r\\n```\\r\\nto mock the behavior of `didMount` life cycle. But this keeps giving me warning:\\r\\n```\\r\\nReact Hook useEffect has a missing dependency: \'loadData\'. Either include it or remove the dependency array.\\r\\n```\\r\\nWhich doesn\'t make any sense, and if I follow it, more warnings to come. This is so confusing to say the least.\\r\\n\\r\\nHere\'s the codesandbox demo, https://codesandbox.io/s/gracious-feather-neddw\\r\\nand the warning is on line 12.\\r\\n\\r\\nEdit: I read the whole https://reactjs.org/docs/hooks-faq.html#performance-optimizations part, and understand what causes the warning. But I can\'t move the function inside because it is used else where, and I absolutely needed loadList to run just once, so adding more dependencies to the [] is not a solution for me. Or any of the solution provided in the doc.\\r\\n\\r\\n[] basically means it runs only once, like in didMount, why having props & state inside it will be considered unsafe?\\r\\n```js\\r\\nfunction Example({ someProp }) {\\r\\n  function doSomething() {\\r\\n    console.log(someProp);\\r\\n  }\\r\\n\\r\\n  useEffect(() => {\\r\\n    doSomething();\\r\\n  }, []); // \ud83d\udd34 This is not safe (it calls `doSomething` which uses `someProp`)\\r\\n}\\r\\n```\\r\\n\\r\\n**The bottom line is, if I do this in class component / didMount, it will absolutely work(and safe). But in function component / useEffect, why do we have to try so hard? Is there a design problem?**\\r\\n","number":17713,"user":{"login":"FateRiddle"},"state":"closed","created_at":"2019-12-25T15:28:52Z"},{"id":542337765,"title":"Props, hooks, and re-rendering","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature.\\r\\n\\r\\n**What is the current behavior?**\\r\\nAs discussed in #14830, once a prop is passed through the `useState` hook, it no longer acts on updates to that prop from the parent.  The user must always pair the `useState` call with a `useEffect` call to restore the normal prop behaviour.\\r\\n\\r\\n**What is the desired behavior?**\\r\\nThis is a common enough pattern that it might be worth adding a specific hook for this situation.  Is that something your team would be up for?\\r\\n\\r\\nThis is the custom hook I\'ve been using for this purpose:\\r\\n```\\r\\nimport React, { useState, useEffect } from \\"react\\";\\r\\n\\r\\nfunction useDynamicProp(propFromParent) {\\r\\n  const [propFromState, setProp] = useState(propFromParent);\\r\\n\\r\\n  useEffect(() => {\\r\\n    setProp(propFromParent);\\r\\n  }, [propFromParent]);\\r\\n\\r\\n  return [propFromState, setProp];\\r\\n}\\r\\n\\r\\nexport { useDynamicProp };\\r\\n```\\r\\n\\r\\n**Which versions of React?**\\r\\n16.12.0","number":17712,"user":{"login":"elliotcm"},"state":"closed","created_at":"2019-12-25T12:59:19Z"},{"id":542272104,"title":" Duplicate identifier \'LibraryManagedAttributes","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nerror message: \\r\\n`/node_modules/@types/react-router/node_modules/@types/react/index.d.ts(2314,14):\\r\\nTS2300: Duplicate identifier \'LibraryManagedAttributes\'.`\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\u6b63\u5e38\u7f16\u8bd1\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\npackage.json:\\r\\n`\\"react\\": \\"^16.8.6\\",`\\r\\n`\\"@types/react\\": \\"^16.8.6\\",`\\r\\n\\r\\n\\r\\nyarn.lock file:\\r\\n`\\"@types/react@^16.8.6\\":\\r\\n  version \\"16.9.17\\"\\r\\n  resolved \\"https://registry.yarnpkg.com/@types/react/-/react-16.9.17.tgz#58f0cc0e9ec2425d1441dd7b623421a867aa253e\\"\\r\\n  integrity sha512-UP27In4fp4sWF5JgyV6pwVPAQM83Fj76JOcg02X5BZcpSu5Wx+fP9RMqc2v0ssBoQIFvD5JdKY41gjJJKmw6Bg==\\r\\n  dependencies:\\r\\n    \\"@types/prop-types\\" \\"*\\"\\r\\n    csstype \\"^2.2.0\\"`","number":17711,"user":{"login":"lvybriage"},"state":"closed","created_at":"2019-12-25T06:49:51Z"},{"id":542234508,"title":"How can i change react umd version  in node_modules? ","body":"i saw react package have `cjs` and `umd` folder\\r\\nand `index.js` in react output `cjs` version \\r\\n\\r\\nso if i want to use `umd` how can i change?\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/20965813/71428891-b0eb9800-26fe-11ea-8887-691e69203855.png)\\r\\n","number":17710,"user":{"login":"Louis-Chen"},"state":"closed","created_at":"2019-12-25T02:09:17Z"},{"id":542217685,"title":"[strict mode] Disposed dispatch affecting other instance","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nDisposed `dispatch`/`setState` (from not committed component) is affecting another instance (the committed one). Actually, maybe my reasoning is wrong here - and you don\'t actually dispose of the first one, but rather only \\"clear its memory cells\\" (state and refs)? Conceptually it looks like disposing (and from what I understand it mimics exactly this in StrictMode - so we can catch bugs early).\\r\\n\\r\\n**Repro case**\\r\\n\\r\\nhttps://codesandbox.io/s/peaceful-meadow-wg42k\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect to receive a warning from React about using disposed dispatch.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThe current version, also tested a few of previous versions - all were affected.\\r\\n","number":17709,"user":{"login":"Andarist"},"state":"closed","created_at":"2019-12-24T22:42:25Z"},{"id":542207857,"title":"Don\'t add top-level events for uncontrolled inputs","body":"The document-wide handlers for native events that perform synthetic event dispatch execute in 0.2-0.7 milliseconds on my machine. I realize this doesn\'t seem like much time, but we\'re really trying to shave off any non-essential source of latency for typing and cursor movement in Atom, and every little bit helps. Disabling synthetic events on keydown and textinput is saving about 1ms of latency for a keystroke.\\r\\n\\r\\nIn our fork, I\'ve added the ability to add a reactSkipEventDispatch property to the native event to opt out of synthetic dispatch, but I\'d be interested in a more official mechanism for opting out of this feature for certain event types. Even better, perhaps React could maintain a cache of what event types are actually being listened for and bail out as soon as possible if handling an event.","number":17706,"user":{"login":"CG-Stack"},"state":"closed","created_at":"2019-12-24T20:52:02Z"},{"id":542207667,"title":"React Js Context Api(invariant violation) element type is invalid","body":"Am trying to setup Context Api for my project but i get an error that i cannot wrap my head around, i have two files one for the data context,\\r\\ncreateDataContext is the name of the file\\r\\nimport React, {useReducer} from \'react\';\\r\\n\\r\\nexport default (reducer, actions, defaultValue) => {\\r\\n\\r\\nconst Context = React.createContext();\\r\\nconst Provider = ({children}) => {\\r\\n    const [state, dispatch] = useReducer(reducer, defaultValue);\\r\\n\\r\\nconst boundActions = {};\\r\\nfor (let key in actions){\\r\\n    boundActions [key] = actions[key](dispatch);\\r\\n}\\r\\nreturn(\\r\\n    <Context.Provider value={{state, ...boundActions}}>\\r\\n        { children }\\r\\n    </Context.Provider>\\r\\n);\\r\\n};\\r\\nreturn(Context, Provider);\\r\\n};\\r\\n\\r\\nAuthContext js file\\r\\nimport createDataContext from \'./createDataContext\';\\r\\n\\r\\nconst authReducer = (state, action) => {\\r\\nswitch(action.type){\\r\\ndefault:\\r\\nreturn state;\\r\\n}\\r\\n};\\r\\nexport const {Provider, Context} = createDataContext(\\r\\nauthReducer,\\r\\n{},\\r\\n{ isSignedIn: false }\\r\\n);\\r\\n\\r\\nAnd the Consumer App which has a switch navigator\\r\\nApp.js\\r\\nimport React from \'react\';\\r\\nimport {createAppContainer, createSwitchNavigator} from \'react-navigation\';\\r\\nimport {createStackNavigator} from \'react-navigation-stack\';\\r\\nimport { createDrawerNavigator } from \'react-navigation-drawer\';\\r\\nimport Login from \'./src/screens/Login\';\\r\\nimport Register from \'./src/screens/Register\';\\r\\nimport Account from \'./src/screens/Account\';\\r\\nimport Earnings from \'./src/screens/Earnings\';\\r\\nimport Scheduledrides from \'./src/screens/Scheduledrides\';\\r\\nimport Home from \'./src/screens/Home\';\\r\\nimport {Provider } from \'./src/Context/AuthContext\';\\r\\n\\r\\nconst Screens = createSwitchNavigator({\\r\\nloginFlow: createStackNavigator({\\r\\nLogin: Login,\\r\\nRegister:Register,\\r\\n}),\\r\\n\\r\\nmainFlow: createDrawerNavigator({\\r\\nHome: Home,\\r\\nAccount: Account,\\r\\nEarnings: Earnings,\\r\\nScheduledrides: Scheduledrides,\\r\\n}),\\r\\n\\r\\n});\\r\\nconst App = createAppContainer(Screens);\\r\\n\\r\\nexport default () => {\\r\\nreturn(\\r\\n\\r\\n\\r\\n\\r\\n);\\r\\n};\\r\\nBelow is the error i get, thanks in advance","number":17705,"user":{"login":"CG-Stack"},"state":"closed","created_at":"2019-12-24T20:50:07Z"},{"id":542155180,"title":"Revert","body":"Revert","number":17704,"user":{"login":"CG-Stack"},"state":"closed","created_at":"2019-12-24T15:11:41Z"},{"id":542136071,"title":"chore: Refactor DangerJS","body":"- Removing unnecessary `else`\\r\\n- Create aux function to check experimental release channel\\r\\n- Import space","number":17703,"user":{"login":"gabrielferreiraa"},"state":"open","created_at":"2019-12-24T13:52:43Z"},{"id":542047243,"title":"React Js Context Api(invariant violation) element type is invalid","body":"Am trying to setup Context Api for my project but i get an error that i cannot wrap my head around, i have two files one for the data context,\\r\\ncreateDataContext is the name of the file\\r\\nimport React, {useReducer} from \'react\';\\r\\n\\r\\n\\r\\nexport default (reducer, actions, defaultValue) => {\\r\\n\\r\\n    const Context = React.createContext();\\r\\n    const Provider = ({children}) => {\\r\\n        const [state, dispatch] = useReducer(reducer, defaultValue);\\r\\n   \\r\\n    const boundActions = {};\\r\\n    for (let key in actions){\\r\\n        boundActions [key] = actions[key](dispatch);\\r\\n    }\\r\\n    return(\\r\\n        <Context.Provider value={{state, ...boundActions}}>\\r\\n            { children }\\r\\n        </Context.Provider>\\r\\n    );\\r\\n};\\r\\nreturn(Context, Provider);\\r\\n};\\r\\n\\r\\nAuthContext js file\\r\\nimport createDataContext from \'./createDataContext\';\\r\\n\\r\\nconst authReducer = (state, action) => {\\r\\n    switch(action.type){\\r\\n        default:\\r\\n            return state;\\r\\n    }\\r\\n};\\r\\nexport const {Provider, Context} = createDataContext(\\r\\n    authReducer,\\r\\n    {},\\r\\n    { isSignedIn: false }\\r\\n);\\r\\n\\r\\nAnd the Consumer App which has a switch navigator\\r\\nApp.js\\r\\nimport React from \'react\';\\r\\nimport {createAppContainer, createSwitchNavigator} from \'react-navigation\';\\r\\nimport {createStackNavigator} from \'react-navigation-stack\';\\r\\nimport { createDrawerNavigator } from \'react-navigation-drawer\';\\r\\nimport Login from \'./src/screens/Login\';\\r\\nimport Register from \'./src/screens/Register\';\\r\\nimport Account from \'./src/screens/Account\';\\r\\nimport  Earnings from \'./src/screens/Earnings\';\\r\\nimport Scheduledrides from \'./src/screens/Scheduledrides\';\\r\\nimport Home from \'./src/screens/Home\';\\r\\nimport {Provider } from \'./src/Context/AuthContext\';\\r\\n\\r\\n\\r\\n\\r\\nconst Screens = createSwitchNavigator({\\r\\n  loginFlow: createStackNavigator({\\r\\n    Login: Login,\\r\\n    Register:Register,\\r\\n  }),\\r\\n\\r\\n  mainFlow: createDrawerNavigator({\\r\\n    Home: Home,\\r\\n    Account: Account,\\r\\n    Earnings: Earnings,\\r\\n    Scheduledrides:  Scheduledrides,   \\r\\n  }),\\r\\n  \\r\\n\\r\\n});\\r\\n const App =  createAppContainer(Screens);\\r\\n\\r\\n \\r\\n export default () => {\\r\\n  return(\\r\\n    <Provider >\\r\\n      <App />\\r\\n    </Provider>\\r\\n  );\\r\\n};\\r\\nBelow is the error i get, thanks in advance\\r\\n![Capture](https://user-images.githubusercontent.com/23630466/71403903-3a896000-2642-11ea-9956-87ed7c3efa0c.PNG)\\r\\n \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":17702,"user":{"login":"16isaac89"},"state":"closed","created_at":"2019-12-24T08:42:27Z"},{"id":542033652,"title":"getDerivedStateFromProps is executed after setState #13015","body":"Ideally getDerivedStateFromProps  should not be called due to current component\'s setState. But it is behaving so. Can someone explain?\\r\\n\\r\\nCouldn\'t find solution in [#13015](https://github.com/facebook/react/issues/13015)","number":17701,"user":{"login":"vishalini253"},"state":"closed","created_at":"2019-12-24T07:54:38Z"},{"id":542003584,"title":"[react-test-renderer] Fix `findByType` broken for SimpleMemoComponent","body":"Fix #17301 .\\r\\n\\r\\nThe fix is simply check if the `tag` of the fiber node is `SimpleMemoComponent`, and check the `elementType` instead of `type`.\\r\\n\\r\\nI\'m not fully understand the difference between `elementType` and `type` in test-renderer though, looks like if we changed to always get the `elementType` instead of `type` would also work? Maybe it has something to do with `Lazy` and `Suspense`, but AFAIK `react-test-renderer` currently doesn\'t support them.","number":17700,"user":{"login":"kevin940726"},"state":"open","created_at":"2019-12-24T06:01:21Z"},{"id":541987900,"title":"why has an umd folder in the React package","body":"I wonder why is there an `UMD folder` in the React package. \\r\\n\\r\\n![image](https://user-images.githubusercontent.com/19354791/71393724-e8980880-2648-11ea-8d41-fefff4382b82.png)\\r\\n\\r\\nShould the UMD folder be uploaded to CDN and then use it through `<script>`? And it seems there is no extra effect about the UMD file. And if so, why not remove the UMD file from the React package to increase the download speed of the React NPM Package.\\r\\n\\r\\n\\r\\n","number":17699,"user":{"login":"MuYunyun"},"state":"closed","created_at":"2019-12-24T04:44:33Z"},{"id":541852166,"title":"Error: \\"Could not find node with id \\"66\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17698,"user":{"login":"pancedubrovski"},"state":"closed","created_at":"2019-12-23T18:03:03Z"},{"id":541845121,"title":"Opinions on Ionic Reac","body":"Hello, \\r\\n\\r\\nFeasibility of making a project in ionic reaction.\\r\\n\\r\\nI am interested in knowing more about Ionic react.\\r\\n\\r\\nAnd I would like to know if it is advisable to do a project with Ionic React.\\r\\n\\r\\nHow scalable the project would be.\\r\\n\\r\\nAnd you can use all the tools that have both ionic and rea, example: camera, maps, notifications, routes, among others.\\r\\n\\r\\nI appreciate if you can advise me.\\r\\n\\r\\nThank you","number":17697,"user":{"login":"Luzmario1708"},"state":"closed","created_at":"2019-12-23T17:38:13Z"},{"id":541805732,"title":"Error: \\"Could not find node with id \\"50\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17696,"user":{"login":"PrincJr"},"state":"closed","created_at":"2019-12-23T15:43:41Z"},{"id":541782516,"title":"Cant use name starting with use in the React Hooks\' function Name.","body":"\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug.\\r\\n**What is the current behavior?**\\r\\nIf we name any hook\'s change state function starting with use* (for eg... useMyState) it shows errors when calling my hook from any function other than the current main function and throws errors, but as we change this function\'s name to any other name (for eg... changeMyState) it starts working fine.\\r\\nI think the error is in the compiler which checks for the errors in React.\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n```\\r\\nconst [myState, useMyState] = React.useState(false); // causes problem\\r\\nconst [myNewState, changeMyNewState] = React.useState(false); // works great\\r\\nfunction setState (value) {\\r\\n  useMystate(value); // throws error.\\r\\n  changeMyNewState(value); // it works great as aspected.\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe expected behavior should be no error in each of the above-mentioned cases.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI am using 16.12.0\\r\\nIt does not compile so platform-independent issue.\\r\\nhaven\'t tried in previous versions.\\r\\n","number":17695,"user":{"login":"durgeshsatyam"},"state":"closed","created_at":"2019-12-23T14:41:34Z"},{"id":541662750,"title":"npx create-react-app myapp -> Not Working, src and public folders are not being created","body":"when I use `npx create-react-app myapp`, all required files and directories are not being created, only `package.json`,  `package-lock.json`, and `node_modules` are created automatically. \\r\\nPlease help, am I missing something?\\r\\nIt also says that:\\r\\n> A template was not provided. This is likely because you\'re using an outdated version of create-react-app.\\r\\nPlease note that global installs of create-react-app are no longer supported.<\\r\\n\\r\\nshould I update the package globally? My node version is `v10.15.0`, `npm` and `npx` versions are both `6.4.1`, and `create-react-app` version is `3.1.2` ","number":17694,"user":{"login":"thesaihan"},"state":"closed","created_at":"2019-12-23T09:23:32Z"},{"id":541646860,"title":"Why only one component can be render at root div?","body":"  I called two render methods to same root div .\\r\\n```\\r\\nRenderDOM.render( < Navigation /> ,document.getElementById(\' root \')); \\r\\nRenderDOM.render( < App /> ,document.getElementById(\' root \'));\\r\\n```\\r\\nAnd what i get rendered on my screen is only a  App component.\\r\\nJust want to know that the one render method override the previous  render method?\\r\\n\\r\\n\\r\\n","number":17693,"user":{"login":"Easyvipin"},"state":"closed","created_at":"2019-12-23T08:43:04Z"},{"id":541544056,"title":"hook this","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17692,"user":{"login":"guoqiguantou"},"state":"closed","created_at":"2019-12-23T02:34:32Z"},{"id":541497025,"title":"componentDidUpdate inexplicably not firing after render in a single component","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**Bug**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`componentDidUpdate` not firing after `render` in one lone component. No idea how to recreate in a sandbox.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`componentDidUpdate` fires after _every_ `render`\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`React@16.11` & `React@16.12` affected in `Electron@6`\\r\\n\\r\\n----\\r\\n\\r\\nI\'m tracking when `componentDidUpdate` and `render` are firing with log statements. \\r\\n\\r\\n**The log statements in `componentDidUpdate` do not fire after `render`. I have used breakpoints to confirm this isn\'t a timing issue.** \\r\\n\\r\\nMy code (stripped down) is below. This is the output of the logging. Sometimes I\'ll get `componentDidUpdate` to fire, but inconsistently and it\'s never the final thing, a `RENDER` always shows up in my logs last, never `UPDATE`.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/6835891/71326857-887d5700-24ce-11ea-9862-ac3b28010f2a.png)\\r\\n\\r\\n\\r\\n```js\\r\\nclass MyWrapper extends React.PureComponent {\\r\\n  render() {\\r\\n  const { buttonDefinitions } = this.props;\\r\\n    return (\\r\\n      <InfoProvider\\r\\n        render={infoProps => {\\r\\n          return (\\r\\n            <MyMenu\\r\\n              {...{ buttonDefinitions, infoProps }}\\r\\n            />\\r\\n          );\\r\\n        }}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n```js\\r\\nclass MyMenu extends React.Component {\\r\\n  componentDidUpdate() {\\r\\n    log.warn(\'UPDATE\');\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    log.warn(\'RENDER\');\\r\\n    const { buttonDefinitions } = this.props;\\r\\n    return (\\r\\n      <MenuWrapper>\\r\\n        {buttonDefinitions.map(buttonDef => (\\r\\n          <MyButton {...buttonDef} />\\r\\n        ))}\\r\\n      </MenuWrapper>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n","number":17691,"user":{"login":"Slapbox"},"state":"closed","created_at":"2019-12-22T20:21:48Z"},{"id":541493551,"title":"[DevTools] Display RegExp values in props/state","body":"Replaces PR #17023\\r\\n\\r\\n# Before\\r\\n<img width=\\"173\\" alt=\\"Screenshot of props panel before RegExp change\\" src=\\"https://user-images.githubusercontent.com/29597/71326456-ec445780-24af-11ea-91b2-3e2aaa475133.png\\">\\r\\n\\r\\n# After\\r\\n<img width=\\"170\\" alt=\\"Screenshot of props panel after RegExp change\\" src=\\"https://user-images.githubusercontent.com/29597/71326455-e64e7680-24af-11ea-9037-84e59ab4da15.png\\">\\r\\n","number":17690,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-22T19:41:15Z"},{"id":541400448,"title":"useEffect and useState infinite loop inconsistencies","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**  \\r\\nA bug\\r\\n\\r\\n**What is the current behavior?**  \\r\\nWhen objects are used as dependency for useEffect, they  are ignored and cause automatic rerendering. This is problematic when there is useState inside the useEffect, as it creates an infinite loop.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:** \\r\\n \\r\\nhttps://jsfiddle.net/dv8qrx16/ Objects can be replaced with non-empty ones.  \\r\\nVariations on the problems are noted in comments. The errors can be seen in the console log:\\r\\n`1000 Warning: Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn\'t have a dependency array, or one of the dependencies changes on every render.`\\r\\n\\r\\n**What is the expected behavior?**  \\r\\nuseState should update the state without bugs. Or if that is not feasible, the bug should be consistent, and the error message reflect this case\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  \\r\\n16.12.0\\r\\nTo the best of my knowledge, this was working in 16.9, but I may be mistaken\\r\\n\\r\\n**Potential workaround**  \\r\\nFor now, I resorted to use useRef instead of useState.","number":17688,"user":{"login":"joy-void-joy"},"state":"closed","created_at":"2019-12-22T03:00:18Z"},{"id":541357167,"title":"React theme, context","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17687,"user":{"login":"IvanStack"},"state":"closed","created_at":"2019-12-21T18:37:30Z"},{"id":541355409,"title":"React Hook on latest version","body":"React Hook Latest version","number":17686,"user":{"login":"topguru228"},"state":"closed","created_at":"2019-12-21T18:17:48Z"},{"id":541318155,"title":"Feature request - Enhance JSX syntax-compilation to basic hooks and state management","body":"Not long ago I have been introduced to Svelte, and was impressed by the ability to write less source code, less implementation details, and use reactive values easily. However, I wondered if to achieve this, another higher language was really necessary. For me, the ability to use JS freely is valueable. I wonder, can we improve developer experience in such a way and remain in JS? \\r\\n\\r\\n## General Proposal\\r\\nJSX introduced an elegant syntax-compilation solution. \\r\\n```jsx\\r\\n<element prop=\\"value\\">child</element>\\r\\n```\\r\\nCompiles to: \\r\\n```js\\r\\nReact.createElement(\\"element\\", {prop:\\"value\\", children:\\"child\\"})\\r\\n```\\r\\nThis solution allows us to enjoy both worlds - stay in JS, yet use dedicated syntax which makes our code easier to read and write. My suggestion is to extend this (syntax-compilation) pattern to the basic hooks, and state management in React. User will be able to opt-in to easy to use compilation solutions, by using dedicated syntax. \\r\\n\\r\\nHooks are ideal candidates: \\r\\n1. They come with non trivial constrainsts (Returned value depends on execution order, so they must be at the top level). With the use of a dedicated syntax, they can be grasped and treated as different from a regular function call.  \\r\\n2. Optimizing is more difficult - Optimizing for performance requires knowledge and attention to implementation details. This includes: React.memo, useCallback, useMemo, and passing dependencies. It requires more code, and is somewhat more [bug prone](https://stackoverflow.com/questions/53070970/infinite-loop-in-useeffect).\\r\\n\\r\\nAnother ideal candidate is state management, which comes with it\'s own necessary contraints. Most noteably is that updating state should be done immutably. While this is essential in React, it could also be a burden on the developer, and is bug prone. I think this as well could be elegently solved with compilation. \\r\\n\\r\\n## Proposal Details \\r\\nSome of the ideas I will present might be contraversial, but they do demonstrate the general proposal, and demonstrate a few possible directions. \\r\\nProposal includes the following: \\r\\n\\r\\n1. A dedicated sign for state\\r\\n2. A dedicated sign for reactive-memoized values (which change if, and only if, dependencies change.)\\r\\n3. A dedicated sign for effects. \\r\\n4. In JSX elements support shorthand attribute assignment (similar to ES6 Object shorthand property names)\\r\\n\\r\\nI\'ll demonstrate what it could look like, with this simple [Complete and Tell todo app](https://complete-and-share.stackblitz.io).\\r\\n```jsx\\r\\nconst TasksApp = () => {\\r\\n\\tconst [tasks, setTasks] = useState(initialTasks)\\r\\n\\tconst [competitionStatus, setcompetitionStatus] = useState([])\\r\\n\\r\\n\\tconst addTask = useCallback(\\r\\n\\t\\t(text) => setTasks( tasks => [{text, completed: false, id:+ new Date()}, ...tasks]), \\r\\n\\t\\t[]\\r\\n\\t)\\r\\n\\r\\n\\tconst toggleCompleted = useCallback(\\r\\n\\t\\t(id) => setTasks( \\r\\n\\t\\t\\ttasks => tasks.map( \\r\\n\\t\\t\\t\\ttask => (task.id!=id)? task : {...task, completed: !task.completed}\\r\\n\\t\\t\\t)\\r\\n\\t\\t), \\r\\n\\t\\t[]\\r\\n\\t)\\r\\n\\r\\n\\tconst completedTasks = useMemo(\\r\\n\\t\\t()=>tasks.reduce(\\r\\n\\t\\t\\t(accum, task) => accum+task.completed,\\r\\n\\t\\t\\t0\\r\\n\\t\\t), \\r\\n\\t\\t[tasks]\\r\\n\\t)\\r\\n\\r\\n\\tuseEffect(\\r\\n\\t\\t() => {\\r\\n\\t\\t\\tconst updateCompetition = () => {\\r\\n\\t\\t\\t\\tconst status = fetchCompetition(completedTasks)\\r\\n\\t\\t\\t\\tsetcompetitionStatus(status)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tupdateCompetition()\\r\\n\\t\\t\\tconst interval = setInterval(updateCompetition, 10000)\\r\\n\\t\\t\\treturn () => clearInterval(interval)\\r\\n\\t\\t}, \\r\\n\\t\\t[completedTasks]\\r\\n\\t)\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<>\\r\\n\\t\\t\\t<h1>Complete and share</h1>\\r\\n\\r\\n\\t\\t\\t<Competition competitionStatus={competitionStatus} />\\r\\n\\t\\t\\t<InviteFriend />\\r\\n\\r\\n\\t\\t\\t<SelfStats completedTasks={completedTasks} />\\r\\n\\t\\t\\t<AddTask addTask={addTask}/>\\r\\n\\t\\t\\t<TaskList tasks={tasks} toggleCompleted={toggleCompleted} />\\r\\n\\t\\t</>\\r\\n\\t)\\r\\n}\\r\\n```\\r\\nI\'ll now write the same code, but relay on syntax-compilation to solve the challenges I metnioned above. I\'ll use `#` as a sign for state, `$` as a sign for memoization, and `%` as a sign for effects. \\r\\n```jsx\\r\\nconst TasksApp = () => {\\r\\n\\t# tasks = initialTasks\\r\\n\\t# competitionStatus = []\\r\\n\\r\\n\\t$ addTask = (text) => tasks.push({text, completed: false, id:+ new Date()})\\r\\n\\r\\n\\t$ toggleCompleted = (id) => tasks[id].completed = !tasks[id].completed\\r\\n\\r\\n\\t$ completedTasks = ()=>tasks.reduce(\\r\\n\\t\\t(accum, task) => accum+task.completed,\\r\\n\\t\\t0\\r\\n\\t)\\r\\n\\r\\n\\t%\\tconst updateCompetition = () => {\\r\\n\\t\\t\\tconst status = fetchCompetition(completedTasks)\\r\\n\\t\\t\\tcompetitionStatus.set(status)\\r\\n\\t\\t}\\r\\n\\t\\tupdateCompetition()\\r\\n\\t\\tconst interval = setInterval(updateCompetition, 10000)\\r\\n\\t\\t%\\tclearInterval(interval)\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<>\\r\\n\\t\\t\\t<h1>Complete and share</h1>\\r\\n\\r\\n\\t\\t\\t<Competition competitionStatus />\\r\\n\\t\\t\\t<InviteFriend />\\r\\n\\r\\n\\t\\t\\t<SelfStats completedTasks />\\r\\n\\t\\t\\t<AddTask addTask/>\\r\\n\\t\\t\\t<TaskList tasks toggleCompleted />\\r\\n\\t\\t</>\\r\\n\\t)\\r\\n}\\r\\n```\\r\\nThis component is equivelent, and will compile to the same code, as the original TaskApp above it. \\r\\n\\r\\nLet\'s look at \\r\\n```jsx\\r\\n$ toggleCompleted = (id) => tasks[id].completed = !tasks[id].completed\\r\\n```\\r\\nThe compiler should recognize that tasks is a state thing, and convert the mutating code to a state updating code. \\r\\n```jsx\\r\\n$ toggleCompleted = (id) => setTasks( \\r\\n\\ttasks => tasks.map( \\r\\n\\t\\ttask => (task.id!=id)? task : {...task, completed: !task.completed}\\r\\n\\t)\\r\\n)\\r\\n```\\r\\nIt should also recognize that toggleCompleted should be memoized. Looking at the code, it doesn\'t relay on values that are not passed as parameters, so there are no dependencies. It can complete the convertion of the function to the final code: \\r\\n```jsx\\r\\nconst toggleCompleted = useCallback(\\r\\n\\t(id) => setTasks( \\r\\n\\t\\ttasks => tasks.map( \\r\\n\\t\\t\\ttask => (task.id!=id)? task : {...task, completed: !task.completed}\\r\\n\\t\\t)\\r\\n\\t), \\r\\n\\t[]\\r\\n)\\r\\n```\\r\\nMemoizing this function with `useCallback` requires technical and repetitive work. It is somewhat of a burden on the developer, and a compiler might just be better at it. \\r\\n\\r\\nAs for updating state in this example, for deep nested state updates this approach will yield greater benefits. Immutability wise, it is somewhat similar to Immer. Code could be written mutably, and have an immutable effect. \\r\\n\\r\\nLets look at another component: \\r\\n```jsx\\r\\nconst AddTask = ({addTask}) => {\\r\\n\\tconst [value, setValue] = useState(\\"\\")\\r\\n\\r\\n\\tconst changeHandler = useCallback(\\r\\n\\t\\t(e) => setValue(e.target.value), \\r\\n\\t\\t[]\\r\\n\\t)\\r\\n\\t\\r\\n\\tconst onClick = useCallback(\\r\\n\\t\\t()=>{\\r\\n\\t\\t\\taddTask(value)\\r\\n\\t\\t\\tsetValue(\\"\\")\\r\\n\\t\\t}, \\r\\n\\t\\t[value, addTask]\\r\\n\\t)\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<div className=\\"add-task\\">\\r\\n\\t\\t\\t<div>Add Task</div>\\r\\n\\t\\t\\t<input value={value} onChange={changeHandler} /> \\r\\n\\t\\t\\t<button onClick={onClick}>Add</button> \\r\\n\\t\\t</div>\\r\\n\\t)\\r\\n}\\r\\n\\r\\nexport default React.memo(AddTask)\\r\\n```\\r\\nIn the suggested syntax: \\r\\n```jsx\\r\\n$ AddTask = ({addTask}) => {\\r\\n\\t# value = \\"\\"\\r\\n\\r\\n\\t$ onClick = ()=>{\\r\\n\\t\\taddTask(value)\\r\\n\\t\\tvalue = \\"\\"\\r\\n\\t}\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<div className=\\"add-task\\">\\r\\n\\t\\t\\t<div>Add Task</div>\\r\\n\\t\\t\\t<input #value /> \\r\\n\\t\\t\\t<button onClick>Add</button> \\r\\n\\t\\t</div>\\r\\n\\t)\\r\\n}\\r\\n\\r\\nexport default AddTask\\r\\n``` \\r\\nIn these examples all memoised values share the same syntax. Based on the memoized object, the compiler can wrap the code in `React.memo`, `useCallback` or `useMemo`. \\r\\n\\r\\nThese examples also demonstrate shorthand attribute/props assignment in JSX elements. This makes it easier to pass props, which is important because it makes reusing components easier. Further more, it makes JSX more aligned with JS, since JS now supports this feature for objects. \\r\\n\\r\\n`<input #value />` demonstrates an option to bind state value to an input\'s value.\\r\\n\\r\\nUsing the suggested syntax in this app, **components were written in 29% less source code.** \\r\\n\\r\\n## Summery\\r\\nDeveloper will be able to use JS as before, but could also opt to use such compilation solutions. The above solutions provide the following benefits: \\r\\n\\r\\n1. In a sense it\'s more declerative - User can declare a value to be reactive-memoized, or state-immutable, without worrying how it is implemented. \\r\\n2. (Once a programmer is familiar with the syntax) Less overhead for reading and writting.\\r\\n3. All of the above probably means app will be less bug prone. \\r\\n\\r\\n\\r\\n\\r\\n","number":17685,"user":{"login":"carpben"},"state":"closed","created_at":"2019-12-21T11:46:31Z"},{"id":541301609,"title":"Error: \\"Could not find node with id \\"312\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. I was profiling a grid performance when rendering with 100 rows\\r\\n2. Then I was moving between the profiled data\\r\\n3. When clicked on the Ranked tab, the console showed error and a button to report it.\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17684,"user":{"login":"developerium"},"state":"closed","created_at":"2019-12-21T08:34:59Z"},{"id":541266507,"title":"React Developer Tools not showing correct components","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe React Developer Tools, when I deploy a React App to GitHub Pages, do not show the React components. The Components tab instead displays\\r\\n![image](https://user-images.githubusercontent.com/31084854/71300980-0f63ef80-2368-11ea-9fbe-63cddea97bc0.png)\\r\\n\\r\\nhttps://github.com/facebook/react/issues/16840 told me to use that extension but that doesn\'t work\\r\\n\\r\\n**Update:** \\r\\nI uninstalled and reinstalled React and now I get a blank screen. Additionally, when run on localhost (development build) it shows the right components. \\r\\nOn localhost, it shows the development mode, and I see what I want to see on production mode: \\r\\n![image](https://user-images.githubusercontent.com/31084854/71315713-d2fcc600-2431-11ea-9315-ef6a6925f8cd.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe React Developer Tools should show the components. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\non Google Chrome, React v4.2.1\\r\\n","number":17683,"user":{"login":"Borumer"},"state":"closed","created_at":"2019-12-21T01:42:33Z"},{"id":541246612,"title":"Error: \\"Could not find node with id \\"51\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17682,"user":{"login":"harrynortham"},"state":"closed","created_at":"2019-12-20T23:42:24Z"},{"id":541129194,"title":"Re-enable context menu options in Firefox","body":"#17668 disabled support for \\"copy to clipboard\\" and \\"go to definition\\" context menu items in Firefox. \\r\\n\\r\\nUse cases\\r\\n\\r\\n- [x] copy to clipboard (#17740)\\r\\n- [x] jump to element node (blocked by Firefox bugs [1605597](https://bugzilla.mozilla.org/show_bug.cgi?id=1605597), [1609671](https://bugzilla.mozilla.org/show_bug.cgi?id=1609671), [1609677](https://bugzilla.mozilla.org/show_bug.cgi?id=1609677))\\r\\n- [x] jump to function definition (blocked by Firefox bugs [1605597](https://bugzilla.mozilla.org/show_bug.cgi?id=1605597), [1609671](https://bugzilla.mozilla.org/show_bug.cgi?id=1609671), [1609677](https://bugzilla.mozilla.org/show_bug.cgi?id=1609677))","number":17681,"user":{"login":"jasonLaster"},"state":"open","created_at":"2019-12-20T18:12:28Z"},{"id":541056820,"title":"Add unit tests to dom-event-testing-library","body":"Unit tests for the simple event mocks. I\'ll add tests for the expectations of the complex event sequences after the holidays.","number":17680,"user":{"login":"necolas"},"state":"closed","created_at":"2019-12-20T15:40:17Z"},{"id":541048128,"title":"[react-interactions] Rename test + fix master","body":"This is a PR to hopefully fix the failing master by adding another commit that will make CI pass, which will hopefully, in turn, make my other PR correctly check codesizes with master. I thought to make it useful, I\'d rename the test file, which should also be labeled as deprecated, to make this commit somewhat more useful. :P","number":17679,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-20T15:22:16Z"},{"id":541039378,"title":"[react-dom] Refactor event priority handling to its own module","body":"The team have mentioned a bunch of times that it felt wrong that DOM Event Priority handling was all coupled with the SimpleEventPlugin, especially as might want to extend on the priorities with newer features and refactors in the future.\\r\\n\\r\\nThis PR breaks out the priority logic into a dedicated module and makes uses of Maps for faster lookups (I benchmarked before and after and Maps were consistently faster than object property lookups in Chrome and Safari, neutral in Firefox). We should also get a slight code size saving by some of the code golfing that I did whilst refactoring the code.","number":17678,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-20T15:03:30Z"},{"id":540835678,"title":"How can i create a dynamic ENum","body":"This request asking about existing features supported by ReactJS. I have an enum in use on several reactJS pages(200 implementations across 32 code files). Now the requirement is to make it dynamic. I am not sure how can i achieve it in ReactJS+REDUX implementation. \\r\\n\\r\\nI am working on the latest version of ReactJS","number":17677,"user":{"login":"ankitguptaa"},"state":"closed","created_at":"2019-12-20T07:55:18Z"},{"id":540778030,"title":"After add extension, Not getting react developer tools functionality in chrome ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17676,"user":{"login":"ajaysharma91"},"state":"closed","created_at":"2019-12-20T05:48:12Z"},{"id":540775636,"title":"Fix onMouseEnter is fired on disabled buttons","body":"This pull request fixes issue #17229. I modified `shouldPreventMouseEvent` function to include `onMouseEnter` and added a new test to `ReactBrowserEventEmmiter-test`.","number":17675,"user":{"login":"AlfredoGJ"},"state":"open","created_at":"2019-12-20T05:42:01Z"},{"id":540773389,"title":"react dangerouslySetInnerHTML very slowly in newest chrome ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`dangerouslySetInnerHTML` make website so slowly, you can try to select any text in this demo:https://codesandbox.io/s/hardcore-chatelet-v83z1\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\ndemo:https://codesandbox.io/s/hardcore-chatelet-v83z1\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSmooth operation \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nmac chrome 79.0.3945.88\\r\\nit work fine in old chrome version or safari.\\r\\nmaybe it\'s chrome\u2019s problem?","number":17674,"user":{"login":"brickspert"},"state":"closed","created_at":"2019-12-20T05:36:43Z"},{"id":540743205,"title":"Error: \\"Could not find node with id \\"678\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17673,"user":{"login":"ekodedypurnomo"},"state":"closed","created_at":"2019-12-20T04:09:58Z"},{"id":540721939,"title":"Unexpected function component call using useState","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n*question*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n``` typescript\\r\\nimport React, { useState, useEffect } from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nfunction Child() {\\r\\n  console.log(\\"Child render\\");\\r\\n  return null;\\r\\n}\\r\\n\\r\\nfunction App() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  console.log(\\"Render\\");\\r\\n\\r\\n  useEffect(() => {\\r\\n    console.log(\\"count changed\\", count);\\r\\n  }, [count]);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <h2>UseState</h2>\\r\\n      <p>clicked: {count}</p>\\r\\n      <button\\r\\n        onClick={() => {\\r\\n          setCount(count + 1);\\r\\n        }}\\r\\n      >\\r\\n        +1\\r\\n      </button>\\r\\n      <button\\r\\n        onClick={() => {\\r\\n          setCount(count);\\r\\n        }}\\r\\n      >\\r\\n        +0\\r\\n      </button>\\r\\n      <Child />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n\\r\\n```\\r\\n\\r\\nThere are two button in this count example. Clicking one makes count +1\uff0canother makes count no change. If clicking the no change button first, \\"Render\\" will not be logged. But if clicking the +1 button first and then clicking anthor\uff0c\\"Render\\" will show twice, but \\"\\"Child render\\" will only show once.\\r\\n\\r\\nI found the explain in document.\\r\\n\\r\\n> If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\\r\\n\\r\\nDoes React only promise that Children component will not be rendered in this situation? The current component may still be rendered?\\r\\n\\r\\nThis is an example in sandbox.\\r\\n\\r\\nhttps://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n\\"react\\": \\"^16.12.0\\",\\r\\n\\"react-dom\\": \\"^16.12.0\\",\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":17672,"user":{"login":"yqz0203"},"state":"closed","created_at":"2019-12-20T03:11:53Z"},{"id":540720681,"title":"Unexpected component function call using useState ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThere is a simple count component with two buttons: +1 or +0. When I click the +0 button, component will not \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17671,"user":{"login":"yqz0203"},"state":"closed","created_at":"2019-12-20T03:08:20Z"},{"id":540649170,"title":"DevTools crashes (`levelChildren` is undefined) when selecting a component in Flamegraph view","body":"**Do you want to request a *feature* or report a *bug*?** \\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact DevTools crashes in the code below because `levelChildren` is `undefined`. \\r\\n\\r\\nhttps://github.com/facebook/react/blob/7dc9745427046d462506e9788878ba389e176b8a/packages/react-debug-tools/src/ReactDebugHooks.js#L456-L462\\r\\n\\r\\ncallstack is: \\r\\n```\\r\\nbackend.js:formatted:6593 Uncaught TypeError: Cannot read property \'push\' of undefined\\r\\n    at S (backend.js:formatted:6593)\\r\\n    at _ (backend.js:formatted:6638)\\r\\n    at inspectHooksOfFiber (backend.js:formatted:6682)\\r\\n    at rt (backend.js:formatted:2372)\\r\\n    at Object.inspectElement (backend.js:formatted:2753)\\r\\n    at t.<anonymous> (backend.js:formatted:3484)\\r\\n    at t.r.emit (backend.js:formatted:978)\\r\\n    at backend.js:formatted:7407\\r\\n    at t (backend.js:formatted:4954)\\r\\n```\\r\\n\\r\\nI haven\'t been able to reproduce this yet outside my app, but here\'s the steps that trigger the crash in my app: \\r\\n1) open dev tools\\r\\n2) start profiling\\r\\n3) stop profiling\\r\\n4) select the CalendarMiddle component in the Flamegraph view\\r\\n5) crash!\\r\\n\\r\\n**What is the expected behavior?**\\r\\nno crash\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI\'m running: \\r\\n* React 16.12\\r\\n* RDT 4.2.1 (11/27/2019) revision 3816ae7c3\\r\\n* Chrome 79.0.3945.88 (Official Build) (64-bit)\\r\\n* MacOS Catalina 10.15.2 (19C57)\\r\\n\\r\\nI\'ve never seen this crash before today.  Interestingly, the crash only happens when I select some components in the flamegraph, but doesn\'t happen when I select other components. I haven\'t figured out the pattern yet of which components will trigger a crash. \\r\\n\\r\\nI know that this repro isn\'t particularly actionable at this point, but I\'m hoping that someone who knows the RDT code better than I do might have an idea about why this might be happening.\\r\\n","number":17670,"user":{"login":"justingrant"},"state":"closed","created_at":"2019-12-19T23:56:35Z"},{"id":540633902,"title":"Refactor Expiration Time Model","body":"## Based on #17418\\r\\n\\r\\nStack of changes to replace our \\"expiration time\\" model with something better.\\r\\n\\r\\n- [x] Decouple expiration times from transition timeouts","number":17669,"user":{"login":"acdlite"},"state":"open","created_at":"2019-12-19T23:15:49Z"},{"id":540629695,"title":"Disable unsupported context menu options for Firefox","body":"Unfortunately the \\"copy to clipboard\\" and \\"go to definition\\" context menu options do not work for the Firefox add-on. I\'m not sure why \\"go to definition\\" doesn\'t work. (Seems like it should but it just fails silently.) The clipboard option seems more obviously broken though.\\r\\n\\r\\nWe currently use [`document.execCommand(\\"copy\\")`](https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand) which works for Chrome but fails for Firefox with the following error:\\r\\n![image](https://user-images.githubusercontent.com/29597/71217010-2d9af400-2271-11ea-9e43-077bb35638ce.png)\\r\\n\\r\\nUnfortunately, using the newer [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write) fails for both browsers:\\r\\n![image](https://user-images.githubusercontent.com/29597/71217023-38ee1f80-2271-11ea-902a-fff82f4005a9.png)\\r\\n\\r\\nSo for now it seems the best we can do is stick with the old `execCommand` API and disable the menu option for Firefox.\\r\\n\\r\\n### Chrome demo\\r\\n![Context menu in Chrome](https://user-images.githubusercontent.com/29597/71217856-0e519600-2274-11ea-930b-2e3a55c55104.gif)\\r\\n\\r\\n### Firefox demo\\r\\n![Context menu in Firefox](https://user-images.githubusercontent.com/29597/71217901-4c4eba00-2274-11ea-83fd-08928b7c8031.gif)\\r\\n","number":17668,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-19T23:08:04Z"},{"id":540556922,"title":"Error: \\"Could not find node with id \\"28540\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17667,"user":{"login":"lowone9"},"state":"closed","created_at":"2019-12-19T20:48:35Z"},{"id":540476682,"title":"Null stateNode after unmount","body":"For discussion purposes.\\r\\n\\r\\nThis change avoids a certain case where we over-retain Fibers after unmount:\\r\\n\\r\\nIn `detachFiber` we null out `child` and `sibling` pointers in an effort to clear references to the stale subtree, but-\\r\\n1. We don\'t clear the `stateNode` pointer for host element fibers.\\r\\n1. The `stateNode` has references to its previous host element children.\\r\\n1. Each host element (the children) have references to their corresponding Fibers via the `__reactInternalInstance`* prop.\\r\\n\\r\\nSo we end up retaining the whole Fiber subtree through the single `stateNode` reference.\\r\\n\\r\\nAlthough the cost of retaining these references is limited (e.g. it will go away the next time the parent fiber renders) it can still obscure investigations into other more serious, user space leaks.\\r\\n\\r\\nAn example of the previous behavior can be seen here:\\r\\nhttps://codesandbox.io/s/sweet-leakey-rj2ii","number":17666,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-19T18:20:34Z"},{"id":540464639,"title":"Pass hook functions as third parameter","body":"\\r\\n\\r\\n\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n_feature_\\r\\n\\r\\n**What is the current behavior?**\\r\\nhooks make components impure\\r\\n\\r\\n**What is the ~expected~ _desired_ behavior?**\\r\\nmake components pure functions\\r\\n\\r\\nJust spitballin\' here but instead of this\\r\\n\\r\\n```\\r\\nimport { useState } from \'react\';\\r\\n\\r\\nconst MyComponent = (props,ref) => {\\r\\n    const [someState,setSomeState] = useState();\\r\\n}\\r\\n```\\r\\n\\r\\ncan we pass a third argument to components like this:\\r\\n\\r\\n```\\r\\nconst MyComponent = (props,ref,{useState}) => {\\r\\n    const [someState,setSomeState] = useState();\\r\\n}\\r\\n```\\r\\n\\r\\nSomething about pure functions...\\r\\n","number":17665,"user":{"login":"akmjenkins"},"state":"closed","created_at":"2019-12-19T17:53:42Z"},{"id":540464092,"title":"console tab","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17664,"user":{"login":"randyfair"},"state":"closed","created_at":"2019-12-19T17:52:25Z"},{"id":540434938,"title":"[ESLint] Allow partial matches for custom Effect Hooks","body":"This is to catch internal violations from custom Hooks.","number":17663,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-19T16:54:08Z"},{"id":540406167,"title":"Error: \\"Could not find node with id \\"47989\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17662,"user":{"login":"jedzej"},"state":"closed","created_at":"2019-12-19T16:02:28Z"},{"id":540330973,"title":"Error: \\"Could not find node with id \\"638\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17661,"user":{"login":"GeceGibi"},"state":"closed","created_at":"2019-12-19T13:59:21Z"},{"id":540305134,"title":"Create packages/dom-event-testing-library","body":"This is a follow-up to #17614. It moves the unit testing library for events into the `packages` directory so it can more easily be used in tests for other react packages, and mirrored internally to help with testing of event hooks we prototype in www.","number":17660,"user":{"login":"necolas"},"state":"closed","created_at":"2019-12-19T13:12:05Z"},{"id":540295600,"title":"[react-interactions] Remove batchedUpdates from responder lifecycles","body":"This PR removes the `batchedUpdates` wrapper from the Flare Responder lifecycle events \u2013 specifically `onMount` and `onUnmount`. The intention of having them here, was in case the responder dispatched user events that triggered state updates, which isn\'t the case.\\r\\n\\r\\nBy making this change, we fix an interesting bug to do with controlled components and inputting multi-byte characters in other languages. `batchedUpdates` has an interesting side-effect in that it calls `finishEventHandler` which in turn restores controlled component state and calls `flushDiscreteUpdatesImpl`, which is what causes this bug.","number":17659,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-19T12:52:20Z"},{"id":540282963,"title":"React.memo breaks generic components argument type inference","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCurrently, React.memo breaks generic components type inference.\\r\\n\\r\\n```tsx\\r\\ninterface Props<T> {\\r\\n  value: T;\\r\\n  setValue: (value: T) => void;\\r\\n}\\r\\n\\r\\nfunction GenericComponent<T>({ value }: Props<T>) {\\r\\n  return <div>{value}</div>;\\r\\n}\\r\\n\\r\\nconst MemoizedGenericComponent = memo(GenericComponent);\\r\\n\\r\\nconst App: React.FC = () => {\\r\\n  const [value, setValue] = useState(0);\\r\\n  return (\\r\\n    <>\\r\\n      <GenericComponent value={value} setValue={setValue} />\\r\\n      <MemoizedGenericComponent value={value} setValue={setValue} />\\r\\n    </>\\r\\n  );\\r\\n};\\r\\n```\\r\\n\\r\\nWe have the following error: \\r\\n```\\r\\nError:(20, 47) TS2322: Type \'Dispatch<SetStateAction<number>>\' is not assignable to type \'(value: unknown) => void\'.\\r\\n  Types of parameters \'value\' and \'value\' are incompatible.\\r\\n    Type \'unknown\' is not assignable to type \'SetStateAction<number>\'.\\r\\n      Type \'unknown\' is not assignable to type \'(prevState: number) => number\'.\\r\\n```\\r\\n\\r\\nDemo repository:  https://github.com/SQReder/broken-memo/\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nMemoized component should have the same type inferring as an original component\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```\\r\\n\\"@types/react\\": \\"^16.9.0\\",\\r\\n\\"@types/react-dom\\": \\"^16.9.0\\",\\r\\n\\"react\\": \\"^16.12.0\\",\\r\\n\\"react-dom\\": \\"^16.12.0\\",\\r\\n\\"react-scripts\\": \\"3.3.0\\",\\r\\n\\"typescript\\": \\"~3.7.2\\"\\r\\n```","number":17658,"user":{"login":"SQReder"},"state":"closed","created_at":"2019-12-19T12:26:04Z"},{"id":540212091,"title":"Error: \\"Could not find node with id \\"5082\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. I was watching the Flamegraph\\r\\n2. I clicked on a node\\r\\n3. I clicked on the Ranked tab and the bug occurred\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17657,"user":{"login":"GiardEmilien"},"state":"closed","created_at":"2019-12-19T10:11:14Z"},{"id":540157947,"title":"Multiple React Context Issue","body":"Multiple React Context Issue","number":17656,"user":{"login":"topguru228"},"state":"closed","created_at":"2019-12-19T08:30:55Z"},{"id":540096562,"title":"Error: \\"Could not find node with id \\"436\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17655,"user":{"login":"world56"},"state":"closed","created_at":"2019-12-19T05:57:55Z"},{"id":540025383,"title":"optional chaining support in eslint-plugin","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nI think it\'s a feature request.\\r\\n\\r\\n**What is the current behavior?**\\r\\neslint-exhaustive-deps doesn\'t work clearly when dependencies are implemented with optional chaining.\\r\\n\\r\\nExamples:\\r\\n\\r\\n```\\r\\n  React.useEffect(() => {\\r\\n    console.log(res.data?.post.liked)\\r\\n  }, [res.data])\\r\\n```\\r\\nThis code causes waring with `React Hook React.useEffect has missing dependencies: \'post\' and \'liked\'. Either include them or remove the dependency array.eslint(react-hooks/exhaustive-deps)`\\r\\n\\r\\nSo work around is:\\r\\n\\r\\n```\\r\\n  React.useEffect(() => {\\r\\n    if (res.data) {\\r\\n      console.log(res.data.post.liked)\\r\\n    }\\r\\n  }, [res.data])\\r\\n```\\r\\n\\r\\nInterestingly, this code also works\\r\\n\\r\\n```\\r\\n  React.useEffect(() => {\\r\\n    if (!res.data?.post) {\\r\\n      return\\r\\n    }\\r\\n    const { post } = res.data\\r\\n    console.log(res.data.post.liked)\\r\\n  }, [res.data])\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\neslint-plugin handles optional chaining accurately and encourage us to write better code.\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```\\r\\n  react: 16.8.3\\r\\n  eslint-plugin-react: 7.15.1\\r\\n  eslint-plugin-react-hooks: 2.3.0\\r\\n```\\r\\n","number":17654,"user":{"login":"taneba"},"state":"closed","created_at":"2019-12-19T01:50:53Z"},{"id":539952387,"title":"DevTools build script enhancements","body":"Resolves #17629\\r\\n\\r\\n* Adds a helper script to download the latest experimental build from CI.\\r\\n* Updates DevTools build instructions to reference this new script as well as the dependency on the experimental release channel.\\r\\n\\r\\nNew command:\\r\\n```sh\\r\\n./scripts/release/download-experimental-build.js\\r\\n```","number":17653,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-18T22:10:27Z"},{"id":539896404,"title":"DevTools copy operations don\'t work in Firefox","body":"Attempting to copy a prop using the new context menu (#17608) prints the following error for Firefox:\\r\\n> Error: Unable to copy. Perhaps it\'s not available in your browser?\\r\\n\\r\\nFirefox itself _does_ support `document.execCommand(\'copy\')` if it\'s within the context of an event handler, but it looks like this does not include events that originated within an extension.\\r\\n\\r\\nLooks like this was also an issue for DevTools v3: https://github.com/facebook/react-devtools/issues/843\\r\\n\\r\\nUnder the hood we are using [`clipboard-js`](https://www.npmjs.com/package/clipboard-js) for this.","number":17652,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-18T20:06:25Z"},{"id":539868339,"title":"[react-interactions] Add Listener API + useEvent hook","body":"Note: This API is intentionally meant to be a low-level way of creating events and assigning listeners to them. It\'s meant to be verbose so larger building blocks can be created on top of them.\\r\\n\\r\\nThis PR is an alternative solution and system to that of my other PR: https://github.com/facebook/react/pull/17508. Specifically, based off feedback internally, I\'ve tried to tackle some of the problems that were brought up with the `createListener` approach in https://github.com/facebook/react/pull/17508:\\r\\n\\r\\n- `createListener` largely depended on events being registered in the commit phase, meaning that there would likely be issues around needing to flush more to ensure we register DOM events. The new approach enforces all events are registered unconditionally via hooks in the render phase, mitigating this issue.\\r\\n- `createListener` allowed for listeners to update and change their properties between renders, which again is problematic for performance and would also require more flushes to ensure we have committed the latest version of each listener.\\r\\n- `createListener` had a complex diffing process to ensure we stored the latest listeners, but this meant that the process had additional overhead and memory usage \u2013 which is no longer the case with this PR.\\r\\n- `createListener` required listeners to be put on nodes via the `listeners` prop. Furthermore, it required using arrays to combine multiple listeners, which some felt was not idealistic and might be confusing during debugging as to which listeners occurred at which stages. Also, there was general dislike to introducing another internal prop \u2013 as it would mean we\'d have to first forbid `listeners` and wait for React 17 to introduce these APIs, as they might be used in the wild for other reasons (custom elements).\\r\\n- `createListener` didn\'t provide an idiomatic way to conditionally add/remove root events (they\'re called delegated events in this new PR). With the new approach, there\'s a streamlined approach to ensure this is easier to do, and by default, no root events can be added unconditionally, which is a code-smell and a good cause of memory leaks/performance issues.\\r\\n\\r\\nTaking the above points into consideration, the design of this new event system aims at bringing the same capabilities as described in https://github.com/facebook/react/pull/17508 whilst also providing some other nice features, that should allow for bigger event sub-systems to be built on top.\\r\\n\\r\\n## `ReactDOM.useEvent`\\r\\n\\r\\nThis hook allows for the registration to a native DOM event, similar to that of `addEventListener` on the web. `useEvent` takes a given event `type` and registers it to the DOM then returns an object unique to that event that allows listeners to be attached to their targets in an effect or another event handler. The object provides three different methods to setup and handle listeners:\\r\\n\\r\\n- `setListener(target: window | element, listener: ?(Event => void))` set a listener to be active for a given DOM node. The node must be a DOM node managed by React or it can be the `window` node for delegation purposes. If the listener is `null` or `undefined` then we remove the given listener for that DOM node or `window` object.\\r\\n- `clear()` remove all listeners\\r\\n\\r\\nThe hook takes three arguments:\\r\\n\\r\\n- `type` the DOM event to listen to\\r\\n- `options` an optional object allowing for additional properties to be defined on the event listener. The options are:\\r\\n  - `passive` provide an optional flag that tells the listener to register a passive DOM event listener or an active DOM event listener\\r\\n  - `capture` provide an optional flag that tells the listener callback to fire in the capture phase or the bubble phase\\r\\n  - `priority` provide an optional Scheduler priority that allows React to correct schedule the listener callback to fire at the correct priority.\\r\\n\\r\\n## Note\\r\\n\\r\\nFor propagation, the same rules of `stopPropagation` and `stopImmediatePropagation` apply to these event listeners. These methods are actually monkey-patched, as we use the actual native DOM events with this system and API, rather than Synthetic Events. `currentTarget` and `eventPhase` are also respectfully monkey-patched to co-ordinate and align with the propagation system involved internally within React.\\r\\n\\r\\nFurthermore, all event listeners are passive by default. If is desired to called `event.preventDefault` on an event listener, then the event listener should be made active via the `passive` option.\\r\\n\\r\\n## Examples\\r\\n\\r\\nAn example of a basic clickable button:\\r\\n\\r\\n```jsx\\r\\nimport {useRef, useEffect} from \'react\';\\r\\nimport {useEvent} from \'react-dom\';\\r\\n\\r\\nfunction Button({children, onClick}) {\\r\\n  const buttonRef = useRef(null);\\r\\n  const clickEvent = useEvent(\'click\');\\r\\n\\r\\n  useEffect(() => {\\r\\n    clickEvent.setListener(buttonRef.current, onClick);\\r\\n  });\\r\\n\\r\\n  return <button ref={buttonRef}>{children}</button>;\\r\\n}\\r\\n```\\r\\n\\r\\nIf you want to listen to events that are delegated to the window, you can do that:\\r\\n\\r\\n```jsx\\r\\nimport {useRef, useEffect} from \'react\';\\r\\nimport {useEvent} from \'react-dom\';\\r\\n\\r\\nfunction Button({children, onClick}) {\\r\\n  const clickEvent = useEvent(\'click\');\\r\\n\\r\\n  useEffect(() => {\\r\\n    // Pass in `window`, which is supported with this API\\r\\n    // Note: `window` is not supported, as React doesn\'t\\r\\n    // listen to events that high up.\\r\\n    clickEvent.setListener(window, onClick);\\r\\n  });\\r\\n\\r\\n  return <button>{children}</button>;\\r\\n}\\r\\n```\\r\\n\\r\\nIf you wanted to extract the verbosity out of this into a custom hook, then it\'s possible to do so:\\r\\n\\r\\n```jsx\\r\\nimport {useRef, useEffect} from \'react\';\\r\\nimport {useEvent} from \'react-dom\';\\r\\n\\r\\nfunction useClick(ref, onClick) {\\r\\n  const clickEvent = useEvent(\'click\');\\r\\n\\r\\n  useEffect(() => {\\r\\n    clickEvent.setListener(ref.current, onClick);\\r\\n  });\\r\\n\\r\\n  return buttonRef;\\r\\n}\\r\\n\\r\\nfunction Button({children}) {\\r\\n  const buttonRef = useRef(null);\\r\\n  useClick(buttonRef , () => {\\r\\n    console.log(\'Hello world!\')\\r\\n  });\\r\\n  return <button ref={buttonRef}>{children}</button>;\\r\\n}\\r\\n```\\r\\n\\r\\nA more complex button that tracks when the button is being pressed with the mouse:\\r\\n\\r\\n```jsx\\r\\nimport {useRef, useEffect} from \'react\';\\r\\nimport {useEvent} from \'react-dom\';\\r\\n\\r\\nfunction Button({children, onClick}) {\\r\\n  const buttonRef = useRef(null);\\r\\n  const [pressed, setPressed] = useState(false);\\r\\n  const click = useEvent(\'click\');\\r\\n  const mouseUp = useEvent(\'mouseup\');\\r\\n  const mouseDown = useEvent(\'mousedown\');\\r\\n\\r\\n  useEffect(() => {\\r\\n    const button = buttonRef.current;\\r\\n\\r\\n    const handleMouseUp = () => {\\r\\n      setPressed(false);\\r\\n    };\\r\\n    const handleMouseDown = () => {\\r\\n      setPressed(true); \\r\\n    };\\r\\n\\r\\n    click.setListener(button, onClick);\\r\\n    if (pressed) {\\r\\n      mouseUp.setListener(button, handleMouseUp);\\r\\n    } else {\\r\\n      mouseDown.setListener(button, handleMouseDown);\\r\\n    }\\r\\n\\r\\n    return () => {\\r\\n      click.setListener(button, null);\\r\\n      mouseDown.setListener(button, null);\\r\\n      mouseUp.setListener(button, null);\\r\\n    };\\r\\n  }, [pressed, onClick]);\\r\\n\\r\\n  return (\\r\\n    <button ref={buttonRef} className={pressed && \'pressed\'}>\\r\\n      {children}\\r\\n    </button>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n## What about the DOM\'s `element.addEventListener`?\\r\\n\\r\\nIn many respects, this low-level API was intentionally designed to be a replacement for the DOM\'s `addEventListener`. Not only does this new Listener API provide many nice benefits, like auto-recycling listeners on unmount, but it should also help prevent bugs that will likely occur when `addEventListener` is used in conjunction with Concurrent Mode.\\r\\n\\r\\nFor a detailed list of differences, here are just some of the key benefits of the Listener API vs the DOM\'s `addEventListener`:\\r\\n\\r\\n- The event listeners automatically get recycled upon unmount\\r\\n- The event listeners correctly batch updates and flush previous ones correctly, as well as co-ordinating priority levels with the internal scheduler\\r\\n- The event listeners allow for alignment with the propagation of other events in the React event system, something not possible with manual DOM event listeners\\r\\n- The event listeners will correctly work with React Portals, Suspense and Concurrent Mode, native event listeners do not.\\r\\n- By ensuring we use a hook, like useEvent, we can determine the event needed during server-side render and ensure those events are registered on initial hydration ahead of time. This makes it possible to \\"replay\\" those events before the components themselves have concurrently hydrated on the client.","number":17651,"user":{"login":"trueadm"},"state":"open","created_at":"2019-12-18T19:19:12Z"},{"id":539857888,"title":"Mismatch in type definitions of ref prop and useRef hook","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug? \\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWith Typescript strict mode turned on:\\r\\n\\r\\n```ts\\r\\nimport React, { useRef } from \'react\';\\r\\nfunction Img() {\\r\\n  const ref = useRef<HTMLImageElement>();\\r\\n  return <img ref={ref} src=\\"foobar\\" />\\r\\n//            ^^^ The type check error below\\r\\n}\\r\\n```\\r\\n\\r\\n```\\r\\nType \'MutableRefObject<HTMLImageElement | undefined>\' is not assignable to type \'string | ((instance: HTMLImageElement | null) => void) | RefObject<HTMLImageElement> | null | undefined\'.\\r\\n  Type \'MutableRefObject<HTMLImageElement | undefined>\' is not assignable to type \'RefObject<HTMLImageElement>\'.\\r\\n    Types of property \'current\' are incompatible.\\r\\n      Type \'HTMLImageElement | undefined\' is not assignable to type \'HTMLImageElement | null\'.\\r\\n        Type \'undefined\' is not assignable to type \'HTMLImageElement | null\'.\\r\\n\\r\\nThe expected type comes from property \'ref\' which is declared here on type \'DetailedHTMLProps<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\'\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect an empty ref like that to be acceptable, since (from what I can see) it works fine. But Typescript complains that `useRef` returns `undefined` while the ref prop expected `null`.\\r\\n\\r\\nI *can* \\"fix\\" it by passing `null` as the \\"default ref\\", like this:\\r\\n\\r\\n```ts\\r\\nconst ref = useRef<HTMLImageElement>(null);\\r\\n```\\r\\n\\r\\nBut unless there\'s a reason why the ref prop expects `null` rather than `undefined`, I really think it would be better if for example the ref prop on `HTMLElement` was adjusted to match the default return from `useRef`, i.e. `undefined`? Yes? No? Or?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.12.0","number":17650,"user":{"login":"Svish"},"state":"closed","created_at":"2019-12-18T18:57:19Z"},{"id":539800417,"title":"Inspector doesn\'t work on my site","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nAsk for assistance or report a bug (not sure)\\r\\n\\r\\n**Steps to reproduce**\\r\\n- In dev tools, select \\"Components\\" tab\\r\\n- Select the inspector tool in the top-left\\r\\n- Click on an element in the page\\r\\n\\r\\n**What is the current behavior?**\\r\\nComponent names are shown as I mouse over them, but the Components tab does not reveal the selected element\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe selected element should be revealed in the Components tab\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.6\\r\\nChrome 79.0.3945.79\\r\\nReact dev tools 4.2.1\\r\\n\\r\\nThe inspector feature works on other public websites built with React, so the problem almost certainly lies with my site. What am I doing wrong, or have I uncovered an edge case somewhere?","number":17649,"user":{"login":"maxrothman"},"state":"open","created_at":"2019-12-18T16:52:08Z"},{"id":539754878,"title":"Favor fallthrough switch instead of case statements for work tags","body":"Currently we\'re inconsistently handling tags that are only relevant for certain flags. We should throw if the tag is not part of the built feature flags. This should also mean that the case statements can be eliminated.\\r\\n\\r\\nWe can achieve this effect by putting the invariant outside of the switch and always early return in the switch. We already do this in beginWork. This PR makes this consistent in other places.\\r\\n","number":17648,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-12-18T15:33:09Z"},{"id":539727612,"title":"Add a regression test for switching from Fragment to a component","body":"This is a regression test for the refactor hazard we saw in https://github.com/facebook/react/pull/17398#discussion_r348163431.\\r\\nVerified it fails there.","number":17647,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-18T14:48:49Z"},{"id":539613745,"title":"Error: \\"Could not find node with id \\"479\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17646,"user":{"login":"naceur-dev"},"state":"closed","created_at":"2019-12-18T11:09:16Z"},{"id":539581116,"title":"SVG rendering problem","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nSVG is not rendered properly.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nSVG is rendered properly.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nChrome: latest version. Everything else is below.\\r\\n\\r\\nWe have SVG optimizer in our pipeline, but that\'s clearly not a problem as the sprite I get is completely okay and works properly.\\r\\n\\r\\nI suspect this has something to do with React rendering this SVG because I\'ve tried to load the same SVG in CSS and it works (using background-image). I guess React applies some mapping/transforming when rendering SVG and this is failing with this SVG.\\r\\n\\r\\nScreenshot:\\r\\n![Screenshot 2019-12-18 at 10 56 06](https://user-images.githubusercontent.com/15699390/71076166-8ab97b80-2185-11ea-805b-ce018a984f16.png)\\r\\n\\r\\nOriginal SVG:\\r\\n\\r\\n```\\r\\n<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" width=\\"234\\" height=\\"74\\" viewBox=\\"0 0 234 74\\">\\r\\n    <defs>\\r\\n        <linearGradient id=\\"a\\" x1=\\"50%\\" x2=\\"48.864%\\" y1=\\"48.434%\\" y2=\\"51.159%\\">\\r\\n            <stop offset=\\"0%\\" stop-color=\\"#0080FF\\" stop-opacity=\\".5\\"/>\\r\\n            <stop offset=\\"100%\\" stop-color=\\"#0080FF\\" stop-opacity=\\"0\\"/>\\r\\n        </linearGradient>\\r\\n        <linearGradient id=\\"d\\" x1=\\"100%\\" x2=\\"0%\\" y1=\\"50%\\" y2=\\"50%\\">\\r\\n            <stop offset=\\"0%\\" stop-color=\\"#404752\\"/>\\r\\n            <stop offset=\\"85.856%\\" stop-color=\\"#0080FF\\"/>\\r\\n            <stop offset=\\"100%\\" stop-color=\\"#0080FF\\"/>\\r\\n        </linearGradient>\\r\\n        <path id=\\"c\\" d=\\"M43 17h10.694C73.625 17 89.181 37 113 37\\"/>\\r\\n        <filter id=\\"b\\" width=\\"157.1%\\" height=\\"300%\\" x=\\"-28.6%\\" y=\\"-100%\\" filterUnits=\\"objectBoundingBox\\">\\r\\n            <feMorphology in=\\"SourceAlpha\\" operator=\\"dilate\\" radius=\\"2\\" result=\\"shadowSpreadOuter1\\"/>\\r\\n            <feOffset in=\\"shadowSpreadOuter1\\" result=\\"shadowOffsetOuter1\\"/>\\r\\n            <feMorphology in=\\"SourceAlpha\\" radius=\\"2\\" result=\\"shadowInner\\"/>\\r\\n            <feOffset in=\\"shadowInner\\" result=\\"shadowInner\\"/>\\r\\n            <feComposite in=\\"shadowOffsetOuter1\\" in2=\\"shadowInner\\" operator=\\"out\\" result=\\"shadowOffsetOuter1\\"/>\\r\\n            <feGaussianBlur in=\\"shadowOffsetOuter1\\" result=\\"shadowBlurOuter1\\" stdDeviation=\\"6\\"/>\\r\\n            <feColorMatrix in=\\"shadowBlurOuter1\\" values=\\"0 0 0 0 0 0 0 0 0 0.501960784 0 0 0 0 1 0 0 0 1 0\\"/>\\r\\n        </filter>\\r\\n        <path id=\\"e\\" d=\\"M3.549 13.222l-2.771-2.77L7.059 4.16H2.178V.778h11.044v11.044H9.85V6.941z\\"/>\\r\\n        <path id=\\"h\\" d=\\"M120 37h5.132a30 30 0 0 0 9.487-1.54l2.881-.96a23.717 23.717 0 0 1 15 0l13.013 4.338a30 30 0 0 0 18.974 0L197.5 34.5a23.717 23.717 0 0 1 15 0l2.881.96a30 30 0 0 0 9.487 1.54H230\\"/>\\r\\n        <filter id=\\"g\\" width=\\"136.4%\\" height=\\"470.9%\\" x=\\"-18.2%\\" y=\\"-187.2%\\" filterUnits=\\"objectBoundingBox\\">\\r\\n            <feMorphology in=\\"SourceAlpha\\" operator=\\"dilate\\" radius=\\"2\\" result=\\"shadowSpreadOuter1\\"/>\\r\\n            <feOffset in=\\"shadowSpreadOuter1\\" result=\\"shadowOffsetOuter1\\"/>\\r\\n            <feMorphology in=\\"SourceAlpha\\" radius=\\"2\\" result=\\"shadowInner\\"/>\\r\\n            <feOffset in=\\"shadowInner\\" result=\\"shadowInner\\"/>\\r\\n            <feComposite in=\\"shadowOffsetOuter1\\" in2=\\"shadowInner\\" operator=\\"out\\" result=\\"shadowOffsetOuter1\\"/>\\r\\n            <feGaussianBlur in=\\"shadowOffsetOuter1\\" result=\\"shadowBlurOuter1\\" stdDeviation=\\"6\\"/>\\r\\n            <feColorMatrix in=\\"shadowBlurOuter1\\" values=\\"0 0 0 0 0.454901961 0 0 0 0 0.498039216 0 0 0 0 0.533333333 0 0 0 1 0\\"/>\\r\\n        </filter>\\r\\n    </defs>\\r\\n    <g fill=\\"none\\" fill-rule=\\"evenodd\\">\\r\\n        <path fill=\\"url(#a)\\" d=\\"M0 19h53.694C73.625 19 89.181 39 113 39L2.867 34.127A3 3 0 0 1 0 31.13V19z\\"/>\\r\\n        <g stroke-linecap=\\"round\\">\\r\\n            <use fill=\\"#000\\" filter=\\"url(#b)\\" xlink:href=\\"#c\\"/>\\r\\n            <use stroke=\\"url(#d)\\" stroke-width=\\"4\\" xlink:href=\\"#c\\"/>\\r\\n        </g>\\r\\n        <path fill=\\"#0080FF\\" d=\\"M32.284 0H3a3 3 0 0 0-3 3v28a3 3 0 0 0 3 3h29.284a3 3 0 0 0 2.586-1.479l8.235-14a3 3 0 0 0 0-3.042l-8.235-14A3 3 0 0 0 32.284 0z\\"/>\\r\\n        <g transform=\\"translate(12 10)\\">\\r\\n            <mask id=\\"f\\" fill=\\"#fff\\">\\r\\n                <use xlink:href=\\"#e\\"/>\\r\\n            </mask>\\r\\n            <use fill=\\"#000\\" fill-rule=\\"nonzero\\" xlink:href=\\"#e\\"/>\\r\\n            <g fill=\\"#FFF\\" fill-rule=\\"nonzero\\" mask=\\"url(#f)\\">\\r\\n                <path d=\\"M-1-1h16v16H-1z\\"/>\\r\\n            </g>\\r\\n        </g>\\r\\n        <g stroke-dasharray=\\"0,8\\" stroke-linecap=\\"round\\">\\r\\n            <use fill=\\"#000\\" filter=\\"url(#g)\\" xlink:href=\\"#h\\"/>\\r\\n            <use stroke=\\"#404752\\" stroke-width=\\"4\\" xlink:href=\\"#h\\"/>\\r\\n        </g>\\r\\n    </g>\\r\\n</svg>\\r\\n```\\r\\n\\r\\nSprite, copied from Network tab in DevTools:\\r\\n\\r\\n```\\r\\n<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\r\\n    <defs>\\r\\n        <style>\\r\\n            .sprite-symbol-usage {display: none;}\\r\\n            .sprite-symbol-usage:target {display: inline;}\\r\\n        </style>\\r\\n        <symbol viewBox=\\"0 0 234 74\\" id=\\"symbol-voiceLevelStartHigh\\">\\r\\n            <defs>\\r\\n                <path id=\\"symbol-voiceLevelStartHigh_c\\" d=\\"M43 17h10.694C73.625 17 89.181 37 113 37\\"/>\\r\\n                <path id=\\"symbol-voiceLevelStartHigh_e\\"\\r\\n                      d=\\"M3.549 13.222l-2.771-2.77L7.059 4.16H2.178V.778h11.044v11.044H9.85V6.941z\\"/>\\r\\n                <path id=\\"symbol-voiceLevelStartHigh_h\\"\\r\\n                      d=\\"M120 37h5.132a30 30 0 009.487-1.54l2.881-.96a23.717 23.717 0 0115 0l13.013 4.338a30 30 0 0018.974 0L197.5 34.5a23.717 23.717 0 0115 0l2.881.96a30 30 0 009.487 1.54H230\\"/>\\r\\n                <filter id=\\"symbol-voiceLevelStartHigh_b\\" width=\\"157.1%\\" height=\\"300%\\" x=\\"-28.6%\\" y=\\"-100%\\"\\r\\n                        filterUnits=\\"objectBoundingBox\\">\\r\\n                    <feMorphology in=\\"SourceAlpha\\" operator=\\"dilate\\" radius=\\"2\\"\\r\\n                                  result=\\"shadowSpreadOuter1\\"></feMorphology>\\r\\n                    <feOffset in=\\"shadowSpreadOuter1\\" result=\\"shadowOffsetOuter1\\"></feOffset>\\r\\n                    <feMorphology in=\\"SourceAlpha\\" radius=\\"2\\" result=\\"shadowInner\\"></feMorphology>\\r\\n                    <feOffset in=\\"shadowInner\\" result=\\"shadowInner\\"></feOffset>\\r\\n                    <feComposite in=\\"shadowOffsetOuter1\\" in2=\\"shadowInner\\" operator=\\"out\\"\\r\\n                                 result=\\"shadowOffsetOuter1\\"></feComposite>\\r\\n                    <feGaussianBlur in=\\"shadowOffsetOuter1\\" result=\\"shadowBlurOuter1\\" stdDeviation=\\"6\\"></feGaussianBlur>\\r\\n                    <feColorMatrix in=\\"shadowBlurOuter1\\"\\r\\n                                   values=\\"0 0 0 0 0 0 0 0 0 0.501960784 0 0 0 0 1 0 0 0 1 0\\"></feColorMatrix>\\r\\n                </filter>\\r\\n                <filter id=\\"symbol-voiceLevelStartHigh_g\\" width=\\"136.4%\\" height=\\"470.9%\\" x=\\"-18.2%\\" y=\\"-187.2%\\"\\r\\n                        filterUnits=\\"objectBoundingBox\\">\\r\\n                    <feMorphology in=\\"SourceAlpha\\" operator=\\"dilate\\" radius=\\"2\\"\\r\\n                                  result=\\"shadowSpreadOuter1\\"></feMorphology>\\r\\n                    <feOffset in=\\"shadowSpreadOuter1\\" result=\\"shadowOffsetOuter1\\"></feOffset>\\r\\n                    <feMorphology in=\\"SourceAlpha\\" radius=\\"2\\" result=\\"shadowInner\\"></feMorphology>\\r\\n                    <feOffset in=\\"shadowInner\\" result=\\"shadowInner\\"></feOffset>\\r\\n                    <feComposite in=\\"shadowOffsetOuter1\\" in2=\\"shadowInner\\" operator=\\"out\\"\\r\\n                                 result=\\"shadowOffsetOuter1\\"></feComposite>\\r\\n                    <feGaussianBlur in=\\"shadowOffsetOuter1\\" result=\\"shadowBlurOuter1\\" stdDeviation=\\"6\\"></feGaussianBlur>\\r\\n                    <feColorMatrix in=\\"shadowBlurOuter1\\"\\r\\n                                   values=\\"0 0 0 0 0.454901961 0 0 0 0 0.498039216 0 0 0 0 0.533333333 0 0 0 1 0\\"></feColorMatrix>\\r\\n                </filter>\\r\\n            </defs>\\r\\n            <g fill=\\"none\\" fill-rule=\\"evenodd\\">\\r\\n                <path fill=\\"url(#symbol-voiceLevelStartHigh_a)\\"\\r\\n                      d=\\"M0 19h53.694C73.625 19 89.181 39 113 39L2.867 34.127A3 3 0 010 31.13V19z\\"/>\\r\\n                <g stroke-linecap=\\"round\\">\\r\\n                    <use fill=\\"#000\\" filter=\\"url(#symbol-voiceLevelStartHigh_b)\\"\\r\\n                         xlink:href=\\"#symbol-voiceLevelStartHigh_c\\"/>\\r\\n                    <use stroke=\\"url(#symbol-voiceLevelStartHigh_d)\\" stroke-width=\\"4\\"\\r\\n                         xlink:href=\\"#symbol-voiceLevelStartHigh_c\\"/>\\r\\n                </g>\\r\\n                <path fill=\\"#0080FF\\"\\r\\n                      d=\\"M32.284 0H3a3 3 0 00-3 3v28a3 3 0 003 3h29.284a3 3 0 002.586-1.479l8.235-14a3 3 0 000-3.042l-8.235-14A3 3 0 0032.284 0z\\"/>\\r\\n                <g transform=\\"translate(12 10)\\">\\r\\n                    <use fill=\\"#000\\" fill-rule=\\"nonzero\\" xlink:href=\\"#symbol-voiceLevelStartHigh_e\\"/>\\r\\n                    <g fill=\\"#FFF\\" fill-rule=\\"nonzero\\" mask=\\"url(#symbol-voiceLevelStartHigh_f)\\">\\r\\n                        <path d=\\"M-1-1h16v16H-1z\\"/>\\r\\n                    </g>\\r\\n                </g>\\r\\n                <g stroke-dasharray=\\"0,8\\" stroke-linecap=\\"round\\">\\r\\n                    <use fill=\\"#000\\" filter=\\"url(#symbol-voiceLevelStartHigh_g)\\"\\r\\n                         xlink:href=\\"#symbol-voiceLevelStartHigh_h\\"/>\\r\\n                    <use stroke=\\"#404752\\" stroke-width=\\"4\\" xlink:href=\\"#symbol-voiceLevelStartHigh_h\\"/>\\r\\n                </g>\\r\\n            </g>\\r\\n        </symbol>\\r\\n        <linearGradient id=\\"symbol-voiceLevelStartHigh_a\\" x1=\\"50%\\" x2=\\"48.864%\\" y1=\\"48.434%\\" y2=\\"51.159%\\">\\r\\n            <stop offset=\\"0%\\" stop-color=\\"#0080FF\\" stop-opacity=\\".5\\"/>\\r\\n            <stop offset=\\"100%\\" stop-color=\\"#0080FF\\" stop-opacity=\\"0\\"/>\\r\\n        </linearGradient>\\r\\n        <linearGradient id=\\"symbol-voiceLevelStartHigh_d\\" x1=\\"100%\\" x2=\\"0%\\" y1=\\"50%\\" y2=\\"50%\\">\\r\\n            <stop offset=\\"0%\\" stop-color=\\"#404752\\"/>\\r\\n            <stop offset=\\"85.856%\\" stop-color=\\"#0080FF\\"/>\\r\\n            <stop offset=\\"100%\\" stop-color=\\"#0080FF\\"/>\\r\\n        </linearGradient>\\r\\n        <mask id=\\"symbol-voiceLevelStartHigh_f\\" fill=\\"#fff\\">\\r\\n            <use xlink:href=\\"#symbol-voiceLevelStartHigh_e\\"/>\\r\\n        </mask>\\r\\n    </defs>\\r\\n    <use id=\\"symbol-voiceLevelStartHigh-usage\\" xlink:href=\\"#symbol-voiceLevelStartHigh\\" class=\\"sprite-symbol-usage\\"/>\\r\\n</svg>\\r\\n```\\r\\n\\r\\npackage.json\\r\\n\\r\\n```\\r\\n{\\r\\n  \\"main\\": \\"index.js\\",\\r\\n  \\"engines\\": {\\r\\n    \\"node\\": \\">=8\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"@babel/core\\": \\"^7.6.2\\",\\r\\n    \\"@babel/runtime-corejs3\\": \\"^7.6.2\\",\\r\\n    \\"@hot-loader/react-dom\\": \\"^16.9.0\\",\\r\\n    \\"autoprefixer\\": \\"^9.6.4\\",\\r\\n    \\"babel-core\\": \\"^7.0.0-bridge.0\\",\\r\\n    \\"babel-eslint\\": \\"^10.0.3\\",\\r\\n    \\"babel-jest\\": \\"^24.9.0\\",\\r\\n    \\"babel-loader\\": \\"^8.0.5\\",\\r\\n    \\"case-sensitive-paths-webpack-plugin\\": \\"^2.2.0\\",\\r\\n    \\"chalk\\": \\"^2.4.2\\",\\r\\n    \\"connect-history-api-fallback\\": \\"^1.6.0\\",\\r\\n    \\"core-js\\": \\"^3.2.1\\",\\r\\n    \\"css-loader\\": \\"^2.1.1\\",\\r\\n    \\"cssnano\\": \\"^4.1.10\\",\\r\\n    \\"dotenv\\": \\"^8.1.0\\",\\r\\n    \\"dotenv-expand\\": \\"^5.1.0\\",\\r\\n    \\"enzyme\\": \\"^3.9.0\\",\\r\\n    \\"enzyme-adapter-react-16\\": \\"^1.12.1\\",\\r\\n    \\"eslint\\": \\"^5.16.0\\",\\r\\n    \\"eslint-loader\\": \\"^2.1.2\\",\\r\\n    \\"eslint-plugin-import\\": \\"^2.16.0\\",\\r\\n    \\"eslint-plugin-jsx-a11y\\": \\"^6.2.1\\",\\r\\n    \\"eslint-plugin-react\\": \\"^7.16.0\\",\\r\\n    \\"eslint-plugin-react-hooks\\": \\"^1.7.0\\",\\r\\n    \\"express\\": \\"^4.16.4\\",\\r\\n    \\"file-loader\\": \\"^3.0.1\\",\\r\\n    \\"fs-extra\\": \\"^7.0.1\\",\\r\\n    \\"html-webpack-plugin\\": \\"^3.2.0\\",\\r\\n    \\"isomorphic-fetch\\": \\"^2.2.1\\",\\r\\n    \\"jest\\": \\"^24.9.0\\",\\r\\n    \\"mini-css-extract-plugin\\": \\"^0.6.0\\",\\r\\n    \\"node-sass\\": \\"^4.13.0\\",\\r\\n    \\"nodemon\\": \\"^1.19.3\\",\\r\\n    \\"object-assign\\": \\"^4.1.1\\",\\r\\n    \\"optimize-css-assets-webpack-plugin\\": \\"^5.0.1\\",\\r\\n    \\"postcss-flexbugs-fixes\\": \\"^4.1.0\\",\\r\\n    \\"postcss-loader\\": \\"^3.0.0\\",\\r\\n    \\"promise\\": \\"^8.0.3\\",\\r\\n    \\"raf\\": \\"^3.4.1\\",\\r\\n    \\"regenerator-runtime\\": \\"^0.13.2\\",\\r\\n    \\"require-from-string\\": \\"^2.0.2\\",\\r\\n    \\"resolve-url-loader\\": \\"^3.1.0\\",\\r\\n    \\"sass-loader\\": \\"^7.3.1\\",\\r\\n    \\"style-loader\\": \\"^0.23.1\\",\\r\\n    \\"stylelint\\": \\"^9.10.1\\",\\r\\n    \\"stylelint-scss\\": \\"^3.11.1\\",\\r\\n    \\"stylelint-selector-bem-pattern\\": \\"^2.1.0\\",\\r\\n    \\"stylelint-webpack-plugin\\": \\"^0.10.5\\",\\r\\n    \\"svg-sprite-loader\\": \\"^3.8.0\\",\\r\\n    \\"svg-transform-loader\\": \\"^2.0.7\\",\\r\\n    \\"svg-url-loader\\": \\"^2.3.2\\",\\r\\n    \\"svgo\\": \\"^1.2.1\\",\\r\\n    \\"svgo-loader\\": \\"^2.2.0\\",\\r\\n    \\"svgxuse\\": \\"^1.2.6\\",\\r\\n    \\"sw-precache-webpack-plugin\\": \\"^0.11.5\\",\\r\\n    \\"terser-webpack-plugin\\": \\"^1.4.1\\",\\r\\n    \\"url-loader\\": \\"^1.1.2\\",\\r\\n    \\"url-search-params-polyfill\\": \\"^5.1.0\\",\\r\\n    \\"webpack\\": \\"^4.41.0\\",\\r\\n    \\"webpack-dev-middleware\\": \\"^3.7.2\\",\\r\\n    \\"webpack-hot-middleware\\": \\"^2.24.3\\",\\r\\n    \\"webpack-manifest-plugin\\": \\"^2.2.0\\",\\r\\n    \\"yargs\\": \\"^13.2.2\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"axios\\": \\"^0.19.0\\",\\r\\n    \\"classnames\\": \\"^2.2.6\\",\\r\\n    \\"connected-react-router\\": \\"^6.5.2\\",\\r\\n    \\"history\\": \\"^4.10.1\\",\\r\\n    \\"immutable\\": \\"^4.0.0-rc.12\\",\\r\\n    \\"include-media\\": \\"^1.4.9\\",\\r\\n    \\"lodash.debounce\\": \\"^4.0.8\\",\\r\\n    \\"moment\\": \\"^2.24.0\\",\\r\\n    \\"normalize.css\\": \\"^8.0.1\\",\\r\\n    \\"prop-types\\": \\"^15.7.2\\",\\r\\n    \\"query-string\\": \\"^6.8.3\\",\\r\\n    \\"rc-slider\\": \\"^8.7.1\\",\\r\\n    \\"react\\": \\"^16.10.2\\",\\r\\n    \\"react-circular-progressbar\\": \\"^2.0.2\\",\\r\\n    \\"react-datepicker\\": \\"^2.9.6\\",\\r\\n    \\"react-dom\\": \\"^16.10.2\\",\\r\\n    \\"react-hot-loader\\": \\"^4.12.15\\",\\r\\n    \\"react-redux\\": \\"^7.1.1\\",\\r\\n    \\"react-router\\": \\"^5.1.2\\",\\r\\n    \\"react-router-config\\": \\"^5.1.1\\",\\r\\n    \\"react-select\\": \\"^3.0.8\\",\\r\\n    \\"react-smooth-collapse\\": \\"^2.1.0\\",\\r\\n    \\"react-switch\\": \\"^5.0.1\\",\\r\\n    \\"react-tabs\\": \\"^3.0.0\\",\\r\\n    \\"react-transition-group\\": \\"^4.3.0\\",\\r\\n    \\"recompose\\": \\"^0.30.0\\",\\r\\n    \\"redux\\": \\"^4.0.4\\",\\r\\n    \\"redux-devtools-extension\\": \\"^2.13.8\\",\\r\\n    \\"redux-logger\\": \\"^3.0.6\\",\\r\\n    \\"redux-saga\\": \\"^1.1.1\\",\\r\\n    \\"reselect\\": \\"^4.0.0\\",\\r\\n    \\"roboto-fontface\\": \\"^0.10.0\\"\\r\\n  },\\r\\n  \\"scripts\\": {\\r\\n    \\"start\\": \\"node scripts/start.js\\",\\r\\n    \\"build\\": \\"node scripts/build.js\\",\\r\\n    \\"test\\": \\"node scripts/test.js --env=jsdom\\"\\r\\n  },\\r\\n  \\"browserslist\\": [\\r\\n    \\"last 2 Chrome versions\\"\\r\\n  ]\\r\\n}\\r\\n```\\r\\n\\r\\nSVG is rendered using SVGSpriteSymbol component which looks like this:\\r\\n\\r\\n```\\r\\nimport React, {PureComponent} from \'react\';\\r\\nimport PropTypes from \'prop-types\';\\r\\n\\r\\nexport default class SVGSpriteSymbol extends PureComponent {\\r\\n    static propTypes = {\\r\\n        className: PropTypes.string,\\r\\n        spriteSymbol: PropTypes.object.isRequired,\\r\\n    };\\r\\n\\r\\n    static defaultProps = {\\r\\n        className: \'\',\\r\\n    };\\r\\n\\r\\n    render() {\\r\\n        const {className, spriteSymbol, ...restProps} = this.props;\\r\\n        return (\\r\\n            <svg viewBox={spriteSymbol.viewBox} className={className} {...restProps}>\\r\\n                <use xlinkHref={spriteSymbol.url} />\\r\\n            </svg>\\r\\n        );\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nIn case I can help in any case, I\'d love to, just let me know.","number":17645,"user":{"login":"burnmaniac"},"state":"closed","created_at":"2019-12-18T10:09:19Z"},{"id":539574651,"title":"[react-interactions] Re-label Flare as deprecated and remove from RN","body":"This PR cleans up a bunch of stuff in our code base relating to React Flare. Specifically, it renames all the Flare call-sites to be \\"DEPRECATED\\" so it\'s clear that these APIs are going to go away at some point and shouldn\'t be used internally. It also removes React Flare from RN \u2013 where it was never used internally.\\r\\n\\r\\nIf we are to move forward with other event system experiments, this makes it clearer where the old system (Flare) lives and where other systems live; whereas they might have been confused previously.","number":17644,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-18T09:57:30Z"},{"id":539414258,"title":"Add DevTool Extensions Inspected Panel x-direction scrollbar","body":"For someone who keep chrome devtool in right, width is always not enough\\r\\nfix no scrollbar for Inspected Panel so we can drag it to view more info\\r\\n\\r\\n","number":17643,"user":{"login":"moonrailgun"},"state":"closed","created_at":"2019-12-18T02:28:38Z"},{"id":539274065,"title":"Added more forwardRef test cases for DevTools","body":"Follow up for #17613","number":17642,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-17T19:46:56Z"},{"id":539253521,"title":"Build FB RN targets only in experimental mode","body":"Similar to what we already do for WWW.\\r\\n\\r\\nThis will break RN sync script. I need to follow up there to do both a stable _and_ an experimental build (and use the experimental build internally). The perf concern should be mitigated by the fact that we already can just download artifacts.","number":17641,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-17T19:03:20Z"},{"id":539230202,"title":"Move DevTools CI job to experimental workflow","body":"Before https://github.com/facebook/react/pull/17631, each commit would run 22 jobs on master:\\r\\n\\r\\n<img width=\\"538\\" alt=\\"Screen Shot 2019-12-17 at 6 13 05 PM\\" src=\\"https://user-images.githubusercontent.com/810438/71022665-ed186a80-20f8-11ea-9eb1-4b1131c4ace5.png\\">\\r\\n\\r\\nAfter it, only 10 jobs run on master:\\r\\n\\r\\n<img width=\\"538\\" alt=\\"Screen Shot 2019-12-17 at 6 13 00 PM\\" src=\\"https://user-images.githubusercontent.com/810438/71022680-f570a580-20f8-11ea-98f6-74c7d6908eed.png\\">\\r\\n\\r\\nI can\'t figure out why, but putting DevTools build in the \\"stable\\" workflow is the only suspicious thing I can see in that PR. So let\'s try to change that and see if it helps.","number":17640,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-17T18:14:18Z"},{"id":539227989,"title":"[Don\'t merge] Test CI","body":"Something funky is going on with the number of jobs running.","number":17639,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-17T18:09:29Z"},{"id":539130673,"title":"Fix missing stacks in WWW warnings","body":"Oops. I forgot them.","number":17638,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-17T15:15:39Z"},{"id":539049258,"title":"Error: \\"Could not find node with id \\"52381\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17637,"user":{"login":"misnard"},"state":"closed","created_at":"2019-12-17T12:55:30Z"},{"id":538978578,"title":"Lint rule for hooks report error for non hook function starting by `useXXX` ","body":"Declaring non-hook function like:\\r\\n\\r\\n```js\\r\\nimport { useWith, identity } from \\"ramda\\";\\r\\n\\r\\nconst test = useWith(Math.pow, [identity, identity]);\\r\\n```\\r\\n\\r\\ncauses\\r\\n\\r\\n```js\\r\\nReact Hook \\"useWith\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.eslint(react-hooks/rules-of-hooks)\\r\\n```\\r\\n\\r\\nI\'m using latest version of eslint-plugin-react-hooks `2.3.0`\\r\\n\\r\\nIt would be useful to have settings to override this regexp.\\r\\n\\r\\nhttps://github.com/facebook/react/blob/36a6e29bb3eead85e3500ba7269cbcd55516a8fb/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L11-L20\\r\\n\\r\\nI can make PR for it if you think that this is a good idea.","number":17636,"user":{"login":"aizerin"},"state":"closed","created_at":"2019-12-17T10:33:56Z"},{"id":538957948,"title":"Node Process 132 exit code. ","body":"Any idea why always get 132 exit code following coding? This work fine on window platform, but not on Linux platform.\\r\\n\\r\\n$script = \'var d = 1;console.log(d);\';\\r\\nfile_put_contents($tempFilePath, $script);\\r\\n$process = new \\\\Symfony\\\\Component\\\\Process\\\\Process([$this->nodePath, $tempFilePath ], null, null, null, null);\\r\\n$process->mustRun()->getOutput();","number":17635,"user":{"login":"martingg88"},"state":"closed","created_at":"2019-12-17T09:57:08Z"},{"id":538901276,"title":"Src folder missing while running create-react-app command","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI guess its a Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nFiles are missing while creating react project\\r\\n\\r\\nSteps to reproduce.\\r\\nJust run the the :-\\r\\n\\"npx create-react-app my-app\\"\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\ni guess it should produce node modules, public and src folder\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nNA\\r\\n","number":17634,"user":{"login":"mukulgupta977"},"state":"closed","created_at":"2019-12-17T08:01:05Z"},{"id":538774686,"title":"[Fast Refresh] Support injecting runtime after renderer executes","body":"I think this fixes https://github.com/facebook/react/issues/17626 and https://github.com/facebook/react/issues/17552.\\r\\n\\r\\nI was assuming that Fresh runtime always executes before the renderer. But on the web this won\'t be the case if you load React from CDN and *then* run your webpack bundle (https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13). And separating `<script>` tags can be annoying and complicated.\\r\\n\\r\\nInstead, we can handle the simple case \u2014 when ReactDOM executes before the webpack bundle \u2014 gracefully. The DevTools global hook already has a [renderers map](https://github.com/facebook/react/blob/36a6e29bb3eead85e3500ba7269cbcd55516a8fb/packages/react-devtools-shared/src/hook.js#L280) so all we need to connect to them is to read from it. In fact that\'s how DevTools backends themselves [connect to already injected renderers](https://github.com/facebook/react/blob/36a6e29bb3eead85e3500ba7269cbcd55516a8fb/packages/react-devtools-shared/src/backend/index.js#L85-L86).\\r\\n\\r\\nThis still doesn\'t handle the case where you mount some roots *before* injecting the runtime. In that case they won\'t be \\"visible\\" to Fresh. Arguably this is more of a corner case and I wouldn\'t bother solving this yet. The webpack plugin should be able to ensure that injection happens before the actual app code runs.\\r\\n\\r\\nI added a regression test.","number":17633,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-17T01:12:45Z"},{"id":538766090,"title":"Additional test infra changes for toErrorDev rename","body":"I missed these two.","number":17632,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-17T00:48:42Z"},{"id":538731870,"title":"Fix test_build_devtools CI job to run test-build-devtools","body":"We\'re testing the wrong thing in this job. Probably bad copy paste.\\r\\nAs a result, regressions like https://github.com/facebook/react/pull/17599 creep in.\\r\\n\\r\\nFirst commit is a small fix that fixes running it locally after a package got renamed. (The command crashed for me locally otherwise, which made verifying the fix annoying.)\\r\\n\\r\\nThe second commit makes the right command run on CI. It fails, as expected.\\r\\n\\r\\nThe third commit fixes https://github.com/facebook/react/issues/17630.","number":17631,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-16T23:09:09Z"},{"id":538720380,"title":"Fix broken DevTools tests","body":"PR #17599 broke `yarn test-build-devtools`. (b6c423daadaa35da3f34048628df9635505eecb1 is not broken,  0cf22a56a18790ef34c71bef14f64695c0498619 is broken)\\r\\n```\\r\\n    Configuration error:\\r\\n    \\r\\n    Could not locate module shared/consoleWithStackDev mapped as:\\r\\n    /Users/bvaughn/Documents/git/react/build/node_modules/shared/consoleWithStackDev.\\r\\n    \\r\\n    Please check your configuration for these entries:\\r\\n    {\\r\\n      \\"moduleNameMapper\\": {\\r\\n        \\"/^shared\\\\/([^\\\\/]+)$/\\": \\"/Users/bvaughn/Documents/git/react/build/node_modules/shared/$1\\"\\r\\n      },\\r\\n      \\"resolver\\": null\\r\\n    }\\r\\n```","number":17630,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-16T22:47:59Z"},{"id":538681001,"title":"Update DevTools build process to use artifacts from CI","body":"Building (or even testing) DevTools currently requires building lots of artifacts locally e.g.\\r\\n```\\r\\nRELEASE_CHANNEL=experimental \\\\\\r\\n  yarn build \\\\\\r\\n    -- react/index,react-dom,react-is,react-debug-tools,scheduler \\\\\\r\\n    --type=NODE\\r\\n```\\r\\n\\r\\nTo run the DevTools unit tests, you would also need to add `react-test-renderer` to the above list of targets.\\r\\n\\r\\n### Pros\\r\\n* Enables using DevTools to test local changes to react/renderers.\\r\\n\\r\\n### Cons\\r\\n* Slow to build renderers.\\r\\n* Requires installing Java (which causes Mozilla testers to complain).\\r\\n* Error message when you forget to build (or have an incomplete build) is very confusing when trying to e.g. build or run tests.\\r\\n\\r\\nMaybe we should change the default build process to pull the latest (or a specific) build artifact from CI instead?","number":17629,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-16T21:46:19Z"},{"id":538677493,"title":"React Context Wrong Consumer Value","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nContext provider contains the correct value but in the consumer I have the default value : \\r\\n\\r\\n(value = bddf, the correct)\\r\\n![image](https://user-images.githubusercontent.com/1331451/70945061-a5400780-2054-11ea-9065-785d8d77b486.png)\\r\\n\\r\\n(value = cdn, wrong value)\\r\\n![image](https://user-images.githubusercontent.com/1331451/70945071-a8d38e80-2054-11ea-8ac6-da999749c598.png)\\r\\n\\r\\n**Steps to reproduce**\\r\\nI want to make a library that dynamically load the theme.\\r\\nI used create context.\\r\\n\\r\\nI create a simple API for this : \\r\\nhttps://github.com/helabenkhalfallah/react-sg-components/tree/master/packages/sg-ui-core/src\\r\\n\\r\\nI imported this lib as dependencies on my components :\\r\\nhttps://github.com/helabenkhalfallah/react-sg-components/blob/master/packages/sg-button/src/lib/SGButton.jsx#L3\\r\\n\\r\\nAnd inside storybook :\\r\\nhttps://github.com/helabenkhalfallah/react-sg-components/blob/master/packages/storybook/stories/sg-button/SGButtonStory.jsx#L3\\r\\n\\r\\nHowever inside context I get always the default value.\\r\\nWhen I inspect inside the provider I have the correct value but inside consumer I have the default value.\\r\\n\\r\\nI tried also hooks but the same issue.\\r\\n\\r\\nThe idea I don\u2019t want to pass to my components library the current \u2018theme\u2019 but each time the application started, it sets the context and components automatically consume that value.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nConsumer components should have the same value as the provider.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n`\\"react\\": \\"=16.12.0\\"`\\r\\n\\r\\nIs this because I create an npm module for ThemeContext ?\\r\\nI should have an npm package ThemeContext because many apps will consume it :( \\r\\n\\r\\nThanks.","number":17628,"user":{"login":"helabenkhalfallah"},"state":"closed","created_at":"2019-12-16T21:40:19Z"},{"id":538632455,"title":"hooks","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17627,"user":{"login":"FlemmingAndreassen"},"state":"closed","created_at":"2019-12-16T20:21:34Z"},{"id":538611784,"title":"react-refresh + ReactDOM: hot reloading only works when bundling React","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug?\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n_note: I am encountering this issue when using https://github.com/pmmmwh/react-refresh-webpack-plugin, but I believe it\'s an issue with react-refresh itself._\\r\\n\\r\\nThe react-refresh runtime [overrides](https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/react-refresh/src/ReactFreshRuntime.js#L459) `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` to get a reference to the React renderer. In my app, the `inject` method is never called however, because I load react/react-dom from a third-party CDN before my application code. This means that changed components are never actually refreshed in the DOM.\\r\\n\\r\\nI believe the issue is that scripts are loaded in this order:\\r\\n\\r\\n1. react-devtools sets up the global hook\\r\\n2. react/react-dom are loaded on the page, and `inject()` is called\\r\\n3. user code (which is instrumented with the react-refresh babel plugin) is loaded on the page, and `inject()` is monkey-patched\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nFollow the usage steps in the https://github.com/pmmmwh/react-refresh-webpack-plugin repo, but also add `react` and `react-dom` as externals in your Webpack build:\\r\\n```\\r\\nmodule.exports = {\\r\\n  //...\\r\\n  externals: {\\r\\n    react: \'React\',\\r\\n    \'react-dom\': \'ReactDOM\'\\r\\n  }\\r\\n};\\r\\n```\\r\\nthen load those scripts onto the page from a CDN (e.g. unpkg or cdnjs) before the Webpack bundle.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`react-refresh` works the same whether React/ReactDOM are bundled with application code, or loaded via an external script.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8.6 / Chrome / osx\\r\\n","number":17626,"user":{"login":"mxmul"},"state":"closed","created_at":"2019-12-16T19:39:27Z"},{"id":538601575,"title":"Remove renderPhaseUpdates Map","body":"Follow up to #17484, which was reverted due to a bug found in www. ~~(I haven\'t actually found this bug yet, still trying to repro.)~~ Found and fixed\\r\\n\\r\\nAlso addresses a separate bug where updates that are thought to be render phase updates are cleared, but they are actually normal updates: https://github.com/facebook/react/commit/8a347ed024159a5307172ea633a4561160f4a6b9#r36440099","number":17625,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-12-16T19:18:27Z"},{"id":538591138,"title":"React DevTools might retain references to unmounted DOM elements (and their Fibers)","body":"![Screenshot 2019-12-16 10 51 05](https://user-images.githubusercontent.com/793565/70934095-fd91ed80-1ff1-11ea-93b5-746e816585ec.png)\\r\\nThere\'s seems to be circumstances where unmounted DOM/Fibers are kept alive by React DevTools. They\'re kept alive in `primaryFibers`:\\r\\nhttps://github.com/facebook/react/blob/34527063083195558f98108cde10b5d6ad0d6865/packages/react-devtools-shared/src/backend/renderer.js#L772\\r\\n\\r\\nIt seems like a WeakSet would be appropriate and would remove the leak. Otherwise we\'d need to understand why recordUnmount isn\'t called.\\r\\n\\r\\nCC @bvaughn  ","number":17624,"user":{"login":"bgirard"},"state":"open","created_at":"2019-12-16T18:55:33Z"},{"id":538585821,"title":"Revert \\"Remove renderPhaseUpdates Map\\"","body":"Reverts facebook/react#17484\\r\\n\\r\\nSeems like there\'s a bug (https://fburl.com/testinfra/hvcgkcp0). Let\'s revert to unblock the sync.","number":17623,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-16T18:43:36Z"},{"id":538579072,"title":"Test if circleci has problems with branch name","body":"Just testing if my branch names are causing problems (as this was a cause once upon a time)","number":17622,"user":{"login":"necolas"},"state":"closed","created_at":"2019-12-16T18:28:15Z"},{"id":538436898,"title":"Suspense: add messaging when suspense promise neither resolves nor rejects","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nRequest a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf you throw a promise that neither resolves nor rejects, you hit the suspense fallback UI indefinitely and receive no console messaging that helps you debug this.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nAll versions that allow for suspense\\r\\n\\r\\n**Proposed feature**\\r\\nLog a warning to the console if a suspense promise takes longer than a certain amount of time to settle. Here is some code demonstrating what that could look like inside of the react codebase:\\r\\n\\r\\n```js\\r\\ntry {\\r\\n  renderComponent(...);\\r\\n} catch (err) {\\r\\n  if (err && err.then) {\\r\\n    const timeoutId = setTimeout(() => {\\r\\n      console.warn(`A suspense promise triggered in component <Foo /> did not resolve nor reject after 3 seconds. If the promise never settles, the suspense fallback UI will be shown forever.`)\\r\\n    }, 3000)\\r\\n\\r\\n    err.finally(() => {\\r\\n      clearTimeout(timeoutId);\\r\\n    })\\r\\n\\r\\n    // Now actually do all the suspense magicks...\\r\\n  }\\r\\n}\\r\\n```","number":17621,"user":{"login":"joeldenning"},"state":"open","created_at":"2019-12-16T14:12:20Z"},{"id":538422300,"title":"Firefox React DevTools breaks XML formatting","body":"Steps to reproduce:\\r\\n\\r\\n1) Disable all add-ons in Firefox\\r\\n2) Open an URL that points to a XML file\\r\\n3) AS EXPECTED: A pretty-printed XML is shown\\r\\n4) Enable the React DevTools Add-on\\r\\n5) Open the XML file again\\r\\n6) FAIL: Only the content inside the XML tags are shown\\r\\n\\r\\nUsing Firefox Developer Edition 72.0b6 on macOS 10.15.2","number":17620,"user":{"login":"henrik242"},"state":"closed","created_at":"2019-12-16T13:46:30Z"},{"id":538413489,"title":"Error: \\"Could not find node with id \\"674\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. I looked into a change with many commit\\r\\n2. Then tried to navigate to the Ranked tab when I saw the following error.\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17619,"user":{"login":"OttlikG"},"state":"closed","created_at":"2019-12-16T13:30:25Z"},{"id":538343675,"title":"React Fiber in WebAssembly - is it worth it ?","body":"Now that WebAssembly is finally a Web standard, I was wondering if React Fiber could use it for better performance of the React Framework.\\r\\n\\r\\nI\'m willing to try to make a POC ( good way to learn React Fiber and Web Assembly in one shoot ^_^ ). But first, I wanted to know if some work has already been done -- I didn\'t found anything relevant on the repo or with Google, except for this mention https://github.com/facebook/react/issues/7942#issuecomment-254984862.\\r\\n\\r\\nWhat do you think ?","number":17618,"user":{"login":"xurei"},"state":"closed","created_at":"2019-12-16T11:09:37Z"},{"id":538327841,"title":"getDerivedStateFromProps not update state","body":"I have problem when use getDerivedStateFromProps. This is my code \\r\\n\\r\\n```jsx\\r\\n   static getDerivedStateFromProps(nextProps, prevState) {\\r\\n    console.log(\'run here to rerender\', nextProps.userInfo)\\r\\n    let route = [];\\r\\n    nextProps.userInfo.listtab.map((item, index) => {\\r\\n      route.push({\\r\\n        title_vi: item.name_vi,\\r\\n        title_en: item.name_en,\\r\\n        key: item.id.toString(),\\r\\n        is_vip: item.is_vip_price,\\r\\n        flagTab: index\\r\\n      });\\r\\n      console.log(\'Check data item shop:\', item, route)\\r\\n    });\\r\\n    console.log(\\"data rerender tabbar:\\", route)\\r\\n    return { routes: route };\\r\\n  }\\r\\n```\\r\\n\\r\\nWith first console, i\'m get good value and it is what i want. But when second and third console and \\"return\\" value i receive not nextProps, and state not change with new data","number":17617,"user":{"login":"binhit92"},"state":"closed","created_at":"2019-12-16T10:39:48Z"},{"id":538209715,"title":"Use zero-fill right shift instead of Math.floor","body":"For positive numbers, binary displacement is better.\\r\\n","number":17616,"user":{"login":"yisar"},"state":"closed","created_at":"2019-12-16T06:20:57Z"},{"id":538161325,"title":"Why svg can\'t display , but the svg is OK when opened in chrome alone!","body":"  \\"react\\": \\"16.12.0\\",\\r\\n   \\"react-dom\\": \\"16.12.0\\",\\r\\n   \\"react-inlinesvg\\": \\"1.2.0\\",\\r\\n   \\"react-scripts\\": \\"3.0.1\\",\\r\\n   \\"react-svg\\": \\"11.0.3\\"\\r\\n\\r\\nWhy svg can\'t display in React?\\r\\nhttps://codesandbox.io/s/distracted-galois-jlwjp?fontsize=14&hidenavigation=1&theme=dark\\r\\n\\r\\nBut, the svg is OK when opened in chrome alone.\\r\\nhttp://bmw.jingge.com/fault-diagnosis-WebGL/static/media/multimeter.svg\\r\\n![image](https://user-images.githubusercontent.com/5111701/70876581-0fc15b00-1ff5-11ea-8e5e-4f3ba05676cd.png)\\r\\n","number":17615,"user":{"login":"i-fuyun"},"state":"closed","created_at":"2019-12-16T03:14:03Z"},{"id":538115257,"title":"[react-interactions] Event testing library improvements","body":"Introduces a state machine around pointer events to produce more accurate mock\\r\\ntouch events. This allows multi-touch unit tests to be written entirely in\\r\\nterms of mock pointer interactions, while producing the expected\\r\\n\'changedTouches\', \'targetTouches\', and \'touches\' fields for mock touch events.","number":17614,"user":{"login":"necolas"},"state":"closed","created_at":"2019-12-15T22:23:12Z"},{"id":538056609,"title":"fix(dev-tools): fix show correct displayName with forwardRef in Dev Tools","body":"allow set `displayName` after `React.forwardRef()`,\\r\\n\\r\\nmakesure Dev Tools show displayName as same as `getWrappedName` in `shared/getComponentName.js`.\\r\\n\\r\\nIt seems like a regressive bug and fixed in legacy react-devtools(https://github.com/facebook/react-devtools/pull/1154/files), but back now.\\r\\n\\r\\nrefs: \\r\\n- https://github.com/facebook/react-devtools/pull/1154/files\\r\\n- emotion-js/emotion#1692\\r\\n\\r\\n## **Before in React DevTools:**\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/15135943/70863953-778d8c80-1f88-11ea-9fca-07b58cd50b06.png)\\r\\n\\r\\n## **After fixed in React DevTools**\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/15135943/70863947-6c3a6100-1f88-11ea-8bea-ce4baaf90a96.png)\\r\\n\\r\\n","number":17613,"user":{"login":"zthxxx"},"state":"closed","created_at":"2019-12-15T14:12:24Z"},{"id":538031795,"title":"How to setState after window.open finishes  loading?","body":"I have two forms with two buttons,\\r\\n\\r\\nFormA with Button A\\r\\n\\r\\nFormB with Button B\\r\\n\\r\\nWhen I click on Button A, I want to execute the following function:\\r\\n\\r\\n```handleClick() {```\\r\\n\\r\\n```window.open(window.location.href, \'_self\');```\\r\\n\\r\\n   ```this.setState({ showformB: true })```\\r\\n\\r\\n```}```\\r\\n\\r\\n**The final goal is when I click Button B on FormB, the current browser tab should be closed using:**\\r\\n\\r\\n```window.close()```\\r\\n\\r\\n( Because we can not use window.close() unless same page is opened using window.open() )\\r\\n\\r\\nbut this.setState({ showformB: true })  is executed before the page finishes loading, thus, the state is lost before the page finishes loading.\\r\\n\\r\\nSo window.open has Asynchronous behaviour, I have tried many solutions like:\\r\\n\\r\\n```const ww = window.open(window.location.href, \'_self\');```\\r\\n\\r\\n```ww.onload = function() {this.setState({ showBForm: true });};```\\r\\n\\r\\nor \\r\\n\\r\\n```ww.addEventListener(\'load\', function() {{this.setState({ showBForm: true });}, true);```\\r\\n\\r\\nAnd some other solutions, but they all seem absolete,\\r\\n\\r\\nAnd there is no callback function for window.open().\\r\\n\\r\\nAny idea how I can make this work?\\r\\n\\r\\nOr at least a workaround to be able to close the tab when I click Button B \\r\\n","number":17612,"user":{"login":"MimoJSRepo"},"state":"closed","created_at":"2019-12-15T10:33:25Z"},{"id":538029426,"title":"How to use rxjs in reactjs components","body":"Could anybody here please show me some ways to use rxjs in reactjs applications \\r\\nI initialise rxjs in useEffect() and clean all subscribtions up in useEffect() also. \\r\\nHere is the sample code for demonstration: https://stackblitz.com/edit/react-mk99mq\\r\\n\\r\\nThank you guys!","number":17611,"user":{"login":"leminhson2398"},"state":"closed","created_at":"2019-12-15T10:10:25Z"},{"id":538018857,"title":"Error: \\"Could not find node with id \\"44169\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17610,"user":{"login":"cissygao"},"state":"closed","created_at":"2019-12-15T08:17:48Z"},{"id":537986655,"title":"Controlled numeric input gets cleared when unfocused","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI would like to report a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nA numeric input field gets cleared accidentally on several occasions.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n1. Open [this sandbox](https://codesandbox.io/embed/sad-rgb-mltuj)\\r\\n2. Type \u201c12.\u201d into the field, with the trailing decimal separator\\r\\n3. Unfocus the control\\r\\n4. Append \u201c.\u201d to the field\u2019s value to see \u201c12..\u201d\\r\\n5. Unfocus the control once again and see that the number has completely disappeared\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSimilar to how uncontrolled inputs work (remove the `value` prop and then repeat the steps above), the input should not be cleared on blur.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI\u2019m using React 16.12.0 and experienced the same behavior with the latest version of Chrome and iOS Safari. Regarding this bug, I have no experience with previous versions of React.\\r\\n","number":17609,"user":{"login":"kripod"},"state":"open","created_at":"2019-12-15T01:10:16Z"},{"id":537983022,"title":"DevTools context menu","body":"Inspired by built-in browser console options, this PR adds the ability to copy specific props/state/context/hooks values to the clipboard and to store them in a global variables (`$reactTemp`).\\r\\n\\r\\n## Checklist\\r\\n- [x] Add context menu component and hook.\\r\\n- [x] Add backend commands for copying variables, storing global values, and inspecting attributes (works similarly to pre-existing pattern for inspecting React components).\\r\\n- [x] Wire up context menu and backend commands to enable interacting with selected element props/state/hooks/context.\\r\\n- [x] Add unit tests to cover new behavior.\\r\\n- [x] Add `DevTools` props for enabling new behavior per environment. (Disabled for React Native for now.)\\r\\n\\r\\n## New context menu options\\r\\n![Copy and store-as-global demo video](https://user-images.githubusercontent.com/29597/71118140-56958900-218c-11ea-92a9-5a0c121ddf62.gif)\\r\\n\\r\\n## Works for nested values\\r\\n![Demo of inspecting arbitrary props](https://user-images.githubusercontent.com/29597/70856262-4aa87f00-1e8d-11ea-986f-5950e5859e95.gif)\\r\\n","number":17608,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-15T00:20:09Z"},{"id":537956656,"title":"Pattern for \\"onchange\\" callbacks","body":"**What is the current behavior?**\\r\\n\\r\\nI have the situation, where i have a component, which should call a callback-function given in props when something, in that case a state changes.\\r\\n\\r\\nin classic class-components this would have happened in componentdidupdate and calling the onchange-function of the props.\\r\\n\\r\\nHowever, in hooks i have a slight problem: \\r\\n\\r\\nI have thought of this:\\r\\n\\r\\n`useEffect(() => {\\r\\n props.onchange(state)\\r\\n}, [state]);`\\r\\n\\r\\nHowever, this does not work. eslint forces me to also insert the onchange-method given from props to the dependencies. This, of course, would result in calling the onchange method, when the onchange-method given in props changes, which is not expected behaviour.\\r\\n\\r\\nI have found a workaround, with wrapping the callback-function in a useref in another useeffect targeting and calling the ref.current in the useffect for the state. But this seems to me like a quite complicated and not as straightforward solution, like it was in class-components.\\r\\n\\r\\nAre there any patterns for solving this?\\r\\n","number":17607,"user":{"login":"LeopoldLerch"},"state":"open","created_at":"2019-12-14T19:45:45Z"},{"id":537956411,"title":"react native","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17606,"user":{"login":"arshadkamran"},"state":"closed","created_at":"2019-12-14T19:43:21Z"},{"id":537947673,"title":"Rename toWarnDev -> toErrorDev, toLowPriorityWarnDev -> toWarnDev","body":"Continues https://github.com/facebook/react/pull/17599.\\r\\nPart of https://github.com/facebook/react/issues/16753.\\r\\n\\r\\nThis renames the matchers to match the console method names, now that we use console directly:\\r\\n\\r\\n- `toWarnDev` -> `toErrorDev` (because it captures `console.error` calls)\\r\\n- `toLowPriorityWarnDev` -> `toWarnDev` (because it captures `console.warn` calls)\\r\\n\\r\\nI initially considered more explicit names like `toConsoleErrorDev` but it\'s annoying when it\'s used so much. Arguably there could be some confusion between `toThrow` and `toErrorDev`, but the `*Dev` suffix in my opinion is sufficient to remember which one does what.","number":17605,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-14T18:24:30Z"},{"id":537943173,"title":"Use matching test command for equivalence tests","body":"Extracted out of https://github.com/facebook/react/pull/17599.\\r\\nThis ensures the nested run of Jest uses the configuration matching the outer one.\\r\\nPreviously, it would always run source DEV tests \u2014 even if we\'re testing a PROD bundle.","number":17604,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-14T17:46:21Z"},{"id":537937892,"title":"Error: \\"Could not find node with id \\"39\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17603,"user":{"login":"alexzhurov"},"state":"closed","created_at":"2019-12-14T16:58:28Z"},{"id":537918102,"title":"haml","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17602,"user":{"login":"fonixphil"},"state":"closed","created_at":"2019-12-14T14:04:27Z"},{"id":537859254,"title":"Too many re-renders error in react-native","body":"Hi, I am getting an error that says that react limits the number of renders to prevent infinite loops please help.\\r\\n\\r\\nIt says the error is accuring in the app.js fine.\\r\\n```js\\r\\nimport React from \\"react\\";\\r\\nimport { createAppContainer, createSwitchNavigator } from \\"react-navigation\\";\\r\\nimport { createStackNavigator } from \\"react-navigation-stack\\";\\r\\nimport { createBottomTabNavigator } from \\"react-navigation-tabs\\";\\r\\nimport AccountScreen from \\"./src/screens/AccountScreen\\";\\r\\nimport CreateScreen from \\"./src/screens/CreateScreen\\";\\r\\nimport HomeScreen from \\"./src/screens/HomeScreen\\";\\r\\nimport ItemDetailScreen from \\"./src/screens/ItemDetailScreen\\";\\r\\nimport SigninScreen from \\"./src/screens/SigninScreen\\";\\r\\nimport SignupScreen from \\"./src/screens/SignupScreen\\";\\r\\nimport { Provider as AuthProvider } from \\"./src/context/AuthContext\\";\\r\\nimport { setNavigator } from \\"./src/navigationRef\\";\\r\\n\\r\\nconst switchNavigator = createSwitchNavigator({\\r\\n  loginFlow: createStackNavigator({\\r\\n    Signup: SignupScreen,\\r\\n    Signin: SigninScreen\\r\\n  }),\\r\\n  mainFlow: createBottomTabNavigator({\\r\\n    itemListFlow: createStackNavigator({\\r\\n      Home: HomeScreen,\\r\\n      ItemDetail: ItemDetailScreen\\r\\n    }),\\r\\n    Create: CreateScreen,\\r\\n    Account: AccountScreen\\r\\n  })\\r\\n});\\r\\n\\r\\nconst App = createAppContainer(switchNavigator);\\r\\n\\r\\nexport default () => {\\r\\n  return (\\r\\n    <AuthProvider>\\r\\n      <App \\r\\n        ref={navigator => {\\r\\n          setNavigator(navigator)\\r\\n        }}\\r\\n      />\\r\\n    </AuthProvider>\\r\\n  );\\r\\n};\\r\\n```\\r\\nThis is the AuthContext-\\r\\n```js\\r\\nimport { AsyncStorage } from \\"react-native\\";\\r\\nimport createDataContext from \\"./createDataContext\\";\\r\\nimport sellerApi from \\"../api/seller\\";\\r\\nimport { navigate } from \\"../navigationRef\\";\\r\\n\\r\\nconst authReducer = (state, action) => {\\r\\n  switch (action.type) {\\r\\n    case \\"add_error\\":\\r\\n      return { ...state, errorMessage: action.payload };\\r\\n    case \\"signup\\":\\r\\n      return { errorMessage: \\"\\", token: action.payload };\\r\\n    case \\"signin\\":\\r\\n      return { errorMessage: \\"\\", token: action.payload };\\r\\n    case \\"clear_error_message\\":\\r\\n      return { ...state, errorMessage: \\"\\" };\\r\\n    default:\\r\\n      return state;\\r\\n  }\\r\\n};\\r\\n\\r\\nconst tryLocalSignin = dispatch => async () => {\\r\\n  const token = await AsyncStorage.getItem(\\"token\\");\\r\\n  if (token) {\\r\\n    dispatch({ type: \\"signin\\", payload: token });\\r\\n    navigate(\\"Home\\");\\r\\n  } else {\\r\\n    navigate(\\"loginFlow\\");\\r\\n  }\\r\\n};\\r\\n\\r\\nconst clearErrorMessage = dispatch => {\\r\\n  dispatch({ type: \\"clear_error_message\\" });\\r\\n};\\r\\n\\r\\nconst signup = dispatch => async ({ name, phone, email, password }) => {\\r\\n  try {\\r\\n    const response = await sellerApi.post(\\"/api/users\\", {\\r\\n      name,\\r\\n      phone,\\r\\n      email,\\r\\n      password\\r\\n    });\\r\\n    //this is the other place the error might be happening i need this to save in the phone local storage\\r\\n    await AsyncStorage.setItem(\\"token\\", response.data);\\r\\n    console.log(response.data);\\r\\n    dispatch({ type: \\"signup\\", payload: response.data.token });\\r\\n\\r\\n    navigate(\\"Home\\");\\r\\n  } catch (err) {\\r\\n    dispatch({ type: \\"add_error\\", payload: \\"FAIL\\" });\\r\\n  }\\r\\n};\\r\\n\\r\\nconst signin = dispatch => async ({ email, password }) => {\\r\\n  try {\\r\\n    const response = await sellerApi.post(\\"/api/auth\\", {\\r\\n      email,\\r\\n      password\\r\\n    });\\r\\n    await AsyncStorage.setItem(\\"token\\", response.data);\\r\\n    console.log(response.data);\\r\\n    dispatch({ type: \\"signin\\", payload: response.data.token });\\r\\n\\r\\n    navigate(\\"Home\\");\\r\\n  } catch (err) {\\r\\n    dispatch({ type: \\"add_error\\", payload: \\"FAIL\\" });\\r\\n  }\\r\\n};\\r\\nconst signout = dispatch => {\\r\\n  return () => {};\\r\\n};\\r\\n\\r\\nexport const { Provider, Context } = createDataContext(\\r\\n  authReducer,\\r\\n  { signup, signin, signout, clearErrorMessage, tryLocalSignin },\\r\\n  { token: null, errorMessage: \\"\\" }\\r\\n);\\r\\n```\\r\\nPlease help.","number":17601,"user":{"login":"samibaghban"},"state":"closed","created_at":"2019-12-14T03:29:03Z"},{"id":537788138,"title":"Error: \\"Could not find node with id \\"26038\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Start profile recording\\r\\n2. Click once a component (some components will hide)\\r\\n3. Stop profile recording\\r\\n4. Click \\"Ranked\\" tab\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17600,"user":{"login":"dmitryrn"},"state":"closed","created_at":"2019-12-13T21:36:24Z"},{"id":537749557,"title":"Use console directly instead of warning() modules","body":"Picking up where #17568 and https://github.com/facebook/react/pull/17586 left.\\r\\nRelated to https://github.com/facebook/react/issues/16753.\\r\\n\\r\\nThis replaces four custom modules in the source with direct calls:\\r\\n\\r\\n- `shared/warning` -> `console.error`\\r\\n- `shared/warningWithoutStack` -> `console.error`\\r\\n- `shared/lowPriorityWarning` -> `console.warn`\\r\\n- `shared/lowPriorityWarningWithoutStack` -> `console.warn`\\r\\n\\r\\n**To review, you want to look at the [second commit](https://github.com/facebook/react/pull/17599/commits/06478a670008c003e853888b608aa58eb9ae0a09?w=1) because the first one is just a find-replace.**\\r\\n\\r\\nHere\'s a few points about the new system.\\r\\n\\r\\n## Not Removed in Prod\\r\\n\\r\\nWe\'re not doing anything special to remove `console.error` or `console.warn` calls in prod anymore. If you keep them, they\'ll be there. We *do* have a linter plugin that tells you to wrap it in DEV. I audited existing cases where it fails, and added suppressions where it was intentional.\\r\\n\\r\\n## Stack Is Injected Automatically\\r\\n\\r\\nYou don\'t need to choose whether to inject the stack. If you use `console.error`, it will be injected automatically, as long as the package from which you\'re calling it has access to the React object. Alternatively, it will keep your `console.error` as is in the source (no stack). DevTools would likely pick it up though anyway.\\r\\n\\r\\nNote: in the future we might completely remove the stack injection and always rely on DevTools and similar mechanisms (e.g. RN integration) to inject it.\\r\\n\\r\\n## Escape Hatches\\r\\n\\r\\nIf you want to use the \\"raw\\" `console.error` or `console.warn` for whatever reason, you can do it like this:\\r\\n\\r\\n```js\\r\\nconsole[\'error\'](\'hahaha\');\\r\\n```\\r\\n\\r\\nThis will use the native `console.error` *in DEV too*. Practically, this means we won\'t try to append the stack, prepend the `Warning:` marker (which is currently relied on by RN), or go through the WWW whitelist. There\'s only a few places that we do this.\\r\\n\\r\\n## Gotchas\\r\\n\\r\\nWe have two modules that don\'t have access to the isomorphic React package: `scheduler` and `react-is`. So we can\'t append the stacks. **This means `console.error` calls inside of these two packages won\'t get transformed even in DEV for real bundles \u2014 <s>they\'ll stay as `console.error`.** But in our tests, they would be transformed.</s> (I changed this to fail the build.)\\r\\n\\r\\nWe barely have any warnings there, and both are meant to be lightweight. So I think it\'s okay. The fact that they don\'t go through the WWW list can be confusing. But in longer term we want to get rid of the special `warning` entry point altogether. In that world, we would have the list be a list of warnings to *mute*, and pass everything else through.\\r\\n\\r\\nTo get there, we\'ll need to enforce that the React warning list\xa0matches WWW list 1:1. We\'d need to get buy-in from other teams for that to work out. In the meantime, I don\'t expect we\'ll add a lot of new warnings to either `scheduler` or `react-is` anyway.\\r\\n\\r\\nIf this gotcha ends up being a pain, we can always have a second \\"compile target\\" that exists solely to make these warnings go through the WWW list anyway.\\r\\n\\r\\n## Risks\\r\\n\\r\\nLet\'s sync WWW carefully after this. We need to verify nothing broke and warnings still fire. I can do this.\\r\\n\\r\\n## Follow-ups\\r\\n\\r\\nOut of scope of this PR, but after landing this I\'m planning to rename `toWarnDev` to `toErrorDev` (because it\'s for `console.error`), and `toLowPriorityWarnDev` to `toWarnDev` (because it\'s for `console.warn`). Then I plan to audit the warnings and split them into these two levels according to whether they represent real issues or not.\\r\\n\\r\\nAdditionally, I\'ll remove the cases where we detect presence of custom stack first before appending it. Instead, we\'ll set the current fiber.","number":17599,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-13T19:57:56Z"},{"id":537527306,"title":"variable declaration is not working in eval","body":"eval(var a = 10); console.log(b)\\r\\nthis works in normal javascript code and variable is declared in outer scope.\\r\\n\\r\\nBut when I do the same in the render function, it doesn\'t work.\\r\\n\\r\\nSome react Guru please help.","number":17598,"user":{"login":"mayank-kansal15"},"state":"closed","created_at":"2019-12-13T12:35:19Z"},{"id":537495570,"title":"ReactFiberBeginWork: finishClassComponent: \u0441heck `instance` before call of `instance.render`","body":"https://github.com/facebook/react/blob/b15bf36750ca4c4a5a09f2de76c5315ded1258d0/packages/react-reconciler/src/ReactFiberBeginWork.js#L845\\r\\n\\r\\nIn function `finishClassComponent` in some cases `const instance = workInProgress.stateNode` can be `undefined`.\\r\\n\\r\\nSo you need to check `instance` before call `instance.render()`\\r\\n","number":17597,"user":{"login":"vithar"},"state":"closed","created_at":"2019-12-13T11:21:27Z"},{"id":537455833,"title":"onContextMenu event does not get fired on iOS 13.1","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nonContextMenu event does not get fired on iOS 13.1 when long-pressing on an iPhone.\\r\\n\\r\\nhttps://codesandbox.io/s/awesome-wilson-t1yy3\\r\\n\\r\\nClicking the gray rectangle should print \'onClick\', which it does on all platforms I tested.\\r\\nLong-pressing/right-clicking on the gray rectangle should print \'onContextMenu\', which it does on windows and android, but not on iOS. Tested on both chrome and safari.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe expected behaviour on iOS is that long-pressing the gray rectangle should print \'onContextMenu\'.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.12.0\\r\\niOS 13.1","number":17596,"user":{"login":"Finomnis"},"state":"closed","created_at":"2019-12-13T10:01:18Z"},{"id":537430907,"title":"[HMR] Waiting for update signal from WDS...","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWith react-scripts@3.3.0, `[HMR] Waiting for update signal from WDS...` is written to the console after running npm start.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNo console statement is produced.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nObserved in react-scripts@3.3.0 but not observed in react-scripts@3.2.0\\r\\n","number":17595,"user":{"login":"leantide"},"state":"closed","created_at":"2019-12-13T09:10:01Z"},{"id":537427200,"title":"DevTools: Profiler: Enable correlating console logs to profiler output (and vice versa)","body":"A challenge with the React DevTools profiler is that it\'s too hard to correlate profiler results with console logs. This makes diagnosing and fixing render performance issues much more difficult.\\r\\n\\r\\nFor example, yesterday I was debugging an app where each render usually took 10ms-20ms except every 20-30 renders it\'d take 600-800ms.  It was frustrating that I didn\'t have a way to correlate the profiler UI (which told me which renders were problematic) with the verbose console log output that might tell me exactly what went wrong during those renders. Instead I had to comb through logs and guess which output came from \\"bad\\" renders. This was tedious and error-prone.\\r\\n\\r\\nAnyway, my proposal is for React DevTools to make it easy to correlate profiler results with console log output.  Both directions would be useful:\\r\\n1) **navigate from logs to profiler** - if I see a suspicious line in the logs, I\'d like to easily navigate to the profiler with the specific component/commit selected that was running when the line was logged.\\r\\n2) **navigate from profiler to logs** - if I see a suspiciously long commit, I\'d like to select it in the profiler pane and have an easy way to see associated logs.\\r\\n\\r\\nI don\'t have a strong opinion about how this should be accomplished, but below are a few ideas to spur discussion.\\r\\n\\r\\nA minimal solution could be something like this: \\r\\na) The profiler assigns a unique ID to each commit\\r\\nb) The profiler\'s right pane would show the ID for each commit\\r\\nc) React would add a new hook that\'d return that ID\\r\\nd) Userland code could include the ID in logs.\\r\\n\\r\\nJust this minimal support would be a vast improvement.\\r\\n\\r\\nIf we wanted to make it smoother, here\'s a few ideas that could be layered on top.\\r\\n\\r\\n1. **Profiler->Console Links** The ID in the profiler UI could be a hyperlink that\'d open the console drawer and put the ID in the console\'s CMD+F search box. This would be one-click navigation from profiler to logs. I don\'t know if Chrome allows this kind of cross-pane control, over the console UI so this might not be practical.\\r\\n\\r\\n2. **Console -> Profiler Links**  For one-click logging in the other direction., we could have a special URL format (e.g. `react://profiler/commit/2c1056b5-1be1-43d4-a105-1d840cf4f9c3`) that would enable userland code to emit links in the console that, when clicked, would navigate to the specific commit (in the profile pane) that was active when the logs were emitted. Similar caveat as above: I\'m not sure if chrome extensions can be \\"deeplinked\\" like this. \\r\\n\\r\\n3. **Log Components Where** Building on (1) and (2) above, we could enable console<->profiler linking without requiring changes to userland code. We could have a profiler setting (e.g. \\"log components where\\" with UX like \\"hide components where\\") that, when active, would emit a line to the console log at the start of each render of a matching component. The output would link back to the profiler, e.g. \\r\\n`[RDT] Starting MyCoolComponent (react://profiler/commit/2c1056b51be143d4a1051d840cf4f9c3)`.\\r\\n\\r\\nWhat do you think? I\'m unfamiliar with React and RDT internals so there might be much better ways to solve log<->profiler correlation than my naive ideas above. But at least I wanted to call out the problem and encourage discussion about a solution.\\r\\n","number":17594,"user":{"login":"justingrant"},"state":"open","created_at":"2019-12-13T09:01:35Z"},{"id":537392076,"title":"validateDOMNesting incorrectly validates <tr> - children of <table>","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nvalidateDOMNesting shows warning when`<tr>` used as a child of  `<table>`, after any `<caption>`, `<colgroup>` and `<thead>` but only if there no `<tbody>` are children of the `<table>`.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/empty-rgb-s5x9w\\r\\nIn the console, you will see warning: `validateDOMNesting(...): <tr> cannot appear as a child of <table>. Add a <tbody> to your code to match the DOM tree generated by the browser.`\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAccording to [`<tr>` definition from W3C](https://www.w3.org/TR/html52/tabular-data.html#the-tr-element),  warning should not be showed for the situation.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.12.0, Windows 10, 1909(64bit), Chrome 79.0.3945.79,\\r\\n","number":17593,"user":{"login":"mukkurum"},"state":"closed","created_at":"2019-12-13T07:27:54Z"},{"id":537321631,"title":"Error: \\"Could not find node with id \\"5\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17592,"user":{"login":"petersantoso94"},"state":"closed","created_at":"2019-12-13T02:58:09Z"},{"id":537296304,"title":"Remove unstable_withSuspenseConfig","body":"We don\'t need this now that the higher level APIs, `useTransition` and `useDeferredValue`, are built in.","number":17591,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-12-13T01:13:43Z"},{"id":537249053,"title":"Undefined value in a checkbox becomes an empty string","body":"Hello!\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** \\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?** \\r\\n\\r\\nWhen rendering a `input[type=\\"checkbox\\"]`, ReactDOM adds a `value` attribute to the `input` element even if the `value` prop is `undefined`.\\r\\n\\r\\n```js\\r\\nReactDOM.render(<input type=\\"checkbox\\" value={undefined} />, el);\\r\\n// renders as <input type=\\"checkbox\\" value=\\"\\" />, value is an empty string\\r\\n\\r\\nReactDOM.render(<input type=\\"checkbox\\" />, el);\\r\\n// renders as <input type=\\"checkbox\\" />, value is browser default of \\"on\\"\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/react-checkbox-value-jwh7x\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n[A checkbox without a `value` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value) should default to `value=\\"on\\"`. I would have expected React not to add the `value` attribute to a checkbox if `value={undefined}`. This would allow the checkbox to follow the default browser behavior.\\r\\n\\r\\nI stumbled upon this after [adding an optional `value` prop to Thumbtack\'s `Checkbox` React component](https://github.com/thumbtack/thumbprint/pull/502). The seemingly backwards compatible PR broke at least one sever endpoint that was checking for the \\"truthyness\\" of the checkbox value. Before the PR, the checkbox value defaulted to `on`. After the PR, it became `\\"\\"`.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis should affect all browsers and OS\'s. I\'m not sure which version of React this was introduced it, but it doesn\'t seem to be a recent regression. (Happy to dig in more here if needed.)\\r\\n\\r\\n***\\r\\n\\r\\nI think this happens because `ReactDOMInput.js` sets `node._wrapperState.initialValue` to `\\"\\"` if the `value` prop is `undefined`:\\r\\n\\r\\nhttps://github.com/facebook/react/blob/12c000412d05c4a6079b4f57f721a40b8cea374d/packages/react-dom/src/client/ReactDOMInput.js#L114-L122\\r\\n\\r\\nPerhaps there should be a check here for `props.type` so that `defaultValue` remains `undefined` for checkboxes? I\'d be happy to submit a PR if this is a bug. Thanks!","number":17590,"user":{"login":"danoc"},"state":"open","created_at":"2019-12-12T22:32:04Z"},{"id":537197331,"title":"[react-interactions] Mock touchend event should use empty array for \\"touches\\"","body":"The \'touches\' value should be an empty array rather than \'null\'","number":17589,"user":{"login":"necolas"},"state":"closed","created_at":"2019-12-12T20:29:57Z"},{"id":537163615,"title":"Improved selection and toggling for props/hooks/state","body":"1. Enable nested values to be expanded/collapsed by clicking on values as well as keys.\\r\\n2. Enable keys and values to be selectable (for copy-pasting purposes)\\r\\n\\r\\n### Before\\r\\n![aKapture 2019-12-12 at 11 14 28](https://user-images.githubusercontent.com/29597/70741651-a2e65200-1cd0-11ea-9751-df015432c7b3.gif)\\r\\n\\r\\n### After\\r\\n![b-Kapture 2019-12-12 at 11 13 00](https://user-images.githubusercontent.com/29597/70741639-9a8e1700-1cd0-11ea-9c28-a56e3a95edec.gif)\\r\\n","number":17588,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-12T19:15:24Z"},{"id":537130621,"title":"ignore me","body":"todo","number":17587,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-12T18:01:08Z"},{"id":537009797,"title":"Add component stacks to (almost) all warnings","body":"As the title says. This adds component stacks to all warnings except the ones where a package doesn\'t have peer or dep on React (such as `react-is`). Concretely, we switch over from `warningWithoutStack` to `warning`, and from `lowPriorityWarningWithoutStack` to `lowPriorityWarning`, wherever possible. Tests are adjusted accordingly.\\r\\n\\r\\nThere are three reasons for this.\\r\\n\\r\\n1. Stacks are generally useful. More and consistent is better.\\r\\n1. We want to move towards just writing `console.error` and `console.warn` in the source code, and having a Babel plugin call the wrapper with extra logic. So it\'s inconvenient to have this distinction.\\r\\n1. Even for warnings that don\'t *currently* have stacks, they\'re actually already being added by React DevTools anyway. So the distinction hasn\'t mattered for a while.\\r\\n\\r\\nWhat if the stack is misleading or not concrete enough? For example, maybe we have a better stack we want to pass. We do the same thing DevTools does in that case. If the last argument *already* looks like a component stack, we don\'t append an extra one.\\r\\n\\r\\nNotably, this adds component stacks to SSR hydration mismatch warnings. They can still sometimes be misleading but it\'s better than nothing.\\r\\n\\r\\nSome tests still have `{withoutStack: true}`. This is not because we *can\'t* emit them, but because in those particular tests we\'re just not inside of a tree. So we\'re keeping the assertion mechanism for that to avoid regressions.\\r\\n\\r\\nIn a follow-up, I will codemod to `console.error` / `console.warn` calls and a Babel plugin for the wrappers. This will also allow us to choose the right version of the wrapper depending on whether a package depends on React or not.","number":17586,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-12-12T14:25:12Z"},{"id":536982614,"title":"[react-events] Remove lastNativeEvent in favor of EventSystemFlags","body":"This is a follow up to https://github.com/facebook/react/pull/17582.\\r\\n\\r\\nNotably, this removes the usage of storing the `lastNativeEvent` in a binding in the EnterLeavePlugin module \u2013 which can leak memory. Instead, we utilize the EventSystemFlags system which was recently exposed to EventPlugins by @sebmarkbage\'s work on the event replay system.\\r\\n\\r\\nWe mark when the EventPlugin is handling the first ancestor on the flags directly, meaning we don\'t need to monkey patch the native events or use WeakSets/Sets to achieve the goal \u2013 removing the use case of `lastNativeEvent`.","number":17585,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-12T13:36:51Z"},{"id":536939619,"title":"Fix for the standalone devtools not responding to clicks.","body":"Fixes issues [17522 ](https://github.com/facebook/react/issues/17522)and [17532](https://github.com/facebook/react/issues/17532)\\r\\nThe React Standalone Devtools seem unresponsive / frozen due to being unable to click on the components or profiler child divs (the tree inspector).\\r\\nThis is due to `-webkit-app-region: drag` being applied to the whole container of the react-devtools, electron swallows all the click events on any element with the drag attribute attached. \\r\\n\\r\\nIt\'s a simple fix, just add `-webkit-app-region:no-drag` to any items that need to be interacted with. \\r\\n _The above fix had already been highlighted in issue thread - 17522._ \\r\\n","number":17584,"user":{"login":"cwatson88"},"state":"closed","created_at":"2019-12-12T12:09:28Z"},{"id":536858977,"title":"Bug: React table - Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nHello,\\r\\nI am new in React and I am trying to create a simple react table to display data from db with login for user authentication. \\r\\nUntil I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls. \\r\\n\\r\\nFirst, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nEdit: login, password: admin, admin\\r\\n\\r\\nhttps://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\\r\\nhttps://codesandbox.io/embed/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\\r\\n[![Edit black-voice-2z6y5](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark)\\r\\n![error_message](https://user-images.githubusercontent.com/26010477/70700296-cf976b00-1cca-11ea-9c65-e2ba84d25d51.png)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nnodejs version v8.10.0\\r\\nnpm version 6.13.3\\r\\nubuntu/chrome\\r\\n\\r\\nPlease give me any advice. Thank you in advance :) \\r\\n","number":17583,"user":{"login":"lyvija"},"state":"closed","created_at":"2019-12-12T09:34:37Z"},{"id":536711466,"title":"Hold on to the lastNativeEvent weakly so as not to retain fibers belonging to long-ago unmounted DOM nodes","body":"The event that we store in `lastNativeEvent` has a reference to its related DOM nodes which has a reference to some `FiberNode` instances. When a component unmounts we don\'t want to retain any of that.\\r\\n\\r\\nThis PR stores the `lastNativeEvents` that we\'ve seen in a `WeakSet` so as not to cause them to be retained. Where `WeakSet` is not supported, we use a shim that does what the old thing used to do (and leaks like it too).\\r\\n\\r\\nHere\'s a snapshot of one of these leaks in the Chrome Memory profiler. `tk` is `FiberNode` and `tl` is `lastNativeEvent`.\\r\\n\\r\\n<img width=\\"697\\" alt=\\"Screen Shot 2019-12-11 at 5 54 58 PM\\" src=\\"https://user-images.githubusercontent.com/13243/70675938-6d455880-1c3f-11ea-9463-17ead835eb8d.png\\">\\r\\n\\r\\nThis aims to address #17580. Credit for the idea to use `WeakSet` goes to @bgirard!","number":17582,"user":{"login":"steveluscher"},"state":"closed","created_at":"2019-12-12T01:55:43Z"},{"id":536707451,"title":"Input nodes leaked by the browser retain React fibers","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n\ud83d\udc1b \\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nBrowsers retain references to inputs in their undo stacks, which in turn retain React fibers (including `memoizedProps`)\\r\\n\\r\\nSee https://bugs.chromium.org/p/chromium/issues/detail?id=1029189\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://jsfiddle.net/altxg/nzu6ab5e/3/\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAlthough the leak originates from the browser, it might be helpful if React detached internal fiber references from input and contenteditable nodes on unmount\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nAll versions of React as far as I know.\\r\\nI can reproduce the leak on Chrome and Firefox on Mac\\r\\n\\r\\n---\\r\\n\\r\\nPotentially related issues:\\r\\nhttps://github.com/facebook/react/issues/12692\\r\\nhttps://github.com/facebook/react/issues/16087","number":17581,"user":{"login":"albertxing"},"state":"open","created_at":"2019-12-12T01:40:26Z"},{"id":536696142,"title":"lastNativeEvent retains unmounted elements & fibers","body":"I\'m seeing memory kept around for longer then it needs to by lastNativeEvent:\\r\\nhttps://github.com/facebook/react/blob/26ba38ae4b65375b97b561ec2d6a58ef597647ed/packages/react-dom/src/events/EnterLeaveEventPlugin.js#L49\\r\\n\\r\\nIn my case it\'s holding on to detached DOM nodes/Fiber.\\r\\n\\r\\nI think we should be able to use WeakSet since we\'re doing a `===` check. Otherwise we should consider timing it out in some way.","number":17580,"user":{"login":"bgirard"},"state":"closed","created_at":"2019-12-12T00:59:17Z"},{"id":536682506,"title":"Improved inspected element props with inline previews","body":"This mimics the inline preview shown by the browser console and dramatically improves the UX when inspecting deep values. I also updated tests to add more coverage for this new functionality.\\r\\n\\r\\nThere\'s a bit of hackiness in here (e.g. detecting `DataView` and `ArrayBuffer` types ) but I don\'t know of a better solution. Open to feedback!\\r\\n\\r\\nResolves #17073\\r\\n\\r\\n# Demo\\r\\n## Before\\r\\n![Demo: Before preview value changes](https://user-images.githubusercontent.com/29597/70671410-cd80ce00-1c30-11ea-9702-f57a89c848cb.gif)\\r\\n\\r\\n## After\\r\\n![Demo: After preview value changes](https://user-images.githubusercontent.com/29597/70668318-12eccd80-1c28-11ea-9915-b92d10698b73.gif)","number":17579,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-12T00:08:19Z"},{"id":536655821,"title":"Error: \\"Could not find node with id \\"6\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17578,"user":{"login":"danzhu54"},"state":"closed","created_at":"2019-12-11T22:45:02Z"},{"id":536398545,"title":"[react-interactions] Remove responder root event types + revert #17518.","body":"This PR does a few things to regain some performance changes recently introduced:\\r\\n\\r\\n- Removes the ability to register root events on responder mount, as Focus and FocusWithin have had their root events removed in https://github.com/facebook/react/pull/17555\\r\\n- This reverts the changes in https://github.com/facebook/react/pull/17518. We no longer need to do this as there are no longer root events that can be subscribed during this phase (which were unsafe to do in the complete phase)\\r\\n\\r\\nThis should remove the need to go to commit phase in as many places during initial render, which should improve initial render performance.","number":17577,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-11T14:16:24Z"},{"id":536360909,"title":"React Hooks are unable to queue to process","body":"![image (2)](https://user-images.githubusercontent.com/20770645/70624330-14c58980-1c46-11ea-81c6-c284ef07b470.png)\\r\\n\x3c!--\\r\\n When i try to use react Hooks inside another Hook, React is unable to queue those operations .\\r\\n\\r\\n--\x3e\\r\\n\\r\\n## Steps To Reproduce\\r\\n\\r\\n1. Create a Customer Hook \\r\\n```javascript\\r\\nimport { useContext } from \\"react\\";\\r\\nimport { SomeContext } from \\"src/SomeContext\\";\\r\\n\\r\\nexport const useCustomHook = () => {\\r\\n  const {\\r\\n    state: { deal }\\r\\n  } = useContext(SomeContext);\\r\\n\\r\\n\\r\\nconst[contextVal, setContextVal] = useState(\\"\\")\\r\\n\\r\\nuseEffect ( () => {  setContextVal( get(deal, \\"saleVehicle.pricing\\", {});) },[ deal])\\r\\n  return contextVal;\\r\\n};\\r\\n\\r\\nuseCustomHook.defaultProps = {\\r\\n  deal: {},\\r\\n  DealContext: {}\\r\\n};\\r\\n```\\r\\n\\r\\n2. now Consume this hook into your component\\r\\n\\r\\n```javascript \\r\\nimport {useCustomHook} from \\"...relative path\\"\\r\\n\\r\\nconst salePrice = ({\\r\\n  SomeContext: {\\r\\n    state: { deal, shadowState },\\r\\n  }\\r\\n}) => {\\r\\n//some handlers  - assume it working :D \\r\\n const handleFocus = event => event.target.select();\\r\\n  const handleOnBlur = ()=> { some call backs}\\r\\n  });\\r\\n  const handleOnChange = (ev, value) =>\\r\\n    updateDeal(dispatch)({ target: { name: \\"salePrice\\", value } });\\r\\n\\r\\nuseEffect ( () => { useCustomHook(),[deal.id])\\r\\n\\r\\n  return (\\r\\n    <TextField\\r\\n      value={deal.salePrice || vehSalePrice()}\\r\\n      fullWidth\\r\\n      onChange={handleOnChange}\\r\\n      onBlur={handleOnBlur}\\r\\n      disabled={hasOpenModal}\\r\\n      quickEntry={quickEntryEnabled}\\r\\n      decimalDigits={2}\\r\\n      onFocus={handleFocus}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nsalePrice.propTypes = {\\r\\n  DealContext: DealContextShape.isRequired,\\r\\n};\\r\\n\\r\\nsalePrice.defaultProps = {\\r\\n\\r\\n  deal: { price: \\"\\", Vehicle: { retailPrice: \\"\\" } },\\r\\n  retailPrice: \\"\\"\\r\\n};\\r\\n\\r\\n```\\r\\n3 - Once `<SalePrice / >` starts executing , It looks for the Hook `useCustomHook` but then `useCustomHook` internally calls another hooks `useContext, useState, useEffect` and while executing those hooks , it does not queue them up and screen blows up.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nDescribe what you expected to happen:\\r\\n- React should handle the queue of hooks within and execute them as callStack does.\\r\\n\\r\\n\\r\\n![](https://files.slack.com/files-pri/TJZUB1VM1-FR3UR5HSP/image.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":17576,"user":{"login":"AshifMohammad"},"state":"open","created_at":"2019-12-11T13:12:30Z"},{"id":536340661,"title":"Can\'t import image dynamically in reactjs","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nHi, I have a problem to import an image dynamically.\\r\\n\\r\\nI have a code like this:\\r\\n`console.log(require(\\"./img/item.png\\"));`\\r\\n\\r\\nand I want to do this:\\r\\n`let url = \\"./img/item.png\\";\\r\\n  console.log(require(url));`\\r\\nAnd it doesn\'t work I dont know why ?\\r\\nCan someone help me ?\\r\\nThank you !\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17575,"user":{"login":"JeremyMeissner"},"state":"closed","created_at":"2019-12-11T12:31:56Z"},{"id":536276750,"title":"Error: \\"Could not find node with id \\"836\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17574,"user":{"login":"disko998"},"state":"closed","created_at":"2019-12-11T10:24:08Z"},{"id":536235459,"title":"npm create-react-app <app_name> fails with node_modules\\\\core-js: EINVAL: invalid argument error","body":"npx create-react-app not working properly and continuously failing \\r\\n\\r\\nOS: Windows 10\\r\\nYarn version: 1.21.0\\r\\nNode version: 13.3.0\\r\\nNpm version: 6.13.1\\r\\n\\r\\nAttached the logs file.\\r\\n\\r\\nHere below is cmd prompt logs:\\r\\nC:\\\\Users\\\\satis\\\\Documents\\\\reacttest>npx create-react-app awesome-project\\r\\n\\r\\nCreating a new React app in C:\\\\Users\\\\satis\\\\Documents\\\\reacttest\\\\awesome-project.\\r\\n\\r\\nwarning ..\\\\..\\\\package.json: No license field\\r\\nInstalling packages. This might take a couple of minutes.\\r\\nInstalling react, react-dom, and react-scripts with cra-template...\\r\\n\\r\\nyarn add v1.21.0\\r\\nwarning ..\\\\..\\\\package.json: No license field\\r\\n[1/4] Resolving packages...\\r\\n[2/4] Fetching packages...\\r\\ninfo fsevents@1.2.9: The platform \\"win32\\" is incompatible with this module.\\r\\ninfo \\"fsevents@1.2.9\\" is an optional dependency and failed compatibility check. Excluding it from installation.\\r\\ninfo fsevents@2.1.2: The platform \\"win32\\" is incompatible with this module.\\r\\ninfo \\"fsevents@2.1.2\\" is an optional dependency and failed compatibility check. Excluding it from installation.\\r\\n[3/4] Linking dependencies...\\r\\nwarning \\"react-scripts > @typescript-eslint/eslint-plugin > tsutils@3.17.1\\" has unmet peer dependency \\"typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta\\".\\r\\n[4/4] Building fresh packages...\\r\\n[1/3] \u2802 core-js-pure\\r\\n[2/3] \u2802 core-js\\r\\nerror An unexpected error occurred: \\"C:\\\\\\\\Users\\\\\\\\satis\\\\\\\\Documents\\\\\\\\reacttest\\\\\\\\awesome-project\\\\\\\\node_modules\\\\\\\\core-js: EINVAL: invalid argument, mkdir \'C:\\\\\\\\Users\\\\\\\\satis\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp;C:\\\\\\\\Program Files (x86)\\\\\\\\Minimal ADB and Fastboot;\\\\\\\\yarn--1576052903837-0.6643317013326462\'\\".\\r\\ninfo If you think this is a bug, please open a bug report with the information provided in \\"C:\\\\\\\\Users\\\\\\\\satis\\\\\\\\Documents\\\\\\r\\n\\r\\n\\r\\nAborting installation.\\r\\n  yarnpkg add --exact react react-dom react-scripts cra-template --cwd C:\\\\Users\\\\satis\\\\Documents\\\\reacttest\\\\awesome-project has failed.\\r\\n\\r\\n[yarn-error.log](https://github.com/facebook/react/files/3949381/yarn-error.log)\\r\\n","number":17573,"user":{"login":"SatishAncha"},"state":"closed","created_at":"2019-12-11T09:10:56Z"},{"id":536188342,"title":"promise and setTimeout will run twice","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\n\\r\\n```jsx\\r\\nexport { V as App }\\r\\nfunction V() {\\r\\n  const [count, countSet] = useState()//if we annotation thie line will be ok\\r\\n  console.log(\'sync\')\\r\\n  Promise.resolve().then(() => console.log(\'promise\'))\\r\\n  setTimeout(() => {\\r\\n    console.log(\'timeout\')\\r\\n  })\\r\\n  return 1\\r\\n}```\\r\\n","number":17572,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-12-11T07:19:52Z"},{"id":536173277,"title":"useEffect, componentWillReceiveProps usage","body":"my script;\\r\\n\\r\\nWhen my goal is to change the line,\\r\\nClear the selection and update the state lines.\\r\\n![41617FEA-D822-4C74-B422-A06B10DF20A8](https://user-images.githubusercontent.com/13018803/70597482-888d7500-1bf9-11ea-8860-c4f9396e63e8.jpeg)\\r\\n\\r\\nSince it enters the console.log (a) at first boot, I need to clear the selection.\\r\\n\\r\\n**(First Render Console)**\\r\\n![1645F842-A81A-40B6-AF1F-8FECF9F3C6EE](https://user-images.githubusercontent.com/13018803/70597565-b672b980-1bf9-11ea-8395-64197c21b138.jpeg)\\r\\n\\r\\nbut when I update props.rows,\\r\\nboth lines should be updated, as well as clear the selection.\\r\\n\\r\\n**(Set Props Render Console)**\\r\\n![6F215AF6-8E86-4789-B403-8E95FF149D43](https://user-images.githubusercontent.com/13018803/70597621-d73b0f00-1bf9-11ea-9ec7-52384fdd567e.jpeg)\\r\\n\\r\\nbut when I do with callback, the current props.rows are not coming. When the first opening works on.\\r\\n\\r\\nwill not work on first boot. It will only work on line changes. it also needs to arrive up to date line information.\\r\\n\\r\\ncallback does not show the current line information :(\\r\\n\\r\\nhow do i do it like componentWillReceiveProps?\\r\\n\\r\\n@gaearon \\r\\nWhy does useEffect work on first boot even though props.rows is connected and props.rows is unchanged? Shouldn\'t it expect props.rows to change?","number":17571,"user":{"login":"ahmetcaglayan"},"state":"closed","created_at":"2019-12-11T06:39:17Z"},{"id":536123055,"title":"provide a api that convenience reset value to init","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n```jsx\\r\\nfunction CandyDispenser() {\\r\\n  const initialCandies = [\'snickers\', \'skittles\', \'twix\', \'milky way\']\\r\\n  const [candies, setCandies] = React.useState(initialCandies)\\r\\n  return  <button onClick={() => setCandies(initialCandies)}>refill</button>\\r\\n}\\r\\n```\\r\\n\\r\\nif we have a way to get the initialCandies  from api, so we can like that\\r\\n1, from return of useState\\r\\n```jsx\\r\\nfunction CandyDispenser() {\\r\\n  const [candies, setCandies, init] = React.useState( [\'snickers\', \'skittles\', \'twix\', \'milky way\'])\\r\\n  return  <button onClick={() => setCandies(init)}>refill</button>\\r\\n}\\r\\n```\\r\\n2, from react\\r\\n```jsx\\r\\nimport {init} from react\\r\\nfunction CandyDispenser() {\\r\\n  const [candies, setCandies] = React.useState( [\'snickers\', \'skittles\', \'twix\', \'milky way\'])\\r\\n  return  <button onClick={() => setCandies(init)}>refill</button>\\r\\n}\\r\\n\\r\\n```\\r\\n3 from static symbol  useState\\r\\n```jsx\\r\\nfunction CandyDispenser() {\\r\\n  const [candies, setCandies] = React.useState( [\'snickers\', \'skittles\', \'twix\', \'milky way\'])\\r\\n  return  <button onClick={() => setCandies(useState.init)}>refill</button>\\r\\n}\\r\\n```","number":17570,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-12-11T03:36:27Z"},{"id":536073809,"title":"A Hook Within a Hook slips under the radar.","body":"A bug.\\r\\n\\r\\n*(Or is it? I strongly suspect `useRef` is not like other hooks)*\\r\\n\\r\\n# Given I use a hook within a hook\\r\\n\\r\\nCode snippet (note `useRef` on the last line which wraps a call to `useClickAway`):\\r\\n```js\\r\\n\\r\\nconst useDrag = ({ ref, onClick, onDragStart, onDrag, onDragEnd }) => {\\r\\n\\r\\n  // ...\\r\\n\\r\\n  const clickAwayRef = useClickAway({\\r\\n    mouseEvent: \'onMouseUp\',\\r\\n    onClickAway,\\r\\n    ref,\\r\\n  });\\r\\n\\r\\n  // ...\\r\\n};\\r\\n\\r\\nexport default props => useRef(useDrag(props)).current;\\r\\n```\\r\\n\\r\\nAnd here\'re the first few lines of `useClickAway`:\\r\\n\\r\\n```js\\r\\n  const mountedRef = useMountedRef();\\r\\n  const movedRef = React.useRef(false);\\r\\n  const nodeRef = React.useRef(null);\\r\\n\\r\\n  const handleNodeRef = useForkRef(nodeRef, ref);\\r\\n  // can be removed once we drop support for non ref forwarding class components\\r\\n  const handleRef = React.useCallback(\\r\\n    instance => {\\r\\n      // #StrictMode ready\\r\\n      setRef(handleNodeRef, ReactDOM.findDOMNode(instance));\\r\\n    },\\r\\n    [handleNodeRef]\\r\\n  );\\r\\n```\\r\\n\\r\\n# It should warn\\r\\n\\r\\n> Warning: Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function.\\r\\n\\r\\nBut it doesn\'t, and the code above seems to work just fine.\\r\\n\\r\\n---\\r\\n\\r\\nreact@16.9.0","number":17569,"user":{"login":"Izhaki"},"state":"closed","created_at":"2019-12-11T00:38:29Z"},{"id":535891408,"title":"Remove the condition argument from warning()","body":"Step 2 of #16753 \\r\\n\\r\\n- I\'ve deleted the babel plugin (Woo!) and forked `warning-and-invariant-args` into `warning-args`and `invariant-args`.\\r\\n- `toWarnDev` and `toLowPriorityWarnDev` didn\'t actually need any changes as they track the underlying console calls\\r\\n- Some of the conditionals look wonky, not sure how to improve them without humans\\r\\n- I don\'t have java on this laptop yet so can\'t build but it\'s installing rn","number":17568,"user":{"login":"walaura"},"state":"closed","created_at":"2019-12-10T17:56:29Z"},{"id":535856931,"title":"Show component location for selected element in bottom/right of props panel","body":"Resolves #16497\\r\\n\\r\\n<img width=\\"665\\" alt=\\"Screen Shot 2019-12-10 at 8 46 02 AM\\" src=\\"https://user-images.githubusercontent.com/29597/70550075-1306a380-1b2a-11ea-8393-6df3c1d99ffd.png\\">\\r\\n\\r\\nRational for placement and formatting here:\\r\\nhttps://github.com/facebook/react/issues/16497#issuecomment-564122209","number":17567,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-12-10T16:50:55Z"},{"id":535633425,"title":"Two","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17566,"user":{"login":"kambleaa007"},"state":"closed","created_at":"2019-12-10T10:24:59Z"},{"id":535625911,"title":"Using \'null\' on key prop","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nKeys are always needed on iterated elements.\\r\\n\\r\\nWe should be able to pass _null_ to the key prop, on iterated elements. Sometimes, we don\'t really need performance on so simple components that doesn\'t update frequently, and wouldn\'t do any bad if it have to re-render all the generated elements. Having to take some time to think about how to generate a key in every specific case can be a pain, like when we can\'t just use the index, or don\'t trust random generations.\\r\\n\\r\\nI don\'t think it should also apply to undefined value, as it wouldn\'t encourage new programmers to learn and use key prop. Null should only be applied to those specific cases where we don\'t really care about performance.\\r\\n\\r\\nThanks!","number":17565,"user":{"login":"SrBrahma"},"state":"closed","created_at":"2019-12-10T10:12:11Z"},{"id":535605680,"title":"Lint rule warns against hooks in functional sub-component.","body":"Calling a hook in a functional sub-component causes an error  `React Hook \\"React.useContext\\" is called in function \\"Modal.Close\\" which is neither a React function component or a custom React Hook function` :\\r\\n\\r\\n```jsx\\r\\nModal.Close = props => {\\r\\n  const setIsOpen = React.useContext(ModalContext);\\r\\n\\r\\n  return (\\r\\n    <button onClick={() => setIsOpen(false)}>\\r\\n      <Icon name=\\"close\\" />\\r\\n    </button>\\r\\n  );\\r\\n};\\r\\n```\\r\\n\\r\\nHowever, creating a new functional component and reassigning it to the main component won\'t cause that error.\\r\\n\\r\\n```jsx\\r\\nconst Close = props => {\\r\\n  const setIsOpen = React.useContext(ModalContext);\\r\\n\\r\\n  return (\\r\\n    <button onClick={() => setIsOpen(false)}>\\r\\n      <Icon name=\\"close\\" />\\r\\n    </button>\\r\\n  );\\r\\n};\\r\\n\\r\\nModal.Close = Close;\\r\\n```\\r\\n\\r\\nI am currently using the latest version of React `16.12.0` and react-scripts `3.3.0`.","number":17564,"user":{"login":"P233"},"state":"open","created_at":"2019-12-10T09:37:14Z"},{"id":535508137,"title":"the problem ablout add a <Button> to <div>","body":"<img width=\\"1039\\" alt=\\"\u622a\u5c4f2019-12-10\u4e0b\u53481 44 55\\" src=\\"https://user-images.githubusercontent.com/31762662/70499056-43af0300-1b53-11ea-980b-a119e2274e71.png\\">\\r\\nI am a novice . this is my code, i want to add this <Button> to the <div>,but if i do like this, the onClick function did\'t work, the wrong is \\"Uncaught SyntaxError: Unexpected end of input\\", if the operationContent is not a string type, the button will becomes [Object,Object],if i remove the \\"() =>\\", the function will execute by itself, what should i do?   QAQ","number":17563,"user":{"login":"ZhangTeng4070"},"state":"closed","created_at":"2019-12-10T05:45:15Z"},{"id":535504554,"title":"the problem ablout add a ","body":"\\r\\n","number":17562,"user":{"login":"ZhangTeng4070"},"state":"closed","created_at":"2019-12-10T05:33:46Z"},{"id":535497846,"title":"this is a bug about  `error boundary`","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nthis is a bug about  `error boundary`.\\r\\n\u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u9519\u8bef\u8fb9\u754c\u7684bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nNeither  `static getDerivedStateFromError` nor `componentDidCatch`  can catch the error when an error occurs in a subcomponent(Child-Component), at  the `setTimeout`\uff1b \\r\\n`static getDerivedStateFromError` \u6216\u8005 `componentDidCatch` \u90fd\u65e0\u6cd5\u6355\u83b7\u5230\u53d1\u751f\u5728\u5b50\u7ec4\u4ef6\u91cc\u7684\u5ef6\u65f6\u5668\u903b\u8f91\u7684\u9519\u8bef\u3002\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nat the version =>  react 16.12.0\\r\\n```jsx\\r\\n// ErrorBoundary/index.js\\r\\nimport React from \'react\';\\r\\n\\r\\nexport default class ErrorBoundary extends React.Component{\\r\\n    state = {hasError:false}\\r\\n    static getDerivedStateFromError(error){\\r\\n        console.log(\'\u88ab\u89e6\u53d1\u4e86:\',error);\\r\\n        return {hasError:true}\\r\\n    }\\r\\n    componentDidCatch(error,errorInfo){\\r\\n        console.log(error,errorInfo);\\r\\n    }\\r\\n    render(){\\r\\n        if(this.state.hasError){\\r\\n            return <div>\u60b2\u4f24\u7684\u9519\u8bef\u53d1\u751f\u4e86</div>\\r\\n        }\\r\\n        return this.props.children;\\r\\n    }\\r\\n}\\r\\n\\r\\n//Child/index.js \\r\\nexport default function Child (){\\r\\n    const [count,setCount] = useState(520);\\r\\n    function double(){\\r\\n        const res = count*2;\\r\\n        setCount(res)\\r\\n    }\\r\\n     // look here\\r\\n    setTimeout(()=>{\\r\\n        throw new Error(\'\u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\');\\r\\n     },5000)\\r\\n\\r\\n    return (    \\r\\n            <div>\\r\\n                Demo1\\r\\n            </div>\\r\\n    )\\r\\n}\\r\\n\\r\\n//Demo.js\\r\\nfunction Demo (){\\r\\n    return (\\r\\n        <div >\\r\\n            <ErrorBoundary>\\r\\n                <Child />\\r\\n            </ErrorBoundary>\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThis error should be caught\uff0cbut that\'s not the case.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI work on version 16.12.0 . (I guess it\'s the same with other versions)","number":17561,"user":{"login":"melodyWxy"},"state":"closed","created_at":"2019-12-10T05:10:52Z"},{"id":535393112,"title":"Initialize update queue object on mount","body":"Follow-up to b617db3d966f678eb0b4aac6d96f7967b37a9e91\\r\\n\\r\\nInstead of lazily initializing update queue objects on the first update, class and host root queues are created on mount. This simplifies the logic for appending new updates and matches what we do for hooks.","number":17560,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-12-09T23:12:13Z"},{"id":535354002,"title":"Github is showing security warnings to react apps about serialize-javascript dependency before 2.1.1","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact apps use a version of [serialize-javascript](https://www.npmjs.com/package/serialize-javascript) that creates this warning  [github.com/yahoo/serialize-javascript/.../advisories/GHSA-h9rv-jmmf-4pgx.](https://github.com/yahoo/serialize-javascript/security/advisories/GHSA-h9rv-jmmf-4pgx.)\\r\\nAn updated version ^2.1.1 was just released to fix this issue.\\r\\n\\r\\n> \\r\\n> ### Impact\\r\\n> Affected versions of this package are vulnerable to Cross-site Scripting (XSS). It does not properly mitigate against unsafe characters in serialized regular expressions.\\r\\n> \\r\\n> This vulnerability is not affected on Node.js environment since Node.js\'s implementation of RegExp.prototype.toString() backslash-escapes all forward slashes in regular expressions.\\r\\n> \\r\\n> If serialized data of regular expression objects are used in an environment other than Node.js, it is affected by this vulnerability.\\r\\n> \\r\\n> ### Patches\\r\\n> This was patched in v2.1.1.\\r\\n\\r\\n**Reproduction steps**\\r\\n\\r\\n```bash\\r\\nnpx create-react-app testing-latest-react\\r\\n```\\r\\n(React version 16.12.0)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis security advisory was just created 5 days ago. I don\'t know what older react versions are affected.\\r\\n","number":17559,"user":{"login":"arye-dov-eidelman"},"state":"closed","created_at":"2019-12-09T21:39:18Z"},{"id":535352976,"title":"Error: \\"Could not find node with id \\"75\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Start profiling\\r\\n2. End profiling\\r\\n3. Iterate over commits using arrows and/or bar graph\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17558,"user":{"login":"richtone"},"state":"closed","created_at":"2019-12-09T21:37:03Z"},{"id":535275787,"title":"Error: \\"Could not find node with id \\"30\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1.  Moving in next commits in Profiler dev tool in Ranked chart mode\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17557,"user":{"login":"DCAlexandre"},"state":"closed","created_at":"2019-12-09T20:29:13Z"},{"id":535098480,"title":"React.unstable_avoidThisRender()","body":"Introduces React.unstable_avoidThisRender(). \\r\\n\\r\\nThis is one step towards implementing first class suspending behaviour for static resources like images/stylesheets. \\r\\n\\r\\nOne of the problems with doing this naively in \\"userland\\", is because React is so aggressive on rerendering when the thenables resolve, we end up doing a bunch of unneeded rerenders. This sequence of PRs is to optimize the paths React executes in such cases.\\r\\n\\r\\n\\r\\nHow it\'s implemented\\r\\n---\\r\\n\\r\\n(There might be errors/a lack of understanding in this description)\\r\\n\\r\\n`unstable_avoidThisRender()` is called during the render phase, which is similar to the \'throw\' phase (without the actual throwing). When this happens:\\r\\n- we look for the nearest Suspense boundary (that satisfies hasInvisibleParentBoundary === true), \\r\\n- and mark it\'s `effectTag` as `SoftCapture` (which is a variant of `DidCapture` for avoided renders). \\r\\n- We also attach a ping listener for cleaning up if the thenable resolves before we commit that boundary.\\r\\n\\r\\n(These steps are similar to what we\'d call if you threw an actual promise; ie - `throwException()`)\\r\\n\\r\\nSoon after this, `completeWork` is called for the marked Suspense boundary. We use this instant to mark the boundary as expired, and return itself to render itself again.\\r\\n\\r\\nSoon after, beginWork is called for that boundary. `SoftCapture` tells us that boundary has suspended. We clear the effectTag, initialize suspenseState/memoizedState on that boundary, and set `expirationTime` and `memoizedState.didAvoidRenderTime` as `renderExpirationTime - 1`; ie - we mark that boundary as \'expiring very soon\'. \\r\\n\\r\\nSoon `unstable_avoidThisRender()` is called again, setting the effectTag back to `SoftCapture`. (This time in completeWork, we see that the effectTag and memoizedState are set, so can bypass returning itself.) \\r\\n\\r\\nAfter committing, the content rerender happens. (???) \\r\\n\\r\\nThis time, in `completeWork()`, we call `renderDidSuspendDelayIfPossible()` to set the exit status on the tree. Currently, the actual content gets committed.\\r\\n\\r\\nThat\'s ...it? In the next PR, we\'ll add a new exitStatus, and actually show the fallback, passing the commented out tests in `ReactSuspenseWithNoopRenderer-test.internal.js`\\r\\n\\r\\n\\r\\nTODO: address this review comment https://github.com/facebook/react/pull/17556/files#r358883141","number":17556,"user":{"login":"threepointone"},"state":"open","created_at":"2019-12-09T18:14:19Z"},{"id":534958815,"title":"[react-interactions] Remove Focus/FocusWithin root event types","body":"This PR refactors the Focus and FocusWithin event responders to remove their root event types. Instead, we attach a set of events to the window once and track focus visible and other properties as globals. We then track the same events in the target phase of the responders and correleate behaviors to ensure the same expectations from before continue to be valid.\\r\\n\\r\\nThis will have a big impact on performance and memory, as having possibly thousands of root events subscribed at once can impact performance.","number":17555,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-09T14:14:33Z"},{"id":534912397,"title":"[react-interactions] fix Press/Tap behavior for virtual middle clicks","body":"Tools like BetterTouchTool for macOS trigger middle-clicks with a \'buttons\'\\r\\nvalue that doesn\'t correspond to the middle-mouse button. To account for this\\r\\nwe also inspect the value of \'button\'.\\r\\n\\r\\nClose #17367","number":17554,"user":{"login":"necolas"},"state":"closed","created_at":"2019-12-09T12:55:41Z"},{"id":534838995,"title":"DevTools: Provide full file path for React Native component stacks","body":"## Overview\\r\\n\\r\\nIn React Native, we\'re working on a new RedBox experience for errors and warnings called LogBox. In LogBox, we separate out component stack traces and show them similar to call stacks.\\r\\n\\r\\nWe\'d like to be able to tap on these components and open them (like we can with call stacks).\\r\\n\\r\\n## Solutions\\r\\nIn React we have the full file path context, but when we build the component stack trace, we strip the full path so that it displays only the file name.\\r\\n\\r\\nThere are two options to achieve this:\\r\\n- For React Native, don\'t strip the full path [here](https://github.com/facebook/react/blob/b438699d3620bff236282b049204e1221b3689e9/packages/react-devtools-shared/src/backend/describeComponentFrame.js#L25). This will result in longer component stack messages with every frame having the full path.\\r\\n- Keep the message the same, and instead add structured component stack frame info including the full file path.","number":17553,"user":{"login":"rickhanlonii"},"state":"open","created_at":"2019-12-09T10:38:24Z"},{"id":534749697,"title":"react-refresh load from CDN?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nfeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen `react-dom` is loaded from CDN like `<script src=\\"https://cdn.jsdelivr.net/npm/react-dom@16.12.0/umd/react-dom.development.js\\"><\/script>`, `react-refresh` failed to inject hook into devtools.\\r\\n\\r\\nI\'ve created a related issue here: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13\\r\\n\\r\\nWe should find a way to invoke `injectIntoGlobalHook` function from `react-refresh/runtime`, however this file is in cjs format so we cannot currently do this in a simple way.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'d like `react-refresh` to publish runtime as a umd bundle so we can reference it from CDN and put it before `react-dom`\'s `<script>` element, then invoke `injectIntoGlobalHook` in the right place.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- `react-dom`: 16.12.0\\r\\n- `react-refresh`: 0.7.0","number":17552,"user":{"login":"otakustay"},"state":"closed","created_at":"2019-12-09T07:42:10Z"},{"id":534643501,"title":"Provide a symmetric API to event.persist()","body":"Feature request.\\r\\n\\r\\nThe API of syntheticEvent is asymmetric, in the sense that you can `persist()` an event, but there\'s no way of returning it to the pool. This nullifies the benefit of pooling when it is most needed.\\r\\n\\r\\n## The Problem\\r\\n\\r\\nIt is common to want to debounce/throttle/raf-schd burst events, like MouseMove. Doing so is part of the [official docs](https://reactjs.org/docs/faq-functions.html#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row).\\r\\n\\r\\nBut as these strategies are asynchronous, one must call `event.persist()`, which results in increase in both memory consumption and garbage collection, which is the whole reason these events are pooled to begin with. (I am writing a library so no idea what clients might need from the event - caching its properties is not an option.)\\r\\n\\r\\nYet, in most cases, it is well established when these events are no longer needed. In the case of MouseMove, it is once the handler returns.\\r\\n\\r\\n## Possible Solution\\r\\n\\r\\nIt would be nice if the event API would provide a method to return the event to the pool. Something like `unpersist()` (or maybe just `release()`?).\\r\\n\\r\\nWith such a feature, either bespoke code or modified debounce/throttle/raf-schd could return the previous event to the pool when a new one comes in. This will satisfy the goal of the event pooling - reduction of both memory and garbage collection.\\r\\n\\r\\n  \\r\\n\\r\\n","number":17551,"user":{"login":"Izhaki"},"state":"closed","created_at":"2019-12-09T01:42:15Z"},{"id":534630317,"title":"Fix comments typos","body":"While investigating React Reconciler (for personal education) and its main phases: `ReactFiberBeginWork`, `ReactFiberCommitWork` and `ReactFiberCompleteWork` I spotted some typos in dev comments and thought I would commit back some of the sensible changes for folks who read comments \ud83d\ude1b  ","number":17550,"user":{"login":"nicksp"},"state":"closed","created_at":"2019-12-09T00:28:00Z"},{"id":534613238,"title":"\\"Also note that this pattern might cause problems in the concurrent mode\\"","body":"It seems there are cases when we can not avoid using refs for storing callbacks. We can not \\"pass dispatch down in context\\" for side effects. Reducer must be pure. \\r\\n\\r\\nI would love to know what are those \\"problems\\" with proper useRef with callbacks in the concurrent mode.\\r\\n\\r\\n\\"Also note that this pattern might cause problems in the concurrent mode. We plan to provide more ergonomic alternatives in the future, but the safest solution right now is to always invalidate the callback if some value it depends on changes.\\"\\r\\n\\r\\nhttps://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback","number":17549,"user":{"login":"steida"},"state":"closed","created_at":"2019-12-08T22:28:14Z"},{"id":534588612,"title":"Shouldn\'t useEffect be split into three distinct hooks?","body":"Currently behaviour of `useEffect` hook is defined by the last parameter. It is either not defined at all, empty array, or enumerates the values.\\r\\n\\r\\nI believe this adds a bit of cognitive load to the developer. The intention is not clear until I look at the end of the function. Second, the difference between empty array `[]` and not defined array is not that drastic. Furthermore, natural flow is like that: define values, and when any of them changes, then apply effect, so I assume specifying the list of tracked values first is better.\\r\\n\\r\\nI personally think, it would be nice to have something like this:\\r\\n\\r\\n```js\\r\\nimport {useEffect} from \\"react\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * Applies effect on every render of the component.\\r\\n *\\r\\n * @param {React.EffectCallback} effect - Imperative function that can return a cleanup function.\\r\\n */\\r\\nfunction useEffectAlways(effect){\\r\\n    useEffect(effect);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Applies effect only if one of the values of deps array changes.\\r\\n *\\r\\n * @param {any[]} deps - Array of values which are tracked by React to determine whether effect should be applied.\\r\\n * @param {React.EffectCallback} effect - Imperative function that can return a cleanup function.\\r\\n */\\r\\n/* \\r\\nDECISION: deps intentionally goes first, because it resembles the flow: if \'deps\' changed then apply \'effect\'.\\r\\nand it is much easier to spot the list of dependencies, when it goes first.\\r\\nCompare:\\r\\nuseEffectOnChanges([a, b, c], () => {\\r\\n ...\\r\\n ...\\r\\n ...\\r\\n});\\r\\nand\\r\\nuseEffectOnChanges(() => {\\r\\n  ...\\r\\n  ...\\r\\n  ...\\r\\n}, [a, d, c]); \\r\\n*/\\r\\n function useEffectOnChanges(deps, effect){\\r\\n    if (!deps || deps.length === 0){\\r\\n        throw new Error(\\"Either provide non empty deps array or call useEffectAlways/useEffectOnce.\\");\\r\\n    }\\r\\n    useEffect(effect, deps);\\r\\n}\\r\\n\\r\\n// defining a constant for empty array allows us to avoid memory allocation on every call.\\r\\nconst __emptyArray = [];\\r\\n\\r\\n/**\\r\\n * Applies effect only once on the first render of the component. Equivalent to componentDidMount lifecycle method.\\r\\n *\\r\\n * @param {React.EffectCallback} effect - Imperative function that can return a cleanup function.\\r\\n */\\r\\nfunction useEffectOnce(effect){\\r\\n    useEffect(effect, __emptyArray);\\r\\n}\\r\\n\\r\\nexport { useEffectAlways, useEffectOnChanges, useEffectOnce }; \\r\\n```\\r\\n","number":17548,"user":{"login":"voroninp"},"state":"open","created_at":"2019-12-08T19:31:15Z"},{"id":534583239,"title":"Support rendering into comment","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nCurrently there\'s isn\'t any way that I\'m aware of to render a component in the middle of element without creating a wrapper element.\\r\\nFor example, let\'s consider this pure html fragment:\\r\\n```html\\r\\n<div>\\r\\n  <header>header</header>\\r\\n  \x3c!-- render MyComponent here --\x3e\\r\\n  <footer>footer</footer>\\r\\n</div>\\r\\n```\\r\\n```typescript\\r\\nfunction MyComponent() {\\r\\n  return <section>hello world</section>;\\r\\n}\\r\\nReact.render(<MyComponent/>, /* what to insert here? */);\\r\\n```\\r\\nYou could create `DocumentFragment`, but after you insert it to the DOM calling `render` again will generate error:\\r\\n```\\r\\nWarning: render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt would be nice to have on option to pass a `Comment` node to `render` function (and similar functions). In such cases, the react elements should be rendered next to the comment, which will work as an anchor to for the rendered content.\\r\\nCalling:\\r\\n```typescript\\r\\nReact.render(<MyComponent/>, queryForCommentNode());\\r\\n```\\r\\nwould result in following DOM structure:\\r\\n```html\\r\\n<div>\\r\\n  <header>header</header>\\r\\n  \x3c!-- render MyComponent here --\x3e\\r\\n  <section>hello world</section>\\r\\n  <footer>footer</footer>\\r\\n</div>\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16\\r\\n","number":17547,"user":{"login":"dawidgarus"},"state":"closed","created_at":"2019-12-08T18:48:55Z"},{"id":534504613,"title":"Prop Binding/Partial Application","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nNo easy way to do automatic prop binding.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSorry if this is has already been asked or talked about internally or in the GitHub issues, I just couldn\'t find anything with a simple Google search. I can\'t think of any reason for this behavior to be against react best practices, but the react devs are much smarter than me and have probably thought much longer and harder about this than I have. If this is too trivial or not worth the react devs\' time, please close right away.\\r\\n\\r\\nBasically, I\'m proposing allowing for easy prop binding, similar to using `Function.bind()` or `Function.apply()`/`call()`. This would make it easier to pass props down when the component needs to be passed down directly, like in a prop to another component, like what react router does, and not as JSX. An example I found in my own code (`history` comes from react-router):\\r\\n\\r\\n```\\r\\n// search-bar.js\\r\\nexport default function SearchBar({className: outerClassName, Result = noopJsx, search, ...props}) {\\r\\n    return <div className={outerClassName}>\\r\\n        ... bar JSX\\r\\n        <Results Result={Result} results={results} {...props} />;\\r\\n    </div>;\\r\\n}\\r\\n\\r\\nResults.propTypes = {Result: PropTypes.func, results: PropTypes.object};\\r\\n    function Results({Result, results, ...props}) {\\r\\n        return <div css={resultsStyles}>\\r\\n            {Object.entries(results || {}).map(([name, result]) =>\\r\\n                <Result key={name} name={name} result={result} {...props} />)}\\r\\n      </div>;\\r\\n  }\\r\\n\\r\\n// custom-search-bar.js\\r\\nCustomSearchBar.propTypes = {history: PropTypes.object};\\r\\nexport default function CustomSearchBar({history}) {\\r\\n    Result.propTypes = {name: PropTypes.string};\\r\\n\\r\\n    return <SearchBar Result={Result} search={search} />;\\r\\n\\r\\n    function Result({name}) {\\r\\n        const url = \'/other-page.js\';\\r\\n        const go = () => history.push(url);\\r\\n\\r\\n        return <div onClick={go}>\\r\\n            ... inner content\\r\\n        </div>;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction search() {\\r\\n    // custom search function\\r\\n}\\r\\n```\\r\\n\\r\\nSorry if this is a little complicated, but basically there is a generic search bar and a more custom one. The custom one isn\'t too fancy, but it has a \\"history\\" prop, which comes from react-router. The history prop is used in the Result component, but because Result is a prop, any props passed to it must be in scope.\\r\\n\\r\\nNow, one way to resolve this is to make the Result prop into a function, as components are just functions. For example,\\r\\n\\r\\n```\\r\\n    <SearchBar Result={({...props) => <Result history={history} {...props} />} />\\r\\n```\\r\\n\\r\\nor\\r\\n\\r\\n```\\r\\nexport function SearchBar({Result, ...rest}) {\\r\\n    ...snip\\r\\n    <SearchBar Result={WrappedResult} />\\r\\n\\r\\n    function WrappedResult({...props}) {\\r\\n        return <Result history={history} {...props} />;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nbut I feel like this is too complicated for such a simple task. I admit I haven\'t seen too many other places where this could be useful, but this is a relatively simple site.\\r\\n\\r\\nI\'m sure there are multiple ways this could be resolved, and this was a pretty early react component for me, though I had been coding in angular 1 for a while before that. If I were doing this site over, I might do something completely different that ignores this problem entirely. My point is, has this space ever been looked at?\\r\\n\\r\\nI don\'t want to assume anything about the amount of work involved, and I\'m not sure how often this would be used. That said, could we have something like `bindProps`? For example,\\r\\n\\r\\n```\\r\\n    <SearchBar Result={Result.bindProps({history})} />\\r\\n```\\r\\n\\r\\nDepending on how the partial application proposal (currently stage 1) goes, this may not be needed in react after all. For example, it might be as simple as:\\r\\n\\r\\n```\\r\\n    <SearchBar Result={Result({history: ?}) />\\r\\n```\\r\\n\\r\\nSo what do you think? Has this ever been looked at? What alternatives were proposed, which I\'m sure were much better than mine? Does my proposal have any merit whatsoever?\\r\\n\\r\\nBy the way, I have read how easy react makes things like prototyping and demoing code, but I ever realized how easy until I wrote this issue. I literally copied most of the 2 components, leaving out styles and such, and I changed the names of the components and files. In fact, I may change the names to what I used in the issue. Great job, react team, keep up the good work, making my life easier!\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nUbuntu\\r\\nall browsers\\r\\nreact 16.9.0\\r\\nreact-dom 16.9.0\\r\\n","number":17546,"user":{"login":"trisys3"},"state":"closed","created_at":"2019-12-08T07:36:30Z"},{"id":534428628,"title":"How authorize web application and manage sessions","body":"i am building a single page react app that uses redux as state manager and an express node js as backend server but i don\'t know what is the best way to authorize my users in the application!\\r\\n\\r\\nif it was php or express-js website i could use PHPSESSION or express-session to manage users sessions data but now the single page web application is separated from the backend and i can\'t manage sessions like before!\\r\\n\\r\\nmy idea is to make a session id for each new web request then save it for client in local storage then in the server store all needed informations in a database and when application have an api call send that id in request header then we can check authorizations by using that implemented session\\r\\n\\r\\nbut i thought if there was a simpler way to handle this problem that have no need to make a session implementation by myself\\r\\n\\r\\n(i don\'t want to use third party services like firebase or okta or save all session data in client part like JWT)","number":17545,"user":{"login":"MAmin233"},"state":"closed","created_at":"2019-12-07T17:28:01Z"},{"id":534410282,"title":"box-shadow value is parsed the wrong way by React","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe value of `boxShadow`  in an element style is parsed the wrong way because the color is moved at the beginning of the value while instead it should be kept at its original position (the end).\\r\\n\\r\\nFor example, this element:\\r\\n\\r\\n```\\r\\n<div style={{ boxShadow: `1px 1px 1px #000` }} />\\r\\n```\\r\\n\\r\\nwill be parsed like this:\\r\\n\\r\\n```\\r\\n<div style=\\"box-shadow: rgb(0, 0, 0) 1px 1px 1px;\\"></div>\\r\\n```\\r\\n\\r\\nMajor browsers like Chrome and Firefox are tolerant and will interpret the malformed CSS correctly, but the bug is causing issues on Puppeteer which fails to cast the shadow.\\r\\n\\r\\nA [fiddle](https://jsfiddle.net/2md8eqst/) shows the issue, you can see inspecting the element how the value is malformed.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI tested with React 16.12 on Ubuntu 18.11 with Chrome and Firefox. Puppeteer on an AWS Lambda machine encounters this problem too.","number":17544,"user":{"login":"flaviolivolsi"},"state":"closed","created_at":"2019-12-07T14:46:40Z"},{"id":534264995,"title":"Error: \\"Could not find commit data for root \\"1081\\" and commit 18\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163226)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332702)\\r\\n    at uc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332919)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46341\\r\\n\\r\\nComponent stack: in uc\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17543,"user":{"login":"jackton1"},"state":"closed","created_at":"2019-12-06T21:26:15Z"},{"id":534244392,"title":"Move scheduleHydration to root prototype","body":"We don\'t technically need the root since we\'ll find it through the DOM but we do need the root to have been created before we call this.\\r\\n\\r\\nThis API makes that a bit clearer. This was even asked about before so seems reasonable.\\r\\n\\r\\nThe only unfortunate thing is that it\'s not possible to do a generic scroll or event driven hydration without having access to a root.","number":17542,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2019-12-06T20:31:49Z"},{"id":534152864,"title":"Distinguish between an empty slot and a mismatch","body":"Currently an empty slot is regarded as a mismatch between the slots. It triggers the slow path when we run into empty slots. Since empty slots are rather common, I believe it\'s worthwhile to distinguish between the two.","number":17541,"user":{"login":"jddxf"},"state":"open","created_at":"2019-12-06T17:13:21Z"},{"id":534140739,"title":"Replace `wrap-warning-with-env-check` with an eslint plugin","body":"Part 1.5 of #16753\\r\\n\\r\\nThis PR removes the `__DEV__` wrapping part of `wrap-warning-with-env-check` and replaces it with a functionally identical eslint plugin (`no-production-logging`).The babel rule gets renamed to `lift-warning-conditional-argument` because that\'s what it does! In its current stage this will fail builds since we still got all the unwrapped calls in the actual codebase.\\r\\n\\r\\nThe plugin supports `&&`statements like `if( __DEV__ && React.suspenseIsEnabled)` but fails any top level `||`s. Have a look at the tests and code because I might have some unchecked assumptions about static code analysis here (and about how we strip out the `__DEV__` checks at compile time lol) but i think this covers the cases we wanna cover.\\r\\n\\r\\n## Caveats\\r\\n\\r\\nThe generated development builds will include an extra block around the checks, from this original code\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  warning(2===2, \'example warning\');\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\neslint (in this branch) will make the editor rewrite it to\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  if(__DEV__){\\r\\n    warning(2===2, \'example warning\');\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nWhich babel will transform (using ternaries) to\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  if(__DEV__){\\r\\n    2===2 ? warning(false, \'example warning\') : void 0;\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nAnd then rollup will rewrite `__DEV__` to true (for a dev bundle)\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  if(true){\\r\\n    2===2 ? warning(false, \'example warning\') : void 0;\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nAnd finally, commonjs remove the useless if (this seems like a happy side effect rather than something we are doing on purpose for the dev builds - as for prod we run the closure compiler). However it will keep the block scope:\\r\\n\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  {\\r\\n    2===2 ? warning(false, \'example warning\') : void 0;\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nThis makes sense to me, _this_ block scope is pretty absurd but we can\'t remove blocks automatically (at least not naively) because in some cases it _can_ affect the scope of variables.\\r\\n\\r\\nWe didn\'t have this before because babel would transform everything using ternaries, which don\'t start a block scope. Since we are moving the __DEV__ check to the userland now I don\'t think we want people writing this manually:\\r\\n\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n    __DEV__ ? 2===2 ? warning(false, \'example warning\') : void 0 : void 0;\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n## Next steps\\r\\n\\r\\nHow do we merge this? The way I see it we can either \\r\\n\\r\\n- Set the rule to warn, progressively fix the warnings. Don\'t like this because we don\'t have any rules set to warn? I might be wrong here? help??\\r\\n- Prepare an eslint fix on this PR and apply it before merging. The builds will become green.","number":17540,"user":{"login":"walaura"},"state":"closed","created_at":"2019-12-06T16:55:29Z"},{"id":533890614,"title":"useState hook behaves differently than setState when setting a Component in the state ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nAsk a question about hooks behaviour\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf I set a component in the state using `useState` hook, it becomes a React element (does not stay a component), but the same does not happen if the component is set in the state with `setState` method in a class component.\\r\\n\\r\\nFunction component using hooks:\\r\\n```\\r\\nconst AsyncComponent = props => {\\r\\n  const [LoadedComponent, setLoadedComponent] = useState(null);\\r\\n  const { loadComponent } = props;\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (!LoadedComponent) {\\r\\n      loadComponent().then(Component => {\\r\\n        setLoadedComponent(Component.default ? Component.default : Component);\\r\\n      });\\r\\n    }\\r\\n  }, []);\\r\\n\\r\\n  console.log(LoadedComponent); // {type: \\"div\\", key: null,ref: null,props: Object,_owner: null,_store: Object}\\r\\n\\r\\n  return (\\r\\n    <Fragment>\\r\\n      {LoadedComponent ? <LoadedComponent /> : <LoadingIndicator />}\\r\\n    </Fragment>\\r\\n  );\\r\\n};\\r\\n```\\r\\n\\r\\nClass component:\\r\\n```\\r\\nexport default class AsyncComponent extends PureComponent {\\r\\n    state = {\\r\\n        LoadedComponent: null\\r\\n    }\\r\\n    componentWillMount() {\\r\\n        if(!this.state.LoadedComponent) {\\r\\n            this.props.loadComponent()\\r\\n            .then(Component => {\\r\\n                this.setState({\\r\\n                    LoadedComponent: Component.default ? Component.default : Component\\r\\n                });\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    render() {\\r\\n        const { LoadedComponent } = this.state;\\r\\n\\r\\n        console.log(LoadedComponent); // function Overview() {}\\r\\n\\r\\n        return (<Fragment>\\r\\n            {LoadedComponent ? <LoadedComponent /> : <LoadingIndicator />}\\r\\n        </Fragment>);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nAsyncComponent here is used to dynamically load components to help with code splitting\\r\\n```\\r\\n<AsyncComponent loadComponent={() => import(\\"./Overview\\")}/>\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nThe complete example that can be used to see the issue can be found in the link below:\\r\\n\\r\\nhttps://codesandbox.io/s/react-state-component-setting-1pig4?module=%2Fsrc%2FAsyncComponent.js&expanddevtools=1\\r\\n\\r\\nBoth the function component using `useState` hook & the class component is present in the code. When the function component is used, error will be thrown in the console as shown below because the component was expected to be set in the state but it was a React element instead.\\r\\n\\r\\n```\\r\\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: <div />. Did you accidentally export a JSX literal instead of a component?\\r\\n    in AsyncComponent (at src/index.js:12)\\r\\n    in div (at src/index.js:10)\\r\\n    in App (at src/index.js:18)\\r\\n```\\r\\nWhen the function component is commented out & the equivalent class component is used, you can see that the component renders correctly without any issue.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nExpected the component to be set in the state like it happens when using setState in a Class component\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI guess 16.8+ since hooks was introduced\\r\\n","number":17539,"user":{"login":"AnupamaHosad"},"state":"closed","created_at":"2019-12-06T10:54:44Z"},{"id":533692270,"title":"HostText needs to copy over from current if it is unchanged","body":"stateNode is not one of the fields that gets copied over by createWorkInProgress.\\r\\n\\r\\nThis is bad for persistent mode since it\'s not the same instance.\\r\\n\\r\\nIn HostComponent we happened to always end up transferring the current stateNode when we bail.\\r\\nHowever, we didn\'t do this for HostText.\\r\\n\\r\\nFound by @JoshuaGross in Fabric.\\r\\n\\r\\nTODO: Unit tests.","number":17538,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-12-06T01:29:26Z"},{"id":533489620,"title":"useRef Hook Sealed only in Dev","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nAsk a question.\\r\\n**What is the current behavior?**\\r\\nSo I ran into an issue where I messed up and forgot to access the `current` property of a `ref` and missed it when I was testing in dev build mode. But when I ran it against our automated tests (and I did have a test for this case and the tests run in production mode) in our CI/CD pipeline, my code passed. The passage was due to the way my component was built, but I would\'ve expected my tests to blow up when trying to assign a property on the `ref` other than `current`. \\r\\n\\r\\nThankfully we caught this before it went to master, but my question is why would this fail in dev and not production. I went digging in the hooks code and found this [line](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L871), which appears to be sealing the `ref` object only when it is in dev. So, I\'m just wondering what the reasoning is behind sealing the `ref` only in dev mode, wouldn\'t we want it sealed in production mode?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n^16.8.5","number":17537,"user":{"login":"andrewnottaviano"},"state":"closed","created_at":"2019-12-05T17:24:41Z"},{"id":533364326,"title":"Replace `wrap-warning-with-env-check` with an eslint plugin","body":"Part 1.5 of #16753\\r\\n\\r\\nThis PR removes the `__DEV__` wrapping part of `wrap-warning-with-env-check` and replaces it with a functionally identical eslint plugin (`no-production-logging`).The babel rule gets renamed to `lift-warning-conditional-argument` because that\'s what it does! In its current stage this will fail builds since we still got all the unwrapped calls in the actual codebase.\\r\\n\\r\\nThe plugin supports `&&`statements like `if( __DEV__ && React.suspenseIsEnabled)` but fails any top level `||`s. Have a look at the tests and code because I might have some unchecked assumptions about static code analysis here (and about how we strip out the `__DEV__` checks at compile time lol) but i think this covers the cases we wanna cover.\\r\\n\\r\\n## Caveats\\r\\n\\r\\nThe generated development builds will include an extra block around the checks, from this original code\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  warning(2===2, \'example warning\');\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\neslint (in this branch) will make the editor rewrite it to\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  if(__DEV__){\\r\\n    warning(2===2, \'example warning\');\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nWhich babel will transform (using ternaries) to\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  if(__DEV__){\\r\\n    2===2 ? warning(false, \'example warning\') : void 0;\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nAnd then rollup will rewrite `__DEV__` to true (for a dev bundle)\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  if(true){\\r\\n    2===2 ? warning(false, \'example warning\') : void 0;\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nAnd finally, commonjs remove the useless if (this seems like a happy side effect rather than something we are doing on purpose for the dev builds - as for prod we run the closure compiler). However it will keep the block scope:\\r\\n\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n  {\\r\\n    2===2 ? warning(false, \'example warning\') : void 0;\\r\\n  }\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\nThis makes sense to me, _this_ block scope is pretty absurd but we can\'t remove blocks automatically (at least not naively) because in some cases it _can_ affect the scope of variables.\\r\\n\\r\\nWe didn\'t have this before because babel would transform everything using ternaries, which don\'t start a block scope. Since we are moving the __DEV__ check to the userland now I don\'t think we want people writing this manually:\\r\\n\\r\\n```jsx\\r\\nif(suspenseEnabled){\\r\\n    __DEV__ ? 2===2 ? warning(false, \'example warning\') : void 0 : void 0;\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n## Next steps\\r\\n\\r\\nHow do we merge this? The way I see it we can either \\r\\n\\r\\n- Set the rule to warn, progressively fix the warnings. Don\'t like this because we don\'t have any rules set to warn? I might be wrong here? help??\\r\\n- Prepare an eslint fix on this PR and apply it before merging. The builds will become green.","number":17536,"user":{"login":"walaura"},"state":"closed","created_at":"2019-12-05T13:51:16Z"},{"id":533349161,"title":"Error: \\"Could not find node with id \\"1758\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17535,"user":{"login":"mohsanabbas"},"state":"closed","created_at":"2019-12-05T13:23:38Z"},{"id":533304271,"title":"Jest React UI - unit testing","body":"I am pretty new to React and Jest unit test framework. I have my component and trying to write few unit test cases , tried few ways and unable to proceed further. Here is my code and test case. Can anyone guide /suggest the best approaches please. Non of the tests work and Thanks\\r\\n\\r\\nReact UI component Header\\r\\n\\r\\nimport React from \'react\';\\r\\nimport { Navbar, NavbarBrand } from \'reactstrap\';\\r\\nimport { Link } from \'react-router-dom\';\\r\\n\\r\\n\\r\\nconst Header = ({children}) =>\\r\\n    <Navbar light className=\\"sticky-top navbar-expand-lg navbar-toggleable-sm bg-white border-bottom\\">\\r\\n        <NavbarBrand tag={Link} to=\\"/\\">Abc: Portal</NavbarBrand>\\r\\n        <div className=\\"d-flex w-100 justify-content-end\\">\\r\\n            {children}\\r\\n        </div>\\r\\n    </Navbar>\\r\\n\\r\\nexport default Header\\r\\nTests - First two test cases passes, the third test case fails with error Expected is \\"\\" for received is \\"undefined \\" could anyone please guide me in the right direction.\\r\\n\\r\\nimport React from \'react\'\\r\\nimport { shallow, mount } from \'enzyme\';\\r\\nimport { Navbar, NavbarBrand } from \'reactstrap\';\\r\\nimport { cleanup } from \'@testing-library/react\';\\r\\nimport renderer from \'react-test-renderer\';\\r\\nimport { render, unmountComponentAtNode, ReactDOM } from \\"react-dom\\";\\r\\nimport { act } from \\"react-dom/test-utils\\";\\r\\nimport GlobalSettings from \'./../features/Header/GlobalSettings\';\\r\\nimport UserDisplayName from \'./../features/Header/UserDisplayName\';\\r\\nimport { Link, MemoryRouter  } from \'react-router-dom\';\\r\\nimport Header from \'./../features/Header/\';\\r\\n\\r\\nimport Enzyme from \'enzyme\';\\r\\nimport Adapter from \'enzyme-adapter-react-16\';\\r\\n\\r\\nEnzyme.configure({ adapter: new Adapter() });\\r\\n\\r\\n// automatically unmount and cleanup DOM after the test is finished.\\r\\nafterEach(cleanup);\\r\\n\\r\\nlet container = null;\\r\\nbeforeEach(() => {\\r\\n    // setup a DOM element as a render target\\r\\n    container = document.createElement(\\"div\\");\\r\\n    document.body.appendChild(container);\\r\\n});\\r\\n\\r\\nafterEach(() => {\\r\\n    // cleanup on exiting\\r\\n    unmountComponentAtNode(container);\\r\\n    container.remove();\\r\\n    container = null;\\r\\n});\\r\\n    \\r\\ntest(\'renders correctly\', () => {\\r\\n    const tree = shallow(\\r\\n        <NavbarBrand>\\r\\n            Damage Matrix: Customer Portal\\r\\n        </NavbarBrand>\\r\\n        );\\r\\n       \\r\\n    expect(tree).toMatchSnapshot();\\r\\n});\\r\\n\\r\\ntest(\'renders correctly\', () => {\\r\\n    const tree = renderer.create(\\r\\n        <NavbarBrand>\\r\\n            Damage Matrix: Customer Portal\\r\\n        </NavbarBrand>\\r\\n        ).toJSON();\\r\\n\\r\\n    expect(tree).toMatchSnapshot();\\r\\n});\\r\\ntest(\'test Header\', () => {\\r\\n    act(() => {\\r\\n        render(<MemoryRouter><Header /></MemoryRouter>, container);\\r\\n    });\\r\\n    expect(container.children.afterEach).toBe(\\"\\");\\r\\n\\r\\n    act(() => {\\r\\n        render(<MemoryRouter><Header children=\\"Hello\\" /></MemoryRouter>, container);\\r\\n    });\\r\\n    expect(container.appendChild).toBe(\\"Hello\\");\\r\\n\\r\\n    act(() => {\\r\\n        render(<MemoryRouter><Header>Testing Hello Children</Header></MemoryRouter>, container);\\r\\n    });\\r\\n    expect(container.appendChild).toBe(<UserDisplayName />);\\r\\n\\r\\n});\\r\\n","number":17534,"user":{"login":"PAAutofac"},"state":"closed","created_at":"2019-12-05T11:53:20Z"},{"id":533260350,"title":"Error: \\"Could not find node with id \\"275099\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17533,"user":{"login":"askirmas"},"state":"closed","created_at":"2019-12-05T10:28:00Z"},{"id":533203456,"title":"React Devtools standalone subpanels frozen on version 4.2.1","body":"Verified that version 4.2.0 works well, so a recent regression. Haven\'t tried to create a small example to reproduce, but since it\'s a recent bugfix version that should be fairly easy to pinpoint.\\r\\n\\r\\n","number":17532,"user":{"login":"BartlomiejLewandowski"},"state":"closed","created_at":"2019-12-05T08:40:52Z"},{"id":533083432,"title":"[Q] How to perform a server side data fetching with React Hooks","body":"We just start moving into React Hooks from the React life-cycle and one of the things that we noticed, is that there\'s no straightforward way to run something similar to ComponentWillMount for loading data before sending the rendered page to the user (since useEffect is not running on SSR).\\r\\n\\r\\nIs there any easy way supported by React to do so?","number":17531,"user":{"login":"idangozlan"},"state":"open","created_at":"2019-12-05T02:25:13Z"},{"id":533046198,"title":"onChange handler for controlled input is not called when bootstrap js file is included","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe `onChange` handler of a controlled radio button is not called if you include the bootstrap js file (popper.js and jquery and are fine).\\r\\n\\r\\nRemoving the script tag allows the change handler to be called, but it is necessary for bootstrap\'s responsive navbar collapsing.\\r\\n\\r\\nThis does not seem to be an issue with bootstrap because it works fine when not using React ([see gist](https://gist.github.com/nmay231/e60ede8015280baa495b31f1c56d82bc)).\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\nCreate a fresh react app with `npx create-react-app` and replace `App.js` and `index.html` with the versions from [this gist](https://gist.github.com/nmay231/db5196bc68cb7e6f3aa06eb5fa5ed337).\\r\\nTry commenting out/uncommenting the indicated script tag in the html file and see how the output is logged or not logged to the console.\\r\\n\\r\\nAs an example, the following input\'s change handler would not be called.\\r\\n```jsx\\r\\n<label className=\\"btn btn-secondary\\">\\r\\n  <input\\r\\n    type=\\"radio\\"\\r\\n    name=\\"options\\"\\r\\n    id=\\"option1\\"\\r\\n    value={1}\\r\\n    checked={currentOption === 1}\\r\\n    //  Not called when selected or deselected\\r\\n    onChange={handleChange}\\r\\n  />\\r\\n  Option 1\\r\\n</label>\\r\\n// More options...\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe onChange handler of the input should be called even when the bootstrap js file is included\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI tried this in Chrome 78 and Firefox 70 with React 16.12.0\\r\\nThis also did not work in v15.6 (after converting to class-based components).\\r\\n","number":17530,"user":{"login":"nmay231"},"state":"closed","created_at":"2019-12-05T00:41:48Z"},{"id":532887258,"title":"Add DEV warning for when a non-function is passed to useMemo","body":"Before, the following would throw a TypeError for createNext() not being a function:\\r\\n\\r\\n```\\r\\nfunction App() {\\r\\n  const memoized = React.useMemo({ foo: \\"bar\\" }, []);\\r\\n  return <div>{memoized.foo}</div>;\\r\\n}\\r\\n```\\r\\n\\r\\nNow we have a DEV warning that\'s more helpful:\\r\\n\\r\\n```\\r\\nWarning: useMemo received an argument that is not a function (instead, received `object`). When specified, this argument must be a function.\\r\\n    in App (at src/index.js:7)\\r\\n```\\r\\n\\r\\nAddresses #16589 ","number":17529,"user":{"login":"duanebester"},"state":"open","created_at":"2019-12-04T19:29:18Z"},{"id":532793867,"title":"Reordering of list\'s items leads to scroll to the top of page on Android device ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nreport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nVideo: https://yadi.sk/i/drnRHvyN2KH-jw\\r\\nDemo: https://codesandbox.io/embed/react-example-3l3hz?fontsize=14&hidenavigation=1&theme=dark\\r\\n\\r\\nSteps to reproduce:\\r\\n1. Open the demo on Android device\\r\\n2. Scroll to the bottom of the list\\r\\n3. Wait until the list is reordered\\r\\n4. Try to scroll up - you\'ll see that the list is automatically scrolled to the top or to the point near the top \\r\\n\\r\\nNote: could not reproduce this issue on iOS Safari\\r\\n\\r\\n**What is the expected behavior?**\\r\\nA browser should not scroll to the top of the list when items\' reorder is happened\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n- \\"react\\": \\"16.8.5\\"\\r\\n- \\"react-dom\\": \\"16.8.5\\"\\r\\n- \\"react-redux\\": \\"^5.0.5\\"\\r\\n- Android 7.1.1, Nexus 6 Build/N6F27M (could not reproduce on iOS)\\r\\n- Chrome 78.0.3904.108","number":17528,"user":{"login":"arhontmw"},"state":"open","created_at":"2019-12-04T16:24:53Z"},{"id":532756266,"title":"Suspense priority warning does not work for any hook except the first one per component","body":"The code that checks for high priority updates only checks the first hook on the component:\\r\\n\\r\\nhttps://github.com/facebook/react/blob/5064c7f6aa2b46469ac601cc851640e91ec340a9/packages/react-reconciler/src/ReactFiberWorkLoop.js#L2889-L2891\\r\\n\\r\\n`workInProgress.memoizedState` is the first hook.\\r\\n\\r\\nIt should loop through all the hooks instead:\\r\\n\\r\\n```js\\r\\nlet firstHook = workInProgress.memoizedState;\\r\\nif (firstHook !==  null) {\\r\\n  let hook = firstHook;\\r\\n  do {\\r\\n    // Stuff goes here\\r\\n    hook = hook.next;\\r\\n  } while (hook !== firstHook)\\r\\n}\\r\\n```","number":17527,"user":{"login":"acdlite"},"state":"open","created_at":"2019-12-04T15:24:49Z"},{"id":532696818,"title":"Triggering suspense with rejected promise causes re-render instead of error boundary","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nThis *might* be a bug. @gaearon and @sebmarkbage shared differing opinions on it [in this twitter thread](https://twitter.com/dan_abramov/status/1202045662189228032)\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf you throw a promise that rejects from a react component\'s render function, that rejection will be completely ignored. It will not show up in browser console, nor will it trigger a React error boundary. Instead, it will trigger a re-render (the same as if the promise had resolved).\\r\\n\\r\\n[Codepen example](https://codepen.io/joeldenning/pen/bGNNQJb?editors=1010)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nMy expectation was that the error boundary would be hit and the component would not re-render. [Sebastian\'s tweet](https://twitter.com/sebmarkbage/status/1202055557718216705?s=20) indicates that that is not the desired behavior, though.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis impacts `react@experimental`, and also `react@>=16.9.0`","number":17526,"user":{"login":"joeldenning"},"state":"open","created_at":"2019-12-04T13:49:31Z"},{"id":532662217,"title":"Error: \\"Could not find node with id \\"15081\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17525,"user":{"login":"Yellowhill"},"state":"closed","created_at":"2019-12-04T12:47:13Z"},{"id":532625095,"title":"React.cloneElement does not have props typing for a forwardedRefComponent","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nThis is a bug report\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nVersions Using:\\r\\n\\r\\nWhen trying to use `React.cloneElement` on a component that has been wrapped in `forwardRef`, the type checking for the `props` doesn\'t pick up any props of the base component or the ref. Example:\\r\\n\\r\\n```typescript\\r\\nimport * as React from \\"react\\";\\r\\nimport { forwardRef } from \\"react\\";\\r\\nimport { FunctionComponent } from \\"react\\";\\r\\nimport { RefObject } from \\"react\\";\\r\\nimport { useImperativeHandle } from \\"react\\";\\r\\nimport { useRef } from \\"react\\";\\r\\nimport { ReactElement } from \\"react\\";\\r\\n\\r\\nexport type DemoProps = {\\r\\n  isValid?: () => boolean;\\r\\n};\\r\\n\\r\\nexport type DemoRef = {\\r\\n  isValid: () => boolean;\\r\\n};\\r\\n\\r\\nconst Demo: FunctionComponent<DemoProps> = (\\r\\n  { isValid = () => true },\\r\\n  ref: RefObject<DemoRef>\\r\\n) => {\\r\\n  useImperativeHandle(ref, () => ({\\r\\n    isValid\\r\\n  }));\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <div></div>\\r\\n    </React.Fragment>\\r\\n  );\\r\\n};\\r\\n\\r\\nconst forwardedDemoRef = forwardRef<DemoRef, DemoProps>(Demo);\\r\\n\\r\\ntype Props = {\\r\\n  children: ReactElement<typeof forwardedDemoRef>;\\r\\n};\\r\\n\\r\\nconst DemoContainer = ({ children }: Props) => {\\r\\n  const ref = useRef<typeof forwardedDemoRef>(null);\\r\\n\\r\\n  return React.cloneElement(children, { ref: ref });\\r\\n};\\r\\n```\\r\\n\\r\\nThe typescript compiler will have the following error message:\\r\\n\\r\\n```\\r\\nTS2769: No overload matches this call. \xa0\xa0The last overload gave the following error. \xa0\xa0\xa0\xa0Argument of type \'{ ref: React.RefObject<React.ForwardRefExoticComponent<DemoProps & React.RefAttributes<DemoRef>>>; }\' is not assignable to parameter of type \'Partial<ForwardRefExoticComponent<DemoProps & RefAttributes<DemoRef>>> & Attributes\'. \xa0\xa0\xa0\xa0\xa0\xa0Object literal may only specify known properties, and \'ref\' does not exist in type \'Partial<ForwardRefExoticComponent<DemoProps & RefAttributes<DemoRef>>> & Attributes\'.  index.d.ts(292, 14): The last overload is declared here.\\r\\n```\\r\\n\\r\\nWhat\'s happening here is that `Partial<ForwardRefExoticComponent<DemoProps & RefAttributes<unknown>>> & Attributes` doesn\'t expose the `DemoProps` or `RefAttribute` through the base `ExoticComponent` type that `ForwardedRefExoticComponent` extends.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe typescript compiler should be aware of the properties `ref` and `isValid` through the `DemoProps & RefAttributes<DemoRef>` type that\'s being passed into `ForwardedRefExoticComponent` and should not give an error about `ref` not existing on that type\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```\\r\\n@types/react: 16.9.14\\r\\nreact: 16.9.14\\r\\ntypescript: 3.7.2\\r\\n```\\r\\n\\r\\nHave not tested in previous versions of React","number":17524,"user":{"login":"Garethp"},"state":"open","created_at":"2019-12-04T11:30:08Z"},{"id":532609774,"title":"When the Context.Provider value associated with useEffect, something error","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\njust see the code sandbox, I hope the text to render 2 the first time I click the button, but got 3.\\r\\n\\r\\nhttps://codesandbox.io/s/elegant-bartik-kchb7\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/11444431/70137569-2c8e9200-16c9-11ea-94d9-6025cb212e4d.png)\\r\\n\\r\\nThis is my View\\r\\n```jsx\\r\\n    <Ctx.Provider value={real}>\\r\\n        <button\\r\\n          onClick={() => {\\r\\n            setValue(c => c + 1);\\r\\n          }}\\r\\n        >\\r\\n          click\\r\\n        </button>\\r\\n        <button onClick={() => setValue(1)}>reset</button>\\r\\n        {value > 1 && <Child />}\\r\\n      </Ctx.Provider>\\r\\n```\\r\\nthen the `value >= 1` my view will render, and also the value associated the context.\\r\\n```js\\r\\n  useEffect(() => {\\r\\n    setReal({ value });\\r\\n  }, [value]);\\r\\n```\\r\\n\\r\\nAnd the Child is \\r\\n```jsx\\r\\nconst Child = () => {\\r\\n  const { value } = useContext(Ctx);\\r\\n  const [sum, setSum] = useState(0);\\r\\n  useEffect(() => {\\r\\n    setSum(s => s + value);\\r\\n    console.log(value);\\r\\n  }, [value]);\\r\\n  return <h1>{sum}</h1>;\\r\\n};\\r\\n```\\r\\n\\r\\nIn my perception of react, the sum just 2, because the Child only render when the value is greater than 1. But in the code, I will get 3","number":17523,"user":{"login":"thoamsy"},"state":"closed","created_at":"2019-12-04T11:00:34Z"},{"id":532567713,"title":"React Dev Tools Standalone only draggable, not clickable","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nI want to report a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen running react-devtools standalone on Windows 10, they manage to connect to the React app, but the UI can\'t be clicked and clicking on it only drags the window. This makes it unusable.\\r\\n\\r\\nI\'ve debuged it using built-in Chrome dev tools and it\'s due to `-webkit-app-region: drag` applied to body and other elements. As soon as I override this to be `-webkit-app-region: none;` everything starts working fine - you can click on things and you can still drag the window.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nClicking on the UI should work and not only drag the window.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI\'ve tested it with React Dev Tools standalone version 4.2.1-3816ae7c3\\r\\n","number":17522,"user":{"login":"mbman"},"state":"closed","created_at":"2019-12-04T09:50:32Z"},{"id":532544832,"title":"The useEffect didn\'t work when state changed","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nhook test\\r\\n\\r\\n```\\r\\n// context.test.js\\r\\n\\r\\nit(\'test change\', (done) => {\\r\\n    const actionType = \'REPLACE_ASSOCIATEDROOM\';\\r\\n    const associatedRoom = {};\\r\\n    const initState = { \'ALL_GROUP_ID\': [] };\\r\\n    store.replaceReducer((state, action) => {\\r\\n      if (actionType === action.type) {\\r\\n        state.roomSource.associatedRoom = associatedRoom;\\r\\n        return { ...state }\\r\\n      }\\r\\n      return state;\\r\\n    });\\r\\n    ReactTestUtils.act(() => context.setCurrentGroup(\'b\'));\\r\\n    store.dispatch({ type: actionType })\\r\\n    expect(context.houstGroupMap).toEqual({ [\'b\']: associatedRoom, ...initState });\\r\\n  });\\r\\n// expect recevied \\r\\n{\\r\\n        \\"ALL_GROUP_ID\\": Array [],\\r\\n    -  \\"b\\": Object {},\\r\\n}\\r\\n```\\r\\n\\r\\n```\\r\\ncontext.js\\r\\n\\r\\n...\\r\\nexport default () => {\\r\\n  const associatedRoom = useSelector(associatedRoomSelector);\\r\\n  const { groups, currentGroup, setCurrentGroup } = useHouseGroup();\\r\\n  const [houstGroupMap, setHoustGroupMap] = useState({});\\r\\n  const currentGroupRef = useRef();\\r\\n  useEffect(() => {\\r\\n    currentGroupRef.current = currentGroup;\\r\\n  });\\r\\n  console.log(\\"associatedRoom change\\", associatedRoom)\\r\\n  useEffect(() => {\\r\\n    setHoustGroupMap(preState => ({ ...preState, [currentGroupRef.current]: associatedRoom || [] }));\\r\\n    console.log(\\"call effect: associatedRoom\\", associatedRoom)\\r\\n  }, [associatedRoom]);\\r\\n\\r\\n  return { groups, currentGroup, setCurrentGroup, houstGroupMap };\\r\\n};\\r\\n...\\r\\n```\\r\\nThis log shows\\r\\n```\\r\\n      associatedRoom change null\\r\\n      call effect: associatedRoom null\\r\\n      associatedRoom change null\\r\\n      associatedRoom change null\\r\\n      associatedRoom change {}\\r\\n// when associatedRoom change  no call effect\\r\\n```\\r\\n\\r\\n**I see react.development.js  dispatcher.useEffect called, but react-dom.development.js HooksDispatcherOnMountInDEV.useEffect only call once**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact@16.12.0\\r\\nreact-dom@16.12.0\\r\\njest@24.8.0\\r\\nenzyme@3.10.0","number":17521,"user":{"login":"taixw2"},"state":"closed","created_at":"2019-12-04T09:09:55Z"},{"id":532500090,"title":"Component test reports \\"An update to ... was not wrapped in act(...)\\" even if it is","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nComponent test reports \\r\\n\\r\\n```\\r\\nWarning: An update to Welcome inside a test was not wrapped in act(...).\\r\\n\\r\\nWhen testing, code that causes React state updates should be wrapped into act(...):\\r\\n\\r\\nact(() => {\\r\\n  /* fire events that update state */\\r\\n});\\r\\n/* assert on the output */\\r\\n```\\r\\n\\r\\neven though it is wrapped in act.\\r\\n```\\r\\n it(\\"gets something\\", () => {\\r\\n  act(() => {\\r\\n    mount(<Welcome />);\\r\\n  });\\r\\n\\r\\n  expect(true).toBe(true);\\r\\n});\\r\\n```\\r\\nMounting the component with jest is the only thing that I do and the error is thrown anyway. Normally I\'d want to mock the API calling library to test if the component is properly calling the endpoint and displays the data.\\r\\nThe same error appears when using ReactDOM.render() as stated in https://reactjs.org/docs/test-utils.html#act .\\r\\n\\r\\nhttps://codesandbox.io/s/create-react-app-e4vsx\\r\\n(See pages/index.test.js)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNot to throw the error message when everything it is wrapped in act() properly.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.12.0\\r\\nI don\'t know if it worked earlier.\\r\\n","number":17520,"user":{"login":"lud-hu"},"state":"closed","created_at":"2019-12-04T07:28:25Z"},{"id":532491570,"title":"Revert Rerender Error Check","body":"This didn\'t work. Because the rerender count zero ends up being used as a signal that we should process any remaining useState updates even if the first pass has already scheduled an update.\\r\\n\\r\\nWill revisit in https://github.com/facebook/react/pull/17484","number":17519,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-12-04T07:05:27Z"},{"id":532394308,"title":"[react-interactions] Move Flare event registration to commit phase","body":"This PR fixes an issue that can lead to memory leaks with the Flare event system. Specifically, the Flare event system has the notion of \\"root events\\" that are meant to be triggered when an incoming dispatched event gets bubbled to the document. Upon hitting the document, we then check a global Map, to see if there are any active event responders listening to the given type of event coming through.\\r\\n\\r\\nThe issue is that this Map can\'t be GC\'d when DOM nodes are detached and removed, because we need to iterate over the Map\'s values to get all active responders that listen to root events. Normally, this wouldn\'t be an issue, but because of the heuristics as to how React reconciles responders differently depending on initial render vs update render, the root events can be subscribed to, but never used due to unwinding and other characteristics within the reconciliation processes. The expectation is that things that occur in initial render should be effects that can be unwound simply due to the nature of the garbage collector, but because of the nature of how root events work \u2013 this will never be the case (we need to be able to iterate over root events on any given incoming dispatch event, which means we can\'t use a WeakMap or WeakSet).\\r\\n\\r\\nIn the ideal world, no root event listeners should be created on initial render. Unfortunately, this is likely to be a more complex and feature breaking change to make at this point given the requirements of the Focus and FocusWithin event responders, which both make use of root events on initial mount. This PR tackles the problem in a somewhat brute-force approach, by moving all React Flare responders to the commit phase, at the compromise of more commit phase work vs the benefit of no leaking of the root event Map.\\r\\n\\r\\nI believe this is probably the best short-term solution, and a lesson we can take forward in ironing out kinks with the newer Listener API. We can also, in the short-term, possibly come up with a way of remove root events from event responders on initial mount and finding a way to make them work conditionally, but this will likely take a larger period of time. In the interests of unblocking this memory leak, this seems the most sane path forward at this point.","number":17518,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-04T01:56:44Z"},{"id":532358786,"title":"Stale values for useState inside callback functions","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\npotential bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen calling `setState` from `useState`, the `state` value is stale from inside a function. The value is correct inside the body of the component, but not inside the function itself.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nBegin by typing `a@g` which should autocomplete to `a@gmail.com`. You will see the `expected` and `actual` values for the input below each.\\r\\nhttps://codesandbox.io/s/useemailautocomplete-material-ui-04423\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should have the correct value for `email` inside the `handleChange` function.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact: `v16.12.0`\\r\\nBrowser: chrome\\r\\nOS: Catalina","number":17517,"user":{"login":"alex-cory"},"state":"closed","created_at":"2019-12-04T00:25:36Z"},{"id":532341318,"title":"map through connected component, get data of last saga call within all componenets","body":"\\r\\n** want to report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\ni have a connect componenet name Section(Redux component), which render a section within a View.\\r\\n\\r\\nSometimes the View has more than one Section and this how i render:\\r\\n`/**\\r\\n *\\r\\n * SubViews\\r\\n *\\r\\n */\\r\\n\\r\\nimport React, { memo, useEffect } from \'react\';\\r\\nimport PropTypes from \'prop-types\';\\r\\nimport { connect } from \'react-redux\';\\r\\nimport { createStructuredSelector } from \'reselect\';\\r\\nimport { compose } from \'redux\';\\r\\nimport { Box } from \'@material-ui/core\';\\r\\nimport { handleErrorStatus } from \'utils/apiUtils\';\\r\\nimport EmptyPaper from \'components/layout/atoms/EmptyPaper\';\\r\\nimport ViewSection from \'containers/ViewSection\';\\r\\n\\r\\nimport { strings } from \'constants/strings\';\\r\\nimport { useInjectSaga } from \'utils/injectSaga\';\\r\\nimport { useInjectReducer } from \'utils/injectReducer\';\\r\\nimport reducer from \'./reducer\';\\r\\nimport saga from \'./saga\';\\r\\nimport { loadSubViews } from \'./actions\';\\r\\nimport makeSelectSubViews, {\\r\\n  makeSelectSubViewsLoading,\\r\\n  makeSelectSubViewsError,\\r\\n} from \'./selectors\';\\r\\n\\r\\nexport function SubViews({\\r\\n  handleLoadViewSections,\\r\\n  views,\\r\\n  viewsLoading,\\r\\n  viewsError,\\r\\n  siteId,\\r\\n  assessmentId,\\r\\n  location,\\r\\n  history,\\r\\n}) {\\r\\n  useInjectReducer({ key: \'subViews\', reducer });\\r\\n  useInjectSaga({ key: \'subViews\', saga });\\r\\n  const pathnames = location.pathname.split(\'/\').filter(x => x);\\r\\n  useEffect(() => {\\r\\n    const viewcode = pathnames[6];\\r\\n    if (siteId !== undefined && siteId !== null) {\\r\\n      handleLoadViewSections(siteId, assessmentId, viewcode);\\r\\n    }\\r\\n  }, []);\\r\\n\\r\\n  if (viewsLoading) {\\r\\n    return <EmptyPaper type=\\"loading\\" text={strings.viewSectionsLoading} />;\\r\\n  }\\r\\n  if (handleErrorStatus(viewsError)) {\\r\\n    return <EmptyPaper type=\\"empty\\" text={handleErrorStatus(viewsError)} />;\\r\\n  }\\r\\n  if (views === null || views.length === 0) {\\r\\n    return (\\r\\n      <Box p={4}>\\r\\n        <EmptyPaper type=\\"empty\\" text=\\"no data\\" />\\r\\n      </Box>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <>\\r\\n      <Box p={4}>\\r\\n        {views[0].sections.map(section => (\\r\\n          <ViewSection\\r\\n            key={section.id}\\r\\n            viewcode={views[0].viewCode}\\r\\n            section={section}\\r\\n            history={history}\\r\\n            location={location}\\r\\n            siteId={siteId}\\r\\n            assessmentId={assessmentId}\\r\\n          />\\r\\n        ))}\\r\\n      </Box>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nSubViews.propTypes = {\\r\\n  handleLoadViewSections: PropTypes.func.isRequired,\\r\\n  views: PropTypes.array,\\r\\n  viewsLoading: PropTypes.bool.isRequired,\\r\\n  viewsError: PropTypes.bool.isRequired,\\r\\n  siteId: PropTypes.number,\\r\\n  assessmentId: PropTypes.string,\\r\\n  location: PropTypes.object,\\r\\n  history: PropTypes.object,\\r\\n};\\r\\n\\r\\nconst mapStateToProps = createStructuredSelector({\\r\\n  views: makeSelectSubViews(),\\r\\n  viewsLoading: makeSelectSubViewsLoading(),\\r\\n  viewsError: makeSelectSubViewsError(),\\r\\n});\\r\\n\\r\\nfunction mapDispatchToProps(dispatch) {\\r\\n  return {\\r\\n    handleLoadViewSections: (siteId, assessmentId, viewcode) => {\\r\\n      dispatch(loadSubViews(siteId, assessmentId, viewcode));\\r\\n    },\\r\\n  };\\r\\n}\\r\\n\\r\\nconst withConnect = connect(\\r\\n  mapStateToProps,\\r\\n  mapDispatchToProps,\\r\\n);\\r\\n\\r\\nexport default compose(\\r\\n  withConnect,\\r\\n  memo,\\r\\n)(SubViews);\\r\\n`\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nand my Section code is:\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n`/**\\r\\n *\\r\\n * ViewSection\\r\\n *\\r\\n */\\r\\n\\r\\nimport React, { memo, useEffect, useCallback } from \'react\';\\r\\nimport PropTypes from \'prop-types\';\\r\\nimport { connect } from \'react-redux\';\\r\\nimport SectionTitle from \'components/layout/atoms/SectionTitle\';\\r\\nimport QuestionsPanel from \'components/sections/QuestionsPanel\';\\r\\nimport { createStructuredSelector } from \'reselect\';\\r\\nimport { compose } from \'redux\';\\r\\nimport Location from \'containers/sections/Location\';\\r\\nimport Assets from \'containers/sections/Assets\';\\r\\nimport Threats from \'containers/sections/Threats\';\\r\\nimport { useInjectSaga } from \'utils/injectSaga\';\\r\\nimport { useInjectReducer } from \'utils/injectReducer\';\\r\\nimport {\\r\\n  makeSelectQuestions,\\r\\n  makeSelectQuestionsLoading,\\r\\n  makeSelectQuestionsError,\\r\\n} from \'./selectors\';\\r\\nimport reducer from \'./reducer\';\\r\\nimport saga from \'./saga\';\\r\\nimport { loadQuestions, updateAnswer } from \'./actions\';\\r\\nimport {\\r\\n  makeSelectDescriptors,\\r\\n  makeHelperDataSelector,\\r\\n} from \'../Site/selectors\';\\r\\nimport { toggleHelpPanel } from \'../Site/actions\';\\r\\n\\r\\nexport function ViewSection({\\r\\n  section,\\r\\n  viewcode,\\r\\n  siteId,\\r\\n  assessmentId,\\r\\n  history,\\r\\n  location,\\r\\n  handleLoadQuestions,\\r\\n  questions,\\r\\n  loading,\\r\\n  error,\\r\\n  handleUpdateAnswer,\\r\\n  descriptors,\\r\\n  helperData,\\r\\n  handletoggleHelpPanel,\\r\\n}) {\\r\\n  useInjectReducer({ key: \'viewSection\', reducer });\\r\\n  useInjectSaga({ key: \'viewSection\', saga });\\r\\n  console.log(\'ViewSection()\');\\r\\n  console.log(section);\\r\\n  // console.log(viewcode);\\r\\n  useEffect(() => {\\r\\n    console.log(\'ViewSection() useEffect()\');\\r\\n    if (section.contentType === \'Questions\') {\\r\\n      handleLoadQuestions(\\r\\n        siteId,\\r\\n        assessmentId,\\r\\n        viewcode,\\r\\n        section.sectionCode,\\r\\n        descriptors,\\r\\n      );\\r\\n    }\\r\\n  }, [section]);\\r\\n\\r\\n  const onHandleUpdateAnswer = useCallback((answer, answerId) => {\\r\\n    handleUpdateAnswer(siteId, assessmentId, answer, answerId);\\r\\n  }, []);\\r\\n\\r\\n  if (section.contentType === \'Locations\') {\\r\\n    return (\\r\\n      <Location\\r\\n        history={history}\\r\\n        location={location}\\r\\n        siteId={siteId}\\r\\n        assessmentId={assessmentId}\\r\\n        section={section}\\r\\n        loading={loading}\\r\\n        error={error}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n  if (section.contentType === \'Assets\') {\\r\\n    return (\\r\\n      <Assets\\r\\n        history={history}\\r\\n        location={location}\\r\\n        siteId={siteId}\\r\\n        assessmentId={assessmentId}\\r\\n        section={section}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n  if (section.contentType === \'Threats\') {\\r\\n    return (\\r\\n      <Threats\\r\\n        history={history}\\r\\n        location={location}\\r\\n        siteId={siteId}\\r\\n        assessmentId={assessmentId}\\r\\n        section={section}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n\\r\\n  const handleDrawerClose = (itemId, isDrawerOpen, ratings, colorOrder) => {\\r\\n    handletoggleHelpPanel({ itemId, isDrawerOpen, ratings, colorOrder });\\r\\n  };\\r\\n  console.log(\'ViewSection() render\');\\r\\n  console.log(questions)\\r\\n\\r\\n  if (section.contentType === \'Questions\') {\\r\\n    return (\\r\\n      <QuestionsPanel\\r\\n        headingText={section.title}\\r\\n        helperData={helperData}\\r\\n        handleDrawerClose={handleDrawerClose}\\r\\n        key={section.id}\\r\\n        loading={loading}\\r\\n        error={error}\\r\\n        questionsList={questions}\\r\\n        handleAnswerSubmit={onHandleUpdateAnswer}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <SectionTitle text={section.title} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nViewSection.propTypes = {\\r\\n  section: PropTypes.object.isRequired, // from parent compoenent\\r\\n  viewcode: PropTypes.string.isRequired, // the view code from parent\\r\\n  location: PropTypes.object,\\r\\n  history: PropTypes.object,\\r\\n  siteId: PropTypes.number,\\r\\n  assessmentId: PropTypes.string,\\r\\n  handleLoadQuestions: PropTypes.func,\\r\\n  questions: PropTypes.array,\\r\\n  loading: PropTypes.bool,\\r\\n  error: PropTypes.any,\\r\\n  handleUpdateAnswer: PropTypes.func,\\r\\n  descriptors: PropTypes.array.isRequired,\\r\\n  helperData: PropTypes.object,\\r\\n  handletoggleHelpPanel: PropTypes.func,\\r\\n};\\r\\n\\r\\nconst mapStateToProps = createStructuredSelector({\\r\\n  questions: makeSelectQuestions(),\\r\\n  loading: makeSelectQuestionsLoading(),\\r\\n  error: makeSelectQuestionsError(),\\r\\n  descriptors: makeSelectDescriptors(),\\r\\n  helperData: makeHelperDataSelector(),\\r\\n});\\r\\n\\r\\nfunction mapDispatchToProps(dispatch) {\\r\\n  return {\\r\\n    handleLoadQuestions: (\\r\\n      siteId,\\r\\n      assessmentId,\\r\\n      viewcode,\\r\\n      sectioncode,\\r\\n      descriptors,\\r\\n    ) => {\\r\\n      dispatch(\\r\\n        loadQuestions(siteId, assessmentId, viewcode, sectioncode, descriptors),\\r\\n      );\\r\\n    },\\r\\n    handleUpdateAnswer: (siteId, assessmentId, updatedAnswer, answerId) => {\\r\\n      dispatch(updateAnswer(siteId, assessmentId, updatedAnswer, answerId));\\r\\n    },\\r\\n    handletoggleHelpPanel: (action, helperData) => {\\r\\n      dispatch(toggleHelpPanel(action, helperData));\\r\\n    },\\r\\n  };\\r\\n}\\r\\n\\r\\nconst withConnect = connect(\\r\\n  mapStateToProps,\\r\\n  mapDispatchToProps,\\r\\n);\\r\\n\\r\\nexport default compose(\\r\\n  withConnect,\\r\\n  memo,\\r\\n)(ViewSection);\\r\\n`\\r\\n\\r\\nNow, when my page renders, i get list of sections with their own headings but i get same lits of questions within all the sections.\\r\\n\\r\\nthis screen schot of console will explain it better\\r\\n![console](https://user-images.githubusercontent.com/29419606/70099157-1f9a8000-1682-11ea-8c87-caf480d31c62.PNG)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nit is expected when i map through my connected component, each one triggers it\'s own saga and reducer and render its own related question list\\r\\n","number":17516,"user":{"login":"ArouiniLobna"},"state":"closed","created_at":"2019-12-03T23:39:37Z"},{"id":532330397,"title":"Strange behaviour of <SuspenseList revealOrder=\\"forwards\\"/> in concurrent mode","body":"_Behaviour looks pretty strange in my opinion but it might be the expected one. I just wanted to open an issue in case it was not. Please note that it is relative to the coming concurrent mode. Please feel free to close if it is not considered as a bug._\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n_In concurrent mode_\\r\\n\\r\\nThe output of the following scenario looks strange to me. I\'d have expected to have either `Loading A / Loading C / Loading C` or `Loading A / C / C`. (`A`, `B`, `C` are described right after)\\r\\n\\r\\nHere is the scenario ([live demo with concurrent mode enabled](https://dubzzz.github.io/react-suspenselist-bug/build/)):\\r\\n\\r\\n1. Render:\\r\\n```jsx\\r\\nrender(\\r\\n  <SuspenseList revealOrder=\\"forwards\\">\\r\\n    <Suspense fallback={<span>Loading B</span>}>\\r\\n      <B />\\r\\n    </Suspense>\\r\\n    <Suspense fallback={<span>Loading C</span>}>\\r\\n      <C />\\r\\n    </Suspense>\\r\\n  </SupenseList>\\r\\n)\\r\\n```\\r\\n\\r\\n2. Resolve `B` and `C`\\r\\n\\r\\n3. (Re-)render:\\r\\n```jsx\\r\\nrender(\\r\\n  <SuspenseList revealOrder=\\"forwards\\">\\r\\n    <Suspense fallback={<span>Loading A</span>}>\\r\\n      <A />\\r\\n    </Suspense>\\r\\n    <Suspense fallback={<span>Loading C</span>}>\\r\\n      <C />\\r\\n    </Suspense>\\r\\n    <Suspense fallback={<span>Loading C</span>}>\\r\\n      <C />\\r\\n    </Suspense>\\r\\n  </SupenseList>\\r\\n)\\r\\n```\\r\\n\\r\\n4. Output is: `Loading A / C / Loading C`\\r\\n\\r\\nWith:\\r\\n\\r\\n```jsx\\r\\n// You can considerer the following:\\r\\nconst A = React.lazy(() => import(\'./A\'));\\r\\nconst B = React.lazy(() => import(\'./B\'));\\r\\nconst C = React.lazy(() => import(\'./C\'));\\r\\n```\\r\\nIn my code: https://github.com/dubzzz/react-suspenselist-bug/blob/master/src/App.js#L189_L205\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'d have expected to have either `Loading A / Loading C / Loading C` or `Loading A / C / C`.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: `master` branch\\r\\nReact: `0.0.0-experimental-b53ea6ca0`\\r\\n\\r\\n**How did I found this bug?**\\r\\n\\r\\nThis _potential bug_ has been discovered while I was trying to run property based tests based on [fast-check](https://github.com/dubzzz/fast-check/) against React library.\\r\\n\\r\\nSee https://github.com/dubzzz/react/commit/79d49ed85c34a5339f1d3163a0c6e99eddaf4405\\r\\n\\r\\nIn my test I was assessing the following properties:\\r\\n- `\\"together\\"`: only renders when all components are ready (test covers complex and deep structures containing nested `<SuspenseList revealOrder=\\"together\\" />` and `<Suspense />` referencing potentially multiple times the same `Component`)\\r\\n- `\\"forwards\\"`: only renders components up to the last resolved one, all components after this one will be considered as unresolved","number":17515,"user":{"login":"dubzzz"},"state":"open","created_at":"2019-12-03T23:13:30Z"},{"id":532267992,"title":"Getting error while redirect to the home page","body":"Hi,\\r\\n\\r\\ni was trying to restrict logged in user to access login page using following code\\r\\n```\\r\\nimport React, { useEffect, useState } from \\"react\\";\\r\\nimport { Route } from \\"react-router-dom\\";\\r\\nimport { Redirect } from \\"react-router-dom\\";\\r\\n\\r\\nconst UserLayoutRoute = ({ component: Component, ...rest }) => {\\r\\n  const [loggedIn, setLoggedIn] = useState(null);\\r\\n  useEffect(() => {\\r\\n    if (localStorage.getItem(\\"cachedValue\\") !== null) {\\r\\n      setLoggedIn(true);\\r\\n    }\\r\\n  }, []);\\r\\n  return loggedIn ? (\\r\\n    <Route\\r\\n      {...rest}\\r\\n      render={matchProps => (\\r\\n        <div className=\\"App\\">\\r\\n          <section className=\\"user-page\\">\\r\\n            <div className=\\"\\">\\r\\n              <div className=\\"\\">\\r\\n                <Component {...matchProps} />\\r\\n              </div>\\r\\n            </div>\\r\\n          </section>\\r\\n        </div>\\r\\n      )}\\r\\n    />\\r\\n  ) : (\\r\\n    <Redirect to=\\"/\\"  />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default UserLayoutRoute;\\r\\n\\r\\n```\\r\\nwith this code  page keep on loading and its not rendering anything.Please help me to get out from this.","number":17514,"user":{"login":"vengatbap"},"state":"closed","created_at":"2019-12-03T21:10:16Z"},{"id":532261510,"title":"[react-interactions] Upgrade passive event listeners to active listeners","body":"One of the long standing things we\'ve wanted to do when working on React Flare, was to be able to upgrade passive event listeners to active event listeners where possible. This removes the need to have two separate event listeners attached to the document at the same time.\\r\\n\\r\\nIf we first attach an active listener of a given type, and then later try to add a passive listener of the same type, we don\'t both \u2013 instead we handle the logic for both active and passive events inside the same active event listener. Furthermore, if we first attach a passive event for a given type, and then later try to add an active listener of the same type, we first remove the passive listener from the DOM and then we add the active listener to the DOM.\\r\\n\\r\\nThe logic in the responder system might seem a little convoluted because of how responders target/root events are designed. Thankfully, this won\'t be the case with the Listener API and we use a much simpler control flow when dealing with events with that API.\\r\\n\\r\\nI also remove the responder logic for `passiveSupported` as it no longer felt relevant given this change, plus it was never used in any event responders. To enable the changes, we change the Listener Set to a Listener Map, so we can store the event listener callback we used when setting up the DOM event listener (this enables us to remove it again later).","number":17513,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-03T20:58:24Z"},{"id":532226219,"title":"useContext is declared at top level but value is not updated in another function","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI am taking value using useContext at the top in myComponent.\\r\\n\\r\\nI have a few numbers of public API function which uses its value. It can be invoked and updated useContext value any time in parent component. but later in another function of myComponent still takes old value.\\r\\n\\r\\nI can\u2019t use useEffect here because it is public API which can be invoked at any time.\\r\\n\\r\\nI have provided example below:\\r\\n\\r\\nIn state/index.js,\\r\\n```\\r\\nimport React, { createContext, useContext, useReducer } from \'react\';\\r\\nimport reducer from \'reducers\';\\r\\nimport PropTypes from \'prop-types\';\\r\\n\\r\\nconst initialState = {\\r\\n   test: true,\\r\\n};\\r\\n\\r\\nconst StateContext = createContext();\\r\\n\\r\\nconst StateProvider = ({ children }) => (\\r\\n <StateContext.Provider value={useReducer(reducer, initialState)}>\\r\\n  {children}\\r\\n </StateContext.Provider>\\r\\n);\\r\\n\\r\\nconst useStateValue = () => useContext(StateContext);\\r\\n\\r\\nStateProvider.propTypes = {\\r\\n  children: PropTypes.any,\\r\\n};\\r\\n\\r\\nStateProvider.defaultProps = {\\r\\n children: {},\\r\\n};\\r\\n\\r\\nexport { StateContext, StateProvider, useStateValue };\\r\\n```\\r\\nAnd in main.js\\r\\n\\r\\n```\\r\\n<StateProvider>\\r\\n   <App/>\\r\\n</StateProvider>\\r\\n```\\r\\nAnd In actions/app.js\\r\\n\\r\\n```\\r\\nconst TEST_FALSE = \'TEST_FALSE\';\\r\\nconst TEST_TRUE = \'TEST_TRUE\';\\r\\n\\r\\nconst testTrue = dispatch => {\\r\\n  dispatch({\\r\\n    type: TEST_TRUE,\\r\\n  });\\r\\n};\\r\\n\\r\\nconst testFalse = dispatch => {\\r\\n    dispatch({\\r\\n      type: TEST_FALSE,\\r\\n    });\\r\\n };\\r\\n\\r\\nexport {\\r\\n  TEST_FALSE,\\r\\n  TEST_TRUE,\\r\\n  testTrue,\\r\\n  testFalse,\\r\\n};\\r\\n```\\r\\n\\r\\nin reducers/index.js\\r\\n\\r\\n```\\r\\nimport { TEST_FALSE, TEST_TRUE } from \'actions/App\';\\r\\nimport { isEmpty } from \'Utils\';\\r\\n\\r\\nconst testReducer = (state, action) => {\\r\\n  switch (action.type) {\\r\\n    case TEST_FALSE:\\r\\n      return {\\r\\n        ...state,\\r\\n        test: false,\\r\\n      };\\r\\n    case TEST_TRUE:\\r\\n      return {\\r\\n        ...state,\\r\\n        test: true,\\r\\n      };\\r\\n    default:\\r\\n      return state;\\r\\n  }\\r\\n};\\r\\n\\r\\nconst rootReducer = ({ test }, action) => ({\\r\\n  test: testReducer(test, action),\\r\\n});\\r\\n\\r\\nexport default rootReducer;\\r\\n```\\r\\nAnd In app.js\\r\\n\\r\\n```\\r\\nimport { testTrue, testFalse } from \'actions/App\';\\r\\n\\r\\nimport { useStateValue } from \'../state\';\\r\\n\\r\\nconst App = props => {\\r\\n  const [{ test }, dispatch] = useStateValue();\\r\\n\\r\\n  const updateTestTrue = () => {\\r\\n    testTrue(dispatch);\\r\\n  }\\r\\n\\r\\n  const updateTestFalse = () => {\\r\\n    testFalse(dispatch);\\r\\n  }\\r\\n\\r\\n  const checkTest = () => {\\r\\n    console.log(\'check test\', test) // here it always returns initial state value even after value gets updated\\r\\n  }\\r\\n  return (<div>test</div>)\\r\\n\\r\\n}\\r\\nexport default App;\\r\\n```\\r\\ncheckTest, updateTestFalse, updateTestTrue are sample public API functions. later using it, I will  invoke and updates the value. Component renders correctly.\\r\\n\\r\\nBut in checkTest functions, it takes only initial value as true. not taking updated value.\\r\\n\\r\\nFor example If I update by invoking updateTestFalse function. While I invoke checkTest still takes old value.\\r\\n\\r\\nPlease let me know what am missing here? I want to use the updated value in checkTest function\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**checkTest** function should take updated value not initial value\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nVersion: React - v16.10, \\r\\n\\r\\nLet me know what am missing here.\\r\\n","number":17512,"user":{"login":"GnanaAjana"},"state":"closed","created_at":"2019-12-03T19:53:54Z"},{"id":532090946,"title":"CSS Not Being Applied (or Overwritten?) Route Based Code Splitting","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** Bug\\r\\n\\r\\n**What is the current behavior?** \\r\\n\\r\\nAt our website, we have a branch where we\'re converting to route based code splitting to reduce bundle sizes. The issue now is that our global `index.scss` properties aren\'t be applied to the lazy loaded modules. This is breaking things like our font faces / `<a>` tag styling.\\r\\n\\r\\n```ts\\r\\n// routes.ts BEFORE\\r\\nimport Home from \'../components/home\');\\r\\n\\r\\nconst Routes: React.FC = () => (\\r\\n    <Switch>\\r\\n      // ...\\r\\n      <Route exact path=\\"/\\" component={Home} />\\r\\n      <Redirect from=\\"*\\" to=\\"/\\" />\\r\\n    </Switch>\\r\\n);\\r\\n```\\r\\n```ts\\r\\n// routes.ts AFTER\\r\\nconst Home = lazy(() => import(\'../components/home\'));\\r\\n\\r\\nconst Routes: React.FC = () => (\\r\\n  <Suspense fallback={/*...*/}>\\r\\n    <Switch>\\r\\n      // ...\\r\\n      <Route exact path=\\"/\\" component={Home} />\\r\\n      <Redirect from=\\"*\\" to=\\"/\\" />\\r\\n    </Switch>\\r\\n  </Suspense>\\r\\n);\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:** \\r\\n\\r\\nN/A because of reliance on bootstrap but the [link to the branch](https://github.com/RITesports/Website/tree/route-spliting/react-app/src)\\r\\n\\r\\n1. Clone Branch\\r\\n2. install deps for react-app\\r\\n3. npm start\\r\\n\\r\\n`/teams` wont\' work but all of the text is left aligned on the cards and the link are normal blue and underlined (I can provide pictures if needed). You can compare this to the live site  [here](https://www.esportsrit.com).\\r\\n\\r\\n**What is the expected behavior?** The global css should be applied the same, lazy loaded or not.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All Browsers. No idea on older versions.\\r\\n","number":17511,"user":{"login":"rag4214"},"state":"closed","created_at":"2019-12-03T16:04:32Z"},{"id":532079241,"title":"Refactor legacy update queue","body":"## Based on #17483\\r\\n\\r\\nRefactors legacy update queue to incorporate rebasing fix. Uses nearly the same approach as the hook update queue but has to handle a few other cases.\\r\\n\\r\\nManaged to remove some older, poorly factored code related to error handling.\\r\\n\\r\\n## To-do\\r\\n\\r\\n- [x] One remaining unit test to fix\\r\\n- [x] Fix Flow","number":17510,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-12-03T15:47:24Z"},{"id":531959896,"title":"Custom hooks to api \uff08fetch data\uff09,How can it be reused?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nerror\\r\\n\\r\\n**What is the current behavior?**\\r\\nUncaught Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\r\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\r\\n2. You might be breaking the Rules of Hooks\\r\\n3. You might have more than one copy of React in the same app\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\uff081\uff09 const { data: { data: comments }, loading: commentsLoading } = useHttpRequest([], \\"/api/getcomment\\", \\"GET\\");\\r\\nBut after I\'ve added the data and I\'m going to pull the latest data again, what\'s the best way to write it.\\r\\n\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\uff081\uff09The above custom hooks can be called again in the method so you don\'t need to write more useState in the component\\r\\n\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\ngoogle browser, react cdn url.","number":17509,"user":{"login":"victorykong"},"state":"closed","created_at":"2019-12-03T12:46:04Z"},{"id":531924692,"title":"[react-interactions] Add experimental ReactDOM Listener API","body":"This PR adds the experimental Listener API to React behind a flag. Note: For now this is only intended to be used internally at Facebook, and we have no initial plans to ship this to open source.\\r\\n\\r\\nThe listener API includes its own React event system that leverages the lessons learned from the existing event system and that of the experimental React Flare event system. There are three new APIs that are added to `react-dom`:\\r\\n\\r\\n- `ReactDOM.unstable_createListener`\\r\\n- `ReactDOM.unstable_createRootListener`\\r\\n- `ReactDOM.unstable_addEventPriority`\\r\\n\\r\\nThe Listener API works in a similar way to the DOM\'s `addEventListener` API, except this API returns a special React Listener object that can be supplied to elements via the internal `listeners` prop. An example of this follows:\\r\\n\\r\\n```jsx\\r\\nimport React from \'react\';\\r\\nimport {unstable_createListener} from \'react-dom\';\\r\\n\\r\\nfunction ClickableButton({ text }) {\\r\\n  const click = unstable_createListener(\'click\', event => {\\r\\n    console.log(\'You clicked the button, event\');\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <button listeners={click}>{text}</button>\\r\\n  ); \\r\\n}\\r\\n```\\r\\n\\r\\n## Listener Options\\r\\n\\r\\nBoth the `createListener` and `createRootListener` APIs support an optional third argument for specifying listener options. There are two boolean options that can be specified, `capture` and `passive`. Here\'s an example to demonstrate this:\\r\\n\\r\\n```jsx\\r\\nfunction ClickableButton({ text }) {\\r\\n  const options = {\\r\\n    capture: true, // capture is `false` by default\\r\\n    passive: true, // passive is `true` by default\\r\\n  };\\r\\n  const click = unstable_createListener(\'click\', event => {\\r\\n    console.log(\'You clicked the button, event\');\\r\\n  }, options);\\r\\n\\r\\n  return (\\r\\n    <button listeners={click}>{text}</button>\\r\\n  ); \\r\\n}\\r\\n```\\r\\n\\r\\n## Root Listeners\\r\\n\\r\\nSometimes, it\'s ideal to attach listeners to the root document of an app, so events can be captured that don\'t hit a specific target element. For these cases, the `createRootListener` API can be used:\\r\\n\\r\\n```jsx\\r\\nimport React from \'react\';\\r\\nimport {unstable_createRootListener} from \'react-dom\';\\r\\n\\r\\nfunction ClickableButton({ text }) {\\r\\n  const click = unstable_createRootListener(\'click\', event => {\\r\\n    console.log(\'You clicked the button, event\');\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <button listeners={click}>{text}</button>\\r\\n  ); \\r\\n}\\r\\n```\\r\\n\\r\\n## Combining multiple listeners\\r\\n\\r\\nElements support having multiple listeners, even of the same type on an element, to do this, arrays can be used (and nested) to supply many listeners. Listeners of the same type will execute in array order of how they\'re supplied to the element:\\r\\n\\r\\n```jsx\\r\\nfunction ClickableButton({ text }) {\\r\\n  const click = unstable_createListener(\'click\', event => {\\r\\n    ...\\r\\n  });\\r\\n  const click2 = unstable_createListener(\'click\', event => {\\r\\n    ...\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <button listeners={[click, click2]}>{text}</button>\\r\\n  ); \\r\\n}\\r\\n```\\r\\n\\r\\n## Event Object\\r\\n\\r\\nUnlike the existing React event system, the Listener API supplies only the native object to event callbacks \u2013 there are no Synthetic Events. The only caveat is that the native objects get monkey-patched by React, with several of the properties and methods on the event object replaced with alternatives that interface with React\'s event delegation and propagation system. Calling `stopPropagation` on the monkey-patched event object will not trigger the native `stopPropagation` method (unlike the existing React event system, which does), but rather prevent propagation through React\'s propagation system only.\\r\\n\\r\\n## Event Flushing\\r\\n\\r\\nWith the Listener API, we don\'t flush on the native event triggering unless we have React Listeners that are actually triggered, this should help reduce needlessly flushing work when the event has no actual action.\\r\\n\\r\\nThis PR depends on https://github.com/facebook/react/pull/17513","number":17508,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-12-03T11:41:06Z"},{"id":531801092,"title":"Error: \\"Could not find node with id \\"18486\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Clicked restart and start profiling\\r\\n2. Finished profiling\\r\\n3. Clicked on a commit and got the error below\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17507,"user":{"login":"boteeka"},"state":"closed","created_at":"2019-12-03T08:09:08Z"},{"id":531678159,"title":"Remove case that only exists for createBatch","body":"The comment says this is only needed for `createBatch().commit()` which doesn\'t exist anymore.\\r\\n\\r\\n[Ignore whitespace](https://github.com/facebook/react/pull/17506/files?w=1)","number":17506,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-12-03T02:54:30Z"},{"id":531670194,"title":"useReducer & useContext","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nyes\\r\\n\\r\\n**What is the current behavior?**\\r\\nI want to use useContext to pass down the useReducer\'s state and dispath methods.\\r\\nThe way I wrote it is:  <GlobalContext.Provider value={Object.assign({}, state, dispatch)} > or value = { state,dispatch }\\r\\nHowever, there is no corresponding dispatch method or state in the child component.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe result I envision is the ability to use useCotext to get state and dispatches in subcomponents, including at a very deep level, which makes it very convenient, unlike redux, to pass props.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nGoogle browser,react  cdn url ","number":17505,"user":{"login":"victorykong"},"state":"closed","created_at":"2019-12-03T02:31:09Z"},{"id":531614954,"title":"Wrapping multiple components in a single Suspense breaks when using `createRoot`","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nTrying to wrap multiple components in a single Suspense is causing the app / api to perpetually fetch. This bug only happens while using the `createRoot` version of `react-dom`, where as `render` does not.\\r\\n\\r\\n**To reproduce:**\\r\\n* Please see [this code sandbox](https://codesandbox.io/s/festive-solomon-q9bk2).\\r\\n* You will see that the app is getting stalled in the fallback state, rendering \'Loading page...\'.\\r\\n* You will see in the console that fetches are perpetually happening.\\r\\n\\r\\n*index.tsx:*\\r\\n```js\\r\\nimport * as React from \\"react\\";\\r\\nimport { createRoot, render } from \\"react-dom\\";\\r\\nimport SamplePage from \\"./SamplePage\\";\\r\\n\\r\\n// createRoot(document.getElementById(\'root\')).render(<SamplePage />); // This causes the app to break\\r\\n\\r\\nrender(<SamplePage />, document.getElementById(\\"root\\")); // This works\\r\\n```\\r\\n\\r\\n*sampleComponent.tsx:*\\r\\n```js\\r\\nimport * as React from \'react\';\\r\\nimport api, { Resource } from \'./api\';\\r\\n\\r\\ninterface ResourceContainerProps {\\r\\n  userId: number;\\r\\n}\\r\\n\\r\\ninterface SampleComponentProps {\\r\\n  resource: Resource<object>;\\r\\n}\\r\\n\\r\\nconst SamplePage: React.FC = () => (\\r\\n  <div style={{ display: \'flex\', flexDirection: \'column\' }}>\\r\\n    <React.Suspense\\r\\n      fallback={<h1>Loading page...</h1>}\\r\\n    >\\r\\n      <ResourceContainer userId={1} />\\r\\n      <ResourceContainer userId={2} />\\r\\n      <ResourceContainer userId={3} />\\r\\n      <ResourceContainer userId={4} />\\r\\n    </React.Suspense>\\r\\n  </div>\\r\\n);\\r\\n\\r\\nconst ResourceContainer: React.FC<ResourceContainerProps> = ({ userId }) => {\\r\\n  const resource = api.getSampleData(userId);\\r\\n  return (\\r\\n    <SampleComponent resource={resource} />\\r\\n  );\\r\\n};\\r\\n\\r\\nconst SampleComponent: React.FC<SampleComponentProps> = ({ resource }) => {\\r\\n  const data: any = resource.sampleData.read();\\r\\n  return <p style={{ margin: \'1\' }}>{`Username: ${data.data.username}`}</p>;\\r\\n};\\r\\n\\r\\nexport default SamplePage;\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nBe able to wrap multiple components, each with their own individual resource, in a single Suspense while using `react-dom`\'s `createRoot` method.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n* axios 0.19.0\\r\\n* react ^0.0.0-experimental-38dd17ab9\\r\\n* react-dom ^0.0.0-experimental-38dd17ab9\\r\\n* react-scripts-ts 2.13.0\\r\\n","number":17504,"user":{"login":"jimmy-e"},"state":"closed","created_at":"2019-12-02T23:51:06Z"},{"id":531416494,"title":"Error: \\"Could not find node with id \\"490\\" in commit tree\\"","body":"I wasn\'t doing anything too fancy:\\r\\n- Ran a really quick profile\\r\\n- Clicked on the ranked tab\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: `4.2.1-3816ae7c3`\\r\\n\\r\\n```\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc\\r\\n```","number":17503,"user":{"login":"rgehan"},"state":"closed","created_at":"2019-12-02T18:36:28Z"},{"id":531348503,"title":"Local server is not run","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n![image](https://user-images.githubusercontent.com/36252647/69981906-5f1a7c80-155b-11ea-8b9a-041fd12f1253.png)\\r\\n![image](https://user-images.githubusercontent.com/36252647/69981995-883b0d00-155b-11ea-8391-91635376d36d.png)\\r\\n![image](https://user-images.githubusercontent.com/36252647/69981998-88d3a380-155b-11ea-97e3-0c9ef5a9db96.png)\\r\\n\\r\\n\\r\\n","number":17502,"user":{"login":"itganes"},"state":"closed","created_at":"2019-12-02T17:44:15Z"},{"id":531289153,"title":"Error: \\"Could not find node with id \\"5021\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Went from Flamegraph to the ranked view. \\r\\nThis doesn\'t reproduce consistently \\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17501,"user":{"login":"talolard"},"state":"closed","created_at":"2019-12-02T16:54:36Z"},{"id":531205167,"title":"Error: \\"Could not find node with id \\"5203\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Recording with the Profiler\\r\\n2. Clicking on the \\"Ranked Chart\\"\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.1-3816ae7c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\\r\\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\\r\\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\\r\\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\\r\\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\\r\\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\\r\\n\\r\\nComponent stack: in vl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in wo\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Li\\r\\n    in $e\\r\\n    in dn\\r\\n    in Ca\\r\\n    in Pc","number":17500,"user":{"login":"jonasthiesen"},"state":"closed","created_at":"2019-12-02T15:32:21Z"},{"id":531168274,"title":"Output hydration warning in production mode","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nCurrently, react shows hydration warning only in dev mode\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt would be cool if react will show a warning about mismatch during hydration in production mode.\\r\\nFrom [docs](https://reactjs.org/docs/react-dom.html#hydrate):\\r\\n> \u2026but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration.\\r\\n\\r\\nSo we can track it only in development, but for large apps it could be hard and could take a bunch of time to find all missmatches. But if we will output the warning in prod mode we can track it via [sentry](http://sentry.io/) or services like this.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nv16.12.0\\r\\n","number":17499,"user":{"login":"7rulnik"},"state":"closed","created_at":"2019-12-02T14:35:25Z"},{"id":530926545,"title":"question about this.state and this.setState","body":"Here is my question:\\r\\nThere is a multiselect child component, the  value is maintained in its parent component [this.state.values] like this:\\r\\n\\r\\nParent {\\r\\n state={\\r\\n  values:[]\\r\\n }\\r\\n  render(){\\r\\n    return(\\r\\n     Multiselect value={this.state.values}\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nin the multiselect \'s [onChange] function I control the multiselect value in two ways and two different render results:\\r\\n\\r\\nFirst:\\r\\n  onChange= ()=>{\\r\\n    this.setState({ values:this.handleValue(this.state.values)});\\r\\n  }\\r\\n\\r\\n  handleValues = (values)=>{\\r\\n    //here to add or splice, eg:\\r\\n    values.push(\'treeNode1\');\\r\\n    return values\\r\\n  }\\r\\n\\r\\n  when I print this.state.values in the render() function, the \'treeNode1\' is added, however ths multiselect component\'s \'treeNode1\' option wasn,t selected;\\r\\n\\r\\nbut if change the onChange() function like this, it works right:\\r\\n  onChange= ()=>{\\r\\n    this.setState({ values:this.handleValue(Object.assign([],this.state.values))});\\r\\n  }\\r\\n\\r\\nI pass the copy of the [this.state.values] rather than [this.state.values].\\r\\n\\r\\nI,m confused.\\r\\n\\r\\nI know that we can,t change varibles in the state directly, however in the first way, [this.state.values] in the render() function is added by \'treeNode1\', it looks correctly .\\r\\n\\r\\nHere is my guess :  React maintains a real state.  When React renders it can get the \'real\' state of [this.state.values] which works actually rather than the [this.state.values] that I changed directly in the onChange function by adding \'treeNode1\'. The state value[this.state.values] printed in the render() function looks correct ,because the directly change in the handleValues () function rather than changed by this.setState().\\r\\n\\r\\nI wonder how and why this happens and is my guess right? :)\\r\\n","number":17498,"user":{"login":"FlankMiao"},"state":"closed","created_at":"2019-12-02T06:48:29Z"},{"id":530842792,"title":"react redux firestore mapStateToProps issue while getting data","body":"i am stuck in a very weird issue the issue is i am getting firestore collection like this\\r\\n\\r\\n```\\r\\nfirestoreConnect([\\r\\n    {collection : \'projects\'}\\r\\n])\\r\\n```\\r\\nthen in mapStateToProps function\\r\\n\\r\\n```\\r\\nconst mapStateToProps = (state) => {\\r\\n        console.log(\'from mstp\' , state.firestore.ordered.projects);\\r\\n        return {\\r\\n            fireProjects : state.firestore.ordered.projects\\r\\n        }\\r\\n    }\\r\\n```\\r\\nin this code console.log(\'from mstp\' , state.firestore.ordered.projects); is showing data in a state but when i\\r\\n\\r\\n> console.log(this.props) in component code\\r\\n\\r\\nfirst i see fireProjects is undefined \\r\\nand then i see another console.log having fireProjects array of objects as i want . \\r\\nwhen i try to print the object from fireProjects then i see error undefined . is there any help i can get ? or if you want more clarification i can do that as well .. stuck in it from so much time","number":17497,"user":{"login":"samairali"},"state":"closed","created_at":"2019-12-02T01:53:13Z"},{"id":530762801,"title":"add \'rollup-plugin-json-parse\'","body":"This adds [rollup-plugin-json-parse](https://github.com/tjenkinson/rollup-plugin-json-parse), which is configured to convert large objects to strings that are `JSON.parse`\'d. This [should actually increase performance](https://github.com/tjenkinson/rollup-plugin-json-parse#why)\\r\\n\\r\\n[Click here to see the diff of the build when the plugin is added](https://github.com/facebook/react/commit/ce13149c788706ed5a57213c071e8ebe7c8555f6)\\r\\n\\r\\nInteresting to see that the real size goes up slightly, but the gzipped size is actually smaller.\\r\\n\\r\\nWould be interesting if to see if it actually makes a speed difference here. Do you have any benchmarks that could be run?","number":17496,"user":{"login":"tjenkinson"},"state":"closed","created_at":"2019-12-01T17:10:03Z"},{"id":530707456,"title":"ConcurrentMode suspend child alongside of input","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nafter first click on button it\'s just fine \\r\\nafter 3 sec(after suspend mode finished) when you click on button again and start typing in input it will not show suspend fallback and it will wait on all 3 second (seems to `timeoutMs` is infinity now)\\r\\nanother time click on button (after suspend finished) this time we will not see \\"wait\\" phrase on button and it seems that `timeoutMs` is zero this time\\r\\n\\r\\nhttps://codesandbox.io/s/long-shadow-1vhr6\\r\\n\\r\\n**What is the expected behavior?**\\r\\nshow  1.5 second \\"wait\\" on button and after that show 1.5 second \\"child suspend\\" in front of it\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI\'m using experimental version and these are new features of concurrent mode \\r\\n","number":17495,"user":{"login":"MHA15"},"state":"open","created_at":"2019-12-01T10:17:18Z"},{"id":530587842,"title":"Undo behavior in controlled input doesn\'t work as expected","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n1. Load https://codesandbox.io/s/material-demo-8wgfs.\\r\\n1. Focus the first input.\\r\\n1. Type <kbd>a</kbd>.\\r\\n1. Press <kbd>Tab</kbd> to focus the second input.\\r\\n1. Type <kbd>a</kbd>.\\r\\n1. Use Ctrl/Cmd+Z or Edit->Undo to undo these two changes.\\r\\n\\r\\nNotice that the uncontrollable input change is reverted\\r\\nNotice that the controllable input change is **not** reverted\\r\\n\\r\\n![undo](https://user-images.githubusercontent.com/3165635/69901991-fb405a00-1388-11ea-9085-ddd4131a42a9.gif)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nuncontrollable & controllable inputs behave identically.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.12.0\\r\\nChrome 78.0.3904.108\\r\\nmacOS 10.14.6\\r\\n\\r\\nFirst reported in https://github.com/mui-org/material-ui/issues/18545.\\r\\n","number":17494,"user":{"login":"oliviertassinari"},"state":"open","created_at":"2019-11-30T14:49:37Z"},{"id":530478288,"title":"Fix string object rendering","body":"This PR fixes: #17476.\\r\\n\\r\\nThis is an example that fixes the issue. \\r\\n\\r\\nBy design, it seem as rendering Objects are not allowed.\\r\\nTypical render warning for objects. `Objects are not valid as a React child`\\r\\n\\r\\nBut because a string object is iterable, it get rendered with `reconcileChildrenIterator`\\r\\n\\r\\nThis has been used for inspiration of how to check for string\\r\\nhttps://stackoverflow.com/q/4059147/815507\\r\\nI could have used `newChild instanceof String` but thought that might be too expensive to use.\\r\\n\\r\\nThis PR works because `toString()` is applied by the existing code snipped.\\r\\n`\'\' + newChild,`","number":17493,"user":{"login":"kunukn"},"state":"closed","created_at":"2019-11-29T20:15:02Z"},{"id":530474955,"title":"react.production.min.js shoud include license notice of object-assign","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nreport a bug (MIT license notice violation)\\r\\n\\r\\n**What is the current behavior?**\\r\\nreact.development.js includes license comment about object-assign module but react.production.min.js doesn\'t.\\r\\n\\r\\nhttps://unpkg.com/browse/react@16.12.0/umd/react.development.js (line60~)\\r\\n```\\r\\n/*\\r\\nobject-assign\\r\\n(c) Sindre Sorhus\\r\\n@license MIT\\r\\n*/\\r\\n```\\r\\nhttps://unpkg.com/browse/react@16.12.0/umd/react.production.min.js\\r\\nno comment about object-assign kept (but including the code)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nreact.production.min.js should also keep license comment about object-assign\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.12.0\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":17492,"user":{"login":"dynamis"},"state":"open","created_at":"2019-11-29T19:57:33Z"},{"id":530382154,"title":"PWA react prodution build?","body":"My application is located at.\\r\\nhttps://crm-svarom.web.app/\\r\\n\\r\\nMy React application does not deploy to me, the thing is that I use Service worker.js and PWA functionality.\\r\\n\\r\\nIt works fine on the local host. But after writing npm, building and deploying on the localhost, this also does not work.\\r\\n\\r\\nI looked at similar issues on SrackOwerflou. And it was said that the creators of React have already solved this problem for me. But this does not work, I do not understand what is the matter.\\r\\n\\r\\n\\r\\n\\r\\nconsole logs\\r\\n\\r\\n\\r\\n![\u0441\u043d\u0438\u043c\u043e\u043a_9](https://user-images.githubusercontent.com/44754773/69876200-0e432380-12d0-11ea-9275-68e2d866e088.png)\\r\\n\\r\\nand file system\\r\\n![\u0441\u043d\u0438\u043c\u043e\u043a_8](https://user-images.githubusercontent.com/44754773/69876238-2450e400-12d0-11ea-9442-d345718314bc.png)\\r\\nsorry for my bad english i\'m from Russia(","number":17491,"user":{"login":"IDONTSUDO"},"state":"closed","created_at":"2019-11-29T14:47:47Z"},{"id":530326834,"title":"React DevTools Firefox extension not showing state information","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nRequest a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nAll useState hooks are printed with a generic \\"State\\" label, making them hard to distinguish:\\r\\n\\r\\n![](https://imgur.com/download/rMJwh4m)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe name of the variable used should probably be shown, if at all possible.\\r\\nEg. `const [page, setPage] = useState(1);` should show up as `page: 1` instead of `State: 1`\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest Firefox on macOS Catalina, React 16.11, React DevTools 4.2.1\\r\\n","number":17490,"user":{"login":"mjsarfatti"},"state":"closed","created_at":"2019-11-29T12:41:07Z"},{"id":530308350,"title":"`clipPath` is ignored as property of the `style` attribute (macOS Safari)","body":"Greetings of the day\\r\\n\\r\\nThis element will not be clipped:\\r\\n```jsx\\r\\n<div style={{ clipPath: \'polygon(0 0, 50% 0, 100% 100%, 0 100%)\' }}>\\r\\n\\tHello\\r\\n</div>\\r\\n```\\r\\nIn this case, the generated DOM output doesn\u2019t contain the `clip-path` style attribute.\\r\\n\\r\\nBy contrast, the following element _will_ be clipped:\\r\\n```css\\r\\n.example {\\r\\n\\tclip-path: polygon(0 0, 50% 0, 100% 100%, 0 100%);\\r\\n}\\r\\n```\\r\\n```jsx\\r\\n<div className=\\"example\\">\\r\\n\\tHello\\r\\n</div>\\r\\n```\\r\\n\\r\\nThe problem seems to manifest itself in **Safari 13.0.2** (15608.2.30.1.1) on **macOS 10.15 Catalina** (19A602). Things are fine in\\r\\n\\r\\n- Chrome 78.0.3904.108 (Official Build) (64-bit),\\r\\n- Firefox 70.0.1 (64 bits), and\\r\\n- Opera 65.0.3467.48,\\r\\n\\r\\nall on the same operating system.","number":17489,"user":{"login":"lensbart"},"state":"closed","created_at":"2019-11-29T11:55:20Z"},{"id":530110921,"title":"Route based code splitting, Loading chunk 0 failed after new deployment","body":"We are using Suspense and [route based code splitting](https://reactjs.org/docs/code-splitting.html#route-based-code-splitting) with react 16. This uses Webpack chunks to split the code into smaller bits for different routes in the application. In production mode this produces chunks with a hash named something like `7.8817be1b.chunk.js`.\\r\\n\\r\\nThe issue is that when we deploy a new production release users with the app open who client side navigate to a page requiring a new chunk get an error (they have the old bundle, so they are requesting an old no-longer existing chunk). \\r\\n\\r\\nWe are not too sure how to deal with this error, does react have any guidance around what we should do with existing users who are requesting old chunks? Can some guidance about this be added to the docs: https://reactjs.org/docs/code-splitting.html\\r\\n\\r\\nReact: 16.12.0\\r\\n","number":17488,"user":{"login":"lukemcgregor"},"state":"closed","created_at":"2019-11-29T00:56:13Z"},{"id":530061341,"title":"Fixed changelog formatting","body":"A simple changelog formatting issue fix.\\r\\n\\r\\nCloses #17481 for more info.","number":17487,"user":{"login":"dance2die"},"state":"closed","created_at":"2019-11-28T19:57:23Z"},{"id":530036884,"title":"Error: \\"Could not find commit data for root \\"3971\\" and commit 3\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\\r\\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\\r\\n\\r\\nComponent stack: in sc\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17486,"user":{"login":"Wellers0n"},"state":"closed","created_at":"2019-11-28T18:11:11Z"},{"id":529977335,"title":"OnClick delaying re-render","body":"Hi,\\r\\n\\r\\nI\'m currently having a performance issue that I can\'t solve.\\r\\nProblem: the `<Spinner />` is taking a couple of ms to render (due to `slowFunction`)\\r\\n\\r\\n```\\r\\nconst myComponent = ({...props)} => {\\r\\n\\r\\nconst { myProp, slowFunction } = props;\\r\\nconst [loading, setLoading] = useState(false);\\r\\n\\r\\nreturn (\\r\\n   <Button\\r\\n       onClick={ () => {\\r\\n            setLoading(true);\\r\\n            slowFunction(myProp); \\r\\n        }}\\r\\n    >\\r\\n      {loading ? <Spinner /> : \\"GO\\" }\\r\\n    </Button>\\r\\n)};\\r\\n\\r\\nexports default myComponent;\\r\\n\\r\\n```\\r\\n\\r\\nSo... after clicking the button, `loading = true` and therefore the `<Spinner />` gets rendered, **but it takes a couple of ms (tooooo many).** \\r\\nThis problem is caused by `slowFunction`  and as soon as I remove the function, everything renders super fast. \\r\\n\\r\\nAny ideas?\\r\\nThanks","number":17485,"user":{"login":"dalisalvador"},"state":"closed","created_at":"2019-11-28T15:34:22Z"},{"id":529805673,"title":"Remove renderPhaseUpdates Map","body":"Builds on top of #17483\\r\\n\\r\\nNow that we have a separate queue for recently added updates, we can use this queue to pick up the render phase updates. As long as we clear them before committing.\\r\\n\\r\\nTODO: I believe this might have a bug if you suspend during the second update but before we get to process this particular Hook. Since the update would remain in the queue in this case.\\r\\n","number":17484,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-28T09:53:30Z"},{"id":529775675,"title":"Hooks Refactor Update Queue by Cloning Rebased Updates","body":"Builds on top of #17480.\\r\\n\\r\\nAlternative to #17430.\\r\\n\\r\\nThis model splits the update queue into two (cyclic) linked lists. There is one each for current/workInProgress pair for rebase purposes. There is also one shared one.\\r\\n\\r\\nWhen we process a queue we merge the shared onto the \\"current\\" one, and clone it onto the work in progress.\\r\\n\\r\\nThe cloned one doesn\'t include the beginning of the queue that is fully processed.\\r\\n\\r\\nThe cloned nodes that were processed get Sync priority so that they don\'t get dropped during future renders.","number":17483,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-28T08:57:29Z"},{"id":529753345,"title":"No workaround for issues with autofocus","body":"Bug report\\r\\n\\r\\nThere is no workaround for autoFocus! the linter will not compile typescript code when using autofocus. Readers and accessibility issues, could you please provide a workaround for this problem alternatively please remove it from the library as it causes more issues than it is worth.\\r\\n\\r\\n","number":17482,"user":{"login":"gustav1105"},"state":"closed","created_at":"2019-11-28T08:06:22Z"},{"id":529701954,"title":"Changelog markdown formatting issue for v16.3.0 (React Test Renderer)","body":"React Changelog Markdown documentation formatting issue.\\r\\n\\r\\n## **Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nA bug in formatting, where subtitle should be `h3` (with `###`) but is marked with `h2` (`##`).\\r\\n\\r\\n## **What is the current behavior?**\\r\\n\\r\\n`React Test Renderer` subtitle is rendered as `h2`, not `h3`.\\r\\n\\r\\n![demo](https://user-images.githubusercontent.com/8465237/69779015-8dbbe000-1174-11ea-87c5-f6a582d9a120.png)\\r\\n\\r\\n## Finding the formatting error\\r\\n\\r\\n### Using Chrome Devtools\\r\\n\\r\\n1. Go to https://github.com/facebook/react/blob/master/CHANGELOG.md#react-test-renderer-3\\r\\n1. Open Devtools to inspect the HTML.\\r\\n\\r\\n### Via markdown source\\r\\n\\r\\n1. Go to https://raw.githubusercontent.com/facebook/react/master/CHANGELOG.md\\r\\n1. Search for word `* Fix handling of fragments in `toTree()`.`\\r\\n1. You will see `## React Test Renderer`.\\r\\n    - This should be `### React Test Renderer`\\r\\n\\r\\n![search](https://user-images.githubusercontent.com/8465237/69779171-19357100-1175-11ea-8b79-f5c13909b79b.png)\\r\\n\\r\\n## **What is the expected behavior?**\\r\\n\\r\\n`React Test Renderer` subtitle is rendered as `h3` with `###`, **not** as `h2` with `##` .\\r\\n\\r\\n## **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nNot Applicable.\\r\\n\\r\\n## Additional context\\r\\n\\r\\nIt might look like nitpicking but I was programmatically parsing the changelog but ran into the inconsistency.  \\r\\n\\r\\nHopefully this can be fixed because\\r\\n1. It\'s easy to fix\\r\\n1. To prep for automated changelog documentation (for the future possibly).\\r\\n1. and for _consistency_\\r\\n\\r\\nDemo Sandbox: https://codesandbox.io/s/parse-react-changelog-mjpkg\\r\\n\\r\\nI can do a PR should you approve\\r\\n\\r\\n![inconsistency](https://user-images.githubusercontent.com/8465237/69779349-ba242c00-1175-11ea-8f9a-81f7d1ec7fb0.png)\\r\\n","number":17481,"user":{"login":"dance2die"},"state":"closed","created_at":"2019-11-28T05:31:12Z"},{"id":529677150,"title":"Use fewer global variables in Hooks","body":"Module level variables is an exception that we should use sparingly. It will make using multiple threads in a threaded implementation infeasible, harder to port to stricter languages, it\'s harder to reason about the performance and it is kind of hard to reason about whether these are allowed to diverge from the main state.\\r\\n","number":17480,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-28T03:48:32Z"},{"id":529667125,"title":"Idea: extract \u201cstatic\u201d component subtrees to HTML during build","body":"This came up in a [twitter thread](https://twitter.com/devongovett/status/1199862177559171072?s=21) with @gaearon and @aweary and we decided to move the discussion here. I\u2019ll try to summarize the conversation so far below.\\n\\nThe basic question was whether a build tool could extract the static parts of a component tree ahead of time into HTML, and ship smaller JS to the client with only the dynamic parts. This could have benefits for code size and hydration performance for statically generated sites. It would likely have a smaller impact on dynamically generated server rendered sites, but it\u2019s possible there are static parts that could be extracted there too (e.g. header, footer, article content, etc.).\\n\\nThere are a couple potential ways to go about this, each with various tradeoffs.\\n\\n1. Do something like what ember and other template compilers do and generate some kind of IR from components and inject dynamic content into slots at runtime. This would likely require a lot of changes to React itself. @aweary seems to be working on some kind of [compiler](https://twitter.com/aweary/status/1199867044532903937?s=21) to do just that.\\n2. Rewrite the JS with something like prepack, similar to what @trueadm did [here](https://github.com/trueadm/ssr-with-prepack-hackathon) (though it sounded like the output was quite variable in size).\\n3. Rewrite the component tree to generate a different but equivalent tree with the static parts hoisted out. Similar to this [babel plugin](https://github.com/jamiebuilds/babel-react-optimize) but taken much farther to work at a whole tree level instead of a component level. Also to remove the static parts from JS altogether and generate static HTML to avoid duplicate content in JS and unnecessary hydration cost. Some way to allow static HTML in the middle of a tree to be reused might be needed, but maybe compiling to multiple roots would work?\\n\\nObviously a lot more thought is needed here. As @gaearon noted, a solid definition of \u201cstatic\u201d will be important for this discussion. Mine is that it could be rendered to HTML and never updated by JS, but perhaps people have other ideas.","number":17479,"user":{"login":"devongovett"},"state":"open","created_at":"2019-11-28T03:05:50Z"},{"id":529570980,"title":"Change DevTools hook warning message","body":"Out of these 4 devtools injection points, 3 are used by Fast Refresh, and 3 are used by DevTools. These usage points are overlapping, and it\'s possible more tooling would use them in the future. Since we can\'t determine which injection consumer errored, let\'s make the error message more generic.","number":17478,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-27T21:01:26Z"},{"id":529541142,"title":"eventPhase is spoiled (always 3)","body":"The problem:\\r\\nI need to detect if I get target or bubbled event.\\r\\nI [expect](https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase) eventPhase to be 2 for target event and 3 for bubbled event.\\r\\n\\r\\nAt least I can implement that in vanilla js. But as it gets to react I always get 3 instead of 2;\\r\\n\\r\\nA testcase:\\r\\n\\r\\n```html\\r\\n<div id=\\"app\\"></div>\\r\\n<hr />\\r\\n<div id=\\"wrap\\">\\r\\n      <button id=\\"vanillaButton\\">Vanilla button</button>\\r\\n</div>\\r\\n```\\r\\n\\r\\n```\\r\\n#wrap {\\r\\n  padding: 16px;\\r\\n  outline: 1px dotted;\\r\\n}\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst vanillaButton = document.getElementById(\'vanillaButton\');\\r\\nconst wrap = document.getElementById(\'wrap\');\\r\\nconst app = document.getElementById(\'app\');\\r\\n\\r\\nfunction handleClick(event) {\\r\\n  const safeEvent = event.nativeEvent || event;\\r\\n  console.log(\'click\', event.eventPhase, safeEvent.eventPhase);\\r\\n}\\r\\n\\r\\nconst ReactButton = () => <button onClick={handleClick}>React Button</button>;\\r\\n\\r\\n\\r\\nwrap.addEventListener(\'click\', handleClick);\\r\\n\\r\\n\\r\\nReactDOM.render(<ReactButton />, app);\\r\\n```\\r\\n\\r\\nIn this case:\\r\\nVanilla button is expected to trace 3 \u2014 yes\\r\\nWrap is expected to trace 2 \u2014 yes\\r\\nReact button is expected to trace 2 \u2014 no, got 3","number":17477,"user":{"login":"droganov"},"state":"open","created_at":"2019-11-27T19:42:48Z"},{"id":529483157,"title":"Rendering a `String` class instance in an expression renders each letter as a text node","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf you attempt to render a `String`  in an expression, it will render each letter as a child node.\\r\\n\\r\\nFrom an accessibility standpoint, this does matter. A screen reader like Apple\'s VoiceOver utility will attempt to read every text node, meaning that it will attempt to read each letter. This would mean an impacted experience for blind users. \\r\\n\\r\\nFrom a display perspective, this doesn\'t matter, because browsers will group the nodes next to each other, inline. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/string-constructor-issue-f5t5x\\r\\n\\r\\n- Open the sandbox in a new window. \\r\\n- Examine the DOM. See that text nodes are created for each letter from the rendered `String` instance. \\r\\n- Open Apple\'s VoiceOver and read the page. Hear that all letters in the rendered `String` instance are spelled out, instead of the words being spoken. \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect a `String` instance to be rendered the same as a `string` literal type. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nHappening on React DOM 16.8.6, Chrome 80.0, Mac OSX","number":17476,"user":{"login":"subyraman"},"state":"open","created_at":"2019-11-27T17:23:21Z"},{"id":529422757,"title":"Remove dependency on local git checkout from build process","body":"Update build steps so Mozilla reviewers can build DevTools from local Git archive without an error:\\r\\n* Remove unnecessary build-time parsing of GitHub URL now that the project has been migrated to the main React repo.\\r\\n* Try/catch guard around Git revision parsing to avoid build failure.\\r\\n\\r\\nAlso updated the Webpack dependencies to account for changes made in #17379","number":17475,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-11-27T15:35:55Z"},{"id":529309876,"title":"Hooks: Calling setState with the SAME value multiple times, evaluates the component function up-to 2 times","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nUsing the State hook, calling `setXYZ()` with the same value multiple times causes the component function to be evaluated more than once (up-to 2 times). I don\'t mean re-rendered, but a re-evaluation of its function.\\r\\n\\r\\nScenario 1 (OK): \\r\\n\\r\\n- the component function is evaluated, initial render `useState(1)`\\r\\n- click button => `setState(1)`\\r\\n- the component function is not re-evaluated. :heavy_check_mark:\\r\\n- click button again => `setState(1)`\\r\\n- the component function is not re-evaluated.\\r\\n- click button again => `setState(1)`\\r\\n- the component function is not re-evaluated.\\r\\n- etc.\\r\\n\\r\\nScenario 2:\\r\\n\\r\\n- the component function is evaluated, initial render `useState(1)`\\r\\n- click button => `setState(2)`\\r\\n- the component function IS re-evaluated, component re-rendered :heavy_check_mark:\\r\\n- click button again => `setState(2)`\\r\\n- the component function **IS evaluated AGAIN** :negative_squared_cross_mark: \\r\\n- click button again => `setState(2)`\\r\\n- the component function is not re-evaluated.\\r\\n- click button again => `setState(2)`\\r\\n- the component function is not re-evaluated.\\r\\n- etc.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://jsfiddle.net/qf103zvj/ \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nJust as Scenario 1, I\'d expect ONLY one re-evaluation of the component function.\\r\\n\\r\\nScenario 2:\\r\\n\\r\\n- the component function is evaluated, initial render `useState(1)`\\r\\n- click button => `setState(2)`\\r\\n- the component function IS re-evaluated, component re-rendered :heavy_check_mark:\\r\\n- click button again => `setState(2)`\\r\\n- the component function is not re-evaluated. :heavy_check_mark:\\r\\n- click button again => `setState(2)`\\r\\n- the component function is not re-evaluated.\\r\\n- etc.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nChrome 78, Firefox 70, React 16; Both macOS, Linux. Unsure about previous versions of React.","number":17474,"user":{"login":"rwanyoike"},"state":"open","created_at":"2019-11-27T12:14:54Z"},{"id":529262758,"title":"React Devtools Component: Add hotkeys to start inspecting node","body":"Issue is here https://github.com/facebook/react/issues/17298\\r\\n\\r\\nHotkey: Cmd Shift X (mac) or Ctrl Shift X (others)\\r\\n\\r\\n![hotkey](https://user-images.githubusercontent.com/25560419/69716735-9c3ed300-1145-11ea-9788-7f311d59bfeb.gif)\\r\\n\\r\\n\\r\\n","number":17473,"user":{"login":"gejimayu"},"state":"open","created_at":"2019-11-27T10:41:41Z"},{"id":529251161,"title":"Assigning an undefined object a property results in component being re-rendered","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n**What is the current behavior?**\\r\\nWhen an undefined object is assigned a property, the component in which this is done re-renders.\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nfunction ashwin() {\\r\\n  let obj = undefined;\\r\\n  obj[\\"hasBasket\\"] = true;\\r\\n}\\r\\ncall this function inside a functional component. It will result in the code being rendered again before throwing an error.\\r\\nhttps://codesandbox.io/s/priceless-wing-6xh8r\\r\\n**What is the expected behavior?**\\r\\nShouldn\'t render again and just throw an error\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact:- 16.10.2\\r\\nWas able to reproduce it in chrome and safari.\\r\\nDidn\'t test it in previous versions of React","number":17472,"user":{"login":"winash1"},"state":"closed","created_at":"2019-11-27T10:21:14Z"},{"id":529198397,"title":"Fix appearance of devtool scrollbar in darkmode","body":"Fixed an issue where the devtool scrollbar didn\'t change its appearance based \\r\\non light/dark mode.\\r\\n\\r\\n[Issue #17084 ]\\r\\n\\r\\nIt should be noted that for some users the scrollbar is already switching between \\r\\ndark and light mode. However, this appears to be caused by either a Chrome or \\r\\nOS version, and as such the scrollbar differs from user to user. This change would \\r\\nensure that all users have the same scrollbar and that it properly switches color \\r\\nbased on the user\'s selected theme.\\r\\n\\r\\nI\'ve tried to maintain a similar shape and size to the original Chrome devtools \\r\\nscrollbar while using the already defined scrollbar color variables in React \\r\\n(Already used for Firefox).\\r\\n\\r\\n---\\r\\n\\r\\n_Chrome Devtools scrollbar_\\r\\n<img width=\\"250\\" alt=\\"ChromeScrollbar\\" src=\\"https://user-images.githubusercontent.com/24208371/69707194-93281480-10f9-11ea-8e68-f12c94fb319f.png\\">\\r\\n\\r\\n_New React dark mode scrollbar_\\r\\n<img width=\\"250\\" alt=\\"ReactScrollbarDark\\" src=\\"https://user-images.githubusercontent.com/24208371/69707200-96bb9b80-10f9-11ea-9015-3733a06e318d.png\\">\\r\\n\\r\\n_New React light mode scrollbar_\\r\\n<img width=\\"250\\" alt=\\"ReactScrollbarLight\\" src=\\"https://user-images.githubusercontent.com/24208371/69707239-a63ae480-10f9-11ea-9a69-122703ec4efc.png\\">","number":17471,"user":{"login":"eoandersson"},"state":"closed","created_at":"2019-11-27T08:43:46Z"},{"id":529176681,"title":"Suspense calls useEffect before render","body":"## Do you want to request a *feature* or report a *bug*?\\r\\n\\r\\nBug\\r\\n\\r\\n## What is the current behavior?\\r\\n\\r\\nThe React docs say\\r\\n\\r\\n> useEffect lets us express different kinds of side effects **after a component renders**.\\r\\n\\r\\nBut under suspense that doesn\'t seem to be true any longer. useEffect is called pre-emptively. Or at least \\"rendering\\" seems to refer to the double-buffer (?)\\r\\n\\r\\nThere are situations where side-effects rely on the element having been rendered out effectively and visually.\\r\\n\\r\\n## Demo\\r\\n\\r\\nIn my case i need to render content on the screen that\'s supposed to follow along the parents whereabouts.\\r\\n\\r\\nhttps://codesandbox.io/s/mystifying-wilson-30u2m\\r\\n\\r\\nuseEffect (belonging to the `<Dom/>` component) dumps out content before the parent has rendered, which is very odd since the parent is suspended until all the other components are done loading. This is mixed mode react, two reconcilers. But that shouldn\'t have anything to do with it. The culprit is useEffect.\\r\\n\\r\\n## What is the expected behavior?\\r\\n\\r\\nuseEffect should fire after the component has effectively rendered. I think that is what most people thought it would already do.\\r\\n\\r\\n## Which versions of React are affected by this issue?\\r\\n\\r\\n16.12.0","number":17470,"user":{"login":"drcmda"},"state":"closed","created_at":"2019-11-27T07:52:37Z"},{"id":529055667,"title":"Remove workInProgressRootLatestSuspenseTimeout","body":"Remove `workInProgressRootLatestSuspenseTimeout` field from the work loop in preparation for splitting timeout from expiration time.","number":17469,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-11-27T01:09:53Z"},{"id":529013638,"title":"Who to contact for use of logo approval","body":"Hi, I was looking to use the react logo for a presentation we\'re making for a tech conference. Was just wondering if there\'s an appropriate contact to discuss this with?","number":17468,"user":{"login":"vpapalia"},"state":"closed","created_at":"2019-11-26T22:47:36Z"},{"id":529004802,"title":"Is there any reason why React.version is still stuck in 16.8.6 ?","body":"In 16.12.0 and in some previous versions, React.version still return 16.8.6","number":17467,"user":{"login":"le-du6"},"state":"closed","created_at":"2019-11-26T22:22:56Z"},{"id":528921330,"title":"How do suspense and subscriptions interact?","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nAsk a question\\r\\n\\r\\n**What is the current behavior?**\\r\\nWith `Suspense`, a component throws a `Promise` when it encounters something that\'s not ready. However, our company\'s data fetching is subscription-oriented: At a very high level, the following happens:\\r\\n\\r\\n1. Component renders, and calls `useFoo(id, \'name\', \'amount\', \'discounts\');`\\r\\n2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component. \\r\\n3. The hook returns a [`RemoteData<Pick<Foo, \'name\' | \'amount\' | \'discounts\'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, \\"I haven\'t asked for this data yet\\"\\r\\n4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.\\r\\n\\r\\nAt no point in there does the component have a `Promise`. As a result, I\'m not sure it\'s possible for it to throw anything; it\'s depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn\'t ever complete.\\r\\n\\r\\nThrowing a `Promise` from inside the hook doesn\'t seem right, as it would be very difficult to combine multiple data dependencies in a single component.\\r\\n\\r\\nThe only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \\"maybe not ready the first time\\" case.\\r\\n\\r\\nNote: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon ","number":17466,"user":{"login":"TedDriggs"},"state":"open","created_at":"2019-11-26T19:15:10Z"},{"id":528909890,"title":"Error: \\"Could not find node with id \\"113994\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Click on \\"ranked\\" in the Profiler\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)\\r\\n    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103717)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n\\r\\nComponent stack: in gl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17465,"user":{"login":"qoalu"},"state":"closed","created_at":"2019-11-26T18:50:30Z"},{"id":528868232,"title":"forwardRef doesn\'t like reassigned components","body":"With other higher-order/wrapper components from other libraries, I can replace a component with a wrapped version of itself like this:\\r\\n\\r\\n```javascript\\r\\nlet Component = () => <div>hello world</div>;\\r\\n\\r\\n// connect from react-redux\\r\\nComponent = connect(selector)(Component);\\r\\n// withRouter from react-router\\r\\nComponent = withRouter(Component);\\r\\n\\r\\nexport default Component;\\r\\n```\\r\\n\\r\\nI don\'t see a lot of people do it this way, so I guess it\'s not recommended best practice. I know mutating is the devil and functional is always the way to go, but I think this is a lot cleaner because, 1) you don\'t have to nest a bunch of functions which increases the indent of the code and decreases readability, 2) you don\'t have to create a bunch of separate duplicate component names with obtuse names like `ComponentWithRouter` or `ConnectedComponentWithRouterWithForwardedRef`, and 3) your first definition of the component is just the pure display component that receives all the props it needs (it doesn\'t care where they come from), and then you define everything that \\"connects\\" to it separately.\\r\\n\\r\\nAnyway, with `forwardRef`, reassigning the component like this seems to crash React.\\r\\n\\r\\n**Fine:**\\r\\n```javascript\\r\\nconst UnforwardedComponent = ({ forwardedRef,  ...props}) => <div>sup</div>\\r\\nconst Component = forwardRef((props, ref) => <UnforwardedComponent {...props} forwardedRef={ref} />;\\r\\nexport default Component;\\r\\n```\\r\\n\\r\\n**Also fine:**\\r\\n```javascript\\r\\nconst Component = forwardRef((props, ref) => <div {...props} ref={ref}>sup</div>;\\r\\nexport default Component;\\r\\n```\\r\\n\\r\\n**Crashes:**\\r\\n```javascript\\r\\nlet Component = ({ forwardedRef, ...props }) => <div>sup</div>;\\r\\nComponent = forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />\\r\\nexport default Component;\\r\\n```\\r\\n\\r\\nI assume there\'s a under-the-hood reason why this doesn\'t work. But if it\'s at all possible, it\'d be great to allow `forwardRef` to work in this manner.\\r\\n\\r\\nPlease let me know if I\'m missing something obvious.","number":17464,"user":{"login":"vincerubinetti"},"state":"closed","created_at":"2019-11-26T17:23:38Z"},{"id":528829737,"title":"Invariant Violation: Text strings must be rendered within a <Text> component.","body":"\\r\\nHello, I am doing a project in react native and I am currently handling the Modal component but I am getting the following error:\\r\\n\\r\\n```\\r\\nInvariant Violation: Text strings must be rendered within a <Text> component.\\r\\n\\r\\nStack trace:\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:4029:4 in createTextInstance\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:14495:12 in completeWork\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17094:10 in completeUnitOfWork\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17304:30 in performUnitOfWork\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17316:41 in workLoop\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17417:15 in renderRoot\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18423:17 in performWorkOnRoot\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18324:24 in performWork\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18285:14 in performSyncWork\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18531:21 in batchedUpdates$1\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:2611:31 in batchedUpdates\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:2706:17 in _receiveRootNodeIDEvent\\r\\n  node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:2782:28 in receiveTouches\\r\\n  node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:366:47 in __callFunction\\r\\n  node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:106:26 in <unknown>\\r\\n  node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:314:10 in __guard\\r\\n  node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:105:17 in callFunctionReturnFlushedQueue\\r\\n```\\r\\n\\r\\nMy code is this:\\r\\n\\r\\n```\\r\\nimport React, { Component } from \'react\';\\r\\nimport { View, Modal, Button, StyleSheet } from \'react-native\';\\r\\n\\r\\nclass ModalInfo extends Component {\\r\\n\\r\\n    state = {\\r\\n        visible: false\\r\\n    };\\r\\n\\r\\n    handlePress = () => {\\r\\n        this.setState({ visible: !this.state.visible });\\r\\n    };\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <View style={ [styles.container, styles.cyan] }>\\r\\n                <Modal visible={this.state.visible}>\\r\\n                    <View style={ styles.container }>\\r\\n                        <Button title=\'Cerrar Modal\' onPress={ this.handlePress } />>\\r\\n                    </View>\\r\\n                </Modal>\\r\\n                <Button title=\'Abrir Modal\' onPress={ this.handlePress }></Button>\\r\\n            </View>\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\nconst styles = StyleSheet.create({\\r\\n    container: {\\r\\n      display: \'flex\',\\r\\n      flex: 1,\\r\\n      justifyContent: \'center\',\\r\\n      alignItems: \'center\'\\r\\n    },\\r\\n    cyan: {\\r\\n      backgroundColor: \'cyan\'\\r\\n    }\\r\\n  });\\r\\n\\r\\nexport default ModalInfo;\\r\\n```\\r\\n\\r\\nI appreciate the collaboration you can provide me.\\r\\n\\r\\nThank you.","number":17463,"user":{"login":"Luzmario1708"},"state":"closed","created_at":"2019-11-26T16:16:50Z"},{"id":528699447,"title":"test","body":"test\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://githum/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17462,"user":{"login":"550406066"},"state":"closed","created_at":"2019-11-26T12:41:06Z"},{"id":528693958,"title":"React-DevTools highlightable props, state and etc ...","body":"#### React devTools\\r\\n\\r\\n#### This is a **Feature request**\\r\\n- Please make props, state and etc keys( right panel stuff keys ) highlightable in order to  user be able to copy the mentioned keys.\\r\\n\\r\\nChrome Version 78.0.3904.108 (Official Build) (64-bit)\\r\\n","number":17461,"user":{"login":"tajpouria"},"state":"closed","created_at":"2019-11-26T12:30:05Z"},{"id":528689774,"title":"[useReducer] Inconsistent behavior of `dispatch` on first call and laters","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nMaybe a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n```javascript\\r\\nfunction reducer(state, action) {\\r\\n  console.log(\\"run reducer\\");\\r\\n  switch (action.type) {\\r\\n    case \\"INCREMENT\\": {\\r\\n      return state + 1;\\r\\n    }\\r\\n    default:\\r\\n      return state;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction increase() {\\r\\n  dispatch({\\r\\n    type: \\"INCREMENT\\"\\r\\n  });\\r\\n  console.log(\\"after dispatch\\");\\r\\n}\\r\\n```\\r\\n**The output of the first time calling `increase`:**\\r\\n```\\r\\nrun reducer\\r\\nafter dispatch\\r\\n```\\r\\n**The output of the later times calling `increase`:**\\r\\n```\\r\\nafter dispatch\\r\\nrun reducer\\r\\n```\\r\\n\\r\\nhttps://codesandbox.io/s/infallible-bassi-r0k3w\\r\\n(open this link of reproduction, and see the console logs)\\r\\n---\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe sequence of output should keep same.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n^16.8.0","number":17460,"user":{"login":"liyuanqiu"},"state":"closed","created_at":"2019-11-26T12:21:36Z"},{"id":528614928,"title":"why my babel can\'t recognize react short syntax?","body":"I use the lasted short syntax <></> in my code and @babel 7 in my package.json\\r\\nbut when i run my code in dev-environment, here comes to some bug I can\'t fixed\\r\\n\\r\\nhere is the Error:\\r\\nSyntaxError: Unexpected token (98:17)\\r\\n\\r\\n   96 |             {\\r\\n   97 |               imgFlag && (\\r\\n>  98 |                 <>\\r\\n      |                  ^\\r\\n   99 |                   <img\\r\\n  100 |                     className=\\"u-video-play\\"\\r\\n  101 |                     onClick={playVideo}\\r\\n\\r\\nand my package.json file\\r\\n\\"dependencies\\": {\\r\\n    \\"@babel/polyfill\\": \\"^7.7.0\\",\\r\\n...\\r\\n},\\r\\n  \\"devDependencies\\": {\\r\\n    \\"@babel/plugin-transform-runtime\\": \\"^7.0.0\\",\\r\\n    \\"@babel/preset-env\\": \\"^7.0.0\\",\\r\\n    \\"@babel/preset-react\\": \\"^7.0.0\\",\\r\\n    \\"@babel/register\\": \\"^7.0.0\\",\\r\\n    \\"@babel/core\\": \\"^7.0.0\\",\\r\\n   ...\\r\\n}","number":17459,"user":{"login":"wangx1229"},"state":"closed","created_at":"2019-11-26T10:02:34Z"},{"id":528585133,"title":"Circular dependencies in reconciler","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nDiscussion\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nExploring source code of React.JS I\'ve found that ReactFiberBeginWork.js depends on some functions from ReactFiberWorkLoop.js:\\r\\nhttps://github.com/facebook/react/blob/6470e0f169b4cf0416132aa66221bf20e264c618/packages/react-reconciler/src/ReactFiberBeginWork.js#L173-L180\\r\\n\\r\\nAt the same time ReactFiberWorkLoop.js depends on some functions from ReactFiberBeginWork.js:\\r\\nhttps://github.com/facebook/react/blob/6470e0f169b4cf0416132aa66221bf20e264c618/packages/react-reconciler/src/ReactFiberWorkLoop.js#L121\\r\\n\\r\\nActually it\'s not a bug but it may lead to some unexpected behavior in future. Is it okay to have such circular dependencies?","number":17458,"user":{"login":"0e39bf7b"},"state":"closed","created_at":"2019-11-26T09:09:30Z"},{"id":528519939,"title":"react-is: 16.12.0 isMemo is returning wrong value","body":"Bug in react-is: **16.12.0**\\r\\nhttps://codesandbox.io/s/determined-lehmann-hl43r\\r\\n![Screen Shot 2019-11-25 at 10 34 22 PM](https://user-images.githubusercontent.com/2319918/69605040-f029aa80-0fd3-11ea-9067-beb882662338.png)\\r\\n\\r\\nThis issue does not exist in ### 16.11.0\\r\\nhttps://codesandbox.io/s/nifty-paper-8cqil","number":17457,"user":{"login":"changran52m"},"state":"closed","created_at":"2019-11-26T06:36:25Z"},{"id":528461795,"title":"Don\'t group Idle/Offscreen work with other work","body":"When we suspend we always try a lower level but we shouldn\'t try offscreen.\\r\\n\\r\\nIf nothing pings during this time then we\u2019ll never return back to rendering the smaller set. This leads us to overrender a lot and assume offscreen heuristics for visible content.\\r\\n\\r\\nOffscreen really shouldn\u2019t ever render unless we\u2019ve committed everything else. There\u2019s no reason to since hidden and hydrating work never unblocks anything.\\r\\n\\r\\nThis change makes it so we leave cpu cycles on the table. Ideally we could warm up hidden work and then return to the previously prepared tree but since we can\u2019t do that yet it\u2019s better to not throw away the tree.\\r\\n","number":17456,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-26T03:20:08Z"},{"id":528453736,"title":"Adjust SuspenseList CPU bound heuristic","body":"In SuspenseList we switch to rendering fallbacks (or stop rendering further rows in the case of tail=\\"collapsed/hidden\\") if it takes more than 500ms to render the list. The limit of 500ms is similar to the train model and designed to be short enough to be in the not noticeable range.\\r\\n\\r\\nThis works well if each row is small because we time the 500ms range well. However, if we have a few large rows then we\'re likely to exceed the limit by a lot. E.g. two 480ms rows hits almost a second instead of 500ms.\\r\\n\\r\\nThis PR adjusts the heuristic to instead compute whether something has expired based on the render time of the last row. I.e. if we think rendering one more row would exceed the timeout, then we don\'t attempt.\\r\\n\\r\\nThis still works well for small rows and bails earlier for large rows.\\r\\n\\r\\nThe expiration is still based on the start of the list rather than the start of the render. It should probably be based on the start of the render but that\'s a bigger change and needs some thought.\\r\\n","number":17455,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-26T02:50:13Z"},{"id":528399520,"title":"Why useEffect\'s default behavior is to run on every render?","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nAPI design question about `useEffect`\\r\\n\\r\\n**What is the current behavior?**\\r\\nCurrently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can\'t think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once? \\r\\n","number":17454,"user":{"login":"elomid"},"state":"closed","created_at":"2019-11-25T23:35:19Z"},{"id":528323912,"title":"Add ESM artifacts to build outputs","body":"## Overview\\r\\nContinuation on #13321.  This PR adds ESM outputs to most libraries - excluding reconciler, devtools, and react-native libraries. There\'s still some more work to be done WRT verifying the ESM output, but I think it\'s at a point where it\'s ready for comments to see if it\'s worth pursuing further.\\r\\n\\r\\n#### TODO\\r\\n- [x] CI: test-package-structure script should run on build\\r\\n    - [x] Note: this needs NodeJS 13.2+ - a Github action workflow has been added for this check in the meantime - [sample output here](https://github.com/darthtrevino/react/commit/9df712532d6cb28f2affee1ebd8ff1f6249a358c/checks?check_suite_id=336225429).\\r\\n- [x] restore legacy-mode support for fb builds. (added custom babel-transformer from #13356)\\r\\n- [x] esm dependencies\\r\\n    - [x] scheduler subpath imports for mjs\\r\\n    - [x] When [prop-types](https://github.com/facebook/prop-types) is esm, the following packages can add esm builds. However, prop-types cannot be updated for esm support until `react-is` is published with esm support, which is part of this PR..\\r\\n         * react\\r\\n         * react-dom\\r\\n         * react-debug-tools\\r\\n         * create-subscription\\r\\n         * use-subscription\\r\\n         * react-cache\\r\\n- [x] verify esm output is importable (check-packages script, with `--experimental-conditional-exports` flag)\\r\\n- [x] make the package.json structures actually align to dual-package spec and not the de-facto \\"module\\" field\\r\\n- [x] minify esm production (note - used terser until we can get closure compiler working on ESM)\\r\\n- [x] verify bundle structures (e.g. packages that declare a main or module script actually have those scripts present).\\r\\n- [x] pkgs with no index.js, should have no index.mjs\\r\\n- [x] pkgs with named exports have no exports in index.mjs\\r\\n- [x] esm reconciler packages? (skip for now)\\r\\n- [x] add `module` fields to packages\\r\\n\\r\\n## Artifacts\\r\\nBundles may be configured with the additional build targets `ESM_DEV` and `ESM_PROD`. The build output will generate the following files:\\r\\n```\\r\\nesm/<package_name>.development.mjs\\r\\nesm/<package_name>.production.min.mjs\\r\\n```\\r\\n\\r\\n## Module Entry\\r\\nPackages that support ESM are structured using the [Dual CommonJS/ESModules Pattern](https://nodejs.org/dist/latest-v13.x/docs/api/esm.html#esm_dual_commonjs_es_module_packages) using the conditional exports feature.\\r\\n\\r\\nPackages may define an `__exports` field to support ESM. This is prefixed with a double-underscore to avoid file resolution issues with build. (e.g. import <package/src/x> will break if exports is set during build).  During build each package\'s __exports field is assigned into the `exports` field of the final build.\\r\\n\\r\\nPackages may also define top-level `.mjs` files in the `npm/` folders, similar to how they currently include top-level `index.js` files. These can be used to define the modular API.\\r\\n\\r\\n```json5\\r\\n{\\r\\n   \\"name\\": \\"react-x\\",\\r\\n   \\"version\\": \\"16.derp\\",\\r\\n   \\"main\\": \\"index.js\\",\\r\\n  // will be turned into \\"exports\\" in build step\\r\\n   \\"__exports\\": { \\r\\n     // top-level import is under \\".\\"\\r\\n      \\".\\": {\\r\\n         // Note: relative imports are important here\\r\\n         \\"require\\": \\"./index.js\\",\\r\\n         \\"default\\": \\"./index.mjs\\"\\r\\n      },\\r\\n      \\"./subpath_import\\": {\\r\\n         \\"require: \\"./subpath_import.js\\",\\r\\n         \\"require: \\"./subpath_import.mjs\\",\\r\\n      }\\r\\n   }\\r\\n}\\r\\n```\\r\\n\\r\\n### Verification\\r\\nModule structure is verified with a new script: test-package-structure, which is performed after the packages are built. This script depends on NodeJS >= 13.2 with the`--experimantal-conditional-exports` flag. The goal of this script is to ensure that packages are aligned with future NodeJS specifications for ES Modules. This script verifies the following invariants over each built package:\\r\\n\\r\\n* If `main` field is present in package.json, the file it references exists.\\r\\n* If an `exports` specification exists in package.json, the files it references exist.\\r\\n* The entries in `files` for each package.json exist.\\r\\n* The package can be included with a `require` statement\\r\\n* Each entry in `exports` can be included with `require()` and `import()`\\r\\n\\r\\nSample Output:\\r\\nsample package validator output:\\r\\n\\r\\n```\\r\\n\ud83d\udce6 create-subscription\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 require(\'create-subscription\') doesn\'t throw\\r\\n\\t\u2713 require(\'create-subscription\') has valid exports\\r\\n \ud83d\udce6 eslint-plugin-react-hooks\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 require(\'eslint-plugin-react-hooks\') doesn\'t throw\\r\\n\\t\u2713 require(\'eslint-plugin-react-hooks\') has valid exports\\r\\n\\t\u2713 require(\'eslint-plugin-react-hooks\') doesn\'t throw\\r\\n\\t\u2713 require(\'eslint-plugin-react-hooks\') has valid exports\\r\\n\\t\u2713 import(\'eslint-plugin-react-hooks\') has valid exports\\r\\n \ud83d\udce6 jest-react\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 require(\'jest-react\') doesn\'t throw\\r\\n\\t\u2713 require(\'jest-react\') has valid exports\\r\\n\\t\u2713 require(\'jest-react\') doesn\'t throw\\r\\n\\t\u2713 require(\'jest-react\') has valid exports\\r\\n\\t\u2713 import(\'jest-react\') has valid exports\\r\\n \ud83d\udce6 react\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 require(\'react\') doesn\'t throw\\r\\n\\t\u2713 require(\'react\') has valid exports\\r\\n \ud83d\udce6 react-art\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 pkg.files@[Circle.js] exists\\r\\n\\t\u2713 pkg.files@[Rectangle.js] exists\\r\\n\\t\u2713 pkg.files@[Wedge.js] exists\\r\\n\\t\u2713 require(\'react-art\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-art\') has valid exports\\r\\n \ud83d\udce6 react-cache\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 require(\'react-cache\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-cache\') has valid exports\\r\\n\\t\u2713 require(\'react-cache\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-cache\') has valid exports\\r\\n\\t\u2713 import(\'react-cache\') has valid exports\\r\\n \ud83d\udce6 react-debug-tools\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 require(\'react-debug-tools\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-debug-tools\') has valid exports\\r\\n\\t\u2713 require(\'react-debug-tools\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-debug-tools\') has valid exports\\r\\n\\t\u2713 import(\'react-debug-tools\') has valid exports\\r\\n \ud83d\udce6 react-dom\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[profiling.js] exists\\r\\n\\t\u2713 pkg.files@[server.js] exists\\r\\n\\t\u2713 pkg.files@[server.browser.js] exists\\r\\n\\t\u2713 pkg.files@[server.node.js] exists\\r\\n\\t\u2713 pkg.files@[test-utils.js] exists\\r\\n\\t\u2713 pkg.files@[unstable-fizz.js] exists\\r\\n\\t\u2713 pkg.files@[unstable-fizz.browser.js] exists\\r\\n\\t\u2713 pkg.files@[unstable-fizz.node.js] exists\\r\\n\\t\u2713 pkg.files@[unstable-native-dependencies.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 require(\'react-dom\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-dom\') has valid exports\\r\\n \ud83d\udce6 react-flight\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 require(\'react-flight\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-flight\') has valid exports\\r\\n \ud83d\udce6 react-flight-dom-webpack\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[server.js] exists\\r\\n\\t\u2713 pkg.files@[server.browser.js] exists\\r\\n\\t\u2713 pkg.files@[server.node.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 require(\'react-flight-dom-webpack\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-flight-dom-webpack\') has valid exports\\r\\n\\t\u2713 require(\'react-flight-dom-webpack\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-flight-dom-webpack\') has valid exports\\r\\n\\t\u2713 import(\'react-flight-dom-webpack\') has valid exports\\r\\n \ud83d\udce6 react-is\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 require(\'react-is\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-is\') has valid exports\\r\\n\\t\u2713 require(\'react-is\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-is\') has valid exports\\r\\n\\t\u2713 import(\'react-is\') has valid exports\\r\\n \ud83d\udce6 react-noop-renderer\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[persistent.js] exists\\r\\n\\t\u2713 pkg.files@[server.js] exists\\r\\n\\t\u2713 pkg.files@[flight-client.js] exists\\r\\n\\t\u2713 pkg.files@[flight-server.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 require(\'react-noop-renderer\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-noop-renderer\') has valid exports\\r\\n\\t\u2713 require(\'react-noop-renderer\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-noop-renderer\') has valid exports\\r\\n\\t\u2713 import(\'react-noop-renderer\') has valid exports\\r\\n \ud83d\udce6 react-reconciler\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[persistent.js] exists\\r\\n\\t\u2713 pkg.files@[reflection.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 require(\'react-reconciler\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-reconciler\') has valid exports\\r\\n \ud83d\udce6 react-server\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[flight.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 require(\'react-server\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-server\') has valid exports\\r\\n \ud83d\udce6 react-test-renderer\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[shallow.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 require(\'react-test-renderer\') doesn\'t throw\\r\\n\\t\u2713 require(\'react-test-renderer\') has valid exports\\r\\n \ud83d\udce6 scheduler\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[index.mjs] exists\\r\\n\\t\u2713 pkg.files@[tracing.js] exists\\r\\n\\t\u2713 pkg.files@[tracing.mjs] exists\\r\\n\\t\u2713 pkg.files@[tracing-profiling.js] exists\\r\\n\\t\u2713 pkg.files@[unstable_mock.js] exists\\r\\n\\t\u2713 pkg.files@[unstable_mock.mjs] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 pkg.files@[umd/] exists\\r\\n\\t\u2713 pkg.files@[esm/] exists\\r\\n\\t\u2713 pkg.exports[.].require file exists\\r\\n\\t\u2713 pkg.exports[.].default file exists\\r\\n\\t\u2713 pkg.exports[./unstable_mock].require file exists\\r\\n\\t\u2713 pkg.exports[./unstable_mock].default file exists\\r\\n\\t\u2713 pkg.exports[./tracing].require file exists\\r\\n\\t\u2713 pkg.exports[./tracing].default file exists\\r\\n\\t\u2713 require(\'scheduler\') doesn\'t throw\\r\\n\\t\u2713 require(\'scheduler\') has valid exports\\r\\n\\t\u2713 require(\'scheduler\') doesn\'t throw\\r\\n\\t\u2713 require(\'scheduler\') has valid exports\\r\\n\\t\u2713 import(\'scheduler\') has valid exports\\r\\n\\t\u2713 require(\'scheduler/unstable_mock\') doesn\'t throw\\r\\n\\t\u2713 require(\'scheduler/unstable_mock\') has valid exports\\r\\n\\t\u2713 import(\'scheduler/unstable_mock\') has valid exports\\r\\n\\t\u2713 require(\'scheduler/tracing\') doesn\'t throw\\r\\n\\t\u2713 require(\'scheduler/tracing\') has valid exports\\r\\n\\t\u2713 import(\'scheduler/tracing\') has valid exports\\r\\n \ud83d\udce6 use-subscription\\r\\n\\t\u2713 pkg.main file exists\\r\\n\\t\u2713 pkg.files@[LICENSE] exists\\r\\n\\t\u2713 pkg.files@[README.md] exists\\r\\n\\t\u2713 pkg.files@[index.js] exists\\r\\n\\t\u2713 pkg.files@[cjs/] exists\\r\\n\\t\u2713 require(\'use-subscription\') doesn\'t throw\\r\\n\\t\u2713 require(\'use-subscription\') has valid exports\\r\\n```","number":17453,"user":{"login":"darthtrevino"},"state":"open","created_at":"2019-11-25T20:38:43Z"},{"id":528280757,"title":"useState hook different behavior than class with react context","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBUG\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI have a PageContext file that has some shared context among a number of components. The when using the class version, using this.state, it acts as expected, and all components utilizing pagecontext update when the page context is updated. HOWEVER if I use the functional component, `PageContextProvider` with the `useState` hook, it does NOT act as expected, and not all updates to the context rerender dependent components.\\r\\n\\r\\n```\\r\\n//PageContext.jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nconst PageContext = React.createContext();\\r\\n\\r\\n// Using state hook, functional (does not work as expect)\\r\\nconst PageContextProvider = (props) => {\\r\\n\\r\\n    const [ page, setPage ] = useState(null);\\r\\n\\r\\n    console.log(\'PageContextProvider\', page);\\r\\n    return (\\r\\n        <PageContext.Provider value={[page, setPage]}>\\r\\n            {props.children}\\r\\n        </PageContext.Provider>\\r\\n    );\\r\\n}\\r\\n// Using class (this works as expected)\\r\\nclass PageContextProvider extends React.Component {\\r\\n    state = {}\\r\\n\\r\\n    setPage = (page) => {\\r\\n        console.log(\'setPage\', page);\\r\\n        return this.setState({page});\\r\\n    }\\r\\n\\r\\n    render = () => {\\r\\n        const { page } = this.state;\\r\\n        console.log(\'render PageContextProvider\', page);\\r\\n\\r\\n        return (\\r\\n            <PageContext.Provider value={[page, this.setPage]}>\\r\\n                {this.props.children}\\r\\n            </PageContext.Provider>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nexport { PageContext };\\r\\n\\r\\nexport default PageContextProvider;\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe useState hook wrapper around the context, should act as the class one does\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact@16.11.0\\r\\nlatest chrome.\\r\\n\\r\\n\\r\\nWhat am I missing here? \\r\\n","number":17452,"user":{"login":"oscarmorrison"},"state":"open","created_at":"2019-11-25T19:09:32Z"},{"id":528258244,"title":"A clean install produces 52 warnings and 17 errors by default when running `$ yarn check`","body":"Following the steps on [Create React App](https://reactjs.org/docs/create-a-new-react-app.html).\\r\\n\\r\\nInstalling the application via `$ npx create-react-app my-app`. When running `$ yarn check` these warnings and errors pop-up in the console.\\r\\n\\r\\nIs this desired behavior? Or does something additional need to be done?\\r\\n\\r\\nRunning [`$ yarn check --verify-tree`](https://yarnpkg.com/en/docs/cli/check#toc-yarn-check-verify-tree) does not produce errors. But I\'m not sure if that\'s checking the right things?\\r\\n\\r\\nDefault dependencies running at time of installation:\\r\\n```\\r\\n  \\"dependencies\\": {\\r\\n    \\"react\\": \\"^16.12.0\\",\\r\\n    \\"react-dom\\": \\"^16.12.0\\",\\r\\n    \\"react-scripts\\": \\"3.2.0\\"\\r\\n  },\\r\\n```\\r\\n\\r\\nThe full list:\\r\\n\\r\\n```\\r\\nyarn check v1.19.1\\r\\nerror Lockfile does not contain pattern: \\"react@^16.12.0\\"\\r\\nerror Lockfile does not contain pattern: \\"react-dom@^16.12.0\\"\\r\\nwarning \\"react-scripts#babel-jest@^24.9.0\\" could be deduped from \\"24.9.0\\" to \\"babel-jest@24.9.0\\"\\r\\nwarning \\"react-scripts#babel-preset-react-app#@babel/plugin-syntax-dynamic-import@7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-syntax-dynamic-import@7.2.0\\"\\r\\nwarning \\"react-scripts#babel-preset-react-app#@babel/plugin-transform-destructuring@7.6.0\\" could be deduped from \\"7.6.0\\" to \\"@babel/plugin-transform-destructuring@7.6.0\\"\\r\\nwarning \\"react-scripts#babel-preset-react-app#@babel/plugin-transform-react-display-name@7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-react-display-name@7.2.0\\"\\r\\nwarning \\"react-scripts#babel-preset-react-app#@babel/preset-react@7.0.0\\" could be deduped from \\"7.0.0\\" to \\"@babel/preset-react@7.0.0\\"\\r\\nwarning \\"react-scripts#babel-jest#@babel/core@^7.0.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"react-scripts#babel-loader#@babel/core@^7.0.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"react-scripts#babel-plugin-named-asset-import#@babel/core@^7.1.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-class-properties#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-decorators#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-object-rest-spread#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-syntax-dynamic-import#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-destructuring#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-flow-strip-types#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-react-display-name#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-runtime#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-dynamic-import@^7.5.0\\" could be deduped from \\"7.5.0\\" to \\"@babel/plugin-proposal-dynamic-import@7.5.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-optional-catch-binding@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-proposal-optional-catch-binding@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-unicode-property-regex@^7.4.4\\" could be deduped from \\"7.6.2\\" to \\"@babel/plugin-proposal-unicode-property-regex@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-syntax-async-generators@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-syntax-async-generators@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-syntax-dynamic-import@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-syntax-dynamic-import@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-syntax-json-strings@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-syntax-json-strings@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-arrow-functions@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-arrow-functions@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-async-to-generator@^7.5.0\\" could be deduped from \\"7.5.0\\" to \\"@babel/plugin-transform-async-to-generator@7.5.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-block-scoping@^7.6.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/plugin-transform-block-scoping@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-classes@^7.5.5\\" could be deduped from \\"7.5.5\\" to \\"@babel/plugin-transform-classes@7.5.5\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-destructuring@^7.6.0\\" could be deduped from \\"7.6.0\\" to \\"@babel/plugin-transform-destructuring@7.6.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-dotall-regex@^7.4.4\\" could be deduped from \\"7.6.2\\" to \\"@babel/plugin-transform-dotall-regex@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-function-name@^7.4.4\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-function-name@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-commonjs@^7.6.0\\" could be deduped from \\"7.6.0\\" to \\"@babel/plugin-transform-modules-commonjs@7.6.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-systemjs@^7.5.0\\" could be deduped from \\"7.5.0\\" to \\"@babel/plugin-transform-modules-systemjs@7.5.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-umd@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-modules-umd@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-named-capturing-groups-regex@^7.6.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/plugin-transform-named-capturing-groups-regex@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-new-target@^7.4.4\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-new-target@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-property-literals@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-property-literals@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-regenerator@^7.4.5\\" could be deduped from \\"7.4.5\\" to \\"@babel/plugin-transform-regenerator@7.4.5\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-reserved-words@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-reserved-words@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-spread@^7.2.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/plugin-transform-spread@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-unicode-regex@^7.4.4\\" could be deduped from \\"7.6.2\\" to \\"@babel/plugin-transform-unicode-regex@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-display-name@^7.0.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-react-display-name@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-typescript#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"react-scripts#babel-jest#babel-preset-jest#@babel/core@^7.0.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-class-properties#@babel/helper-create-class-features-plugin#@babel/core@^7.0.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-async-generator-functions\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-json-strings\\" not installed\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-decorators#@babel/plugin-syntax-decorators#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"@babel/preset-env#@babel/plugin-syntax-dynamic-import#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-flow-strip-types#@babel/plugin-syntax-flow#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-syntax-optional-catch-binding\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-computed-properties\\" not installed\\r\\nwarning \\"@babel/preset-env#@babel/plugin-transform-destructuring#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-exponentiation-operator\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-for-of\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-literals\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-amd\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-object-super\\" not installed\\r\\nwarning \\"@babel/preset-react#@babel/plugin-transform-react-display-name#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nerror \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-jsx-self\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-jsx\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-sticky-regex\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-template-literals\\" not installed\\r\\nwarning \\"babel-preset-react-app#@babel/preset-typescript#@babel/plugin-transform-typescript#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nerror \\"babel-preset-react-app#@babel/plugin-transform-react-jsx#@babel/plugin-syntax-jsx\\" not installed\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-typescript#@babel/plugin-syntax-typescript#@babel/core@^7.0.0-0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nwarning \\"jest-config#babel-jest#@babel/core@^7.0.0\\" could be deduped from \\"7.6.2\\" to \\"@babel/core@7.6.2\\"\\r\\nerror \\"babel-jest#babel-preset-jest\\" not installed\\r\\ninfo Found 52 warnings.\\r\\nerror Found 17 errors.\\r\\ninfo Visit https://yarnpkg.com/en/docs/cli/check for documentation about this command.\\r\\n```","number":17451,"user":{"login":"StudioSpindle"},"state":"closed","created_at":"2019-11-25T18:24:24Z"},{"id":527773910,"title":"Clicks on links with hash do not get caught by delegated onClick handlers","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen clicking on a link with a hash `href` the event does not get caught by delegated `onClick` handlers higher in the DOM, although it works correct for `onMouseDown` events and for clicks on links without a hash.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nexample: https://codesandbox.io/s/loving-smoke-oqx2w\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe delegated handler should also get triggered for the `onClick` event.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nTested on MacOs (catalina) Firefox 70.0.1, Chrome 78.0.3904.108\\r\\nReact 16.8.6","number":17450,"user":{"login":"gpetrioli"},"state":"closed","created_at":"2019-11-24T23:11:26Z"},{"id":527753439,"title":"Help me to remove all code or what else to back to normal ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17449,"user":{"login":"kail-287"},"state":"closed","created_at":"2019-11-24T20:41:03Z"},{"id":527748482,"title":"react-dom logs error to console when form.checkValidity() is called during render","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`react-dom` logs an error to the console when `.checkValidity()` is called on a form element (from a `ref`) inside the render part of a function component. The error is only logged when `.checkValidity()` returns `false`. This is the error message:\\r\\n\\r\\n```\\r\\nWarning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.\\r\\n```\\r\\n\\r\\nCodeSandbox: https://codesandbox.io/s/pensive-colden-ipuwi\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n~~Nothing should be logged to the console.~~\\r\\n\\r\\nA more informative error should be logged to the console (see [comment](https://github.com/facebook/react/issues/17448#issuecomment-558390647)).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact/ReactDOM: 6.10.0 - 6.12.0 (this worked as expected in 6.9.0)\\r\\nBrowser: Chrome 78, Firefox 70\\r\\nOS: any","number":17448,"user":{"login":"nwoltman"},"state":"open","created_at":"2019-11-24T20:01:28Z"},{"id":527742216,"title":"Error: \\"Could not find commit data for root \\"335\\" and commit 2\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\\r\\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\\r\\n\\r\\nComponent stack: in sc\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17447,"user":{"login":"vadamk"},"state":"closed","created_at":"2019-11-24T19:11:47Z"},{"id":527731353,"title":"Why error when rendering more hooks if they maintain order? ...and more","body":"Hi.\\r\\n\\r\\nJust wondering what is the problem to allow a component to render \\"less\\" hooks that maintain order.\\r\\n\\r\\nI ask because I\'ve been using (although not very convincingly) wrapping some components to allow bailing earlier by returning `undefined`. The wrapper would just return the last value in that case.\\r\\n\\r\\nI know I could just `useMemo` everywhere but sometimes having to provide default values or adding extra conditionals for some edge cases adds some noise to the code.\\r\\n\\r\\nIs there any reason against this method?\\r\\n\\r\\nThanks\\r\\n","number":17446,"user":{"login":"ruifortes"},"state":"open","created_at":"2019-11-24T17:43:06Z"},{"id":527715933,"title":"Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function","body":"I\'m doing an exercise to understand a little more react native, I\'m working FlagtList to show a list but I\'m throwing the following error:\\r\\n\\r\\n\\r\\n    Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s%s, undefined,  You likely forgot to export your component from the file it\'s defined in, or you might have mixed up default and named imports.\\r\\n\\r\\n    Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it\'s defined in, or you might have mixed up default and named imports.\\r\\n    \\r\\n    Check the render method of `App`.\\r\\n    \\r\\n    Stack trace:\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:5716:10 in createFiberFromTypeAndProps\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:5744:4 in createFiberFromElement\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:9001:8 in reconcileSingleElement\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:9085:14 in reconcileChildFibers\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:11007:6 in reconcileChildren\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:11755:4 in updateHostComponent\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17276:21 in performUnitOfWork\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17316:41 in workLoop\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17417:15 in renderRoot\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18423:17 in performWorkOnRoot\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18324:24 in performWork\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18285:14 in performSyncWork\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:18169:19 in requestWork\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:17969:16 in scheduleWork\\r\\n      node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:6934:17 in enqueueSetState\\r\\n      node_modules/react/cjs/react.development.js:335:31 in setState\\r\\n      App.js:55:18 in _callee$\\r\\n      node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js:45:44 in tryCatch\\r\\n      node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js:271:30 in invoke\\r\\n\\r\\n\\r\\nThe code I am implementing is as follows:\\r\\n\\r\\n    import React, { Component } from \'react\';\\r\\n    import { StyleSheet, Text, View, FlagtList } from \'react-native\';\\r\\n    \\r\\n    const styles = StyleSheet.create({\\r\\n      container: {\\r\\n        display: \'flex\',\\r\\n        flex: 1,\\r\\n        justifyContent: \'center\',\\r\\n        alignItems: \'center\'\\r\\n      }\\r\\n    });\\r\\n    \\r\\n    \\r\\n    export default class App extends Component {\\r\\n       \\r\\n      state = {\\r\\n        loading: true,\\r\\n        users: [] // Esto es un arreglo vacio el cual guardara los datos que se trae\\r\\n      };\\r\\n\\r\\n      constructor(props) {   \\r\\n        super(props)\\r\\n        this.fetchUsers()    \\r\\n      }\\r\\n    \\r\\n      fetchUsers = async () => {\\r\\n        \\r\\n        const respuesta = await fetch(\'https://jsonplaceholder.typicode.com/users\');\\r\\n\\r\\n        const pre = await respuesta.json();\\r\\n    \\r\\n        const usersjson = pre.map( x => ({ ...x, key: String(x.id) }));\\r\\n\\r\\n        this.setState({ users: [usersjson.name], loading: false });\\r\\n    \\r\\n      }\\r\\n    \\r\\n      render() {\\r\\n\\r\\n        const { loading, users } = this.state;\\r\\n    \\r\\n        if ( loading ) {\\r\\n          return (\\r\\n            <View style={ styles.container }>\\r\\n              <Text>Por Favor espere... </Text>\\r\\n            </View>\\r\\n          );\\r\\n        }\\r\\n\\r\\n        return <View>\\r\\n          <FlagtList\\r\\n            data={ users }\\r\\n            renderItem={({ item }) => <Text>{item.name}</Text>}\\r\\n          />\\r\\n        </View>;\\r\\n      }\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\nI don\'t know why I get the error and try to execute the project and I still get the same error.\\r\\n\\r\\nI\'m running it with yarn start.\\r\\n\\r\\nI appreciate the help you can give me.\\r\\n\\r\\nThanks","number":17445,"user":{"login":"Luzmario1708"},"state":"closed","created_at":"2019-11-24T15:40:38Z"},{"id":527715650,"title":"Error: \\"getCommitTree(): Unable to reconstruct tree for root \\"1\\" and commit 21\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150913)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n\\r\\nComponent stack: in dl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17444,"user":{"login":"mengxuhui"},"state":"closed","created_at":"2019-11-24T15:38:33Z"},{"id":527665930,"title":"Fix missed warning when passing a function (issue 16573)","body":"This PR fixes: [https://github.com/facebook/react/issues/16573](https://github.com/facebook/react/issues/16573).\\r\\n\\r\\n1. Added one more visitor function to handle expressions.\\r\\n2. Added test cases for the same\\r\\n\\r\\nI have followed all the pre requisites to create this pull request. It\'s my first PR to the Reactjs . . Putting it in PR to get further feed back.Please let me know the problems if any with this pr, so that i can fix them.\\r\\nThanks","number":17443,"user":{"login":"simbathesailor"},"state":"open","created_at":"2019-11-24T08:28:59Z"},{"id":527663439,"title":"When using a state hook(useState), is it possible to change the state directly?","body":"When using a state hook, is it possible to change the state directly? Or as with the regular state in the class component?\\r\\nAs an example, changing an existing array (directly or copy a new one)\\r\\n\\r\\n` this.setState(({ todos }) => {\\r\\n            const newTodos = [\\r\\n                ...todos,\\r\\n                newItem\\r\\n            ];\\r\\n           return { todos: newTodos }\\r\\n        })\\r\\n`\\r\\n\\r\\nOr using a state hook, I can just  `todos.push(newItem)` ?\\r\\n","number":17442,"user":{"login":"ShevRuslan"},"state":"closed","created_at":"2019-11-24T07:57:53Z"},{"id":527611927,"title":"Improve inline svg support for mask and defs","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nIn react dom terms a feature _(because it works as expected in Safari - but not in chrome/firefox/ie?)_\\r\\n\\r\\n**What is the current behavior?**\\r\\nGiven we use an inline icon that includes defs or/and mask [Example](https://github.com/raix/react-svg-defs-issue/blob/master/src/App.js#L31-L45)\\r\\nAnd we reuse this icon in multiple places\\r\\nWhen the first icon is placed in a div with display \\"none\\" the reference is hidden (only true if done on the first icon)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAll icons should render normally without loosing the referenced element.\\r\\nReference: https://github.com/raix/react-svg-defs-issue/blob/master/src/App.js\\r\\n\\r\\n**What fixes it?**\\r\\nWhen creating a special `Mask` component that keeps a single reference element in a portal / outside the icon itself the problem goes away.\\r\\n\\r\\n![svg-issue-using-react](https://user-images.githubusercontent.com/1136718/69485549-529e7180-0e41-11ea-9515-dc0fdf50a189.gif)\\r\\n\\r\\n_(We currently convert to svg without `defs` and `mask` as it doesn\'t work reliable atm.)_\\r\\n","number":17441,"user":{"login":"raix"},"state":"open","created_at":"2019-11-23T21:30:01Z"},{"id":527586626,"title":"Shallow rendering with React.memo","body":"I understand that the future of `react-test-render/shallow` is uncertain but I thought I would log this issue anyway. It looks like components wrapped in `React.memo` will not re-render unless props changed. In our case the component is using the `useState` hook and updating state does not re-render when using wrapped in `React.memo()`\\r\\n\\r\\nhttps://github.com/facebook/react/blob/54f66731c84e3f141a1c0bc5d32be7cc5d4b9bbf/packages/react-test-renderer/src/ReactShallowRenderer.js#L621-L627\\r\\n\\r\\nContrived codesandox example:\\r\\n\\r\\nhttps://codesandbox.io/s/sweet-field-ydm0c?fontsize=14&hidenavigation=1&module=%2Fsrc%2Findex.test.js&previewwindow=tests&theme=dark\\r\\n","number":17440,"user":{"login":"henryqdineen"},"state":"open","created_at":"2019-11-23T17:45:50Z"},{"id":527512452,"title":"react-test-renderer: improve findByType() error message","body":"I noticed that The `findByType()` method throws unhelpful error messages when using a string as the `type` argument. For example:\\r\\n\\r\\n```\\r\\ntestInstance.findByType(\'span\');\\r\\n// Expected 1 but found 2 instances with node type: \\"undefined\\"\\r\\n```\\r\\nI am also running into this when searching for components using `React.memo`. My solution was to use `getComponentName()`. Thanks!\\r\\n","number":17439,"user":{"login":"henryqdineen"},"state":"open","created_at":"2019-11-23T05:16:51Z"},{"id":527505060,"title":"[Fresh] Make all errors recoverable","body":"The logic for recovering from errors was a bit shaky because we tried to guess what was last scheduled from the commit event. That was insufficient because:\\r\\n\\r\\n1. Failure before the initial mount doesn\'t make commits at all\\r\\n2. We can\'t easily distinguish a user-initiated unmount from a commit that happened for some other reason\\r\\n\\r\\nThe first is a current limitation of Fast Refresh which is annoying. The second leads to some edge cases where it can\'t reliably recover even on updates.\\r\\n\\r\\nI\'m changing the strategy to introduce a first-class DevTools hook that fires when a root gets scheduled an element. We track these in Fresh runtime in a WeakMap (if not available, retrying is off completely). This lets us recover from both initial and update errors, and also tell reliably what was the last scheduled element.\\r\\n\\r\\nBecause this DevTools hook is new, I had to add some checks. I also cleaned up an old instrumentation file that existed for a similar purpose but is unused. Also added a re-entrancy check to the Fresh runtime. Should be unnecessary but I\'m starting to rely on it not being re-entrant.","number":17438,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-23T03:50:07Z"},{"id":527473931,"title":"Remove redundant code","body":"`if (typeof nextProp === \'undefined\') {` can never be be true, since we `continue` when undefined on line 70.\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17437,"user":{"login":"camjc"},"state":"open","created_at":"2019-11-23T00:12:35Z"},{"id":527289117,"title":"What will suspense look like for the streaming case?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nA discussion, at the request of @gaearon. \\r\\n\\r\\n### Questions\\r\\n\\r\\nI\'m very curious what the public API will be for Suspense in streaming cases. The work I do or have pretty much always done in React involves dealing with streams of data, generally coming over a web socket. What will it look like? Will it be easy for users to implement/use? Is a promise/thenable an appropriate type for dealing with this even internally, given that the first value may never show up?\\r\\n\\r\\n### Desire\\r\\n\\r\\nThe ability to leverage suspense to \\"suspend\\" until the first of many values arrives from a stream of data coming from any source. For the sake of conversation, we\'ll say a web socket.\\r\\n\\r\\n\\r\\n### Constraints\\r\\n\\r\\n- The first value may never arrive\\r\\n- The source may close without error, having never provided a value\\r\\n- There must be an ergonomic teardown mechanism, for example how developers can currently teardown in the returned function of `useEffect` or in `componentWillUnmount`.\\r\\n- There may be more than one value returned by the streaming source\\r\\n\\r\\n### Optional constraints\\r\\n\\r\\n- The first N values form the source may be synchronous (followed by asynchronous values)\\r\\n\\r\\n### Scenario\\r\\n\\r\\nA simple app with two routes, one where the app needs to open a web socket connection and collect streaming data, and the other where the socket connection should be closed. The values from the web socket may take long enough that the developer will want to move to that routed component right away and show some spinner with suspense until the first bit of data arrives. If the user navigates to the first route, then leaves before the first value arrives, what happens?\\r\\n\\r\\nMy concern is, that if, even internally, the mechanism is a promise or thenable, there is a chance leaks will be created in the event that the source of that first value is torn down before the first value arrives. The only way, with a thenable or promise, to avoid that chance would be to make sure that the teardown mechanism was somehow tied to the thenable, so that the thenable to be rejected (or resolved) with a known value, such that it will be \\"settled\\".","number":17436,"user":{"login":"benlesh"},"state":"open","created_at":"2019-11-22T16:19:21Z"},{"id":527243911,"title":"Rejecting suspended promise does not automatically go to an error boundary","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nIf [what @gaearon said is true](https://twitter.com/dan_abramov/status/1197853310470021120), then it\'s a bug of unstable software.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf a suspending promise rejects, it does not automatically trigger an error boundary and instead it suspends forever: https://codesandbox.io/s/suspenselist-issues-u9brv\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1500684/69435887-9daf6c00-0cfd-11ea-89b3-86d5368155f5.png)\\r\\n\\r\\nHere\'s the gist of the code:\\r\\n\\r\\n```javascript\\r\\nlet promise = new Promise((resolve, reject) =>\\r\\n  setTimeout(() => reject(new Error(\'failed\')), 1000),\\r\\n)\\r\\nfunction SuspendingComponent() {\\r\\n  throw promise\\r\\n}\\r\\n\\r\\n// ...\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div>\\r\\n      <ErrorBoundary>\\r\\n        <Suspense fallback=\\"loading...\\">\\r\\n          <SuspendingComponent />\\r\\n        </Suspense>\\r\\n      </ErrorBoundary>\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nBased on Dan\'s tweet, I would expect that when the promise rejects, the error boundary would be rendered, but it\'s not.\\r\\n\\r\\nThere\'s a simple workaround: https://codesandbox.io/s/suspenselist-issues-fxven\\r\\n\\r\\nI\'m having trouble with that showing the actual error on codesandbox, but here\'s what it looks like locally:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1500684/69435832-87091500-0cfd-11ea-8012-0010c3ee2c38.png)\\r\\n\\r\\nThe gist of the changes:\\r\\n\\r\\n```javascript\\r\\nlet status = \'pending\'\\r\\nlet result\\r\\nlet promise = new Promise((resolve, reject) =>\\r\\n  setTimeout(() => reject(new Error(\'failed\')), 1000),\\r\\n).then(\\r\\n  r => {\\r\\n    result = r\\r\\n    status = \'success\'\\r\\n  },\\r\\n  e => {\\r\\n    result = e\\r\\n    status = \'error\'\\r\\n  },\\r\\n)\\r\\n\\r\\nfunction SuspendingComponent() {\\r\\n  if (status === \'pending\') throw promise\\r\\n  if (status === \'error\') throw result\\r\\n  return result\\r\\n}\\r\\n```\\r\\n\\r\\nThe workaround is basically to store the error and throw it during the render phase. I was under the impression this was the official suggestion based on the `wrapPromise` example in the `fakeApi.js` of the codesandboxes linked in [the docs](https://reactjs.org/docs/concurrent-mode-suspense.html#start-fetching-early).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`react@0.0.0-experimental-b53ea6ca0` and `react-dom@0.0.0-experimental-b53ea6ca0`","number":17435,"user":{"login":"kentcdodds"},"state":"open","created_at":"2019-11-22T14:56:16Z"},{"id":527192553,"title":"useEffect executes return block before the main one","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen there is a time consuming activity in main block of useEffect, return block gets executed first, then the main block. This is an anti-pattern.\\r\\n\\r\\n**Steps to reproduce.**\\r\\nhttps://codesandbox.io/s/react-hooks-playground-ych47\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIn useEffect hook, return block should always be executed last, and nothing after it, right? It doesn\'t make sense to do a cleanup before actually doing some activity first.\\r\\n","number":17434,"user":{"login":"agonqorolli"},"state":"open","created_at":"2019-11-22T13:22:39Z"},{"id":527147483,"title":"Logging from a component","body":"**Do you want to request a *feature* or report a *bug*?** Feature\\r\\n\\r\\nThere are two cases I want to be improved.\\r\\n\\r\\nCase 1. Currently when you have to debug some component and you have multiple instances of it on the page, and you are trying to console.log something from there you\'ll get 10 messages in the console, and as component life time progresses and you are trying to console.log more stuff console output becomes total mess, which is hard to read. So you must manually limit that output to just one instance. Though if that output could be redirected to React dev tools, it could probably do this for me.\\r\\n\\r\\nCase 2. When printing a warning from a component via console.warn, all I can get is js stack trace at best telling me which component did that. But I know that anyway. What I want to know is which other component rendered that component and ultimately the whole component stack trace. So it would be nice to either be able to print component stack trace at arbitrary time, not just when everything blows up, or have some warning icon/message attached to compnent that issued that warning in react dev tools.\\r\\n","number":17433,"user":{"login":"mixtur"},"state":"closed","created_at":"2019-11-22T11:39:59Z"},{"id":527121215,"title":"Devtools : highlight box is shown too small.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nA bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen Chrome devtools is highlighting highlight box is shown too small.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/44562005/69419027-185ca380-0d5f-11ea-8284-8004147dc713.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nHighlight box is shown actual template size.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nChrome 78.0.3904.97\\r\\nReact Developer Tools 4.2.0","number":17432,"user":{"login":"soulcactus"},"state":"open","created_at":"2019-11-22T10:43:23Z"},{"id":526945118,"title":"[react-test-renderer] \\"Warning: Each child in a list should have a unique \\"key\\" prop.\\"","body":"Hello!\\r\\n\\r\\n**react-test-renderer** works just fine, but I\'m getting the following Warning on all of my Tests:\\r\\n\\r\\n> Warning: Each child in a list should have a unique \\"key\\" prop.\\r\\n\\r\\nHas this been addressed? It isn\'t something related to my code or Tests.\\r\\n\\r\\nMany thanks!","number":17431,"user":{"login":"incarnateTheGreat"},"state":"closed","created_at":"2019-11-22T02:11:47Z"},{"id":526874932,"title":"[Bugfix] Updates \\"un-committed\\" when rebasing","body":"To enforce that updates that are committed can never be un-committed, even during a rebase, we need to track which updates are part of the rebase. The current implementation doesn\'t do this properly. It has a hidden assumption that, when rebasing, the next `renderExpirationTime` will represent a later expiration time that the original one. That\'s usually true, but it\'s not *always* true: there could be another update at even higher priority.\\r\\n\\r\\nThis requires two extra fields on the update queue. I really don\'t like that the update queue logic has gotten even more complicated. It\'s tempting to say that we should remove rebasing entirely, and that update queues must always be updated at the same priority. But I\'m hesitant to jump to that conclusion \u2014 rebasing can be confusing in the edge cases, but it\'s also convenient. Enforcing single-priority queues would really hurt the ergonomics of useReducer, for example, where multiple values are centralized in a single queue. It especially hurts the ergonomics of classes, where there\'s only a single queue per class.\\r\\n\\r\\nSo it\'s something to think about, but I don\'t think \\"no more rebasing\\" is an acceptable answer on its own.","number":17430,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-21T22:22:21Z"},{"id":526869512,"title":"React warnings should use console.warn and allow verbosity override.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nRequest a feature (though reporting warnings via `console.error` has always struck me as odd).\\r\\n\\r\\n**What is the current behavior?**\\r\\nAfter React upgrades and intermittently during development React deprecation and other warnings accrue and React displays them along with the entire call stack via `console.error`. We eventually pay down the debt by updating all the call points but this isn\'t something seen as very high priority (actual bugs / certain features / genuine errors are priority). In the meantime the chrome dev console is inundated with warnings masquerading as errors.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/424694/69380814-267bc880-0c68-11ea-96ec-113bc5a6111c.png)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThese should be appropriately reported via `console.warn`. This is the standard used for deprecation warnings in chrome. Reporting these as errors makes legitimate errors more difficult to spot, especially due to the fact that the entire call stack is dropped into the message. With the stack trace in the message, each one takes the entire screen of chrome dev tools, where legitimate errors correctly fold the stack trace and take a fraction of the real estate. Reporting warnings via `console.error` when no error is thrown is not a good practice. It feels a bit like React is yelling at me in all caps to \\"FIX ME NOW\\" and clearly thinks its more important than other things (like actual errors). Further, reporting as errors breaks the functionality of chrome dev tools verbosity filters in that I can\'t focus on actual errors when I want to, nor can I focus on sitewide warnings (including React).\\r\\n\\r\\nThere are times when reporting these as errors would be useful - when I\'m doing dedicated work to fix React deprecations. I separate work into separate PRs and often do not want to fix one-off deprecations when I\'m working on something unrelated. Often, these warnings cannot be fixed without testing them thoroughly (anything with `setState` / `componentWillMount` / etc.).\\r\\n\\r\\nI propose allowing some configuration such as `process.env.REACT_THROW_WARNINGS` / `process.env.REACT_TREAT_WARNINGS_AS_ERRORS` / `process.env.REACT_STRICT` (or possibly even allowing a verbosity level to report them at). If this flag were enabled, the warnings should actually be thrown, breaking the app, and the call stack would not need to be appended to the message. The default state should report the warning with `console.warn` and elide the call stack. The warning message could contain a note / link describing how to elevate warnings to actual errors.\\r\\n\\r\\nIf all the above is deemed \\"by design\\" or whatever, it would be really nice if React could expose a warning formatter middleware to let us override the massive call stack to cap its head to 3-5 lines.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nAll versions of React currently do this.","number":17429,"user":{"login":"cchamberlain"},"state":"closed","created_at":"2019-11-21T22:09:27Z"},{"id":526841497,"title":"Update release script URL","body":"The CircleCI API endpoint changed\\r\\n","number":17428,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-21T21:06:20Z"},{"id":526827817,"title":"fix(ReactElement): remove assignment of reserved default props","body":"This removes the behavior of assigning default props that are\\r\\nalso reserved (e.g. `key` and `ref`) props.\\r\\n\\r\\nIt might be worth looking into throwing a warning when the end\\r\\nuser has specified a default prop that is also a reserved prop,\\r\\nas the reserved props aren\'t treated like normal props and thus\\r\\nshouldn\'t be given arbitrary default values.\\r\\n\\r\\nFixes #17393","number":17427,"user":{"login":"bpas247"},"state":"open","created_at":"2019-11-21T20:36:23Z"},{"id":526812805,"title":"Passing in prop equality fn to React.memo can reset state from Hooks during updates ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\nPassing in a function as the second argument to React.memo can cause state initialized in hooks to reset to previous state.  \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/romantic-wilson-34sup\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAlternating row clicks should preserve the previous state associated with each row. \\r\\n\\r\\nRemove the areEqual function as the 2nd parameter to React.memo and the app behaves as expected.  Another fix is passing in a function to setState ```prevState => ... ```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.6, Chrome; no\\r\\n","number":17426,"user":{"login":"eshifrin"},"state":"closed","created_at":"2019-11-21T20:04:02Z"},{"id":526803319,"title":"SuspenseList revealOrder=\\"forwards\\" has issues when Suspense is nested in another element","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nSuspenseList is currently experimental, so it\'s neither. But I think that this should be fixed before it\'s stable.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n![Screen Recording 2019-11-21 at 12 39 56 PM](https://user-images.githubusercontent.com/1500684/69371223-a6039a80-0c5c-11ea-9fd4-848a3f1672fa.gif)\\r\\n\\r\\nNote the 1000ms at the bottom (which should show last based on the `revealOrder`) shows at 2000ms for the nested version.\\r\\n\\r\\nThe only difference between those two sets of SuspenseLists is that one has nested the two bottom suspense elements in a `div`. Something like this:\\r\\n\\r\\n```javascript\\r\\nfunction App() {\\r\\n  return (\\r\\n    <SuspenseList revealOrder=\\"forwards\\">\\r\\n      <Suspense fallback={<div>2000ms loading</div>}>\\r\\n        <A />\\r\\n      </Suspense>\\r\\n      <div> {/* nesting */}\\r\\n        <Suspense fallback={<div>3000ms loading</div>}>\\r\\n          <B />\\r\\n        </Suspense>\\r\\n        <Suspense fallback={<div>1000ms loading</div>}>\\r\\n          <C />\\r\\n        </Suspense>\\r\\n      </div> {/* nesting */}\\r\\n    </SuspenseList>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nhttps://codesandbox.io/s/suspenselist-issues-sdqzb\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect them to behave exactly the same. Nesting things is often necessary for styling reasons.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI\'m experiencing this on `react@0.0.0-experimental-b53ea6ca0` and `react-dom@0.0.0-experimental-b53ea6ca0`. I don\'t believe this ever worked in previous versions of React.","number":17425,"user":{"login":"kentcdodds"},"state":"open","created_at":"2019-11-21T19:44:06Z"},{"id":526763792,"title":"Bug: Lazy / Suspense seems to be broken on Microsoft edge","body":"I realised yesterday that the latest build on one of my projects breaks on Microsoft Edge (latest version I think). My project uses code splitting per route using React.lazy & Suspense.\\r\\n\\r\\nFrom the console it appears that the request is being sent correctly, but React is attempting to update before it is ready, so it throws an error stating that it \\"Cannot find module\\".\\r\\n\\r\\nThe problem only seems to be happening for me on Microsoft Edge. Chrome, Safari, Firefox all good, but havent checked others. \\r\\n\\r\\nI have fixed the bug on my project by pinning the dependencies to 16.8 (this was the previous version in my yarn.lock). The React version my project had updated to was 16.12.\\r\\n","number":17424,"user":{"login":"frednomoon"},"state":"closed","created_at":"2019-11-21T18:21:36Z"},{"id":526662895,"title":"React forces component to un-mount and mount when it should only update it","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nSeems to me to be a bug ( maybe not a bug)\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe WrapAndRenderChildren component is being unmounted and mounted, so does the From hence when changing the input value (which in turn sets the state) the input is rerendered and loses focus.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/wrappe-renderer-forces-rerender-1tlwm?fbclid=IwAR2FumRdR0VrIfkRGZTJn7Yr7-Ax-iQ67KgL0QJprH73rkSk1b_G8-4lrPE\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe WrapAndRenderChildren component should only be updated when I modify the state not unmounted.\\r\\nAs React unmounts a component only when the type of the component or its key  has changed. in my exemple the type does not change, but when I define the WrapAndRenderChildren outside of the App component it\'s seems to work correctly.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8\\r\\n","number":17423,"user":{"login":"amazzalel-habib"},"state":"closed","created_at":"2019-11-21T15:22:19Z"},{"id":526565555,"title":"[react-interactions] Refine virtual click detection for FF+JAWS","body":"After lots of internal testing, we found that JAWS with FF results in a case we didn\'t previously capture as a virtual click. Specifically, the `detail` property is `1` using JAWS but `mozInputSource` is `0`. We actually have this logic internally at FB, so it\'s reusing that (see https://fburl.com/diffusion/i2aajhpr).","number":17422,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-21T12:31:45Z"},{"id":526558812,"title":"[react-interactions] Fix memory leak in event responder system","body":"This should fix some issues with leaking fibers from root events in the event responder system. Specifically:\\r\\n\\r\\n- Unsure we unmount listeners on Scope Nodes\\r\\n- Unsure we memoize the responders map back on fibers","number":17421,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-21T12:17:58Z"},{"id":526435830,"title":"React.createRoot(container).render(<App />) doesn\'t remove existing container children","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nI guess it\'s a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen using `ReactDom.createRoot(container).render(<App />)`, if the container has child elements, then these don\'t get removed when the App component is rendered into the container.\\r\\n\\r\\n**CodeSandbox example**\\r\\n\\r\\nhttps://codesandbox.io/s/recursing-euler-b3oj7\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI expect it to behave like `ReactDom.render(<App />, container)`, which clears the contents of the container when the App component is rendered into it.\\r\\n\\r\\n**Which versions of React?**\\r\\n\\r\\nLatest experimental, see CodeSandbox example.\\r\\n","number":17420,"user":{"login":"martinandert"},"state":"open","created_at":"2019-11-21T08:22:52Z"},{"id":526435252,"title":"build problem - Missing class properties transform.","body":"command \\"yarn start\\" works fine.\\r\\nbut \\"yarn build\\" gives an error:\\r\\n\\r\\n```\\r\\n$ yarn build\\r\\nyarn run v1.7.0\\r\\n$ node scripts/build.js\\r\\nCreating an optimized production build...\\r\\nFailed to compile.\\r\\n\\r\\n./node_modules/.../BaseModal/index.js\\r\\nSyntaxError: ...\\\\BaseModal\\\\index.js: Missing class properties transform.\\r\\n   5 | export default class BaseModal extends Component {\\r\\n   6 |\\r\\n>  7 |   static items = []\\r\\n\\r\\n```\\r\\nthe project has established a new.\\r\\n\\r\\nto solve the problem, I change in file ./scripts/build.js\\r\\n```\\r\\nprocess.env.BABEL_ENV = \'production\';\\r\\nprocess.env.NODE_ENV = \'production\';\\r\\n```\\r\\non\\r\\n```\\r\\nprocess.env.BABEL_ENV = \'development\';\\r\\nprocess.env.NODE_ENV = \'development\';\\r\\n```\\r\\n\\r\\nand everything starts to work\\r\\nbut I think that you can\u2019t do this ...","number":17419,"user":{"login":"valery-lavrik"},"state":"open","created_at":"2019-11-21T08:21:32Z"},{"id":526400912,"title":"useTransition improvements","body":"- [x] When multiple transitions update the same queue, only the most recent\\r\\none should be considered pending. Example: If I switch tabs multiple times, only the last tab I click should display a pending state (e.g. an inline spinner).\\r\\n- [x] When multiple transitions update the same queue, only the most recent one should be allowed to finish. Do not display intermediate states. Example: if you click on multiple tabs in quick succession, we should not switch to any tab that isn\'t the last one you clicked.\\r\\n\\r\\nHere\'s the CodeSandbox I\'m using to test the changes: https://codesandbox.io/s/elastic-hawking-69381. It\'s a tab switcher. Switch tabs and pay attention to the pending spinners.\\r\\n","number":17418,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-21T06:53:59Z"},{"id":526372805,"title":"How to use sync state changed in eventListener in useEffect?","body":"I have 3 event listeners is created when isMounted = true, in each event, i updated some variable (count, number). But every count or number change, event registered but console.log(count), count not change. Solution for this case. thanks\\r\\n\\r\\n````\\r\\nfunction demo() {\\r\\n    const [count, setCount] = useState(0);\\r\\n    const [isMounted, setIsMounted] = useState(false);\\r\\n    const [number, setNumber] = useState(0);\\r\\n\\r\\n    useEffect(() => {\\r\\n        setIsMounted(true);\\r\\n       return () => setIsMounted(false);\\r\\n    }, []);\\r\\n\\r\\n    useEffect(() => {\\r\\n        document.addEventListener(\\"touchmove\\", () => { console.log(count); setNumber(1); });\\r\\n        document.addEventListener(\\"touchstart\\", () => { console.log(count); setCount(2) });\\r\\n        document.addEventListener(\\"touchend\\", () => { console.log(count); setNumber(2); });\\r\\n    }, [isMounted, count, number]);\\r\\n}\\r\\n````","number":17417,"user":{"login":"cuongdevjs"},"state":"closed","created_at":"2019-11-21T05:26:12Z"},{"id":526372011,"title":"How does react browser extension detect if the page is running on react.js?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\nI tried to search but couldn\'t find a definitive answer to how does the react browser extension detect whether a page is using react.js or not?\\r\\n\\r\\nIs the react dev tool searching the javascript in the page for react.js function identifiers? If so, how does it work when a page is being served minified, because I thought minification changes function names etc. to something minified. Is the react dev tool comparing the Javascript AST with react.js standard AST?\\r\\n\\r\\nJust curious to learn how do the dev tools work to detect react.js?\\r\\n","number":17416,"user":{"login":"parrotcar00"},"state":"closed","created_at":"2019-11-21T05:23:29Z"},{"id":526363035,"title":"renderer.toTree missing state information with hooks","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI\'m using react-test-renderer. renderer.toTree() is not providing me with the state information of functional components that use the useState hook. I know the state information is available because renderer.root._fiber has a memoizedState property with the state data I need. Someone just needs to take the data from _fiber and put it in the render tree.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nconst React = require(\'react\')\\r\\nconst ReactTestRenderer = require(\'react-test-renderer\')\\r\\nfunction OneButton() {\\r\\n    let [counter, setCounter] = useState(42)\\r\\n    return React.createElement(\\"div\\", {}, counter)\\r\\n}\\r\\nlet renderer = ReactTestRenderer.create(React.createElement(OneButton))\\r\\nconsole.log(renderer.toTree()) // No state information\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI should see the state with a value of 42 somewhere in the standard output\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.12.0","number":17415,"user":{"login":"decodejacques"},"state":"open","created_at":"2019-11-21T04:49:47Z"},{"id":526329245,"title":"[Fresh] Fix an infinite loop in an edge case","body":"A good old mutation-while-iterating kind of bug. These maps and sets can be mutated during a commit, so we can\'t just `forEach` here. Otherwise we risk running into an infinite loop where processing each next item causes more items to be added to the list.\\r\\n\\r\\nAdded a regression test. Verified this fixes a problem on WWW.","number":17414,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-21T02:39:43Z"},{"id":526276180,"title":"SuspenseList gotcha with React.lazy","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nSuspense is still experimental, so it\'s neither \ud83d\ude43\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIt\'s best described via a code example in this codesandbox: https://codesandbox.io/s/react-suspenselist-problem-8g7c1\\r\\n\\r\\nHere\'s a summary:\\r\\n\\r\\nWhen \\"forwards\\" is used for the `revealOrder` of a SuspenseList, React does not even try to render components in suspense boundaries after the most \\"forward\\" suspense boundary. This should be fine, but it can be a problem when used with React.lazy because the dynamic import isn\'t started until the lazy component is rendered so adding a SuspenseList to an existing set of lazily loaded components results in a slower overall loading experience thanks to a waterfall effect.\\r\\n\\r\\nFor completeness I\'ll just add that this same thing applies to \\"backwards\\" as an option as well.\\r\\n\\r\\nI understand why SuspenseList doesn\'t bother rendering components in Suspense Boundaries until they\'re ready to be shown. It\'s because we should be firing requests for things before we try to render the components that need those resources. However, React.lazy is a bit of a special case because it doesn\'t suspend until it\'s rendered the first time and for the developer to fire that request eagerly requires extra work on the part of the developer (there\'s a comment in the code showing the workaround).\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nBecause React.lazy is a special case and people are likely to run into this gotcha a lot when implementing Suspense Lists around lazy components, I think something should be done for these to start loading the module eagerly without workarounds. I\'m not sure what to suggest to do about it though.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nVersion `0.0.0-experimental-b53ea6ca0` and I don\'t think this ever worked in a previous version.","number":17413,"user":{"login":"kentcdodds"},"state":"open","created_at":"2019-11-20T23:33:34Z"},{"id":526262919,"title":"Make HostComponent inexact","body":"We need HostComponent to be inexact so that Flow will let us add additional imperative methods to this in cases like TextInput. This change was already made in FBSource in D18458408 with sign off from @jbrown215. Landing this in the React repo so that future syncs don\'t have this difference. \\r\\n\\r\\n","number":17412,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-11-20T22:57:18Z"},{"id":526258128,"title":"useTransition improvements","body":"(I closed and and re-opened this as #17418)","number":17411,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-20T22:44:08Z"},{"id":525983964,"title":"Firefox (Developer Edition) React DevTools fails to show state when using useState hook","body":"in Chrome, when inspecting a component with useState hooks, one can view the current state key/values in the wrappedComponent object of the hooks section of Components React Devtools, inside of Unmount.\\r\\n\\r\\nWhen inspecting the same component in Firefox, all i see is wrappedComponent -> Unmount -> wrappedHook -> Effect. \\r\\n\\r\\nCan someone clarify why?\\r\\n\\r\\nScreenshots upon request! \\r\\n\\r\\nThanks!","number":17410,"user":{"login":"robjac"},"state":"closed","created_at":"2019-11-20T18:20:27Z"},{"id":525948376,"title":"Remove git url check from DevTools build process","body":"This check was really only useful so long as DevTools was living in a fork with an undetermined final location:\\r\\nhttps://github.com/facebook/react/blob/a7d07ff24d8d3d925ab45f5eb9be42a62a345dad/packages/react-devtools-extensions/utils.js#L11-L25\\r\\n\\r\\nNow that it has been merged into the main React repo, we could just hardcode that GitHub URL.\\r\\n\\r\\nThe check is causing Mozilla\'s test build to fail, since they are building from an export (not the Git repo).","number":17409,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-11-20T17:15:35Z"},{"id":525899958,"title":"Why include refs as a feature? -- seems broken and unnecessary","body":"\\r\\nRefs never seem to work, is this a broken feature?\\r\\n\\r\\nWhy not remove them and just let people use \\r\\ndocument.querySelector(\'#id\').action like normal people.\\r\\n\\r\\nalso, what does this mean? \\r\\n\\r\\n Function components cannot have refs. Did you mean to use React.forwardRef()?","number":17408,"user":{"login":"petervijeh"},"state":"closed","created_at":"2019-11-20T16:02:31Z"},{"id":525799421,"title":"pass forwardRef via cloneElement ","body":"*ref* param receives as `null` in `forwardRef` when using `cloneElement`,\\r\\n\\r\\nForm.js\\r\\n```import React from \\"react\\";\\r\\nimport Name from \\"./Name\\";\\r\\nimport Email from \\"./Email\\";\\r\\n\\r\\nimport RefForm from \\"./RefForm\\";\\r\\n\\r\\nclass SmallForm extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <RefForm>\\r\\n        <Name />\\r\\n        <Email />\\r\\n      </RefForm>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default SmallForm;\\r\\n```\\r\\n\\r\\nRefForm.js\\r\\n\\r\\n```\\r\\nimport React, { useRef } from \\"react\\";\\r\\n\\r\\nfunction RefForm(props) {\\r\\n  const setRefs = useRef(new Map()).current;\\r\\n  const { children } = props;\\r\\n  return (\\r\\n    <div>\\r\\n      {React.Children.map(children, child => {\\r\\n        return React.cloneElement(child, {\\r\\n          innerRef: node =>\\r\\n            node ? setRefs.delete(child.key) : setRefs.set(child.key, node)\\r\\n        });\\r\\n      })}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default RefForm;\\r\\n```\\r\\n\\r\\nName.js\\r\\n\\r\\n```\\r\\nimport React from \\"react\\";\\r\\n\\r\\nconst Name = React.forwardRef((props, ref) => {\\r\\n  console.log(\\"name--\\", ref);  // getting ref `null` here \\r\\n  return (\\r\\n    <div style={{ marginTop: \\"30px\\" }}>\\r\\n      <label>this is name</label>\\r\\n      <input name=\\"name\\" ref={props.innerRef} />\\r\\n    </div>\\r\\n  );\\r\\n});\\r\\n\\r\\nexport default Name;\\r\\n```\\r\\n\\r\\nEmail.js\\r\\n\\r\\n```\\r\\nimport React from \\"react\\";\\r\\n\\r\\nconst Email = React.forwardRef((props, ref) => {\\r\\n  console.log(\\"email--\\", ref);  // getting ref `null` here\\r\\n  return (\\r\\n    <div style={{ marginTop: \\"30px\\" }}>\\r\\n      <label>this is email</label>\\r\\n      <input name=\\"email\\" ref={props.innerRef} />\\r\\n    </div>\\r\\n  );\\r\\n});\\r\\n\\r\\nexport default Email;\\r\\n```\\r\\n\\r\\nindex.js\\r\\n```\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\nimport Form from \\"./Form\\";\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nfunction App() {\\r\\n  return <Form />;\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n```\\r\\n\\r\\nReproducible example :- https://codesandbox.io/s/forward-ref-cloneelement-1msjp (please check the console)\\r\\n","number":17407,"user":{"login":"varunsbala"},"state":"closed","created_at":"2019-11-20T13:20:33Z"},{"id":525786175,"title":"[Lib author question] using batched updates with support for different renderers (react-dom, react-native)","body":"Right now there is different way of batching updates in `react-dom` (`ReactDOM.unstable_batchedUpdates(() => { ... })` and eg. `react-native`.\\r\\n\\r\\nLet\'s say I\'m creating a library that can be used both on the web and in react-native. Let\'s say, I want to take advantage of using batched updates on both platforms.\\r\\n\\r\\nHowever, implementing batched updates works differently on each platform.\\r\\n\\r\\nOn DOM it\'s `ReactDOM.unstable_batchedUpdates(() => { ... })`\\r\\n\\r\\nOn RN it\'s a bit hacky but seems to work. I\'ve implemented it like\\r\\n\\r\\n```tsx\\r\\nfunction getBatchedUpdateFunction() {\\r\\n  try {\\r\\n    const renderer = __DEV__\\r\\n      ? require(\'react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev\')\\r\\n      : require(\'react-native/Libraries/Renderer/implementations/ReactNativeRenderer-prod\');\\r\\n\\r\\n    if (!renderer) {\\r\\n      return null;\\r\\n    }\\r\\n\\r\\n    if (!renderer.unstable_batchedUpdates) {\\r\\n      return null;\\r\\n    }\\r\\n\\r\\n    return renderer.unstable_batchedUpdates;\\r\\n  } catch (error) {\\r\\n    return null;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport function batchedUpdates(callback: () => void) {\\r\\n  const batchedUpdatesFunction = getBatchedUpdateFunction();\\r\\n\\r\\n  if (!batchedUpdatesFunction) {\\r\\n    // we\'re not able to call batch function. Let\'s fallback to call callback normally without batching\\r\\n    callback();\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  batchedUpdatesFunction(() => {\\r\\n    callback();\\r\\n  });\\r\\n}\\r\\n```\\r\\n\\r\\nI also have to check in runtime, what platform is used to call proper batch function type\\r\\n\\r\\nIs there any way to make it cleaner if I want to batch on any react-powered platform?\\r\\n\\r\\nI assume there might be many \'env-agnostic\', react based libs that use batching eg redux, mobx. Each of those should be usable on each react-based platform","number":17406,"user":{"login":"pie6k"},"state":"open","created_at":"2019-11-20T12:55:13Z"},{"id":525732085,"title":"Devtools: broken indentation in the components tree","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\na bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nItems in the components\' tree are rendered as a plain list\\r\\n\\r\\n![Screenshot 2019-11-20 at 13 58 42](https://user-images.githubusercontent.com/12268898/69233511-1697b200-0b9e-11ea-93d4-e1484195b295.png)\\r\\n![Screenshot 2019-11-20 at 14 05 35](https://user-images.githubusercontent.com/12268898/69233941-fa484500-0b9e-11ea-976d-35b65a0f9761.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nEach item has an indentation according to its depth in the tree\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact Developer Tools @ 4.2.0 (Chrome Extension)\\r\\nGoogle Chrome @ 78.0.3904.108\\r\\n","number":17405,"user":{"login":"keann"},"state":"closed","created_at":"2019-11-20T11:04:06Z"},{"id":525284693,"title":"ESLint exhaustive-deps rule should be more consistent about \'Ref\' values","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n*BUG* - or possibly a misunderstanding about `Ref`s and dependencies\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nEdit: Sandbox here, my pseudo below wasn\'t exactly accurate: https://codesandbox.io/s/patient-shadow-eswc6\\r\\n\\r\\n```\\r\\nexport const MyReactFunction = (props) => {\\r\\n    ...\\r\\n    const myRef= useRef(null);\\r\\n    ...\\r\\n    const myCallback = useCallback((args) => {\\r\\n        //...\\r\\n        if (myVal.current === 0) { .... }\\r\\n        if (props.otherRef.current == null) { ... }\\r\\n    }, []);\\r\\n    ...\\r\\n    myCallback(1);\\r\\n}\\r\\n```\\r\\nGives ESLint warning:\\r\\n> React Hook useCallback has missing dependencies: \'myRef\' and \'props.otherRef\'. Either include them or remove the dependency array.eslint(react-hooks/exhaustive-deps)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nUnless I am misunderstanding, there is no reason to include a `Ref` value in the dependency list. If I include a `Ref.current`, I get the message `Mutable values like \'myRef.current\' aren\'t valid dependencies because mutating them doesn\'t re-render the component.`\\r\\n\\r\\nSince passing in `myRef` as a dependency is meaningless, and passing in `myRef.current` also provides a warning, I would expect the exhaustive-deps warning to know to not care about `myRef` or any other `Ref` value in the scope in regards to missing dependencies.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nN/A","number":17404,"user":{"login":"AlexReff"},"state":"open","created_at":"2019-11-19T21:42:20Z"},{"id":525072940,"title":"Error: \\"Cannot read property \'length\' of undefined\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. removed a filter for <Suspense /> compponents\\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:155183)\\r\\n    at e.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:155590)\\r\\n    at dl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:312205)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\\r\\n\\r\\nComponent stack: in dl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17403,"user":{"login":"wix-fed-exam"},"state":"closed","created_at":"2019-11-19T15:13:54Z"},{"id":524922623,"title":"React Developer Tools Chrome Extension causes an error.","body":"Hi,\\r\\nI found a bug.\\r\\n\\r\\nMy project is using `Uppy` (https://uppy.io/).\\r\\nWhen I use `React Developer Tools` Chrome extension, my app is crashing.\\r\\nIf I disable the extension then my app works without crashing.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/30062357/69139166-eba85200-0afa-11ea-805c-ca3cceafda9f.png)\\r\\n \\r\\n![image](https://user-images.githubusercontent.com/30062357/69139406-62dde600-0afb-11ea-9d50-b6bc82426d9d.png)\\r\\n\\r\\n\\r\\nreact: 16.8.6\\r\\n@uppy: 0.30.4\\r\\n","number":17402,"user":{"login":"brave-merida"},"state":"closed","created_at":"2019-11-19T10:39:21Z"},{"id":524829328,"title":"useTransition does not wait for loading within a new Suspense","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug or clarification.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen `useTransition` renders a new Suspense component which wrap the pending resource, the UI is not suspended.\\r\\n\\r\\nReproduction: https://codesandbox.io/s/concurrent-react-nov-hfqee?fontsize=14&hidenavigation=1&theme=dark\\r\\n\\r\\nIn the provided codesandbox, the first two times you click the Next button the UI is suspended as expected.\\r\\n\\r\\nWhen you click for the third time, the UI no longer suspended and we can see the \\"Loading Page 3\\" text. My introspection of why this is happening is because a new `Suspense` component is rendered, causing the behavior.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`useTransition` should always suspend UI regardless if the new changes is wrapped in another `Suspense`.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`experimental`, specifically `0.0.0-experimental-b53ea6ca0`.\\r\\n","number":17401,"user":{"login":"malcolm-kee"},"state":"closed","created_at":"2019-11-19T07:37:19Z"},{"id":524759370,"title":"`text-align: justify` doesn\'t work in React","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n`text-align: justify` doesn\'t work\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n![Xnip2019-11-19_11-58-04](https://user-images.githubusercontent.com/8286053/69115557-eda2ee80-0ac3-11ea-945b-1028890c90f0.png)\\r\\n\\r\\nI checked the dom tree, they look exactly the same \\r\\n[rendered by normal js](https://codesandbox.io/s/charming-bassi-ejqic?fontsize=14&hidenavigation=1&theme=dark)\\r\\n[rendered by react](https://codesandbox.io/s/angry-williams-l7xt7?fontsize=14&hidenavigation=1&theme=dark)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nsecond `div` should align to the right\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.6.3\\r\\nChrome 78 / Firefox 70.0.1\\r\\nMacOs 10.15.1","number":17400,"user":{"login":"yuyichen"},"state":"closed","created_at":"2019-11-19T04:01:42Z"},{"id":524686675,"title":"In mobile browsers button onClick hadler fires multiple times. Desktop ones are fine","body":"\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI have quite simple React page with download buttons embedded:\\r\\n\\r\\n```\\r\\n<button\\r\\n  type=\'button\'\\r\\n  className=\'button\'\\r\\n  onClick={this._downloadArchive}\\r\\n  style={{width: \'100%\'}}\\r\\n  >\\r\\n   <div style={styles.archiveButton}>\\r\\n    <div>Download</div>\\r\\n    <div>{\'archive.zip\'}</div>\\r\\n    </div>\\r\\n</button>\\r\\n```\\r\\n\\r\\nAnd correspomding handler:\\r\\n```\\r\\n_downloadArchive = () => {\\r\\n  let filename = \'archive.zip\';\\r\\n  let url = \'/beta/archive32?filename=\' + filename + screenDetails;\\r\\n  window.open(url)\\r\\n};\\r\\n```\\r\\n\\r\\nIn desktop browsers it works with no issue, but in **all** mobile browsers tapping button causes  handler to be called multiple (3-4, depends on device and browser) times with 100-300ms delay between calls - I can see it in backend logs. \\r\\nMeanwhile mobile browser downloads the file only once.\\r\\nI ried to use onTouchEnd event (with detecting mobile client before) - result is the same\\r\\n\\r\\n**What is the expected behavior?**\\r\\nonClick handler is called once - as it should and as it is on desktop browsers\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\"react\\": \\"16.4.0\\",\\r\\nOS: Windows\\r\\nBrowsers; Chrome, Opera, CM Browser etc\\r\\n","number":17399,"user":{"login":"greenais"},"state":"open","created_at":"2019-11-18T23:46:08Z"},{"id":524639839,"title":"[Flight] Chunks API","body":"__This is a very early experiment. We just need something to play with.__\\r\\n\\r\\nThis is a new core API but it\'s not really meant to be used without Flight. Instead Flight will produce these \\"chunks\\" from its payload. The primary purpose of this in core is to ensure the reconciler can update the same component instance with new data.\\r\\n\\r\\nIt can be used without Flight by running it in the same environment and it works fine. That is a nice property because a) it means you can get started running this code in a client-only environment and debug in browser. b) it describes the semantics in a standalone way which is how the type system thinks about it, so it\'s nice to be able to think about it this way.\\r\\n\\r\\nThis implementation doesn\'t support Context. Exposing React\'s context wouldn\'t be the same semantics as with Flight so it\'s not super easy and requires more code to actually support Context in this mode. That\'s unfortunate.","number":17398,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-18T21:49:28Z"},{"id":524618129,"title":"Feature Request: being able to invoke statements on jsx events","body":"Its 2019 and react still doesnt have the ability to invoke statements via events\\r\\nangular:\\r\\n`(click)=\\"doSomething(param1, param2)\\"`\\r\\nvue:\\r\\n`v-on:click=doSomething(param1, param2)\\"`\\r\\nNATIVE HTML\\r\\n`onclick=\\"doSomething(param1, param2)\\"`\\r\\n\\r\\n\\r\\nand then we have react\\r\\n```\\r\\nonClick={()=>doSomething(param1, param2)}//which is not recommended by majority since this will create a new function every render\\r\\nonClick={someCallBackHereThatCallsdoSomethingInside}\\r\\n```\\r\\n\\r\\nit would be nice for react to support syntatic sugars like\\r\\n```\\r\\n(onClick)={doSomething(param1, param2)}\\r\\n^onClick={doSomething(param1, param2)}\\r\\nevent.OnClick={doSomething(param1, param2)}\\r\\n```\\r\\nor anything as long as it works","number":17397,"user":{"login":"arnotes"},"state":"closed","created_at":"2019-11-18T21:02:59Z"},{"id":524458415,"title":"Expose closures in function components","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature (I think)\\r\\n**What is the current behavior?**\\r\\nReact Hooks are pretty great. We are able to use function components for everything now which has been sweet \ud83e\udd1f\ud83c\udffb But back in the class days, if we wanted to test a function internal to a class component, we could simply pass our component to shallow or mount and dig into it using instance. For all the research I\'ve done, it doesn\'t seem possible to test functions inside of function components.\\r\\n\\r\\nWe are using jest as our unit testing framework with enzyme to handle DOM manipulation. I brought this up in an [issue](https://github.com/facebook/jest/issues/9152) to the jest team and they referred me to the enzyme team ([issue logged](https://github.com/airbnb/enzyme/issues/2287)) and I thought\'d I give here a try.\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI figure the best way to explain this is through an example. Fist I have an example of a class component with accompanying test\\r\\n```\\r\\n// Component definition\\r\\nclass MyComponent extends React.Component {\\r\\n...\\r\\n  foo(bar) {\\r\\n    // Some processing on bar that depends on state and imported libraries that don\'t make sense importing into a helper file\\r\\n    return fooBar;\\r\\n  }\\r\\n...\\r\\n}\\r\\n\\r\\n// Test\\r\\nit(\'should return fooBar\', () => {\\r\\n  const sut = shallow(<MyComponent />);\\r\\n  expect(sut.instance().foo(testValue)).toBe(fooBar);\\r\\n});\\r\\n```\\r\\nHere is an example of something I might expect if this were implemented (which is really similar to the above, but just for clarity sake I re-wrote it):\\r\\n```\\r\\n// Component definition\\r\\nconst MyComponent = (props) => {\\r\\n...\\r\\n  const foo = (bar) => {\\r\\n     // Some processing on bar that depends on state and imported libraries that don\'t make sense importing into a helper file\\r\\n    return fooBar;\\r\\n  }\\r\\n...\\r\\n}\\r\\n\\r\\n// Test\\r\\nit(\'should return fooBar\', () => {\\r\\n  const sut = shallow(<MyComponent />);\\r\\n  expect(sut.instance().foo(testValue)).toBe(fooBar);\\r\\n});\\r\\n```\\r\\nI understand that it is impossible to reference closures in JS, but is there some way that react might be engineered to expose functions in these situations for testing purposes?\\r\\n**What is the expected behavior?**\\r\\nThat I would be able to test functions internal to function components.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact vs 16.8","number":17395,"user":{"login":"andrewnottaviano"},"state":"closed","created_at":"2019-11-18T15:58:08Z"},{"id":524314597,"title":"[react-interactions] Rename Flare listeners prop to DEPRECATED_flareListeners","body":"This renames the `listeners` prop to `DEPRECATED_flareListeners`. This is for two reasons:\\r\\n\\r\\n- to discourage internal usage of this experimental API\\r\\n- to enable us to experiment with another event API that might make use of the `listeners` prop in the future","number":17394,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-18T11:46:02Z"},{"id":524225812,"title":"Bug: React doesn\'t warn about key|ref not a prop using defaultProps","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact warns about key|ref not being a prop:\\r\\n```\\r\\nWarning: Child: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)\\r\\n```\\r\\nHowever, when using `defaultProps` and _not_ providing a key|ref, the key|ref is used as a prop. Test:\\r\\n```javascript\\r\\nclass Child extends React.Component {\\r\\n  render() {\\r\\n    return <div> {this.props.key} </div>;\\r\\n  }\\r\\n}\\r\\nChild.defaultProps = {\\r\\n  key: \\"example\\"\\r\\n};\\r\\nclass Parent extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <Child /> // <<<<< doesn\'t warn\\r\\n        <Child key=\\"1\\" /> // <<<<< warns\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\nThis happens because: \\r\\nhttps://github.com/facebook/react/blob/3ad076472ce9108b9b8a6a6fe039244b74a34392/packages/react/src/ReactElement.js#L362-L384\\r\\nassigning `defaultProps` doesn\'t take into account `RESERVED_PROPS`, so this condition `if (key || ref) {...` can be `false`\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIf `key|ref` is not a prop, it shouldn\'t map `defaultProps` reserved names to `props`\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8.6","number":17393,"user":{"login":"eddyw"},"state":"open","created_at":"2019-11-18T09:01:05Z"},{"id":524120200,"title":"hooks update arrar view not updated","body":"```\\r\\nimport React,{useState} from \'react\';\\r\\n\\r\\nfunction App() {\\r\\n  const initBannerList = [\\r\\n      {type: \'1\', title: \'title1\',},\\r\\n    {type: \'2\', title: \'title2\',},\\r\\n  ];\\r\\n  const [bannerList, setBannerList] = useState(initBannerList);\\r\\n\\r\\n  const getItemWH = function(item, index, ) {\\r\\n      item.title = `${item.title}-change`;\\r\\n      initBannerList.splice(index, 1, item);\\r\\n      setBannerList(initBannerList);\\r\\n  }\\r\\n  return (\\r\\n    <div>\\r\\n        {bannerList.map((item, index) => {\\r\\n            return <div key={index} onClick={()=>getItemWH(item, index)}>{item.title}</div>\\r\\n        })}\\r\\n        \\r\\n    </div> \\r\\n  );\\r\\n}\\r\\n```\\r\\nIn this example, the view title doesn\'t change when I click","number":17392,"user":{"login":"zhuSass"},"state":"closed","created_at":"2019-11-18T03:56:52Z"},{"id":524031693,"title":"Make Warning for Uncontrolled/Controlled Inputs Clearer","body":"Fixes #17069. To make the warnings for switching between uncontrolled and controlled inputs clearer. Uses language that was suggested by @markerikson in https://github.com/facebook/react/issues/17069\\r\\n","number":17390,"user":{"login":"codingnspace"},"state":"open","created_at":"2019-11-17T19:28:53Z"},{"id":523935061,"title":"Devtools resize Component State/Props pane","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI would like to request a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nResizing the state/props pane in Component Tab\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAllow resizing pane\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nDevtools 4.2.0 and Chrome Version 78.0.3904.97 \\r\\n\\r\\n![image](https://user-images.githubusercontent.com/20182536/69003149-de088780-08c2-11ea-9f32-391faee6a557.png)\\r\\n","number":17389,"user":{"login":"codercodingthecode"},"state":"open","created_at":"2019-11-17T04:46:47Z"},{"id":523934195,"title":"UNSAFE_componentWillUpdate doesn\'t triggers in test ","body":"I\'m using a Swiper which invokes props.onIndexChange when a swipe takes place or its `ScrollTo(index)` is called. Internally, scrollTo scrolls the ScrollView and updates component\'s state which further calls `UNSAFE_componentWillUpdate` and inside this` props.onIndexChange` gets called. \\r\\n\\r\\nI wrapped this swiper along with a button in a component\\r\\n\\r\\n```\\r\\nconst SwiperWithButton = props => (\\r\\n  <View>\\r\\n     <Swiper ref={c=>{this.swiper=c} onIndexChange={()=>console.log(\'changed\')}>...</Swiper>\\r\\n     <Button onPress={()=>{this.swiper.scrollTo(2)/>\\r\\n)\\r\\n```\\r\\nWhen I run this in emulator, everything works. When I hit the button, swiper slides, lifecycle gets called which triggers onIndexChange and I see the log.\\r\\n\\r\\nI wanted to test this component using renderer. However, when I fire button\'s press event, `onIndexChange` isn\'t invoked. Is it because that it is triggered from inside a lifecycle event? Is there still a way to make it work?\\r\\n","number":17388,"user":{"login":"deepakaggarwal7"},"state":"closed","created_at":"2019-11-17T04:35:05Z"},{"id":523888748,"title":"Error: \\"Cannot read property \'toFixed\' of null\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Open dev tools and go to components extension\\r\\n2. Start searching for a component `ImageControl`\\r\\n3. As soon as I get close to said components name, around `ImageC` this error is thrown. I\'m thinking this might have something to do with our own local components, but not 100% sure. Figured I would report this just in case it isn\'t only affecting me.\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at Qa (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278839)\\r\\n    at Ka (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278585)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103717)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3691)\\r\\n    at Qo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45431)\\r\\n\\r\\nComponent stack: in Ka\\r\\n    in ri\\r\\n    in ti\\r\\n    in div\\r\\n    in si\\r\\n    in div\\r\\n    in li\\r\\n    in Suspense\\r\\n    in Wa\\r\\n    in div\\r\\n    in div\\r\\n    in Jo\\r\\n    in Xr\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17387,"user":{"login":"zachbharris"},"state":"closed","created_at":"2019-11-16T19:56:25Z"},{"id":523851078,"title":"Feature Request: Soft Component","body":"```\\r\\nimport React, {useState} from \'react\';\\r\\nimport ReactDOM from \'react-dom\';\\r\\n\\r\\nfunction PageLayout({title, children}) {\\r\\n  return <div>\\r\\n    <h1>{title}</h1>\\r\\n    <input type=\\"text\\"/>\\r\\n    {children}\\r\\n  </div>;\\r\\n}\\r\\nfunction Page2({setPage}) {\\r\\n  return <PageLayout title=\\"Page2\\">\\r\\n    <button onClick={() => {setPage(() => Page1);}}>Test</button>\\r\\n  </PageLayout>\\r\\n}\\r\\nfunction Page1({setPage}) {\\r\\n  return <PageLayout title=\\"Page1\\">\\r\\n    <button onClick={() => {setPage(() => Page2);}}>Test</button>\\r\\n  </PageLayout>\\r\\n}\\r\\nfunction App() {\\r\\n  let [Page, setPage] = useState(() => Page1);\\r\\n  return <Page setPage={setPage}/>; \\r\\n}\\r\\nReactDOM.render(<App />, document.getElementById(\'app\'));\\r\\n```\\r\\n\\r\\nhttps://codesandbox.io/embed/serene-browser-tehj4?fontsize=14\\r\\n\\r\\nThe above code is most intuitive pattern for build multiple page web app. -- Don\'t mind the setPage. Just focus Page component returns PageLayout instance.\\r\\n\\r\\nBut react\'s diff algorithm is not optimized for that pattern.  If you click \\"Test\\" button. The text you inputed in input will lost.\\r\\n\\r\\nSo I proposal \\"Soft Component\\" concept. Two soft component will be treated as same component in diff algorithm. In the example, we change Page1 and Page2 to soft components. Thus solve the problem I shown above.","number":17386,"user":{"login":"hackwaly"},"state":"open","created_at":"2019-11-16T14:23:06Z"},{"id":523793950,"title":"Update eslint rule exhaustive deps to use new suggestions feature","body":"This pull request closes #16313\\r\\n\\r\\nAssuming that https://github.com/eslint/eslint/pull/12384 moves forward and adds the suggestions feature to `eslint`, this pull request updates the `react-hooks/exhaustive-deps` `eslint` rule to use the suggestions feature. This will result in the rule no-longer modifying code functionality when running `eslint`\'s autofixer while providing a new method to explicitly accept code suggestions for the rule.\\r\\n\\r\\nFor more details see: #16313","number":17385,"user":{"login":"wdoug"},"state":"open","created_at":"2019-11-16T05:11:53Z"},{"id":523789491,"title":"setState hook freezes browser with large Arrow table","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nBrowser crashes when using `setData` hook with large [apache-arrow](https://arrow.apache.org/docs/js/) Table. This behavior is not observed when parsing and fetching and deserialized a`.json` file of the same data. The arrow Table is fetched and built, but then crashes the browser when setting state.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\nSteps to reproduce:\\r\\n```bash\\r\\n> npx create-react-app demo\\r\\n> cd demo\\r\\n> npm i apache-arrow@0.15.1\\r\\n```\\r\\n\\r\\nReplace App.js with:\\r\\n```javascript\\r\\nimport React, { useState, useEffect } from \'react\';\\r\\nimport { Table } from \'apache-arrow\';\\r\\n\\r\\nconst ARROW_DATA_URL = \\r\\n      \\"https://gist.githubusercontent.com/manzt/\\" +\\r\\n      \\"ad8c2fe8063b03461b5480ba45f292d6/raw/\\" +\\r\\n      \\"ef89111fe3c352913f277397150d6226e344b29d/\\" +\\r\\n      \\"linnarsson.molecules.arrow\\";\\r\\n\\r\\nconst App = () => {\\r\\n  const [data, setData] = useState({});\\r\\n\\r\\n  async function fetchArrow() {\\r\\n    const buffer = await fetch(ARROW_DATA_URL).then(res => res.arrayBuffer());\\r\\n    const data = Table.from([new Uint8Array(buffer)]);\\r\\n    console.log(data);\\r\\n    setData(data);\\r\\n  }\\r\\n\\r\\n  useEffect(() => {\\r\\n    fetchArrow();\\r\\n  },[]);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <p>Testing Arrow Loader</p>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\nexport default App;\\r\\n\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe state should be updated to Table object.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n```\\r\\nreact: 16.11.0\\r\\nOS: Mac Catalina\\r\\nbrowsers: Firefox, Chrome, Safari\\r\\n```\\r\\n","number":17384,"user":{"login":"manzt"},"state":"closed","created_at":"2019-11-16T04:25:36Z"},{"id":523771432,"title":"[react-test-renderer] Silence error boundary console logs","body":"to: @trueadm @acdlite @bvaughn \\r\\ncc: @mpeyper\\r\\n\\r\\nSolves https://github.com/facebook/react/issues/15520\\r\\n\\r\\nBasically, when an error is thrown and an error boundary exists, `react-test-renderer` will *always* log the \\"The above error occurred in the component\\" message with `console.error`. There\'s currently no way to disable or hide it.\\r\\n\\r\\nThis PR makes a change (using forks) that entirely silences that log if an error boundary catches it. I\'m unable to think of any situation where this log is desirable.\\r\\n\\r\\nWould love to avoid this current hack: https://github.com/milesj/rut/blob/master/packages/rut/src/internals/patch.ts","number":17383,"user":{"login":"milesj"},"state":"open","created_at":"2019-11-16T01:48:49Z"},{"id":523745457,"title":"[Bugfix] Pending state is always user-blocking","body":"Fixes a bug where `isPending` is only set to `true` if `startTransition` is called from inside an input event. That\'s usually the case, but not always.\\r\\n\\r\\nNow it works regardless of where you call it.\\r\\n\\r\\nFixes #17272","number":17382,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-15T23:28:54Z"},{"id":523731196,"title":" [eslint-plugin-react-hooks] refine warning about accessing .current in cleanup effects","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\ncurrently when you access `.current` in the cleanup effect you\'ll get a warning if ESLint didn\'t find an assignment to `.current`.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIdeally the linter can check if the `useRef` call sets an usable initial value.\\r\\n\\r\\n```javascript\\r\\nfunction MyComponent() {\\r\\n  const refOne = React.useRef({});\\r\\n  const refTwo = React.useRef(null);\\r\\n  \\r\\n  React.useEffect(() => {\\r\\n    refOne.current.someProperty = true;\\r\\n    return function cleanup() {\\r\\n      refOne.current.somePropty; // this is cool\\r\\n      refTwo.current.innerHTML; // this maybe not\\r\\n    }\\r\\n  }, []);\\r\\n  return <div ref={refTwo} />;\\r\\n}\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\ncurrent version in master\\r\\n","number":17381,"user":{"login":"juangl"},"state":"open","created_at":"2019-11-15T22:52:05Z"},{"id":523722200,"title":"Update Fixtures to use new APIs","body":"Also renamed unstable-async to concurrent.","number":17380,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-15T22:30:53Z"},{"id":523707542,"title":"Add Webpack as devDependency","body":"Follow up to https://github.com/facebook/react/pull/17372\\r\\n\\r\\nThis is now used by the Flight package so it needs to be installed as a peer.\\r\\n\\r\\n","number":17379,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-15T21:54:15Z"},{"id":523600371,"title":"change aria-label to ariaLabel","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n*feature*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`aria-label` for `input` is not camel cased like everything else\\r\\n\\r\\nIf would be nice if when you create an object for props like\\r\\n\\r\\n```ts\\r\\nconst value = myval\\r\\nconst onChange = e => setVal(e.target.value)\\r\\nconst ariaLabel = \\"My Label\\"\\r\\nreturn {\\r\\n  onChange,\\r\\n  ariaLabel,\\r\\n  value,\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`ariaLabel` to be camel cased\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nall browsers/versions of react\\r\\n","number":17378,"user":{"login":"zwhitchcox"},"state":"open","created_at":"2019-11-15T17:36:42Z"},{"id":523512739,"title":"`npm install` failing","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\nnpm ERR! code ETARGET\\r\\nnpm ERR! notarget No matching version found for scheduler@^0.18.0\\r\\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\\r\\nnpm ERR! notarget a package version that doesn\'t exist.\\r\\nnpm ERR! notarget \\r\\nnpm ERR! notarget It was specified as a dependency of \'react-dom\'\\r\\nnpm ERR! notarget \\r\\n\\r\\n**What is the expected behavior?**\\r\\n`npm install` not failing\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nSee above.","number":17377,"user":{"login":"panth0r"},"state":"closed","created_at":"2019-11-15T14:49:59Z"},{"id":523434633,"title":"Docs: useCallback vs useRef misguidance.","body":"Moved to: https://github.com/reactjs/reactjs.org/issues/2570","number":17376,"user":{"login":"Izhaki"},"state":"closed","created_at":"2019-11-15T12:09:17Z"},{"id":523429028,"title":"[react-interactions] FocusWithin beforeblur propagation fix","body":"When we encounter the `beforeblur` event in the FocusWithin event responder, we should allow propagation if that responder doesn\'t explicitly handle the event.","number":17375,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-15T11:56:37Z"},{"id":523367425,"title":"[Question] Best Practices to uncontrolled component","body":"I have some doubts. When I am writing components with React, I didn\'t know if this was reasonable.\\r\\nThe following is my case.\\r\\n\\r\\nI want to write a form component that internally uses `State`  to store the current values, and has some validation methods. It doesn\'t need to be coupled or linked to the outside, but only returns the current result when I need to get the values.\\r\\n\\r\\nThe above functions can be achieved using both controlled and uncontrolled components.\\r\\nI can implement a controlled component by using Props to specify the current value and pass the \\r\\nfunction of updating the value.\\r\\nAnother method is to implement getValue function inside the component. When externally needed, use ref to call the getValue function of the component to implement uncontrolled components.\\r\\n\\r\\nI think the second method is what I want.\\r\\nThe first method requires external components to control the state inside the component, which I think will destroy the cohesion of the component. For the caller, I don\'t care what the internal implementation of the component is. I just want to get the current state by  some interfaces when I need it, and if the component has any internal updates it won\'t affect the external call. I think such a component is perfect.\\r\\n\\r\\nI can use `ref`  to implement this design, but using `hooks`  can\'t call methods inside the component via ref.\\r\\n\\r\\nSo, can\'t hooks be used like this?\\r\\nOr is there a better design and best practices?\\r\\n\\r\\nAs the picture shows\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/24784430/68933687-28f5a280-07d0-11ea-8485-d26d4bb01592.png)\\r\\n\\r\\n\\r\\n","number":17374,"user":{"login":"garygao12580"},"state":"closed","created_at":"2019-11-15T09:50:39Z"},{"id":523344774,"title":"useLayoutEffect makes startTransition skip timeout ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nPossible bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI am using the router implemented in the relay-examples issue-tracker(https://github.com/relayjs/relay-examples/tree/master/issue-tracker/src/routing) and when transitioning from routes, startTransition works fine. However, on one page I am using React.useLayoutEffect and when I am transitioning away from that page. startTransition skips the timeout and immediately goes to the next page. Changing the useLayoutEffect to useEffect fixes this problem.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI would expect useLayoutEffect to work the same as useEffect\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nGoogle chrome 78, max osx, react experimental\\r\\n","number":17373,"user":{"login":"jihlstrom"},"state":"open","created_at":"2019-11-15T09:06:55Z"},{"id":523304052,"title":"[Flight] Move Flight DOM to a Webpack Specific Package","body":"We\'ll have Webpack specific coupling so we need to ensure that it can be versioned separately from various Webpack versions. We\'ll also have builds for other bundlers in the future.\\r\\n\\r\\nThere\'s a matrix of configurations that include the server environment (node vs browser streams), client environment (browser vs RN), format (DOM vs RN), bundler (Webpack, Parcel, Rollup...) and possibly others. Each yielding a possible new build.\\r\\n\\r\\nIn practice, we only use a few of those combinations to create optimal builds.\\r\\n\\r\\nTechnically, the server doesn\'t have to be Webpack specific if the Babel transform is, but it might be good to have the transform be agnostic. E.g. it allows for the Node env and Webpack compile in parallel. So therefore I think it\'s better that the transform is agnostic and then we replace it with bundle meta data at runtime using a Webpack specific server.","number":17372,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-15T07:31:12Z"},{"id":523186413,"title":"[react-interactions] Fix unattached fiber bug","body":"When we fire `dispatchDetachedBlur` the target node has already been removed from the fiber tree so trying to attach its fiber will result in a detached fiber being passed around. Instead we should pass `null` so this becomes a root event instead \u2013 which resolves the error.","number":17371,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-15T00:35:28Z"},{"id":523152515,"title":"Changelog for 16.12","body":"## 16.12.0 (November 14, 2019)\\r\\n\\r\\n### React DOM\\r\\n\\r\\n* Fix passive effects (`useEffect`) not being fired in a multi-root app. [@acdlite](https://github.com/acdlite) in [#17347](https://github.com/facebook/react/pull/17347)\\r\\n\\r\\n### React IS\\r\\n\\r\\n* Fix `lazy` and `memo` types considered elements instead of components [@bvaughn](https://github.com/bvaughn) in [#17278](https://github.com/facebook/react/pull/17278)\\r\\n","number":17370,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-11-14T22:57:16Z"},{"id":523116136,"title":"Added unstable_do_not_use_getDOMNodes to Suspense boundaries","body":"Added ability to get child DOM nodes from suspense boundaries after the children of a suspense boundary unsuspends or during mount if children do not suspend","number":17369,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-11-14T21:31:58Z"},{"id":523025892,"title":"[Fast Refresh] Fix for intentional unmounts after an error","body":"## Overview\\r\\n\\r\\nThis diff fixes an issue in Fast Refresh. When unmounting a root while there is an error, we would retry rendering after the errors are fixed. In React Native this means rendering to a host view that doesn\'t exist, causing a redbox. The fix is to clear the failedRoot after the error is fixed, even and especially if the component is unmounted.","number":17368,"user":{"login":"rickhanlonii"},"state":"closed","created_at":"2019-11-14T18:19:48Z"},{"id":522918688,"title":"[react-interactions] additional check to avoid middle clicks triggering press","body":"Middle clicks in Chrome/Firefox on Mac using a touchpad + BetterTouchTool tap gesture trigger a press, causing navigation when this happens on links (in addition to opening links in new tabs).\\r\\n\\r\\nT57092269 contains more information and videos of fix.\\r\\n\\r\\nI\'m not 100% sure if my edits to the comment make sense.\\r\\n\\r\\nLooking at the native event for pointer up and down, buttons === 0 and button === 1 when this happens. We covered for buttons === 4 in pointer up, but it looks like these types of middle clicks look slightly different. According to the [pointer events spec, button === 1 means it\'s a middle click](https://www.w3.org/TR/pointerevents/#the-button-property), so we added this quick check to avoid triggering press on middle clicks.\\r\\n\\r\\nI\'d be happy to make more changes. Before this the intention was to keep middle clicks around and check for buttons === 4 in pointer up to discard presses there. An alternative to this change could be checking button there instead (as button is still 1  during pointer up). Or, we ignore button === 1 and buttons >= 4 in pointer down and can then remove the 4 check in pointer up completely.","number":17367,"user":{"login":"Ambroos"},"state":"closed","created_at":"2019-11-14T15:07:44Z"},{"id":522911819,"title":"[eslint-plugin-react-hooks] support useState usage without destructuring","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nfeature (or bug, I don\'t know really)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThis should be supported:\\r\\n```js\\r\\nvar state = useState(\'\')\\r\\nvar stateValue = state[0]\\r\\nvar setStateValue = state[1]\\r\\nuseEffect(function() {\\r\\n  setStateValue(\'\')\\r\\n}, [])\\r\\n```\\r\\n\\r\\n**What is the current behavior?**\\r\\neslint-plugin-react-hooks suggests adding \'setStateValue\' as dependency\\r\\n\\r\\n**Which version of eslint-plugin-react-hooks is affected?**\\r\\nv2.2.0","number":17366,"user":{"login":"smashercosmo"},"state":"closed","created_at":"2019-11-14T14:56:39Z"},{"id":522862467,"title":"[react-interactions] Enable event system before dispatching blur","body":"We should really call `dispatchDetachedBlur` after we re-enable the event system again, otherwise we might have downstream problems when logic is handled in this phase.","number":17365,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-14T13:33:46Z"},{"id":522804114,"title":"[react-interactions] Follow up active element blur logic","body":"This PR is a follow up, applying the comments @necolas left on https://github.com/facebook/react/pull/17354 after the PR merged. These changes make a lot of sense and also reduce code size a bit!","number":17364,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-14T11:41:16Z"},{"id":522734282,"title":"Devtools: higlight updated items in Components tree","body":"*feature request*\\r\\n\\r\\nIs it possible to higlight updated items in Components tree as well?","number":17363,"user":{"login":"syabro"},"state":"open","created_at":"2019-11-14T09:37:40Z"},{"id":522702050,"title":"Update Prettier parser name","body":"According to [Prettier\'s parser options](https://prettier.io/docs/en/options.html#parser), \\"babylon\\" was changed to \\"babel\\":\\r\\n\\r\\n> \\"babel\\" (via @babel/parser) Named \\"babylon\\" until v1.16.0\\r\\n\\r\\nSo I just updated the name.","number":17362,"user":{"login":"lewislbr"},"state":"open","created_at":"2019-11-14T08:34:34Z"},{"id":522660205,"title":"react devtools version 3 stops immediately.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nreport a bug\\r\\n**What is the current behavior?**\\r\\nreact-devtools  stops immediately\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nnpm install -g react-devtools@^3\\r\\nreact-devtools\\r\\n**What is the expected behavior?**\\r\\nIt needs to open devtools. I am using it for react native which requires version 3.\\r\\n","number":17361,"user":{"login":"a-c-sreedhar-reddy"},"state":"closed","created_at":"2019-11-14T06:47:03Z"},{"id":522590455,"title":"Suspense data fetch is made without component being mounted","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nNOTE: This regards Suspense and Concurrent Mode.\\r\\nMy `MainComponent` conditionally renders the `SuspenseComponent`, in which a sampleFetch would be made. By default, the `MainComponent` does not render the `SuspenseComponent`, however, it appears that the fetch is being made anyways.\\r\\n\\r\\n*index.tsx:*\\r\\n```js\\r\\nimport \'babel-polyfill\';\\r\\nimport * as React from \'react\';\\r\\nimport { createRoot } from \'react-dom\';\\r\\nimport fakeApi from \'./fakeApi\';\\r\\n\\r\\nconst SampleComponent: React.FC = () => {\\r\\n  fakeApi.sampleFetch.read();\\r\\n  return <h1>This is the application</h1>;\\r\\n};\\r\\n\\r\\nconst SuspenseComponent: React.FC = () => (\\r\\n  <React.Suspense fallback={<h3>Loading...</h3>}>\\r\\n    <SampleComponent />\\r\\n  </React.Suspense>\\r\\n);\\r\\n\\r\\nconst MainComponent: React.FC = () => {\\r\\n  const [sampleState, setSampleState] = React.useState(false);\\r\\n  if (sampleState) {\\r\\n    return <SuspenseComponent />;\\r\\n  }\\r\\n  return <h1>Application has not yet been loaded</h1>;\\r\\n};\\r\\n\\r\\ncreateRoot(document.getElementById(\'app\')).render(<MainComponent />);\\r\\n```\\r\\n\\r\\n*fakeApi.ts:*\\r\\n```js\\r\\ninterface Data {\\r\\n  data: any;\\r\\n}\\r\\n\\r\\ninterface Wrapper {\\r\\n  read(): Data;\\r\\n}\\r\\n\\r\\nconst wrapPromise = (promise: Promise<Data>): Wrapper => {\\r\\n  let status = \'pending\';\\r\\n  let result: object;\\r\\n  const suspender = promise.then(\\r\\n    (r) => {\\r\\n      status = \'success\';\\r\\n      result = r;\\r\\n    },\\r\\n    (e) => {\\r\\n      status = \'error\';\\r\\n      result = e;\\r\\n    },\\r\\n  );\\r\\n  return {\\r\\n    // @ts-ignore\\r\\n    // eslint-disable-next-line consistent-return\\r\\n    read() {\\r\\n      if (status === \'pending\') {\\r\\n        throw suspender;\\r\\n      } else if (status === \'error\') {\\r\\n        throw result;\\r\\n      } else if (status === \'success\') {\\r\\n        return result;\\r\\n      }\\r\\n    },\\r\\n  };\\r\\n};\\r\\n\\r\\nconst sampleFetch = (): Promise<Data> => new Promise((resolve) => {\\r\\n  console.log(\'this is a sample fetch!\');\\r\\n});\\r\\n\\r\\nconst fakeApi = {\\r\\n  sampleFetch: wrapPromise(sampleFetch()),\\r\\n};\\r\\n\\r\\nexport default fakeApi;\\r\\n```\\r\\n\\r\\n*Screenshot of result:*\\r\\n\\r\\n![screenshot](https://i.imgur.com/d5YNfku.png)\\r\\n\\r\\n**Steps to reproduce**\\r\\n1. Go to [this repo / branch](https://github.com/jimmy-e/mybord/tree/initialize_debugging)\\r\\n2. Run `yarn`.\\r\\n3. Run `yarn build:dev`.\\r\\n4. Run `yarn start`.\\r\\n5. Open up the browser to `http://localhost:8080/` and inspect the console.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe fetch should not be made.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n*package.json:*\\r\\n```\\r\\n    ...\\r\\n    \\"react\\": \\"^0.0.0-experimental-38dd17ab9\\",\\r\\n    \\"react-dom\\": \\"^0.0.0-experimental-38dd17ab9\\",\\r\\n```\\r\\n","number":17360,"user":{"login":"jimmy-e"},"state":"closed","created_at":"2019-11-14T02:49:49Z"},{"id":522586844,"title":"Does anyone like modelizing state in components?","body":"With three years\' practices of REACT, I feel it\'s very verbose to use plain object or elementary value as state in components. Everytime the state needs to be updated, I must spread the whole old state and add a partial state which is the updates. Every operation for state must be defined somewhere else. \\r\\n\\r\\nNow I like designing a class first for the state shape and then put all the operations in. For component\'s updating, I just assign a new value to the property or call the method on the instance and call `setState` with an empty object. \\r\\n\\r\\nThis is much more clear. \\r\\n\\r\\nHow do you think of this idea? ","number":17359,"user":{"login":"zxh19890103"},"state":"closed","created_at":"2019-11-14T02:36:22Z"},{"id":522535293,"title":"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.","body":"Hi, I am trying to use the control https://github.com/crubier/react-graph-vis and I followed the below steps to add it to my project.\\r\\n\\r\\nyarn add react-graph-vis\\r\\n\\r\\nCreated a new file called networkGraph.tsx and add the code below\\r\\n\\r\\nimport * as React from \\"react\\";\\r\\nconst Graph = require(\\"react-graph-vis\\");\\r\\n\\r\\ninterface State {\\r\\n}\\r\\n\\r\\nexport interface Props {\\r\\n}\\r\\n\\r\\nexport class NetworkGraph extends React.Component<Props, State> {\\r\\n  constructor(props: any) {\\r\\n    super(props);\\r\\n    this.state = {};\\r\\n  }\\r\\n\\r\\n  public render(): JSX.Element | JSX.Element[] {\\r\\n    const graph = {\\r\\n      nodes: [\\r\\n        { id: 1, label: \\"Node 1\\", title: \\"node 1 tootip text\\" },\\r\\n        { id: 2, label: \\"Node 2\\", title: \\"node 2 tootip text\\" },\\r\\n        { id: 3, label: \\"Node 3\\", title: \\"node 3 tootip text\\" },\\r\\n        { id: 4, label: \\"Node 4\\", title: \\"node 4 tootip text\\" },\\r\\n        { id: 5, label: \\"Node 5\\", title: \\"node 5 tootip text\\" }\\r\\n      ],\\r\\n      edges: [\\r\\n        { from: 1, to: 2 },\\r\\n        { from: 1, to: 3 },\\r\\n        { from: 2, to: 4 },\\r\\n        { from: 2, to: 5 }\\r\\n      ]\\r\\n    };\\r\\n\\r\\n    const options = {\\r\\n      layout: {\\r\\n        hierarchical: true\\r\\n      },\\r\\n      edges: {\\r\\n        color: \\"#000000\\"\\r\\n      }\\r\\n    };\\r\\n\\r\\n    const events = {\\r\\n      select(event: any): void {  \\r\\n        const { nodes, edges } = event;\\r\\n        console.log(\\"Selected nodes:\\");\\r\\n        console.log(nodes);\\r\\n        console.log(\\"Selected edges:\\");\\r\\n        console.log(edges);\\r\\n      }\\r\\n    };\\r\\n    const component = (\\r\\n    <Graph\\r\\n      graph={graph}\\r\\n      options={options}  \\r\\n      events={events}\\r\\n      style={{ height: \\"640px\\" }} \\r\\n    />\\r\\n    );\\r\\n    \\r\\n    console.log(component);\\r\\n    return (\\r\\n      <div \\r\\n        { component }\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default NetworkGraph;\\r\\n\\r\\nAfter that I tried using the above component like below in another file.\\r\\n\\r\\nimport NetworkGraph from \\"./networkGraph\\";\\r\\n\\r\\n<div>\\r\\n            <NetworkGraph />\\r\\n          </div>\\r\\n\\r\\nAfter this I ran build and then tried to check the result and I got the error\\r\\n\\r\\nconsole.js:35 Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\\r\\n\\r\\nCheck the render method of `NetworkGraph`.\\r\\n\\r\\nCan you please help me fix this?\\r\\n\\r\\n\\r\\n","number":17358,"user":{"login":"BalakrishnanKumaravel"},"state":"closed","created_at":"2019-11-13T23:37:11Z"},{"id":522498619,"title":"getDerivedStateFromError is not called until all children have finished rendering","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf I have an array of children that each throw an error, my error boundary isn\'t called until all children have finished rendering. \\r\\n\\r\\nIn my example there are 3 child components that cause an error, the error is logged to the console 3 times before getDerivedStateFromError is called:\\r\\n\\r\\n![Screen Shot 2019-11-13 at 3 58 24 PM](https://user-images.githubusercontent.com/4808898/68808144-c0bb8b00-062e-11ea-9de3-b233d282bb78.png)\\r\\n\\r\\n\\r\\n\\r\\nSee example: https://codesandbox.io/s/heuristic-cache-y8h5d\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI\'d expect the first child error that is thrown to trigger my error boundary in the parent and no other children should be rendered. I understand that I should be using nested error boundaries where possible but this can be tedious. The current behavior isn\'t really an issue until you have an error in something like a spreadsheet cell component, where there could be hundreds or thousands of errors depending on the amount of data. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.11, also happens in 16.8.6\\r\\nAll browsers/all OS\\r\\n","number":17357,"user":{"login":"sh3nan1gans"},"state":"open","created_at":"2019-11-13T22:02:41Z"},{"id":522446729,"title":"Memoized child of Suspense component doesn\'t update when Context updates.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug (I think?)\\r\\n\\r\\n**What is the current behavior?**\\r\\n```javascript\\r\\nconst [value, setValue] = useState(\\"default\\");\\r\\nreturn (\\r\\n  <div className=\\"App\\">\\r\\n    <input value={value} onChange={e => setValue(e.target.value)} />\\r\\n    <div>\\r\\n      <Value.Provider value={value}>\\r\\n        <Suspense fallback={<div>loading</div>}>\\r\\n          <MemoizedChild />\\r\\n         </Suspense>\\r\\n       </Value.Provider>\\r\\n     </div>\\r\\n  </div>\\r\\n)\\r\\n```\\r\\n\\r\\nWhen using a memoized functional component (`MemoizedChild` in above example) in conjunction with `Context` as a child of a `React.Suspense` component, there seems to be a bug in which `MemoizedChild` does not update when the context it uses changes. For the full example, see my codesandbox below.\\r\\n\\r\\nIn the codesandbox, if you change the value of the input, the new value is provided to the context which causes the hook used in `MemoizedChild` (`useValue`) to throw a promise. This flips `Suspense` to the fallback state and when the promise resolves `MemoizedChild`\'s state is not updated with the proper context value because (I\'m assuming) the memoized value of `MemoizedChild` is the one that contained the previous context value and technically no props have changed, so that makes sense why it wouldn\'t have updated. However, this seems like it would be unexpected behavior.\\r\\n\\r\\nhttps://codesandbox.io/s/react-suspense-maybe-bug-sznbk\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI would expect that `MemoizedChild` would be re-rendered with the new provided value.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI\'m assuming all of them that contain Suspense and memo. So, since 16.8?","number":17356,"user":{"login":"jcarroll2007"},"state":"open","created_at":"2019-11-13T20:11:50Z"},{"id":522336536,"title":"Should not already be working","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI\'m seeing \\"Error: Should not already be working\\" after upgrading to React 16.11\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7\\r\\n\\r\\nI was unable to reproduce this in a VM environment but our Sentry is getting littered with these errors. \\r\\n\\r\\nI know it\'s a long shot, but I wasn\'t able to find any information about this error anywhere, just a reference in the error codes file in react, so thought it would be a good idea to report this just in case. Curious if anyone has seen this.\\r\\n","number":17355,"user":{"login":"gzzo"},"state":"open","created_at":"2019-11-13T16:35:19Z"},{"id":522135607,"title":"[react-interactions] Refine custom active element blur logic","body":"This is a follow up to https://github.com/facebook/react/pull/17291. Specifically, these PR tackles three things:\\r\\n\\r\\n- Has a much better event name for what the actions occurring. Specifically: `onDetachedVisibleNode` -> `onBeforeFocusedElementDetached `\\r\\n- Provides another callback that lets the user know the active blur has occurred on the removed node, this event is `onFocusedElementDetached `.\\r\\n- Fixes a bug where where a focused active element is removed as part of a larger sub-tree, where the active element isn\'t removed directly, but an ancestor above it is. We now use the `beforeRemoveInstance` to correctly unify this logic (removing it from the `removeChild` and `removeChildFromContainer` methods)\\r\\n\\r\\n## Why do we need two events? What is the for?\\r\\n\\r\\nThese callbacks are to help with our experimental internal accessibility work at Facebook. There are various ways to tackle this problem. I\'ve been working closely with @tatermelon (Tatiana from the accessibility team) to guide this implementation internally and apply it.\\r\\n\\r\\nThe problem these tackle are when active elements (elements that are focused on the document) are unmounted. This is a big problem with accessibility and it\'s been a big problem that folks have tried to tackle for a while with hacks. The realism is that there\'s no real good way to do this in user-land today, which is evident by how many websites simply don\'t handle this use-case.\\r\\n\\r\\nThis problem is made more evident with the introduction of Suspense fallbacks, where content if focused for a spinner, but is then removed to show the actual real content after X time. We need some way to know that this has occurred, so we can re-align with the document and imperatively move focus to the right node.\\r\\n\\r\\nTwo events are essential here:\\r\\n- `onBeforeFocusedElementDetached` fires before the active focused element is removed from the DOM. This is the perfect place to work out the \\"before\\" state, find what nodes are in view and do some calculations needed for the actual active blur event.\\r\\n- `onFocusedElementDetached ` fires after all the changes have been committed and it\'s time to use the logic we stored in the before event, to work out what node we should imperatively focus next.","number":17354,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-13T11:12:32Z"},{"id":521979138,"title":"Is `Context` appropriate to be used to implement DI?","body":"I used Angular which uses the DI pattern very heavily.\\r\\n\\r\\nI want to put it into my design of a REACT project. I intuitively think `Context` in REACT is the right way there.\\r\\n\\r\\nHere is the demo:\\r\\nhttps://codepen.io/singhijohn/pen/NWWLzBQ?editors=1010\\r\\n\\r\\n```tsx\\r\\n\\r\\nclass UserService {\\r\\n    async login() {\\r\\n        console.log(\\"login\\")\\r\\n    }\\r\\n}\\r\\n\\r\\nconst userService = new UserService()\\r\\n\\r\\nconst ServicesContext = React.createContext({ userService })\\r\\n\\r\\nconst App = (props) => {\\r\\n    return <ServicesContext.Provider value={{ userService }}>\\r\\n      <Main title=\\"hello\\" />\\r\\n    </ServicesContext.Provider>\\r\\n}\\r\\n\\r\\nconst Inject = (C) => {\\r\\n    return props => {\\r\\n      const value = React.useContext(ServicesContext)\\r\\n      return React.createElement(C, { ...value, ...props })\\r\\n    }\\r\\n}\\r\\n\\r\\nconst Main = Inject(({ userService, title }) => {\\r\\n    return <>\\r\\n        <h3>{title}</h3>\\r\\n        <button onClick={() => {\\r\\n           userService.login()\\r\\n        }}>use service</button>\\r\\n    </>\\r\\n})\\r\\n\\r\\n```","number":17353,"user":{"login":"zxh19890103"},"state":"closed","created_at":"2019-11-13T06:01:19Z"},{"id":521946591,"title":"Upgrade Babel to 7.7.0+","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug-ish.\\r\\n\\r\\n**What is the current behavior?**\\r\\n`import \'react\'` (where \'react\' is the UMD module build) from an ES module will fail due to https://github.com/rollup/rollup/pull/2274.  `this` is not set in the context of ES modules, so if you try to `import \'react\'` in that context you will get a runtime error since `this` is undefined and Rollup (before the linked fix) tries to use `this` when it really means `globalThis` or `self`.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n```\\r\\nnpm install react\\r\\n```\\r\\n`index.html`\\r\\n```html\\r\\n<!DOCTYPE html>\\r\\n<head><meta charset=\'utf-8\'></head>\\r\\n<body>\\r\\n\\t<script type=\'module\'>\\r\\n\\t\\timport \'./node_modules/react/umd/react.development.js\'\\r\\n\\t<\/script>\\r\\n</body>\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe React UMD module can be loaded by an ES module.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact: 16.11.0\\r\\nFirefox: 70.0.1\\r\\nWindows 10","number":17352,"user":{"login":"MicahZoltu"},"state":"open","created_at":"2019-11-13T04:07:32Z"},{"id":521883191,"title":"Possibility to set min duration of Suspense fallback","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nI have played a bit with Concurrent Mode and the Suspense API.\\r\\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\\r\\n\\r\\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \\"normal/synchronous\\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\\r\\n\\r\\n**What is the expected behavior?**\\r\\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \\r\\nhttps://codesandbox.io/s/cold-monad-ifr29.\\r\\n\\r\\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\\r\\nIn my opinion, this is a bit unpleasant to the eye.\\r\\n\\r\\nWouldn\'t it be nicer if we could tell the `Suspense` component something like \\"If you ever render the fallback, show it for at least N millisec.\\"? E.g.:\\r\\n\\r\\n```jsx\\r\\n...\\r\\nfunction ProfilePage({ resource }) {\\r\\n  return (\\r\\n    <Suspense fallback={<h1>Loading profile...</h1>}\\r\\n      // If the fallback ever gets rendered,\\r\\n      // it will be shown for at least 1500 millisec.,\\r\\n      // even if the promise resolves right after rendering the fallback.\\r\\n      fallbackMinDurationMs={1500}>\\r\\n      <ProfileDetails resource={resource} />\\r\\n      <Suspense fallback={<h1>Loading posts...</h1>}>\\r\\n        <ProfileTimeline resource={resource} />\\r\\n      </Suspense>\\r\\n    </Suspense>\\r\\n  );\\r\\n}\\r\\n...\\r\\n```\\r\\n\\r\\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\\r\\n\\r\\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\\r\\n\\r\\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\\r\\n\\r\\n```js\\r\\nfunction maxDelayFallbackPromise({\\r\\n  promise,\\r\\n  timeoutMs, // ---\x3e This would be the value of `useTransition`\'s `timeoutMs`\\r\\n  onFallback = () => {}, // ---\x3e This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`\'s fallback UI is rendered)\\r\\n  fallbackMinDurationMs\\r\\n} = {}) {\\r\\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\\r\\n  const uniqueIdentifier = `promise_value_${Math.random()}`\\r\\n  return Promise.race([\\r\\n    promise,\\r\\n    timeout(timeoutMs).then(() => uniqueIdentifier)\\r\\n  ]).then(value => {\\r\\n    if (value === uniqueIdentifier) {\\r\\n      onFallback()\\r\\n      return minDelayPromise(promise, fallbackMinDurationMs)\\r\\n    }\\r\\n    else {\\r\\n      return value\\r\\n    }\\r\\n  })\\r\\n}\\r\\n```\\r\\n\\r\\nWhere `timeout` and `minDelayPromise` are:\\r\\n\\r\\n```js\\r\\nfunction timeout(delayMs) {\\r\\n  return new Promise(resolve => setTimeout(resolve, delayMs))\\r\\n}\\r\\n\\r\\nfunction minDelayPromise(promise, minDelay) {\\r\\n  return Promise.all([\\r\\n    promise,\\r\\n    timeout(minDelay)\\r\\n  ]).then(([value]) => {\\r\\n    return value\\r\\n  })\\r\\n}\\r\\n```\\r\\n\\r\\nThis could also apply to the `isPending` flag of `useTransition`...\\r\\n\\r\\nDo you think such a feature could improve the UX in such cases?\\r\\n","number":17351,"user":{"login":"tonix-tuft"},"state":"open","created_at":"2019-11-13T00:33:43Z"},{"id":521632691,"title":"feat: Add useHydrateableEffect","body":"This is an attempt to resolve #14927\\r\\n\\r\\n## Rationale\\r\\nIf the component requires a layout effect no current workaround solves the underlying issue. Explicit fallback views are most likely impossible (that\'s why we need layout in the first place) or the component itself is a sufficient fallback (e.g. the overall markup is renderable on the server but we need to adjust some minor visuals).\\r\\n\\r\\nSince components using `useLayoutEffect` will always have an inconsistent UI before hydration we can potentially downgrade these effects to passive effects i.e. it\'s already inconsistent so we might as well make it inconsistent a little bit longer to make room for higher priority work.\\r\\n\\r\\n## Behavior\\r\\n\\r\\n- like useEffect when ssr\\r\\n- like useEffect when hydrating\\r\\n- like useLayoutEffect when rendering on the client\\r\\n- like useLayoutEffect on updates\\r\\n\\r\\n","number":17350,"user":{"login":"eps1lon"},"state":"open","created_at":"2019-11-12T15:47:51Z"},{"id":521462034,"title":"can\'t change visibility as expected","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\na bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nnot change the style visibility as expected, but className can be well.\\r\\n\\r\\n[react-visibility-bug](https://github.com/MurakamiKennzo/react-visibility-bug)\\r\\n\\r\\nplease follow the step in this repository and get what I said.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nchange the style visibility as className did.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact ^16.11.0\\r\\nGoogle Chorme 78.0.3904.97\\r\\nMac OSX Mojave 10.14.6\\r\\n\\r\\n\\r\\n\\r\\n","number":17349,"user":{"login":"MurakamiKennzo"},"state":"closed","created_at":"2019-11-12T10:28:24Z"},{"id":521406933,"title":"perf: list not need dots","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17348,"user":{"login":"thaycacac"},"state":"closed","created_at":"2019-11-12T08:44:31Z"},{"id":521300809,"title":"[Bugfix] Passive effects triggered by synchronous renders in a multi-root app","body":"The bug\\r\\n-------\\r\\n\\r\\nIn a multi-root app, certain passive effects (`useEffect`) are never fired. See #17066.\\r\\n\\r\\nThe underlying problem\\r\\n----------------------\\r\\n\\r\\nThe implicit contract of `flushPassiveEffects` is that, right after calling it, there should be no pending passive effects. In the normal case, in concurrent mode, this is true. But the current implementation fails to account for the case where a passive effect schedules synchronous work, which in turn schedules additional passive effects.\\r\\n\\r\\nThis led to `rootWithPendingPassiveEffects` being overwritten in the commit phase, because an assignment that assumed it was replacing null was actually replacing a reference to another root, which has the consequence of dropping passive effects on that root.\\r\\n\\r\\nThe fix\\r\\n-------\\r\\n\\r\\nThe fix I\'ve chosen here is, at the beginning of the commit phase, keep flushing passive effects in a loop until there are no more.\\r\\n\\r\\nThis doesn\'t not change the \\"public\\" implementation of `flushPassiveEffects`, though it arguably should work this way, too. I say \\"public\\" because it\'s only used by implementation layers on top of React which we control: mainly, the legacy version of `act` that does not use the mock Scheduler build. So there\'s probably still a bug in that `act` implementation.\\r\\n\\r\\nI will address `act` in a follow-up. The ideal solution is to replace the legacy `act` with one implemented directly in the renderer, using a special testing-only build of React DOM. Since that requires a breaking change, we\'ll need an interim solution. We could make the \\"public\\" `act`\\r\\nrecursively flush effects in a loop, as I\'ve done for the commit phase. However, I think a better solution is to stop automatically flushing the synchronous update queue at the end of `flushPassiveEffects`, and instead require the caller to explicitly call `flushSyncUpdateQueue` (or the equivalent) if needed. This follows the same pattern we use internally in the work loop, which is designed to avoid factoring hazards like the one that resulted in this bug.","number":17347,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-12T03:06:20Z"},{"id":521180114,"title":"[Native] If statement cleanup for null targets","body":"@SVladikO [flagged](https://github.com/facebook/react/commit/2c6ea0b3ffffd1a110845327262ecea59ee48dab#r35901865) that this code could be refactored to be a bit cleaner. Seems good to me. Tests still pass.\\r\\n","number":17346,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-11-11T20:50:28Z"},{"id":521141555,"title":"[Native] Add FeatureFlag to dispatch events with instance currentTarget","body":"Dependent on facebook#17323 to make event.currentTarget an instance instead of a reactTag.\\r\\n\\r\\nI tested this in RNTester in React Native ensuring that Touchable and Pressable correctly handle the updated currentTarget. I have found no other internal callsite referencing this value.","number":17345,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-11-11T19:24:55Z"},{"id":521128628,"title":"Change legacy-events plugin nativeEventTarget to allow null","body":"React Native is changing the event target to be a react element instance instead of a reactTag. We pull this element instance off of the fiber, which might be null, thus the target might now be null.\\r\\n\\r\\nIt looks like the only thing that uses the target is SyntheticEvent which just sets it on the event:\\r\\n\\r\\nhttps://github.com/facebook/react/blob/6cff70a740d1e6ad10070ebf88514bd3a49d0f0d/packages/legacy-events/SyntheticEvent.js#L93-L95","number":17344,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-11-11T18:55:25Z"},{"id":521122136,"title":"useContext requires JSX/React.createElement","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nuseContext uses the default value if the component is called as a function, whereas other hooks work fine in that situation. In other words, the hook requires the component to be called as JSX/with React.createElement.\\r\\n[Checkout this demo on CodeSandbox](https://codesandbox.io/s/nervous-wave-p0es8)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nuseContext should behave the same regardless of the way the component is called.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThe CodeSandbox runs 16.8.6, however I also noticed this behaviour on 16.10.X. I have only tested Chrome 78 on Windows 10.\\r\\n\\r\\n**Note:**\\r\\nI don\'t know the underlying implementation of the new context enough to know why this is happening. Maybe someone can shine a light on it, if it\'s working as intended or not fixable.","number":17343,"user":{"login":"lxender"},"state":"closed","created_at":"2019-11-11T18:40:09Z"},{"id":521091871,"title":"New hook for useEffect and empty array","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nNew feature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe second parameter to `useEffect` isn\'t especially clear or explicit. Empty array for \\"observe nothing\\" and undefined for essentially \\"observe everything.\\" Since the former case is so common (used where componentDidMount would have been used for things like ajax calls), what about a verbosely named dedicated hook? The only hard part here is finding the right name.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'d suggest `useEffectObservingNothing`. This removes the notion of meaningful changes that hinge on subtle syntax changes (empty array vs undefined). Explicit is better than implicit as they say in Python, and I\'m always happy to borrow from their philosophy.\\r\\n\\r\\nThis would pretty much be a one liner.\\r\\n\\r\\n    function useEffectObservingNothing(fn) {\\r\\n      return React.useEffect(fn, []);\\r\\n    }\\r\\n\\r\\nJust thought I\'d throw out the idea...","number":17342,"user":{"login":"johnnysprinkles"},"state":"closed","created_at":"2019-11-11T17:30:22Z"},{"id":520929853,"title":"[react-interactions] Expose host instance to Scope Query function","body":"This PR is a follow up from #17293. Specifically, we added a 2nd argument to the `queryAllNodes ` Scope API. After some internal profiling, I noticed that this pushed engineers towards doing extra work after the query scope, which was a waste of CPU cycles.\\r\\n\\r\\nTo avoid doing extra work, this PR changes the API so that we now pass through the host instance to the query function. That means not only does the query function get the previously existing `type` and `props`, but it also gets a third argument `instance`. In the case of ReactDOM, this will be the DOM element instance.\\r\\n\\r\\nThis then allows for more precise querying of the scope without having to do wasted work after \u2013 it can be done as part of the query.","number":17341,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-11T12:22:51Z"},{"id":520898377,"title":"[Fresh] Add options to configure RefreshReg and RefreshSig identifiers","body":"Allow to override `$RefreshReg$` and `$RefreshSig$` identifiers.\\r\\nMain reason is to use `import.meta` in async environments (i.e. rollup + SystemJS) builds instead of relying on globals.\\r\\n\\r\\nUsage: \\r\\n```js\\r\\n{\\r\\n  \\"plugins\\": [\\r\\n    [\\"react-refresh/babel\\", {\\r\\n      \\"refreshReg\\": \\"import.meta.refreshReg\\",\\r\\n      \\"refreshSig\\": \\"import.meta.refreshSig\\"\\r\\n    }]\\r\\n  ]\\r\\n}\\r\\n```\\r\\n\\r\\nCloses: #17237 ","number":17340,"user":{"login":"vasiliicuhar"},"state":"closed","created_at":"2019-11-11T11:22:40Z"},{"id":520778377,"title":"Devtools React Profiler: Shrink flamegraph window\'s width to make room for scrollbar","body":"Hide scrollbar to appear on flame graph React Profiler.\\r\\n\\r\\nThe reason is that the scrollbar seems to block some of the flame graph. In addition to that, the scrollbar does not serve any purpose.\\r\\n\\r\\nThis is the issue https://github.com/facebook/react/issues/16550\\r\\n\\r\\nBefore\\r\\n\\r\\n![before](https://user-images.githubusercontent.com/25560419/68568874-badf7180-0497-11ea-9b3d-ea232be9e07f.gif)\\r\\n\\r\\nAfter / Results\\r\\n\\r\\nChrome\\r\\n![chrome](https://user-images.githubusercontent.com/25560419/68567872-08a6aa80-0495-11ea-85fa-c67128511610.gif)\\r\\n\\r\\nFirefox\\r\\n![firefox](https://user-images.githubusercontent.com/25560419/68567878-0ba19b00-0495-11ea-9a7f-66f01b454133.gif)\\r\\n\\r\\n","number":17339,"user":{"login":"gejimayu"},"state":"closed","created_at":"2019-11-11T07:08:38Z"},{"id":520734649,"title":"internalContainerInstanceKey is write wrong","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nyes\\r\\n**What is the current behavior?**\\r\\nconst internalContainerInstanceKey = \'__reactContainere$\' + randomKey;\\r\\nIn the master branch and ReactDOMComponentTree.js line 23.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nconst internalContainerInstanceKey = \'__reactContainer$\' + randomKey;\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17338,"user":{"login":"zhupingcmm"},"state":"open","created_at":"2019-11-11T04:33:14Z"},{"id":520729529,"title":"setState() not working even with deep copy of state","body":"I wrote a  small \'Todo App\'. The add and change functions works properly, but the delete function just won\'t work. I used the deep copy of the state called \'copyState\' and delete something in it and then setState(copyState), but the page won\'t refresh though the content in copyState has changed.\\r\\n\\r\\n```javascript\\r\\nconst deleteId = Number(event.target.id.split(\' \')[0]); // here I got the id of object that I want to delete\\r\\nlet copyState = _.cloneDeep(this.state);  // here I got a deep copy of this.state, the \'_\' stands for Lodash library\\r\\ndelete copyState[deleteId]; // deleting\\r\\nthis.setState(copyState); // unfortunately not working\\r\\n```\\r\\n","number":17337,"user":{"login":"hondahmd"},"state":"closed","created_at":"2019-11-11T04:12:13Z"},{"id":520675700,"title":"Add failing test for #17213","body":"I\'ve tried to add a failing test for the issue described here. \\r\\nhttps://github.com/facebook/react/issues/17314\\r\\n\\r\\n\\r\\nIf you run it locally, and change `isMemo` to be false, the test will pass. The test will also pass if you change the line to \\r\\n`    const MemodSubbed = isMemo ? React.memo(Subbed, () => true) : Subbed;`\\r\\n\\r\\n\\r\\n----\\r\\n\\r\\nBelow are my half-hearted attempts to look into this bug. \\r\\n\\r\\nIt looks like when the `compare` function is defined it makes React call `createFiberFromTypeAndProps`. However, if the `compare` function is not defined, it means React goes down the codepath below; \\r\\n\\r\\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberBeginWork.js#L380-L403\\r\\n\\r\\nIn other words, the bug is likely caused somewhere in `updateSimpleMemoComponent` \\r\\n\\r\\n","number":17336,"user":{"login":"samcooke98"},"state":"open","created_at":"2019-11-10T23:32:22Z"},{"id":520654381,"title":"test: fix for #17066","body":"This test is adapted from code in [this comment](https://github.com/facebook/react/issues/17066#issuecomment-541229219).\\r\\n\\r\\nIt passes with the current expectations, so I don\'t think I\'ve successfully reproduced the bug yet. But this is a good starting point for anyone who wants to help.","number":17335,"user":{"login":"aleclarson"},"state":"closed","created_at":"2019-11-10T20:42:15Z"},{"id":520618767,"title":"why setState in useLayoutEffect forces useEffects to run before paint?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nA bug, but more likely a question.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI have some pretty intense computations in `useEffect`.\\r\\nAnd also some trivial animations in `useLayoutEffect`. \\r\\n\\r\\nWhat I expect of react is to let me paint a page based on what I specified in layout effects. Once it\'s done it can go on run effects.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhat actually happens is if I change state inside layoutEffect, every single effect is run, and not only in this component, but also in every parent up the tree.\\r\\n\\r\\nIf this is expected, why does this happen?\\r\\n\\r\\n","number":17334,"user":{"login":"lsnch"},"state":"closed","created_at":"2019-11-10T15:49:23Z"},{"id":520575903,"title":"Can\'t back to initialed state with useState","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nIt\'s not a feature, but I\'m not sure if it\'s a bug or mistake of mine.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI initialed my state on useState with a number. but I can\'t back to that initialed state after doing some stuff in my code. for example, pass some conditions.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI want to be able to pass the initial value as the new state value, but it\'s not working.\\r\\nFor better understanding, I created a reproduce project in sandBox to check it out.\\r\\nhttps://codesandbox.io/s/serene-driscoll-qlqq3?fontsize=14\\r\\n","number":17333,"user":{"login":"hrahimi270"},"state":"open","created_at":"2019-11-10T09:26:26Z"},{"id":520572172,"title":"useTransition: After startTransition, it does not react to passed props changes","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nProbably a bug\\r\\n**What is the current behavior?**\\r\\nAfter firing startTransition, \\"current\\" component stops reacting to passed props changes while reacting to local state changes.\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nIn the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click \\"CLICK ME\\", it suddenly stops updating.\\r\\nhttps://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWhen passed props change, it should show the latest value of it where possible\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nExperimental build (0.0.0-experimental-5faf377df)","number":17332,"user":{"login":"naruaway"},"state":"open","created_at":"2019-11-10T08:47:41Z"},{"id":520544849,"title":"Split ReactDOM entry point","body":"This is kind of subjective. I find it hard to navigate `ReactDOM.js`. It\'s long, mixes public API with implementation details, and mixes some injection with old APIs with new ones. It\'s hard to tell what\'s being used only by the old code, and what\'s only needed for legacy (or missing in modern code).\\r\\n\\r\\nThis is a refactor that does no functional changes. It splits `ReactDOM.js` into:\\r\\n\\r\\n* `ReactDOM.js`: Entry point is lean and only does some injection and importing.\\r\\n* `ReactDOMRoot.js`: Exports `createRoot`, `createBlockingRoot`, and `createLegacyRoot` (internal). This is the where the shared root implementation lives.\\r\\n* `ReactDOMLegacy.js`: All legacy APIs like `findDOMNode`, `render`, `hydrate`, `unmountComponentAtNode`, `unstable_renderSubtreeIntoContainer`, live here. This includes some batching and legacy hyration heuristics code that isn\'t used by the modern roots.\\r\\n\\r\\nEventually we can move `ReactDOMLegacy.js` to a separate package entry point.\\r\\n\\r\\nI\'ve also renamed `BatchedRoot` to `BlockingRoot` (missed that during last refactoring).","number":17331,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-10T02:47:44Z"},{"id":520538183,"title":"Align root container onclick behavior with legacy mode","body":"So... this isn\'t really important but we\'re inconsistent with how we set `onclick` on container nodes.\\r\\n\\r\\nIn Legacy Mode, we only set them on Portal Containers (but not Root Containers).\\r\\nIn modern Modes, we set them both on Portal Containers and Root Containers.\\r\\n\\r\\nThere\'s no particular good reason to set them on Root Containers (Portal Containers need it for `onclick` event to bubble on Safari). So I\'m changing them to behave the same way as in Legacy Mode.\\r\\n\\r\\nI guess it would also be ok to always set it. Another way to think of it is this is removing some usage of `_reactRootContainer` where the code implies \\"root\\" because it\'s really only \\"legacy root\\" and this isn\'t obvious. For example someone may change this logic later and assume all roots have `_reactRootContainer`.","number":17330,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-10T01:22:40Z"},{"id":520530901,"title":"Warn when doing createRoot twice on the same node (another approach)","body":"Alternative to #17328. Uses an existing flag. First commit is a refactoring, second adds a new warning.","number":17329,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-10T00:02:00Z"},{"id":520501808,"title":"Warn when createRoot() is called on existing root","body":"The behavior is pretty confusing: https://codesandbox.io/s/frosty-satoshi-z87yi\\r\\n\\r\\nSo this adds a warning. Will be useful to people who replace `.render()` with `.createRoot().render()` without considering that they may be running it multiple times.\\r\\n\\r\\nI don\'t warn if you `.unmount()` first. That seems okay-ish. Maybe you really don\'t have access to the root instance but at least you can free the previous one.","number":17328,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-09T19:25:57Z"},{"id":520487021,"title":"Fix \'__DEV__ is not defined\' error in react-art fixture and change message to use \'yarn\' over \'npm\'","body":"I am using yarn 1.19.1, node v10.16.3, and npm 6.13.0.\\r\\n\\r\\n* After running `yarn install` and `yarn build` and opening index.html, I received the error `__DEV__ is not defined` from the produced bundle.js file.  My change in the webpack config simply sets `__DEV__` to `true` to get rid of this error, allowing the successful rendering of the React logo animation after running the build.\\r\\n\\r\\n*  I changed the message in index.html to suggest running `yarn install` and `yarn build` over `npm install` and `npm run build`, for two reasons:\\r\\n    * The lockfile in the fixture is `yarn.lock`\\r\\n    * The `\\"link:\\"` protocol in package.json is supported by yarn, not npm, so `npm install` fails with `EUNSUPPORTEDPROTOCOL`.\\r\\n","number":17327,"user":{"login":"ScottMorse"},"state":"open","created_at":"2019-11-09T17:34:38Z"},{"id":520482578,"title":"irrelevant useState error when component is in UpperCase","body":"\\r\\n    \\"eslint-plugin-react\\": \\"^7.16.0\\",\\r\\n    \\"eslint-plugin-react-hooks\\": \\"^2.2.0\\",\\r\\n    \\"eslint-plugin-react-native\\": \\"^3.8.1\\",\\r\\n\\r\\n```\\r\\nconst HOC = component => props => {\\r\\n  const [currIndex, setCurrIndex] = useState(\'\')\\r\\n  return <passedcomponent {...props} />\\r\\n}\\r\\n```\\r\\nThis throws an eslint error: \\"React Hook \\"useState\\" cannot be called inside a callback.\\"\\r\\nIf I rename component to begin with lowercase, it works. So there are two problems:\\r\\n1. Encrypted error message\\r\\n2. It should be reverse. Uppercase should be enforced instead of lowercase","number":17326,"user":{"login":"deepakaggarwal7"},"state":"open","created_at":"2019-11-09T17:13:05Z"},{"id":520358648,"title":"Confusing behavior in Suspense","body":"I was just following the documentation of Concurrent mode and found a behavior that confused me.\\r\\n\\r\\nOpen this example and press `Open Profile` button.\\r\\nhttps://codesandbox.io/s/focused-snow-xbkvl\\r\\n\\r\\nThis way transition works as expected.\\r\\n- Pending (until `ProfileDetails` is ready)\\r\\n- Skeleton (displays a spinner for `ProfileTimeline`)\\r\\n- Complete (Everything is fetched)\\r\\n\\r\\nBut if you press `Refresh` button you\'ll something different.\\r\\n\\r\\nYou have to wait until all the components are ready in the tree (both `ProfileDetails` and `ProfileTimeline`). However, I\'d expect it to behave the same way as when we clicked the `Open Profile` button.\\r\\n\\r\\nI know this is something I can fix with `useDeferredValue`, but I\'m curious to know the reasons for such behavior.","number":17325,"user":{"login":"baldarian"},"state":"open","created_at":"2019-11-09T08:32:48Z"},{"id":520344950,"title":"Should I treat property\'s change as events in components?","body":"We know the hook `useEffect` can see a variable\'s changes and invoke the callback I give it after the variable changed. This ability allows me to use component\'s property to apply an effect defined in.\\r\\n\\r\\n```tsx\\r\\nconst List = (props) => {\\r\\n    useEffect(() => {\\r\\n        loaddata()\\r\\n    }, [ props.tick ])\\r\\n    return <div>It\'s a demo. :)</div>\\r\\n}\\r\\n\\r\\nconst Page = (props) => {\\r\\n\\r\\n    const [tick, setTick] =useState(0)\\r\\n\\r\\n    const handleRefresh = () => {\\r\\n        setTick(tick + 1)\\r\\n    }\\r\\n\\r\\n    return <div>\\r\\n        <a onClick={handleRefresh}>Refresh</a>\\r\\n        <List tick={tick}></List>\\r\\n    </div>\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nIt works very well. But is it proper?  Is there any better alternatives?  How about event? ","number":17324,"user":{"login":"zxh19890103"},"state":"open","created_at":"2019-11-09T06:41:45Z"},{"id":520310291,"title":"[Native] Add FeatureFlag to dispatch events with instance targets","body":"In React Native we want to try making the event target and currentTarget equal to a React Instance instead of a reactTag. This is needed to clean up some of the logic in ScrollResponder, TextInput, and TextInputState. This also will let these core components become compatible with Fabric.\\r\\n\\r\\nThere is precedent here as target and currentTarget on ReactDOM are HTMLElements that have .focus and .blur methods for example.\\r\\n\\r\\nThis API is behind a FeatureFlag that we can use to run an experiment internally.\\r\\n\\r\\nIt is worth noting that this will be a breaking change to ReactNative when rolled out. When searching the Facebook codebase I surprisingly found essentially *no* callsites referencing target/currentTarget except for our core components. That gives me some confidence that this breaking change is acceptable and doesn\'t require a different approach like putting the instance in a different key on the event.\\r\\n\\r\\nThe purpose of this experiment is to validate that assumption.\\r\\n\\r\\n**Note: This PR doesn\'t have any logic to change `currentTarget`. I haven\'t investigated that one yet to know how to change that. Is that reasonable to do in a separate PR or do you think it should be part of the same one?**\\r\\n\\r\\n## Test Plan\\r\\nI did a local sync and ran these changes in the Facebook repo and tested this in both Fabric and Paper with the flag turned on and off. ScrollResponder and TextInput logic didn\'t throw any exceptions, was correctly handling target being both a number and instance.","number":17323,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-11-09T01:30:45Z"},{"id":520284841,"title":"Add useOpaqueReference Hook","body":"We currently use unique IDs in a lot of places. Examples are:\\r\\n\\t* `<label for=\\"ID\\">`\\r\\n\\t* `aria-labelledby`\\r\\n\\r\\nThis can cause some issues:\\r\\n\\t1. If we server side render and then hydrate, this could cause an hydration ID mismatch\\r\\n\\t2. If we server side render one part of the page and client side render another part of the page, the ID for one part could be different than the ID for another part even though they are supposed to be the same\\r\\n\\t3. If we conditionally render something with an ID ,  this might also cause an ID mismatch because the ID will be different on other parts of the page\\r\\n\\r\\nThis PR creates a new hook `useUniqueId` that generates a different unique ID based on whether the hook was called on the server or client. If the hook is called during hydration, it generates an opaque object that will rerender the hook so that the IDs match.","number":17322,"user":{"login":"lunaruan"},"state":"open","created_at":"2019-11-08T23:38:48Z"},{"id":520251612,"title":"[Shallow Renderer] Plan forward","body":"Let\'s discuss what to do with the shallow renderer here. As I mentioned in https://github.com/facebook/react/pull/16168#issuecomment-518344985, we aren\'t using it much and don\'t consider it a best practice. So we aren\'t going to be very good stewards of its API going forward.\\r\\n\\r\\nMy proposal was for Enzyme or folks interested in it to copy the code into another repo, and continue maintaining it there under a difference package name. It would make sense to Enzyme to start depending on that fork. We would then deprecate `react-test-renderer/shallow` in favor of the community-maintained fork.\\r\\n\\r\\nIf you\'d like to volunteer to set up a repo, please let us know in this issue!\\r\\n\\r\\ncc @davidmarkclements regarding the proposed `react-shallow-renderer` package name.","number":17321,"user":{"login":"gaearon"},"state":"open","created_at":"2019-11-08T21:54:52Z"},{"id":520234837,"title":"DevTools: \\"filtering\\" in addition to \\"finding\\"","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nRight now you can use the search box in DevTools as the equivalent to <kbd>Cmd-F</kbd> in a webpage, where it will jump between all the matches.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nWhen I\'m trying to keep track of an individual component, what I really want is **filtering** instead of **finding**. By that I mean that I could type in for example \\"Editor\\" in the search box, and only components with `Editor` in their name (eg. `<Editor />`, `<MyEditor />`, etc.) would show up.\\r\\n\\r\\nIt would show the matching components, and have the option to expand them (or be pre-expanded), so it shows the components and their children.\\r\\n\\r\\nFor example, right now when loading the page, I see this:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/311752/68510359-54611600-0241-11ea-978e-59d5959031d2.png)\\r\\n\\r\\nWhich is a lot of extra stuff in the components tree that I don\'t care about. What I\'d really love to see is this:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/311752/68510403-7195e480-0241-11ea-80b6-fed5de08b6b1.png)\\r\\n\\r\\nA specific child component that I\'m currently interested in.\\r\\n\\r\\nIf the search box actually **filtered**, and if it was persistent across reloads, I could type \\"Editor\\" and then continually refresh the page and keep the specific component I care about visible.\\r\\n\\r\\n---\\r\\n\\r\\nAlternatively, maybe double-clicking that `<Editor>` component could show the whole tree underneath it in the detail view. Right now it just shows:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/311752/68510549-d7826c00-0241-11ea-9b4b-d9afd521869a.png)\\r\\n\\r\\nWhich is a bit of a lost opportunity.\\r\\n\\r\\nIf it showed the full tree of descendants, and if my \\"selection\\" was persistent across refreshes, this could solve the same use case in a different way.\\r\\n\\r\\n---\\r\\n\\r\\nSimilarly, if there was a way to specify _multiple_ filters, you could actually solve for the use case in https://github.com/facebook/react/issues/16478 by letting people add multiple filters to ease jumping between two components.\\r\\n\\r\\n---\\r\\n\\r\\nMaybe there\'s a better way that already solves this? I\'d love to hear it!","number":17320,"user":{"login":"ianstormtaylor"},"state":"open","created_at":"2019-11-08T21:09:01Z"},{"id":520218644,"title":"[Flight] End-to-End Fixture","body":"Adds a fixture setup for Flight that\'s more realistic.\\r\\n\\r\\n- Client: CRA + readFromFetch.\\r\\n- Server: Express + pipeToNodeWritable.\\r\\n\\r\\nThis probably doesn\'t actually _stream_ now.\\r\\nIt\'s just barebones setup to render something.\\r\\n\\r\\nI will be adding a more realistic endpoint, routing, and streaming in a follow-up.","number":17319,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-08T20:27:38Z"},{"id":520153018,"title":"useTransition - startTransition does not work on React.memo when is SimpleMemoComponent","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nuseTransition - startTransition do not work on React.memo when is SimpleMemoComponent\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nstartTransition work with SimpleMemoComponent\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17318,"user":{"login":"salvoravida"},"state":"open","created_at":"2019-11-08T17:58:51Z"},{"id":520147825,"title":"Is it possible to reuse component\'s instance?","body":"```tsx\\r\\nfunction Test({value}) {\\r\\n  return <span>{value}</span>\\r\\n}\\r\\n```\\r\\nNow I have:\\r\\n```tsx\\r\\n<Test value=\\"1\\" />\\r\\n```\\r\\nThen I want:\\r\\n```tsx\\r\\n<Host>\\r\\n  <Test value=\\"2\\" />\\r\\n</Host>\\r\\n```\\r\\nIs it possible to reuse Component Test\'s instance for withouting recreate DOM elements for better performance.","number":17317,"user":{"login":"rabbitooops"},"state":"closed","created_at":"2019-11-08T17:47:19Z"},{"id":520147018,"title":"Add yarn build --unsafe-partial","body":"We normally delete the `build` folder when rebuilding for consistency. This can be annoying if I make a tiny scoped edit to a particular package. This is an escape hatch so I can iterate faster when I know what I\'m doing.","number":17316,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-08T17:45:32Z"},{"id":520131221,"title":"Fix missing file check","body":"This fixes the case where you `yarn test-build` and have leftover empty dirs without `package.json`. I think the original check was meant to catch that case but it wasn\'t right.","number":17315,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-08T17:12:04Z"},{"id":519924494,"title":"Concurrent Mode and UseSubscription with RxJS \\"lose\\" updates ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n**Bug** - I think? \\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn Concurrent Mode, it appears that if a render is interrupted, if a component is using `useSubscription` the interrupted update is lost, which leads to \\"tearing\\" \\r\\n\\r\\nThe following codesandbox uses `useSubscription` with a RxJS `BehaviorSubject`, mimicking the example from here: https://www.npmjs.com/package/use-subscription#subscribing-to-observables \\r\\n\\r\\nIn the sandbox, clicking on the \\"Increment Remote Count\\" button triggers the RxJs `BehaviorSubject` to increment. This is done outside of the React event handler (ie: via `window.addEventLIstener` and so the updates are not batched together. The update to render the numbers is artificially slowed down. \\r\\n\\r\\nIf you click the \\"Increment Remote Count\\" button multiple times, the update works as expected. \\r\\n\\r\\nIf you interrupt the update, via clicking the \\"increment local count\\", only the last number will update. \\r\\n\\r\\n\\r\\n\\r\\nSo the Steps to reproduce look like: \\r\\n1. Click the \\"Increment Remote Count\\" button once\\r\\n2. Before the update is committed to the DOM, click the \\"Increment Local Count\\" update. \\r\\n3. The first update is \\"lost\\" ie; the output looks like: \\r\\n\\r\\n![image](https://user-images.githubusercontent.com/787007/68468141-27255f80-0263-11ea-9afb-07964e21d9d9.png)\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://jwenc.csb.app/ \\\\ https://codesandbox.io/s/usesubscriptionconcurrentlosingupdates-jwenc \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'d expect there to be a commit as the above screenshot, but I\'d then expect there to be a follow-up commit that restores the consistency. In other words, I\'d expect in the above picture for everything to be `1` \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`0.0.0-experimental-f6b8d31a7`\\r\\n\\r\\n\\r\\nI\'d be willing to try to take a stab at writing a React test for this, if needed? \\r\\n\\r\\n","number":17314,"user":{"login":"samcooke98"},"state":"open","created_at":"2019-11-08T10:07:06Z"},{"id":519922793,"title":"Effect is not run (not even once) when state setter is called in function body","body":"Please help me understand how state setter works when called inside a function body\\r\\n\\r\\nI have the following code:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/17873916/68467878-f557cd00-0251-11ea-9479-5a3f6811fece.png)\\r\\n\\r\\n\\r\\nRunning this code will result in infinite re-rendering. According to the React documentation, it says `The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.`. I interpret this as the next render will be enqueued and run after the current render finishes, including running the effect. However, the effect is never run at all, not even once, and the chain of re-rendering is happening forever without any bailing out even the code is updating the same state again, i.e. 1\\r\\n\\r\\nPlease help me understand the internal working of this piece of code.","number":17313,"user":{"login":"charshin"},"state":"open","created_at":"2019-11-08T10:03:34Z"},{"id":519903264,"title":"Regarding `react-hooks/exhaustive-deps` and object properties","body":"If I have a dependency array which passes in several properties of an object like the below example, the eslint rule `react-hooks/exhaustive-deps` shows a warning.\\r\\n\\r\\n```javascript\\r\\nlet options = { foo: 1, bar: 2 }\\r\\n\\r\\nReact.useEffect(fn, [ options.foo, options.bar ])\\r\\n```\\r\\n\\r\\nShows a message:\\r\\n\\r\\n```\\r\\nReact Hook React.useEffect has a missing dependency: \'options\'. Either include it or remove the dependency array\\r\\n```\\r\\n\\r\\nI can replace the array with `[ options ]` which solves the problem but my question is, should I have to pass the full object when I only need to use some of it\'s properties?","number":17312,"user":{"login":"tom-sherman"},"state":"open","created_at":"2019-11-08T09:23:56Z"},{"id":519678906,"title":"React build is failing to execute","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nAfter creating the build, I run the command to validate if my production build is running properly or not.\\r\\nFor that, I use `serve -s build/`. That gives me an error, which is not making any sense to me.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\nStep 1 - This is what my package.json looks like.\\r\\n<img width=\\"525\\" alt=\\"Screenshot 2019-11-07 at 10 39 50 PM\\" src=\\"https://user-images.githubusercontent.com/16207311/68448129-7eb6c300-01b0-11ea-9ec7-e5bf0f84b145.png\\">\\r\\n\\r\\nStep 2 - I run my code on local machine using `npm run start`. Everything works fine without any errors or warnings.\\r\\n<img width=\\"377\\" alt=\\"Screenshot 2019-11-07 at 10 40 20 PM\\" src=\\"https://user-images.githubusercontent.com/16207311/68448164-98580a80-01b0-11ea-80cb-c82afbae59f1.png\\">\\r\\n\\r\\nStep 3 - Hence, I go and create a production build using `npm run build`. Which creates a `build/` folder for me. This is what it looks like.\\r\\n<img width=\\"583\\" alt=\\"Screenshot 2019-11-07 at 10 41 02 PM\\" src=\\"https://user-images.githubusercontent.com/16207311/68448204-ba518d00-01b0-11ea-8c56-d763f2cd5504.png\\">\\r\\n\\r\\nStep 4 - So, I check how my build folder looks like using serve.\\r\\n<img width=\\"429\\" alt=\\"Screenshot 2019-11-07 at 10 41 28 PM\\" src=\\"https://user-images.githubusercontent.com/16207311/68448510-b96d2b00-01b1-11ea-8cd9-b984cb68a2c5.png\\">\\r\\n\\r\\nStep 5 - BUT! This happens when I open `localhost:5000`.\\r\\n<img width=\\"1680\\" alt=\\"Screenshot 2019-11-07 at 10 42 18 PM\\" src=\\"https://user-images.githubusercontent.com/16207311/68448658-37c9cd00-01b2-11ea-8295-047203970b7f.png\\">\\r\\n\\r\\nI do not have enough expertise to debug the issue, hence decided to post here. I am guessing this has something to do with babel-loader or babel.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI wish to see my production build in the browser.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact version is - `v16.11.0`\\r\\nBrowser - Google Chrome.\\r\\n","number":17311,"user":{"login":"joshi-chinmay"},"state":"closed","created_at":"2019-11-08T04:00:08Z"},{"id":519602678,"title":"Link Flight fixture to CodeSandbox CI","body":"Proof-of-concept for automatically preparing fixtures on every commit using CodeSandbox CI.\\r\\n\\r\\nI ported the existing Flight browser fixture to a form consumable by CodeSandbox CI.\\r\\n\\r\\n","number":17310,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-08T01:15:55Z"},{"id":519575086,"title":"Pass suspense config to `startTransition` instead of `useTransition`","body":"This avoids the problem of having to bind the config object to `startTransition`, invalidating downstream memoizations.\\r\\n\\r\\nSee #17284 for more details.\\r\\n\\r\\nI\'ll need to codemod the existing callers in www, but that\'s not a blocker because www uses a userspace fork.","number":17309,"user":{"login":"acdlite"},"state":"open","created_at":"2019-11-07T23:39:01Z"},{"id":519568472,"title":"State is carried between components inside and outside of fragments","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf a component rendered in a Fragment and then outside of it it is considered the same instance by React.\\r\\n\\r\\nThis means that:\\r\\n\\r\\n```jsx\\r\\n<Fragment>\\r\\n  <Component />\\r\\n</Fragment>\\r\\n```\\r\\n\\r\\nshares state with:\\r\\n\\r\\n```jsx\\r\\n<Component />\\r\\n```\\r\\n\\r\\nI see how this could be seen as beneficial behavior and can be easily fixed with keys.\\r\\n\\r\\nWhen I was conditionally rendering either one Material UI Button or two inside a fragment would cause the ripple effect from the first Button in the fragment to be \\"transferred\\" to the single Button which is odd since the JSX structure is different.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://github.com/dacioromero/react-unexpected-state-fragments\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nFragments should be a factor that React considers when determining if instances of a component is the same. Components should be different instances between renders if one is placed inside a Fragment and another is not.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.11.0, Firefox Developer Edition 71.0b7, Ubuntu 19.10.\\r\\n\\r\\nNot sure if this worked as I would expect in previous versions.\\r\\n","number":17308,"user":{"login":"dacioromero"},"state":"closed","created_at":"2019-11-07T23:18:52Z"},{"id":519498926,"title":"[Flight] Basic Integration Test","body":"This adds a basic integration test where we actually feed the model to ReactDOM components and use Suspense. The test verifies that we can stream data and reveal more content as it happens. We also verify errors work.","number":17307,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-07T20:38:06Z"},{"id":519466158,"title":"img onLoad does not always fire in concurrent mode","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n**What is the current behavior?**\\r\\n\\r\\n`<img onLoad={fn} />` does not always trigger `fn` when rendered using createRoot if it has siblings which are heavy to render (I think?).\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/quiet-dawn-t1std\\r\\nYou might have to use the retry button a few times, but hopefully you should be able to see it. Don\'t disable cache while trying\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nonLoad always fires if img gets loaded.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n0.0.0-experimental-f6b8d31a7\\r\\nReproduced in chrome and firefox windows. Have not tried the codesandbox in mac, but the actual bug in our app occurred there first so I\'d be surprised if it is OS specific.\\r\\n\\r\\nIt does not happen with regular \\"sync\\" mode.","number":17306,"user":{"login":"peternycander"},"state":"open","created_at":"2019-11-07T19:29:09Z"},{"id":519446093,"title":"DevTools: Updating state or props in devtools does not trigger component update.","body":"Do you want to request a feature or report a bug?\\r\\n\\r\\nbug\\r\\n\\r\\nWhat is the current behavior?\\r\\n\\r\\nChanging state or props for a component in React-Devtools isn\'t updating component.\\r\\n\\r\\nWhat is the expected behavior?\\r\\n\\r\\nComponent should reflect changes made to state/props in React-Devtools\\r\\n\\r\\nWhich versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?\\r\\n\\r\\nUsing React-Devtools v4 w/ React 16.9\\r\\nWorking in v3 of React-Devtools","number":17305,"user":{"login":"thisisDom"},"state":"closed","created_at":"2019-11-07T18:47:18Z"},{"id":519412072,"title":"section","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17304,"user":{"login":"x14118173"},"state":"closed","created_at":"2019-11-07T17:35:30Z"},{"id":519348506,"title":"[RN] Hoist static deepDiffer options object","body":"Hoists the options object literal from `defaultDiffer` to the module scope so it\'s not recreated on every prop update. Addresses https://github.com/facebook/react/pull/17282#discussion_r343677204.","number":17303,"user":{"login":"motiz88"},"state":"closed","created_at":"2019-11-07T15:46:03Z"},{"id":519326971,"title":"infinite recursion when using development cdnjs libraries in a tampermonkey user script","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBUG\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\ndevelopment versions of the library > 6.4.2 - cause infinite recursion and crash/slowdowns when used in the tampermonkey environment when including the development libraries for react and react-dom. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nYou would need to install tampermonkey in Google Chrome, and then install this test user script\\r\\n\\r\\nhttps://gist.github.com/prozacgod/e1aad87eb8aa835ff257081cad7f9d88\\r\\n\\r\\nafter that launch a local server of any sort on port 8080, as the gist specifies localhost - hosting a bare minimum index.html\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIt should render Foo! on the blank page\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nIt seems to work fine with 16.4.x -> 16.5.x (I did not test lower) but many selected versions past 16.4 did cause the issue.  only the Development builds break.\\r\\n\\r\\nJust a guess, but mayber tampermonkey environment exposes a property that react did not use before, but does now - and it may be \'frozen\' or \'proxied\' in this environment.\\r\\n\\r\\nP,S, - I\'m happy to supply feedback, and further test - I\'m rather divided in my time, but I\'ll try to check back.\\r\\n\\r\\nI also understand if react doesn\'t want to support development libraries for tampermonkey environment.","number":17302,"user":{"login":"prozacgod"},"state":"open","created_at":"2019-11-07T15:11:33Z"},{"id":519149714,"title":"react-test-renderer: the findByType method doesn\'t work with memo components","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhenever I try something like:\\r\\n\\r\\n```\\r\\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent);\\r\\n```\\r\\n\\r\\nI get the following error: `No instances found with node type: \\"undefined\\"`. The only way I found for this to work was to reference the `type` property of memo components like this:\\r\\n\\r\\n```\\r\\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent.type);\\r\\n```\\r\\n\\r\\nI am fine with this solution but then flow complains that `type` doesn\'t exist so I find myself fixing this with `$FlowFixMe` all over the place.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect that passing a memo component to `findByType` would work. Or that flow would recognize the `type` property of memo components. I think both should work, specially the first option.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nNo, it never worked as far as I know.\\r\\n","number":17301,"user":{"login":"bensampaio"},"state":"open","created_at":"2019-11-07T09:39:23Z"},{"id":519098895,"title":"event handler attached on button triggered later than the one attached on document?","body":"I create a demo like this:\\r\\nrender a button and add onclick event handler on it, then add click event handler on document, when I click the button, click handler added on document triggered before the one added on toggle button.\\r\\n\\r\\nI thought the expected behaviour is trigger click handler on toggle button first since all the event handler is on bubble propagation stage, not in capture stage.\\r\\n\\r\\nhere is the demo code: https://codepen.io/royliu/pen/WNNJOQd?editors=0010\\r\\n\\r\\nReact version: 16.10.2\\r\\nBrowse: Chrome 78\\r\\nOS: MacOS\\r\\n","number":17300,"user":{"login":"kinglywork"},"state":"closed","created_at":"2019-11-07T07:49:22Z"},{"id":519049029,"title":"why use setTimeout in useEffect cause render again and agin","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\nuse setTimout in useEffect cause render again and again, i think it is unexpected.\\r\\n\\r\\n```\\r\\nimport React, { useEffect, useState } from \'react\';\\r\\n\\r\\ninterface IProps {\\r\\n  aText?: string[];\\r\\n  bText?: string[];\\r\\n}\\r\\n\\r\\nexport const Common: React.FC<IProps> = props => {\\r\\n  console.log(\'header\');\\r\\n  const { aText = [], bText = [] } = props;\\r\\n\\r\\n  const [showAText, setShowAText] = useState(\'\');\\r\\n\\r\\n  useEffect(() => {\\r\\n    setShowAText(`a is ${aText[0]}`);\\r\\n    setTimeout(() => {\\r\\n      setShowAText(`b is ${bText[0]}`);\\r\\n    }, 0);\\r\\n  }, [aText, bText]);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <div>{showAText}</div>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nconst Renderer: React.FC = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <Common aText={[\'render\']}></Common>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Renderer;\\r\\n```\\r\\nwhen this code run, the browser console always print \'header\', if i comment  setTimeout, just use ` setShowAText(`b is ${bText[0]}`);`, it will be ok.\\r\\nwhy it is work?\\r\\n\\r\\nmacOS: 10.15.1\\r\\nreact: 16.9.0\\r\\nchrome:  78.0.3904.87\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/14138188/68362232-75523a00-0161-11ea-96ff-3e423394eeff.png)\\r\\n\\r\\n","number":17299,"user":{"login":"shenmafuyunnan1"},"state":"closed","created_at":"2019-11-07T05:25:15Z"},{"id":519047645,"title":"Hotkey for \\"Select an element in the page to inspect it\\" in Chrome extension","body":"Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it\'d still be a great feature to have.\\r\\n\\r\\nTo reiterate, it\'d be great to have a hotkey to trigger the \\"Select an element in the page to inspect it\\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome\'s element inspector mode.","number":17298,"user":{"login":"skoshy"},"state":"open","created_at":"2019-11-07T05:20:54Z"},{"id":519007807,"title":"Hooks and Refs: Setting state before async function causes a null ref","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI found a weird bug that setting the state before calling an async functions nullifies the refs for the rest of that function.\\r\\n\\r\\nIn this example, calling `setData()` before the async function in `handleChange` causes the `ref1.current` to be null. This only happens when the state is set right before the function.\\r\\n\\r\\nIt also only happens in a function component with hooks.\\r\\nhttps://codesandbox.io/s/optimistic-taussig-bxl3s\\r\\n\\r\\n```\\r\\nfunction func() {\\r\\n  return new Promise(resolve => {\\r\\n    setTimeout(() => resolve(true), 1000);\\r\\n  });\\r\\n}\\r\\n\\r\\nfunction App(props) {\\r\\n  const [data, setData] = React.useState(\\"\\");\\r\\n\\r\\n  const ref1 = React.createRef();\\r\\n\\r\\n  function handleChange() {\\r\\n    setData(\\"test\\");\\r\\n    func().then(success => {\\r\\n      console.log(ref1.current); // This prints \'null\', should be the ref\\r\\n    });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <input ref={ref1} onChange={handleChange.bind(this)} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nHere are a few more examples when it works unexpectedly:\\r\\n```\\r\\n  async function handleChange() {\\r\\n    setData(\\"test\\");\\r\\n    await func().then(success => {\\r\\n      console.log(ref1.current); // prints \'null\'\\r\\n    });\\r\\n\\r\\n    console.log(ref1.current); // prints \'null\'\\r\\n  }\\r\\n```\\r\\n\\r\\nIt seems to be related to just the async functions\\r\\n```\\r\\n  function handleChange() {\\r\\n    setData(\\"test\\");\\r\\n    func().then(success => {\\r\\n      console.log(ref1.current); // prints \'null\'\\r\\n    });\\r\\n\\r\\n    console.log(ref1.current); // prints \'<input></input>\' correctly\\r\\n  }\\r\\n```\\r\\n\\r\\n**However, when you remove the state setter, it works correctly**\\r\\n```\\r\\n  async function handleChange() {\\r\\n    // setData(\\"test\\"); commenting the state setter out causes a correct behavior\\r\\n    await func().then(success => {\\r\\n      console.log(ref1.current); // prints \'<input></input>\'\\r\\n    });\\r\\n\\r\\n    console.log(ref1.current); // prints \'<input></input>\'\\r\\n  }\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.11.0 and earlier\\r\\nEdge Chromium/Chrome/Windows 10 (The only ones I\'v tested it on)","number":17297,"user":{"login":"jmbockhorst"},"state":"closed","created_at":"2019-11-07T02:52:36Z"},{"id":518988866,"title":"Adding visible state to Suspense Fallback component to enhance CSS transitions.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature I suppose.\\r\\n\\r\\n**What is the current behavior?**\\r\\nSuspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.\\r\\n","number":17296,"user":{"login":"jimmy-e"},"state":"open","created_at":"2019-11-07T01:41:48Z"},{"id":518944788,"title":"react tab","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17295,"user":{"login":"bmisrah"},"state":"closed","created_at":"2019-11-06T23:17:43Z"},{"id":518757437,"title":"Add a more minimal API for react-test-renderer/shallow","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn order to use `react-test-renderer/shallow` to make shallow snapshots, there are three steps:\\r\\n* Create a new renderer\\r\\n* Render the JSX expression\\r\\n* Get the output\\r\\n\\r\\nConsider the following component.\\r\\n\\r\\n```jsx\\r\\nfunction Small({children}){\\r\\n  return (<small>{children}</small>);\\r\\n}\\r\\nfunction TopHeading({mainText, smallText}){\\r\\n  return (<h1>\\r\\n    {mainText} \\r\\n    {smallText ? (<Small>{smallText}</Small>)}\\r\\n  </h1>);\\r\\n}\\r\\n```\\r\\n\\r\\nIn order to test the compositional logic of `TopHeading` with a shallow snapshot test, the following code is necessary:\\r\\n\\r\\n```jsx\\r\\nimport {ShallowRenderer} from \'react-test-renderer/shallow\';\\r\\n\\r\\nconst headingWithSmallText = (<TopHeading mainText=\\"Hello\\" smallText=\\"World\\" />);\\r\\nconst renderer = ShallowRenderer.createRenderer();\\r\\nrenderer.render(headingWithSmallText);\\r\\nconst headingWithSmallTextShallowRendered = renderer.getRenderOutput();\\r\\nexpect(headingWithSmallTextShallowRendered).toMatchInlineSnapshot(`\\r\\n  <h1>\\r\\n    Hello\\r\\n   <Small>\\r\\n      World\\r\\n    </Small>\\r\\n  </h1>\\r\\n`);\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIt would be great to have one function, preferably named \\"shallow\\", that would do many of those steps.  My test could then read as follows:\\r\\n```jsx\\r\\nimport {shallow} from \'react-test-renderer/shallow\';\\r\\n\\r\\nconst headingWithSmallText = (<TopHeading mainText=\\"Hello\\" smallText=\\"World\\" />);\\r\\nexpect(shallow(headingWIthSmallText)).toMatchInlineSnapshot(`\\r\\n  <h1>\\r\\n    Hello\\r\\n    <Small>\\r\\n      World\\r\\n    </Small>\\r\\n  </h1>\\r\\n`);\\r\\n```\\r\\nThis would only need to be a wrapper around the more complicated version above, and `ShallowRenderer` would not change its API, requiring no one to change their code.","number":17294,"user":{"login":"JoelCodes"},"state":"closed","created_at":"2019-11-06T20:57:43Z"},{"id":518728609,"title":"[react-interactions] Add optional searchNodes to Scope.queryAllNodes","body":"The experimental React Scopes API has a method available when using a ref called `queryAllNodes`. Previously, this expected only a scope query function, but now with this PR, can additionally take an optional array of DOM nodes that will also be included in the host component search in a scope. This was an internal request, so that we can easily merge different scope queries together, and the existing focused elements without causing bugs in the UI.","number":17293,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-06T20:37:02Z"},{"id":518676740,"title":"Error: \\"Could not find commit data for root \\"729\\" and commit 2\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Viewing a component within Storybook\\r\\n2. Opened Profiler\\r\\n3. Changed the target from Root to Story\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\\r\\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\\r\\n\\r\\nComponent stack: in sc\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17292,"user":{"login":"elliott-greaves-babylon-health"},"state":"closed","created_at":"2019-11-06T19:11:13Z"},{"id":518649525,"title":"[react-interactions] Change unmount blur logic to a dedicated event","body":"This PR clears up some confusion internally and aligns the behavior of an unmounted node with focus to a specific unique event. This means we can also dispatch a new specific event for this action from the Focus Responder \u2013 removing the issues that might arise from mixing it with the existing `blur` and `focus` logic. I\'ve opted to call the event `detachedvisiblenode` or `onDetachedVisibleNode` \u2013 but better names are surely out there!","number":17291,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-06T18:22:37Z"},{"id":518594077,"title":"[react-dom] hydrate / render fail  in document with xhtml doctype ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen using an xhtml doctype (hbbtv in this case) react-dom.hydrate/render fails with \\r\\n```\\r\\n  TypeError: right-hand side of \'in\' should be an object, got undefined react-dom.production.min.js:50:314\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n[codesandbox hydrate fail replication](https://codesandbox.io/s/thirsty-blackburn-zn50y)\\r\\n[codesandbox render fail replication](https://codesandbox.io/s/prod-surf-fdg7f)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWhen using an xhtml doctype react-dom.hydrate/render completes.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n(at least)\\r\\n- react 16.11.0, 16.8.6\\r\\n- react-dom 16.11.0, 16.8.6\\r\\n\\r\\nBrowsers affected: (at least)\\r\\n- Firefox (MacOS 10.14.6) 70.0.1 (64-bit) \\r\\n- Safari (MacOS 10.14.6) Version 13.0.3 (14608.3.10.10.1)\\r\\n- Chrome (MacOS 10.14.6) Version 78.0.3904.87 (Official Build) (64-bit)\\r\\n- Chrome (Win 8.1) Version 76.0.3809.132 (Official Build) (32-bit)\\r\\n\\r\\nNot affected: (at least)\\r\\n- IE 11 (Win 8.1) ","number":17290,"user":{"login":"sulmanen"},"state":"closed","created_at":"2019-11-06T16:42:53Z"},{"id":518583252,"title":"[Flight] Better compat with http.createServer","body":"Don\'t know if we care in longer term but I use `http.createServer` for testing and that has older Node streams. They don\'t have `cork` and `uncork`. Also the `flush` on that object was misleading (because it was only used for flushing headers) so it fires a deprecation warning.\\r\\n\\r\\nThat\'s a few workarounds to make it work with `http.createServer`. Maybe we\'ll remove it later but that\'s the most convincing way to \\"really\\" test it that I found so far.","number":17289,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-06T16:26:03Z"},{"id":518321841,"title":"How to get react component Name inside componentDidCatch in producation build?","body":"How to get react component Name inside componentDidCatch in producation build?\\r\\n\\r\\nI used error boundary inside (componentDidCatch)I want to log which react component is break in producation build.\\r\\nconclusion is get react component Name inside componentDidCatch in producation build.","number":17288,"user":{"login":"slgauravsharma"},"state":"closed","created_at":"2019-11-06T08:42:16Z"},{"id":518309251,"title":"ReactDOM.render adds  \\" \\" or replaces \' \' with \\" \\" for background and background-image for the inside URL not the outer","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen I use `ReactDOM.render(element, span) ` it will add \\" \\" around a url for background-image, it will replace \' \' with \\" \\". This is causing a problem when trying to render the page in HTML as I end up with <div style=\\"background-image: url(\\"example.png\\");\\"></div>\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/beautiful-keldysh-zibhp\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nTo not add extra \\" \\" to background-image urls\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.6","number":17287,"user":{"login":"volkandkaya"},"state":"closed","created_at":"2019-11-06T08:14:05Z"},{"id":518280857,"title":"Problem with correct routing in a React project","body":"I have a trouble with correct routing in React project. \\r\\nWhen I go into \\"Heroes\\" route, there is a list of \\"heroes\\" (this is a blog). I can open a document by id-made link. When I open the document, and then click on \\"Heroes\\", it is not rendered. It will render if I only the first open the main page or \\"about\\", and then open \\"Heroes\\". Maybe someone can tell me, how to fix this, looking at the code below. Will be very grateful for any help!\\r\\n\\r\\nApp.jsx\\r\\n```\\r\\nimport React, { Component } from \'react\';\\r\\nimport { BrowserRouter, Switch, Route, Link } from \'react-router-dom\';\\r\\nimport Heroes from \'./components/Heroes\';\\r\\nimport About from \'./components/About\';\\r\\nimport { ApolloProvider } from \'@apollo/react-hooks\';\\r\\n\\r\\nimport ApolloClient from \'apollo-boost\';\\r\\n\\r\\nconst client = new ApolloClient({\\r\\n  uri: \'http://localhost:5555/graphql\',\\r\\n});\\r\\n\\r\\nclass App extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <ApolloProvider client={client}>\\r\\n        <BrowserRouter>\\r\\n          <>\\r\\n            <Header />\\r\\n            <div className=\\"container\\">\\r\\n              <Switch>\\r\\n                <Route path=\\"/\\" exact component={Home} />\\r\\n                <Route path=\\"/heroes\\" component={Heroes} />\\r\\n                <Route path=\\"/about\\" component={About} />\\r\\n              </Switch>\\r\\n            </div>\\r\\n          </>\\r\\n        </BrowserRouter>\\r\\n      </ApolloProvider>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst Header = () => (\\r\\n  <nav>\\r\\n    <div className=\\"container\\">\\r\\n      <div className=\\"nav-wrapper\\">\\r\\n        <Link to=\\"/\\" className=\\"brand-logo\\">\\r\\n          <i className=\\"material-icons\\">home</i>\\r\\n        </Link>\\r\\n        <ul id=\\"nav-mobile\\" className=\\"right hide-on-med-and-down\\">\\r\\n          <li>\\r\\n            <Link to=\\"/heroes\\">Heroes</Link>\\r\\n          </li>\\r\\n          <li>\\r\\n            <Link to=\\"/about\\">About</Link>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n    </div>\\r\\n  </nav>\\r\\n);\\r\\n\\r\\nconst Home = () => (\\r\\n  <>\\r\\n    <h3>Fullstack Express-Apollo-React</h3>\\r\\n  </>\\r\\n);\\r\\n\\r\\nexport default App;\\r\\n```\\r\\n\\r\\nHeroes.jsx\\r\\n```\\r\\nimport React, { Component } from \'react\';\\r\\nimport gql from \'graphql-tag\';\\r\\nimport { Query } from \'react-apollo\';\\r\\nimport { BrowserRouter, Switch, Route, Link } from \\"react-router-dom\\";\\r\\nimport Hero from \'./Hero\';\\r\\n\\r\\nconst heroes = gql`\\r\\n  {\\r\\n    heroes {\\r\\n      _id\\r\\n      title\\r\\n      description\\r\\n      date\\r\\n    }\\r\\n  }\\r\\n`;\\r\\n\\r\\nclass Heroes extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <BrowserRouter>\\r\\n          <Switch>\\r\\n            <Query query={heroes}>\\r\\n              {({ loading, error, data }) => {\\r\\n                if (loading) return <p>Loading...</p>;\\r\\n                if (error) return <p>Error :(</p>;\\r\\n                return data.heroes.map(hero => (\\r\\n                  <div key={hero._id}>\\r\\n                    <Route\\r\\n                      exact\\r\\n                      path={`/heroes/${hero._id}`}\\r\\n                      render={() => <Hero data={hero} />}\\r\\n                    />\\r\\n                    <Route\\r\\n                      exact\\r\\n                      path=\\"/heroes\\"\\r\\n                      component={Home}\\r\\n                    />\\r\\n                  </div>\\r\\n                ));\\r\\n              }}\\r\\n            </Query>\\r\\n          </Switch>\\r\\n        </BrowserRouter>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst Home = () => {\\r\\n  console.log(\\"lkjlkjlkjlkjlk\\");\\r\\n  return (\\r\\n    <Query query={heroes}>\\r\\n      {({ loading, error, data }) => {\\r\\n        if (loading) return <p>Loading...</p>;\\r\\n        if (error) return <p>Error :(</p>;\\r\\n        return data.heroes.map(hero => (\\r\\n          <div key={hero._id}>\\r\\n            <Link to={`/heroes/${hero._id}`}>\\r\\n              <h3>{hero.title}</h3>\\r\\n            </Link>\\r\\n            <h5>{hero.description}</h5>\\r\\n          </div>\\r\\n        ));\\r\\n      }}\\r\\n    </Query>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Heroes;\\r\\n```\\r\\n\\r\\nHero.jsx\\r\\n```\\r\\nimport React, { Component } from \'react\';\\r\\nimport { BrowserRouter, Switch, Route } from \\"react-router-dom\\";\\r\\nimport Heroes from \'./Heroes\';\\r\\n\\r\\nclass Hero extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <>\\r\\n        <BrowserRouter>\\r\\n          <Switch>\\r\\n            <Route\\r\\n              exact\\r\\n              path=\\"/heroes\\"\\r\\n              component={Heroes}\\r\\n            />\\r\\n          </Switch>\\r\\n        </BrowserRouter>\\r\\n        <h5>{this.props.data.title}</h5>\\r\\n        <h5>{this.props.data.description}</h5>\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default Hero;\\r\\n```\\r\\n\\r\\nHere is the link to the repository:\\r\\n[express-apollo-react](https://github.com/narzantaria/express-apollo-react)\\r\\nThanks in advance!","number":17286,"user":{"login":"narzantaria"},"state":"closed","created_at":"2019-11-06T07:03:40Z"},{"id":518263488,"title":"[Flight] Basic Streaming Suspense Support","body":"This adds basic Suspense support to Flight by streaming the response.\\r\\n\\r\\nFirst it sends one line with the root JSON model. Within the model holes are replaced with \\"$\\" followed by a hex ID. E.g. \\"$12AB3\\".\\r\\n\\r\\nSubsequent lines begin with \\"J\\" followed by a hex ID.\\r\\n\\r\\nSo an example response may look something like:\\r\\n\\r\\n```\\r\\n{\\"some\\":{\\"json\\":\\"$1\\"},data:[\\"$1\\",\\"$2\\"]}\\r\\nJ1:{\\"more\\":\\"data\\"}\\r\\nJ2:{\\"even\\":\\"more\\"}\\r\\n```\\r\\n\\r\\nThe client suspends if you try to access an unresolved value. Once a new line comes in it unsuspends that part of the model.\\r\\n\\r\\nCurrently this suspending is implemented as a getter but it could also be a Proxy. However, more likely is that we\'ll hide this behind an explicit API that unwraps both components and its data in the future.\\r\\n\\r\\n## Errors\\r\\n\\r\\nIf the server errors while rendering one of the models that error is encoded with an \\"E\\" prefix:\\r\\n\\r\\n```\\r\\n{\\"bad\\":\\"$1\\",\\"good\\":\\"$2\\"}\\r\\nE1:{\\"message\\":\\"An error happened\\",\\"stack\\": \\"\\\\n...\\"}\\r\\nJ2:{\\"this\\":\\"worked\\"}\\r\\n```\\r\\n\\r\\nWhen this happens, the previously suspended part of the model now resolves and starts throwing an error on the client. This will then be caught by an error boundary on the client. Unrelated parts of the response can still continue rendering though.\\r\\n\\r\\nIf the connection dies, then all remaining pending promises resolve and start throwing an error which are caught by error boundaries. Previously resolved parts don\'t error though.\\r\\n\\r\\nThere\'s a prioritization scheme so errors are emitted at lower priority in the stream than models.\\r\\n\\r\\n## Future Additions\\r\\n\\r\\nI added a comment describing the protocol. The protocol also includes space for a few other types of data.\\r\\n\\r\\n- _URL_: This can be used to emit URL rows at higher priority than models and can be used to preload other resources without waiting for or even parsing the JSON models yet.\\r\\n- _Blob_: Traditionally sending binary data is a PITA in existing protocol. We should just have this built-in. It\'s especially efficient with modern stream APIs. This is important in data heavy use cases like data viz.\\r\\n- _HTML_: Instead of encoding HTML inside JSON we can just send it as raw HTML for faster parsing and more efficient size. We can also encode that we generated this HTML (using React SSR with proper data structures) in the encoding. So we can by-pass dangerouslySetInnerHTML and just provide a React element that can be rendered directly.","number":17285,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-06T06:17:46Z"},{"id":518203349,"title":"[Failing tests] startTransition invalidates downstream memoizations","body":"Like `dispatch` or `setState`, we should return the same `startTransition` function on every render. This prevents it from invalidating downstream memoizations, like `useCallback`.\\r\\n\\r\\nWe do use `useCallback` internally so that a new `startTransition` is only created when the config object changes. However, if you pass an object, this does nothing because the object different every time.\\r\\n\\r\\nPotential fixes:\\r\\n\\r\\n- Instead of detecting changes in the config object, compare the fields (`timeoutMs` et al) directly. This fixes the worst case (inline config object) but still means we\'ll occasionally re-create `startTransition` functions.\\r\\n- Track the current config object on an internal mutable field using an effect and read from that instead of binding a new method each time. This requires extra work in the commit phase, but combined with the previous option (comparing the fields instead of the entire config object) that should be rare.\\r\\n- Instead of passing the config object to the `useTransition` hook, pass it to the `startTransition` function. This avoids needing to bind the config object to the method. Slightly less ergonomic, however, we\'re planning to change the default config object so that it\'s not needed in most cases. So it\'s only in special cases that you\'d actually use one. **This is the most likely option**.","number":17284,"user":{"login":"acdlite"},"state":"open","created_at":"2019-11-06T02:51:25Z"},{"id":518079744,"title":"Added a DevTools store test for component names","body":"Follow up to #17274\\r\\n\\r\\n1. Add a Store test for display name handling for `memo`, `forwardRef`, and `lazy` components.\\r\\n2. Remove outdated dead code for `React.lazy`.\\r\\n3. Update DT tests to include HOC badge names in the serialized store","number":17283,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-11-05T22:10:47Z"},{"id":518064305,"title":"Update deepDiffer usage in React Native renderer","body":"React Native exposes a function, `deepDiffer`, which `react-native-renderer` uses to compute prop updates. This comparison function has surprising behaviour when it comes to function values: it will treat any two functions as equal, entirely ignoring function identity. \\r\\n\\r\\nhttps://github.com/facebook/react-native/commit/99d229e186e1e5d08cb1fc417b4b911ade7aef33 added an explicit flag to switch this surprising behaviour on or off - the default behaviour is unchanged at the moment, but I plan to change it eventually once I\'ve accounted for all existing call sites.\\r\\n\\r\\nThis PR opts `react-native-renderer` _into_ the surprising behaviour (it\'s the one place it actually makes sense, and probably where it originated - see e.g. [this comment](https://github.com/facebook/react/blob/053cf0fedc91a1507080afe43d3be354ec346e9e/packages/react-native-renderer/src/__tests__/ReactNativeAttributePayload-test.js#L209-L210)). I\'ve also updated the vendored `deepDiffer` mock to match the version currently in React Native master, and added a test explicitly covering this behaviour.","number":17282,"user":{"login":"motiz88"},"state":"closed","created_at":"2019-11-05T21:48:59Z"},{"id":518001617,"title":"react-refresh: Dependent functions/data don\'t trigger refresh","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBoth/neither?\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCurrently, react-refresh marks each component whose `type` and/or `signature` has changed as \\"dirty\\" and will either re-render or re-mount those components selectively.\\r\\n\\r\\nThe problem occurs when the dev tooling (webpack, parcel, etc.) loads a module that exports functions or data that are used inside of components, but aren\'t registered components themselves. For example, a utility function that concatenates a string:\\r\\n\\r\\n```js\\r\\nexport greet(name) {\\r\\n  return `Hello, ${name}!`;\\r\\n}\\r\\n```\\r\\n\\r\\nChanging the returned string to `Yo, ${name}!` would trigger this module to reload in the browser, but because components which depended on it don\'t reload, the old greeting will persist \\r\\nuntil the next render of each dependent component.\\r\\n\\r\\n(BTW in actuality, some tooling will reload immediate dependents of modules that are reloaded in order to get around similar problems. You can extend the dependency chain from two to three modules, where `a.js` depends on `b.js` depends on `c.js`, and you will get the same result when editing `c.js`)\\r\\n\\r\\nWhat this forces tooling to do is apply a heuristic to try and guess whether a given module should be refreshed, vs. completely restart the app in order to cause all components to re-mount and pick up any changes that wouldn\'t be picked up by react-refresh.\\r\\n\\r\\nThe problems with the heuristic approach is:\\r\\n- each dev tool needs to implement this logic, leading to more potential for bugs\\r\\n- it leads to a degradation of hot reloading capabilities based on what your module exports. not obvious at all on it\'s face and will lead people to twisting their code base to route around this\\r\\n- It\'s very unfriendly to compile-to-JS languages like ReasonML, ClojureScript, etc. which might have different default semantics for what is public / private, different conventions for naming components, etc. which make it difficult to detect whether a module is \\"safe\\" to refresh\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThat components depended on newly loaded code will pick up those changes correctly, without losing state.\\r\\n\\r\\nA potential (maybe naive?) solution to this in react-refresh is, instead of only re-rendering the components marked as dirty (due to a different `type` being registered), to _re-render from the root_ while maintaining hooks state. If components\' signatures have changed, then re-mount.\\r\\n\\r\\nI\'ve read through and kind of grok most of the code in react-refresh, but I\'m not sure how this would impact the way that the reconciler currently handles the HMR stuff. This is as much of a question, as it is a request: could this be a viable solution?\\r\\n\\r\\nI appreciate your time and energy in reading through this. I\'m very excited about having first-class support for hot reloading in React, as it\'s been something that I\'ve loved ever since seeing the first demo of it. I hope that this issue can help create a way to provide a consistently excellent dev experience across tools/platforms/languages!\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.11","number":17281,"user":{"login":"Lokeh"},"state":"open","created_at":"2019-11-05T20:13:09Z"},{"id":517957131,"title":"useContext hook - Invalid attempt to destructure non-iterable instance","body":"Randomly getting error ***\\"Invalid attempt to destructure non-iterable instance\\"*** on useContext.\\r\\n\\r\\nconsole error -> https://prnt.sc/psvrcn\\r\\nsource file -> https://github.com/aedilyan/simple-react-app/blob/master/src/components/header/Header.js#L11\\r\\n\\r\\nas a workaround I use conditional assignment e.g. Array.isArray(useContext(AuthContext)) ? useContext(AuthContext) : [{}, function(){}];\\r\\n\\r\\nPlease advice!\\r\\n\\r\\n ","number":17280,"user":{"login":"aedilyan"},"state":"closed","created_at":"2019-11-05T18:41:52Z"},{"id":517917173,"title":"It\'s confusing that useTransition doesn\'t do anything outside of user-blocking events","body":"I ran into this when implementing Back button transition in a router. Because the transition is inside a browser `popstate` event, it gets batched with the low pri update, and the pending state doesn\'t appear.\\r\\n\\r\\nI had to do [this](https://github.com/gaearon/suspense-experimental-github-demo/blob/cb75d1a71847be85e1365d8b33f766a0d0e21463/src/createRouter.js#L68-L69) to work around it but it\'s unfortunate. We might want to fix this by treating pending state as special. Or maybe a warning \u2014 but then we need a first-class official API for opting into user blocking pri.","number":17279,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-11-05T17:29:14Z"},{"id":517858075,"title":"Fix react-is memo and lazy type checks","body":"I think the `react-is` package is currently a little broken. This packages `typeOf` methods are meant to look at React _element_ types (e.g. `<MyComponent />` or `React.createElement(MyComponent)`) not _component_ types (e.g. `MyComponent`), but it\'s inconsistent when it comes to lazy and memo types.\\r\\n\\r\\nThis inconsistency can be seen in shallow renderer as well with invariants like this:\\r\\n```js\\r\\nisForwardRef(element) || (typeof element.type === \'function\' || isMemo(element.type)),\\r\\n```\\r\\nRather than this:\\r\\n```js\\r\\nisForwardRef(element) || (typeof element.type === \'function\' || isMemo(element)),\\r\\n```\\r\\n\\r\\nIs this change a bug fix or a breaking change? (Or both?) Let\'s discuss.\\r\\n\\r\\nPut another way:\\r\\n```js\\r\\nconst MemoizedComponent = React.memo(MyComponent);\\r\\n\\r\\n// MemoizedComponent is a valid element TYPE.\\r\\nexpect(ReactIs.isValidElementType(MemoizedComponent)).toBe(true);\\r\\n\\r\\n// <MemoizedComponent /> is a valid element.\\r\\nexpect(ReactIs.typeOf(<MemoizedComponent />)).toBe(ReactIs.Memo);\\r\\nexpect(ReactIs.isMemo(<MemoizedComponent />)).toBe(true);\\r\\n\\r\\n// MemoizedComponent is NOT an element!\\r\\n// (This used to return a false positive.)\\r\\nexpect(ReactIs.isMemo(MemoizedComponent)).toBe(false);\\r\\n```","number":17278,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-11-05T15:50:35Z"},{"id":517645590,"title":"SuspenseList blocks rendering of later items entirely, not just revealing / committing","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug / unexpected behaviour (Possibly unclear documentation rather than code)\\r\\n\\r\\n**What is the current behavior?**\\r\\nSuspenseList appears to block rendering of later items altogether, rather than simply \\"revealing\\" them later.\\r\\nThis might be a documentation / expectations issue rather than a bug in SuspenseList itself.\\r\\n\\r\\nI\'ve implemented the \\"render-then-fetch\\" pattern in a simple naive manner. The first time a `SuspendingItemInner` is rendered, it immediately creates and throws a promise with a short delay to simulate data-loading.\\r\\n\\r\\n\\r\\nhttps://codesandbox.io/s/suspenselist-blocks-render-instead-of-in-memory-render-react-bug-utke2\\r\\n\\r\\nIn the example, these delays are 1 second, 2 seconds, 1 second, 2 seconds, 1 second, using `<SuspenseList revealOrder=\\"forwards\\" tail=\\"collapsed\\">` to wrap them.\\r\\n\\r\\n_What I see is:_\\r\\n * First item suspends. Console logs `Starting load of promise #0 with 1 second delay` . One second later, it unsuspends.\\r\\n * Second item suspends. Console logs `Starting load of promise #1 with 2 second delay` . Two seconds later, it unsuspends.\\r\\n * Third item suspends. Console logs `Starting load of promise #2 with 1 second delay` . One second later, it unsuspends.\\r\\nEtc.\\r\\n\\r\\n_What I\'m expecting (hoping?) to see:_\\r\\n * First item suspends. Console logs `Starting load of promise #X with N second delay` for all 5 components. One second later, it unsuspends.\\r\\n * Second item suspends. Since its required data should have started one second ago, we wait for one second. It unsuspends, as do all the rest of the items.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nMy understanding of Suspense + Concurrent Mode from reading various maintainer tweets / posts is that React will attempt to render ahead as much as possible in-memory. As such, I would expect later items in a SuspenseList to start being rendered even after previous ones have chosen to Suspend. (I guess I\'d expect the entire list to have Suspended in parallel.)\\r\\n\\r\\nNote you can \\"fix\\" this by forcing all the components to render at the same time by uncommenting lines 61 to 67, because it kicks off all the data loading immediately.\\r\\nI\'m guessing if SuspenseList is working as intended, the \\"solution\\" is to hoist data-fetching upwards (to get to the render-as-you-fetch pattern.)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n`react@0.0.0-experimental-f6b8d31a7`\\r\\n\\r\\n(p.s. loving experimenting with Suspense + Concurrent Mode, it\'s a very smooth experience and I\'m excited to see it implemented in more libraries / usable in production!)","number":17277,"user":{"login":"Winwardo"},"state":"closed","created_at":"2019-11-05T09:19:56Z"},{"id":517644391,"title":"Unexpected value order with useTransition","body":"The order of returned values in useTransition is opposite to what I consider to be an established pattern of `[value, function]`.\\r\\n\\r\\nCurrent: `const [startTransition, isPending] = useTransition()`.\\r\\nExpected: `const [isPending, startTransition] = useTransition()`.\\r\\nAlso fine: `const { startTransition, isPending } = useTransition()`.\\r\\n\\r\\n## Rationale\\r\\n\\r\\nThe order is in my opinion inconsistent with other hooks, built-in and community hooks, and this inconsistency is somewhat bothersome on the aesthetic level.\\r\\n\\r\\nUsers without tooling support (TypeScript et al) will see `Uncaught TypeError: startTransition is not a function` error whenever they get the order wrong.\\r\\n\\r\\nHaving this insonsistency risks reducing the strength of the convention in the community, making hooks less convenient to use overall.\\r\\n\\r\\n## Built-in hooks\\r\\n\\r\\n```js\\r\\nconst [state, setState] = useState();\\r\\nconst [state, dispatch] = useReducer();\\r\\nconst [startTransition, isPending] = useTransition();\\r\\n```\\r\\n\\r\\n## Community examples\\r\\n\\r\\nI have done a quick overview of positional returned values from hooks in the community. Hooks that use `[value, function]` pattern:\\r\\n\\r\\n[useImmer](https://github.com/immerjs/use-immer#useimmer), [streamich/react-use](https://github.com/streamich/react-use) ([useTimeout](https://github.com/streamich/react-use/blob/master/docs/useTimeout.md), [useSessionStorage](https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md), [useLockBodyScroll](https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md), [useLocalStorage](https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md), [useToggle](https://github.com/streamich/react-use/blob/master/docs/useToggle.md)) [bdbch/react-localstorage](https://github.com/bdbch/react-localstorage), [rehooks/local-storage](https://github.com/rehooks/local-storage), [react-rekindle/use-request](https://github.com/react-rekindle/use-request).\\r\\n\\r\\nHooks that use `[function, value]` pattern: none.\\r\\n\\r\\n## Is second value optional?\\r\\n\\r\\nOne could argue that, unlike with other examples, useTransition does not require the user to care about the `isPending` value. However, not using isPending creates a poor UX that the extisting React docs explicitly call out as a problem. We\u2019re supposed to care about isPending. ([docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#adding-a-pending-indicator-adding-a-pending-indicator)).\\r\\n\\r\\nBesides, even with corrected value order, the user can still ignore isPending at a low cost of an explicit parameter skip (`const [, startTransition] = useTransition()`).\\r\\n\\r\\n## Can we return an object?\\r\\n\\r\\nuseState returns a list for convenient aliasing:\\r\\n\\r\\n```ts\\r\\nconst [color, setColor] = useState();\\r\\nconst [position, setPosition] = useState();\\r\\n```\\r\\n\\r\\nFor hooks that a single component uses only once the benefit is significantly reduced and the community often chooses to return an object with named values instead. This removes the problem of getting positioned values incorrectly and is more inline with the broader JavaScript ecosystem.\\r\\n\\r\\nI am speculating here, but it seems like a component will often only have one transition, like [the Button example in the docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#baking-transitions-into-the-design-system-baking-transitions-into-the-design-system). In that case it seems beneficial to return named values and reserve the positioned return values for cases where it really matters.\\r\\n","number":17276,"user":{"login":"denis-sokolov"},"state":"open","created_at":"2019-11-05T09:17:35Z"},{"id":517530511,"title":"Is it possible to share contexts between renderers?","body":"**What is the current behavior?**\\r\\n\\r\\nHey \ud83d\udc4b I maintain [react-pdf](https://github.com/diegomura/react-pdf). Thanks for your awesome work and making `react-reconciler` for us to use! \\r\\n\\r\\n I\'ve got many issues  lately regarding context not working on my library and when doing tests I found out that context values aren\'t shared between renderers. This makes it impossible to share state such as themes, i18n, redux and more. As a bit of context, React-pdf is not a primary renderer, and as such, when used in the browser it runs on top of react-dom.\\r\\n\\r\\nI found the `isPrimaryRenderer` reconciler option that\'s supposed to be used for \\"multiple renderers concurrently render using the same context objects\\" but still any access of the context inside react-pdf components get\'s just the initial value (even if the context was updated with other value). The same happens for `react-art` that also set `isPrimaryRenderer=false`.\\r\\n\\r\\n**Minimal demo**\\r\\n\\r\\nI prepared a quick demo using react-art so you can see how it currently works:\\r\\n\\r\\nhttps://codesandbox.io/s/pedantic-hill-54kid?fontsize=14\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nShare contexts between renderers when using `isPrimaryRenderer` config. Is there a way of achieving this? Am I missing something?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: 16.11.0\\r\\nReact-dom: 16.11.0\\r\\n","number":17275,"user":{"login":"diegomura"},"state":"closed","created_at":"2019-11-05T03:39:28Z"},{"id":517493931,"title":"Fix devtools displaying Anonymous for memo of ref-forwarding components","body":"Resolves #16722 \\r\\n\\r\\nThis PR addresses the following issues:\\r\\n- `react-devtools-shared` not displaying the proper displayName for `memo(forwardRef(C))`\\r\\n- ~`react-is`\'s `typeOf` not accounting for `forwardRef` components/functions. It\'s currently accounting for `forwardRef` elements only.~ (Fixed in #17278 \ud83c\udf89)\\r\\n\\r\\n#### Problem: devtools not displaying the proper displayName for `memo(forwardRef(C))`\\r\\n\\r\\nI encountered an issue with React dev-tools where it no longer infers the proper display name of a component wrapped with both `memo` and `forwardRef`. The display name in this case is shown as \\"Anonymous\\".\\r\\n\\r\\nConsider the following example:\\r\\n\\r\\n```jsx\\r\\nconst HelloWorld = () => <div>Hello, World!</div>;\\r\\n\\r\\nconst RefForwarding = React.forwardRef(HelloWorld);\\r\\nconst MemoizedRefForwarding = React.memo(RefForwarding);\\r\\n```\\r\\n\\r\\nWhen I render `<MemoizedRefForwarding />`, the React devtools shows the following:\\r\\n\\r\\n<img width=\\"373\\" alt=\\"Screen Shot 2019-11-04 at 7 47 01 PM\\" src=\\"https://user-images.githubusercontent.com/2100222/68169976-08aa2600-ff3c-11e9-81e3-7272ce313bc3.png\\">\\r\\n\\r\\nNotice how the `Memo` component is displayed as \\"Anonymous\\"\\r\\n\\r\\nWhat I would expect is the following (taken after using the attempted fix):\\r\\n\\r\\n<img width=\\"307\\" alt=\\"Screen Shot 2019-11-04 at 7 46 22 PM\\" src=\\"https://user-images.githubusercontent.com/2100222/68169994-1e1f5000-ff3c-11e9-898b-4f2b9f429fa2.png\\">\\r\\n\\r\\nThe `Memo` component is now properly displayed as \\"MemoizedRefForwarding\\"\\r\\n\\r\\n#### Solution\\r\\n\\r\\nI traced down the problem and found that `react-devtools-shared` has a [shared helper function `getDisplayName`](https://github.com/facebook/react/blob/0f3838a01b0fda0ac5fd054c6be13166697a113c/packages/react-devtools-shared/src/utils.js#L40-L62) that expects a function. This `getDisplayName` function is being [used by `getDisplayNameForFiber`](https://github.com/facebook/react/blob/0f3838a01b0fda0ac5fd054c6be13166697a113c/packages/react-devtools-shared/src/backend/renderer.js#L330) in `backend/renderer.js`.\\r\\n\\r\\nWhile this works for most fibers with their `type` as the component function itself, `forwardRef` and `memo` have a slightly different `type`.\\r\\n\\r\\nIn the case of `memo(forwardRef(C))`, the `type` of the memo element is the `forwardRef` object, not the component function itself (which `getDisplayName` expects), so we need to extract that type off of `forwardRef`.\\r\\n\\r\\nI solved this problem by adding a `resolveFiberType` that will attempt to \\"resolve\\" the type value, if the type of the fiber node happens to be an object, before passing it to `getDisplayName`. Since this is doing recursion it will cover `memo(C)`, `forwardRef(C)` , and `memo(forwardRef(C))`.\\r\\n\\r\\nI\'m not quite sure if that\'s the best possible way to approach this problem since it\'s my first time contributing to the React codebase \ud83d\ude2c so I\'m not super familiar with it yet. I\'d love some direction if there\'s a better way of handling this.\\r\\n\\r\\n#### ~Problem (2) - `react-is`\'s `typeOf` not accounting for `forwardRef` HOCs~\\r\\n\\r\\n<details>\\r\\n<summary>Outdated Comment (Issue was resolved in in #17278)</summary>\\r\\n<br />\\r\\nTo fix the devtools issue mentioned above, I wanted to use `react-is`\'s helpers. Specifically, `isMemo`, and `isForwardRef`. \\r\\n\\r\\nLooks like there\'s an outstanding issue with both of `ReactIs.isForwardRef` and `ReactIs.typeOf` where they don\'t respect a `forwardRef` HOC. It currently only works with elements created from a `fowardRef` component. \\r\\n\\r\\n```js\\r\\nconst RefForwardingComponent = React.forwardRef((props, ref) => null);\\r\\n\\r\\nReactIs.typeOf(RefForwardingComponent) // undefined\\r\\nReactIs.isForwardRef(RefForwardingComponent) // false\\r\\n\\r\\nReactIs.typeOf(<RefForwardingComponent />) // ReactIs.ForwardRef\\r\\nReactIs.isForwardRef(<RefForwardingComponent />) // true\\r\\n```\\r\\n\\r\\nI\'m not sure if this is by design or intentional, but **it does seem inconsistent with how `isMemo` works**.\\r\\n\\r\\nI made a 1-line change to `react-is` in this PR so that it respects `forwardRef` HOCs (the actual components/functions) not just the elements. Are there any pitfalls to know?\\r\\n\\r\\n```js\\r\\nconst RefForwardingComponent = React.forwardRef((props, ref) => null);\\r\\n \\r\\n// notice how I\'m not passing an actual element\\r\\nReactIs.typeOf(RefForwardingComponent) // ReactIs.ForwardRef\\r\\nReactIs.isForwardRef(RefForwardingComponent) // true\\r\\n```\\r\\n</details>","number":17274,"user":{"login":"wsmd"},"state":"closed","created_at":"2019-11-05T01:17:02Z"},{"id":517456991,"title":"useTransition\'s startTransition function can result in infinite loop when it\'s included as a useEffect dependency","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI\'ve narrowed it down to this:\\r\\n\\r\\nhttps://codesandbox.io/s/usetransition-useeffect-dependency-issue-2olmx\\r\\n\\r\\nBasically, what I *think* is important is:\\r\\n\\r\\n1. There\'s a state change resulting in the useEffect being called\\r\\n2. The useEffect callback starts a transition\\r\\n3. The transition callback sets state\\r\\n4. The set state results in a render which suspends\\r\\n\\r\\nIf these are all the case, then including the `startTransition` function in the dependency array will trigger an infinite loop. In the codesandbox I have a safety in place so your browser doesn\'t fall over.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe `startTransition` function should be consistent between renders.\\r\\n\\r\\nI\'ve observed that if you do not inline the config to `useTransition` then this is not a problem. I know that the docs recommend keeping this config consistent, but if this is desirable behavior, then maybe a warning about this particular situation in the docs would be useful. I expect that inlining the config will be pretty natural for people.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- react@0.0.0-experimental-f6b8d31a7\\r\\n- react-dom@0.0.0-experimental-f6b8d31a7","number":17273,"user":{"login":"kentcdodds"},"state":"open","created_at":"2019-11-04T23:12:15Z"},{"id":517448819,"title":"When calling a useTransition startTransition callback outside of event handlers, isPending is never set to true","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`isPending` is never set to true when calling `startTransition` within `useEffect`, but it *does* work properly when within a `useLayoutEffect`.\\r\\n\\r\\nhttps://codesandbox.io/s/usetransition-useeffect-issues-p1j9s\\r\\n\\r\\nHere\'s the correct behavior (accomplished via `useLayoutEffect`):\\r\\n\\r\\n![good](https://user-images.githubusercontent.com/1500684/68164575-662d7b00-ff1a-11e9-9d02-71d7a22fd5cf.gif)\\r\\n\\r\\nHere\'s the incorrect behavior (via `useEffect`):\\r\\n\\r\\n![bad](https://user-images.githubusercontent.com/1500684/68164540-4c8c3380-ff1a-11e9-9191-d9c87ddecbed.gif)\\r\\n\\r\\nNote the difference is that the opacity never changes to 0.4 (which is determined based on the `isPending` state).\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI expect them to both behave the same (at least as far as the user can observe).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- react@0.0.0-experimental-f6b8d31a7\\r\\n- react-dom@0.0.0-experimental-f6b8d31a7","number":17272,"user":{"login":"kentcdodds"},"state":"closed","created_at":"2019-11-04T22:49:03Z"},{"id":517439213,"title":"Setting ref.current in component which suspends","body":"I have a problem with setting a ref from a component which throws a promise to suspend. Just want to know if this issue is intended behaviour.\\r\\n\\r\\nI have the following component\\r\\n```jsx\\r\\nlet doThrow = true;\\r\\nfunction Component() {\\r\\n  let ref = useRef(0);\\r\\n  console.log(ref.current)\\r\\n  ref.current = 1;\\r\\n\\r\\n  if (doThrow) {\\r\\n    throw new Promise((resolve, reject) => {\\r\\n      doThrow = false;\\r\\n      setTimeout(resolve, 1000);\\r\\n    });\\r\\n  } else {\\r\\n    return <div>component</div>\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nThis logs `0` twice. I was surprised by this and expecting to log `0` and then `1`  as I am setting the ref to 1 before throwing. Does throwing a promise in a component undo all the ref changes? Is this intended behaviour? Could not find anything about this in the suspense docs.\\r\\n","number":17271,"user":{"login":"subhero24"},"state":"closed","created_at":"2019-11-04T22:24:29Z"},{"id":517409770,"title":"Remove `debugRenderPhaseSideEffects` flag","body":"There are two similar flags, `debugRenderPhaseSideEffects` and `debugRenderPhaseSideEffectsForStrictMode`. The strict mode one is the only one that is actually used. I think originally the theory is that we would one day turn it on for all components, even outside strict mode. But what we\'ll do instead is migrate everyone to strict mode.\\r\\n\\r\\nThe only place `debugRenderPhaseSideEffects` was being used was in an internal test file. I rewrote those tests to use public APIs.","number":17270,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-04T21:20:05Z"},{"id":517363473,"title":"useTransition always times out for full duration when function is passed to setState call","body":"Here is a codesandbox reproducing the issue. https://codesandbox.io/s/twilight-rain-ez11m\\r\\n\\r\\nI have two calls that setState, one in the `nextUser` function, and the other in the `prevUser` function.\\r\\n\\r\\nYou\'ll notice the only difference in how i\'m setting state here is that i\'m passing a function to the call in `prevState` and not in `nextState`. ie `setUser(v => fetchUser(v.id - 1))`\\r\\n\\r\\nThe `nextUser` call is working as expected, the `useTransition` timeout cancels if the request/s come back earlier. However, the `prevUser` call _always_ waits the entire duration, even if the requests resolve way earlier.\\r\\n","number":17269,"user":{"login":"sami616"},"state":"open","created_at":"2019-11-04T19:49:19Z"},{"id":517362100,"title":"JSX syntax proposal:  <Component {props}> to be interpreted as <Component props={props}>","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n**feature** : JSX syntax proposal: When a props is a boolean, it is possible to write \\\\<Component props1> which gets translated as \\\\<Component props1={true}>. As it is also very common to have the name of the variable to be the name of the props so why not having a short syntax as well:\\r\\n\\r\\n<Component {props1}> would be equivalent to \\\\<Component props1={props1}>>\\r\\n\\r\\n> **What is the current behavior?**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n<Clock {time}> would become \\\\<Clock time={time}> but \\\\<Clock time> would still be \\\\<Clock time={true}> \\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17268,"user":{"login":"jfhenon"},"state":"closed","created_at":"2019-11-04T19:46:36Z"},{"id":517344370,"title":"Bailout without entering work loop for roots without work WIP","body":"Wraps up #16980\\r\\n\\r\\nThis addresses some edge cases where React currently does a no-op render and an empty/unnecessary commit.\\r\\n\\r\\n- [x] Bailout without entering work loop for roots without work (see #16980).\\r\\n- [x] Fix failing refs-test by wrapping updates with `act()`.\\r\\n- [x] See if any other tests trigger this early bailout behavior to better understand the causes.\\r\\n\\r\\nThe tests listed below trigger this new early bailout code. Everyone is in `performSyncWorkOnRoot` (none trigger the new code in `performConcurrentWorkOnRoot`). I spot checked a couple of them to see why the new code is being hit, to see if it looked problematic. Below is my findings:\\r\\n\\r\\n* `ReactES6Class-test` \\"_renders only once when setting state in componentWillMount_\\"\\r\\nThis one calls `performSyncWorkOnRoot()` twice. The first time is the callback passed from `legacyRenderSubtreeIntoContainer` to `unbatchedUpdates`. The second one (the one that bails out) is when `unbatchedUpdates` calls `flushSyncCallbackQueue`. This flush can be bailed out on.\\r\\n\\r\\n* `RaectDOMInput-test` \\"_should control a value in reentrant events_\\"\\r\\nThis one hits the new codepath when it dispatch a discrete \\"input\\" event. It looks like when our test calls `node.dispatchEvent()` for the \\"input\\" event, something is actually dispatching a series of events (input, input, blur, focus) which causes more updates to be scheduled with React than necessary. Now we bail out after the first.\\r\\n\\r\\n* `ReactCompositeComponent` \\"_should warn about `setState` in render_\\"\\r\\nThis one calls `setState` in render. Without this call, the bailout codepath doesn\'t get hit. Looks like the `setState` call leaves two things in the queue, so when the subsequent call to `flushSyncCallbackQueue` flushes them both, the second one is a no-op. The first thing gets added to the queue when the `setState` call is made. The second one by `commitRootImpl()` when it calls `ensureRootIsScheduled()` because `getNextRootExpirationTimeToWorkOn` returns a value that indicates there\'s more work.\\r\\n\\r\\n---\\r\\n\\r\\n* `ReactTestUtils.act()` > legacy mode \u203a sync \u203a flushes effects on every call\\r\\n* `ReactTestUtils.act()` > blocking mode \u203a sync \u203a flushes effects on every call\\r\\n* `ReactDOMInput` > should control a value in reentrant events\\r\\n* `ReactDOMInput` > should control values in reentrant events with different targets\\r\\n* `ReactDOMInput` > switching text inputs between numeric and string numbers \u203a changes the number 2 to \\"2.0\\" using a change handler\\r\\n* `ReactDOMInput` > should control radio buttons if the tree updates during render\\r\\n* `ReactDOMInput` > assigning the value attribute on controlled inputs \u203a always sets the attribute when values change on text inputs\\r\\n* `ReactDOMInput` > assigning the value attribute on controlled inputs \u203a does not set the value attribute on number inputs if focused\\r\\n* `ReactDOMInput` > assigning the value attribute on controlled inputs \u203a sets the value attribute on number inputs on blur\\r\\n* `ReactDOMInput` > setting a controlled input to undefined \u203a reverts the value attribute to the initial value\\r\\n* `ReactDOMInput` > setting a controlled input to undefined \u203a preserves the value property\\r\\n* `ReactDOMInput` > setting a controlled input to null \u203a reverts the value attribute to the initial value\\r\\n* `ReactDOMInput` > setting a controlled input to null \u203a preserves the value property\\r\\n* `ReactUpdates` > should queue updates from during mount\\r\\n* `ReactUpdates` > uses correct base state for setState inside render phase\\r\\n* `ReactFresh` > can preserve state for forwardRef\\r\\n* `ReactFresh` > should not consider two forwardRefs around the same type to be equivalent\\r\\n* `ReactFresh` > can update forwardRef render function with its wrapper\\r\\n* `ReactFresh` > can update forwardRef render function in isolation\\r\\n* `ReactFresh` > can preserve state for simple memo\\r\\n* `ReactFresh` > can preserve state for memo with custom comparison\\r\\n* `ReactFresh` > can update simple memo function in isolation\\r\\n* `ReactFresh` > can preserve state for memo(forwardRef)\\r\\n* `ReactFresh` > can preserve state for lazy after resolution\\r\\n* `ReactFresh` > can patch lazy before resolution\\r\\n* `ReactFresh` > can patch lazy(forwardRef) before resolution\\r\\n* `ReactFresh` > can patch lazy(memo) before resolution\\r\\n* `ReactFresh` > can patch lazy(memo(forwardRef)) before resolution\\r\\n* `ReactFresh` > can patch both trees while suspense is displaying the fallback\\r\\n* `ReactFresh` > does not re-render ancestor components unnecessarily during a hot update\\r\\n* `ReactFresh` > does not leak state between components\\r\\n* `ReactFresh` > can force remount by changing signature\\r\\n* `ReactFresh` > can remount on signature change within a <root> wrapper\\r\\n* `ReactFresh` > can remount on signature change within a simple memo wrapper\\r\\n* `ReactFresh` > can remount on signature change within a lazy simple memo wrapper\\r\\n* `ReactFresh` > can remount on signature change within forwardRef\\r\\n* `ReactFresh` > can remount on signature change within forwardRef render function\\r\\n* `ReactFresh` > can remount on signature change within nested memo\\r\\n* `ReactFresh` > can remount on signature change within a memo wrapper and custom comparison\\r\\n* `ReactFresh` > can remount on signature change within a class\\r\\n* `ReactFresh` > can remount on signature change within a context provider\\r\\n* `ReactFresh` > can remount on signature change within a context consumer\\r\\n* `ReactFresh` > can remount on signature change within a suspense node\\r\\n* `ReactFresh` > can remount on signature change within a mode node\\r\\n* `ReactFresh` > can remount on signature change within a fragment node\\r\\n* `ReactFresh` > can remount on signature change within multiple siblings\\r\\n* `ReactFresh` > can remount on signature change within a profiler node\\r\\n* `ReactFresh` > resets hooks with dependencies on hot reload\\r\\n* `ReactFresh` > can hot reload offscreen components\\r\\n* `ReactFresh` > remounts classes on every edit\\r\\n* `ReactFresh` > remounts on conversion from class to function and back\\r\\n* `ReactFresh` > can update multiple roots independently\\r\\n* `ReactCompositeComponent` > should warn about `setState` in render\\r\\n* `ReactCompositeComponent` > should warn about `setState` in getChildContext\\r\\n* `ReactCompositeComponent` > this.state should be updated on setState callback inside componentWillMount\\r\\n* `ReactDOMServerIntegration` > legacy context \u203a renders with a call to componentWillMount before getChildContext with clean client render\\r\\n* `ReactDOMServerIntegration` > legacy context \u203a renders with a call to componentWillMount before getChildContext with client render on top of good server markup\\r\\n* `ReactDOMServerIntegration` > legacy context \u203a renders with a call to componentWillMount before getChildContext with client render on top of bad server markup\\r\\n* `SimpleEventPlugin` > interactive events, in concurrent mode \u203a flushes pending interactive work before extracting event handler\\r\\n* `SimpleEventPlugin` > interactive events, in concurrent mode \u203a flushes discrete updates in order\\r\\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs \u203a renders a controlled text input with clean client render\\r\\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs \u203a renders a controlled text input with client render on top of good server markup\\r\\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs \u203a renders a controlled textarea with clean client render\\r\\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs \u203a renders a controlled textarea with client render on top of good server markup\\r\\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs \u203a renders a controlled checkbox with clean client render\\r\\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs \u203a renders a controlled checkbox with client render on top of good server markup\\r\\n* `ReactBrowserEventEmitter` > should not invoke newly inserted handlers while bubbling\\r\\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri if sync did not work first time\\r\\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri for secondary discrete events\\r\\n* `ReactES6Class` > renders only once when setting state in componentWillMount\\r\\n* `mixing responders with the heritage event system` > should properly flush sync when the event systems are mixed with unstable_flushDiscreteUpdates\\r\\n* `mixing responders with the heritage event system` > mixing the Input and Press repsonders \u203a is async for non-input events\\r\\n* `ReactTypeScriptClass` > renders only once when setting state in componentWillMount\\r\\n* `ReactCoffeeScriptClass` > renders only once when setting state in componentWillMount\\r\\n* `ReactDOMHooks` > should not bail out when an update is scheduled from within an event handler in Concurrent Mode\\r\\n* `ReactIncrementalScheduling` > can opt-out of batching using unbatchedUpdates\\r\\n* `ReactCompositeComponent-state` > should support setting state\\r\\n* `ReactCompositeComponent-state` > should treat assigning to this.state inside cWM as a replaceState, with a warning\\r\\n* `ReactDOMComponentTree` > finds a controlled instance from node and gets its current fiber props","number":17267,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-11-04T19:09:03Z"},{"id":517317613,"title":"[react-interactions] Prevent duplicate onPress firing for keyboard Enter","body":"Internally, we encountered an issue where the `LegacyPress` responder would double fire `onPress` when the `Enter` keyboard key was pressed. Looking into this deeply, the reason for this was because the browser triggers a `click` event which passes the logic in `isScreenReaderVirtualClick`.\\r\\n\\r\\nI tried to find different discrepancies between screen reader clicks and the click that is fired from the browser when you press `Enter` but I couldn\'t see anything that stood out \u2013 so I took another approach and realized, by accident, the reason this doesn\'t happen when you press `Space` or ` ` key \u2013 we trigger `nativeEvent.preventDefault`. This means that the corresponding native `click` never gets triggered by the browser, but the responder still correctly fires the `onPress` callback \u2013 this time only once though!\\r\\n\\r\\nI also noticed that is behavior didn\'t occur in the newer Press responder. I added support for the `Spacebar` key type there, but I also noticed a difference in `input` and `textarea` logic between the two responders that might be worth while tracking in a separate task \u2013 but maybe this is something @necolas has already considered.","number":17266,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-11-04T18:10:31Z"},{"id":517312588,"title":"Types: findHostInstance_DEPRECATED returns React.ElementRef<HostComponent<mixed>>","body":"This was returning the wrong type and couldn\'t be used correctly. @lunaleaps found this issue when trying to use it in TouchableNativeFeedback for the first time.","number":17265,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-11-04T17:59:58Z"},{"id":517243501,"title":"DataTable components - Resource available","body":"Hi, \\r\\n\\r\\nI work for NHLBI as an IT project manager and UIUX team lead, and I am working on the migration from Bootstrap to Foundation with React.js due to the security EOL issue. While I was doing a lot of gap analysis for components on React.js, I couldn\'t seem to find straightforward DataTable, which is our heavily component use for the applications, Date-picker, and some other components. Several of our development teams are concern about the availability component that supports by React.js.  I want to set up a meeting with all my development team, and your React.js development team lead and discuss using varies of components with React.js. Please contact me at Kazeem.Babatunde@nih.gov.\\r\\n\\r\\nI look forward to hearing from you soon.","number":17264,"user":{"login":"babatundeko"},"state":"closed","created_at":"2019-11-04T15:55:13Z"},{"id":517236917,"title":"Guide to \\"Suspense for Data Fetching\\" is rather misleading with global variables","body":"https://reactjs.org/docs/concurrent-mode-suspense.html\\r\\n\\r\\nI understand it\'s still experimental and rough around the edges, but I feel obliged to open discussion.\\r\\n\\r\\nThe misleading part is mostly about utilizing a \\"global\\" variable outside of the component scope in Suspense related examples. In the real app that can hardly work out because data loading usually needs to happen based on some input, eg. from props.\\r\\n\\r\\nIt\'s nice that it works with Relay differently, but for people who don\'t use Relay, this guide doesn\'t help that much. On the contrary, it might cause more confusion as it certainly has caused me \ud83e\udd15 \\r\\n\\r\\nPerhaps it might be a better option at this phase to link there relevant parts of Relay code to get more hands-on information for interested people.","number":17263,"user":{"login":"FredyC"},"state":"closed","created_at":"2019-11-04T15:44:54Z"},{"id":517236107,"title":"[react-dom] window.getComputedStyle for robust way to extract vendor prefixed event names. Closes: #17290","body":"Fixes https://github.com/facebook/react/issues/17290\\r\\n\\r\\nThis type of behavior has been reported [before](https://github.com/facebook/react/issues/13170). The issue was closed due to being caused by a browser plugin apparently. That\'s not the case here (will also make that closed case work).\\r\\n\\r\\nIn getVendorPrefixedEventName, the use case is to find the correct vendor prefixed event name. According to the MDN doc above these should not be available on a freshly created element with no style attribute set. Somehow it seems to work, except in my use case.\\r\\n\\r\\nAccording to the [getComputedStyle](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle#Description) documentation, \\"The element.style object should be used to set styles on that element, or inspect styles directly added to it from JavaScript manipulation or the global style attribute\\"\\r\\n\\r\\nUsing getComputedStyle on the newly created element,  react-dom vendor prefixed event name sniffing runs, which makes sense given MDN docs as this is a readonly use case. After all react-dom is trying to go through all styles of the element, no just those set in it\'s style attribute.\\r\\n\\r\\n","number":17262,"user":{"login":"sulmanen"},"state":"open","created_at":"2019-11-04T15:43:41Z"},{"id":517228006,"title":"Wrapper components inside a array.map always rerenders","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nwhen a single item in an array is changed it rerenders all the three items in the list since the `props.children` of the `List` component changes. \\r\\n\\r\\nhttps://codesandbox.io/s/elated-bas-z7fxi\\r\\n\\r\\nplease check the app component in the example.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nreact should properly diff `List.props.children` and not rerender it in a PureComponent.\\r\\ni.e. react should correctly diff react nodes.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nall versions of react probably.","number":17261,"user":{"login":"noelzubin"},"state":"closed","created_at":"2019-11-04T15:30:27Z"},{"id":517222256,"title":"Static rendering strategy doesn\'t work on codesplitted routes","body":"I\'m not really sure if it is a bug or not but I\'m facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component. \\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe thing that I expect to do is the next:\\r\\n1 - Render a component on server side and server it to client\\r\\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\\r\\n3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe thing that I expect to do is the next:\\r\\n1 - Render a component on server side and server it to client\\r\\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\\r\\n3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.\\r\\n\\r\\nI\'ve tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.\\r\\n\\r\\nWhat I\'m doing wrong?\\r\\n","number":17260,"user":{"login":"carlesnunez"},"state":"open","created_at":"2019-11-04T15:21:26Z"},{"id":517107327,"title":"Avoid bundling in ponyfill for Object.assign in use-subscription package","body":"I\'ve noticed that distributed `use-subscription` contained code `object-assign`\'s code. As you keep it external in case of other packages it makes sense to do the same here.\\r\\n\\r\\nJust adding it as a dependency in package.json fixes the problem because your Rollup scripts read that and put those into externals option.","number":17259,"user":{"login":"Andarist"},"state":"closed","created_at":"2019-11-04T12:00:30Z"},{"id":517073779,"title":"Bug - react onClick() doesn\'t work well on WKWebview - iOS 13","body":"# Context\\r\\nApple just realeased new version of WKWebview with iOS 13.\\r\\nOn my mobile app i don\'t use react native but pure React / HTML inside a Native Webview.\\r\\n\\r\\n# Problem \\r\\nTouch events don\'t work well on onClick() since the update. \\r\\nThe user has to touch very fast to trigger the onClick(). If the use touches more than 200 / 300 ms it doesn\'t trigger the onClick()\\r\\n\\r\\nDo you know a way to fix it ?\\r\\n\\r\\nThanks a lot for your help !\\r\\n\\r\\n","number":17258,"user":{"login":"Aarbel"},"state":"open","created_at":"2019-11-04T10:50:47Z"},{"id":517027871,"title":"[About hooks programming] Can not properly split code using hooks.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature(maybe more like a discussion)\\r\\n\\r\\n**What is the current behavior?**\\r\\nAssume that we have one custom hook:\\r\\n```typescript\\r\\n/* Typing with TS */\\r\\n// to make this example reasonable,\\r\\n// assuming that `fetchUser` and `fetchOrders` fetch data from different backends. \\r\\nfunction useOrders(): Order[] {\\r\\n  const [orders, setOrders] = useState<Order[]>([]);\\r\\n  useEffect(() => {\\r\\n    fetchUser().then(user =>\\r\\n      fetchOrders(user).then(theOrders => setOrders(theOrders)),\\r\\n    );\\r\\n  }, []);\\r\\n  return orders;\\r\\n}\\r\\n```\\r\\nIt works perfectly, but in other parts of application, I also need to fetch the `user` data, so I think I should split `useOrders` into two custom hooks to make the process of fetching user reusable:\\r\\n```typescript\\r\\n/* Typing with TS */\\r\\n\\r\\n// before the backend responsing, the returned user is `null`\\r\\nfunction useUser(): User | null {\\r\\n  const [user, setUser] = useState<User | null>(null);\\r\\n  useEffect(() => {\\r\\n    fetchUser().then(theUser => setUser(theUser));\\r\\n  }, []);\\r\\n  return user;\\r\\n}\\r\\n\\r\\nfunction useOrders(user: User): Order[] {\\r\\n  const [orders, setOrders] = useState<Order[]>([]);\\r\\n  useEffect(() => {\\r\\n    fetchOrders(user).then(theOrders => setOrders(theOrders));\\r\\n  }, [user]);\\r\\n  return orders;\\r\\n}\\r\\n```\\r\\n\\r\\nBut the two custom hooks can not work together properly:\\r\\n```typescript\\r\\nfunction SomeComponent() {\\r\\n  const user = useUser();\\r\\n  // when user data is still fetching, the user will be null,\\r\\n  // so the next line will throw error(typing and runtime)\\r\\n  const orders = useOrders(user);\\r\\n}\\r\\n```\\r\\n\\r\\nMaybe I can determin whether the `user` is `null` inside `useOrders`, but it is hard to explain the meaning of `useOrders(null)`. Why should `useOrders` accepts `null`?\\r\\n\\r\\nSo my solution is to wrap the component:\\r\\n```typescript\\r\\nfunction SomeComponent({ user }: { user: User }) {\\r\\n  const orders = useOrders(user);\\r\\n}\\r\\n\\r\\nfunction Wrapper() {\\r\\n  const user = useUser();\\r\\n  if (user === null) {\\r\\n    return null;\\r\\n  }\\r\\n  return <SomeComponent user={user} />;\\r\\n}\\r\\n\\r\\nexport default Wrapper;\\r\\n```\\r\\n\\r\\nI often fell into this hell when I tried to refactor existing code.\\r\\n\\r\\n---\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI don\'t know, maybe a discussion is needed.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact >= 16.8.0\\r\\nany supported browsers\\r\\n","number":17257,"user":{"login":"liyuanqiu"},"state":"closed","created_at":"2019-11-04T09:14:07Z"},{"id":516904161,"title":"\\"NotFoundError: Failed to execute \'removeChild\' on \'Node\'\\" when using React.Fragment <></> with Chrome extension which does not modify the DOM tree below the root div of the React app","body":"This has already been discussed before (#14740), but there wasn\'t a reproducing example for this kind of issue and I think that my use case is also a bit different.\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI believe this can be considered a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nIn order to reproduce this issue using Chrome, you will need to install the following Chrome extension called TransOver:\\r\\n\\r\\n![Screen Shot 2019-11-03 at 22 51 33](https://user-images.githubusercontent.com/10134421/68092541-86165d80-fe8c-11e9-9f39-e566f770fcb2.png)\\r\\n\\r\\nhttps://chrome.google.com/webstore/detail/transover/aggiiclaiamajehmlfpkjmlbadmkledi?hl=en\\r\\n\\r\\nI use it to translate text on hover.\\r\\nThe only thing that this extension does is appending a tooltip with the translated text to the `body` HTML element when you hover an element with text (it doesn\'t seem it appends stuff below the React\'s root `div` element).\\r\\n\\r\\nI have created two code sandboxes to show you better and explain the problem.\\r\\nIt is a minimal example of a movie app like the one Dan showed at JSConf 2018 in Iceland, though not as beautiful as his and without all that cool Suspense stuff, but at least it uses hooks :) .\\r\\n\\r\\n- https://codesandbox.io/s/heuristic-lake-exxvu\\r\\n\\r\\n- https://codesandbox.io/s/magical-grass-016kc\\r\\n\\r\\nThe two code sandboxes are essentially identical, the only difference is that the first one (`heuristic-lake-exxvu`) uses a `div` element for `MovieApp`, whereas the second (`magical-grass-016kc`) uses a `React.Fragment` (`<></>`) component:\\r\\n\\r\\n`heuristic-lake-exxvu`\'s `MovieApp`:\\r\\n\\r\\n```\\r\\nconst MovieApp = () => {\\r\\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\\r\\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\\r\\n  ...\\r\\n  return (\\r\\n    <div> // <======================= Uses a `div`\\r\\n      {isLoading ? (\\r\\n        \\"Loading...\\"\\r\\n      ) : (\\r\\n      ...\\r\\n```\\r\\n\\r\\n`magical-grass-016kc`\'s `MovieApp`:\\r\\n\\r\\n```\\r\\nconst MovieApp = () => {\\r\\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\\r\\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\\r\\n  ...\\r\\n  return (\\r\\n    <> // <======================= Uses a fragment\\r\\n      {isLoading ? (\\r\\n        \\"Loading...\\"\\r\\n      ) : (\\r\\n      ...\\r\\n```\\r\\n\\r\\nNow, if you open `heuristic-lake-exxvu` and click on the `Show movie info` button of any movie in the list, you will see the `Loading...` text before the promise with the data of the movie resolves, and the `Movie` component is rendered.\\r\\n\\r\\nBefore the promise resolves, try hovering on the `Loading...` text with the `TransOver` extension enabled, you should see:\\r\\n\\r\\n![Screen Shot 2019-11-03 at 23 26 48](https://user-images.githubusercontent.com/10134421/68093013-764d4800-fe91-11e9-8b64-2dbdade0a500.png)\\r\\n\\r\\nThe world makes sense here, no errors, no warnings, everything works.\\r\\n\\r\\nNow try to do the same thing on `magical-grass-016kc`, as soon as you hover `Loading...`, you will see the `NotFoundError: Failed to execute \'removeChild\' on \'Node\'` error logged in the browser\'s console:\\r\\n\\r\\n![Screen Shot 2019-11-03 at 23 40 00](https://user-images.githubusercontent.com/10134421/68093177-49019980-fe93-11e9-9f9b-13f91a12e996.png)\\r\\n\\r\\n![Screen Shot 2019-11-03 at 23 40 52](https://user-images.githubusercontent.com/10134421/68093194-6df60c80-fe93-11e9-910f-ae748bc9fb91.png)\\r\\n\\r\\nHere is a streamable video showing this same error:\\r\\n\\r\\nhttps://streamable.com/4gxua\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIn `heuristic-lake-exxvu` (uses a `div` instead of React fragment), everything worked.\\r\\nThe TransOver extension appends to `body` and does not modify the React\'s root `div` neither does it append stuff below it, so I would expect the code in the React fragment example (`magical-grass-016kc`) to behave the same and work as in `heuristic-lake-exxvu`.\\r\\n\\r\\nChrome is plenty of useful extensions like this one and they should not really interfere with React, I think that users using React applications may also install other extensions which modify the DOM which they find useful.\\r\\nIf an extension appends to body like TransOver does, I wouldn\'t expect React to have problems with it and cause undesirable effects and application errors like this one.\\r\\n\\r\\nThis is my opinion, I would be very glad to hear what you think about it, and if you think I have spotted a bug of React fragments (I think it\'s a bug because, again, it works when using a `div` in `heuristic-lake-exxvu`).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nBrowser: Chrome\\r\\nReact v16.11.0\\r\\nReact DOM v16.11.0\\r\\n\\r\\n\\r\\n","number":17256,"user":{"login":"tonix-tuft"},"state":"open","created_at":"2019-11-03T23:06:16Z"},{"id":516570688,"title":"[eslint] Check forwardRef callbacks","body":"Closes #17220 \\r\\n\\r\\nThis checks that the rules of hooks apply to callback arguments of `forwardRef`. \\r\\n\\r\\nI\'m unsure whether this counts as a backwards-incompatible change or not. It\'s making the linter stricter, but I\'d only expect new errors to be reported in code that\'s already breaking the rules of hooks. There is a potential edge-case of code with a forwardRef-wrapped component using a non-hook function with a name starting with \\"use\\"; this change would now return a false positive.\\r\\n\\r\\n\x3c!--\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n--\x3e","number":17255,"user":{"login":"dprgarner"},"state":"closed","created_at":"2019-11-02T11:57:51Z"},{"id":516563176,"title":"React DevTools w/ Electron: Profiler \\"Reload and start profiling\\" doesn\'t work due to XMLHttpRequest \'null\' origin","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nAn error gets thrown when using DevTools Profiler on **Electron** with the \\"**Reload and start profiling**\\" feature that leaves Profiler in an unexpected state - the profiling session does not end.\\r\\n\\r\\nI initially opened [the issue over at Electron](https://github.com/electron/electron/issues/20915), but [got asked to get your opinion first](https://github.com/electron/electron/issues/20915#issuecomment-548996868).\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n- Open React DevTools Profiler in **Electron**\\r\\n- Click \\"Reload and start profiling\\"\\r\\n- Await reload\\r\\n- Do actions\\r\\n- Click \\"Stop profiling\\" - does not work\\r\\n- Because there are errors in console (actually thrown immediately after reload, don\'t have to do any extra actions):\\r\\n  ```\\r\\n  Access to XMLHttpRequest at \'chrome-extension://react-developer-tools/build/renderer.js\' from origin \'null\' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, https.\\r\\n  ```\\r\\n  ```\\r\\n  Uncaught DOMException: Failed to execute \'send\' on \'XMLHttpRequest\': Failed to load \'chrome-extension://react-developer-tools/build/renderer.js\'.\\r\\n  ```\\r\\n\\r\\n![Errors after triggering profiler](https://user-images.githubusercontent.com/1030080/68028419-81e81580-fcbd-11e9-85ae-58b8437df6d8.png)\\r\\n\\r\\n![The respective code in React DevTools](https://user-images.githubusercontent.com/1030080/68028680-1ce0ef80-fcbe-11e9-9b63-4fa0494af0dd.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nYou\'ll have to use [Electron Fiddle](https://github.com/electron/fiddle) for this one with this gist: https://gist.github.com/joltmode/82574cab4970def210dac0c68d4c34b8\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n- Open React DevTools Profiler\\r\\n- Click \\"Reload and start profiling\\"\\r\\n- Await reload\\r\\n- Do actions\\r\\n- Click \\"Stop profiling\\"\\r\\n- See profiler results\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- React 16.11.0\\r\\n- Latest version of DevTools\\r\\n- Electron 6.1.2","number":17254,"user":{"login":"joltmode"},"state":"open","created_at":"2019-11-02T10:44:08Z"},{"id":516341775,"title":"Don\'t show empty (no work) commits in Profiler","body":"Improves DevTools experience for #16980\\r\\n\\r\\nThis PR works around broken behavior (arguably) with the synthetic event system. It updates the DevTools backend to ignore commits for which React bailed out at the root without doing any work.\\r\\n\\r\\nMy logic for detecting this bailout case is as follows:\\r\\n```js\\r\\nconst didBailoutAtRoot =\\r\\n  root.current === root.current.alternate ||\\r\\n  (alternate !== null &&\\r\\n    alternate.expirationTime === 0 &&\\r\\n    alternate.childExpirationTime === 0);\\r\\n```\\r\\n\\r\\nI initially tried checking for bailout in the same way as `bailoutOnAlreadyFinishedWork`:\\r\\nhttps://github.com/facebook/react/blob/a2e05b6c148b25590884e8911d4d4acfcb76a487/packages/react-reconciler/src/ReactFiberBeginWork.js#L2735-L2741\\r\\n\\r\\nBut this had false positives (e.g. mounting, certain types of root updates). Based on my own testing, the approach above seems like a more reliable check. (It doesn\'t break any of the automated tests, and it \\"fixes\\" both of the failing cases reported in #16980.)\\r\\n\\r\\nWe should probably follow up to this issue by fixing the event system to not schedule these unnecessary updates, and/or updating React to not commit empty changes, but at least this change improves the current confusing profiling experience.","number":17253,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-11-01T20:53:52Z"},{"id":516325017,"title":"[Scheduler] Delete old rAF implementation","body":"We\'ve been using the message loop version for a while. Time to delete.\\r\\n","number":17252,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-11-01T20:17:10Z"},{"id":516308376,"title":"[Flight] Move around the Server side a bit","body":"__Builds on top of #17234.__\\r\\n\\r\\nJust some clean up before I add more stuff.","number":17251,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-11-01T19:36:34Z"},{"id":516160208,"title":"it.dev ?","body":"Already we have `it. experimental` in test, Can we add `it.dev` to run test instead of using [`__DEV__`](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.internal.js#L242-L307) in test ?\\r\\n\\r\\n","number":17249,"user":{"login":"monkindey"},"state":"closed","created_at":"2019-11-01T14:50:40Z"},{"id":516007481,"title":"DevTools component filter does not work with location","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nIn DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAt least some components be filtered out.\\r\\nIt would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact DevTools 4.2.0 on Firefox 69.0.3.","number":17248,"user":{"login":"Shayan-To"},"state":"closed","created_at":"2019-11-01T09:37:27Z"},{"id":516000885,"title":"Packaging error","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen I use the v12.0.0 version of the Node to run the `yarn build`. Throw an error. It is good to use v10.7.0 when packaging. I am not sure if this is a problem with React or a problem with Node or other tools.\\r\\n![image](https://user-images.githubusercontent.com/20250430/68015078-443eb900-fccc-11e9-8312-d4d5c5477c88.png)\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nJust execute the `yarn build` command\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\npackaging success\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: 16.11.0\\r\\nOS: MacOS\\r\\nNode:v10.7.0 and v12.0.0\\r\\n","number":17247,"user":{"login":"Dec-F"},"state":"closed","created_at":"2019-11-01T09:24:08Z"},{"id":515861804,"title":"It\'s not possible to access the shadowRoot of a Web Component when using React Suspense/Lazy","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen using Web Components and React Suspense/Lazy, it\'s not possible to access the `shadowRoot` in the `useEffect` because the `shadowRoot` still haven\'t loaded its child elements.\\r\\n\\r\\n**Steps to reproduce the problem.**\\r\\n[CodeSandbox](https://codesandbox.io/s/thirsty-poitras-sq22m)\\r\\nIn the `TabComp` component, if I change the line `const { t } = useTranslation(\\"\\", { useSuspense: false });` for `const { t } = useTranslation();` an error occurs. The error occurs because the `shadowRoot` still haven\'t loaded its child elements and it\'s trying to access a child element.\\r\\n\\r\\nI also commented about this problem in an [issue](https://github.com/i18next/react-i18next/issues/817#issuecomment-548629946) of the `react-i18next` library, but I\'m not sure if this problem is related to their library.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe `shadowRoot` property of a Web Component can be accessed in the `useEffect` even if the component is using React Suspense/Lazy.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.4\\r\\nBrowser Chrome 77\\r\\nI haven\'t tried this in previous versions of React.","number":17246,"user":{"login":"CristianDDias"},"state":"open","created_at":"2019-11-01T01:44:28Z"},{"id":515825659,"title":"Add preload() to React.lazy","body":"This allows lazy components to be initialized ahead of render time. My use case is for preloading lazy components in React Router ahead of when they are needed. We could do this in a number of scenarios including when we first determine a component is going to be part of the render tree or when anticipating it will be.\\r\\n\\r\\nJust submitting this draft to get feedback from the core team. If it\'s something you\'d like, I can go ahead and write a test.\\r\\n","number":17245,"user":{"login":"mjackson"},"state":"open","created_at":"2019-10-31T23:55:20Z"},{"id":515790018,"title":"False negative react-hooks/rules-of-hooks validation result","body":"**What is the current behavior?**\\r\\nA functional component put into a object literal doesn\'t pass validation by eslint-plugin-react-hooks\\r\\n\\r\\n```\\r\\nconst RenderWithFX = {\\r\\n  render: () => {\\r\\n    useEffect(() => {\\r\\n      console.log(\\"I should work!\\");\\r\\n    }, []);\\r\\n    return <div>RenderWithFX</div>;\\r\\n  }\\r\\n};\\r\\n```\\r\\ngives\\r\\n```\\r\\nerror    React Hook \\"useEffect\\" is called in function \\"render\\" that is neither a React function component nor a custom React Hook function  react-hooks/rules-of-hooks\\r\\n```\\r\\nChanging the field name to `Render` or `_` or anything else not starting with lowercase letter fixes the problem.\\r\\n\\r\\nThe demo:\\r\\nhttps://codesandbox.io/s/wild-sound-k1cxe\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI expect my example to pass validation.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\neslint-plugin-react-hooks 2.2.0","number":17244,"user":{"login":"Nek"},"state":"closed","created_at":"2019-10-31T22:32:34Z"},{"id":515763079,"title":"Codemod tests to `it.experimental`","body":"`it.experimental` marks that a test only works in Experimental builds.\\r\\n\\r\\nIt also asserts that a test does *not* work in the stable builds. The main benefit is that we\'re less likely to accidentally expose an experimental API before we intend. It also forces us to un-mark an experimental test once it become stable.","number":17243,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-31T21:36:53Z"},{"id":515714470,"title":"Missing React tab in chrome dev tools","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThere is no React tab in my chrome dev toolbar anymore.  I have deleted and reinstalled the react extension but the issue was not resolved.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThere use to be a React tab in the chrome dev console toolbar\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI\'m using ios on google chrome.","number":17242,"user":{"login":"battleb2014"},"state":"closed","created_at":"2019-10-31T20:13:50Z"},{"id":515645394,"title":"Silly PR to test if CodeSandbox CI works","body":"It works! https://codesandbox.io/s/awesome-murdock-ld2fm","number":17241,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-31T18:16:11Z"},{"id":515553381,"title":"Destructuring Props in Child Class Component resets Parent\'s previous state","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?** bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThis is a weird problem I\'ve never seen before. Perhaps I am doing something wrong. I am able to repro the issue only in a class child component/parent functional component. The problem is when I destructure props in the child class component constructor,  the parent\'s previous state resets. However If I dont destructure the props, and just use the format `this.props.cb()`, then the previous state of the parent\'s is preserved.\\r\\n\\r\\n**_If I convert the child to a functional component, the problem goes away._**\\r\\n\\r\\nPS: I am using antd upload component. However I can repro this issue without using the antd upload component. I just kept it for the sake of keeping the code example short.\\r\\n\\r\\nI have a [demo here](https://codesandbox.io/s/agitated-stonebraker-9wwoq?fontsize=14)\\r\\n\\r\\n**child class component demo:**\\r\\nif you look at the console log, after upload clicked, the `color` will reset back to the original initialized value of `blue` instead of preserving its current state which is `red`\\r\\n\\r\\n**child functional component demo:**\\r\\nOn the functional component example, notice the `color` property preserves its previous state which is `red`.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nParent\'s previous state should be preserved.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.4, I don\'t know if it works in previous versions of React\\r\\n","number":17240,"user":{"login":"ayayalar"},"state":"closed","created_at":"2019-10-31T16:03:13Z"},{"id":515529503,"title":"Blink with useTransition","body":"**Bug**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nAs discussed with @gaearon in this thread: https://twitter.com/dan_abramov/status/1189923059031068672\\r\\n\\r\\nWhen the `useTransition` is fast, it results to a small blink for the user. You can reproduce it in this example :\\r\\n\\r\\n- Choose \\"Concurrent Mode\\"\\r\\n- Click \\"Next\\" in \\"fretch-mode: legacy-mode\\" \\r\\n\\r\\nhttps://codesandbox.io/s/fretch-example-r6t8g\\r\\n\\r\\nA simpler example can be provided but I don\'t have time right now, I just want to track the issue.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe expected behaviour would be to avoid the blink if it is less than \\"100ms\\" (or another arbitrary delay).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThe experimental version, see the example.\\r\\n","number":17239,"user":{"login":"gregberge"},"state":"open","created_at":"2019-10-31T15:33:52Z"},{"id":515489785,"title":"Experimental: Unknown unit of work tag (18).","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nReact@experimental sometimes issues following error on page load.\\r\\n```\\r\\nError: \\"Unknown unit of work tag (18). This error is likely caused by a bug in React. Please file an issue.\\"\\r\\n    completeWork http://localhost:3000/dist/index.js line 14463 > eval:21603\\r\\n    completeUnitOfWork http://localhost:3000/dist/index.js line 14463 > eval:24709\\r\\n    performUnitOfWork http://localhost:3000/dist/index.js line 14463 > eval:24685\\r\\n    workLoopSync http://localhost:3000/dist/index.js line 14463 > eval:24650\\r\\n    performSyncWorkOnRoot http://localhost:3000/dist/index.js line 14463 > eval:24249\\r\\n    flushSyncCallbackQueueImpl http://localhost:3000/dist/index.js line 14463 > eval:12192\\r\\n    unstable_runWithPriority http://localhost:3000/dist/index.js line 42728 > eval:818\\r\\n    runWithPriority$2 http://localhost:3000/dist/index.js line 14463 > eval:12142\\r\\n    flushSyncCallbackQueueImpl http://localhost:3000/dist/index.js line 14463 > eval:12187\\r\\n    workLoop http://localhost:3000/dist/index.js line 42728 > eval:762\\r\\n    flushWork http://localhost:3000/dist/index.js line 42728 > eval:717\\r\\n    performWorkUntilDeadline http://localhost:3000/dist/index.js line 42728 > eval:219\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI have no idea what triggers this error and my codebase is not exactly small and because it appears only sometimes (maybe 10%) it is really hard to track down.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNo error\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest firefox and chromium on fedora 31. React@experimental and it started (I think) after I started experimenting with concurrent mode and suspense so it did not appear on older version, but is also not applicable to it.\\r\\n","number":17238,"user":{"login":"CodeWitchBella"},"state":"open","created_at":"2019-10-31T14:44:12Z"},{"id":515400936,"title":"react-refresh: add options to override $RefreshReg$ and $RefreshSig$ for better System.js integration","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\nRight now babel plugin emits globals: https://github.com/facebook/react/issues/16604\\r\\n\\r\\n```js\\r\\nwindow.$RefreshReg$ = () => {};\\r\\nwindow.$RefreshSig$ = () => type => type;\\r\\n```\\r\\n\\r\\nIt would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation:\\r\\n\\r\\n```js\\r\\nimport runtime from \'react-refresh/runtime\'\\r\\nruntime.injectIntoGlobalHook(window)\\r\\n\\r\\nSystem.constructor.prototype.createContext = function (url) {\\r\\n  return {\\r\\n    url,\\r\\n    $RefreshSig$: runtime.createSignatureFunctionForTransform,\\r\\n    $RefreshReg$: (type, id) => {\\r\\n      id = url + \' \' + id\\r\\n      runtime.register(type, id)\\r\\n    }\\r\\n  };\\r\\n};\\r\\n```\\r\\n\\r\\nIf you don\'t mind I could create PR with changes to react-refresh/babel next week.\\r\\n\\r\\nenvironment:\\r\\n```js\\r\\n{\\r\\n    \\"systemjs\\": \\"^6.1.4\\",\\r\\n    \\"react\\": \\"^16.11.0\\",\\r\\n    \\"react-dom\\": \\"^16.11.0\\",\\r\\n    \\"react-refresh\\": \\"^0.6.0\\"\\r\\n }\\r\\n```","number":17237,"user":{"login":"vasiliicuhar"},"state":"closed","created_at":"2019-10-31T12:41:06Z"},{"id":515297055,"title":"Bug: Chrome extender prompts that the encoding of inject.js is not UTF-8","body":"![image](https://user-images.githubusercontent.com/15186545/67936454-ca90c780-fc06-11e9-8971-dbdf2ec981a1.png)\\r\\n","number":17236,"user":{"login":"lhb11"},"state":"closed","created_at":"2019-10-31T09:50:38Z"},{"id":515192769,"title":"`input` event `onchange` Why is there a border?","body":"\u5728\u6211\u5f00\u542f`chrome-devtools=` \u4e4b\u540e, `input` \u7684 `change` \u4e8b\u4ef6, \u89e6\u53d1\u540e\u4f1a\u6709\u8fb9\u6846, \u8fd9\u662f\u4e0d\u662f`chrome` \u7684\u9ed8\u8ba4\u884c\u4e3a? \u8fd8\u662f\u8bf4, \u662f `react-devtools` \u5f00\u53d1\u5de5\u5177\u7684\u884c\u4e3a\ud83e\uddd0?\\r\\n\\r\\nAfter I turn on `chrome-devtools=`, the `change` event of `input` will have a border after the trigger. Is this the default behavior of `chrome`? Or, is the behavior of the `react-devtools` \ud83e\uddd0\\r\\n\\r\\n![test.gif](https://i.loli.net/2019/10/31/MhfqmWpBaDuvyNU.gif)","number":17235,"user":{"login":"d1y"},"state":"closed","created_at":"2019-10-31T06:14:10Z"},{"id":515172740,"title":"[Flight] Add Client Infrastructure","body":"This adds some infra to the client build so that we can parse a stream into an object that can suspend.\\r\\n\\r\\nSee the fixture for example.","number":17234,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-31T05:20:48Z"},{"id":515139840,"title":"fix: make serializable data  in react-devtools","body":"Fixes #17207 \\r\\n\\r\\nIt seems `chrome.runtime` [`postMessage`](https://developer.chrome.com/extensions/messaging#connect) is trying to serialize the object but failed due to BigInt data type.( See the [Use within JSON](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) section)\\r\\n\\r\\n**[UPDATE]**\\r\\nThanks @leidegre  for pointing out that we already hydrated our data type. I added data type `bigint` there.\\r\\n\\r\\nI tested this with all the possible data type as below\\r\\n\\r\\n- string\\r\\n- number\\r\\n- boolean\\r\\n- object\\r\\n- array\\r\\n- undefined\\r\\n- null\\r\\n- Symbol\\r\\n- BigInt\\r\\n\\r\\n\\r\\n\\r\\n","number":17233,"user":{"login":"nutboltu"},"state":"closed","created_at":"2019-10-31T03:45:24Z"},{"id":515074349,"title":"Revert \\"Dispatch commands to both UIManagers from both renderers (#17\u2026","body":"#17211 needs to be reverted because the Fabric components on iOS aren\'t implementing commands yet through the Fabric pipeline. Those commands will need to be implemented and then we can revert this revert.","number":17232,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-10-31T00:46:34Z"},{"id":515069984,"title":"Suspense: Ability to leave existing children mounted after successfully rendering once","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCurrently Suspense will completely replace children when a promise is thrown. This leads to ugly UX when `fallback` is flashed on every prop change.\\r\\n\\r\\nDemo: https://codesandbox.io/s/jovial-dew-x8u5p\\r\\n\\r\\nNotice how many flashes of `fallback` you get by typing and deleting text into the input. This problem is exacerbated further by no delayMs anymore.\\r\\n\\r\\n**What is the proposed behavior?**\\r\\n\\r\\nAfter successfully rendering without catching any promises or errors, provide the previous children to `fallback` so the children can remain mounted but the developer has control of how to show a loading indicator. For example, say you had a component that would mask over the children and show a loading spinner centered over them:\\r\\n\\r\\n```\\r\\n<Suspense fallback={(staleChildren) => <LoadingWrapper>{staleChildren}</LoadingWrapper>}>\\r\\n  <Component id={id}/>\\r\\n</Suspense>\\r\\n```\\r\\nJust having a reference to the previous successfully rendered children would be huge. Is this possible to do in userland? If not is this something that can be done in core?\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact@experimental","number":17231,"user":{"login":"JonDum"},"state":"closed","created_at":"2019-10-31T00:33:49Z"},{"id":515069783,"title":"h hooks","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17230,"user":{"login":"rickyhopkins"},"state":"closed","created_at":"2019-10-31T00:33:16Z"},{"id":514995254,"title":"onMouseEnter is fired on disabled buttons","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`onMouseEnter` is fired on `disabled` buttons.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/react-onmouseenter-on-disabled-buttons-fskwd\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`onMouseEnter` shouldn\'t be triggered on `disabled` buttons.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.11.0 (not sure when it started to happen)\\r\\nChrome/MacOS\\r\\n","number":17229,"user":{"login":"diegohaz"},"state":"open","created_at":"2019-10-30T21:31:43Z"},{"id":514950524,"title":"Rename findHostInstance_deprecated to findHostInstance_DEPRECATED","body":"@yungsters wants this to be `_DEPRECATED` to be more obnoxious than the lower case version. It\'s also more consistent with our internal files that we deprecate. React also has methods prefixed with `UNSAFE_` so the all caps seem reasonable.","number":17228,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-10-30T20:08:56Z"},{"id":514918844,"title":"Unable to render nested <optgroup> elements in a <select>","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen creating a `<select>` with an `<optgroup>` nested in an `<optgroup>`, the 2nd-level deep `<optgroup>` will not render in Chrome or Safari. It renders in Firefox, but items in 2nd-level optgroup are not selectable.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\nWorking example using plain HTML: https://codepen.io/etrain/pen/mddBYNG\\r\\n![image](https://user-images.githubusercontent.com/12798751/67890776-b924be00-fb27-11e9-91bc-ac4c09bec8b0.png)\\r\\n\\r\\nMinimal React 16.11.0 example: https://codesandbox.io/s/select-option-groups-544yj\\r\\n![image](https://user-images.githubusercontent.com/12798751/67890809-c6da4380-fb27-11e9-9795-75fae32f8674.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAll `<option>` elements will render in the order they\'re defined, along with their respective `<optgroup>` elements.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact@16.11.0\\r\\nreact-dom@16.11.0\\r\\n\\r\\nThis does not work on previous versions of React from what I\'ve tried (v16.2.0, v15.6.2).","number":17226,"user":{"login":"theetrain"},"state":"closed","created_at":"2019-10-30T19:14:09Z"},{"id":514912297,"title":"[react-interactions] Add handleSimulateChildBlur upon DOM node removal","body":"Follow up to https://github.com/facebook/react/pull/17214.\\r\\n\\r\\nThis PR adds functionality to React Flare, in that a simulated `blur` event is fired when a DOM node being removed when it was actively focused (via the internal event system for Flare). The reason for doing it this way, opposed to within `restoreSelection` where it\'s far too late to trigger a `blur` event (as the DOM node has already been detached from the tree, so it\'s impossible to propagate such events).","number":17225,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-30T19:03:35Z"},{"id":514886190,"title":"Add findHostInstance_deprecated to the React Native Renderer","body":"In ReactNative TouchableNativeFeedback clones its child passing through handlers that get attached to a host instance. It also dispatches commands like:\\r\\n```\\r\\nUIManager.dispatchViewManagerCommand(\\r\\n      ReactNative.findNodeHandle(this),\\r\\n      UIManager.getViewManagerConfig(\'RCTView\').Commands.setPressed,\\r\\n      [pressed],\\r\\n    );\\r\\n```\\r\\n\\r\\nIn order to get this off of `UIManager.dispatchViewManagerCommand` we need to use the new API which requires a direct ref to a host component. Unfortunately, since TouchableNativeFeedback uses cloneElement, it doesn\'t currently require its children to be host components so it can\'t attach a ref itself. \\r\\n\\r\\nThis PR adds a new internal and immediately deprecated API to the renderers that works the same as `findNodeHandle` but returns the component instance itself instead of the `nativeTag` on the instance. This API is only needed for TouchableNativeFeedback to maintain backwards compatibility as we migrate it to support Fabric. \\r\\n\\r\\nWe also have a new API coming that will replace TouchableNativeFeedback that doesn\'t use cloneElement. Once that is out and TouchableNativeFeedback is deleted we will be able to get rid of this API.\\r\\n\\r\\nFor Facebook employees, see https://fb.workplace.com/groups/rn.fabric/permalink/1617555541709199/","number":17224,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-10-30T18:22:28Z"},{"id":514857429,"title":"Only call Profiler onRender when a descendant had work","body":"Resolves #16994","number":17223,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-30T17:37:21Z"},{"id":514812549,"title":"old ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17222,"user":{"login":"rosieswj"},"state":"closed","created_at":"2019-10-30T16:31:38Z"},{"id":514780829,"title":"useCallback doesn\'t memoize as expected","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`useCallback` doesn\'t return a memoized function when used as a \\"higher order ref callback\\".\\r\\n\\r\\nhttps://codesandbox.io/s/snowy-tdd-wb8gu\\r\\n\\r\\n1. Click \\"Toggle\\" button to unmount the second div node\\r\\n2. Open console and look at the output, described by the following quote from the doc\\r\\n\\r\\n> If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.\\r\\n\\r\\nhttps://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n> useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed.\\r\\n\\r\\nhttps://reactjs.org/docs/hooks-reference.html#usecallback\\r\\n\\r\\nIt doesn\'t work with `useMemo` as well, even if #15774 looks similar. It works with a \\"standard\\" memoize function, like `_.memoize`.\\r\\n\\r\\nAs indicated in #17204, I was looking for a way to identify the unmounted node.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.11.0\\r\\n","number":17221,"user":{"login":"cdoublev"},"state":"closed","created_at":"2019-10-30T15:49:38Z"},{"id":514609519,"title":"[eslint-plugin-react-hooks] Apply the rules of hooks to a forwardRef-wrapped component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature (to catch potential bugs)\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe react-hooks/rules-of-hooks ESLint rule catches uses of hooks in conditionals in components, but does not recognise an anonymous function wrapped in forwardRef as a component. \\r\\n\\r\\nThe following example breaks the rules of hooks, but isn\'t caught by the rule:\\r\\n```jsx\\r\\n// This should fail\\r\\nconst FancyButton = React.forwardRef((props, ref) => {\\r\\n  if (props.fancy) {\\r\\n    useCustomHook();\\r\\n  }\\r\\n  return <button ref={ref}>{props.children}</button>;\\r\\n});\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe above example should be caught by react-hooks/rules-of-hooks, and raise the \\"React Hook \\"useCustomHook\\" is called conditionally\\" error.\\r\\n","number":17220,"user":{"login":"dprgarner"},"state":"closed","created_at":"2019-10-30T11:56:28Z"},{"id":514511977,"title":"Why is useEffect hook not activating when a component is reloaded after previously throwing an error?","body":"I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below:\\r\\n\\r\\n**Container**\\r\\n``` typescript\\r\\nimport React, { useEffect } from \'react\';\\r\\n\\r\\nimport { connect } from \'react-redux\';\\r\\nimport Grid from \'@material-ui/core/Grid\';\\r\\nimport { GridSpacing } from \'@material-ui/core/Grid\';\\r\\n\\r\\nimport Course from \'../components/Course/Course\';\\r\\n\\r\\nimport { courseModels } from \'../redux/features/course\';\\r\\nimport { courseSelectors } from \'../redux/features/course\';\\r\\nimport { fetchCoursesAsync } from \'../redux/features/course/actions\';\\r\\nimport { RootState } from \'ReduxTypes\';\\r\\n\\r\\ntype ErrorReport = { hasError: boolean; error?: Error };\\r\\ntype StateProps = {\\r\\n  isLoading: boolean;\\r\\n  courses: courseModels.Course[];\\r\\n  error: ErrorReport;\\r\\n};\\r\\n\\r\\n/**\\r\\n * Redux dispatch and state mappings\\r\\n */\\r\\nconst dispatchProps = {\\r\\n  fetchCourses: fetchCoursesAsync.request,\\r\\n};\\r\\n\\r\\nconst mapStateToProps = (state: RootState): StateProps => ({\\r\\n  isLoading: state.courses.isLoadingCourses,\\r\\n  courses: courseSelectors.getReduxCourses(state.courses),\\r\\n  error: courseSelectors.getReduxCoursesError(state.courses),\\r\\n});\\r\\n\\r\\n/**\\r\\n * Component property type definitions\\r\\n */\\r\\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\\r\\n\\r\\n/**\\r\\n * CourseList component\\r\\n */\\r\\nconst CourseList = ({\\r\\n  courses = [],\\r\\n  error,\\r\\n  fetchCourses,\\r\\n  isLoading,\\r\\n}: Propas): JSX.Element => {\\r\\n  // fetch course action on mount\\r\\n  useEffect(() => {\\r\\n    console.log(\'COURSELIST FETCHING COURSES\');\\r\\n    fetchCourses();\\r\\n  }, [fetchCourses]);\\r\\n\\r\\n  if (isLoading) {\\r\\n    return <p>Loading...</p>;\\r\\n  }\\r\\n\\r\\n  if (error && error.hasError && error.error) {\\r\\n    throw error.error;\\r\\n    // if throw an error then encapsulating error boundary catches and displays.\\r\\n    // However when the container is loaded again via clicking on a Navbar link the useEffect\\r\\n    // action does not trigger. \\r\\n    \\r\\n    // Alternatively, if the error is rendered inside the container then the useEffect hook is \\r\\n    // still activated if the container is loaded again (e.g. via clicking on a Navbar link).\\r\\n    // return <p>{JSON.stringify(error.error, null, 2)}</p>;\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div style={{ marginTop: 20, padding: 30 }}>\\r\\n      {\\r\\n        <Grid container spacing={2 as GridSpacing} justify=\\"center\\">\\r\\n          {courses.map(element => (\\r\\n            <Grid item key={element.courseID}>\\r\\n              <Course course={element} />\\r\\n            </Grid>\\r\\n          ))}\\r\\n        </Grid>\\r\\n      }\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\n/**\\r\\n * Exports\\r\\n */\\r\\nexport default connect(\\r\\n  mapStateToProps,\\r\\n  dispatchProps,\\r\\n)(CourseList);\\r\\n```\\r\\n\\r\\nIf I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect\\r\\naction does not trigger. Subsequently, the fetchCourses action is not dispatched.\\r\\n\\r\\nWhy is the _useEffect_ hook not triggered on second load after it previously threw an error?\\r\\n\\r\\nMy ErrorBoundary component includes a home button for navigating to \'/\'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to \'/courses\' shouldn\'t this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused?\\r\\n\\r\\nWhat is best practice for resetting a component that threw an error for surrounding ErrorBoundary?","number":17219,"user":{"login":"dcs3spp"},"state":"closed","created_at":"2019-10-30T09:25:24Z"},{"id":514510216,"title":"Fragment under boolean condition leads to crashes","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nHaving such code sample inside render\'s return block\\r\\n```\\r\\n{booleanVariable && <Fragment>contents</Fragment>}\\r\\n```\\r\\n\\r\\nResults in error of a kind\\r\\n```\\r\\nNotFoundError: Failed to execute \'removeChild\' on \'Node\': The node to be removed is not a child of this node.\\r\\n```\\r\\n\\r\\nAbout 1% of users of an application were affected by this, however, I myself was not able to reproduce it. From a component error stack I was able to track-down where possibly can be an issue. Replacing `{booleanVariable && ...}` with ternary `{booleanVariable ? ... : null}` resolved the problem and our users are not facing it anymore.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nReact not throwing error. Maybe warning? Not rendering that particular part? But not crashing the whole application.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nIt crashed with react version `16.9.0`, other versions were not tested. Users that were affected have Windows 7+, Mac OS 10.13+ and Chrome 77+.\\r\\n","number":17218,"user":{"login":"jeniamoroz"},"state":"closed","created_at":"2019-10-30T09:22:34Z"},{"id":514358633,"title":"Move resetAfterCommit until after we updated the root\'s current tree","body":"Currently we disable all user space events in resetAfterCommit so, if you just use React events, it doesn\'t really matter where we call this.\\r\\n\\r\\nHowever, setting focus and selection can be observable e.g. using native browser events. If you setState or something in those events, they should probably behave as if you\'re already on the new tree.\\r\\n\\r\\nSimilarly if we do end up triggering blur/focus events simulated, then those should see the updated tree.\\r\\n\\r\\nInterestingly, this would fire before life-cycles which is confusing. Although that also happens if you set focus manually on the DOM in a life-cycle too. Triggering a blur after life-cycles could work but needs to take into account that focus can change possibly several times in the life-cycles too.\\r\\n\\r\\nRelated to https://github.com/facebook/react/pull/17214","number":17217,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2019-10-30T02:44:02Z"},{"id":514303383,"title":"Support package.json generation at build time","body":"This commit adds the ability to limit the inclusion of certain files to the experimental releases, such as `react-dom/unstable-flight-server.js`. More generally, it supports generating different package.jsons depending on the build environment (release channel).\\r\\n\\r\\nThe package.json files that live at `packages/<package_name>/package.json` serve multiple purposes. The release scripts use them for guessing the next stable version numbers; they serve as templates for the actual package.jsons that get published to npm (the release script rewrites the version numbers first); during local development, the package source is symlinked into node_modules, which means the package.json is used for module resolution by Jest, Flow, Rollup, node scripts, and so on.\\r\\n\\r\\nSo I would rather not fork the packages entirely like we do with other files (host config, feature flags, www-specific modules), because it could get confusing trying to keep the copies in sync.\\r\\n\\r\\nThere are a few different approaches we could use. One option is to generate the package.jsons in a post-install step, like we do with the Flow configs.\\r\\n\\r\\nBut since the immediate requirement is only to conditionally generate the package.jsons that are published to npm, another option is to generate those files during the build step. Everything else can use the existing package.json files that live in the source.\\r\\n\\r\\nSo it works like this:\\r\\n\\r\\n- If a package includes a `package.js`, the build script will use that instead of `package.json`.\\r\\n- `package.js` is a module that returns a JavaScript object of keys and values. The build script will serialize this to JSON and write it to the artifacts directory.\\r\\n- By convention, `package.js` files will import the `package.json` file from source and modify it before re-exporting.\\r\\n- If `package.js` does not exist for a module, the build script will use `package.json` directly.","number":17216,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-29T23:54:03Z"},{"id":514302428,"title":"\\"DevTools v4 is incompatible with this version of React\\" with React Native & latest version of React","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n**What is the current behavior?**\\r\\nAfter starting react-devtools, I get the following error message:\\r\\n```\\r\\nDevTools v4 is incompatible with this version of React\\r\\nEither upgrade React or install React DevTools v3:\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n* Use expo cli to initialize an expo app\\r\\n* run `yarn add react@latest` to ensure the most recent version of React is installed (currently v16.11.0)\\r\\n* run `yarn add react-devtools` to install react-devtools\\r\\n* run `yarn start` to start the app\\r\\n* run `npx react-devtools` to open react-devtools\\r\\n\\r\\n**What is the expected behavior?**\\r\\nreact-devtools should work with React Native and the latest version of React\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.11.0\\r\\nReact Native 0.59.3\\r\\nFedora 30","number":17215,"user":{"login":"kaitlynbrown"},"state":"closed","created_at":"2019-10-29T23:51:32Z"},{"id":514265360,"title":"[react-interactions] Disable event listener guarding for Flare","body":"I stumbled across a big internal issue relating to handling accessibility related focus management controls.\\r\\n\\r\\nSpecifically, we want to be able to track events that fire `focus` or `blur` events from mutations that ReactDOM makes to the DOM. So for example, if an `<input>` is focused and React unmounts this component (thus detatching it from the DOM tree and triggering respective `focus` and `blur` events) we want to be properly notified of such events (the `body` should gain `focus` in the above case). The reason why React today does not notify us on these events, is that we set an `enabled` flag during the commit phase of mutating the DOM. [The code for this can be found here](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactDOMEventListener.js#L331-L333).\\r\\n\\r\\nWithout such functionality, it\'s not possible to properly use React to track such changes appropriately \u2013 resulting into having manual DOM event listeners bypass React.","number":17214,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-29T22:27:05Z"},{"id":514210884,"title":"DevTools standalone shell changes:","body":"Cosmetic changes to the RN shell:\\r\\n1. Update React Native wording to mention recent changes to how DevTools and React Native are meant to connect.\\r\\n2. Tweak styles slightly.\\r\\n\\r\\n## Waiting to connect\\r\\n### Before\\r\\n![Screen Shot 2019-10-29 at 1 36 30 PM](https://user-images.githubusercontent.com/29597/67807080-58c34d00-fa51-11e9-83fc-a48d60a5c3e0.png)\\r\\n### After\\r\\n![Screen Shot 2019-10-29 at 1 36 51 PM](https://user-images.githubusercontent.com/29597/67807081-58c34d00-fa51-11e9-9af7-b07d676b0b93.png)\\r\\n\\r\\n## Error\\r\\n### Before\\r\\n<img width=\\"912\\" alt=\\"Screen Shot 2019-10-29 at 1 42 00 PM\\" src=\\"https://user-images.githubusercontent.com/29597/67807360-e56e0b00-fa51-11e9-91f8-55aeadc05c85.png\\">\\r\\n\\r\\n### After\\r\\n![Screen Shot 2019-10-29 at 1 57 25 PM](https://user-images.githubusercontent.com/29597/67808524-18b19980-fa54-11e9-9d4c-c47cdb5fc72b.png)\\r\\n","number":17213,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-29T20:43:01Z"},{"id":514164659,"title":"[react-interactions] Ensure props on scope query function is always Object","body":"This PR fixes an issue with React Scopes that I stumbled across with suspense boundaries. This ensures that the scope query function always passes through an object for props.","number":17212,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-29T19:23:42Z"},{"id":514153279,"title":"Dispatch commands to both UIManagers from both renderers","body":"ReactNative\'s internal module for [`codegenNativeCommands`](https://github.com/facebook/react-native/blob/master/Libraries/Utilities/codegenNativeCommands.js#L13) needs to dispatch to Fabric or paper depending on the node it was passed.\\r\\n\\r\\nThis makes the internal Renderer\'s exported `dispatchCommand` method both support components created with either renderer. \\r\\n\\r\\nThere was a test file `ReactFabricAndNative-test.internal.js` that tests components created with Fabric passed to the Paper renderer.","number":17211,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-10-29T19:04:09Z"},{"id":513998064,"title":"Could not find a declaration file for module \'babel-plugin-relay/macro\'","body":"I\'m trying to use relay with react/typescript and am having below issue when running \\"yarn start\\" - \\r\\nCould not find a declaration file for module \'babel-plugin-relay/macro\'\\r\\n\\r\\nGiven below are my relevant dependencies - \\r\\n```\\r\\n\\"dependencies\\": {\\r\\n    \\"@types/react\\": \\"^16.9.6\\",    \\r\\n    \\"@types/relay-runtime\\": \\"^6.0.6\\",   \\r\\n    \\"babel-plugin-relay\\": \\"^7.0.0\\",\\r\\n    \\"graphql\\": \\"^14.5.8\\",\\r\\n    \\"react\\": \\"^16.10.1\\",   \\r\\n    \\"react-relay\\": \\"^6.0.0\\",  \\r\\n    \\"typescript\\": \\"3.5.3\\"\\r\\n  }\\r\\n\\r\\n\\"devDependencies\\": {\\r\\n    \\"@types/react-relay\\": \\"^6.0.2\\",\\r\\n    \\"babel-plugin-macros\\": \\"^2.6.1\\",   \\r\\n    \\"graphql-compiler\\": \\"^1.7.0\\",\\r\\n    \\"relay-compiler\\": \\"^6.0.0\\",\\r\\n    \\"relay-compiler-language-typescript\\": \\"^8.0.0\\",\\r\\n    \\"relay-config\\": \\"^6.0.0\\"\\r\\n  }\\r\\n```\\r\\n\\r\\nGiven below is my babel.config.js - \\r\\n```\\r\\nmodule.exports = function (api) {\\r\\n    api.cache(true);\\r\\n\\r\\n    const plugins = [\\r\\n        \\"relay\\",\\r\\n        \\"macros\\"\\r\\n    ];\\r\\n    const presets = [\\r\\n        \\"env\\"\\r\\n    ];\\r\\n    const graphql = require(\'babel-plugin-relay/macro\');\\r\\n\\r\\n    return {\\r\\n        plugins,\\r\\n        presets,\\r\\n        graphql\\r\\n    };\\r\\n};\\r\\n```\\r\\n\\r\\nGiven below is the import statement in a tsx file where it\'s failing - \\r\\n`import graphql from \\"babel-plugin-relay/macro\\";`\\r\\n","number":17210,"user":{"login":"pula2000"},"state":"closed","created_at":"2019-10-29T15:16:21Z"},{"id":513959130,"title":"Error: \\"Could not find commit data for root \\"884\\" and commit 8\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\\r\\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\\r\\n\\r\\nComponent stack: in sc\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17209,"user":{"login":"adrianprzybyla"},"state":"closed","created_at":"2019-10-29T14:27:32Z"},{"id":513948819,"title":"Devtools tabs should not appear in chrome-extension pages when using react-devtools as an entry point","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe React devtools tabs in Chrome devtools can be displayed in extension pages, even though modifying extensions in other extensions is not supported by Chrome, and React devtools are therefore broken.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/927220/67774646-21927300-fa34-11e9-99b5-ea3c62a99e0d.png)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/927220/67774697-38d16080-fa34-11e9-8ea6-fddb21c7bb14.png)\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n1. Install Chrome and React devtools\\r\\n2. Open devtools in a chrome-extension page implemented with React\\r\\n\\r\\nExample: [prettier-chrome-extension](https://github.com/prettier/prettier-chrome-extension/tree/options) (install from source and open extension options)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nReact devtools should not appear when it\'s not supported, just like when devtools are opened on a page that doesn\'t use React.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- React 16.11.0\\r\\n- React Developer Tools 4.2.0 (10/3/2019)\\r\\n- Chrome 78.0.3904.70\\r\\n- macOS 10.15","number":17208,"user":{"login":"nickmccurdy"},"state":"open","created_at":"2019-10-29T14:13:36Z"},{"id":513871564,"title":"Bug: react-devtools TypeError: Do not know how to serialize a BigInt","body":"**What is the current behavior?**\\r\\n\\r\\nTypeError: Do not know how to serialize a BigInt which makes it so the react dev tools cannot inspect the component props.\\r\\n\\r\\nSteps to reproduce\\r\\n\\r\\n1. Set a component prop to some value of type `BigInt`.\\r\\n2. Open Chrome DevTools, then React Components view, try inspecting the component\\r\\n3. There will be an exception [here](https://github.com/facebook/react/blob/b438699d3620bff236282b049204e1221b3689e9/packages/react-devtools-extensions/src/contentScript.js#L28-L38) (with the message above)\\r\\n\\r\\nYou can repro this with the following https://codesandbox.io/s/mystifying-cache-jshv3\\r\\n\\r\\nNote that you need to repo via Chrome DevTools so that the bridge is active, if you use the codesandbox built-in DevTools the behavior is different.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThat bigints are handled in a similar way to how symbols are handled. So that they don\'t crash when they cross a boundary, i.e. postMessage.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nLatest version, hasn\'t worked before. That I know. Tested in Chrome and Firefox, although the behavior isn\'t exactly the same in Firefox as in Chrome, it doesn\'t appear to work in Firefox either.\\r\\n\\r\\nI would like to propose a fix for this but I cannot find where in the source this would go. I don\'t care for editing capabilities and such, I just don\'t want the dev tools to give up on my just because I have BigInts in my code.\\r\\n","number":17207,"user":{"login":"leidegre"},"state":"closed","created_at":"2019-10-29T12:07:08Z"},{"id":513653416,"title":"[SuspenseList] Don\'t treat the last row in hidden as deleted if already mounted","body":"Already mounted rows that resuspend may be considered as part of a tail if they\'re at the end. However, for purposes of the tail=\\"...\\" option they don\'t get deleted. We deal with that in cutOffTailIfNeeded.\\r\\n\\r\\nHowever, if they\'re also the first to suspend in the \\"hidden\\" case, we have a special case that deletes the actual rendered row. This needs to consider if that row was already mounted or things go wrong.\\r\\n","number":17206,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-29T02:18:57Z"},{"id":513252907,"title":"Utilize Suspense to express app init loader","body":"With Concurrent mode getting finalized, I went to try to solve an old problem I have.\\r\\n\\r\\nThe app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it\'s being restarted for each step and the experience is not that nice.\\r\\n\\r\\nI\'ve prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i\\r\\n\\r\\nThe first one that\'s active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.\\r\\n\\r\\nThe last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what\'s going on here.","number":17205,"user":{"login":"FredyC"},"state":"open","created_at":"2019-10-28T11:40:50Z"},{"id":513231103,"title":"Provide a way to identify an unmounting node in callback ref","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nA callback ref is executed with null before the corresponding component is unmounted.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI wish I could get the reference to the node before unmounting, [as a second argument](https://github.com/facebook/react/blob/4bc52ef0dfbb0389cc20b65cef0645afb7b85445/packages/react-reconciler/src/ReactFiberCommitWork.js#L208). Below is a reduced use case.\\r\\n\\r\\n```js\\r\\nconst Component = () => {\\r\\n  const refs = React.useRef([])\\r\\n  const setRefs = React.useCallback(\\r\\n    (node, unmountingNode) => {\\r\\n      if (node === null) {\\r\\n        return refs.current = refs.current.filter(ref => ref !== unmountingNode)\\r\\n      }\\r\\n      refs.current.push(node)\\r\\n   },\\r\\n   [])\\r\\n  return (\\r\\n    <>\\r\\n      <div ref={setRefs}></div>\\r\\n      <div ref={setRefs}></div>\\r\\n      <div ref={setRefs}></div>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nThe \\"real\\" usecase is a custom hook that observe intersections. It returns `setRefs`.\\r\\n\\r\\nEDIT: as I\'m editing this issue to fix typos, I realize that the callback signature is not so nice...\\r\\n","number":17204,"user":{"login":"cdoublev"},"state":"closed","created_at":"2019-10-28T10:53:10Z"},{"id":513228074,"title":"Empty object as SuspenseConfig acts like infinite timeout","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nProbable Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen an empty object is passed as SuspenseConfig, React waits infinitely on the previous tree for new Suspended components to get resolved.\\r\\n\\r\\n**A minimal demo of the problem:**\\r\\nHere is a demonstration, using the same example used throughout the concurrent docs:\\r\\nhttps://codesandbox.io/s/empty-suspense-config-example-88ghb \\r\\n\\r\\n**What is the expected behavior?**\\r\\nI don\'t know if it\'s a bug, or it\'s intentional. But if it\'s the expected behavior, I think it\'s better to add this to the documentation. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact and ReactDOM\'s experimental build","number":17203,"user":{"login":"Eddie-CooRo"},"state":"open","created_at":"2019-10-28T10:46:54Z"},{"id":513201168,"title":"Error: \\"Could not find node with id \\"1681\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Was profiling component performance.\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)\\r\\n    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103717)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n\\r\\nComponent stack: in gl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17202,"user":{"login":"asmyshlyaev177"},"state":"closed","created_at":"2019-10-28T09:53:08Z"},{"id":513139880,"title":"\\"de-opting to synchronous mode\\" in use-subscription README","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nOutdated README (maybe?)\\r\\n\\r\\n**What do the docs currently say?**\\r\\n\\r\\n> use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.\\r\\n\\r\\nIn the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.\\r\\n\\r\\nWould this mean that it\'s no longer \\"de-opting to sync mode\\", and the warning could be removed from the README?","number":17201,"user":{"login":"jamesknelson"},"state":"open","created_at":"2019-10-28T07:31:07Z"},{"id":513138346,"title":"how can I set few different refs to one element?","body":"for example, I had a ref from react-dnd and another one I need for outside hook. I solved it by just setting the ref to another inner div. and I can\'t reuse ref from react-dnd, because it\'s different object at all. is it possible or it\'s technical limitations?\\r\\n","number":17200,"user":{"login":"OlegBrony"},"state":"closed","created_at":"2019-10-28T07:26:44Z"},{"id":513093679,"title":"Identify component as \'pending\', when used with useTransition","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen using `useTransition`, the components are re-rendered with the last state they had. \\r\\n Without the ability to identify this \'pending\' phase, components can\'t conditionally choose not to throw a promise - ie. the promise was created outside React.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nComponents should be able to differentiate the current phase they\'re in, eg.\\r\\n\\r\\n```js\\r\\nconst phase = usePhase()\\r\\n// or\\r\\nconst isPending = useTransitionPending()\\r\\n```\\r\\n\\r\\n**Example**\\r\\n\\r\\nhttps://codesandbox.io/s/serene-wozniak-pnhhh\\r\\n\\r\\n**Use case**\\r\\n\\r\\nLibrary (pending release): [gqless](https://gqless.netlify.com/)\\r\\n\\r\\nI\'ve created a factory which tracks usage of \'references\' during render, and updates the components when they change:\\r\\n\\r\\n```js\\r\\nconst MyComponent = connected(() => {\\r\\n  const data = accessReference()\\r\\n  return <div>{data}</div>\\r\\n})\\r\\n```\\r\\n\\r\\n```js\\r\\nfunction connected(component) {\\r\\n\\treturn (props) => {\\r\\n\\t\\tconst forceUpdate = useForceUpdate()\\r\\n\\r\\n\\t\\treferences = startRecording()\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\treturn component(props)\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\treferences.stopRecording()\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfor (ref of references) {\\r\\n\\t\\t\\tref.onUpdate(forceUpdate)\\r\\n\\t\\t\\tref.onPendingChange(forceUpdate)\\r\\n\\t\\t\\tif (ref.isLoading) throw promise\\r\\n\\t\\t}\\r\\n\\t}\\t\\r\\n}\\r\\n```\\r\\n\\r\\nWithout the ability to check whether the current component is \'pending\', the promise will be thrown on the \'pending\' render phase - which prevents the transition from working.\\r\\n\\r\\nThis doesn\'t happen in the [examples](https://reactjs.org/docs/concurrent-mode-patterns.html), as the data is immutable and passed down as the `resource` prop.\\r\\n","number":17199,"user":{"login":"samdenty"},"state":"open","created_at":"2019-10-28T04:43:20Z"},{"id":512952610,"title":"React documentation in spanish, not very accurated and not very well translated","body":"\x3c!--\\r\\n  is not properly abug\\r\\n--\x3e\\r\\n\\r\\n**I\'ve found that the react documentation in spanish is not very well translated, I would like to help by fixing some grammar and translation errors that I\'ve detected**\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":17198,"user":{"login":"fsagaz"},"state":"closed","created_at":"2019-10-27T11:18:07Z"},{"id":512892918,"title":"Test with AppVeyor with Node 11 and 12","body":"Test with Node 11 and 12","number":17197,"user":{"login":"Saibamen"},"state":"open","created_at":"2019-10-26T22:24:49Z"},{"id":512866298,"title":"create-react-app hangs before creating the src folder","body":"I use `create-react-app first-app` and get:\\r\\n\\r\\n![react-bug](https://user-images.githubusercontent.com/13015155/67623915-07397900-f82b-11e9-9601-a8605148d0ee.png)\\r\\n\\r\\nand it just hangs there forever.\\r\\n\\r\\nThese are the contents of `first-app` after killing the process:\\r\\n![react-bug2](https://user-images.githubusercontent.com/13015155/67623922-2506de00-f82b-11e9-8ce0-885aac9e0294.png)\\r\\n\\r\\nI tried `npx create-react-app` and didn\'t work.\\r\\n\\r\\nAm using npm@6.12.0, node@12.13.0 and create-react-app@3.2.0","number":17196,"user":{"login":"mohd1996"},"state":"closed","created_at":"2019-10-26T18:01:14Z"},{"id":512863284,"title":"Page404 route renders everywhere while using ErrorBoundary","body":"```\\r\\nimport { BrowserRouter as Router, Route, Switch } from \'react-router-dom\';\\r\\nexport const routes = (\\r\\n  <Router>\\r\\n    <Switch>\\r\\n      <ErrorBoundary>\\r\\n        <Route exact path=\\"/\\" component={Home} />\\r\\n        <Route exact path=\\"/dividends\\" component={Dividends} />\\r\\n        <Route exact path=\\"/cashflows\\" component={Cashflows} />\\r\\n        <Route component={Page404} />\\r\\n      </ErrorBoundary>\\r\\n    </Switch>\\r\\n  </Router>\\r\\n);\\r\\n\\r\\n```\\r\\nWith above code, the Page404 rendering on every page, but if I comment <ErrorBoundary>, everything works file. (ErrorBoundary is working fine).","number":17195,"user":{"login":"nikhilknoldus"},"state":"closed","created_at":"2019-10-26T17:31:16Z"},{"id":512857758,"title":"[react-hooks/exhaustive-deps] warning with useEffect dependancies using array length [Question]","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nNot sure but asking about behavior.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`useEffect` is caching what inside it\'s block till any dependencies change (As i understood). I have implemented a table that has the abilities to update internally. I implemented it using internal `useState` but I was thinking about **why** using extra state internally while having parent state (Thinking about memory performance). So i did pass the `rows state` and it\'s `dispatcher` to the component.\\r\\n\\r\\nNow the problem comes to reach the limit of updating the state since there is no `useEffect` implemented internally. I succeeded implementing internal `useEffect` but with `rows state length` as one of the dependencies. but that solution give me a warning with `react-hooks/exhaustive-deps` !!\\r\\n\\r\\nNote: that i want the dispatcher inside table component since the table has the ability of updating, deleting, adding new rows.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nNot sure if this is a bug but i wanted to ask about it.\\r\\nI did a [CodeSandbox here](https://codesandbox.io/s/useeffect-dependancies-4mv54) as a simple reproduce for the issue.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nFrom what i saw that checking dependencies depending on what has been used inside `useEffect` but even though using `state` length i\'m getting the warning. Dose it consider as a correct dependencies, or ?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: **16.10.2**\\r\\nChrome: **77.0.3865.120 64-bit**\\r\\nLinux (ubunto).\\r\\n","number":17194,"user":{"login":"AhmedBHameed"},"state":"closed","created_at":"2019-10-26T16:42:42Z"},{"id":512847478,"title":"useRef does not persist value when used with createRoot","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a *bug*.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`React.useRef` does not persist value when using with `ReactDOM.createRoot`. It renders child component of main app component twice and does not persist ref value between these renders. \\r\\n\\r\\nWhen we use `React.useRef` with `ReactDOM.render` it renders child component of main app component only once.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\nhttps://codepen.io/sudesh955/pen/zYYzdrg?editors=1011\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIt should persist ref across renders. For more details see comments in codepen link. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nversion `0.0.0-experimental-f6b8d31a7` on chrome Version 78.0.3904.70 (Official Build) (64-bit) on ubuntu. ","number":17193,"user":{"login":"sudesh955"},"state":"closed","created_at":"2019-10-26T15:17:38Z"},{"id":512839268,"title":"fdf","body":"fdsfsa","number":17192,"user":{"login":"hang-yoko-tran"},"state":"closed","created_at":"2019-10-26T14:04:14Z"},{"id":512815518,"title":"DevTools: component path bar missing","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n**What is the current behavior?**\\r\\nThe new DevTools v4 is missing the component bar (don\'t know what it is exactly, it\'s in screenshot).\\r\\n\\r\\nThis screenshot is taken in the older version of Devtools, which v4 is missing.\\r\\n![C-hXDoWXgAEev_Q](https://user-images.githubusercontent.com/7337535/67617707-152dd080-f810-11e9-8716-f8fdba753288.jpg)\\r\\n","number":17191,"user":{"login":"blueberry6401"},"state":"closed","created_at":"2019-10-26T09:46:11Z"},{"id":512813254,"title":"useTransition hook name already exits in the ecosystem","body":"The new concurrent mode provides a new hook - [`useTransition`](https://reactjs.org/docs/concurrent-mode-reference.html#usetransition). However the name of it is confusing. The word \u201ctransition\u201d in web development already refers to animations and css [transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) property. There also exist [useTransition hook](https://www.react-spring.io/docs/hooks/use-transition) provided by react-spring library. So people who will use both concurrent mode and react-spring in their projects will be confused by clashing names.\\r\\n\\r\\nDid you consider different names for concurrent transitions? For example, `useTransaction` is not present in the ecosystems and can be used to describe concurrent updates.","number":17190,"user":{"login":"just-boris"},"state":"open","created_at":"2019-10-26T09:22:05Z"},{"id":512789520,"title":"16.8.5","body":"cool i like facebook, very helpful thanks","number":17188,"user":{"login":"jeranimation"},"state":"closed","created_at":"2019-10-26T04:36:25Z"},{"id":512765354,"title":"[eslint-plugin-react-hooks] useCallback does not add dependencies when callback is not function expression","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen the argument of `useCallback` is not a function expression eslint-plugin-react-hooks will not autofix  dependencies.\\r\\n\\r\\nExample:\\r\\n```js\\r\\nuseCallback(debounce(() => console.log(props.value), 100), []);\\r\\n```\\r\\n\\r\\nWorkaround:\\r\\n```js\\r\\nuseMemo(() => debounce(() => console.log(props.value), 100), [props.value]);\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n```js\\r\\nuseCallback(debounce(() => console.log(props.value), 100), [props.value]);\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\neslint-plugin-react-hooks@^1.6.0, react@16.9.0-alpha.0\\r\\n","number":17187,"user":{"login":"jim-chou-shopify"},"state":"open","created_at":"2019-10-26T00:12:59Z"},{"id":512765194,"title":"[concurrent mode]  useMemo and useState are initialized twice","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn concurrent mode, `useMemo` and `useState` appear to be initialized twice.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`useMemo` callback is only called when dependencies change and`useState` initializer is only called once. https://codesandbox.io/s/upbeat-glade-cndru\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`0.0.0-experimental-f6b8d31a7`\\r\\n\\r\\nThis bug only happens in concurrent mode. Legacy mode works as expected.\\r\\n","number":17186,"user":{"login":"aputinski"},"state":"closed","created_at":"2019-10-26T00:11:57Z"},{"id":512751716,"title":"useDeferredValue does not abort running reconcile work for stale value","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n**bug**\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen useDeferredValue value is updated while the previous reconcile work is still running,\\r\\nThe previous reconcile work is not aborted, and the new work is queued after it.\\r\\n\\r\\n**repro:**\\r\\nBased on useDeferredValue example,\\r\\nhttps://codesandbox.io/s/infallible-dewdney-9fkv9\\r\\n\\r\\nFor better reproducibility i\'ve made it to run longer using\\r\\n using `timeoutMs: 30000` + `while (performance.now() - now < 100) {` )\\r\\nand i\'ve added an indicator value: `Time since last key stroke`\\r\\nhttps://codesandbox.io/s/intelligent-mestorf-u0p2b\\r\\n\\r\\n* Start timeline record\\r\\n* Type A B C with 1-3 sec interval between key strokes.\\r\\n* See timeline, there\'s work of 24 secs 8 + 8 + 8, for each key stroke \\r\\n* See the values of `Result #X` changes to the old stale value.\\r\\n\\r\\nThis is not optimal for 2 reasons:\\r\\n* We show stale data when we have something newer.\\r\\n* The cpu is locked processing the old value reconcile, and the new value needs to wait.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe prev reconcile work should be cancelled/aborted,\\r\\nAnd the new value reconcile should start immediately \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact/react-dom `0.0.0-experimental-5faf377df`","number":17185,"user":{"login":"Bnaya"},"state":"open","created_at":"2019-10-25T22:59:18Z"},{"id":512486755,"title":"React.memo always rerenders function component with array props","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIi seems react  doesn\'t prevent rerender for a function component with array props. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/j7xze61g/) example below:**\\r\\n\\r\\nTo see the bug click the button and watch console log.\\r\\n```\\r\\nconst Panel1 = React.memo(({list}) => {\\r\\n    console.log(\'Panel1 re-render...\');\\r\\n    return <React.Fragment/>\\r\\n}) \\r\\nconst Panel2 = () => <Panel1 list={[]}/>\\r\\nconst Panel3 = () => {\\r\\n\\tconst [count, setCount] = React.useState(0);\\r\\n\\treturn (\\r\\n\\t    <div>\\r\\n\\t        <button onClick={() => setCount(count + 1)}>Click me</button>\\r\\n\\t\\t<Panel2/>\\r\\n\\t    </div>\\r\\n\\t)\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nArray props is same as other primitive types and unnecessary rerenders  should be prevented.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.10.1/Chrome/Windows/Not sure about previous versions","number":17184,"user":{"login":"AiGon"},"state":"closed","created_at":"2019-10-25T12:23:51Z"},{"id":512449969,"title":"fix: do not invoke function-like values in useDeferredValue","body":"When reading the code I noticed that, because the `State` hook is used internally in the implementation, trying to hold a function or class value as a `DeferredValue` would cause it to be invoked as a lazy initializer, or updater function.\\r\\n\\r\\nThis fixes it by using a closure. I considered using a `typeof` check, but I\'m not sure if adding the extra branches is useful. The branch could potentially avoid creating a closure on the common case, though. Not sure which is the best trade-off.","number":17183,"user":{"login":"Jessidhia"},"state":"open","created_at":"2019-10-25T10:59:18Z"},{"id":512429755,"title":"React_.createContext is not a function","body":"Hi so i have been trying to implement react context api into my project, After follow the steps in the guide: https://developerhandbook.com/react/build-a-complete-property-listings-page-with-react/\\r\\n\\r\\nI ended up getting an error when i tried to display some of the information.\\r\\n\\r\\nThis is the error i got in my console log:\\r\\n```\\r\\n\\r\\nOrderListProvider.js:6 Uncaught TypeError: __WEBPACK_IMPORTED_MODULE_0_react__.createContext is not a function\\r\\n    at Object../src/context/OrderListProvider.js (OrderListProvider.js:6)\\r\\n    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)\\r\\n    at fn (bootstrap 39db4eed0e38b5656c68:88)\\r\\n    at Object../src/components/Home.js (FetchData.js:3)\\r\\n    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)\\r\\n    at fn (bootstrap 39db4eed0e38b5656c68:88)\\r\\n    at Object../src/App.js (fetch.js:461)\\r\\n    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)\\r\\n    at fn (bootstrap 39db4eed0e38b5656c68:88)\\r\\n    at Object../src/index.js (index.css?f255:26)\\r\\n    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)\\r\\n    at fn (bootstrap 39db4eed0e38b5656c68:88)\\r\\n    at Object.0 (registerServiceWorker.js:108)\\r\\n    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)\\r\\n    at bootstrap 39db4eed0e38b5656c68:724\\r\\n    at bootstrap 39db4eed0e38b5656c68:724\\r\\n```\\r\\n\\r\\nI tried updating my react since the guide mentioned i need 16.3 at least, and i only had 16.0.0.\\r\\n\\r\\nHowever after updating react to the newest version it still says the same thing. I can\u2019t seem to find any information about it in the release notes on github.\\r\\n\\r\\nThis is my createContext function:\\r\\n\\r\\n```\\r\\n\\r\\nconst OrderListContext = React.createContext(DefaultState);\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\nAnd this is where i consume it:\\r\\n```\\r\\n<OrderListProvider>\\r\\n                <OrderListConsumer>\\r\\n                    {function (value) {\\r\\n                        const { orderList } = value\\r\\n                        return (\\r\\n                            <ul>\\r\\n                                {orderList.map(listing => (\\r\\n                                    <li>{listing.varetitle}</li>\\r\\n                                ))}\\r\\n                            </ul>\\r\\n                        )\\r\\n                    }}\\r\\n                </OrderListConsumer>\\r\\n            </OrderListProvider>\\r\\n\\r\\n\\r\\n```\\r\\nThis is my package.json\\r\\n```\\r\\n{\\r\\n  \\"name\\": \\"React_Demo\\",\\r\\n  \\"version\\": \\"0.1.0\\",\\r\\n  \\"private\\": true,\\r\\n  \\"dependencies\\": {\\r\\n    \\"bootstrap\\": \\"^4.3.1\\",\\r\\n    \\"react\\": \\"^16.11.0\\",\\r\\n    \\"react-bootstrap\\": \\"^0.32.4\\",\\r\\n    \\"react-dom\\": \\"\\"^16.11.0\\"\\",\\r\\n    \\"react-router-bootstrap\\": \\"^0.25.0\\",\\r\\n    \\"react-router-dom\\": \\"^5.1.2\\",\\r\\n    \\"react-scripts\\": \\"3.2.0\\",\\r\\n    \\"rimraf\\": \\"^3.0.0\\"\\r\\n  },\\r\\n  \\"scripts\\": {\\r\\n    \\"start\\": \\"rimraf ./build && react-scripts start\\",\\r\\n    \\"build\\": \\"react-scripts build\\",\\r\\n    \\"test\\": \\"react-scripts test --env=jsdom\\",\\r\\n    \\"eject\\": \\"react-scripts eject\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\nI have recreated my code in stackblitz without data from a fetch funktion: https://stackblitz.com/edit/react-ssqc4t It doesn\'t seem to show the error so i don\'t understand why my code doesn\'t work in visual studio 2017\\r\\n\\r\\nI have also tried to verify and clear my npm cache, but it still shows the same error.\\r\\n\\r\\nNode.js have also been updates to the newest version. Still the same error.\\r\\n\\r\\n","number":17182,"user":{"login":"mads221h"},"state":"closed","created_at":"2019-10-25T10:15:47Z"},{"id":512371501,"title":"Runtime error in production mode, makes browser hang","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** : BUG\\r\\n\\r\\n**What is the current behavior?** : Whenever there is a runtime error occuring on a page, the error stack is being logged again and again, and the browser hangs up\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?** - the browser should not hang, even if the nothing in rendered on the browser\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React : 16.8.6, Chrome : 77.0.3865.120, MAC OS\\r\\n\\r\\n\\r\\nAttaching a screenshot for reference\\r\\n![Screenshot 2019-10-25 at 1 48 20 PM](https://user-images.githubusercontent.com/8156467/67555128-59e13b00-f72e-11e9-8155-4c1550fecc27.png)\\r\\n\\r\\nas you can see, 1697 errors logged in just around 10s, which is causing the browser to hang indefinitely.","number":17181,"user":{"login":"vsvanshi"},"state":"closed","created_at":"2019-10-25T08:16:33Z"},{"id":512359091,"title":"Suggestion: Block unsafe javascript: URLs in Concurrent and Blocking Modes","body":"In 16.9.0, a warning was added about `javascript:` URLs. This check is very, very important, as it\'s incredibly easy to forget about just once place where potential user data is passed onto DOM way. And of course, allowing a javascript: URL to be injected into DOM is a very serious XSS issue.\\r\\n\\r\\nI griped before that this is too important to be just a warning, and suggested that a semver-compatible solution is to provide an exported function that allows a runtime opt-in to the new safe behavior. This suggestion was dismissed, since if I want this, I can just make my own build of react with the flag enabled. (Of course, almost no one will do this, because it\'s just too much of a pain to make your own dependency builds with every release)\\r\\n\\r\\nI\'d like to make a similar suggestion again. Since Concurrent and Blocking modes are coming soon(ish), and make many breaking changes anyway, why not take this opportunity to also block unsafe javascript: URLs when the mode is enabled? I know that URLs have nothing to do with concurrent mode (unlike unsafe lifecycle methods, etc.), but since many people will want to jump onto this new feature anyway and are willing to deal with some migration required anyway, why not add this vital security precaution as well?\\r\\n\\r\\nWaiting until React 17 to protect\u2026\xa0well, probably countless React apps that don\'t properly sanitize URLs, just doesn\'t seem reasonable, when the feature is already implemented, only disabled under a feature flag.\\r\\n\\r\\ncc @gaearon @sebmarkbage ","number":17180,"user":{"login":"radex"},"state":"open","created_at":"2019-10-25T07:48:03Z"},{"id":512204709,"title":"Dynamic import with Hook.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nTrying dynamic import with hooks and fail with this error: \\r\\n\\r\\n> Should have a queue. This is likely a bug in React. Please file an issue.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n```\\r\\n   const [PathTest, setPathTest] = useState(\\"\\");\\r\\n\\r\\n  import(`Layout/ModalTest`).then(module => setPathTest(module.default))\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nDynamic import with hooks.  This is a example with class component:\\r\\n\\r\\nimport(`${path}`).then(module => this.setState({ module: module.default }))\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n    \\"react\\": \\"^16.9.0\\",Debian,Vivaldi.\\r\\n\\r\\n","number":17179,"user":{"login":"linkdeseda"},"state":"closed","created_at":"2019-10-24T22:07:11Z"},{"id":512175976,"title":"Add CSS shorthands for horizontal & vertical variants for padding and margin","body":"Add CSS shorthands for padding and margin that are used in _react-native_:\\r\\n* `verticalMargin` and `horizontalMargin`\\r\\n* `verticalPadding` and `horizontalPadding`\\r\\n","number":17178,"user":{"login":"zhirzh"},"state":"open","created_at":"2019-10-24T20:53:55Z"},{"id":512160137,"title":"Update .mailmap","body":"Update authors due to name change.","number":17177,"user":{"login":"terabaud"},"state":"closed","created_at":"2019-10-24T20:19:23Z"},{"id":512147375,"title":"Unnecessary re-render functional components","body":"Hi,\\r\\n\\r\\nI was thinking about functional components and performance enhancements.\\r\\nDoing some tests, I noticed that react re-render children provided by functional components again when parent updates, even when they just render a static JSX (don\'t receive props or use any value provided by a useState hook, for example, like `const Component = () => <h1>Hellow World!</h1>`).\\r\\nBut using a `React.memo` HOC (with or without a mocked `propsAreEquals` function as argument, like `() => true`) the behavior is the expect \\"don\'t re-render\\". Do this really necessary? I think React can jump this automatic, because the component don\'t have a trigger can change its final result.\\r\\nOr, am I not noticing something?\\r\\nIt is easy to replicate this test case, but I can provide a test repository if necessary.\\r\\nWhat do you think?\\r\\nI use devTools highlights to see render events.","number":17176,"user":{"login":"jefferson-vieira"},"state":"closed","created_at":"2019-10-24T19:51:48Z"},{"id":512129386,"title":"Add CodeSandbox CI Config","body":"This will enable [CodeSandbox CI](https://ci.codesandbox.io) on the React repo. To have a better idea of what CodeSandbox CI does you can read more about it here: https://u2edh.csb.app/. I recommend merging this PR first before installing the GitHub App, to ensure that all future PRs will work from the get-go.\\r\\n\\r\\nThe gist of it is:\\r\\n\\r\\nThe goal of this app is to make it easier for you to test your library without publishing to npm yet. Since CodeSandbox is already used for bug reports we wanted to make it possible to also test the PR version of your library with the existing bug reports.\\r\\n\\r\\nIn an ideal flow, it would work like this:\\r\\n\\r\\n1. Someone opens an issue for a bug with a sandbox reproducible\\r\\n2. Someone opens a fix PR mentioning the issue\\r\\n3. We build the library from the PR, fork the sandbox repro and install the new library in that sandbox\\r\\nThis way you will only have to open the generated sandbox to confirm that the fix works. No need to clone, install or test locally.","number":17175,"user":{"login":"CompuIves"},"state":"closed","created_at":"2019-10-24T19:12:30Z"},{"id":512010432,"title":"Passing function from functionnal component parent to class component children","body":"Do you want to request a feature or report a bug?\\r\\n\\r\\nBug (maybe) \\r\\n\\r\\nWhat is the expected behavior :\\r\\n\\r\\nhttps://codesandbox.io/s/react-hooks-counter-demo-fdvcp\\r\\n\\r\\nPlease check my example and the console. The value \\"count\\" inside the function \\"onPropertyChange\\" stay at 0 ? It dosen\'t make sense. Did you pass the function as a reference to the children ? \\r\\n\\r\\nWhen you make the same example with two classes component it\'s working. When you make the same example and you put the value inside shouldComponentUpdate at true it\'s working too but for me it shouldn\'t be needed.\\r\\n\\r\\n I must find my current value when I call \\"onPropertyChange\\" \\r\\n","number":17174,"user":{"login":"valentinbourqui"},"state":"closed","created_at":"2019-10-24T15:12:07Z"},{"id":511907316,"title":"Question about useLayoutEffect","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nThis is a question.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`useLayoutEffect` does not always seem to complete operations before DOM paint.\\r\\nI use `useLayoutEffect` to apply certain styles to elements before they are painted to DOM. In particular, I am trying to reproduce the [FLIP](https://css-tricks.com/animating-layouts-with-the-flip-technique/) technique to make shuffling a list pretty. I store DOM coordinates for every list child in a `ref` object on first render, and on second render in `useLayoutEffect` I use those to compare with new coordinates and trigger an animation. To keep track of children I give them a `data-id` attribute.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nIn my demo I randomly shuffle items, but animations do not happen if I sort them back to their initial state, in which they are ordered.\\r\\n\\r\\nHere is the demo:\\r\\nhttps://flip.jlkiri.now.sh/\\r\\nOR\\r\\nhttps://codesandbox.io/s/gallant-heyrovsky-dwdps\\r\\n\\r\\nHere is the code for the demo and the hook I use:\\r\\nhttps://github.com/jlkiri/react-easy-flip\\r\\nhttps://github.com/jlkiri/react-easy-flip/blob/master/src/hooks/useFlip.js\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nMy understanding is that restoring the initial order should work just like shuffling, since DOM position for a particular child with a particular `data-id` changes. Is this a result of some hidden heuristics of the React renderer or a bug?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: 16.10.2\\r\\nOS: Windows\\r\\nBrowsers: Chrome, Firefox, Edge\\r\\nPrevious versions: Do not know about versions in which it works\\r\\n","number":17173,"user":{"login":"jlkiri"},"state":"closed","created_at":"2019-10-24T12:19:52Z"},{"id":511759074,"title":"huhuo","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17172,"user":{"login":"TKQCuong"},"state":"closed","created_at":"2019-10-24T07:25:54Z"},{"id":511428867,"title":"change props or hook state in dev-tool won\'t trigger re-render ?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nchange props or hook state won\'t trigger re-render\\r\\n![Oct-24-2019 00-05-34](https://user-images.githubusercontent.com/7534668/67412742-6b252d00-f5f2-11e9-80fc-114236c5a3ea.gif)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nchange props or hook state should trigger re-render\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n```\\r\\n\\"react\\": \\"^16.10.2\\",\\r\\n\\"react-dom\\": \\"^16.10.2\\",\\r\\n\\r\\nchrome 78.0.3904.70\\r\\nmacos Catalina 10.15\\r\\n```\\r\\n","number":17171,"user":{"login":"littlee"},"state":"closed","created_at":"2019-10-23T16:09:12Z"},{"id":511252283,"title":"dangerouslySetInnerHTML, children, and a bogus hydration warning","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug (initially reported at https://github.com/zeit/next.js/issues/9173).\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf a component has both `dangerouslySetInnerHTML` and `children` props, and the component is used with just the `children` prop, on page load the client logs a warning beginning with ``Warning: Prop `dangerouslySetInnerHTML` did not match.``.\\r\\n\\r\\nInterestingly:\\r\\n\\r\\n- If just `dangerouslySetInnerHTML` is used there is no warning.\\r\\n- Multiple instances with just a `children` prop results in only one warning, for the first occurance.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nDemo: https://codesandbox.io/s/react-hydration-warning-demo-3je59\\r\\n\\r\\nIn a Next.js project, create a page with the following content:\\r\\n\\r\\n```jsx\\r\\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => (\\r\\n  <div dangerouslySetInnerHTML={dangerouslySetInnerHTML} children={children} />\\r\\n)\\r\\n\\r\\nexport default () => <TestComponent>a</TestComponent>\\r\\n```\\r\\n\\r\\nLoading the page in a browser will result in this warning logging to the console:\\r\\n\\r\\n```\\r\\nWarning: Prop `dangerouslySetInnerHTML` did not match. Server: \\"a\\" Client: \\"\\"\\r\\n```\\r\\n\\r\\nNote that the hydration warning is bogus; using view source and the inspector you can see the SSR and client rendered HTML is identical and correct.\\r\\n\\r\\nThis works just the same as before but without a hydration warning:\\r\\n\\r\\n```jsx\\r\\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => {\\r\\n  const divProps = {}\\r\\n  if (dangerouslySetInnerHTML)\\r\\n    divProps.dangerouslySetInnerHTML = dangerouslySetInnerHTML\\r\\n  if (children) divProps.children = children\\r\\n\\r\\n  return <div {...divProps} />\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThere should be no hydration warning at first client render.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nNot sure if the bug is present in old versions of React, but it can be seen with v16.11.0.","number":17170,"user":{"login":"jaydenseric"},"state":"open","created_at":"2019-10-23T11:13:04Z"},{"id":511107923,"title":"0.11 stable","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17169,"user":{"login":"nhht77"},"state":"closed","created_at":"2019-10-23T06:36:58Z"},{"id":511024159,"title":"Script tags are rendered inconsistently between client and server (html-encoded on server)","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nServer-rendered script tags are html-encoded. Client-rendered script tags are not.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n1. Render a script tag with quotes on the server.\\r\\n2. Render a script tag with quotes on the client.\\r\\n3. Compare the output. \\r\\n\\r\\nNote that the quotes are html-encoded to `&quot` when rendered on the server.\\r\\n\\r\\nThis CodeSandbox is a little rough but very simple: https://codesandbox.io/s/affectionate-star-xe8ym\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe script tag content is not html-encoded on either the server or the client.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.6\\r\\nI\'m not sure when this was introduced.","number":17168,"user":{"login":"accidentaldeveloper"},"state":"open","created_at":"2019-10-23T01:58:52Z"},{"id":510496674,"title":"Feature request: useRender()","body":"Okay, so I\'ve played around with hooks and come to like the way you can compose hooks. The only issue I have is that I would have liked to render something within certain hooks.\\r\\n\\r\\n```\\r\\nfunction useTooltip() {\\r\\n  const [message, setMessage] = useState(null)\\r\\n  const [x, setX] = useState(null)\\r\\n  const [y, setY] = useState(null)\\r\\n\\r\\n  // ...\\r\\n\\r\\n  useRender(() => {\\r\\n    return (\\r\\n      <Portal>\\r\\n        <Tooltip x={x} y={y}>My tooltip</Tooltip>\\r\\n      </Portal>\\r\\n    )\\r\\n  }, [x, y])\\r\\n}\\r\\n```\\r\\n\\r\\nIn my mind this would logically be rendered before the template returned from the component.","number":17167,"user":{"login":"adrianhelvik"},"state":"closed","created_at":"2019-10-22T08:13:40Z"},{"id":510380915,"title":"preventDefault() on pointerdown events don\'t work as expected on Chrome for Android","body":"**Do you want to request a feature or report a bug?**\\r\\nI would like to report a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nReproduction CodeSandbox: <https://codesandbox.io/s/pointerdown-prevent-default-react-5f8by>\\r\\n\\r\\nOn Chrome for Android (tested on Chrome 77.0.3865.116):\\r\\n1. Click on \\"Without preventDefault() on pointerdown\\": `pointerdown`, `mousedown`, `focus`, `mouseup` and `click` are triggered.\\r\\n2. Click on \\"With preventDefault() on pointerdown\\": All of the previous events are triggered as well.\\r\\n\\r\\nThe [Pointer Events spec](https://www.w3.org/TR/pointerevents/#the-pointerdown-event) specifies that canceling the `pointerdown` event (if the `isPrimary` property is `true`) prevents the firing of certain compatibility mouse events (i.e. `mouseup` and `mousedown`).\\r\\n\\r\\nOn a React app, this work as expected on the current versions of the desktop apps I tested. It also works as expected on iOS Safari.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nClicking on \\"With preventDefault() on pointerdown\\": Should only trigger `pointerdown` and `click` events.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nTested on React 16.10.2 on Chrome for Android (Chrome 77.0.3865.116). Didn\'t work on React 16.8.6 either.","number":17166,"user":{"login":"voluntadpear"},"state":"closed","created_at":"2019-10-22T01:26:38Z"},{"id":510351704,"title":"Rename createSyncRoot to createBlockingRoot","body":"\\"Sync\\" is easy to confuse with the Legacy mode. It also might sound too positive.\\r\\n\\r\\nWhile I\'m renaming `createSyncRoot` to `createBlockingRoot`, I also did some find-and-replace in comments and internal naming. Let\'s standardize on:\\r\\n\\r\\n* Legacy Mode: The old one.\\r\\n* Blocking Mode: createBlockingRoot\\r\\n* Concurrent Mode: createRoot","number":17165,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-10-21T23:30:21Z"},{"id":510337649,"title":"Add guard to handle modified React elements with non-string keys","body":"Resolves #17134\\r\\n\\r\\nI\'m not convinced we should land this PR. Seems like maybe [this should be an unsupported use case](https://github.com/facebook/react/issues/17134#issuecomment-544734845). Interested in hearing what others thing though!","number":17164,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-21T22:46:30Z"},{"id":510317658,"title":"React re-executes render() right after an exception has been thrown in the same render() method","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nI would like to clarify a doubt regarding this behaviour (maybe a bug? I don\'t know).\\r\\n\\r\\n**What is the current behavior?**\\r\\nBy playing with the Error Boundaries demo:\\r\\n\\r\\nhttps://codepen.io/gaearon/pen/wqvxGa?editors=0010\\r\\n\\r\\nI discovered that when an exception is thrown in `render()`, React re-executes that same `render()` method before running the corresponding Error Boundary\'s code.\\r\\n\\r\\nCheck out the same code with a `console.log` line added both to `BuggyCounter.render()` and `componentDidCatch()`:\\r\\n\\r\\n```\\r\\nclass ErrorBoundary extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { error: null, errorInfo: null };\\r\\n  }\\r\\n  \\r\\n  componentDidCatch(error, errorInfo) {\\r\\n    // Catch errors in any components below and re-render with error message\\r\\n    console.log(\'componentDidCatch\') // <------------------- LOG\\r\\n    this.setState({\\r\\n      error: error,\\r\\n      errorInfo: errorInfo\\r\\n    })\\r\\n    // You can also log error messages to an error reporting service here\\r\\n  }\\r\\n  \\r\\n  render() {\\r\\n    if (this.state.errorInfo) {\\r\\n      // Error path\\r\\n      return (\\r\\n        <div>\\r\\n          <h2>Something went wrong.</h2>\\r\\n          <details style={{ whiteSpace: \'pre-wrap\' }}>\\r\\n            {this.state.error && this.state.error.toString()}\\r\\n            <br />\\r\\n            {this.state.errorInfo.componentStack}\\r\\n          </details>\\r\\n        </div>\\r\\n      );\\r\\n    }\\r\\n    // Normally, just render children\\r\\n    return this.props.children;\\r\\n  }  \\r\\n}\\r\\n\\r\\nclass BuggyCounter extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { counter: 0 };\\r\\n    this.handleClick = this.handleClick.bind(this);\\r\\n  }\\r\\n  \\r\\n  handleClick() {\\r\\n    this.setState(({counter}) => ({\\r\\n      counter: counter + 1\\r\\n    }));\\r\\n  }\\r\\n  \\r\\n  render() {\\r\\n    console.log(\'this.state.counter\', this.state.counter) // <------------------- LOG\\r\\n    if (this.state.counter === 5) {\\r\\n      // Simulate a JS error\\r\\n      throw new Error(\'I crashed!\');\\r\\n    }\\r\\n    return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div>\\r\\n      <p>\\r\\n        <b>\\r\\n          This is an example of error boundaries in React 16.\\r\\n          <br /><br />\\r\\n          Click on the numbers to increase the counters.\\r\\n          <br />\\r\\n          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\\r\\n        </b>\\r\\n      </p>\\r\\n      <hr />\\r\\n      <ErrorBoundary>\\r\\n        <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\\r\\n        <BuggyCounter />\\r\\n        <BuggyCounter />\\r\\n      </ErrorBoundary>\\r\\n      <hr />\\r\\n      <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\\r\\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\\r\\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nReactDOM.render(\\r\\n  <App />,\\r\\n  document.getElementById(\'root\')\\r\\n);\\r\\n\\r\\n```\\r\\n\\r\\nAfter the first rendering I see (OK):\\r\\n\\r\\n![Screen Shot 2019-10-21 at 23 33 31](https://user-images.githubusercontent.com/10134421/67245825-3633a180-f45d-11e9-964d-b59b80ec09ae.png)\\r\\n\\r\\nAfter clicking on the counter 4 times (OK):\\r\\n\\r\\n![Screen Shot 2019-10-21 at 23 33 43](https://user-images.githubusercontent.com/10134421/67245865-51061600-f45d-11e9-9e27-f02fcdc31c73.png)\\r\\n\\r\\nThen, after clicking once more (Why does `render()` gets executed twice?):\\r\\n\\r\\n![Screen Shot 2019-10-21 at 23 33 54](https://user-images.githubusercontent.com/10134421/67245916-7004a800-f45d-11e9-908f-ebd93dac4326.png)\\r\\n\\r\\nAfter that, `componentDidCatch()` is, as expected, executed only once.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nCannot tell. This is not a problem in se because of the idempotent nature of `render()` (which has to be pure), but makes me think that this is an unneeded call because if an error has been thrown in `render()`, re-executing it right away would still lead to the same exception being thrown.\\r\\n\\r\\nOr, is there something I am missing? Maybe related to how React works internally and because of that it needs to recall `render()` as soon as that same `render()` has thrown...\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nOS: OS X\\r\\nBrowser: Chrome 77\\r\\nUsing the same React 16 development version of the Pen:\\r\\n\\r\\n`https://unpkg.com/react@16/umd/react.development.js`\\r\\n`https://unpkg.com/react-dom@16/umd/react-dom.development.js`\\r\\n\\r\\nThank you for the attention.\\r\\n","number":17163,"user":{"login":"tonix-tuft"},"state":"open","created_at":"2019-10-21T22:00:35Z"},{"id":510317544,"title":"Fixed a style bug in props editor","body":"### Before\\r\\n![Screen Shot 2019-10-21 at 2 59 55 PM](https://user-images.githubusercontent.com/29597/67246510-7cfca980-f413-11e9-82db-48e48935dd4c.png)\\r\\n\\r\\n### After\\r\\n![Screen Shot 2019-10-21 at 2 59 25 PM](https://user-images.githubusercontent.com/29597/67246507-7c641300-f413-11e9-9adc-cb25146badd8.png)\\r\\n","number":17162,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-21T22:00:21Z"},{"id":510208136,"title":"react-dom formatting for \'content\' style value should add quotes","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug or incomplete feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen formatting string css value in createDangerousStringForStyles function, it leaves string as is without quotes as required by css language. For example, \'content\' value requires quotes.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nthe debugger line:\\r\\nReactDOMServer.renderToString(React.createElement(\'s\',{style:{content:\\"\\"}}))\\r\\nresult in:\\r\\n\\"<s style=\\"content:\\" data-reactroot=\\"\\"></s>\\"\\r\\n\\r\\n**What is the expected behavior?**\\r\\nit should be \\r\\n\\"<s style=\\"content:\'\'\\" data-reactroot=\\"\\"></s>\\"\\r\\nThe \'content\' syntax at https://developer.mozilla.org/en-US/docs/Web/CSS/content requires quotes to specify string value.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact-dom@16.10.2\\r\\nGoogle Chrome Version 77.0.3865.120 (Official Build) (64-bit)\\r\\nSafari Version 13.0.2 (14608.2.40.1.2)\\r\\n","number":17161,"user":{"login":"vtolkov"},"state":"closed","created_at":"2019-10-21T18:55:23Z"},{"id":510203585,"title":"Read current time without marking event start time","body":"`requestCurrentTime` is only meant to be used for updates, because subsequent calls within the same event will receive the same time. Messing this up has bad consequences.\\r\\n\\r\\nI renamed it to `requestCurrentTimeForUpdate` and created a new function that returns the current time without the batching heuristic, called `getCurrentTime`.\\r\\n\\r\\nSwapping `requestCurrentTime` for `getCurrentTime` in the DevTools hook fixes the regression test added in #17159.","number":17160,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-21T18:49:28Z"},{"id":510195688,"title":"Failing test: DevTools hook freezes timeline","body":"The DevTools hook calls `requestCurrentTime` after the commit phase has ended, which has the accidental consequence of freezing the start time for subsequent updates. If enough time goes by, the next update will instantly expire.\\r\\n\\r\\nI\'ll open potential fixes in separate PRs:\\r\\n\\r\\n1. Use microtask to reset current event time: #17158\\r\\n2. Don\'t call `requestCurrentTime` after commit phase has ended: #17160","number":17159,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-21T18:39:11Z"},{"id":510155193,"title":"Use a microtask to detect end of event","body":"Updates of like priority that occur within the same browser event are guaranteed to be batched. This is an important guarantee for event emitter or subscription-like patterns where a single browser event can spawn updates on many different components, all of which need to commit consistently.\\r\\n\\r\\nTo do this, we have a heuristic of marking the first \\"event time\\" of an update inside an event. Subsequent updates in the same event will reuse the same event time.\\r\\n\\r\\nAt the end of the event, the event time should be cleared. Failing to clear the event time has the effect of \\"freezing\\" the timeline, causing weird expiration quirks.\\r\\n\\r\\nThe event time used to be cleared right before entering the render phase. This mostly works, since every update will eventually be followed by a render task. However, it has some flaws: if there\'s lots of other non-React main thread work in the mean time, subsequent events could get overbatched. The heuristic is also a bit fragile; it happens to be the case that every call to `requestCurrentTime` is accompanied by a render task, but that may not necessarily always be the case, creating a subtle refactor hazard.\\r\\n\\r\\nInstead of relying on the next render task to reset the current event time, this change schedules a microtask.\\r\\n\\r\\nI didn\'t use an actual microtask because React does not currently require a Promise polyfill. Instead, I\'m using a Scheduler task at immediate priority, which has almost the same semantics. (There\'s even an open question of whether we should get rid of Scheduler\'s \\"immediate\\" priority in favor of microtasks, but since it currently exists in the browser proposal, too, we can figure that out later.)\\r\\n\\r\\nSee https://github.com/facebook/react/pull/17159 for context on what prompted this PR","number":17158,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-21T17:44:50Z"},{"id":509919136,"title":"[DOM] Add support for the `inert` attribute","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen specifying `inert={false}` on an element, React throws the following message:\\r\\n\\r\\n```\\r\\nWarning: Received `false` for a non-boolean attribute `inert`.\\r\\n```\\r\\n\\r\\nHowever, `inert={undefined}` works fine as a replacement for `false`, while `inert=\\"\\"` (empty string) provides an escape hatch as a truthy value.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe `inert` attribute should be accepted as a boolean DOM attribute, as [proposed](https://html.spec.whatwg.org/multipage/interaction.html#inert) by the HTML Standard.\\r\\n","number":17157,"user":{"login":"kripod"},"state":"open","created_at":"2019-10-21T12:06:09Z"},{"id":509901522,"title":"Eslint plugin for Hooks gives warning about dispatch in dependencies","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf I don\'t include `dispatch` in the dependency list of a `useCallback` hook, I get this warning:\\r\\n\\r\\n```\\r\\nReact Hook useCallback has a missing dependency: \'dispatch\'. Either include it or remove the dependency array.eslint(react-hooks/exhaustive-deps)\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\nSee line 50 in `Application.js`: https://codesandbox.io/s/competent-bash-47zt1\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThere should be no warning, as per the [React docs](https://reactjs.org/docs/hooks-reference.html#usereducer):\\r\\n\\r\\n> React guarantees that dispatch function identity is stable and won\u2019t change on re-renders. This is why it\u2019s safe to omit from the useEffect or useCallback dependency list.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- react@16.10.2\\r\\n- react-dom@16.10.2\\r\\n- eslint-plugin-react-hooks@1.7.0\\r\\n- eslint@6.5.1\\r\\n- dbaeumer.vscode-eslint@1.9.1\\r\\n- vscode@1.39.2","number":17156,"user":{"login":"PaulRBerg"},"state":"closed","created_at":"2019-10-21T11:27:22Z"},{"id":509824218,"title":"Force DOM flush for printing purposes","body":"Two years ago there was issue #11876 about printing. Sync DOM flush was [recommended by @gaearon](https://github.com/facebook/react/issues/11876#issuecomment-352421144). However, with the latest React this does not seem to work anymore. It even seems that it somehow breaks the application, no print preview is ever displayed and sandbox preview cannot be reloaded anymore. It feels like an endless loop or something.\\r\\n\\r\\nhttps://codesandbox.io/s/youthful-brown-0b6ez\\r\\n\\r\\nI wonder if there is a new recommended way how to force DOM flush for correct printing experience.","number":17155,"user":{"login":"FredyC"},"state":"closed","created_at":"2019-10-21T08:54:52Z"},{"id":509752671,"title":"React Cryptography (Encryption, Key Exchange, Signatures, etc.)","body":"Hello Facebook and React developers the whole world over:\\r\\n\\r\\nMy name is Scott. I\'ve previously been involved in the modernization of PHP\'s cryptography features ([removing mcrypt](https://wiki.php.net/rfc/mcrypt-viking-funeral), [adding libsodium](https://wiki.php.net/rfc/libsodium)), which in turn led to HHVM implementing their own sodium extension.\\r\\n\\r\\nConsequently, if you\'re using PHP 7.2 (or newer), or HHVM 3.20 (or newer), support for libsodium is [baked into the programming language](https://libsodium.gitbook.io/doc/bindings_for_other_languages) and you don\'t have to install anything extra. \\r\\n\\r\\n(Unless your operating system\'s packaging team is asleep at the wheel with PHP security. Let me know if you encounter that so I can hopefully help address these deficiencies in the ecosystem.)\\r\\n\\r\\nAs part of my security work, I\'ve been exposed to an increasing number of React apps in recent months. I like the philosophy of React (especially **learn once, write everywhere**).\\r\\n\\r\\nMost of the time, the sheer fact that folks are developing in React instead of writing their own framework means I don\'t get to include client-side vulnerabilities (e.g. DOM-based XSS) in my reports. However, I *have* found a substantial number of cryptography-related issues in people\'s React apps. \\r\\n\\r\\nTo be clear: **That isn\'t React\'s fault at all.** It\'s a symptom of [the greater JavaScript ecosystem](https://twitter.com/CiPHPerCoder/status/1183282359862530049) and a general lack of easy-to-use, secure-by-default, and easily discovered cryptography libraries. (As the linked thread shows: AWS\'s libraries are almost certainly good, but at the time of that tweet, you wouldn\'t find them searching for \\"encryption\\" on NPM.)\\r\\n\\r\\nI would like to severely reduce the prevalence of trivial cryptography bugs in React projects. There are a couple of directions we can go with that goal in mind. I\'m going to propose one below, but by no means is my idea the *only* solution. \\r\\n\\r\\n(If so desired, I can separate this into two separate Github issues: One for the problem, the other for my proposed solution. Please let me know if that\'s easier to digest.)\\r\\n\\r\\n## Proposal \\r\\n\\r\\n### Background and Prior Development\\r\\n\\r\\n[The state of JavaScript cryptography is pretty terrible](https://dev.to/paragonie/sodium-plus-a-positive-cryptography-experience-for-javascript-developers-2p08). Writing performant code with libsodium requires manually sizing your own buffers, etc. Writing cross-platform code requires writing code a completely different way. \\r\\n\\r\\nNot using libsodium is [perilous in other ways](https://github.com/danang-id/simple-crypto-js/issues/12), and has motivated other security companies to recommend developers [just \\"use the NaCl/libsodium default\\"](https://latacora.micro.blog/2018/04/03/cryptographic-right-answers.html) in most places where cryptography touches application code.\\r\\n\\r\\nIn the spirit of [scrypt-for-humans](https://github.com/joepie91/scrypt-for-humans), I developed a cross-platform, permissively licensed, asynchronous JavaScript module called [**Sodium-Plus**](https://github.com/paragonie/sodium-plus).\\r\\n\\r\\nIn the same spirit as React, we want users to be able to learn Sodium-Plus once, and write code anywhere. It runs in Node.js and in a web browser, with a near-identical API and user experience. (The delta in the UX is the unavoidable difference between loading a module with `require` and including a script tag in the HTML.)\\r\\n\\r\\n> You can [read the documentation online](https://github.com/paragonie/sodium-plus/tree/master/docs).\\r\\n\\r\\nBy default, Sodium-Plus uses [libsodium.js](https://github.com/jedisct1/libsodium.js), which is the result of libsodium compiled into WebAssembly, which runs in the browser. However, if you install sodium-native alongside sodium-plus, it will *opportunistically* use sodium-native instead with no code changes.\\r\\n\\r\\n(Sodium-native is much faster than libsodium.js, but isn\'t browser-compatible.)\\r\\n\\r\\n### The Meat and Potatoes of the Proposal\\r\\n\\r\\nGiven the challenges of the JavaScript ecosystem, and the availability of usable cryptography, I\'d like to recommend the inclusion of `sodium-plus` in a future release of React.\\r\\n\\r\\n* Users will have an identical user experience in a browser that they get in any Node.js environment (server, mobile, desktop, shell script, etc.).\\r\\n* A comparable API is already provided for HHVM users by Facebook.\\r\\n* PHP, which powers [roughly 4 out of 5 websites according to W3Techs](https://w3techs.com/technologies/overview/programming_language/all), has already adopted a comparable API.\\r\\n\\r\\nReact doesn\'t currently provide a cryptography interface. If React ever does provide one, libsodium is almost certainly the best one to provide (prior to the maturity of post-quantum cryptography, of course). \\r\\n\\r\\nReact doesn\'t necessarily *have to* provide a cryptography interface, but React apps would be a lot safer if most developers had a stable, easy to use, misuse-resistant, cross-platform suite of cryptography tools at their disposal.\\r\\n\\r\\nOut of all the existing options for libsodium, ours is the only one that provides an async/await-ready API, works everywhere, and has the same API and developer experience where ever you encounter it (in the same spirit as React).\\r\\n\\r\\nI believe the arguments above make a strong case for sodium-plus as the best choice for the React community. If anyone has criticism to offer Sodium-Plus or my proposal in this Github issue, I welcome it. (If your criticism would be deemed off-topic for this discussion, `scott at paragonie dot com` goes directly to me.)","number":17154,"user":{"login":"paragonie-scott"},"state":"closed","created_at":"2019-10-21T06:15:04Z"},{"id":509657172,"title":"Infinite loop of errors when host config is missing `getRootHostContext`","body":"**Do you want to request a *feature* or report a *bug*?** bug\\r\\n\\r\\n**What is the current behavior?** If you start writing a shitty reconciler:\\r\\n\\r\\n```\\r\\nimport React from \'react\';\\r\\nimport ReactReconciler from \'react-reconciler\';\\r\\nlet reconciler = ReactReconciler({\\r\\n  /* empty host config */\\r\\n});\\r\\nlet container = reconciler.createContainer(null, false, false);\\r\\nreconciler.updateContainer(<div />, container, null, null);\\r\\n```\\r\\n\\r\\nthen you get this error in an infinite loop:\\r\\n\\r\\n```\\r\\nUncaught TypeError: getRootHostContext is not a function\\r\\n    at pushHostContainer (react-reconciler.development.js:5526)\\r\\n    at pushHostRootContext (react-reconciler.development.js:8152)\\r\\n    at beginWork$1 (react-reconciler.development.js:9599)\\r\\n    at HTMLUnknownElement.callCallback (react-reconciler.development.js:11399)\\r\\n    at Object.invokeGuardedCallbackDev (react-reconciler.development.js:11448)\\r\\n    at invokeGuardedCallback (react-reconciler.development.js:11499)\\r\\n    at beginWork$$1 (react-reconciler.development.js:15639)\\r\\n    at performUnitOfWork (react-reconciler.development.js:14544)\\r\\n    at workLoopSync (react-reconciler.development.js:14520)\\r\\n    at performSyncWorkOnRoot (react-reconciler.development.js:14072)\\r\\n    at react-reconciler.development.js:1966\\r\\n    at unstable_runWithPriority (scheduler.development.js:818)\\r\\n    at runWithPriority (react-reconciler.development.js:1912)\\r\\n    at flushSyncCallbackQueueImpl (react-reconciler.development.js:1961)\\r\\n    at flushSyncCallbackQueue (react-reconciler.development.js:1949)\\r\\n    at scheduleUpdateOnFiber (react-reconciler.development.js:13490)\\r\\n    at scheduleRootUpdate (react-reconciler.development.js:16860)\\r\\n    at updateContainerAtExpirationTime (react-reconciler.development.js:16886)\\r\\n    at Object.updateContainer (react-reconciler.development.js:16986)\\r\\n ```\\r\\n\\r\\nPresumably this also happens if getRootHostContext is buggy and itself throws.\\r\\n\\r\\n**What is the expected behavior?** I\'d expect it to crash once or twice and then stop. (This seems specific to `getRootHostContext`; no other missing method had the same result.) My recollection is we do intend to catch errors in host configs; if I\'m misremembering feel free to wontfix.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react-reconciler 0.22.2 (from the 16.10.2 release)\\r\\n","number":17153,"user":{"login":"sophiebits"},"state":"open","created_at":"2019-10-20T21:43:45Z"},{"id":509616510,"title":"Hooks break when a build directory also includes React","body":"I\'m using Next.js `9.1.1` and React `16.10.2`. The Next app (in `src/app`) gets built into a `dist/` directory at the root of the project with the `package.json` file moved over and installed within it. This is necessary because the app, when deployed, runs inside of a Firebase function.\\r\\n\\r\\nThe issue is that if I have a built version laying around, React errors out about invalid use of hooks. If I empty `dist/` everything works well. So this *seems* to be because there\'s multiple Reacts. But the app doesn\'t look in `dist/` or anything, so not sure why it\'d load React from there too. But, if it\'s not that, then idk what it is. I\'m pretty sure the code itself isn\'t using hooks wrong, it\'s pretty small and straight-forward component:\\r\\n\\r\\n```typescript\\r\\nconst CurrentUser: React.FC = () => {\\r\\n  const [user, initialising, error] = useAuthState(firebase.auth());\\r\\n\\r\\n  const signIn = async () => {\\r\\n    await firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());\\r\\n  };\\r\\n\\r\\n  const signOut = async () => {\\r\\n    await firebase.auth().signOut();\\r\\n  };\\r\\n\\r\\n  // start rendering things\\r\\n};\\r\\n```","number":17152,"user":{"login":"dannytatom"},"state":"closed","created_at":"2019-10-20T16:17:01Z"},{"id":509614257,"title":"Bailing out doesn\'t work properly in lazy components with default props","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nBailing out doesn\'t work properly in lazy components with default props. It seems we\'re incorrectly [comparing unresolved props (oldProps) with resolved props (newProps)](https://github.com/facebook/react/blob/62b04cfa753076d5ffb1d74b855f8f8db36f5186/packages/react-reconciler/src/ReactFiberClassComponent.js#L1100).\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/s/stoic-curran-3otbb\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIn the example above, `componentDidUpdate` shouldn\'t have been called when the button is clicked.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17151,"user":{"login":"jddxf"},"state":"closed","created_at":"2019-10-20T15:58:13Z"},{"id":509524933,"title":"Lazy and Suspense","body":"when I try to use Lazy and Suspense, I got this error\\r\\n\\r\\n```\\r\\nimport React, { Component, Suspense, lazy } from \'react\';\\r\\n\\r\\nconst AA = lazy(() => import(\\"./A\\"));\\r\\nconst BB = lazy(() => import(\\"./B\\"));\\r\\n\\r\\nconst App = () => (\\r\\n  <div>\\r\\n    <Suspense fallback={<div>Loading...</div>}>\\r\\n      <AA />\\r\\n      <BB />\\r\\n    </Suspense>\\r\\n  </div>\\r\\n);\\r\\nexport default App;\\r\\n\\r\\n```\\r\\n```\\r\\nError in ./src/App.js\\r\\nSyntax error: Unexpected token (3:22)\\r\\n\\r\\n  1 | import React, { Component, Suspense, lazy } from \'react\';\\r\\n  2 | \\r\\n> 3 | const AA = lazy(() => import(\\"./A\\"));\\r\\n    |                       ^\\r\\n```\\r\\n","number":17150,"user":{"login":"engmagdy87"},"state":"closed","created_at":"2019-10-20T00:07:32Z"},{"id":509509929,"title":"Experimental test helper: `it.experimental`","body":"Special version of Jest\'s `it` for experimental tests. Tests marked as experimental will run **both** stable and experimental modes. In experimental mode, they work the same as the normal Jest methods. In stable mode, they are **expected to fail**. This means we can detect when a test previously marked as experimental can be un-marked when the feature becomes stable. It also reduces the chances that we accidentally add experimental APIs to the stable builds before we intend.\\r\\n\\r\\nI added corresponding methods for the focus and skip APIs:\\r\\n\\r\\n- `fit` -> `fit.experimental`\\r\\n- `it.only` -> `it.only.experimental` or `it.experimental.only`\\r\\n- `xit` -> `xit.experimental`\\r\\n- `it.skip` -> `it.skip.experimental` or `it.experimental.skip`\\r\\n\\r\\nSince `it` is an alias of `test`, `test.experimental` works, too.\\r\\n\\r\\nHere\'s what it will look like when a test marked as experimental passes in stable:\\r\\n\\r\\n<img width=\\"757\\" alt=\\"Screen Shot 2019-10-19 at 2 05 25 PM\\" src=\\"https://user-images.githubusercontent.com/3624098/67151337-ab468180-f279-11e9-9d11-c257a3357a22.png\\">\\r\\n\\r\\nI only marked a single test as experimental in this PR, to show that it works. I will convert the others in follow ups.","number":17149,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-19T21:07:44Z"},{"id":509461874,"title":"[RFC] React DevTools - configurable style prop for live editing","body":"Right now the React DevTools expose an undocumented hook for React Native that allows to register a function that is used to enable styles editing in the dev tools:\\r\\n\\r\\n<img width=\\"1066\\" alt=\\"Screen Shot 2019-10-19 at 4 30 16 PM\\" src=\\"https://user-images.githubusercontent.com/711311/67146710-fb2f4380-f28d-11e9-9ce4-c037acc708c3.png\\">\\r\\n\\r\\nFor example React Native for Web uses it\\r\\n\\r\\nhttps://github.com/necolas/react-native-web/blob/36dacb2052efdab2a28655773dc76934157d9134/packages/react-native-web/src/exports/StyleSheet/index.js#L13-L16\\r\\n\\r\\nIt would be great if the prop name was configurable (right now it can only be `style`) so that other CSS in JS libraries could use this hook and if the editor would allow 1) arrays of style objects 2) nested objects for things like pseudo elements:\\r\\n\\r\\n```js\\r\\nstyle {\\r\\n  flex: 1;\\r\\n  \'&:hover\': {\\r\\n     color: \'red\'\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nI think that the above is already possible but it has to be provided as JSON. Couldn\'t it be `eval`d when JSON parse fails?\\r\\n\\r\\nWhen this hook is registered probably the dev tools should hide the same prop from the `props` pane.","number":17148,"user":{"login":"giuseppeg"},"state":"open","created_at":"2019-10-19T14:38:33Z"},{"id":509439275,"title":"react-reconciler & portals: missing root instance","body":"This is a problem i am facing with the [react-three-fiber](https://github.com/drcmda/react-three-fiber), a react renderer for threejs.  The following image is probably a good overview:\\r\\n\\r\\n![reconciler](https://user-images.githubusercontent.com/2223602/67144414-59502c80-f276-11e9-89d1-97496ee10b8c.jpg)\\r\\n\\r\\nBasically i have a reconciler, it has a root instance, a scene in my case into which everything\'s rendered. I keep special information in that scene, which i need when constructing new objects.\\r\\n\\r\\nNow, when i use createPortal, like so:\\r\\n\\r\\n```jsx\\r\\nfunction A() {\\r\\n  // Create virtual scene\\r\\n  const virtualScene = useMemo(() => new THREE.Scene(), [])\\r\\n\\r\\n  // Render elements into the virtual scene via createPortal\\r\\n  return createPortal(\\r\\n    <mesh onClick={() => console.log(\\"clicked\\")}>\\r\\n      <meshNormalMaterial attach=\\"material\\" />\\r\\n      <boxBufferGeometry attach=\\"geometry\\" args={[10, 10, 10]} />\\r\\n    </mesh>\\r\\n    virtualScene,\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nthen the createInstance inside the reconciler will receive the following:\\r\\n\\r\\n```jsx\\r\\ncreateInstance(\\r\\n  type = \\"meshNormalMaterial\\",\\r\\n  props = { attach: \\"material\\" },\\r\\n  container = virtualScene,\\r\\n  hostContext = {},\\r\\n  internalInstanceHandle = { ... }\\r\\n)\\r\\n```\\r\\n\\r\\nThe problem that i face is that i also need to know the root instance into which the portal is rendered, but there seem to be no obvious means to get it. Digging around i noticed that the  internalInstanceHandle fibernode contains it when i traverse it:\\r\\n\\r\\n```jsx\\r\\nconst fn = (node: Reconciler.Fiber): THREE.Object3D => {\\r\\n  if (!node.return) return node.stateNode.containerInfo\\r\\n  else return fn(node.return)\\r\\n}\\r\\nlet scene = fn(internalInstanceHandle) // ---\x3e the root scene\\r\\n```\\r\\n\\r\\nBut that seems pretty sketchy. Is there any other way, or could it be exposed?","number":17147,"user":{"login":"drcmda"},"state":"closed","created_at":"2019-10-19T11:49:19Z"},{"id":509360803,"title":"Remove unstable_ prefix in various internal uses","body":"What else was renamed?","number":17146,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-19T00:11:48Z"},{"id":509356116,"title":"SuspenseList support in DevTools","body":"This adds SuspenseList tags to DevTools so that the name properly shows up.\\r\\n\\r\\nIt also switches to use the tag instead of Symbol type for Suspense components. We shouldn\'t rely on the type for any built-ins since that  field will disappear from the fibers. How the Fibers get created is an implementation detail that can change e.g. with a compiler or if we  use instanceof checks that are faster than symbol comparisons.","number":17145,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-18T23:46:01Z"},{"id":509351047,"title":"Build script should default to experimental","body":"`yarn build` defaults to building in experimental mode. To opt-out, set the `RELEASE_CHANNEL` environment variable to `stable`. This is the same as what we do when running tests via `yarn test`, to make local development easier.","number":17144,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-18T23:21:41Z"},{"id":509339486,"title":"Fast Refresh does full reload if function component is not capitalized","body":"Currently, if your functional component\'s name starts with a lowercase letter, fast refresh will execute a *full reload* instead of just reloading that module.\\r\\n\\r\\nThis can be very confusing in applications using higher-order components where a functional component is pieced together in a HOC.\\r\\nie.\\r\\n```\\r\\nfunction myHOC(args) {\\r\\n  var myComponent = (props) => {\\r\\n    ...\\r\\n  };\\r\\n  myComponent.someStaticStuff = () => {\\r\\n  };\\r\\n  return myComponent\\r\\n}\\r\\n...\\r\\nexport const SubScreen = myHoc(args);\\r\\n```\\r\\n\\r\\nExpected behavior would be one of:\\r\\n- A warning is emitted by `react-refresh` saying it is using the \\"heuristic\\" of looking at the first letter of a component to decide whether or not to reload the whole app\\r\\n- Documentation makes this behavior explicit\\r\\n\\r\\nCurrently observed this bug in RN 0.61\\r\\n\\r\\nI believe this is the offending line: https://github.com/facebook/react/blob/7082d5a2db5c1e5f49a62aecd90b6858f957da5e/packages/react-refresh/src/ReactFreshRuntime.js#L581\\r\\n\\r\\nsearch terms: uppercase capitalize lowercase function component refresh reload","number":17142,"user":{"login":"hudon"},"state":"closed","created_at":"2019-10-18T22:34:16Z"},{"id":509332681,"title":"Lint experimental build artifacts","body":"Adds `lint_build` job to the experimental workflow","number":17141,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-18T22:11:17Z"},{"id":509307804,"title":"SuspenseList in DevTools could cycle through the Suspense states","body":"We currently have a way to force a fallback on a Suspense boundary in DevTools.\\r\\n\\r\\nIt might be cool to have a \\"play\\" button or something on SuspenseList that cycles through the states.\\r\\n\\r\\nE.g. if it\'s \\"together\\" mode it shows all the fallbacks and then switches to showing all the content and then back again in a loop.\\r\\n\\r\\nIf it\'s \\"forwards\\" it shows all the fallbacks then one at a time and then back to all fallbacks. If it\'s tail \\"hidden\\" or \\"collapsed\\" it hides all the ones that are not yet inserted and then inserts one at a time.\\r\\n\\r\\nCould be a nice way to demo/test the loading sequence experience.","number":17140,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2019-10-18T20:59:21Z"},{"id":509279945,"title":"Don\'t build non-experimental www bundles","body":"Reduces the likelihood we\'ll accidentally sync the wrong ones.","number":17139,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-18T19:53:13Z"},{"id":509200275,"title":"Update RN typings for a shim","body":"Needed to unblock RN sync.","number":17138,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-10-18T16:56:52Z"},{"id":509165804,"title":".","body":".","number":17137,"user":{"login":"Louismousine"},"state":"closed","created_at":"2019-10-18T15:53:04Z"},{"id":509029216,"title":"[react-interactions] Make events non-passive to allow preventDefault","body":"This is a follow up to https://github.com/facebook/react/pull/17113, where I forgot to change the events to be non-passive. Doh. This is a temporary stop-gap still, as we don\'t plan on keeping this Legacy Press responder around for too much longer.","number":17136,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-18T11:45:44Z"},{"id":508972640,"title":"react-reconciler w/ portals looses the container","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n```jsx\\r\\nfunction A() {\\r\\n\\r\\n  // 1. Create virtual scene\\r\\n  const scene = useMemo(() => new THREE.Scene(), [])\\r\\n\\r\\n  // 2. Render the virtual scene on top of the default scene\\r\\n  useFrame(({ gl, camera }) => {\\r\\n    gl.autoClear = false\\r\\n    gl.clearDepth()\\r\\n    gl.render(scene, camera)\\r\\n  }, 2)\\r\\n\\r\\n  // 3. Create a portal into the virtual scene\\r\\n  return createPortal(\\r\\n    <mesh>\\r\\n      <meshBasicMaterial attach=\\"material\\" color=\\"hotpink\\" />\\r\\n      <octahedronGeometry attach=\\"geometry\\" />\\r\\n    </mesh>,\\r\\n    scene,\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nThis component is rendered out by the reconciler. First time anything comes up is in the createInstance function:\\r\\n\\r\\n```jsx\\r\\ncreateInstance(\\r\\n  type = \\"meshBasicMaterial\\",\\r\\n  props = { attach: \\"material\\", color: \\"hotpink\\" }, \\r\\n  container = undefined // ???\\r\\n)\\r\\n```\\r\\n\\r\\nFor some reason \\"container\\" is undefined. That means i loose connection, there\'s valuable information in it that i need. Given that createPortal creates a regular react component in the root containers context, i don\'t understand why it\'s undefined here.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect the container to point to the root instance, or to the portal instance - anything would work, but undefined creates a contextual gap.","number":17135,"user":{"login":"drcmda"},"state":"closed","created_at":"2019-10-18T09:46:30Z"},{"id":508938869,"title":"React Devtools should produce a better error message when integers are present as keys on react elements","body":"Current behavior: React Devtools throws \\"RangError: Invalid Array Length\\" when integers are used as keys on react elements. \\r\\n\\r\\nExample: \\r\\n\\r\\nhttps://codesandbox.io/s/interesting-violet-v5c5j\\r\\n\\r\\nhttps://v5c5j.csb.app/\\r\\n\\r\\nUsing anything but strings as keys is as far as I understand not even correct usage, but it would be great if react devtools checked a little bit earlier and had a nicer error than \\"RangeError: Invalid Array Length.\\" It takes a long time to figure out from this message that one somehow managed to use integers as keys and needs to correct it.\\r\\n\\r\\nI\'ve only tested with Chrome and the latest version of react devtools as a chrome extension. ","number":17134,"user":{"login":"alexkolson"},"state":"closed","created_at":"2019-10-18T08:42:25Z"},{"id":508841717,"title":"Error: \\"Could not find node with id \\"291\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)\\r\\n    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n\\r\\nComponent stack: in gl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17133,"user":{"login":"lth707"},"state":"closed","created_at":"2019-10-18T04:04:55Z"},{"id":508838171,"title":"test","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17132,"user":{"login":"zhuchag"},"state":"closed","created_at":"2019-10-18T03:50:45Z"},{"id":508698786,"title":"[SuspenseList] Store lastEffect before rendering","body":"Fixes #17128\\r\\n\\r\\nWe can\'t reset the effect list to null because we don\'t rereconcile the children so we drop deletion effects if we do that.\\r\\n\\r\\nInstead we store the last effect as it was before we started rendering so we can go back to where it was when we reset it.\\r\\n\\r\\nWe actually already do something like this when we delete the last row for the tail=\\"hidden\\" mode so we had a field available for it already.","number":17131,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-17T20:17:46Z"},{"id":508676569,"title":"Move SuspenseList to experimental package","body":"Also moves `unstable_withSuspenseConfig` but keeps the prefix since that may or may not become a public API.","number":17130,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-17T19:30:06Z"},{"id":508546244,"title":"use RegExp values in state, but the result is unexpected.","body":"a question\\r\\n**What is the current behavior?**\\r\\n\\r\\nhere is the code.\\r\\nhttps://codesandbox.io/s/display-regexp-values-in-propsstate-3wy9o\\r\\n\\r\\n ```\\r\\nimport React, { useState, useEffect } from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\nconst useInput = () => {\\r\\n  const [value, setValue] = useState(\\"\\");\\r\\n  const changeEvent = e => {\\r\\n    setValue(e.target.value);\\r\\n  };\\r\\n  const inputCom = <input onChange={changeEvent} value={value} />;\\r\\n  return [value, inputCom];\\r\\n};\\r\\n\\r\\nconst MyComp = () => {\\r\\n  const [isTrue, setIsTrue] = useState(/a/gi);\\r\\n  const [value, getInput] = useInput();\\r\\n  const result = isTrue.test(value);\\r\\n\\r\\n  return (\\r\\n   <div>\\r\\n      <div>Q:Does input value include \'abc\'?</div>\\r\\n      <div>A:{result ? \\"true\\" : \\"false\\"}</div>\\r\\n      {getInput}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<MyComp />, rootElement);\\r\\n```\\r\\n\\r\\n I found if the input value include 1 `a`, 1 true and 1 false will alternating display.\\r\\n I found if the input value include 2 `a`, 2 true and 1 false will alternating display.\\r\\n I found if the input value include 3 `a`, 3 true and 1 false will alternating display.\\r\\n......\\r\\n\\r\\nI\'m so confused, I don\'t why?\\r\\n","number":17129,"user":{"login":"wendy81"},"state":"closed","created_at":"2019-10-17T15:13:46Z"},{"id":508494173,"title":"Add a failing test for SuspenseList bug","body":"I don\'t know if it\'s a bug but it seems like it is?\\r\\n\\r\\nIf we render `AB` on mount and `CD` on update, I\'d expect to see `CD`. But I see `ABCD`.","number":17128,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-10-17T13:56:16Z"},{"id":508431166,"title":"Can\'t sure which action triggered function getDerivedStateFromProps","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n[feature]\\r\\n**What is the current behavior?**\\r\\nCan\'t sure which action triggered function getDerivedStateFromProps\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nnull\\r\\n**What is the expected behavior?**\\r\\nmaybe should add a param in getDerivedStateFromProps, to mark which action triggered , constructor, new props, setState, or forceUpdate ?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nthe lastest vesion","number":17127,"user":{"login":"awefeng"},"state":"closed","created_at":"2019-10-17T12:08:46Z"},{"id":508351170,"title":"React this.context returns empty object {}","body":"it is 2 days now I\'m trying to solve this nonsense riddle. I\'ve read all documentations and answers related to this but no specific answer for my case. I run my code both on React Native 0.61 (React version 16.9.0) and Snack playground.\\r\\n\\r\\n**Problem is: console.log(this.context) always returns empty object like this - {}**\\r\\n**I must return provider value when passed console.log(this.context)** \\r\\n\\r\\nThe code is:\\r\\n`import React from \'react\';\\r\\nimport { Text } from \'react-native\';\\r\\n\\r\\nconst AppContext = React.createContext({})\\r\\n\\r\\nclass App extends React.Component {\\r\\n  state = {\\r\\n    products: [\\r\\n      { id: \'p1\', title: \'Gaming Mouse\', price: 29.99 },\\r\\n      { id: \'p2\', title: \'Harry Potter 3\', price: 9.99 },\\r\\n    ],\\r\\n    cart: []\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <AppContext.Provider\\r\\n        value={{\\r\\n          products: this.state.products\\r\\n        }}\\r\\n      >\\r\\n      </AppContext.Provider>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\nexport default class testScreen extends React.Component {\\r\\n  static contextType = AppContext\\r\\n\\r\\n  render() {\\r\\n    console.log(this.context)\\r\\n\\r\\n    return (\\r\\n      <>\\r\\n        <Text>{\'Sometext\'}</Text>\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n`\\r\\n\\r\\nI need help urgently, because it ties my hands to go further. Thank you in advance.","number":17126,"user":{"login":"ahuseyn"},"state":"closed","created_at":"2019-10-17T09:29:27Z"},{"id":508284316,"title":"react-devtools agent got no connection","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nYes, I want to report a *bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\nI cann\'t see anything in `react-devtools` when debuging `react-native` app in iPhone simulator but received some warnings as follow: \\r\\n![image](https://user-images.githubusercontent.com/20217146/66986061-adc99f80-f0f0-11e9-8ecf-171916816dde.png)\\r\\n![image](https://user-images.githubusercontent.com/20217146/66986122-cd60c800-f0f0-11e9-860f-50a7876f323f.png)\\r\\n\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact: 16.0.0-alpha.12\\r\\nreact-native-cli: 2.0.1\\r\\nreact-native: 0.47.1\\r\\nreact-devtools: 4.2.0\\r\\nxcode: 10.3\\r\\nmacos: 10.15","number":17125,"user":{"login":"bowencool"},"state":"closed","created_at":"2019-10-17T07:18:20Z"},{"id":508120452,"title":"Error: \\"Could not find commit data for root \\"226\\" and commit 6\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Record a 5 second profile in the React Profiler Tab\\r\\n2. Switch the React root in the dropdown\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\\r\\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\\r\\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\\r\\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\\r\\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\\r\\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\\r\\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\\r\\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\\r\\n\\r\\nComponent stack: in sc\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17123,"user":{"login":"SMores"},"state":"closed","created_at":"2019-10-16T21:55:57Z"},{"id":508112296,"title":"fix #17121","body":"Browser can\'t run shell. Only JavaScript.","number":17122,"user":{"login":"BogdanDor"},"state":"closed","created_at":"2019-10-16T21:36:02Z"},{"id":508106437,"title":"debug-test don\'t work in Windows","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThrow exception, don\'t run tests.\\r\\nSyntaxError: missing ) after argument list\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n1. Run one of the commands:\\r\\n- yarn debug-test\\r\\n- yarn debug-test-persistent\\r\\n- yarn debug-test-build-devtools\\r\\n\\r\\n2. Open chrome://inspect and press \u201cInspect\u201d.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nPossibility debug tests.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.2.0 and higher.\\r\\nChrome 77.0.3865.120\\r\\nWindows 10.\\r\\nOlder version React hasn\'t this feature.","number":17121,"user":{"login":"BogdanDor"},"state":"closed","created_at":"2019-10-16T21:21:48Z"},{"id":508098041,"title":"DevTools option \\"Site access\\" giving \\"Not a valid web address\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIn Chrome, in React Developer Tools extension, Details (settings), option \\"Site access: Allow this extension to read and change all your data on websites you visit:\\", selecting \\"On specific sites\\", and typing in \\"http://localhost/\\", it gives error \\"Not a valid web address\\" and will not add the site.  Similarly, for site names/urls that might otherwise resolve (eg through /etc/hosts) like \\"http://tolkien/\\" where \\"tolkien\\" is defined in /etc/hosts, it had the same behavior (would not add the site).\\r\\n\\r\\nAs a workaround for in particular the /etc/hosts entry, after adding an hostalias that has a \\".\\" in the name (eg \\"tolkien.foo\\"), DevTools then accepted the url \\"http://tolkien.foo/\\".\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nAs above, in Chrome, in React Developer Tools extension, Details (settings), option \\"Site access: Allow this extension to read and change all your data on websites you visit:\\", select \\"On specific sites\\", and type in \\"http://localhost/\\" or some other url without a period in it eg \\"http://tolkien/\\".\\r\\n\\r\\n**What is the expected behavior?**\\r\\nExpected that it would add the site.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThis is with:\\r\\nChrome 77.0.3865.120 (Official Build) (64-bit)\\r\\nOSX 10.11.6\\r\\nDevTools extension 4.2.0 (10/3/2019)\\r\\nI haven\'t tried doing this with prior versions of Chrome/DevTools/OSX.","number":17120,"user":{"login":"willxy"},"state":"closed","created_at":"2019-10-16T21:03:10Z"},{"id":508075274,"title":"docs: Fixed a typo in readme.md","body":"Simple typo fix","number":17119,"user":{"login":"WilcoFiers"},"state":"closed","created_at":"2019-10-16T20:16:16Z"},{"id":508064896,"title":"feat: modified README.md","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17118,"user":{"login":"cbrghton"},"state":"closed","created_at":"2019-10-16T19:55:29Z"},{"id":508054289,"title":"Change ref mechanism to ids\' ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nA feature request\\r\\n\\r\\n**What is the current behavior?**\\r\\nRight now when we write a component and we need a reference to it - we need to use the ref feature. Thats a cool thing but the syntax is a bit cumbersome as the developer needs to write code to declare it and also the JSX part. \\r\\n\\r\\n**What is the expected behavior?**\\r\\nAs a suggestions - developers already know and understand the usage of \'id\' as a unique attribute of an element. What if the syntax would be something like `<div id=\\"foo\\" ...>` or  `<div idName=\\"foo\\" ...>` (copying the syntax of className). \\r\\nIf React behind the scene would generate a reference with that name, or with adding dynamic-string to it - that would make the code a bit shorter, and more readable and natural\\r\\nIf this is implemented inside an iterator, we can do something like `<div id=\\"{\'${index\'}_foo}\\" ...>` and if the developer doesn\'t apply something dynamically in it - have the compiler throw an error or something.  \\r\\n\\r\\n","number":17117,"user":{"login":"eitanavgil"},"state":"closed","created_at":"2019-10-16T19:32:41Z"},{"id":507873077,"title":"Lazy load react sub-components created as static variables","body":"\\r\\nI am using sub components in by react application using static variables something like this:\\r\\n\\r\\n```\\r\\ntext.jsx\\r\\nexport default function Text() {\\r\\n  return (<div />)      //dummy code\\r\\n}\\r\\n\\r\\nText.h1 = createComponent(\'h1\', \'h1\')\\r\\nText.h2 = createComponent(\'h2\', \'h2\')\\r\\nText.h3 = createComponent(\'h3\', \'h3\')\\r\\n```\\r\\nIn above code, createComponent function will return a react function component and I can use it in any application like this:\\r\\n\\r\\n```\\r\\napp.jsx\\r\\nimport Text from \'./text\'\\r\\n\\r\\nexport default function App() {\\r\\n  return (\\r\\n     <Text.h1>Hello World</Text.h1>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nNow I have to lazy load the Text component but I am not finding any way how to use those sub-components after that. \\r\\nCan anyone help on this?\\r\\n\\r\\nReact version: 16.9.0\\r\\n","number":17116,"user":{"login":"sunil-jhamnani"},"state":"closed","created_at":"2019-10-16T14:02:00Z"},{"id":507840151,"title":"[react-interactions] Add onFocusWithin event to FocusWithin responder","body":"This adds the `onFocusWithin` event callback to the `FocusWithin` event responder. We already have `onBlurWithin` which is required for our rich internal focus management and accessibility component experiments and now we also need `onFocusWithin` so we can properly handle cases where we need to remember the last focused node in the cases where we have to restore focus.","number":17115,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-16T13:06:43Z"},{"id":507830238,"title":"dangerouslySetInnerHTML causes page to scroll to top","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n* It\'s a bug\\r\\n* The problem is only when we get the content from the dangerouslySetInnerHTML property.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n* When you have anchor tags that should scroll down the page to the related id, instead of scroll down it scrolls up to (0,0) coordinates.\\r\\n* This is our site, take a look for yourself: https://www.emerchantpay.com/insights/online-payments-germany/\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n* It should behave as normal anchor tag and scroll to its relevant id.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n * It all works fine only for Google Chrome Browser Desktop version and Chrome for Androind. It won\'t work for Mozila, Safari, etc. for mobile and desktop. Also does not work for any browser on IOS.","number":17114,"user":{"login":"vnankov"},"state":"open","created_at":"2019-10-16T12:48:53Z"},{"id":507770188,"title":"[react-interactions] Allow event.preventDefault on LegacyPress responder","body":"This PR brings back `event.preventDefault` behavior that and removes the previous warning for its usage. Whilst this might not be the right long term strategy, this change unblocks internal cases where the native events need to be prevented to handle edge-cases that are exposed because of the mixing of event systems and quirks with the systems in place. Furthermore, this is intentionally only for the LegacyPress responder.","number":17113,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-16T10:46:10Z"},{"id":507712468,"title":"Resetting an animation in useEffect React is not setting all state variables to initial state","body":"**Bug**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI have a simple animation -\\r\\n\\r\\n1. Lines get highlighted one after the other on click of a button.\\r\\n\\r\\n2. Clicking on button again, while the animation is running, should de-highlight the lines to original state. \\r\\n\\r\\nI use [GSAP](https://greensock.com/gsap/) for doing animations.\\r\\n\\r\\nOn setting the timeline progress of animation to 0, all the values get reset, however, the last one modified continues to remain in same state. \\r\\n\\r\\nTo reproduce, click the button, and after a couple lines have highlighted, click the button again. \\r\\n\\r\\nCode Sandbox : https://codesandbox.io/s/inspiring-gates-poozb\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAll the variables would have been set to false on toggling the animation state. However, the last modified variable in the current animation remains in the same state.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nWorking with following dependencies: \\r\\n![Screenshot 2019-10-16 at 2 13 50 PM](https://user-images.githubusercontent.com/5795958/66903064-61faf580-f01f-11e9-9863-48200839afea.png)\\r\\n\\r\\nDoesn\'t work as expected with following dependencies: \\r\\n![Screenshot 2019-10-16 at 2 13 23 PM](https://user-images.githubusercontent.com/5795958/66903143-8c4cb300-f01f-11e9-9fd6-71ad763cb626.png)\\r\\n\\r\\nPlatform tested on : Mac OS Mojave with latest Chrome.\\r\\n\\r\\nI would like to understand what is causing this issue and steps I can take to make it work in the above mentioned version where it doesn\'t work. \\r\\n","number":17112,"user":{"login":"Amit-Tomar"},"state":"closed","created_at":"2019-10-16T08:58:26Z"},{"id":507706085,"title":"Typo fix in comment","body":"\\r\\n","number":17111,"user":{"login":"DenrizSusam"},"state":"closed","created_at":"2019-10-16T08:46:51Z"},{"id":507694598,"title":"\u600e\u4e48\u6e32\u67d3\u6570\u636e\u4e00\u6837\uff0c\u9875\u9762\u5e03\u5c40\u6709\u5f88\u5927\u5dee\u5f02\u7684\u89e3\u51b3\u65b9\u6848","body":"\u73b0\u5728\u6709\u5f88\u591a\u6a21\u677f\uff0c\u6570\u636e\u6e90\u4e00\u6837\uff0c\u4f46\u662f\u9875\u9762\u5e03\u5c40\u6709\u5f88\u5927\u5dee\u5f02\uff0creact\u53ef\u4ee5\u50cf\u4e4b\u524d\u7684tempalte\u6a21\u677f\u4e00\u6837\u6e32\u67d3\u5417","number":17110,"user":{"login":"ming200854"},"state":"closed","created_at":"2019-10-16T08:25:38Z"},{"id":507682173,"title":"Question: How to rewrite setState(state, callback) with hooks","body":"First of all, I am sorry that my English is poor.\\r\\n\\r\\n#14493\\r\\n#15772 \\r\\n\\r\\nI found some similar issues, but I think the things I want to explain will be different. When my callback doesn\'t always do something periodically based on some conditions, it seems that useEffect doesn\'t quite meet the requirements.\\r\\n\\r\\nFor example, using setState data to modify the DOM, and in rare cases, other processing of the DOM will be required in the callback. But the prerequisites for doing these things can be complex and irregular, so useEffect seems to be difficult to do.","number":17109,"user":{"login":"yoyo837"},"state":"open","created_at":"2019-10-16T07:59:49Z"},{"id":507625670,"title":"Remove prefixed concurrent APIs from www build","body":"The downstream callers have been updated, so we can remove these.\\r\\n\\r\\n~~I\'ll wait a few days before merging this, in case the www diffs get reverted for some reason.~~ I think a day is fine. The sync didn\'t include any changes other than adding the unprefixed APIs.","number":17108,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-16T05:37:06Z"},{"id":507605852,"title":"unstable_createRoot -> createRoot in test","body":"Fixes test added in #17105, which was based on an earlier commit than the one that removed the `unstable_` prefix from `createRoot`.","number":17107,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-16T04:27:21Z"},{"id":507586260,"title":"Why is useLayoutEffect using UnmountMutation instead of UnmountLayout?","body":"Souce:\\r\\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L958\\r\\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberCommitWork.js#L1291\\r\\n\\r\\nIs there a significant difference between UnmountMutation and UnmountLayout?\\r\\n\\r\\n","number":17106,"user":{"login":"rainbowcatcher"},"state":"closed","created_at":"2019-10-16T03:12:28Z"},{"id":507577665,"title":"Change retry priority to \\"Never\\" for dehydrated boundaries","body":"This changes the \\"default\\" retryTime to NoWork which schedules at Normal pri.\\r\\n\\r\\nDehydrated bouundaries normally hydrate at Never priority except when they retry where we accidentally increased them to Normal because Never was used as the default value. This changes it so NoWork is the default.\\r\\n\\r\\nDehydrated boundaries however get initialized to Never as the default.\\r\\n\\r\\nTherefore they now hydrate as Never pri unless their priority gets increased by a forced rerender or selective hydration.\\r\\n\\r\\nThis revealed that erroring at this Never priority can cause an infinite rerender. So I fixed that too.\\r\\n","number":17105,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-16T02:38:30Z"},{"id":507545358,"title":"Fixing grammatical errors in docs","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17104,"user":{"login":"jagannathBhat"},"state":"open","created_at":"2019-10-16T00:17:33Z"},{"id":507534525,"title":"Temporary patch www fork with prefixed APIs","body":"I\'m doing this here instead of in the downstream repo so that if the sync diff gets reverted, it doesn\'t revert this, too.\\r\\n\\r\\nOnce the sync has landed, and the callers are updated in www, I will remove this.","number":17103,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-15T23:36:07Z"},{"id":507527411,"title":"Enable concurrent APIs in all experimental forks","body":"Forgot to update the flags in the forked modules.","number":17102,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-15T23:11:08Z"},{"id":507523473,"title":"Modify Babel React JSX Duplicate Children Fix","body":"If a JSX element has both a `children` prop and `children` (ie. `<div children={childOne}>{childTwo}</div>`), IE throws an `Multiple definitions of a property not allowed in strict mode`. This modifies the previous fix (which used an Object.assign) by making the duplicate `children` a sequence expression on the next prop/child instead so that ordering is preserved. For example:\\r\\n\\r\\n```js\\r\\n<Component children={useA()} foo={useB()} children={useC()}>{useD()}</Component>\\r\\n```\\r\\nshould compile to\\r\\n```js\\r\\nReact.jsx(Component, {foo: (useA(), useB()), children: (useC(), useD)})\\r\\n```\\r\\n","number":17101,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-10-15T22:57:33Z"},{"id":507511883,"title":"Separate sizebot for experimental builds","body":"Configures the sizebot to leave a second comment that tracks the experimental build artifacts.","number":17100,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-15T22:20:17Z"},{"id":507495058,"title":"Warn for update on different component in render","body":"This warning already exists for class components, but not for functions.\\r\\n\\r\\nIt does not apply to render phase updates to the same component, which have special semantics that we do support.","number":17099,"user":{"login":"acdlite"},"state":"open","created_at":"2019-10-15T21:34:26Z"},{"id":507491003,"title":"input[type=\\"number\\"] fires onChange twice when clicking Chrome arrows","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWith an `input[type=\\"number\\"]`, in Chrome (confirmed only on OSX), clicking the up or down arrow inside the input increments or decrements the number twice. See example: https://codesandbox.io/s/silly-voice-syphy. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/silly-voice-syphy. \\r\\n\\r\\n```jsx\\r\\nfunction App() {\\r\\n  const [number, setNumber] = React.useState(0);\\r\\n\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <h1>Hello CodeSandbox</h1>\\r\\n      <input\\r\\n        type=\\"number\\"\\r\\n        value={number}\\r\\n        step=\\"1\\"\\r\\n        onChange={event => {\\r\\n          setNumber(event.target.value);\\r\\n        }}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should only increment it once. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nTested on React 16.10.2 and 16.8. I\'ve confirmed this happens in Chrome on OSX, but not Firefox on OSX. \\r\\n","number":17098,"user":{"login":"brendancarney"},"state":"closed","created_at":"2019-10-15T21:24:48Z"},{"id":507399276,"title":"DevTools does not eagerly patch console for RN","body":"Previously, the DevTools backend eagerly patched the console (to append [\\"component stacks\\"](https://github.com/facebook/react/blob/master/packages/react-devtools/CHANGELOG.md#component-stacks) to warnings and errors) even if no DevTools frontend was running. I did this because I thought the components stacks would be very helpful, and a lot of RN developers don\'t even run the DevTools UI to otherwise get them. (Also there would be no other way to get them for errors logged during mount.)\\r\\n\\r\\nUnfortunately this had the observable effect of changing the source code line shown for the errors/warnings in debugger tooling (where the actual call to the native `console.error` is made) from `YellowBox.js` (the RN override) to the DevTools `backend.js` script. Some people complained, so this PR removes that default behavior<sup>1</sup>.\\r\\n\\r\\nThis should not affect the browser/DOM extension. I have tested to confirm this in the browser. I tested the change in RN by building the `react-native-core` backend and patching my local version of React Native.\\r\\n\\r\\nResolves https://github.com/facebook/react-native/issues/26788\\r\\n\\r\\n<sup>1</sup> I\'m not sure I understand why the previous behavior (of showing the `YellowBox.js` override location) was preferable to showing the DevTools backend. Neither is the location of the original caller. I\'ve asked for clarification on the RN issue. If we decide to remove the DevTools override though, this is the way to do it.","number":17097,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-15T18:05:48Z"},{"id":507345737,"title":"Remove unused case","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17096,"user":{"login":"pedroprado010"},"state":"closed","created_at":"2019-10-15T16:11:18Z"},{"id":507234160,"title":"[react-interactions] Modify Scope query mechanism","body":"This PR changes the mechanism as to which scopes can query for host component descendants in their sub-tree. Specifically, after much internal feedback, the need to provide a query function to a scope when the scope was not to be used for querying felt like a quirk in the API design.\\r\\n\\r\\nThis PR makes it so `createScope` no longer needs any arguments, rather that the query scope function is provided when the querying is actually executed.\\r\\n\\r\\n```jsx\\r\\n// Before:\\r\\n\\r\\nconst DivScope = React.unstable_createScope(type => type === \'div\');\\r\\nconst nodes = divScopeRef.current.getAllNodes();\\r\\n\\r\\n// After\\r\\n\\r\\nconst DivScope = React.unstable_createScope();\\r\\nconst nodes = divScopeRef.current.queryAllNodes(type => type === \'div\');\\r\\n```\\r\\n\\r\\nThis PR also renames to `TabbableScope` module to `TabbableScopeQuery` to reflect this API change.","number":17095,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-15T13:09:35Z"},{"id":507189772,"title":"[babel-plugin-react-jsx] Avoid duplicate \\"children\\" key in props object","body":"This PR fixes a duplicate \\"children\\" key bug in the `TransformJSXToReactJSX` Babel transform. Specifically, when we have JSX that looks like this:\\r\\n\\r\\n```jsx\\r\\n<Component children={1}>2</Component>\\r\\n```\\r\\n\\r\\nBefore this PR, the output would have been:\\r\\n\\r\\n```jsx\\r\\nReact.jsx(Component, {\\\\n  children: 1,\\\\n  children: \\"2\\"\\\\n})\\r\\n```\\r\\n\\r\\nIn the above output, the `children` property is duplicated in the object literal expression. In JS strict mode, this can cause errors in certain browsers (notably IE) where an object cannot contain duplicate property keys.\\r\\n\\r\\nThis PR changed the logic, so when this pattern is encountered (explicitly with `children` only) we create a new object and put the `children` property in it and then use `Object.assign` (or whatever the native helper is) to ensure the correct object is formed as an end-result. So the above would output:\\r\\n\\r\\n```jsx\\r\\nReact.jsx(Component, Object.assign({\\r\\n  children: 1\\r\\n}, {\\r\\n  children: \\"2\\"\\r\\n}));\\r\\n```","number":17094,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-15T11:43:28Z"},{"id":507185955,"title":"Weird behavior with functional components and useState, A bug or \\"Another rule!\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n```React : \'16.9.0\'```\\r\\n\\r\\nsample code \\r\\n```javascript\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\nfunction OptionOne(){\\r\\n  return <div>Blue pill</div>\\r\\n}\\r\\n\\r\\nconst OptionTwo = React.memo(function OptionTwo(){\\r\\n  return <div>Red pill</div>\\r\\n});\\r\\n\\r\\n\\r\\nfunction App() {\\r\\n  const [ Option, setOption ] = React.useState(null);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <div>\\r\\n        <button onClick={e=>setOption(OptionOne)}>Option one</button>\\r\\n        <button onClick={e=>setOption(OptionTwo)}>Option two</button>\\r\\n      </div>\\r\\n      { Option && <Option/>}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n```\\r\\nWell the expected behavior was Option one wasn\'t suppose to throw an error;\\r\\nsetState in class components didn\'t mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug.\\r\\nSo is the useState hook working like its suppose to \\"A rule not to pass a pure functional component as a value to the setValue of the useState hook\\" or a bug? \\r\\n","number":17093,"user":{"login":"mfoncho"},"state":"closed","created_at":"2019-10-15T11:35:15Z"},{"id":507060630,"title":" missing script: build:extension:chrome","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17092,"user":{"login":"weibi6"},"state":"closed","created_at":"2019-10-15T07:30:57Z"},{"id":507056275,"title":"adds to read me","body":"Hey friend! Some of the grammatical errors have been removed from README.md","number":17091,"user":{"login":"iam2002"},"state":"closed","created_at":"2019-10-15T07:21:31Z"},{"id":507005666,"title":"Misleading (?) wording in documentation","body":"> A custom Hook is a JavaScript function whose name starts with \u201duse\u201d and that **may** call other Hooks.\\r\\n\\r\\nSource: https://reactjs.org/docs/hooks-custom.html#extracting-a-custom-hook\\r\\n\\r\\nWhat I find misleading is the verb _may_.\\r\\n\\r\\nWhat\'s the point of a custom hook that doesn\'t call any React\'s hook internally? It doesn\'t hook to React\'s internals... it also needn\'t to follow the rules of hook, and still works perfectly fine. I would say it is just a normal function whose name starts with _use_. \\r\\n\\r\\nAm I missing something?","number":17090,"user":{"login":"brunoscopelliti"},"state":"closed","created_at":"2019-10-15T04:57:40Z"},{"id":506977821,"title":"[eslint] Allow assignment of hook and componentWithHook to object property","body":"Allow assignment of function component with hook or hook function to object property.\\r\\n\\r\\n```js\\r\\n// Components\\r\\nconst Components = {}\\r\\nComponents.ComponentThatUseHook = () => { useState() };\\r\\n\\r\\n// Hooks\\r\\nconst Hooks = {}\\r\\nHooks.useHook = () => { useState(); }\\r\\n```\\r\\n\\r\\nProbably resolve #17078 \\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17089,"user":{"login":"n3tr"},"state":"closed","created_at":"2019-10-15T03:11:54Z"},{"id":506903951,"title":"Remove concurrent apis from stable","body":"Those who want to try concurrent mode should use the experimental builds instead.\\r\\n\\r\\nI also turned on the Suspense server renderer and selective hydration in the experimental build.","number":17088,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-14T22:25:41Z"},{"id":506869859,"title":"React ref\'s cause an error in async blocks","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nreport a bug (I think)\\r\\n\\r\\n**What is the current behavior?**\\r\\nI tried calling one of my references in an async code block and it would keep throwing errors until I made the block synchronous again.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://github.com/david309/blog-front\\r\\n**What is the expected behavior?**\\r\\nI expected it to work.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.9.0 doesn\'t work in the most recent version either.","number":17087,"user":{"login":"david309"},"state":"closed","created_at":"2019-10-14T20:55:47Z"},{"id":506864272,"title":"Update release scripts to support experimental releases","body":"Adds a check to the `prepare-stable` script to prevent experimental builds from being published using stable semver versions.\\r\\n\\r\\nAlso updates the function that downloads the artifacts to pull from the correct CI job. I think instead of two separate CI workflows, a better approach might be to build stable artifacts to the `build` directory and the experimental artifacts to a `build_experimental` directory, and generate both within the same workflow. This would take some work since lots of things assume the output directory is `build`, but something to consider in the future.\\r\\n\\r\\n### Test plan\\r\\n\\r\\nRun \\r\\n\\r\\n```sh\\r\\n./scripts/release/prepare-stable.js --skipTests --version=0.0.0-experimental-d364d8555\\r\\n```\\r\\n\\r\\nand confirm that it exits with an error message.","number":17086,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-14T20:42:40Z"},{"id":506845531,"title":"Can\'t get the profiler screenshot feature working in the React DevTools","body":"I\'ve recently come across [this tweet](https://twitter.com/brian_d_vaughn/status/1113200027835310080) and saw that the new DevTools profiler apparently would be able to capture images of the DOM after each commit and display them on the right side (below the commit information). \\r\\n\\r\\nWas this feature indeed added to DevTools 4.2.0? Or is it coming out in a future version?\\r\\n\\r\\nJust asking because I didn\'t manage to get it working while trying with my projects.\\r\\n\\r\\n**React**: 16.10.2\\r\\n**Browser:** Google Chrome 77.0.3865.90\\r\\n**DevTools:** 4.2.0-a8b8ffb89","number":17085,"user":{"login":"gbgdev"},"state":"closed","created_at":"2019-10-14T19:57:20Z"},{"id":506820262,"title":"Devtools scrollbars should be dark in dark mode","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen Chrome Devtools are in \\"dark mode\\", all the standard panels have a dark scrollbar:\\r\\n![](https://d.sb/2019/10/chrome_14-11.53.42.png)\\r\\n\\r\\nHowever, the React Devtools still show a light scrollbar:\\r\\n![](https://d.sb/2019/10/chrome_14-11.55.16.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nScrollbars should be styled similarly to the standard panels\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nAny React version\\r\\nChrome 77.0\\r\\nWindows 10, version 1903.\\r\\n\\r\\nNote: How to enable dark mode:\\r\\n![](https://d.sb/2019/10/chrome_14-11.58.25.png)\\r\\n![](https://d.sb/2019/10/chrome_14-11.59.29.png)","number":17084,"user":{"login":"Daniel15"},"state":"open","created_at":"2019-10-14T18:56:24Z"},{"id":506796914,"title":"Fixed a bug with illegal invocation for Trusted Types","body":"`trustedTypes.is*` functions need to be bound to the `trustedTypes` object when called. This PR fixes the bug.","number":17083,"user":{"login":"koto"},"state":"closed","created_at":"2019-10-14T18:02:30Z"},{"id":506751711,"title":"[SuspenseList] Fix bugs with dropped Promises","body":"This includes two similar looking bug fixes to SuspenseList.\\r\\n\\r\\nWe must transfer any pending promises from inner boundary to list. For non-hidden modes, this boundary should commit so this shouldn\'t be needed but the nested boundary can make a second pass which forces these to be recreated without resuspending. In this case, the outer list assumes\\r\\nthat it can collect the inner promises to still rerender if needed.\\r\\n\\r\\nOtherwise, the Promise never retries anything.\\r\\n\\r\\nWe must also propagate suspense \\"context\\" change to nested SuspenseLists. This bug looks similar to the previous one but is not based on the lack of retry but that the retry only happens on the outer boundary but the inner doesn\'t get a retry ping since it didn\'t know about its own promise after the second pass. So it bails out.\\r\\n","number":17082,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-14T16:18:32Z"},{"id":506594344,"title":"refactoring: warning revamp part 2","body":"Part 2 of https://github.com/facebook/react/issues/16753\\r\\n\\r\\nUpdating the babel plugin to handle the new syntax was a bit tricky.\\r\\n\\r\\n`invariant` was also originally not part of the scope, but because the plugin that validated arguments to `warning` also expected `invariant` to have the same interface, I had to choose between forking the plugin or also transforming `invariant`.\\r\\n\\r\\nSome of the expressions may look funny; they were generated by this codemod:\\r\\n\\r\\n<details>\\r\\n\\r\\n```js\\r\\n\'use strict\';\\r\\n\\r\\nmodule.exports = function transformer(file, api) {\\r\\n  const j = api.jscodeshift;\\r\\n\\r\\n  return j(file.source)\\r\\n    .find(j.CallExpression)\\r\\n    .filter(path => {\\r\\n      const callee = path.value.callee;\\r\\n      if (callee.type !== \'Identifier\') {\\r\\n        return false;\\r\\n      }\\r\\n      const name = callee.name;\\r\\n      const scope = path.scope.lookup(name);\\r\\n\\r\\n      return (\\r\\n        // \\"isGlobal\\" just means file scope, even in Modules\\r\\n        (scope === null || scope.isGlobal) &&\\r\\n        (name === \'warning\' ||\\r\\n          name === \'warningWithoutStack\' ||\\r\\n          name === \'lowPriorityWarning\' ||\\r\\n          name === \'lowPriorityWarningWithoutStack\' ||\\r\\n          name === \'invariant\')\\r\\n      );\\r\\n    })\\r\\n    .forEach(path => {\\r\\n      const firstArgument = path.value.arguments[0];\\r\\n      if (firstArgument.type === \'StringLiteral\') {\\r\\n        // already transformed?\\r\\n        return;\\r\\n      }\\r\\n      if (firstArgument.type === \'Literal\') {\\r\\n        if (firstArgument.value) {\\r\\n          if (path.parentPath.value.type === \'ExpressionStatement\') {\\r\\n            path.prune();\\r\\n          } else {\\r\\n            path.replace(j.identifier(\'undefined\'));\\r\\n          }\\r\\n          return;\\r\\n        }\\r\\n        path.value.arguments.shift();\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      path.value.arguments.shift();\\r\\n      if (path.parentPath.value.type === \'ExpressionStatement\') {\\r\\n        return path.parentPath.replace(\\r\\n          j.ifStatement(\\r\\n            j.unaryExpression(\'!\', firstArgument),\\r\\n            j.blockStatement([path.parentPath.node])\\r\\n          )\\r\\n        );\\r\\n      } else {\\r\\n        return path.replace(\\r\\n          j.sequenceExpression([\\r\\n            j.logicalExpression(\'||\', firstArgument, path.node),\\r\\n            j.identifier(\'undefined\'),\\r\\n          ])\\r\\n        );\\r\\n      }\\r\\n    })\\r\\n    .toSource();\\r\\n};\\r\\n```\\r\\n</details>","number":17081,"user":{"login":"Jessidhia"},"state":"closed","created_at":"2019-10-14T11:27:24Z"},{"id":506399052,"title":"Are useEffect clean-ups called in the wrong order ?","body":"**What is the current behavior?**\\r\\n\\r\\nI\'m trying to write a small `Title` component to render nested document titles. However the kinda unexpected order in which effect clean-up functions are called makes it impossible to do this : \\r\\n\\r\\n```javascript\\r\\nimport { Children, useEffect } from \'react\'\\r\\n\\r\\nexport default ({ children }) => {\\r\\n  const subtitle = Children.toArray(children).join(\'\')\\r\\n  useEffect(() => {\\r\\n    const root = document.title\\r\\n    document.title = `${subtitle} - ${root}`\\r\\n    console.log(\'Wrote\', document.title)\\r\\n    return () => {\\r\\n      document.title = root\\r\\n      console.log(\'Restored\', document.title)\\r\\n    }\\r\\n  }, [subtitle])\\r\\n  return null\\r\\n}\\r\\n```\\r\\n\\r\\nHere is a loosy sketch of my component structure (handled with `@reach/router`) : \\r\\n\\r\\n```\\r\\nApp                     // contains <Title>App</Title>\\r\\n> Dashboard             // contains <Title>Dashboard</Title>\\r\\n> Profile               // contains <Title>Profile</Title>\\r\\n> Project               // contains <Title>Project</Title>\\r\\n  > Calendar            // contains <Title>Calendar</Title>\\r\\n```\\r\\n\\r\\nEach one of these components calls my `Title` component. Everything works fine when going from profile to dashboard or from dashboard to project. But when I jump from calendar to dashboard, the document title gets messed up because the clean-up in Project is called **before** the clean-up in Calendar even though Calendar is a child of Project, which is kinda unexpected and makes tree side-effect logic using (just) `useEffect` simply impossible.\\r\\n\\r\\nThe order in which the effect functions are called is a direct reflection of the order in which the components are nested. Shouldn\'t the clean-up functions be called following the exact reverse order ? Isn\'t that one of the goals of a clean-up ?\\r\\n\\r\\nWhen I navigate to the calendar and then back to the dashboard, I get the following logs : \\r\\n\\r\\n```\\r\\nWrote App\\r\\nWrote Project - App\\r\\nWrote Calendar - Project - App\\r\\nRestored App                          // This should happen after...\\r\\nRestored Project - App                // ...this.\\r\\nWrote Dashboard - Project - App       // This is messed up.\\r\\n```\\r\\n\\r\\n[codesandbox here](https://codesandbox.io/s/vigilant-feynman-0jxwb?fontsize=14)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nHere is what I expected and what I would get if clean-ups in children were to be called before clean-ups in parents : \\r\\n\\r\\n```\\r\\nWrote App\\r\\nWrote Project - App\\r\\nWrote Calendar - Project - App\\r\\nRestored Project - App\\r\\nRestored App\\r\\nWrote Dashboard - App\\r\\n```\\r\\n\\r\\nI\'m using React 16.10.2.\\r\\n\\r\\nThis ugly workaround works by \\"forcing\\" the order of what the clean-ups do (by keeping manually track of the effect functions\' order and then just going the other way) : \\r\\n\\r\\n```javascript\\r\\nconst stack = []\\r\\n\\r\\nexport default ({ children }) => {\\r\\n  const subtitle = Children.toArray(children).join(\'\')\\r\\n  useEffect(() => {\\r\\n    stack.push(document.title)\\r\\n    document.title = `${subtitle} - ${last(stack)}`\\r\\n    return () => {\\r\\n      document.title = stack.pop()\\r\\n    }\\r\\n  }, [subtitle])\\r\\n  return null\\r\\n}\\r\\n```","number":17080,"user":{"login":"ostrebler"},"state":"open","created_at":"2019-10-13T23:48:58Z"},{"id":506353281,"title":"create-react-app failing","body":"\\r\\n**What is the current behavior?**\\r\\n\\r\\nOn running create-react-app, this is what happens:\\r\\n\\r\\n`\\r\\nInstalling packages. This might take a couple of minutes.\\r\\nInstalling react, react-dom, and react-scripts...\\r\\n\\r\\nyarn add v1.19.1\\r\\n[1/4] Resolving packages...\\r\\n[2/4] Fetching packages...\\r\\nerror @typescript-eslint/eslint-plugin@2.3.2: The engine \\"node\\" is incompatible with this module. Expected version \\"^8.10.0 || ^10.13.0 || >=11.10.1\\". Got \\"11.6.0\\"\\r\\nerror Found incompatible module.\\r\\ninfo Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.\\r\\n\\r\\nAborting installation.\\r\\n  yarnpkg add --exact react react-dom react-scripts --cwd C:\\\\Users\\\\Michael C\\\\Desktop\\\\React\\\\mpqfrontendtest has failed.\\r\\n\\r\\nDeleting generated file... package.json\\r\\nDeleting generated file... yarn.lock\\r\\nDeleting mpqfrontendtest/ from C:\\\\Users\\\\Michael C\\\\Desktop\\\\React\\r\\nDone.\\r\\n`\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nFor create-react-app to run normally\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis has never failed for me before. OS is Windows 10, create-react-app version is 3.2.0\\r\\n","number":17079,"user":{"login":"dylanesque"},"state":"closed","created_at":"2019-10-13T17:20:18Z"},{"id":506339730,"title":"[lint] False positive when using hooks inside static component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBUG\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nError reported when using hooks inside component as a static property:\\r\\n\\r\\nhttps://codesandbox.io/s/suspicious-darwin-9qh7y?fontsize=14\\r\\n\\r\\n> React Hook \\"useState\\" is called in function \\"Foo.Bar\\" which is neither a React function component or a custom React Hook function.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nNo error. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.10.1","number":17078,"user":{"login":"mir3z"},"state":"closed","created_at":"2019-10-13T15:25:10Z"},{"id":506312526,"title":"Want to understand the \\"is\\" method logic \\"react.dom.development.js\\" line number 4230","body":"/**\\r\\n * inlined Object.is polyfill to avoid requiring consumers ship their own\\r\\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\r\\n */\\r\\nfunction is(x, y) {\\r\\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\\r\\n  ;\\r\\n}\\r\\n\\r\\n\\r\\nCould anybody explain this logic why we are comparing the two previous and next value dependencies in the above fashion?\\r\\nWhile it could be simply compared like x === y\\r\\n\\r\\nThis comparison is happening for the \\"useMemo\\" dependency comparison. \\r\\n","number":17076,"user":{"login":"jaswantmandloi"},"state":"closed","created_at":"2019-10-13T11:32:56Z"},{"id":506247360,"title":"new prop","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17075,"user":{"login":"Randercrop"},"state":"closed","created_at":"2019-10-12T22:58:51Z"},{"id":506181925,"title":"Readme Changes","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17074,"user":{"login":"SanjalaSadini"},"state":"closed","created_at":"2019-10-12T12:38:10Z"},{"id":506175180,"title":"[DevTools] polish hooks: complex values preview ","body":"We create many `useDebugValue` helpers, loggers and so one now, so we can feel less pain.\\r\\n\\r\\nWhat matter (**Updated**)\\r\\n- previewing complex values brifely like chrome devtools does it for arrays, sets, maps, objects,,,\\r\\n\\r\\nI [wrote related twit](https://twitter.com/mxtnr/status/1178271362890240001) recently with one of my DebugValue helpers. screenshot out here:\\r\\n<img width=\\"556\\" alt=\\"Screenshot 2019-09-29 at 14 01 53\\" src=\\"https://user-images.githubusercontent.com/6201068/66700775-5648bf80-ecfd-11e9-93fe-089d451bcffa.png\\">\\r\\n_my named hooks currently require a `label` option unless react babel cannot transform name of variable automatically_","number":17073,"user":{"login":"a-x-"},"state":"closed","created_at":"2019-10-12T11:32:51Z"},{"id":506168447,"title":"[DevTools] Implemented re-render mechanism for React 16.9+","body":"Solves: #16968 \\r\\n\\r\\n**Description**:\\r\\nAdded force re-render mechanism for components.\\r\\n\\r\\n**Support**:\\r\\nAs @bvaughn suggested, we will **only support React 16.9+**\\r\\nVersions that aren\'t supported won\'t show the `re-render` button in the UI.\\r\\n\\r\\n**Tested on**:\\r\\n- Versions that are < 16.9 do not show the `re-render` button in the UI.\\r\\n- Versions that are >= 16.9 show the `re-render` button in the UI and successfully dispatch an update to the supported components types.\\r\\n\\r\\n![re-render](https://user-images.githubusercontent.com/23095052/66699917-6657a380-eceb-11e9-9cbe-4228b1655479.gif)\\r\\n","number":17072,"user":{"login":"hristo-kanchev"},"state":"closed","created_at":"2019-10-12T10:29:15Z"},{"id":506100319,"title":"Set up experimental builds","body":"The experimental builds are packaged exactly like builds in the stable release channel: same file structure, entry points, and npm package names. The goal is to match what will eventually be released in stable as closely as possible, but with additional features turned on.\\r\\n\\r\\nVersioning and Releasing\\r\\n------------------------\\r\\n\\r\\nThe experimental builds will be published to the same registry and package names as the stable ones. However, they will be versioned using a separate scheme. Instead of semver versions, experimental releases will receive arbitrary version strings based on their content hashes. The motivation is to thwart attempts to use a version range to match against future experimental releases. The only way to install or depend on an experimental release is to refer to the specific version number.\\r\\n\\r\\nBuilding\\r\\n--------\\r\\n\\r\\nI did not use the existing feature flag infra to configure the experimental builds. The reason is because feature flags are designed to configure a single package. They\'re not designed to generate multiple forks of the same package; for each set of feature flags, you must create a separate package configuration.\\r\\n\\r\\nInstead, I\'ve added a new build dimension called the **release channel**. By default, builds use the **stable** channel. There\'s also an **experimental** release channel. We have the option to add more in the future.\\r\\n\\r\\nThere are now two dimensions per artifact: build type (production, development, or profiling), and release channel (stable or experimental). These are separate dimensions because they are combinatorial: there are stable and experimental production builds, stable and experimental development builds, and so on.\\r\\n\\r\\nYou can add something to an experimental build by gating on `__EXPERIMENTAL__`, similar to how we use `__DEV__`. Anything inside these branches will be excluded from the stable builds. This gives us a low effort way to add experimental behavior in any package without setting up feature flags or configuring a new package.","number":17071,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-11T23:55:42Z"},{"id":506037898,"title":"Make uncontrolled -> controlled warning clearer","body":"Fixes #17069. Glad to iterate further on the specific language, but I\'ve found that explaining in this way usually clears it up for people.","number":17070,"user":{"login":"vcarl"},"state":"open","created_at":"2019-10-11T20:12:27Z"},{"id":506037125,"title":"The warning for uncontrolled -> controlled inputs is confusing","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug? Mild DX improvement.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCreating an input with an undefined or null value, then later passing a string value, triggers a warning about controlled inputs.\\r\\n\\r\\n> A component is changing an uncontrolled input of type undefined to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa)\\r\\n\\r\\nIt\'s my experience in Reactiflux that this warning is unclear to developers with less familiarity with React, or at least with the \\"controlled\\" and \\"uncontrolled\\" terms.\\r\\n","number":17069,"user":{"login":"vcarl"},"state":"open","created_at":"2019-10-11T20:10:26Z"},{"id":505909846,"title":"More accurate \'why did this render\' wording","body":"After using the new devtools profiler (which is awesome btw!) I discovered that one of my components was rerendering because \\"the parent component rendered\\", despite being `React.memo`ed and taking no props, which seemed like an impossibility (see [twitter thread](https://twitter.com/pelotom/status/1182482183769882626?s=20) documenting my confusion). I eventually discovered that it was in fact updating due to context changes, and @bvaughn [helpfully pointed out](https://twitter.com/brian_d_vaughn/status/1182654239627075584?s=20) that the message was a fallback used when the component rerendered due to reasons other than state and props changing.\\r\\n\\r\\nThis PR attempts to make the wording a little more accurate: in addition to adding the \\"or context changed\\" caveat, it seems like \\"Internal state changed\\" is a more accurate description than \\"Hooks changed\\", because updates due to the `useContext` hook don\'t fall in that category. Ideally in the special case where the component is memoized the message could definitively say the update was due to a context change, but I\'m not sure how to detect that situation \ud83d\ude42","number":17068,"user":{"login":"pelotom"},"state":"closed","created_at":"2019-10-11T15:11:14Z"},{"id":505861715,"title":"React hooks in HOC","body":"I have a pattern question.\\r\\n\\r\\nI\'m thinking of using a pattern where I extract my logic in higher-order components, so components are actually \\"dumb\\".\\r\\n\\r\\nSo instead of\\r\\n\\r\\n```js\\r\\nconst Signup = props => {\\r\\n  const [onSubmit, {data}] = useMutation (SIGNUP_GQL)\\r\\n  return (\\r\\n    ...\\r\\n  )\\r\\n}\\r\\nexport default Signup\\r\\n```\\r\\n\\r\\nI\'ll do\\r\\n\\r\\n```js\\r\\nconst withMutation = gql => C => props => {\\r\\n   const [onSubmit, {data}] = useMutation (SIGNUP_GQL)\\r\\n   return <C onSubmit={onSubmit} data={data} />\\r\\n}\\r\\n```\\r\\nonce, and then just\\r\\n```js\\r\\nconst Signup = ({onSubmit, data}) => (\\r\\n  ...\\r\\n)\\r\\nexport default withMutation (SIGNUP_GQL) (Signup)\\r\\n```\\r\\n\\r\\nSo far I haven\'t encountered any problems (up to many typo\'s \ud83d\ude09). However, the docs say that hooks can only be called inside the body of a functional component. So my question is whether `withMutation (..) (..)` count as a functional component for this definition.\\r\\n\\r\\nAnd in general the question is whether react hooks have full support in HOC. My naive understanding is that those two approaches should be *fundamentally* equivalent regardless of the implementation. But I want to make sure, and if they aren\'t, whether the developers plan to support HOCs going forward. I am structuring my whole project this way, so that\'s why this is important to me. And I haven\'t read the hooks implementation, so not versed in how it works.\\r\\n\\r\\nCheers. \ud83d\ude42","number":17067,"user":{"login":"hacker-DOM"},"state":"closed","created_at":"2019-10-11T13:43:52Z"},{"id":505800009,"title":"useEffect callback never called","body":"I want to report a bug. My problem is that the callback function I pass to `useEffect()` is never called in my app. I uploaded a minimal app [here](https://github.com/pschiffmann/react-useeffect-issue) that reproduces the issue.\\r\\n\\r\\nAs you can see, I render a couple of nested components. After the initial render, I update the component state inside a `useEffect()` callback. However, this callback is only executed for the first two components, not for the third level component. The result is that the third and subsequent levels are not rendered at all.\\r\\n\\r\\nI suspect that this is a bug in React and not a misuse on my side because doing any of the following changes will let the component tree render correctly in all levels:\\r\\n- Don\'t use multiple React roots. If I remove the last (yellow) `ReactDOM.render()` call, then the second (red) component tree will render correctly.\\r\\n- Don\'t conditionally render child components. Removing the `message !== DEFAULT_MESSAGE` check (`main.tsx`, line 20) causes the component trees to render correctly.\\r\\n- Use `useLayoutEffect()` instead of `useEffect()`.\\r\\n\\r\\nIf you need additional information to reproduce the issue or have any questions, let me know. I\'d like provide any help I can!","number":17066,"user":{"login":"pschiffmann"},"state":"closed","created_at":"2019-10-11T11:36:40Z"},{"id":505745256,"title":"[react-interactions] Add getInstanceFromNode support to TestHostRenderer","body":"This PR adds support for `getInstanceFromNode` with `TestHostRenderer` so that we don\'t get the `Not yet implemented.` error when using React Scopes using TestRenderer.","number":17065,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-11T09:34:25Z"},{"id":505686267,"title":"mouseEnter behaves like mouseOver when using ReactDOM.render() to mount a child element","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen using `ReactDOM.render()` to mount a child element, `mouseEnter` behaves like `mouseOver` (`mouseLeave` behaves like `mouseOut`).  you can see the demo, and when my cursor moves between the red and blue blocks, it will repeatedly trigger mouseEnter and mouseLeave.\\r\\nhttps://codepen.io/sen-dream/pen/VwwvGbm\\r\\n\\r\\n**What is the expected behavior?**\\r\\nhttps://codepen.io/sen-dream/pen/WNNQgoy\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nTestes with React 16.8 on Chrome/macOS. It didn\'t work in previous versions.\\r\\n","number":17064,"user":{"login":"sen14251"},"state":"closed","created_at":"2019-10-11T07:28:30Z"},{"id":505438849,"title":"Pass prod error messages directly to constructor","body":"Updates the `invariant` transform to pass an error message string directly to the Error constructor, instead of mutating the message property.\\r\\n\\r\\nTurns this code:\\r\\n\\r\\n```js\\r\\ninvariant(condition, \'A %s message that contains %s\', adj, noun);\\r\\n```\\r\\n\\r\\ninto this:\\r\\n\\r\\n```js\\r\\nif (!condition) {\\r\\n  throw Error(\\r\\n    __DEV__\\r\\n      ? `A ${adj} message that contains ${noun}`\\r\\n      : formatProdErrorMessage(ERR_CODE, adj, noun)\\r\\n  );\\r\\n}\\r\\n```","number":17063,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-10T18:31:19Z"},{"id":505323634,"title":"apply changes on editablevalue on blur feature implemented","body":"Added applying changes on EditableValue component on blur event.","number":17062,"user":{"login":"muratcatal"},"state":"open","created_at":"2019-10-10T14:50:07Z"},{"id":505086954,"title":"Object.assign is faster","body":"jsperf: https://jsperf.com/efwefserlkmlaeskrfn\\r\\n![image](https://user-images.githubusercontent.com/20941062/66548527-012d7200-eb74-11e9-9008-c29e67939e69.png)\\r\\n\\r\\n","number":17061,"user":{"login":"rabbitooops"},"state":"closed","created_at":"2019-10-10T07:24:33Z"},{"id":505038084,"title":"\'exhaustive-deps\' lint rule warns that \\"Outer scope values\\" aren\'t valid when a hook is inside a function","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nInside a functional component, an inner function with a dependency on value from an outer function triggers the warning, \\"Outer scope values like \'....\' aren\'t valid dependencies because mutating them doesn\'t re-render the component.\\"\\r\\n\\r\\nSee: https://codesandbox.io/s/custom-hook-repro-3wfly\\r\\n\\r\\nHere\'s the crux of the problem\\r\\n\\r\\n```tsx\\r\\nconst List = (props: IListProps) => {\\r\\n  const { items } = props;\\r\\n\\r\\n  // Using the useMemo hook here doesn\'t complain, e.g. -\\r\\n  // const names = useMemo(() => items.map(item => item.name), [items]);\\r\\n\\r\\n  // Using the useMemo hook inside a function complains\\r\\n  const names = useItemNames();\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h2>There are {items.length} items in the list</h2>\\r\\n      <section>\\r\\n        {names.map(name => (\\r\\n          <div>{name}</div>\\r\\n        ))}\\r\\n      </section>\\r\\n    </>\\r\\n  );\\r\\n\\r\\n  ////////////////////\\r\\n\\r\\n  function useItemNames() {\\r\\n    // es-lint warns here: Outer scope values like \'items\' aren\'t valid dependencies \\r\\n    // because mutating them doesn\'t re-render the component\\r\\n    return useMemo(() => items.map(item => item.name), [items]);\\r\\n  }\\r\\n};\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe eslint rule shouldn\'t be triggered.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n* React v16.10.2\\r\\n* So far as I can tell, this hasn\'t worked previously.","number":17060,"user":{"login":"gerrod"},"state":"open","created_at":"2019-10-10T05:09:49Z"},{"id":505037687,"title":"Make it easier to debug (undefined components) in production","body":"**Do you want to request a *feature* or report a *bug*?** Feature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nSo for whatever reason, terser/minification causes a bug where one of my components is undefined during render. What I get is the standard production mode minified error.\\r\\n\\r\\nFor some reason this time, I can\'t seem to do *any* of the following:\\r\\n\\r\\n1. See any stack information for the component (React just says \\"something somewhere is undefined\\")\\r\\n2. Set a breakpoint on the error point (for some reason with webpack + devtool sourcemap, chrome isn\'t letting me do a mid-line breakpoint at any place above the error)\\r\\n3. Disable Reacts error catching temporarily so I can pause on the actual error\\r\\n4. Use a development version of React with any ease but with the prod settings (I tried turning off both process.env.NODE_ENV checks but then you get an error `It is not supported to run the profiling version of a renderer (for example, react-dom/profiling) without also replacing the scheduler/tracing)`\\r\\n\\r\\nA big upgrade here would be to fix all of these (except 2, which is either a Webpack or Chrome bug). Can we get better stacks in production mode? That\'s the ideal. That with number 3 would be the most helpful: a query like `?disableNiceErrors=true` that prevents React from catching/re-throwing the error later would make it so much easier.\\r\\n\\r\\nAs it is now, it\'s incredibly painful to debug (already an hour into it and without the breakpoints working on minified React it\'s hard to really even figure out where besides manual code commenting).\\r\\n\\r\\nEdit: A fifth would be source maps for react itself in production bundles which may work.","number":17059,"user":{"login":"natew"},"state":"closed","created_at":"2019-10-10T05:08:30Z"},{"id":504979764,"title":"Migrate useDeferredValue and useTransition","body":"Migrated `useDeferredValue` and `useTransition` from Facebook\'s www repo into `ReactFiberHooks`.","number":17058,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-10-10T01:31:19Z"},{"id":504943131,"title":"Nested forwardRefs don\'t preserve the displayName property","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nReact.forwardRef [currently provides support](https://reactjs.org/docs/forwarding-refs.html#displaying-a-custom-name-in-devtools) for displaying a custom display name for a component in DevTools, however, if you use the function on something that was returned by forwardRef, the displayName isn\'t preserved.\\r\\n\\r\\nThe use case I encountered for this was writing multiple HOCs for injecting different props - each HOC uses the pattern suggested in the React docs for using a custom name, but if I apply more than one HOC to a single component, the name no longer exists.\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/s/react-example-25khw\\r\\n\\r\\nNotably, look at the tree in DevTools. The name of the component that was wrapped twice shows up as \\"undefined\\".\\r\\n**What is the expected behavior?**\\r\\nWhen following code pattern described in the React docs for applying custom names to forwardRefs, you should be able to use a HOC multiple times or use multiple HOCs and still preserve the original component\'s name.\\r\\n\\r\\nPerhaps the object returned [here](https://github.com/facebook/react/blob/c898020e015f4ee6f793a652668d6d78b0d43e76/packages/react/src/forwardRef.js) should also have a \'displayName\' field?\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI discovered this in a project that is on React 16.8.6, but the codesandbox example shows the issue in 16.10.0.","number":17057,"user":{"login":"SKHecht"},"state":"closed","created_at":"2019-10-09T23:12:45Z"},{"id":504890358,"title":"fix typos","body":"small typos fixed","number":17056,"user":{"login":"lupuselit"},"state":"open","created_at":"2019-10-09T20:56:06Z"},{"id":504825222,"title":"Q: should we use useCallback on native HTML elements","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nIt\'s a question.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nAccording to the docs, this could be useful optimizing callback functions being passed down:\\r\\n\\r\\n> This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. `shouldComponentUpdate`).\\r\\n\\r\\nMy question is: should we use `useCallback` when passing a callback to a native HTML element? e.g. `<button onClick={callback}></button>`","number":17055,"user":{"login":"neo"},"state":"closed","created_at":"2019-10-09T18:42:00Z"},{"id":504820725,"title":"DevTools test shell tweaks","body":"Noticed a few things that needed tweaking while prototyping another feature last night.","number":17054,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-09T18:32:41Z"},{"id":504818497,"title":"[DO NOT MERGE] Prototype showing component errors/warnings within the Components tree","body":"Relates to #9189\\r\\n\\r\\nLast night I played around a bit with the idea of surfacing dev warnings/errors in the Components tree UI:\\r\\n<img width=\\"792\\" alt=\\"Screen Shot 2019-10-08 at 9 03 32 PM\\" src=\\"https://user-images.githubusercontent.com/29597/66509294-9999f880-ea87-11e9-9dfd-9a5e82890110.png\\">\\r\\n\\r\\nI\'m not sure this is useful or compelling enough to warrant completing, and there are a few significant \\"TODOs\\", but I\'m pushing in case myself or someone else decides to play with it some more in the future. (I\'m not going to follow up with it for the time being.)","number":17053,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-09T18:28:03Z"},{"id":504642648,"title":"Error: \\"Could not find node with id \\"952\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.2.0-a8b8ffb89\\r\\n\\r\\nCall stack: at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154414)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\\r\\n\\r\\nComponent stack: in dl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17052,"user":{"login":"hardikbeladiya"},"state":"closed","created_at":"2019-10-09T13:10:15Z"},{"id":504636017,"title":"i was trying to pass through Hook effect, and the codes used are declared no where. like ChatApi ","body":"```js\\r\\nimport React, { useState, useEffect } from \'react\';\\r\\n\\r\\nfunction FriendStatus(props) {\\r\\n  const [isOnline, setIsOnline] = useState(null);\\r\\n\\r\\n  function handleStatusChange(status) {\\r\\n    setIsOnline(status.isOnline);\\r\\n  }\\r\\n\\r\\n  useEffect(() => {\\r\\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\\r\\n\\r\\n    return () => {\\r\\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\\r\\n    };\\r\\n  });\\r\\n\\r\\n  if (isOnline === null) {\\r\\n    return \'Loading...\';\\r\\n  }\\r\\n  return isOnline ? \'Online\' : \'Offline\';\\r\\n}\\r\\n```","number":17051,"user":{"login":"rubimbura"},"state":"closed","created_at":"2019-10-09T12:58:43Z"},{"id":504565729,"title":"The create-react-app command failed to install the project properly and run","body":"create-react-app\\r\\n![image](https://user-images.githubusercontent.com/8580637/66474620-43977600-eac4-11e9-82a3-6528ac327862.png)\\r\\n","number":17050,"user":{"login":"shenmashi"},"state":"closed","created_at":"2019-10-09T10:41:25Z"},{"id":504506665,"title":"almost same problem.","body":"almost same problem.\\r\\n\\r\\nI am updating the global state using context api, but when I am calling global state in `useEffect()` it still retreive the initial value, not updated value. here I used [], as second parameter for useEffect function. when I remove it, it execute all code withing useEffect function as unlimited.\\r\\n\\r\\n_Originally posted by @muhammadwfa in https://github.com/facebook/react/issues/14066#issuecomment-533625045_","number":17049,"user":{"login":"swathisaathvi"},"state":"closed","created_at":"2019-10-09T08:51:47Z"},{"id":504441649,"title":"Bailouts for state updates behavior inconsistently for hooks","body":"This is a bug I think.\\r\\n\\r\\nAs the title says, React didn\'t help me to merge the update requests.\\r\\n\\r\\n```js\\r\\nconst Player = ({ }) => {\\r\\n  const [name, setName] = useState(\'John Higgins\',)\\r\\n  const [age, setAge] = useState(47)\\r\\n  const nextPlayer = () => {\\r\\n    setName(\'Mark Selby\')\\r\\n    setAge(34)\\r\\n  }\\r\\n  console.log(\'render.\')\\r\\n  return <p>\\r\\n    This player\'s name is {name}, {age} years.\\r\\n    <button type=\\"button\\" onClick={nextPlayer}>next</button>\\r\\n  </p>\\r\\n}\\r\\n```\\r\\n\\r\\nAfter the button clicked, it outputs:\\r\\n\\r\\n```shell\\r\\n>> render.\\r\\n>> render.\\r\\n```\\r\\n\\r\\nBut in fact, I got three.\\r\\n\\r\\n```shell\\r\\n>> render.\\r\\n>> render.\\r\\n>> render.\\r\\n```\\r\\n\\r\\nIt doesn\'t always be.\\r\\n\\r\\n\\r\\n## The actual code\\r\\n\\r\\n```ts\\r\\nconst List = ({}) => {\\r\\n\\tconst [items, setItems] = useState<ListItem[]>([])\\r\\n\\tconst [tick, setTick] = useState(0)\\r\\n\\tconst [page, setPage] = useState(1)\\r\\n        \\r\\n        // # effect 001\\r\\n\\tuseEffect(() => {\\r\\n           const refresh = tick > 1\\r\\n           load({ refresh, page })\\r\\n             .then(d => {\\r\\n                if (refresh) setItems(d) // replace\\r\\n                else setItems([...items, ...d]) // append\\r\\n             })\\r\\n        }, [tick, page])\\r\\n\\r\\n        // # effect 002\\r\\n        useEffect(() => {\\r\\n            testingScrollToBottom(() => {\\r\\n               setTick(0) // makes effect 001 applied.\\r\\n               setPage(page + 1) // makes effect 001 applied again.\\r\\n            })\\r\\n            return () => {\\r\\n                stopTestingScrollToBottom()\\r\\n            }\\r\\n        }, [page])\\r\\n        \\r\\n        return (\\r\\n            <div>\\r\\n                <button\\r\\n                    onClick={() => {\\r\\n                        setTick(tick + 1)\\r\\n                        setPage(1)\\r\\n                    }}>\\r\\n                    Refresh\\r\\n                </button>\\r\\n                { items.map(item => <Item item={item}/>) }\\r\\n            </div>\\r\\n        )\\r\\n}\\r\\n```\\r\\n\\r\\nFunction `testingScrollToBottom` is where the things happened. \\r\\n\\r\\nHere is what I did to avoid that:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/11514991/66693450-7a93a480-ecdb-11e9-80e4-4ee6caf931e8.png)\\r\\n\\r\\nBy the way, `testingScrollToBottom` uses `setTimeout`.","number":17048,"user":{"login":"zxh19890103"},"state":"open","created_at":"2019-10-09T06:23:28Z"},{"id":504288546,"title":"Error: \\"Could not find commit data for root \\"34103\\" and commit 1\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. React dev tools profiler crashed when changing from \\"anonymous\\" to \\"overlay\\" and asked to report the issue\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.1.1-a9cd9a765\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:331467)\\r\\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:331684)\\r\\n    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58733)\\r\\n    at Ri (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66060)\\r\\n    at Jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104557)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89163)\\r\\n    at Ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89088)\\r\\n    at ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86037)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45275\\r\\n\\r\\nComponent stack: in sc\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":17047,"user":{"login":"villesau"},"state":"closed","created_at":"2019-10-08T21:26:53Z"},{"id":504234843,"title":"[react-interactions] Refine possible null case for FocusContain","body":"Upstream from changes internal repo; handles a possible `null` case scenario.","number":17046,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-08T19:31:46Z"},{"id":504193459,"title":"Stop warning about setNativeProps being deprecated","body":"I added this code in https://github.com/facebook/react/pull/14907 and https://github.com/facebook/react/pull/14912.\\r\\n\\r\\nThis warning was was enabled with a feature flag only at Facebook. We had all these warnings ignored and figured we\'d migrate to the new API as part of Fabric.\\r\\n\\r\\nThis actually makes little sense. Importing setNativeProps from \'react-native\' won\'t give us the Fabric version of `setNativeProps`. The only way to do that is by calling it on a `ref`. Even with that, we don\'t know if setNativeProps will exist in fabric, so migrating to a new API just to stop supporting it doesn\'t make sense. We added a warning and made the implementation in Fabric a no-op here: https://github.com/facebook/react/pull/15094\\r\\n\\r\\nAll things considered, this change isn\'t necessary today, adds some bloat, is not used anywhere (it\'s not even exported by React Native\'s public API in the current release) and just triggers a ton of warnings for us at Facebook. \\r\\n\\r\\nAlso, none of our other APIs that we are migrating from for Fabric currently show warnings. It doesn\'t make much sense to have this one warn but none of the others.\\r\\n\\r\\nLet\'s remove and revisit if we want some form of this in the future.","number":17045,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-10-08T18:03:48Z"},{"id":504190491,"title":"[Feature Request] Additional lifecycle hooks (useDidMountEffect & useWillUnmountEffect) working just like class methods","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhile refactoring the code to React Hooks, I came across several \\"problems\\" that negatively affect my work. Working with Hooks should be a pleasure, but sometimes it\'s very hard work.\\r\\n\\r\\nLet\'s start with the simplest example: `componentDidMount`. This most popular method in the component\'s lifecycle has no equivalent in Hooks! Of course, there is `useEffect` with which we can build similar \\"effect\\", but its syntax is NOT INTUITIVE.\\r\\n\\r\\nLet\'s look:\\r\\n\\r\\n```javascript\\r\\n// good old code\\r\\nclass App extends Component {\\r\\n  componentDidMount() { // very human name\\r\\n    console.log(\'mounted!\')\\r\\n  }\\r\\n  render() {\\r\\n    return <View />\\r\\n  }\\r\\n}\\r\\n\\r\\n// new API\\r\\nconst App = () => {\\r\\n  useEffect(\\r\\n    () => {\\r\\n      console.log(\'mounted!\')\\r\\n    },\\r\\n    [] // ordinary human looks here and thinks: \\"square? wtf?\\"\\r\\n  )\\r\\n  return <View />\\r\\n}\\r\\n```\\r\\n\\r\\nPersonally, for me, every empty array, or even unnecessary brackets, are just information noise. But `useDidMountEffect` can be written very easily...\\r\\n```javascript\\r\\nconst useDidMountEffect = callback => useEffect(() => { callback() }, [])\\r\\n```\\r\\n...so, let\'s get to the second case: `componentWillUnmount`.\\r\\n\\r\\nReact documentation mentions that we can use `useEffect` to call a function when a component is unmounted:\\r\\n> Cleaning up an effect\\r\\n> The clean-up function runs before the component is removed from the UI...\\r\\nhttps://reactjs.org/docs/hooks-reference.html#useeffect\\r\\n\\r\\nSo let\'s check it out:\\r\\n\\r\\n```javascript\\r\\n// again good old code for \\"contrast\\"\\r\\nclass App extends Component {\\r\\n  componentWillUnmount() { // yummie! this name is so sweet and readable...\\r\\n    console.log(\'unmounted!\')\\r\\n  }\\r\\n  render() {\\r\\n    return <View />\\r\\n  }\\r\\n}\\r\\n\\r\\n// new API\\r\\nconst App = () => {\\r\\n  useEffect(\\r\\n    () => () => { // circle, arrow, circle, arrow, bracket and done: we can finally write our logic...\\r\\n      console.log(\'unmounted!\')\\r\\n    },\\r\\n    [] // Square again? React is special square friendly library or something?\\r\\n  )\\r\\n  return <View />\\r\\n}\\r\\n```\\r\\n\\r\\nBut as in the first example, here we can also write a custom hook:\\r\\n```javascript\\r\\nconst useWillUnmountEffect = callback => useEffect(() => () => callback(), [])\\r\\n```\\r\\nEverything simple easy and fun? It seems so. **But not completely.** This custom hook forced me to write this issue, because the above code will not work at some specific moment. Probably most React Masters already guess when it won\'t work.\\r\\n\\r\\nWhere is the problem? Let\'s see:\\r\\n```javascript\\r\\nconst App = () => {\\r\\n  const [value, setValue] = useState(\'nie\')\\r\\n  useEffect(\\r\\n    () => () => console.log(\'React Hooks: \', value),\\r\\n    []\\r\\n  )\\r\\n  return <TextInput value={value} onChangeText={setValue} />\\r\\n}\\r\\n```\\r\\nAnd now try to initiate the following actions on the above code:\\r\\n1. mount the component\\r\\n2. enter the value `works like charm!` to input\\r\\n3. unmount the component\\r\\n4. Check the console and find out the result is `React hooks: nie` instead `React hooks: works like charm!`\\r\\n\\r\\nWhat happened here? Of course, reference to the first value instead ACTUAL value...\\r\\n\\r\\n\\r\\nSo how can we fix this bug? Very easy xD\\r\\n\\r\\n```javascript\\r\\n// using hooks...\\r\\nconst App = () => {\\r\\n  const [value, setValue] = useState(\'\')\\r\\n  const actualValue = React.useRef(value)\\r\\n  useEffect(\\r\\n    () => {\\r\\n      actualValue.current = value\\r\\n    },\\r\\n    [value]\\r\\n  )\\r\\n  useEffect(\\r\\n    () => () => console.log(actualValue.current),\\r\\n    []\\r\\n  )\\r\\n  return <TextInput value={value} onChangeText={setValue} />\\r\\n}\\r\\n\\r\\n// using classic React...\\r\\nclass App extends Component {\\r\\n  state = {\\r\\n    value: \'\'\\r\\n  }\\r\\n  setValue = value => this.setState({value})\\r\\n  componentWillUnmount() {\\r\\n    console.log(this.state.value)\\r\\n  }\\r\\n  render() {\\r\\n    return <TextInput value={this.state.value} onChangeText={this.setValue} />\\r\\n  }\\r\\n}\\r\\n```\\r\\nYep. This is how we were able to implement logging in the console of the last value of the given component.\\r\\n\\r\\n**And now the question: which version is more readable for a beginner? This with weird refs, arrows everwhere and squares, or with small and elegant class?**\\r\\nPersonally, I think programming should be easy. Or at least strive for simplicity. And the class implementation (old) is much easier to read and understand logic.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nNew hooks:\\r\\n\\r\\n```javascript\\r\\nconst App = () => {\\r\\n  React.useDidMountEffect(() => console.log(\'Mounted!\'))\\r\\n\\r\\n  React.useWillUnmountEffect(() => console.log(\'Unmounted!\'))\\r\\n\\r\\n  return <View />\\r\\n}\\r\\n```\\r\\nWithout any deps. In addition, `useWillUnmountEffect` get the ACTUAL context to use props or state in it.\\r\\n\\r\\nAnd now defense. Someone can say: if you write your own custom hooks that behave the same as the proposed solution, why not just add them to your project and forget about the case? Well:\\r\\n* Currently, React contains a hook, which is a syntax sugar of another hook. Of course, we are talking about useState (which is an ordinary wrapper on useReducer). `useState` is also a hook that is a replacement for the `state` in class, so proposed hooks are analogy to `useState`.\\r\\n* Writing a reusable `useWillUnmountEffect` hook is very difficult (probably even impossible)\\r\\n* Programmers typically write the code as follows: `useEffect(callback, [])`, which causes each rerender to do shallow compare (`Object.is`) on dynamically created empty arrays. The proposed hooks will be more efficient.\\r\\n* An additional, readable function in the API reduces the information noise created in the application code.\\r\\n* Programming is supposed to be fun\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n\\"react\\": \\"^16.8.0\\"","number":17044,"user":{"login":"ku8ar"},"state":"closed","created_at":"2019-10-08T17:57:35Z"},{"id":504039243,"title":"Apply props/state/hooks edits on blur","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n**What is the current behavior?**\\r\\ntrigger by press enter button\\r\\n**What is the expected behavior?**\\r\\ntrigger by out of focus or pressing enter button\\r\\n","number":17043,"user":{"login":"xuanxuan321"},"state":"closed","created_at":"2019-10-08T13:18:53Z"},{"id":503994148,"title":"[react-interactions] Adds more experimental Scope API methods","body":"This PR adds two more internal API methods to React Scopes. Note: these are experimental and may change at any time. Notably, the changes are:\\r\\n\\r\\n- Rename `getScopedNodes` -> `getAllNodes`. Rename to make way for new method below.\\r\\n- Add `getFirstNode`. Gets only the 1st matching host component.\\r\\n- Add `containsNode`. Validates that any given HTML node is within the sub-tree of a scope.\\r\\n\\r\\nThese APIs mainly aim at adding missing functionality that would result in computationally expensive work-arounds in user-land.","number":17042,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-08T11:45:06Z"},{"id":503972380,"title":"Different behavior between function and class with event.target.value","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nreport a *bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nSimilar logic but different behavior between function component and class component\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nDemo: https://codesandbox.io/s/fervent-faraday-xgw8x\\r\\nReproduction steps have written in demo.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'m not sure but I think class component\'s behavior should be right.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.10.2 / macOS 10.14.6 / Chrome 77 / Safari 13\\r\\nReact 16.8.0 has same issue.","number":17041,"user":{"login":"wangjianio"},"state":"closed","created_at":"2019-10-08T10:54:05Z"},{"id":503964241,"title":"typescript-eslint/eslint-plugin@2.3.3  can\'t install","body":"@typescript-eslint/eslint-plugin@2.3.3: The engine \\"node\\" is incompatible with this module. Expected version \\"^8.10.0 || ^10.13.0 || >=11.10.1\\".\\r\\n\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/38418699/66389172-55ace200-e9fa-11e9-9749-b0954b46272d.png)\\r\\n","number":17040,"user":{"login":"zengkaii"},"state":"closed","created_at":"2019-10-08T10:35:09Z"},{"id":503892165,"title":"Components not correctly displayed","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nelements not reconized\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nonly use components tab in console of chrome.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nsee any elements react\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nWindow 10 64bit\\r\\nreact ^16.8.1\\r\\n\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)\\r\\n\\r\\nThis is my console component visualizzation, the same page visualizated with linux&chrome not have any issue","number":17038,"user":{"login":"lbottoni"},"state":"closed","created_at":"2019-10-08T08:07:27Z"},{"id":503878186,"title":"Add \\"search\\" functionality to Profiler graphs","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n**What is the current behavior?**\\r\\nit\u2018s hard for me to find a component in the profiler tab\\r\\n**What is the expected behavior?**\\r\\nadd a search function,just like components tab\\r\\n\\r\\n","number":17037,"user":{"login":"xuanxuan321"},"state":"closed","created_at":"2019-10-08T07:34:07Z"},{"id":503689621,"title":"A lifecycle method \\"component did catch proptype error\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nA feature. I\'d like to have a lifecycle method similar to `componentDidCatch` which catches proptype errors. Every time when a proptype error is raised, I get a long and ugly warning which requires me to debug the app and find a component (sometimes there are hundreds-thousands of them) where the error appeared. Usually I have a complex tree of components and almost every component is a HOC over smaller components. More precise I use https://github.com/acdlite/recompose + enhancers developed by me. \\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1082083/66347731-a8848c00-e95d-11e9-8472-7429f269d725.png)\\r\\n\\r\\nThat\'s only a little part of the error because it didn\'t even fit into my screen which makes my console look unusable.\\r\\n\\r\\nMy proposal is to provide a lifecycle method which allows to not put this error into console but render it on the place of errorred component (similar to what we do at ErrorBoundary). This would allow to more clearly see where the error appeared and to save time on debugging. Of course this should be available at dev environment only.\\r\\n\\r\\nWe use error boundaries powered by  `componentDidCatch` to catch **actual errors** and I imagine this new method as the tool to catch **potential errors**. There is no difference for me, both need to be fixed, so both need to be output similarly. Does it make sense?","number":17036,"user":{"login":"finom"},"state":"closed","created_at":"2019-10-07T21:02:49Z"},{"id":503677533,"title":"Remove dormant createBatch experiment","body":"In a hybrid React app with multiple roots, `createBatch` is used to coordinate an update to a root with its imperative container.\\r\\n\\r\\nWe\'ve pivoted away from multi-root, hybrid React apps for now to focus on single root apps.\\r\\n\\r\\nThis PR removes the API from the codebase. It\'s possible we\'ll add back some version of this feature in the future.","number":17035,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-07T20:37:25Z"},{"id":503570716,"title":"Fix typo in ReactSuspenseList-test.internal.js","body":"Fix typo in the test.\\r\\n","number":17034,"user":{"login":"ganapativs"},"state":"closed","created_at":"2019-10-07T16:50:22Z"},{"id":503529466,"title":"Annoying popup from chrome devtools wrongly telling me I\'m using an old version of React","body":"I am given a rather annoying popup message\\r\\n\\r\\n```\\r\\nUnsupported React version detected\\r\\nThis version of React DevTools supports React DOM v15+ and React Native v61+.\\r\\n\\r\\nIn order to use DevTools with an older version of React, you\'ll need to install an older version of the extension.\\r\\n```\\r\\n\\r\\nevery single time I want to use devtools.\\r\\n\\r\\nThis is NOT correct. I am using React 16.8 with a standard create-react-app build.","number":17033,"user":{"login":"LukenAgile42"},"state":"open","created_at":"2019-10-07T15:32:38Z"},{"id":503481789,"title":"[react-interactions] Refine a11y component flow types","body":"This PR refines some Flow types on the internal a11y components. These changes taken from the internal code, so just syncing with Github.","number":17032,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-07T14:16:50Z"},{"id":503387673,"title":"Error Boundary and Errors Thrown by a Promise","body":"Hi,\\r\\n\\r\\nI am learning react and trying to get an Error Boundary component to catch an error from a promise. In the _componentDidMount_ method of a child component I am making an axios request. The only way I can get the Error Boundary component to catch the error from the promise is to to use this.setState(()=> {throw error}) in the catch handler. If I do not use the setState approach and rethrow the error in the catch handler then the Error Boundary component does not catch the error.\\r\\n\\r\\nIs the setState approach the recommended approach for getting an Error Boundary component to catch a promise or is there a better way? Is there any documentation for Error Boundary components recognising errors thrown by a promise?\\r\\n \\r\\n```ts\\r\\ncomponentDidMount(): void {\\r\\n    console.log(\'CourseList::componentDidMount\');\\r\\n\\r\\n    const dataSource: RestDataCourse = new RestDataCourse();\\r\\n    dataSource\\r\\n      .getCourses()\\r\\n      .then(courseList => {\\r\\n        this.setState({ courses: courseList });\\r\\n      })\\r\\n      .catch(error => {\\r\\n        console.error(`Error retrieving courses => ${JSON.stringify(error)}`);\\r\\n        this.setState(() => {\\r\\n          throw error;\\r\\n        });\\r\\n        // throw error\\r\\n      });\\r\\n  }\\r\\n```\\r\\n","number":17031,"user":{"login":"dcs3spp"},"state":"closed","created_at":"2019-10-07T11:19:10Z"},{"id":503366854,"title":"[react-interactions] Remove FB build a11y components","body":"The a11y components in `react-interactions` are only intended to be used internally right now. Given they\'re experimental, we\'ve decided it will be more productive to have these exists as a source of truth internally. Once our internal experiments have concluded we may change this.","number":17030,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-07T10:35:10Z"},{"id":503323073,"title":"[DevTools] show state history like redux devtools does for actions and more","body":"_**feature** request_\\r\\n\\r\\nNowadays we migrate much of our use-cases from complexes of high order redux actions+ HO selectors + HO reducers (I call it HOXes) to react hooks. Hooks allow us easier to incapsulate blocks of functionality rather it was possible with redux infrastructure, when we had to use our complex complexes to avoid much of copy-paste.\\r\\n\\r\\nOne drawback is lack of history of changes and more poor devtools at all. We creates many `useDebugValue` helpers, loggers and so one now.\\r\\n\\r\\n**expected behavior?**\\r\\n\\r\\n- show history of hook state changes with dom and js stack traces, diffs and maybe even history traversing\\r\\n- allow more precisely editing of values in devtools. Currently I cannot choose number or string or bool or object when I edit prop or state value\\r\\n- allow copying the state name in devtools (remove css no-action pls)\\r\\n- add something like $r.state back\\r\\n- preview complex values brifely like chrome devtools does it for arrays, sets, maps, objects,,,\\r\\n\\r\\nI [wrote related twit](https://twitter.com/mxtnr/status/1178271362890240001) recently with one my DebugValue helper\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nall are latest\\r\\n\\r\\n","number":17029,"user":{"login":"a-x-"},"state":"closed","created_at":"2019-10-07T09:08:53Z"},{"id":503306794,"title":"[Concurrent mode] Scheduled updates are lost when parent state update happens","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nProbably a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen in concurrent mode (render with `unstable_createRoot`), triggering a state change via an event (eg click) on the parent makes React loose the scheduled updates in the children. See:\\r\\n\\r\\nhttps://codesandbox.io/s/react-concurrent-state-bug-sp6zq\\r\\n\\r\\nNot an expert on concurrent mode here, was just playing around with it. Noticed that when some interactions happen the work (probably moved to the other tree) gets lost if the parent re-renders. You can see by clicking anywhere in the sandbox page vs clicking on the button that changes some local state. But that is just my educated guess on what might be happening.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nState updates that are scheduled in children components should happen and the DOM value should reflect the state.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact: 16.10.2\\r\\nreact-dom: 16.10.2","number":17028,"user":{"login":"albertogasparin"},"state":"open","created_at":"2019-10-07T08:35:21Z"},{"id":503068589,"title":"Scoped css with pure css string like preact-css?","body":"* [preact-css](https://github.com/Tencent/omi/tree/master/packages/preact-css)\\r\\n* https://github.com/preactjs/preact/issues/1898\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCan\'t support scoped css with pure css string.\\r\\n\\r\\nIs there a relevant vnode hook to implement this feature?","number":17027,"user":{"login":"dntzhang"},"state":"closed","created_at":"2019-10-06T08:17:46Z"},{"id":503061391,"title":"When copying tree to clipboard ensure the full tree is copied","body":"Added a new event - getDataForCopy - that accepts an element id and property as a parameter, gets that property of the element, formats it for copying and returns it in the dataForCopy.\\r\\n\\r\\nFixes #16924 ","number":17026,"user":{"login":"ChrisDobby"},"state":"closed","created_at":"2019-10-06T06:56:29Z"},{"id":503023143,"title":"getDerivedStateFromProps is not fired on state change in dev mode","body":"In dev mode : \\r\\ngetDerivedStateFromProps is not fired on state change but is fired on props change.\\r\\n\\r\\nIn prod mode : \\r\\ngetDerivedStateFromProps is fired on state change and on props change.\\r\\n\\r\\n**What is the expected behavior?**\\r\\ngetDerivedStateFromProps should fire on state change and on props change.\\r\\n\\r\\n\\"react\\": \\"16.10.2\\"\\r\\n","number":17025,"user":{"login":"Meshredded"},"state":"closed","created_at":"2019-10-05T22:16:33Z"},{"id":502972878,"title":"External tasks read non committed/work-in-progress props outside render phase","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nLikely a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn Concurrent mode, React can split rendering over multiple frames, external tasks (DOM event handlers, intervals ...) perform side effects and should always access committed props (Right?).\\r\\n\\r\\nBut in the linked sandbox example, a scheduled task (using `setInterval`) accessing `this.props` reads actually the work-in-progress props.\\r\\n\\r\\nThe issue happens with class Components, in render phase React mutates the props of the class instance\\r\\n\\r\\nhttps://github.com/facebook/react/blob/4c5698400f04bbc6d0b4bd766b0993d0bcb37609/packages/react-reconciler/src/ReactFiberClassComponent.js#L1042-L1045\\r\\n\\r\\nalso the following code indicates that the committed and work-in-progress fibers share the same class instance\\r\\n\\r\\nhttps://github.com/facebook/react/blob/4c5698400f04bbc6d0b4bd766b0993d0bcb37609/packages/react-reconciler/src/ReactFiber.js#L413\\r\\n\\r\\nIf React assigns pending props to the class instance but after the render work is interrupted for some reason, we yield back to the browser and we\'re now outside the render phase, but since both the current and WIP fibers share the same mutable instance, `this.props` will continue to reflect the props of the WIP. If a scheduled task reads `this.props` at this moment it\'ll see the WIP props while it should rather see the committed props.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem**\\r\\n\\r\\nsee https://codesandbox.io/s/bold-cache-ytud2\\r\\n\\r\\nThe example simulates some expensive work to force React to split the render work and yield back to the browser. Meantime a class component schedules an interval to send `this.props` to the external world: in this case we imperatively update the content of an external DOM (\'Parent.props: \' at the top of the screen) node with `this.props` to highlight the issue.\\r\\n\\r\\nSteps to reproduce the issue:\\r\\n \\r\\n- wait for the first render to complete \\r\\n\\r\\n- modify the `input` below `App` then click submit, this should propagate  new props to its child component `BusyChildren`\\r\\n\\r\\n- since `BusyChildren` does expensive work, it\'ll take some time until the new props are committed to the screen. But at the same time the interval task reads the pending props before the work is committed so the top external Dom node shows the work-in-progress props.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nFor class components, `this.props` should return only the committed props outside the render phase.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThe sandbox uses the latest version 16.10.0\\r\\n\\r\\nThe behavior is correct when we start in Sync mode using `React.render`\\r\\n","number":17024,"user":{"login":"yelouafi"},"state":"closed","created_at":"2019-10-05T14:51:29Z"},{"id":502951318,"title":"[DevTools] Display RegExp values in props/state","body":"Previously, when props/state contained a regexp, it was shown as an\\r\\nempty object. This commit adds regexps as values in need of special\\r\\nrehydration (like Symbols or TypedArrays), and display them as a user\\r\\nmight expect.\\r\\n\\r\\nThese values may be editable, but as regexps are not valid JSON it might\\r\\ndepart from the usual editing functionality, which may not be worth the\\r\\nhassle just to support regexps.\\r\\n\\r\\nBefore:\\r\\n![image](https://user-images.githubusercontent.com/1144615/66254187-64796780-e762-11e9-9dce-e100178ca344.png)\\r\\n\\r\\nAfter:\\r\\n![image](https://user-images.githubusercontent.com/1144615/66254160-1a908180-e762-11e9-8fb5-645fe129a971.png)\\r\\n","number":17023,"user":{"login":"Zirak"},"state":"closed","created_at":"2019-10-05T11:24:25Z"},{"id":502938535,"title":"Firefox: Autocomplete/Autofill not working","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nFirefox doesn\u2019t show any autofill suggestions on an input  field with type \\"text\\" as soon as you connect the state with the  attribute \\"value\\"\\r\\n\\r\\n**Reproduce**\\r\\nhttps://codesandbox.io/embed/material-demo-y5mlt \\r\\n\\r\\n* Open the provided sandbox example\\r\\n* Write test in both input fields\\r\\n* Press button\\r\\n* Write t in both text fields\\r\\n\\r\\n_Important:_ This works corretly in Chrome but not in Firefox!\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAutofill suggestions should be visible in Firefox too!\\r\\n\\r\\nAutofill is working (FF + Chrome) if value is handled by the browser\\r\\n\\r\\n      <input\\r\\n            id=\\"component-simple1\\"\\r\\n            autoComplete=\\"on\\"\\r\\n            onChange={handleChange}\\r\\n          />\\r\\n\\r\\nAutofill is NOT working (FF) if value is handled by React(!)\\r\\n\\r\\n        <input\\r\\n            id=\\"component-simple1\\"\\r\\n            autoComplete=\\"on\\"\\r\\n            onChange={handleChange}\\r\\n            value={name}\\r\\n          />\\r\\n\\r\\n**Some pictues which show the wrong behavior**\\r\\nIt is working as long as React does not handle the value with the state of the component (upper input field):\\r\\n![step01](https://user-images.githubusercontent.com/6314282/66252840-9d184180-e760-11e9-9801-46724c049d74.png)\\r\\n\\r\\nThe input field where React handles the value (`value={name}`) doesn\'t show autofill suggestions\\r\\n![step02](https://user-images.githubusercontent.com/6314282/66252884-f7b19d80-e760-11e9-969d-413c1aba6948.png)\\r\\n\\r\\n\\r\\n**Version**\\r\\n\\r\\nTech | Version\\r\\n-- | --\\r\\nReact | latest (see Sandbox)\\r\\nBrowser | Firefox 68.0.1(latest)\\r\\nOS | tested on Windows\\r\\n\\r\\n","number":17022,"user":{"login":"Hadsch"},"state":"closed","created_at":"2019-10-05T09:13:12Z"},{"id":502845368,"title":"Error: \\"Minified React error ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":17021,"user":{"login":"RyanFinney"},"state":"closed","created_at":"2019-10-04T21:08:38Z"},{"id":502806717,"title":"0.4 stable","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17020,"user":{"login":"kushavi2509"},"state":"closed","created_at":"2019-10-04T19:29:01Z"},{"id":502711727,"title":"[react-interactions] Add FocusTable colSpan support","body":"This PR adds support for `colSpan` on `FocusTable` cells. It works very much like how `<td colSpan={2}>` might work with the DOM. `colSpan` makes cells span a numerical number of columns, allowing for rows with a dynamic number of cells to continue to work.\\r\\n\\r\\nThis PR also removes the unnecessary `focusTableByID` and `id` logic, in favor of declarative nested tables (which compose better). Lastly, the `wrap` prop has been split into `wrapX` and `wrapY`, as per internal feedback.","number":17019,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-04T15:46:49Z"},{"id":502597121,"title":"Can\'t install react-test-renderer@16.10.2 because of scheduler@^0.16.2 dependency","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nCan\'t install react-test-renderer in latest version (16.10.2)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n1. run npm i react-test-renderer --save-dev\\r\\n2. get No matching version found for scheduler@^0.16.2 error\\r\\n\\r\\n**What is the expected behavior?**\\r\\nreact-test-renderer is installed\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nNot connected with React version","number":17018,"user":{"login":"arolonger"},"state":"closed","created_at":"2019-10-04T12:01:36Z"},{"id":502557538,"title":"synchronous setState makes manage-management w/ hooks very hard","body":"It\'s about the dreaded \\"zombie-child\\" problem, which is a known problem, but i would still like to open this issue in order to track it. It currently throws a major wrench into our projects at work (which all use mixed reconcilers).\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nI consider it a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe long explanation is here: https://kaihao.dev/posts/Stale-props-and-zombie-children-in-Redux\\r\\n\\r\\nIn short, when any dispatch, for instance via useState/useReducer.set(...), can cause an _immediate_ render pass, it allows leaf-components to render before their parents. Components that shouldn\'t even be rendering, because their parents would exclude them, now do render and access data which doesn\'t exist in the state model any longer. Rendering isn\'t deterministic and hierarchical any longer.\\r\\n\\r\\nDan Abramov acknowledges this behaviour here: https://twitter.com/dan_abramov/status/959507572951797761\\r\\n\\r\\nThe current solution that Sebastian Markb\xe5ge suggested is to wrap dispatches into batchedUpdates.\\r\\n\\r\\nBut that doesn\'t work in mixed-mode React, where multiple reconcilers are active. So the same component will work in one reconciler, but crash in another, unless the dispatch is wrapped into each batchedUpdates from each reconciler - which puts the burden onto the consumer of the component and makes the component platform dependent.\\r\\n\\r\\nThis problem affects all flex based state managers. Redux for instance. Some fail outright, some do implement batchedUpdates (like Redux), but they will all fail in mixed-mode.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\nhttps://github.com/react-spring/zustand/issues/64\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAs Dan Abramov himself said on Twitter, any dispatch should be async. But this was in feb 2018. Is there any news regarding this behaviour?\\r\\n\\r\\nThe churn outlined in the kaihao.dev article above, just to get simple state management, is almost overwhelming. Its conclusion is \\"Our hands are tied, there\'s no solution yet to be known.\\" I know this probably isn\'t a pressing issue, but i hope it can be prioritized.","number":17016,"user":{"login":"drcmda"},"state":"open","created_at":"2019-10-04T10:27:54Z"},{"id":502547950,"title":"[Suspense] Failing test for suspense config","body":"This causes a test to fail where I don\'t think it should. Issue: #16961\\r\\n","number":17015,"user":{"login":"onnovisser"},"state":"closed","created_at":"2019-10-04T10:06:15Z"},{"id":502544667,"title":"publish a component written by hooks to npm, but report Minified React error #321","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nno.\\r\\n**What is the current behavior?**\\r\\nlook this: <a href=\\"https://www.npmjs.com/package/react-week-time-range-picker\\">react-week-time-range-picker<a>.\\r\\n\\r\\nThis is a component written by react hooks. I run it normal when i develop it. However, when i `npm install react-week-time-range-picker` to test , the page report error **Minified React error #321;visit https://reactjs.org/docs/error-decoder.html?invariant=321 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.** \\r\\n\\r\\nI look for the solution almost two days, but i failed.\\r\\n\\r\\n1. My version is no problem\\r\\n2. I think the hooks call is correct\\r\\n3. I doubt it may be the third cause in the official documents\uff0cbut i test it with <a href=\\"https://reactjs.org/warnings/invalid-hook-call-warning.html#duplicate-react\\">official documents code</a>, it print true\u3002\\r\\n\\r\\nNow, i am muddled.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI hope who can help me\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n```js\\r\\n{\\r\\n  \\"react\\": \\"^16.10.2\\",\\r\\n  \\"react-dom\\": \\"^16.10.2\\"\\r\\n}\\r\\n```\\r\\n\\r\\nchrome 77.\\r\\n\\r\\nThank you!","number":17014,"user":{"login":"lizhongzhen11"},"state":"closed","created_at":"2019-10-04T09:59:06Z"},{"id":502518306,"title":"Time spent before rendering with a suspense config counts towards timeout","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen rendering with a suspense config, time spent before rendering appears to be subtracted from the timeout of the suspense config. If I spend 1 second before triggering an update with a suspense config with a timeout of 2 seconds, it takes only 1 second before the tree suspends.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n- [x] Open PR with failing test (#17015)\\r\\n- [x] Create CodeSandbox with example (https://codesandbox.io/s/suspense-config-test-sw3fn)\\r\\nIn the sandbox, any time spent before click \\"Next page\\", reduces the time the pending state is shown before suspending. If you wait longer than 2 seconds, it immediately suspends.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI would expect the timeout of the suspense config to count from when the update is triggered.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nAny version that allows rendering with a suspense config\\r\\n","number":17013,"user":{"login":"onnovisser"},"state":"closed","created_at":"2019-10-04T09:03:49Z"},{"id":502482877,"title":"chore: upgrade jsdom","body":"Following up on #15778, this is needed before being able to upgrade to Jest 25, which will have some significant performance improvements. Some tests for `style` properties are failing though, and I have no idea if it\'s due to jsdom or the tests themselves. I have some hope you\'ll know what\'s up yourselves \ud83e\udd1e  \\r\\n\\r\\nI tried upgrading to the Jest 25 alpha btw, and it fails in the same way, so if it\'s an issue with jsdom itself, it has not been fixed for jsdom@15 and it\'d be great to report it to them.\\r\\n\\r\\n/cc @threepointone ","number":17012,"user":{"login":"SimenB"},"state":"closed","created_at":"2019-10-04T07:44:24Z"},{"id":502360042,"title":"Revert \\"Hide Portals When they aren\'t wrapped in a host component when Parent Suspends\\"","body":"Reverts facebook/react#16992","number":17011,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-10-04T00:15:07Z"},{"id":502324009,"title":"[Scheduler Profiler] Use microsecond precision","body":"The `performance.now` returns a timestamp in milliseconds as a float. The browser has the option to adjust the precision of the float, but it\'s usually more precise than a millisecond. However, this precision is lost when the timestamp is logged by the Scheduler profiler, because we store the numbers in an Int32Array.\\r\\n\\r\\nThis change multiplies the millisecond float value by 1000, giving us three more degrees of precision.","number":17010,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-03T22:10:34Z"},{"id":502315945,"title":"Focus on undocked DevTools window on element click","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI don\'t believe this is a bug, but I wouldn\'t necessarily call this a feature. \\r\\n\\r\\nRather just how the React Components Tab compares to chrome\'s Elements Tab node selector behavior.\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf I have an undocked DevTools: \\r\\n\\r\\nElements Tab:\\r\\n- Using the node selector tool, when I select and click on a node the devtools comes into focus with the node selected. \\r\\n\\r\\nComponents Tab: \\r\\n- Using the component\'s node selector tool, when I select and click on a node the devtools doesn\'t come into focus -- though the node is properly selected.\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nI made a screen recording of the current behavior: \\r\\nhttps://www.loom.com/share/ceeb458681774a9ebadc82732546ea54\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIt\'d be great if the Component\'s element select tool would bring the undocked devTools into focus when selecting node.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nDevTools version: 4.1.3 (9/30/2019)\\r\\nBrowser: Chrome Version 77.0.3865.75 \\r\\nOS: OSX 10.14.5\\r\\n\\r\\nI don\'t recall if this worked in the previous React DevTools.\\r\\n\\r\\n---\\r\\n\\r\\nIf this is a desired behavior I\'d like to help contribute. If so, besides the contributing guidelines what files/docs would be a good to start tackling this? \\r\\n","number":17009,"user":{"login":"snesjhon"},"state":"closed","created_at":"2019-10-03T21:48:26Z"},{"id":502310985,"title":"[eslint-plugin-react-hooks] Using typeof adds variable to list of necessary dependencies","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf you use Typescript\'s `typeof` keyword inside of a hook that `exhaustive-deps` watches for, it\'ll add the variable you `typeof`\'d to the list of expected dependencies. However, there\'s no runtime effect to typeof, it\'s just for typing. Here\'s a test case where it\'ll warn you:\\r\\n\\r\\n```ts\\r\\nconst [state, setState] = useState(true);\\r\\n\\r\\nconst callback = useCallback((newState: typeof state) => {\\r\\n  setState(newState);\\r\\n}, []);\\r\\n```\\r\\n\\r\\nresults in\\r\\n\\r\\n> React Hook useCallback has a missing dependency: \'state\'. Either include it or remove the dependency array.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`state` should not be an expected dependency\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`eslint-plugin-react-hooks@1.7.0`","number":17008,"user":{"login":"wbobeirne"},"state":"open","created_at":"2019-10-03T21:35:29Z"},{"id":502257604,"title":"[Patch Release] v16.10.2","body":"Patch release branch for v16.10.2. Based on v16.01: https://github.com/facebook/react/pull/16944.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\nRelease candidate version: `0.0.0-4ab6305f6`\\r\\n\\r\\n- [x] Confirm that react-native-web works https://github.com/necolas/react-native-web/issues/1443\\r\\n\\r\\n## Changelog\\r\\n\\r\\n* Fix regression in react-native-web by restoring order of arguments in event plugin extractors ([@necolas](https://github.com/necolas) in [#16978](https://github.com/facebook/react/pull/16978))\\r\\n","number":17007,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-10-03T19:37:26Z"},{"id":502208456,"title":"[EnterLeaveEventPlugin] Fix bug when dealing with unhandled DOM nodes","body":"This PR is a follow up to https://github.com/facebook/react/pull/16928, where that PR fixed one class of bug, but also introduced another issue whilst doing so.\\r\\n\\r\\nThis PR introduces an alternative fix that avoids the issue introduced in that PR. Notably, when a DOM node has not been handled by React (it hasn\'t got an internal handle to a fiber), then the target fiber ends up not matching 1:1, meaning the logic in https://github.com/facebook/react/pull/16928 is not quite accurate as `nativeEventTarget !== fromNode` is a valid code path. This PR fixes it by tracking the `nativeEvent` between calls to this EnterLeaveEventPlugin \u2013 to ensure we don\'t duplicate enter events for the same native event object.\\r\\n\\r\\nI\'ve added a test case and validated it fixes the issue internally too.","number":17006,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-03T17:51:54Z"},{"id":502182492,"title":"[React-DevTools] Support Shift+Enter to go to previous search result","body":"I added support for Shift + Enter while the search bar is in focus in the DevTools, it\'s a widely used shortcut to go to the previous search results instead of the next one.\\r\\n\\r\\nAs it wasn\'t a big change, I didn\'t create an issue, hope that\'s ok.","number":17005,"user":{"login":"Bo-Duke"},"state":"closed","created_at":"2019-10-03T16:55:45Z"},{"id":502176387,"title":"[Selective Hydration] ReactDOM.unstable_scheduleHydration(domNode)","body":"Adds an API to explicitly prioritize hydrating the path to a particular  DOM node without relying on events to do it.\\r\\n\\r\\nThe API uses the current scheduler priority to schedule it. For the same priority, the last one wins. This allows a similar effect as continuous events. This is useful for example to hydrate based on scroll position, or prioritize components that will upgrade to client-rendered-only content.\\r\\n\\r\\nI considered having an API that explicitly overrides the current target(s). However that makes it difficult to coordinate across components in an app.\\r\\n\\r\\nThis just hydrates one target at a time but if it is blocked on I/O we could consider increasing priority of later targets too.","number":17004,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-10-03T16:43:17Z"},{"id":502167180,"title":"DevTools not properly shutting down between reloads in some cases","body":"Noticed this while testing the recently added \\"highlight updates\\" feature. It seems like relying on the content script\'s \\"disconnect\\" to shutdown things is too late, and we seem to be leaving at least an `Agent` (possibly more) connected.\\r\\n\\r\\nI think we may want to add some cleanup code to our initialization path (of the backend) to handle the case where a previous backend instance didn\'t get to finish shutting down.","number":17003,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-10-03T16:24:08Z"},{"id":502022727,"title":"Gramatical mistakeUpdate README.md","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":17001,"user":{"login":"akshayakshay30"},"state":"closed","created_at":"2019-10-03T12:01:30Z"},{"id":501979030,"title":"[react-interactions] Remove context.setTimeout & context.clearTimeout","body":"This PR aims at reducing some of the size of the new responder event system. We have the concept of `setTimeout` and `clearTimeout` on responder context to handle async timers. This was used a while ago, but we removed any usage it from the event responder and thus have no real need to keep the code around anymore.","number":17000,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-03T10:23:03Z"},{"id":501974064,"title":"Update transform-object-assign-require.js","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16999,"user":{"login":"abmrifat1"},"state":"closed","created_at":"2019-10-03T10:11:59Z"},{"id":501964967,"title":"correct effect tag in LayoutEffect","body":"Layout effect should use layout effect tag both for create and destroy rather than Mutation tag","number":16998,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-10-03T09:53:11Z"},{"id":501934181,"title":"[react-interactions] Repurpose React a11y modules","body":"This PR mostly just re-labels and re-purposes some of the accessibility modules and the components in them. It comes from internal feedback that some of the names were confusing and some of the components felt misaligned for their real main benefit. Notably: folks only cared for using the `FocusManager` component for handling focus containment, and didn\'t see what it really had to do with managing focus other that that. Based all this feedback, the following changes have been made:\\r\\n\\r\\n- `FocusManager` -> `FocusContain`\\r\\n- `FocusContain` component now only handles containment, and requires a scope be passed to the component via `tabScope`. The documentation has been updated to also reflect this.\\r\\n- `FocusControl` -> `FocusManager` as people mentioned that the set of functions from this module are essentially management helpers. The docs have also been updated to reflect this.\\r\\n- `FocusList` -> `FocusGroup`","number":16997,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-03T08:49:38Z"},{"id":501910808,"title":"Own","body":"Remove own\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16996,"user":{"login":"Swapnil7000"},"state":"closed","created_at":"2019-10-03T07:57:28Z"},{"id":501896623,"title":"Hooks for Class Based Components","body":"I have been thinking a lot about hooks and I want to share my idea on a possible addition that I believe will simplify hook logic -- adding Hooks to classes. I will be able to best explain my idea by giving out an example:\\r\\n\\r\\n```jsx\\r\\nconst SomeComponent = ({ props }) => {\\r\\n   const [state, setState] = useState(\'test\');\\r\\n   const someFn = useCallback(() => {\\r\\n       ...\\r\\n   }, [props.name]);\\r\\n   useEffect(() => {\\r\\n      someFn();  \\r\\n   }, [state]);\\r\\n\\r\\n   ...\\r\\n}\\r\\n```\\r\\n\\r\\nIn the code above, we are using hooks to essentially imitate class behaviors. Additionally, because the component is a function, we need to add things like `useCallback`; so that, the function does not get recreated. However, these things have been solved in classes for a very long time. Even React\'s class components solved these problems. What if this kind of API is added to React:\\r\\n\\r\\n```jsx\\r\\nclass SomeComponent extends React.NewComponent {\\r\\n    someFn = () => {\\r\\n        // use this.props here\\r\\n    }\\r\\n\\r\\n    state = new State(\'test\');\\r\\n    effect1 = new Effect(this.effectFn, [this.state]);\\r\\n\\r\\n    effectFn = () => {\\r\\n        const val = this.state.getValue();\\r\\n        someFn();\\r\\n        // or state.setValue(\'some other value\')\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        // you can use this.state.getValue() here\\r\\n        return (\\r\\n\\r\\n        );\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nWhat problem does this solve? This eliminates the rule that all hooks have to be at the top of the function. This is because classes already have this behavior implemented. It is intuitive --- you can\'t use loop or conditions outside the class methods. Secondly, this eliminates hooks such as `useCallback` or `useRef` (for non DOM related things) because functions are not recreated during every render.\\r\\n\\r\\nWhat about dependencies in Effect? For dependencies, if a State instance is passed, the Effect hook will check if it is changed using different means (e.g State can have a \\"stale\\" member variable that gets updated from reconciler; then the effect uses that variable to check state. Or Effect can store the dependencies and do the normal checking using `state.getValue`).\\r\\n\\r\\nWhat about custom hooks? React provides a \\"CustomHook\\" base class that developers can use. So, let\'s say I want to write a hook to fetch data:\\r\\n\\r\\n```jsx\\r\\nclass FetchHook extends React.CustomHook {\\r\\n    loading = new State(false);\\r\\n    data = new State([]);\\r\\n    error = new State(null);\\r\\n\\r\\n    effect = new Effect(this.effectFn);\\r\\n\\r\\n    effectFn = async () => {\\r\\n        try {\\r\\n            this.loading.setValue(true);\\r\\n            const response = await fetch(this.props.url); // i\'ll talk about this in a bit\\r\\n            const data = await response.json();       \\r\\n            this.loading.setValue(false);\\r\\n            this.data.setValue(data);\\r\\n        } catch (e) {\\r\\n            this.loading.setValue(false);\\r\\n            this.error.setValue(e);            \\r\\n        }\\r\\n    }\\r\\n\\r\\n    getLoading() {\\r\\n         return this.loading.getValue();\\r\\n    }\\r\\n\\r\\n    getData() {\\r\\n         return this.data.getValue();\\r\\n    }\\r\\n\\r\\n    getError() {\\r\\n         return this.error.getValue();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nThen, we can just add it to our components:\\r\\n\\r\\n```jsx\\r\\nclass SomeComponent extends React.NewComponent {\\r\\n    fetch = new FetchHook(someUrl);\\r\\n    render() {\\r\\n          const loading = this.fetch.getLoading();\\r\\n          const error = this.fetch.getError();\\r\\n          const data = this.fetch.getData();\\r\\n          // ...\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nReact.Hook base class (React.CustomHook and React\'s own hooks are derived from it) has a function called `update` or `run` that initializes all the necessary things for the hooks. The reconciler can check whether the class field is an instance of React.Hook to do the necessary updates etc.\\r\\n\\r\\n**Why?**\\r\\n\\r\\nIn my opinion, combined with Hooks, React\'s composability is an implementation of [Entity-Component-System](https://en.wikipedia.org/wiki/Entity_component_system). Game Developers use this technique to set up entities (e.g a Tree or a Vehicle) in their game world. We are essentially using the same technique to set up entities (React Components) for UI. If we go on the comparison route, this is how I see it: Entity = React Component, Hooks = Components, System = React Reconciler + Renderer.\\r\\n\\r\\nIn general, ECS systems really shine when using classes. Writing components and assigning them to entities feels natural. We are using all the class features (class fields, methods, inheritance) to abstract away what is going on behind the scenes. However, with current state of using hooks with functions, React essentially created these class features in for functions. For example, a function is never recreated in a class. So, we need a `useCallback` to imitate the same behavior in function components. Same goes for `useRef` (excluding ref-ing to DOM) to imitate class member variables.\\r\\n\\r\\nIn terms of developer experience, using objects instead of functions have one major difference. At least for me, this is how it was when I was using class components. When using class member variables that are only defined (not called), it makes it simpler to think in React because I can assume that React calls these functions. If they are Hook objects (non-existent yet), I can assume that React calls their respective functions. In these two instances, React is doing the work on the components. However, when using hooks as functions, the flow is reversed: we are telling React what to do instead of letting React do what it wants based on our component logic. It almost looks like we are writing into React instead of just using React. This is something that I experienced when trying to think in Hooks. \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":16995,"user":{"login":"GasimGasimzada"},"state":"closed","created_at":"2019-10-03T07:22:56Z"},{"id":501752895,"title":"Profiler calling onRender for component updates outside of the Profiler tree","body":"[From the Profiler docs](https://reactjs.org/docs/profiler.html#onrender-callback):\\r\\n\\r\\n> The Profiler requires an onRender function as a prop. React calls this function any time a component within the profiled tree \u201ccommits\u201d an update.\\r\\n\\r\\nHowever, given:\\r\\n\\r\\n```jsx\\r\\nimport React from \'react\'\\r\\nimport ReactDOM from \'react-dom\'\\r\\n\\r\\nfunction Counter() {\\r\\n  const [count, setCount] = React.useState(0)\\r\\n  const increment = () => setCount(c => c + 1)\\r\\n  return <button onClick={increment}>{count}</button>\\r\\n}\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div>\\r\\n      <React.Profiler\\r\\n        id=\\"counter\\"\\r\\n        onRender={() => console.log(\'called\')}\\r\\n      >\\r\\n        <div>\\r\\n          Profiled counter\\r\\n          <Counter />\\r\\n        </div>\\r\\n      </React.Profiler>\\r\\n      <div>\\r\\n        Unprofiled counter\\r\\n        <Counter />\\r\\n      </div>\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nReactDOM.render(<App />, document.getElementById(\'root\'))\\r\\n```\\r\\n\\r\\nI\'m getting a log when I click on the unprofiled counter.\\r\\n\\r\\nReproduction: https://codesandbox.io/s/react-codesandbox-tnff6\\r\\n\\r\\nAm I misunderstanding this API, or is this a bug?","number":16994,"user":{"login":"kentcdodds"},"state":"closed","created_at":"2019-10-02T22:11:37Z"},{"id":501749413,"title":"Add DevTools visualization for SSR hydration","body":"This feature relates to several new React APIs: concurrent mode, suspense, and server rendering / hydration\\r\\n\\r\\n# Background info\\r\\nWhen hydrating server-rendered content, React starts working on the outermost Suspense boundary and works its way in. During hydration, the server rendered HTML isn\'t interactive. React records events to replay them once content becomes interactive- (but that doesn\'t actually happen until React finishes work on the nearest boundary and commits it). React may also reprioritize the order in which boundaries are processed (so that boundaries with pending events get processed sooner).\\r\\n\\r\\nThis general process can be hard to reason about and debug, because much of it is not observable visually (beyond some interactions potentially feeling more laggy than expected).\\r\\n\\r\\nDevTools already provides some visual overlays (e.g. which elements were rendered by the currently selected Component, [\\"highlight updates\\"](https://github.com/facebook/react/pull/16989)). Perhaps DevTools could help here too by visualizing which boundaries in the tree have been hydrated.\\r\\n\\r\\n# Visualizing hydration progress\\r\\n1. When React begins hydrating a new root<sup>1</sup> DevTools will show a visual overlay<sup>2</sup> that covers the entire DOM element container.\\r\\n1. As React hydrates and commits each new level of Suspense boundaries, DevTools will draw the overlay to only cover the not-yet-hydrated boundaries.\\r\\n1. Once hydration is completed, all overlays will be cleared<sup>3</sup>.\\r\\n\\r\\nThis feature would be opt-in via a new DevTools setting.\\r\\n\\r\\n<sup>1</sup> This suggests a new React-to-DevTools hook to inform DevTools when hydration starts.\\r\\n\\r\\n<sup>2</sup> This overlay would nee to be designed. Perhaps some combination of semi-transparent with stripes or bars so that it is high contrast enough to be seen.\\r\\n\\r\\n<sup>3</sup> Because the data required to draw these overlays is essentially just a timestamp and a set of rects, some form of replay might be a nice addition.\\r\\n\\r\\n# Special cases\\r\\nIt could be helpful to highlight a couple of special cases by temporarily showing a different style overlay:\\r\\n\\r\\n* **Client rendered content inside of a server rendered fallback.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2030-L2039)) In some cases, the server rendered content may be a forced fallback that gets filled in with client rendered content.\\r\\n* **React can\'t complete hydration fast enough to process a client-side update.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2064-L2074)) In this case, React ends up deleting the server-rendered content and replacing it with client rendered content. For example, a layout effect may set state on an ancestor that updates context. This update is synchronous (because it comes from within a layout effect) so it immediately expires.\\r\\n\\r\\nI don\'t know if the above cases can be reliably detected by DevTools at present. They may require additional information (or an additional React-to-DevTools hook).\\r\\n\\r\\nThe following case does **not** need to be highlighted because it is not a deopt:\\r\\n* **Server rendered content removed before hydration.** In some cases, server rendered content is thrown away before hydration completes because of a user interaction. For example, if the user navigates to a new page before the initial page has finished hydrating.","number":16993,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-10-02T22:01:29Z"},{"id":501748415,"title":"Hide Portals When they aren\'t wrapped in a host component when Parent Suspends","body":"Currently, when a node suspends, if its subtree contains a portal, the portal is not hidden. This hides portals in the subtree when it\'s not wrapped in a host component .","number":16992,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-10-02T21:58:51Z"},{"id":501744972,"title":"Add test that ReactNativeRt can create portal","body":"Add tests for ReactNativeRTManager","number":16991,"user":{"login":"n-filatov"},"state":"closed","created_at":"2019-10-02T21:49:53Z"},{"id":501734310,"title":"React is slow when unmount 1000 components on page","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen unmount 1000 components. It takes more than 2 seconds to finish.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should just throw the whole container node that contains these 1000 components without doing any diffing.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16. This is something with the way react-fiber works I think. ","number":16990,"user":{"login":"dtuyenle"},"state":"closed","created_at":"2019-10-02T21:23:42Z"},{"id":501666586,"title":"Added trace updates feature (DOM only)","body":"Resolves #16437\\r\\n\\r\\n## Caveats\\r\\n* It is only enabled in the browser extension (and `react-devtools-inline` NPM package) for now, so it only supports React DOM.\\r\\n* It is not implemented for legacy renderers (v15) although it could be added by someone if they wanted to submit a follow up PR\\r\\n\\r\\n## Demo\\r\\n![Trace updates demo](https://user-images.githubusercontent.com/29597/66076620-13276900-e513-11e9-9c0b-7c1dfcb184ff.gif)\\r\\n","number":16989,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-10-02T18:56:24Z"},{"id":501586885,"title":"React devtools blank (standalone version)","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n![image](https://user-images.githubusercontent.com/1410608/66061174-96fb4880-e547-11e9-9623-0f1075bc78f6.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n1. Open iOS simulator\\r\\n2. turn on debugging\\r\\n3. open react-devtools\\r\\n4. refresh iOS simulator\\r\\n\\r\\n**What is the expected behavior?**\\r\\nComponents tree is visible.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact-native@0.61.1\\r\\nOS: MacOS Mojave 10.14.6\\r\\n\\r\\n@bvaughn ","number":16988,"user":{"login":"sshmyg"},"state":"open","created_at":"2019-10-02T16:09:34Z"},{"id":501488522,"title":"Problem with accessibility - async setting attributes and inner content ","body":"React async setting attributes and inner content that makes problems with correct voicing in VoiceOver. For example, I have the case when we set aria-pressed and change text, VoiceOver reads that as \\"select, Press, toggle button\\" instead of \\"select, unpress, toggle button\\".\\r\\n\\r\\nHow it works on React: https://codesandbox.io/s/quiet-microservice-hb1f9?fontsize=14\\r\\nHow it would work(JS example): https://codesandbox.io/s/vigilant-water-h00kj?fontsize=14\\r\\n\\r\\nMac OS v10.14.6\\r\\nReact v.16.8.6","number":16987,"user":{"login":"ksmolniy"},"state":"closed","created_at":"2019-10-02T13:26:55Z"},{"id":501468431,"title":"Maybe checkbox can be returned next to the boolean state values?","body":"The checkbox was very convenient for switching the boolean variable value","number":16986,"user":{"login":"inoyakaigor"},"state":"closed","created_at":"2019-10-02T12:49:28Z"},{"id":501377990,"title":"ReactDOM.hydrate could provide a diff to help solve SSR issues","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\na feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen I call ReactDOM.hydrate I can get a warning when the generated DOM is not 100% the same on the client and the server.\\r\\nIt is impossible to identify where the difference is from this warning.\\r\\nThe issue is that I don\'t have a way to get the generated DOM on the client before everything starts to run componentDidMount logic and update the DOM even more.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt would be easier to perform diffs between server generated html and client html if we could get the client html produced during the first render.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact: 16.8.6\\r\\nreact-dom: 16.8.6\\r\\n\\r\\n**Extra note:**\\r\\nI hope I didn\'t missed something obvious, if there\'s already a way I couldn\'t find it in the docs","number":16985,"user":{"login":"VincentCharpentier"},"state":"closed","created_at":"2019-10-02T09:29:13Z"},{"id":501349959,"title":"remove unused code in commitBeforeMutationLifeCycles","body":"Since `Snapshot` is **only for class component**, and now we only call `commitBeforeMutationLifeCycles` when `(nextEffect.effectTag & Snapshot) !== NoEffect`, that means  we only call `commitBeforeMutationLifeCycles` **for class component**.\\r\\n\\r\\nSo, I think we can remove other fiber tag logic in `commitBeforeMutationLifeCycles`","number":16984,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-10-02T08:30:45Z"},{"id":501343582,"title":"remove unused code in commitBeforeMutationLifeCycles","body":"Since `Snapshot` is **only for class component**, and now we only call `commitBeforeMutationLifeCycles` when `(nextEffect.effectTag & Snapshot) !== NoEffect`, that means  we only call `commitBeforeMutationLifeCycles` **for class component**.\\r\\n\\r\\nSo, I think we can remove other fiber tag logic in `commitBeforeMutationLifeCycles`","number":16983,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-10-02T08:16:21Z"},{"id":501254246,"title":"Update create-react-app note","body":"Update the warning for create-react-app users, since eslint-plugin-react-hooks was added in react-scripts 3.0.0.","number":16982,"user":{"login":"t73liu"},"state":"closed","created_at":"2019-10-02T03:29:14Z"},{"id":501230729,"title":"updated no haste to Es6 module","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16981,"user":{"login":"Wylie-S"},"state":"closed","created_at":"2019-10-02T01:48:44Z"},{"id":501223648,"title":"React DevTools recording commit without any component re-render","body":"I\'m struggling to make an isolated example of this, but the app where I found this is pretty simple so hopefully it\'s not too challenging to track down.\\r\\n\\r\\nSo I was profiling https://the-react-bookshelf.netlify.com (locally) and got this when I clicked on the \\"login\\" button:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1500684/66011343-fe4dc580-e47f-11e9-9220-50ba884640f3.png)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1500684/66011358-0dcd0e80-e480-11e9-80fb-86c0f2196ef9.png)\\r\\n\\r\\nThe fact that there was no profile data for a commit is interesting. Each commit should be associated to a state update somewhere in the tree, and wherever that happened should trigger at least one component to re-render, but that didn\'t appear to happen here.\\r\\n\\r\\nI also verified that I don\'t have any components filtered out:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1500684/66011428-57b5f480-e480-11e9-9e66-7cf86f8ba48f.png)\\r\\n\\r\\nAnd I didn\'t filter any commits either:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1500684/66011433-5ab0e500-e480-11e9-97a8-be202351870d.png)\\r\\n\\r\\nHere\'s the exported profile data:\\r\\n\\r\\nhttps://gist.github.com/kentcdodds/dbff66043653333cd22cb9261a08550b\\r\\n\\r\\nAnd here\'s the repo where you can pull it down and reproduce yourself: https://github.com/kentcdodds/bookshelf. The component we\'re looking at is here: https://github.com/kentcdodds/bookshelf/blob/master/src/unauthenticated-app.js\\r\\n\\r\\nSorry I can\'t give a more direct reproduction.","number":16980,"user":{"login":"kentcdodds"},"state":"open","created_at":"2019-10-02T01:20:38Z"},{"id":501203315,"title":"Remove unneeded console.log calls","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16979,"user":{"login":"vitoriasviana"},"state":"closed","created_at":"2019-10-01T23:57:57Z"},{"id":501179517,"title":"Move eventSystemFlags to last argument in event plugin extractors","body":"Fix for https://github.com/necolas/react-native-web/issues/1443","number":16978,"user":{"login":"necolas"},"state":"closed","created_at":"2019-10-01T22:33:12Z"},{"id":501162514,"title":"Invariant Violation: Invalid hook call only for \\"Apple Mail\\" browser","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nSeeing the following error message in our Sentry logs.\\r\\n\\r\\n```\\r\\nInvariant Violation: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\r\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\r\\n2. You might be breaking the Rules of Hooks\\r\\n3. You might have more than one copy of React in the same app\\r\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\\r\\n  at N (/react@16.8.6/umd/react.production.min.js:9:413)\\r\\n  at q (/react@16.8.6/umd/react.production.min.js:10:177)\\r\\n  at m (/react@16.8.6/umd/react.production.min.js:17:159)\\r\\n  at useContext (/react@16.8.6/umd/react.production.min.js:30:482)\\r\\n  ...\\r\\n```\\r\\n\\r\\nThe browser is always some variant of \\"Apple Mail\\", such as `Apple Mail 605.1.15`\\r\\n\\r\\nWe haven\'t been able to reproduce this, so I\'m unsure of what\'s causing these issues.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nHaven\'t been able to reproduce, only going off what\'s being reported to Sentry.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNo errors.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.6, started happening as soon as we started using hooks in our codebase. Haven\'t seen any issues with any other browsers.","number":16977,"user":{"login":"bradtgmurray"},"state":"closed","created_at":"2019-10-01T21:44:56Z"},{"id":501127860,"title":"Bug: child.type no longer maintains function equality","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen I map over `props.children` to figure out whether or not a child is of a particular type, the function reference is no longer the same.\\r\\n\\r\\nThis is a regression between 16.9.0 and 16.10.0, and it shows up at least when using Gatsby. It does not, however, show up on the client side. Perhaps it has something to do with the server renderer?\\r\\n\\r\\nHere\'s a reproduction of the code leading to the bug:\\r\\n\\r\\n[Demo where it\'s working in 16.9.0](https://codesandbox.io/s/gatsby-starter-default-bmf6y)\\r\\n[Demo where it\'s not working anymore in 16.10.0](https://codesandbox.io/s/gatsby-starter-default-3ypf0)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'d expect the following to work the same in 16.9.x and 16.10.x\\r\\n\\r\\n```js\\r\\nfunction Menu(props) { return <div className=\\"menu\\">{props.children}</div>; }\\r\\nfunction MenuItem(props) {\\r\\n  const hasSubMenu = React.Children.toArray(props.children).some(\\r\\n    child => child.type === Menu // \u2b05this check no longer works\\r\\n  );\\r\\n\\r\\n  // do some logic with hasSubMenu\\r\\n  \\r\\n  return props.children;\\r\\n}\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nBroken in 16.10.0 and 16.10.1 - works in 16.9.0 at least - haven\'t tried with lower versions.","number":16976,"user":{"login":"selbekk"},"state":"closed","created_at":"2019-10-01T20:28:24Z"},{"id":501018473,"title":"React functional component is taking snapshot of state at the time of registering handler on websocket","body":"react functional component is taking snapshot of usestate at the time of subscription.\\r\\n\\r\\nFor ex. PFB code.\\r\\n\\r\\nIf i click setSocketHandler button and then press setWelcomeString button. Now if i receive message over socket when i log welcomestring variable it is empty even thpugh i set it buttonclicked function.\\r\\n\\r\\nBut if i click setWelcomeString button first and then click setSocketHandler button. Now if i receive message on socket Welcome is getting logged on console.\\r\\n\\r\\nI have seen same behaviour in project so just created this simple app to prove.\\r\\n\\r\\nIf i use class component which is commented below.. everything works fine.\\r\\n\\r\\nSo my question is why react functional component is working on a state at the time of reg and not on actual state at the time message is received.\\r\\n\\r\\nCant we use state variables in functional component in callbacks?\\r\\n\\r\\nThis is very weird. How to make it work in functional component correctly.\\r\\n\\r\\nPFB code:\\r\\n\\r\\n```js\\r\\nimport React, { useEffect, useState } from \\"react\\";\\r\\nimport logo from \\"./logo.svg\\";\\r\\nimport \\"./App.css\\";\\r\\nconst io = require(\\"socket.io-client\\");\\r\\nconst socket = io.connect(\\"http://localhost:3000/\\");\\r\\n\\r\\nconst App: React.FunctionComponent = () => {\\r\\n  const [welcomeString, setWelcomeString] = useState(\\"\\");\\r\\n\\r\\n  const buttonCliecked = () => {\\r\\n    console.log(\\"clocked button\\");\\r\\n    setWelcomeString(\\"Welcome\\");\\r\\n  };\\r\\n\\r\\n  const onsockethandlerclicked = () => {\\r\\n    console.log(\\"socket handler clicked\\");\\r\\n    socket.on(\\"out\\", () => {\\r\\n      console.log(\\"Recived message\\");\\r\\n      console.log(welcomeString);\\r\\n    });\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <header className=\\"component-header\\">User Registration</header>\\r\\n      <label>{welcomeString}</label>\\r\\n      <button onClick={buttonCliecked}>setWelcomeString</button>\\r\\n      <button onClick={onsockethandlerclicked}>setSocketHandler</button>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\n/*class App extends React.Component {\\r\\n\\r\\n    constructor(props) {\\r\\n        super(props);\\r\\n        this.state = {\\r\\n            welcomeString:\\"\\"\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    buttonCliecked = () => {\\r\\n        console.log(\\"clocked button\\");\\r\\n        this.setState({ welcomeString:\\"Welcome\\"})\\r\\n    }\\r\\n\\r\\n\\r\\n    onsockethandlerclicked = () => {\\r\\n        console.log(\\"socket handler clicked\\");\\r\\n        socket.on(\'out\', () => {\\r\\n            console.log(\\"Recived message\\")\\r\\n            console.log(this.state.welcomeString);\\r\\n        });\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <header className=\\"component-header\\">User Registration</header>\\r\\n                <label>{this.state.welcomeString}</label>\\r\\n                <button onClick={this.buttonCliecked}>setwelcomestring</button>\\r\\n                <button onClick={this.onsockethandlerclicked}>setSocketHandler</button>\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}*/\\r\\n\\r\\nexport default App;\\r\\n```","number":16975,"user":{"login":"sidvanarse"},"state":"closed","created_at":"2019-10-01T16:47:54Z"},{"id":501010230,"title":"Add more descriptive error when a function call is passed to use memo","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/22530815/65981398-9d51cd80-e43e-11e9-9963-58bd1b1f83ad.png)\\r\\n\\r\\nCurrently if you accidentally pass a function call to useMemo instead of a function reference, you get an error like the one above, which doesn\'t really point a dev in the right direction.\\r\\n\\r\\n```javascript\\r\\n// right:\\r\\nuseMemo(() => calculate(numbers), [numbers])\\r\\n\\r\\n// wrong\\r\\nuseMemo(calculate(1,2), [numbers]) // => throws \'nextCreate is not a function\'\\r\\n```\\r\\n\\r\\nI\'ve added an invariant warning if anything other than a function is passed to `useMemo`","number":16974,"user":{"login":"mattfwood"},"state":"open","created_at":"2019-10-01T16:31:06Z"},{"id":500967885,"title":"Fixing grammatical errors in error message","body":"Fixing a small grammatical error in the error message, neither/nor clause and that/which confusion.\\r\\n","number":16973,"user":{"login":"RaneWallin"},"state":"closed","created_at":"2019-10-01T15:18:15Z"},{"id":500957815,"title":"Redundant re-rendering even though setting the same state (with useState hook)","body":"Looks like a small bug in redundant re-rendering of the component even though the state hasn\'t changed:\\r\\n\\r\\n[Demo](https://codesandbox.io/s/elastic-hypatia-63rf5)\\r\\n\\r\\nExplanation:\\r\\nCall `useState(1)`\\r\\nIn an event handler call `setState(2)` 3 times\\r\\n\\r\\nActual behavior:\\r\\nThe first setState re-renders, the second one also re-renders, and the third one doesn\'t.\\r\\n\\r\\nExpected behavior:\\r\\nThe first setState re-renders, the second and third ones don\'t re-render.\\r\\n\\r\\nReact Version: 16.9, 16.8.X\\r\\nBrowser: Chrome\\r\\nHappens also on production builds\\r\\n\\r\\nI know it\'s not really a bug because we shouldn\'t really care about re-renders, but looks like a code smell that might point to other problems\\r\\n","number":16972,"user":{"login":"adamkleingit"},"state":"closed","created_at":"2019-10-01T15:01:55Z"},{"id":500898284,"title":"[react-interactions] Add allowModifiers flag to FocusList + FocusTable","body":"This PR adds the `allowModifiers` flag to the `FocusList` and `FocusTable` components. This PR also changes the default behaviour for using arrow keys with modifier keys (they\'re now no-ops). I also moved some of the test code into a different module relating to `emulateBrowserTab` as per a follow up to @necolas\'s feedback.","number":16971,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-10-01T13:31:38Z"},{"id":500818995,"title":"Design decision: keep defaultProps for functional components","body":"There are use cases where default props create useful API.\\r\\n\\r\\n- Since default props are a static property we can take the default prop and use in another component `Component.defaultProps.something` or in a unit test. \\r\\n- There is no way to take default values from function default values.  \\r\\n\\r\\nIn a recent article, I have an example that is based on default props and styled-components/emotion. // scroll down to the section `React and Typescript | Example`\\r\\nhttps://medium.com/ableneo/best-practices-for-javascript-projects-4b0dd7aaf810\\r\\n\\r\\n\\r\\nIf default props would be removed then there will workaround in a pure javascript way but I would prefer to keep the default props as is since it would make the function unpure.\\r\\n\\r\\n```\\r\\nconst defaultProps = {\\r\\n\\tWrapper: styled.div``,\\r\\n};\\r\\n\\r\\ntype Props = typeof defaultProps & {};\\r\\n\\r\\nconst Component = (props: Props): JSX.Element => {\\r\\n  const {Wrapper} = {...defaultProps, ...props};\\r\\n  return <Wrapper />\\r\\n};\\r\\n\\r\\nComponent.defaultProps = defaultProps;\\r\\n\\r\\nexport default Component;\\r\\n```\\r\\n","number":16970,"user":{"login":"marcelmokos"},"state":"closed","created_at":"2019-10-01T10:56:20Z"},{"id":500808552,"title":"Tabs are there but not showing up components on React Site","body":"\\r\\n\\r\\nI\'ve installed react dev tools and i see two tabs but tab component does not showing up components....\\r\\n\\r\\nReact Dev Tools Ver.\\r\\n4.1.3 (9/30/2019)\\r\\nChrome Browser Ver.\\r\\n77.0.3865.90","number":16969,"user":{"login":"Dan86de"},"state":"closed","created_at":"2019-10-01T10:33:53Z"},{"id":500648882,"title":"React DevTools force re-render button","body":"I\'d like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1500684/65933573-35b06980-e3cf-11e9-8245-e5bedac5c552.png)\\r\\n\\r\\nThis can be accomplished today by adding a new prop and changing the prop, but it\'s more work than I want to do.\\r\\n\\r\\nThis would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that\'s tied to a \\"forceRender\\" function:\\r\\n\\r\\n```jsx\\r\\nfunction useForceRerender() {\\r\\n  const [, set] = React.useState()\\r\\n  return React.useCallback(() => set({}), [])\\r\\n}\\r\\n\\r\\nfunction FilterComponent() {\\r\\n  const forceRerender = useForceRerender()\\r\\n \\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={forceRerender}>force rerender</button>\\r\\n      {/* more JSX */}\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nWould be cool to have this built-in :)","number":16968,"user":{"login":"kentcdodds"},"state":"closed","created_at":"2019-10-01T04:14:04Z"},{"id":500642282,"title":"Replace newBaseState with newState","body":"Since `newBaseState` is always equals `newState`, I think we can remove it","number":16967,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-10-01T03:47:03Z"},{"id":500616335,"title":"Update README.md","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16966,"user":{"login":"ilhamjulianto"},"state":"closed","created_at":"2019-10-01T02:02:35Z"},{"id":500570869,"title":"Devtools Inspect Button Doesn\'t Work with Repeat Selections","body":"Maybe we can detect this case by checking $0 and if not we can temporarily select null before reselecting. (?)","number":16965,"user":{"login":"lunaruan"},"state":"open","created_at":"2019-09-30T23:07:10Z"},{"id":500420271,"title":"React Child Component with Array Props Updating Incorrectly","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nA child Component with array Props update incorrectly when the array is updated in the parent with setState.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nThe child is declared in the parent Component render as follows (Alarms is the child Component, filteredStatus is the array):\\r\\n\\r\\n<div key={1} className={\'1\'}>\\r\\n  <span className=\'text\'><b>{locationName} <i>Status</i></b></span>\\r\\n  <Alarms filteredStatus={this.state.filteredStatus}/>\\r\\n</div>\\r\\nThe child displays the array as a table.\\r\\n\\r\\npublic generate = () => {\\r\\n    return this.props.filteredStatus.map(status =>\\r\\n    {\\r\\n      return (\\r\\n      <TableRow key={status.location}>\\r\\n        <TableCell align=\\"left\\">\\r\\n          {(status.severity === 40) && <ErrorIcon style={{ fill: \'#FF3333\'}}/>}\\r\\n          {(status.severity === 30) && <NotificationIcon style={{ fill: \'FFA033\'}}/>}\\r\\n          {(status.severity === 20) && <WarningIcon style={{ fill: \'FFE033\'}}/>}\\r\\n        </TableCell>\\r\\n        <TableCell align=\\"left\\">{status.description}</TableCell>\\r\\n        <TableCell align=\\"left\\">{status.timestamp}</TableCell>\\r\\n        <TableCell align=\\"left\\">{status.location}</TableCell>\\r\\n\\r\\n        {/* <div className=\\"ListBtn\\">\\r\\n          <Tooltip title={\\"Clear \'\\" + alarm.who + \\"\'\\"}>\\r\\n            <Avatar>\\r\\n              <IconButton aria-label=\\"Delete\\" onClick={this.openClearAlarmConfirmDialog.bind(this, alarm)} >\\r\\n                <DeleteIcon />\\r\\n              </IconButton>\\r\\n            </Avatar>\\r\\n          </Tooltip>\\r\\n        </div> */}\\r\\n      </TableRow>\\r\\n      );\\r\\n    });\\r\\n  }\\r\\n\\r\\n  public render() {\\r\\n    return (\\r\\n      <div>\\r\\n        {/* <Paper> */}\\r\\n          <Table>\\r\\n            <TableHead>\\r\\n              <TableCell align=\\"left\\">Severity</TableCell>\\r\\n              <TableCell align=\\"left\\">Description</TableCell>\\r\\n              <TableCell align=\\"left\\">Timestamp</TableCell>\\r\\n              <TableCell align=\\"left\\">Location</TableCell>\\r\\n            </TableHead>\\r\\n            <TableBody>\\r\\n              {this.generate()}\\r\\n            </TableBody>\\r\\n          </Table>\\r\\n        {/* </Paper> */}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n\\r\\n\\r\\nfilteredStatus is declared in the parent Component state as...\\r\\n\\r\\n    interface IState {\\r\\n      dtName: string;\\r\\n      dtDesc: string;\\r\\n      dtInfo: IDrivetrainInfo;\\r\\n      drillDownIndex: number;\\r\\n      componentName: string;\\r\\n      navLocations: string[];\\r\\n      filteredStatus: Status[];\\r\\n      nullStatus: Status[];\\r\\n      locationStatus: Status;\\r\\n    }\\r\\n\\r\\nStatus is a user defined class...\\r\\n\\r\\n\\r\\n    export class Status {\\r\\n        public location: string;\\r\\n        public timestamp: string;\\r\\n        public severity: number;\\r\\n        public description: string;\\r\\n    }\\r\\nThe filteredStatus is updated in the parent from a timer... A new array of Status is created and assigned to the state.filtered status as follows:\\r\\n\\r\\nthis.setState({filteredStatus: this.localStatus});\\r\\nWhat happens is that the updated table doesn\'t correctly show the new array of components. The new array appears to be merged with the old array. I added the size of the array to the child display and at times the size shows 0 while the list shows 15 elements.\\r\\n\\r\\nI was able to work around this problem by first setting the filteredStatus to a null array, then the new array as follows:\\r\\n\\r\\nconst nullStatus = Array<Status>();\\r\\nthis.setState({filteredStatus: nullStatus});\\r\\nthis.setState({filteredStatus: this.localStatus});\\r\\nI may be doing something wrong, but this appears to be a problem with the rendering of the array props in the child Component.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe child array should display the elements of the array correctly.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact: \\"^16.8.5\\",\\r\\nChrome browser. \\r\\n","number":16964,"user":{"login":"msgraber"},"state":"closed","created_at":"2019-09-30T17:40:16Z"},{"id":500416463,"title":"Remove IIFE wrappers from dev invariant checks","body":"The error transform works by replacing calls to `invariant` with an `if` statement.\\r\\n\\r\\nSince we\'re replacing a call expression with a statement, Babel wraps the new statement in an immediately-invoked function expression (IIFE). This wrapper is unnecessary in practice because our `invariant` calls are always part of their own expression statement.\\r\\n\\r\\nIn the production bundle, the function wrappers are removed by Closure. But they remain in the development bundles.\\r\\n\\r\\nThis commit updates the transform to confirm that an `invariant` call expression\'s parent node is an expression statement. (If not, it throws a transform error.)\\r\\n\\r\\nThen, it replaces the expression statement instead of the expression itself, effectively removing the extraneous IIFE wrapper.","number":16963,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-30T17:32:19Z"},{"id":500404407,"title":"Renderer findAllByProps finding too many results with styled-components","body":"## System:\\r\\n - OS: macOS Mojave 10.14.6\\r\\n - CPU: (8) x64 Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz\\r\\n - Memory: 169.37 MB / 16.00 GB\\r\\n - Shell: 3.2.57 - /bin/bash\\r\\n## Binaries:\\r\\n - Node: 11.14.0 - ~/.nvm/versions/node/v11.14.0/bin/node\\r\\n - Yarn: 1.17.3 - /usr/local/bin/yarn\\r\\n - npm: 6.7.0 - ~/.nvm/versions/node/v11.14.0/bin/npm\\r\\n## npmPackages:\\r\\n - styled-components: ^4.4.0 => 4.4.0 \\r\\n - jest: ^24.9.0\\r\\n - react-test-renderer: ^16.10.1\\r\\n - ts-jest: ^24.1.0\\r\\n - typescript: 3.6.3\\r\\n\\r\\n## Reproduction\\r\\nRun `yarn test` on my example repo and look at the output from Demo.test.tsx.\\r\\nhttps://github.com/Swazimodo/demo-broken-styled-components\\r\\n\\r\\n## Steps to reproduce\\r\\n- set a data tag for UI testing on a styled-component div\\r\\n- render the component with react-test-renderer\\r\\n- take the output and find all by props\\r\\n- check the length of the selection\\r\\n\\r\\n## Expected Behavior\\r\\n- get one result for each rendered item\\r\\n\\r\\n## Actual Behavior\\r\\n- get 3x the results\\r\\n\\r\\n## notes\\r\\n- This works for regular react nodes but seems to blow up when you use styled-components\\r\\n- I have created a snapshot with the rendered result to look at it and I do not see any duplicates \ud83e\udd37\u200d\u2642 \\r\\n","number":16962,"user":{"login":"Swazimodo"},"state":"closed","created_at":"2019-09-30T17:07:31Z"},{"id":500381860,"title":"SuspenseConfig is ignored after timeoutMs","body":"I was playing around with some unstable Suspense APIs and noticed this strange behaviour when using `React.unstable_withSuspenseConfig`.\\r\\n\\r\\nIf I understood correctly, the purpose of `timeoutMs` field is to tell React: \\"I\'m okay with this update to not happen within this time. _Then_ you can show fallback.\\"\\r\\n\\r\\nWhat it actually says is: \\"I\'m okay with this update to not happen within this time _since previous update_.\\" Meaning if nothing happened for some time, fallback will show up immediately.\\r\\n\\r\\nHere\'s this case reproduced in sandbox: https://codesandbox.io/s/romantic-chebyshev-n59dk\\r\\n\\r\\nFun thing I noticed: it works as expected if I repeatedly perform updates anywhere in my App. So it may be hard to catch in real world.\\r\\n\\r\\nMy (unfamiliar with codebase) theory is that expiration time for my update is based on last update (commit?) time, but should\'ve been based on the time it was triggered??\\r\\n\\r\\nI know that this is unstable API and I might be misunderstanding something. Hope my case helps!\\r\\n\\r\\n---\\r\\nReact 16.10.1\\r\\nTested on MacOS 10.4: Safari 13.0.1, Chrome 77","number":16961,"user":{"login":"dsblv"},"state":"closed","created_at":"2019-09-30T16:20:31Z"},{"id":500375847,"title":"React Hooks and react-bootstrap 0.31.5 Panel problem","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI get an error at run time\\r\\n\\r\\n> Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it\'s defined in, or you might have mixed up default and named imports.\\r\\n> \\r\\n> Check the render method of `App`.\\r\\n> \\r\\n\\r\\nhttps://codesandbox.io/s/clever-fire-eez3v\\r\\n\\r\\n**What is the expected behavior?**\\r\\nShouldn\'t give an error since it is the combination of the basic React Hooks sample (https://reactjs.org/docs/hooks-intro.html) and react-bootstrap panel-with-heading sample (https://react-bootstrap-v3.netlify.com/components/panel/)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nAll browsers\\r\\nReact 16.9.0\\r\\nDon\'t know if it worked in previous versions. Was just giving hooks a shot.\\r\\n\\r\\n","number":16960,"user":{"login":"neilyoung"},"state":"closed","created_at":"2019-09-30T16:08:55Z"},{"id":500367481,"title":"panel","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16959,"user":{"login":"accuware"},"state":"closed","created_at":"2019-09-30T15:53:59Z"},{"id":500322165,"title":"[react-interactions] Add tab handling to FocusList","body":"This is a follow up to https://github.com/facebook/react/pull/16922, where we add the same tab keyboard control behavior to `FocusList`","number":16958,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-30T14:40:08Z"},{"id":500284357,"title":"Webkit inline styles dissapears in Firefox","body":"**Do you want to request a *feature* or report a *bug*?**: *bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\nMissing `-webkit-print-color-adjust: exact;` in Firefox\\r\\n\\r\\n**Demo**:\\r\\n1. Run https://stackblitz.com/edit/react-skxixb in Firefox and Chrome\\r\\n2. Check CSS for `.header`\\r\\n\\r\\n**What is the expected behavior?**\\r\\n`-webkit-print-color-adjust: exact;` should be placed in all browsers\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.9.0 and 16.10.1\\r\\nWindows 10\\r\\nFirefox 69.0.1","number":16957,"user":{"login":"Saibamen"},"state":"closed","created_at":"2019-09-30T13:39:44Z"},{"id":500206671,"title":"Design decision: why do we need the stale closure problem in the first place?","body":"Hi,\\r\\n\\r\\nI initially asked this on Twitter and @gaearon suggested me to open an issue instead.\\r\\nThe original thread is here: https://twitter.com/sebastienlorber/status/1178328607376232449?s=19\\r\\nMore easy to read here: https://threadreaderapp.com/thread/1178328607376232449.html\\r\\nBut will try to make this issue more clear and structured about my args and questions.\\r\\n\\r\\nDon\'t get me wrong, I really like hooks, but wonder if we can\'t have smarter abstractions and official patterns that make dealing with them more easy for authors and consumers.\\r\\n\\r\\n--------------------------------------\\r\\n\\r\\n## Workaround for the stale closure\\r\\n\\r\\nAfter using hooks for a while, and being familiar with the stale closure problem, I don\'t really understand why we need to handle closure dependencies, instead of just doing something like the following code, which always executes latest provided closure (capturing fresh variables)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/749374/65869094-f7d52600-e379-11e9-9634-1ab06b41e3ca.png)\\r\\n\\r\\nCoupling the dependencies of the closure and the conditions to trigger effect re-execution does not make much sense to me. For me it\'s perfectly valid to want to capture some variables in the closure, yet when those variables change we don\'t necessarily want to re-execute.\\r\\n\\r\\nThere are many cases where people are using refs to \\"stabilize\\" some value that should not trigger re-execution, or to access fresh values in closures.\\r\\n\\r\\nExamples in major libs includes:\\r\\n- Formik (code is pretty similar to my \\"useSafeEffect\\" above): https://github.com/jaredpalmer/formik/blob/master/src/Formik.tsx#L975\\r\\n- React-redux, which uses refs to access fresh props: https://github.com/reduxjs/react-redux/blob/b6b47995acfb8c1ff5d04a31c14aa75f112a47ab/src/components/connectAdvanced.js#L286\\r\\n\\r\\nAlso @Andarist (who maintains a few important React libs for a while): \\r\\n\\r\\n![image](https://user-images.githubusercontent.com/749374/65872332-9d8b9380-e380-11e9-90b3-bf294991bb82.png)\\r\\n\\r\\n\\r\\nWe often find in such codebase the \\"useIsomorphicLayoutEffect\\" hook which permits to ensure that the ref is set the earliest, and try to avoid the useLayoutEffect warning (see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85). What we are doing here seems unrelated to layout and makes me a bit uncomfortable btw.\\r\\n\\r\\n\\r\\n\\r\\n## Do we need an ESLint rule?\\r\\n\\r\\nThe ESLint rule looks to me only useful to avoid the stale closure problem. Without the stale closure problem (which the trick above solves), you can just focus on crafting the array/conditions for effect re-execution and don\'t need ESLint for that.\\r\\n\\r\\nAlso this would make it easier to wrap useEffect in userland without the fear to exposing users to stale closure problem, because eslint plugin won\'t notice missing dependencies for custom hooks.\\r\\n\\r\\nHere\'s some code for react-navigation (alpha/v5). To me this is weird to have to ask the user to \\"useCallback\\" just to stabilize the closure of useFocusEffect, just to ensure the effect only runs on messageId change.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/749374/65869719-3d462300-e37b-11e9-94d2-5200481588bc.png)\\r\\n\\r\\nNot sure to understand why we can\'t simply use the following instead. For which I don\'t see the point of using any ESLint rule. I just want the effect to run on messageId change, this is explicit enough for me and there\'s no \\"trap\\"\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/749374/65869777-564ed400-e37b-11e9-8570-12534e5f2a53.png)\\r\\n\\r\\nI\'ve heard that the [React team recommends rather the later](https://twitter.com/satya164/status/1178571088172896256), asking the user to useCallback, instead of building custom hooks taking a dependency array, why exactly? Also heard that the ESLint plugin now was able to detect missing deps in a custom hook, if you add the [hook name to ESLint conf](https://twitter.com/n1rual/status/1178568248062877701). Not, sure what to think we are supposed to do in the end.\\r\\n\\r\\n## Are we safe using workarounds?\\r\\n\\r\\nIt\'s still a bit hard for me to be sure which kind of code is \\"safe\\" regarding React\'s upcoming features, particularly Concurrent Mode. \\r\\n\\r\\nIf I use the `useEffectSafe` above or something equivalent relying on refs, I am safe and future proof?\\r\\n\\r\\nIf this is safe, and makes my life easier, why do I have to build this abstraction myself? \\r\\n\\r\\nWouldn\'t it make sense to make this kind of pattern more \\"official\\" / documented?\\r\\n\\r\\nI keep adding this kind of code to every project I work with:\\r\\n\\r\\n```tsx \\r\\nconst useGetter = <S>(value: S): (() => S) => {\\r\\n  const ref = useRef(value);\\r\\n  useIsomorphicLayoutEffect(() => {\\r\\n    ref.current = value;\\r\\n  });\\r\\n  return useCallback(() => ref.current, [ref]);\\r\\n};\\r\\n```\\r\\n(including important community projects like [react-navigation-hooks](https://github.com/react-navigation/hooks/blob/master/src/Hooks.ts#L46))\\r\\n\\r\\n## Is it a strategy to teach users?\\r\\n\\r\\nIs it a choice of the React team to not ship safer abstractions officially and make sure the users hit the closure problem early and get familiar with it? \\r\\n\\r\\nBecause anyway, even when using getters, we still can\'t prevent the user to capture some value. This has been documented by @sebmarkbage [here](https://gist.github.com/sebmarkbage/a5ef436427437a98408672108df01919) with async code, even with a getter, we can\'t prevent the user to do things like:\\r\\n\\r\\n```tsx\\r\\nonMount(async () => {\\r\\n  let isEligible = getIsEligible();\\r\\n  let data = await fetch(...);\\r\\n  // at this point, isEligible might has changed: we should rather use `getIsEligible()` again instead of storing a boolean in the closure (might depend on the usecase though, but maybe we can imagine isEligible => isMounted)\\r\\n  if (isEligible) {\\r\\n    doStuff(data);\\r\\n  }\\r\\n});\\r\\n```  \\r\\nAs far as I understand, this might be the case:\\r\\n\\r\\n> So you can easily get into the same situation even with a mutable source value. React just makes you always deal with it so that you don\'t get too far down the road before you have to refactor you code to deal with these cases anyway. I\'m really glad how well the React community has dealt with this since the release of hooks because it really sets us up to predictably deal with more complex scenario and for doing more things in the future.\\r\\n\\r\\n\\r\\n## A concrete problem\\r\\n\\r\\nA react-navigation-hooks user reported that his effect run too much, using the following code:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/749374/65870979-bf374b80-e37d-11e9-8a6c-1f7df8503c18.png)\\r\\n\\r\\nIn practice, this is because react-navigation core does not provide stable `navigate` function, and thus the hooks too. The core does not necessarily want to \\"stabilize\\" the navigate function and guarantee that contract in its API.\\r\\n\\r\\nIt\'s not clear to me what should I do, between officially stabilizing the `navigate` function in the hooks project (relying on core, so core can still return distinct navigate functions), or if I should ask the user to stabilize the function himself in userland, leading to pain and boilerplate for many users trying to use the API.\\r\\n\\r\\nI don\'t understand why you can\'t simply dissociate the closure dependencies to the effect\'s triggering, and simply omitting the `navigate` function here:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/749374/65871264-51d7ea80-e37e-11e9-837d-291775853b2e.png)\\r\\n\\r\\n\\r\\nWhat bothers me is that somehow as hooks lib authors we now have to think about whether what we return to the user is stable or not, ie safe to use in an effect dependency array without unwanted effect re-executions.\\r\\n\\r\\nReturning a stable value in v1 and unstable in v2 is a breaking change that might break users apps in nasty ways, and we have to document this too in our api doc, or ask the user to not trust us, and do the memoization work themselves, which is quite error prone and verbose. Now as lib authors we have to think not only about the inputs/outputs, but also about preserving identities or not (it\'s probably not a new problem, because we already need to in userland for optimisations anyway).\\r\\n\\r\\nAsking users to do this memoization themselves is error prone and verbose. And intuitively some people will maybe want to `useMemo` (just because of the naming) which actually can tricks them by not offering the same guarantees than `useCallback`.\\r\\n\\r\\n\\r\\n## A tradeoff between different usecases in the name of a consistent API?\\r\\n\\r\\n@satya164 also mentionned that there are also usecases where the [ESLint plugin saved him](https://twitter.com/satya164/status/1178395620236759043) more than once because he forgot some dependency, and for him, it\'s more easy to fix an effect re-executing too much than to find out about some cached value not updating. \\r\\n\\r\\nI see how the ESLint plugin is really handy for usecases such as building a stable object to optimize renders or provide a stable context value. \\r\\n\\r\\nBut for useEffect, when capturing functions, sometimes executing 2 functions with distinct identities actually lead to the same result. Having to add those functions to dependencies is quite annoying in such case. \\r\\n\\r\\nBut I totally understand we want to guarantee some kind of consistency across all hooks API.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nI try to understand some of the tradeoffs being made in the API. Not sure to understand yet the whole picture, and I\'m probably not alone. \\r\\n\\r\\n@gaearon said to open an issue with a comment: `It\'s more nuanced`. I\'m here to discuss all the nuances if possible :)\\r\\n\\r\\nWhat particularly bothers me currently is not necessarily the existing API. It\'s rather:\\r\\n- the dogmatism of absolutely wanting to conform the ESLint rules (for which I don\'t agree with for all usecases). Currently I think users are really afraid to not follow the rules.\\r\\n- the lack of official patterns on how we are supposed to handle some specific hooks cases. And I think the \\"getter\\" pattern should be a thing that every hooks users know about and learn very early. Eventually adding such pattern in core would make it even more visible. Currently it\'s more lib authors and tech leads that all find out about this pattern in userland with small implementation variations.\\r\\n\\r\\nThose are the solutions that I think of. As I said I may miss something important and may change my opinions according to the answers.\\r\\n\\r\\nAs an author of a few React libs, I feel a bit frustrated to not be 100% sure what kind of API contract I should offer to my lib\'s users. I\'m also not sure about the hooks patterns I can recommend or not. I plan to open-source something soon but don\'t even know if that\'s a good idea, and if it goes in the direction the React team want to go with hooks.\\r\\n\\r\\nThanks\\r\\n\\r\\n\\r\\n","number":16956,"user":{"login":"slorber"},"state":"open","created_at":"2019-09-30T11:07:44Z"},{"id":500116330,"title":"When SSR returns a field that is inconsistent with the client side, the client side should prevail","body":"There is the demo:\\r\\n\\r\\nreturn page(HTML) is: \\r\\n```\\r\\n<html>\\r\\n <head>\\r\\n    ...\\r\\n </head>\\r\\n  <body>\\r\\n    <div id=\'react\'>\\r\\n      <div id=\\"level1\\">\\r\\n        <div id=\\"level21\\">22</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </body>\\r\\n</html>\\r\\n```\\r\\n\\r\\nAnd the root Component is:\\r\\n```\\r\\nclass App extends React.Component {\\r\\n  render () {\\r\\n    return (\\r\\n      <div id=\\"level1\\">\\r\\n        <div id=\\"level211\\">221</div>\\r\\n        <div className=\\"level33\\">33</div>\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\nhydrate(\\r\\n  <App />,\\r\\n  document.getElementById(\'react\')\\r\\n)\\r\\n```\\r\\n\\r\\nFinally the page dom will be rendered as:\\r\\n```\\r\\n<body>\\r\\n    <div id=\\"react\\">\\r\\n           <div id=\\"level1\\">\\r\\n                <div id=\\"level21\\">221</div>\\r\\n                <div class=\\"level33\\">33</div>\\r\\n          </div>\\r\\n   </div>\\r\\n</body>\\r\\n```\\r\\n\\r\\nIt seems that the id of the first child of div#level1 is incorrect.\\r\\n\\r\\nReact & ReactDom version: 16.8.6","number":16955,"user":{"login":"leiyourong"},"state":"open","created_at":"2019-09-30T08:02:34Z"},{"id":499977709,"title":"Why will Suspense for data fetching require a cache?","body":"I\'m [integrating Suspense with React Async](https://github.com/async-library/react-async/pull/153), and I\'ve been reading up on how it\'s supposed to work. All the resources I found talk about needing `react-cache` or another cache mechanism for Suspense to work properly. However, none of the resources explain WHY Suspense needs a cache. Could someone explain that? I\'ve been able to [make it work without a cache](https://github.com/async-library/react-async/pull/153/files#diff-2d8d9c51cb93c9f7f57c81f6f7f1669a). Am I missing something?","number":16954,"user":{"login":"ghengeveld"},"state":"open","created_at":"2019-09-29T21:56:33Z"},{"id":499959784,"title":"[DevTools] targetOrigin of postMessage needs to be \'*\' for local files","body":"When we (extension) use `postMessage` to send a message to the content script (on the same window) to inject the backend script, the `targetOrigin` was set to `window.origin` here\\r\\nhttps://github.com/facebook/react/blob/master/packages/react-devtools-extensions/src/main.js#L138\\r\\n\\r\\nHowever, this won\'t work for local files (`window.origin` is `null`) so I\'m changing the `targetOrigin` from `window.origin` to `\'*\'`. Other existing `postMessage` calls in contentScript.js does so as well.\\r\\n\\r\\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Using_window.postMessage_in_extensions:\\r\\n> posting a message to a page at a file: URL currently requires that the targetOrigin argument be \\"*\\"\\r\\n\\r\\nI tested with the local index.html file provided in https://github.com/facebook/react/issues/16952 (but removed `type=\\"text/babel\\"`) and confirmed that the components tab was empty before this change, and working after this change.\\r\\n","number":16953,"user":{"login":"linshunghuang"},"state":"closed","created_at":"2019-09-29T19:30:05Z"},{"id":499897079,"title":"Devtools extension does not show elements from local files","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen a local file is loaded, the devtools extension displays a panel in devtools, but all elements are missing. There are no console warnings or errors. All elements display properly when using a server, but the documentation says a server is not necessary in this case.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n1. Put this in `index.html`\\r\\n```html\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n  <head>\\r\\n    <meta charset=\\"UTF-8\\" />\\r\\n    <title>Hello World</title>\\r\\n    <script src=\\"https://unpkg.com/react@16.10.1/umd/react.development.js\\"><\/script>\\r\\n    <script src=\\"https://unpkg.com/react-dom@16.10.1/umd/react-dom.development.js\\"><\/script>\\r\\n  </head>\\r\\n  <body>\\r\\n    <div id=\\"root\\"></div>\\r\\n    <script type=\\"text/babel\\">\\r\\n      function HelloWorld() {\\r\\n        return React.createElement(\\"h1\\", null, \\"Hello, world!\\");\\r\\n      }\\r\\n      ReactDOM.render(\\r\\n        React.createElement(HelloWorld, null),\\r\\n        document.getElementById(\\"root\\")\\r\\n      );\\r\\n    <\/script>\\r\\n  </body>\\r\\n</html>\\r\\n```\\r\\n2. Install React devtools extension and allow access to local file URLS\\r\\n3. Open `index.html`\\r\\n4. Open devtools\\r\\n5. Open components panel\\r\\n\\r\\n**What is the expected behavior?**\\r\\nHello element is displayed with default settings, and both Hello and h1 are displayed when the host type is not hidden in settings.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n- React/ReactDOM 16.10.1 UMD from Unpkg CDN\\r\\n- React Developer Tools (Chrome extension) 4.1.2\\r\\n- Chrome 77.0.3865.90\\r\\n- macOS 10.14.6","number":16952,"user":{"login":"nickmccurdy"},"state":"closed","created_at":"2019-09-29T10:28:49Z"},{"id":499890146,"title":"react-scripts build will incorrectly redirect page if URL contains \'.html?\'","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen running react-scripts build on a project with react-router-dom, it will go to the incorrect URL if you have .html in your URL.\\r\\n\\r\\n`<Route path=\\"*\\" component={Test} />`\\r\\n\\r\\nWhen running react-scripts build, serving the build and navigating the http://localhost:5000/test.html?test=5, the page will redirect to http://localhost:5000/test with a status code of 301 Moved Permanently.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nYou can test the issue at [https://github.com/CongoCash/react-router-testing](url).  First run it with \'npm start\' and navigate to http://localhost:3000/test.html?test=5. Then run \'npm run build\', followed by \'serve -s build\' and navigate to http://localhost:5000/test.html?test=5\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWhen you run react-scripts start and navigate to http://localhost:3000/test.html?test=5, it will correctly navigate to http://localhost:3000/test.html?test=5.  Upon running react-scripts build and serving the build, navigating to http://localhost:5000/test.html?test=5 will result in a redirect to http://localhost:5000/test with a status code of 301 Moved Permanently.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis occurs in version 16.10.0 and is affected in Chrome, Safari, Firefox.\\r\\n","number":16951,"user":{"login":"CongoCash"},"state":"closed","created_at":"2019-09-29T09:35:30Z"},{"id":499881427,"title":"Error: \\"Maximum call stack size exceeded\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Profiling my react web page\\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.1.2-5184346da\\r\\n\\r\\nCall stack: at Map.has (<anonymous>)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150140)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\\r\\n\\r\\nComponent stack: in dl\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc","number":16950,"user":{"login":"loverdeveloper"},"state":"closed","created_at":"2019-09-29T08:46:37Z"},{"id":499814922,"title":"updated comment message with better wording","body":"The existing message wordings are little bit unclear. Made change to replace them with better wording. ","number":16949,"user":{"login":"KirankumarAmbati"},"state":"closed","created_at":"2019-09-28T19:57:11Z"},{"id":499813656,"title":"Request: Create an ESLint Plugin for warnings and depreciations that will impact major upgrades","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact currently does console output to the browser console to tell developers that they need to be aware of major changes coming so that upgrades will be seamless for them. This works well on smaller sites, or in a situation where your company may have a monorepo and can enforce and track these warnings.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIn addition to this behavior, it would be beneficial to React developers if they could have ESLint plugins that had rules for these warnings. Ideally, the ESLint plugin could fix simple cases (methods being renamed) and in more complex cases recommend a codemod.\\r\\n\\r\\n\u2014\u2014-\\r\\n\\r\\nI\u2019m posting this here as per discussion with @acdlite on twitter. See this thread: https://twitter.com/acdlite/status/1178018850937290753?s=21\\r\\n\\r\\nUltimately, it is harder for shops that do micro frontends to ensure everyone is compliant with new React versions. It is also easier to catch things early at build time then to dig around in the browser runtime when there may be other compounding issues.\\r\\n\\r\\nThe other benefit of this would be that it would enable third party libraries to potentially have \u201cday 1 support\u201d for new major React versions because they could follow the rule set and ensure that they are forwards compatible without being caught trying to do it all at once.\\r\\n\\r\\nLastly, I\u2019m happy to help drive/contribute to any rule set to make sure it works in our use case.\\r\\n","number":16948,"user":{"login":"Aghassi"},"state":"open","created_at":"2019-09-28T19:44:12Z"},{"id":499812767,"title":"onclick event is not attached to a div under ternary operators when doing a map function","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nmaybe a bug or design in purpose?\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nonclick event is not attached to a div under ternary operators when doing a map function,\\r\\nonclick doesn\'t have response to clicks\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n` {closedQuestions.map((topic, topicIndex) => (\\r\\n                  <div key={topicIndex}>\\r\\n                    <div>\\r\\n                           {topic.questions.length > 0 ? <div onClick={() => \\r\\n                                        this.toggleClosedQuestions(topic.title)}> [{topic.showAll ? \'-\' : \'+\'}] \\r\\n                                        {topic.title} - {topic.detail}</div>: <div> {topic.title} - {topic.detail}</div> }\\r\\n                    </div>\\r\\n                    {topic.showAll ?\\r\\n                      topic.questions.map((q, questionIndex) => (\\r\\n                        <div className={styles.random} key={questionIndex}>\\r\\n                          <a href={\'www.example.com/\' + \'?id\' + q._id}>{q.questionTitle}</a>\\r\\n                        </div>\\r\\n                      ))\\r\\n                      : \'\'\\r\\n                    }`\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nusing sharepoint framework with react, stable version up todate\\r\\nchrome\\r\\nMac High Sierra\\r\\n","number":16947,"user":{"login":"TomYang1993"},"state":"closed","created_at":"2019-09-28T19:35:00Z"},{"id":499810793,"title":"Context api higger than 16.3 available in props (functional component) with react-router-v5","body":"My code where I configur my context Provider is like belowe:\\r\\n\\r\\n```\\r\\nimport React, {createContext} from \'react\';\\r\\n\\r\\nconst InitialContext = {\\r\\n\\texampleValue: [],\\r\\n\\taction: () => {}\\r\\n};\\r\\n\\r\\nexport const ThemeContext = createContext(InitialContext);\\r\\nexport function ThemeProvider(props) {\\r\\n\\tconst context = {\\r\\n\\t\\texampleValue: [],\\r\\n\\t\\taction: () => {}\\r\\n\\t};\\r\\n\\tconst contextAction = updateValue => context => {\\r\\n\\t\\tcontext.exampleValue.push(updateValue)\\r\\n                return context\\r\\n\\t};\\r\\n\\treturn (\\r\\n\\t\\t<ThemeContext.Provider\\r\\n\\t\\t\\tvalue={{\\r\\n\\t\\t\\t\\t...context,\\r\\n\\t\\t\\t\\taction: contextAction\\r\\n\\t\\t\\t}}\\r\\n\\t\\t>\\r\\n\\t\\t\\t{props.children}\\r\\n\\t\\t</ThemeContext.Provider>\\r\\n\\t)\\r\\n}\\r\\n```\\r\\n\\r\\nAnd my Consumer based for Context Object\\r\\n\\r\\n```\\r\\nimport React from \'react\';\\r\\nimport {ThemeContext} from \'./ThemeProvider\';\\r\\n\\r\\nexport const ThemeConsumer = (props) => {\\r\\n\\tconst {children} = props;\\r\\n\\treturn (\\r\\n\\t\\t<ThemeContext.Consumer>\\r\\n\\t\\t\\t{({exampleValue, action}) => {\\r\\n\\t\\t\\t\\treturn React.cloneElement(children, {\\r\\n\\t\\t\\t\\t\\texampleValue: exampleValue,\\r\\n\\t\\t\\t\\t\\taction: action\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t}}\\r\\n\\t\\t</ThemeContext.Consumer>\\r\\n\\t)\\r\\n};\\r\\n```\\r\\n\\r\\nAnd finally my root App component with routing configuration  \\r\\n\\r\\n```\\r\\n\\r\\nimport React from \'react\';\\r\\nimport {BrowserRouter as Router, Route, Switch} from \'react-router-dom\';\\r\\nimport {ThemeProvider} from \'./context/ThemeProvider\';\\r\\n\\r\\nimport Layout from \'./Layout/Layout\';\\r\\nimport {ThemeConsumer} from \\"./context/ThemeConsumer\\";\\r\\nimport {useStyles} from \'./styles\';\\r\\n\\r\\n\\r\\nfunction App() {\\r\\n\\tuseStyles();\\r\\n\\treturn (\\r\\n\\t\\t<Router>\\r\\n\\t\\t\\t<ThemeProvider>\\r\\n\\t\\t\\t\\t<ThemeConsumer>\\r\\n\\t\\t\\t\\t    <Route path=\\"/examplecomponent\\" component={exampleComponent}/>\\r\\n\\t\\t\\t\\t</ThemeConsumer>\\r\\n\\t\\t\\t</ThemeProvider>\\r\\n\\t\\t</Router>\\r\\n\\t)\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n\\r\\n```","number":16946,"user":{"login":"mjaracz"},"state":"closed","created_at":"2019-09-28T19:13:14Z"},{"id":499805440,"title":"Client render Suspense content if there\'s no boundary match","body":"Without the `enableSuspenseServerRenderer` flag there will never be a boundary match. Also when it is enabled, there might not be a boundary match if something was conditionally rendered by mistake.\\r\\n\\r\\nWith this PR it will now client render the content of a Suspense boundary in that case and issue a DEV only hydration warning. This is the only sound semantics for this case.\\r\\n\\r\\nUnfortunately, landing this will once again break #16938. It will be less bad though because at least it\'ll just work by client rendering the content instead of hydrating and issue a DEV only warning.\\r\\n\\r\\nHowever, we must land this before enabling the `enableSuspenseServerRenderer` flag since it does this anyway.\\r\\n\\r\\nI did notice that we special case `fallback={undefined}` due to our unfortunate semantics for that. So technically a workaround that works is actually setting the fallback to undefined on the server and during hydration. Then flip it on only after hydration. That could be a workaround if you want to be able to have a Suspense boundary work only after hydration for some reason.\\r\\n\\r\\nIt\'s kind of unfortunate but at least those semantics are internally consistent. So I added a test for that.\\r\\n\\r\\ncc @Timer @timneutkens","number":16945,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-28T18:31:36Z"},{"id":499801219,"title":"[Patch Release] v16.10.1","body":"Patch release branch for v16.10.1.\\r\\n\\r\\n## Test Plan\\r\\n\\r\\nRelease candidate version: `0.0.0-d346d9208`\\r\\n\\r\\n- [X] Confirm that the repro in #16938 is fixed in the RC: https://codesandbox.io/s/rough-frost-dvtbk\\r\\n- [x] Create Hello World Next app and confirm it works with the latest version Next: https://github.com/zeit/next.js/tree/canary/examples/hello-world\\r\\n  - [x] Also test `next@9.0.6`, before the bug was addressed downstream.\\r\\n\\r\\n## Changelog\\r\\n\\r\\n### React DOM\\r\\n\\r\\n* Fix regression in Next.js apps by allowing Suspense mismatch during hydration to silently proceed ([@sebmarkbage](https://github.com/sebmarkbage) in [#16943](https://github.com/facebook/react/pull/16943))","number":16944,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-28T17:55:08Z"},{"id":499799483,"title":"Allow Suspense Mismatch on the Client to Silently Proceed","body":"This fixes #16938 but isn\'t actually the semantics we want for this case.\\r\\n\\r\\nAs described in: https://github.com/facebook/react/issues/16938#issuecomment-536207871\\r\\n\\r\\nThis would silently try to hydrate bad mismatches instead of gracefully regenerate the content on the client. Additionally, the only time the hack makes sense is if you can guarantee that nothing will possibly suspend during hydration. If it does, it opens up a whole new set of issues as the fallback would now try to hydrate.\\r\\n\\r\\nSo it\'s clear to me that we don\'t actually want this to be the semantics.\\r\\n\\r\\nNow the debate is in whether it\'s ok to change this in a minor. We\'d argue that it is because conditional rendering on the server is never considered a public API. E.g. if you conditionally render useLayoutEffect, Context providers or anything else, that\'s also not a legit usage. So technically we don\'t consider this a breaking change. Suspense was already erroring if used as intended - unconditionally.\\r\\n\\r\\nHowever this is a technicality and it\'s really about what is the impact of this in practice.","number":16943,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-28T17:38:17Z"},{"id":499791168,"title":"native img attribute loading=\\"lazy\\" (chrome new feature).","body":"attribute loading=\\"lazy\\" works on image tag as it should;\\r\\nbut in react I should use \'data-loading\' or \'custom-loading\' otherwise error\\r\\nProperty \'loading\' does not exist on type \'DetailedHTMLProps<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\'\\r\\nappears.\\r\\n\\r\\nunfortunately with \'data-loading\' or \'custom-loading\' not working.","number":16942,"user":{"login":"hrkazemi"},"state":"closed","created_at":"2019-09-28T16:20:05Z"},{"id":499787914,"title":"eslint-plugin-react-hooks introduces a bug to minimal app unless overridden","body":"Following up on https://github.com/facebook/react/issues/14920 ...\\r\\n \\r\\n> [ESLint] Feedback for \'exhaustive-deps\' lint rule\\r\\n\\r\\n...I believe I have a case which triggers the eslint rule and which creates a looping bug if the auto-fix is applied. I also propose a way the linting might be applied to resolve this.\\r\\n\\r\\nI wrote a minimal app to explore the issue, to try to figure out an AST inspection which might mitigate the problem. Happy to refactor if you tell me an alternative way to present the backend server which would be preferred to an express dependency.\\r\\n\\r\\nThe app is a \'row editor\' which edits rows from a backend, having an id and title. The UI offers a list of row links. The user can navigate to edit a row from the list or create a new row. The front end user is expected to edit the title field. However, the backend also needs to make changes(it adds the id value from the \'database\' when a new record is saved).\\r\\n\\r\\nThere are two lines which require an override otherwise the app enters a loop between client and server, creating runaway saves and reloads and making the UI unusable. The override lines needed are at...\\r\\n\\r\\nhttps://github.com/cefn/graphql-gist/blob/c0bece7e6b1fda832d57ccb363b1056f7cb2d37b/react-event-loop/client.js#L73\\r\\nhttps://github.com/cefn/graphql-gist/blob/c0bece7e6b1fda832d57ccb363b1056f7cb2d37b/react-event-loop/client.js#L87\\r\\n\\r\\nIt could be possible to detect that setLocalRow is called within the body, and therefore allow a dependency of localRow to be commented in the array instead of declared.\\r\\n\\r\\nAlthough the minimal client app is generic, the full example is quite detailed, because the async callbacks need a server endpoint to demonstrate the issue. Additionally, the interlocking concerns of e.g. navigating to rows, auto-saving rows, creating new rows contribute to defining the problem. With fewer features supported, the problem doesn\'t arise. \\r\\n\\r\\nThe [backend code](https://github.com/cefn/graphql-gist/blob/c0bece7e6b1fda832d57ccb363b1056f7cb2d37b/react-event-loop/backend.js) is super-simple so hopefully doesn\'t confuse. If there is a specific refactoring which would help, let me know as this codebase is purely there to demonstrate the issue. \\r\\n\\r\\n`npm install` then `npm run start` then `http://localhost:8080` should be enough to observe the working system. Removing the eslint overrides and then auto-fixing will show the issues which arise if the eslint rule is allowed to add localRow or remoteRow to the dependencies.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nA loop between client and server if the auto-fix is applied\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe eslint rule should not introduce a dependency which causes a loop. For example, it could instead add a commented reference to localRow in the dependencies instead, to account for the case that setLocalRow is invoked in the body. \\r\\n\\r\\n```\\r\\n[localRow, remoteRow, saveItem]\\r\\n```\\r\\n...could look like...\\r\\n[ /*localRow,*/ remoteRow, saveItem]\\r\\n\\r\\nThis would allow the user to decide whether to leave the commented reference in place, or uncomment it to declare the dependency, knowing that it could create a loop. Either comment or reference would satisfy the rule.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI observed the issue with \\"eslint-plugin-react-hooks\\": \\"^2.0.1\\"","number":16941,"user":{"login":"cefn"},"state":"closed","created_at":"2019-09-28T15:50:37Z"},{"id":499753320,"title":"Initial State object modified by React, No Warning","body":"**Feature request - Warning for direct state mutation & no mutation on initial state object**\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen directly mutating an array in the react state instance the intialState object is also mutated. While I know updating the state this way is not the correct way, I see no React Warning to help people see that this is an issue and they should make state updates immutable.\\r\\n\\r\\nAlso I think the intialState object should not be modified under any circumstances by React, since it could be used to reset the state at some point.\\r\\n\\r\\nCode Sandbox demonstrating the issue:\\r\\nhttps://codesandbox.io/s/peaceful-khayyam-duq8f\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n react@16.9.0\\r\\n react-dom@16.9.0\\r\\n Windows 10 Pro 1903\\r\\n Chrome 77.0.3865.90, Firefox 69.0.1\\r\\n\\r\\n\\r\\n","number":16940,"user":{"login":"alexandrudanpop"},"state":"closed","created_at":"2019-09-28T10:16:14Z"},{"id":499730758,"title":"Regression test: Suspense + hydration + legacy","body":"Test case for #16938. Haven\'t fixed yet.","number":16939,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-28T05:52:12Z"},{"id":499719429,"title":"React 16.10 broke Next.js/SSR applications","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nReact 16.10.0 has broken all Next.js applications (and potentially other SSR solutions).\\r\\n\\r\\nIt appears you cannot `hydrate` in conjunction with a client-side `<Suspense>` component.\\r\\n\\r\\n> Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/616428/65810696-7f087b00-e17b-11e9-9957-3481fb5853e3.png)\\r\\n\\r\\n\\r\\n**CodeSandbox**: https://codesandbox.io/s/i66g1\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nNot entirely sure -- I\'m opening this issue to discuss. The provided example worked in React 16.9.0 (and prior releases containing Suspense).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`react@16.10.0`/`react-dom@16.10.0` is broken.\\r\\n`react@16.9.0`/`react-dom@16.9.0` works.\\r\\n","number":16938,"user":{"login":"Timer"},"state":"closed","created_at":"2019-09-28T03:18:10Z"},{"id":499715781,"title":"[Selective Hydration] Prioritize the last continuous target","body":"This ensures that the current focus target is always hydrated first.\\r\\n\\r\\nSlightly higher than the usual Never expiration time used for hydration. The priority increases with each new queued item so that the last always wins.\\r\\n\\r\\nThis is mostly to ensure that tooltips show up at a reasonable time.\\r\\n\\r\\nIf there\'s client rendered content that currently comes first though.","number":16937,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-28T02:31:51Z"},{"id":499697754,"title":"[react-interactions] Tap cancels on second pointerdown","body":"This patch causes onTapCancel to be called whenever a second pointer interacts with the responder target.","number":16936,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-28T00:04:54Z"},{"id":499692651,"title":"[Selective Hydration] Increase priority for non-synchronous discrete events and retries","body":"If an increased priority dehydrated boundary commits as dehydrated because it is suspended, it no longer has any `expirationTime` scheduled. So when the thenable resolves, it gets the default priority. This increases the `retryTime`. This will almost immediately expire and effectively become sync. We might want to make this slightly higher than Normal but longer expiration time.\\r\\n\\r\\nThe upside of eagerly computing this (as opposed to when resolved) is that we can guarantee a predictable order of priorities. (First event in, highest pri.)\\r\\n\\r\\nThis PR also ensures that we increase the priority of subsequent events after the first can\'t be done synchronously. There\'s no reason to keep them as high as sync since at that point it is already too late since replaying has kicked in. So we schedule with user blocking pri for this case.","number":16935,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-27T23:37:43Z"},{"id":499691472,"title":"Fixed useEditableValue() to safely compare values like NaN","body":"Fix a bug introduced in #16878\\r\\n\\r\\n`NaN !== NaN` _but_ `Object.is(NaN, NaN)`\\r\\n\\r\\nVerified the bugfix with this build: [ReactDevTools.zip](https://github.com/facebook/react/files/3664820/ReactDevTools.zip)","number":16934,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-27T23:31:49Z"},{"id":499661738,"title":"Error: \\"Minified React error ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16933,"user":{"login":"azuic"},"state":"closed","created_at":"2019-09-27T21:35:51Z"},{"id":499659848,"title":"Error: \\"Minified React error ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16932,"user":{"login":"jvandy83"},"state":"closed","created_at":"2019-09-27T21:30:25Z"},{"id":499618184,"title":"Feature request: adding dangerouslySetOuterHTML (or HTML-comment component)","body":"Currently there is only the option to have `dangerouslySetInnerHTML`, but there is no way to create a raw HTML output (like a HTML comment).\\r\\n\\r\\nFor the background where I\'m heading to with my feature-request:\\r\\nI am tinkering with ReactJS (latest version __16.9.0__) as some kind of static website generator where ReactJS should be used as the \\"templating engine\\". As I do not want to run a nodejs-server, or React at all on the resulting website, __SSR is no option__ for me (and please don\'t advocate me to use SSR).\\r\\n\\r\\nAs I am using `renderToStaticMarkup` of the `react-dom/server`, I can not use the existing ways like manipulating the \\"DOM\\"-node, because `componentDidMount` and `useEffect` do not work here.\\r\\n\\r\\nFor reference, I tried these tricks without luck (please ignore the asked question on SO, I only talk about the code of the given answers):\\r\\n* useEffect: https://stackoverflow.com/a/56118306/1961102\\r\\n* componentDidMount: https://stackoverflow.com/a/41131326/1961102\\r\\n\\r\\nThis topic was asked in some different ways, but not in combination with `outerHTML`. I think these issues might be related to this:\\r\\n\\r\\n`A way to return raw HTML from an unmounted component?`\\r\\nhttps://github.com/facebook/react/issues/7374\\r\\n\\r\\n`What does dangerouslySetInnerHTML prop do? How is it achieved?`\\r\\nhttps://github.com/facebook/react/issues/14509\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThere is no way.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n\\r\\nIf possible, I would like to have a way without having to deal with any \\"workaround\\"-construct\\r\\n```jsx\\r\\n<React.RawText text={\\"\x3c!-- some HTML comment --\x3e\\"} />\\r\\n```\\r\\n\\r\\nIf possible, I would like to have a way without having to deal with a `<div />`\\r\\n```jsx\\r\\n<React.Fragment rawUnsafeHTML={{__html: \\"\x3c!-- some HTML comment --\x3e\\"}} />\\r\\n```\\r\\n\\r\\nOtherwise by using a div as some kind of \\"transport-object\\"\\r\\n```jsx\\r\\n<div dangerouslySetOuterHTML={{__html: \\"\x3c!-- some HTML comment --\x3e\\"}} />\\r\\n```","number":16931,"user":{"login":"FibreFoX"},"state":"closed","created_at":"2019-09-27T19:42:46Z"},{"id":499604665,"title":"Provide Context.currentValue","body":"Now that hooks have an easy, non-HOC, non-renderprop, way of accessing context:\\r\\n\\r\\n```\\r\\nconst value = useContext(MyContext);\\r\\n```\\r\\n\\r\\nIt\'d be great to be able to do the same thing from class components, i.e.:\\r\\n\\r\\n```\\r\\nconst value = MyContext.currentValue;\\r\\n```\\r\\n\\r\\nI know there would be caveats like \\"don\'t capture the value\\" (b/c when the context value changes, you\'d want to be sure you\'re using the latest currentValue on each render), but hooks also have caveats about usage.","number":16930,"user":{"login":"stephenh"},"state":"closed","created_at":"2019-09-27T19:09:52Z"},{"id":499587981,"title":"React 16.8.6 upgrade - Warning The component appears to be a function","body":"When trying to upgrade my codebase to React 16.8.6 from React 16.6.0, all of my functional components are throwing the below warning:\\r\\n\\r\\n```\\r\\nWarning: The <App /> component appears to be a function component that returns a class instance. Change App to a class that extends React.Component instead. If you can\'t use a class try assigning the prototype on the function as a workaround. `App.prototype = React.Component.prototype`. Don\'t use an arrow function since it cannot be called with `new` by React.\\r\\n```\\r\\nHere\'s an example of my component:\\r\\n```\\r\\nconst App = ({ store }) => (\\r\\n  <Provider store={store}>\\r\\n    <MuiNextThemeProvider theme={muiNextTheme}>\\r\\n      <MuiThemeProvider muiTheme={muiTheme}>\\r\\n        <ViewContainer className=\\"new-ui\\">\\r\\n          <Routes />\\r\\n        </ViewContainer>\\r\\n      </MuiThemeProvider>\\r\\n    </MuiNextThemeProvider>\\r\\n  </Provider>\\r\\n);\\r\\n\\r\\nApp.propTypes = {\\r\\n  store: PropTypes.object.isRequired,\\r\\n};\\r\\n\\r\\nexport default App;\\r\\n```\\r\\nIs there something within this implementation that\'s been deprecated?\\r\\n\\r\\nreact / react-dom version: 16.8.6","number":16929,"user":{"login":"johnernaut"},"state":"closed","created_at":"2019-09-27T18:30:42Z"},{"id":499539141,"title":"Fix mouseenter handlers fired twice","body":"### The bug\\r\\nmouseenter handler gets fired twice, in a component **ReactDOM.render-ed** in another component.\\r\\n\\r\\n    ReactDOM.render(<AnotherComponent />, hostEl, () => {\\r\\n      ReactDOM.render(<AComponentMouseEnterWronglyFiredTwice />, hostEl.childNodes[1]);\\r\\n    });\\r\\n\\r\\n    function AComponentMouseEnterWronglyFiredTwice() {\\r\\n         return (<>\\r\\n            <div\\r\\n                onMouseEnter={() => {console.log(\'You may see this twice\');}}\\r\\n            >\\r\\n                Move mouse TO here\\r\\n            </div>\\r\\n            <div>Move mouse FROM here</div>\\r\\n         </>)\\r\\n    }\\r\\n\\r\\nThe bug issue https://github.com/facebook/react/issues/16763\\r\\nThe reproduction demo https://codesandbox.io/s/hungry-field-kgkli\\r\\n\\r\\n### The cause\\r\\nFor any event happened in **ReactDOM.render-ed** component in another component.\\r\\nIn function handleTopLevel(bookKeeping) {...}, we\'ll get two ancestors (at least) for bookKeeping.\\r\\n\\r\\nIt\'s ok for most of the events, but mouseenter is different.\\r\\nmouseenter is extracted out from mouseout/mouseover.\\r\\n\\r\\nWhen mouseout gets dealt twice in `handleTopLevel` in the situation above, mouseenter gets fired twice on the same node.\\r\\n\\r\\n### The fix\\r\\n\\r\\nEnterLeaveEventPlugin.js\\r\\n\\r\\n    extractEvents(...) {\\r\\n        ...\\r\\n        if (isOutEvent && from && nativeEventTarget !== fromNode) {\\r\\n          return [leave];\\r\\n        }\\r\\n        return [leave, enter];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":16928,"user":{"login":"yuanoook"},"state":"closed","created_at":"2019-09-27T16:31:21Z"},{"id":499501881,"title":"Error: \\"Minified React error ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16927,"user":{"login":"WilliamPapirose"},"state":"closed","created_at":"2019-09-27T15:11:30Z"},{"id":499479827,"title":"Error: \\"Minified React error\\" in React dev tools when using Components tab","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact Dev tools gets this error when I try to look at the Components Tab\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI don\'t know how to reproduce it. It was working yesterday and not working today.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThat the Components tab of the React dev tools doesn\'t crash.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.6.3\\r\\n\\r\\nHere is what I see. It\'s not my React app crashing. It\'s the dev tools.\\r\\n\\r\\n![Selection_880](https://user-images.githubusercontent.com/148813/65777237-058c7080-e11a-11e9-800a-261e2d3f435d.png)\\r\\n\\r\\n\\r\\nCopy paste of the errors from the screenshot in case that\'s helpful:\\r\\n\\r\\n```\\r\\nThe error was thrown at hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:61172)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256084\\r\\n    at Vo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256125)\\r\\n    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58828)\\r\\n    at Jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103390)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89163)\\r\\n    at Ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89088)\\r\\n    at ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86037)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45275\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3691)\\r\\n```\\r\\n```\\r\\nThe error occurred in Vo\\r\\n    in div\\r\\n    in aa\\r\\n    in div\\r\\n    in za\\r\\n    in div\\r\\n    in si\\r\\n    in div\\r\\n    in li\\r\\n    in Suspense\\r\\n    in Wa\\r\\n    in div\\r\\n    in div\\r\\n    in Jo\\r\\n    in Xr\\r\\n    in _o\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in zi\\r\\n    in Ge\\r\\n    in un\\r\\n    in ba\\r\\n    in Rc\\r\\n```","number":16926,"user":{"login":"tchaffee"},"state":"closed","created_at":"2019-09-27T14:29:52Z"},{"id":499448978,"title":"Error: \\"Minified React error #301\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe Chrome React Developement Tool throws this error:\\r\\n\\r\\n> The error was thrown at hi (chrome-\\r\\n> extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:61172)\\r\\n>     at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256084\\r\\n>     at Vo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256125)\\r\\n>     at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58828)\\r\\n>     at Jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103390)\\r\\n>     at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89163)\\r\\n>     at Ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89088)\\r\\n>     at ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86037)\\r\\n>     at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45275\\r\\n>     at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3691)\\r\\n\\r\\n> The error occurred in Vo\\r\\n>     in div\\r\\n>     in aa\\r\\n>     in div\\r\\n>     in za\\r\\n>     in div\\r\\n>     in si\\r\\n>     in div\\r\\n>     in li\\r\\n>     in Suspense\\r\\n>     in Wa\\r\\n>     in div\\r\\n>     in div\\r\\n>     in Jo\\r\\n>     in Xr\\r\\n>     in _o\\r\\n>     in Unknown\\r\\n>     in n\\r\\n>     in Unknown\\r\\n>     in div\\r\\n>     in div\\r\\n>     in zi\\r\\n>     in Ge\\r\\n>     in un\\r\\n>     in ba\\r\\n>     in Rc\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nWhen I open the Developement Tool for Chrome i get the error, without doing anythign special sometimes.\\r\\nAfter reloading the frame it only says: Unable to find React on the page.\\r\\nI need to shutdown my whole PC and restart it, then I see the Tool again, till I go onto the next page and it needs to reaload...\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNo crash.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n- Windows 10 Version 1903 (Build 18362.356) 64-bit\\r\\n- Google Chrome Version 77.0.3865.90 64-bit\\r\\n- React Developer Tools (Version created from revision a9cd9a765)\\r\\nIt worked very well some days ago, without any errors.","number":16925,"user":{"login":"AkitoItashi"},"state":"closed","created_at":"2019-09-27T13:32:31Z"},{"id":499405719,"title":"react-devtools: tiny feature request (copy to clipboard related)","body":"Hey guys, great job with the new devtools \ud83d\udcaf perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers. \\r\\n\\r\\n**What is the current behavior?**\\r\\n- Copying data to clipboard stringifies all key-value pairs of an object\\r\\n- When the keys\' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array\\r\\n\\r\\nThis is what was copied:\\r\\n<img width=\\"369\\" alt=\\"Screen Shot 2019-09-27 at 12 24 19\\" src=\\"https://user-images.githubusercontent.com/30755017/65767498-f4496100-e125-11e9-8f8b-3faa4516d0c2.png\\">\\r\\n\\r\\nThis is a pasted version in VSCode:\\r\\n<img width=\\"399\\" alt=\\"Screen Shot 2019-09-27 at 12 24 48\\" src=\\"https://user-images.githubusercontent.com/30755017/65767486-ee538000-e125-11e9-9886-7dcd165c19db.png\\">\\r\\n\\r\\n**What is the desired behavior?**\\r\\n- When I click on \\"Copy to clipboard\\" in react-devtools, my copied object\'s data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format\\r\\n- The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools)\\r\\n<img width=\\"311\\" alt=\\"Screen Shot 2019-09-27 at 12 29 11\\" src=\\"https://user-images.githubusercontent.com/30755017/65767365-99176e80-e125-11e9-98d3-98fd9c4889f9.png\\">\\r\\n\\r\\n","number":16924,"user":{"login":"GavBaros"},"state":"closed","created_at":"2019-09-27T12:02:35Z"},{"id":499403863,"title":"Error: \\"Minified React error ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16923,"user":{"login":"divakar543"},"state":"closed","created_at":"2019-09-27T11:58:03Z"},{"id":499387635,"title":"[react-interactins] FocusTable tabScope handling+tabIndex control","body":"This PR provides `FocusTable` with support for handling keyboard tabbing behavior control. Specifically, when a scope is provided as a prop via `tabScope`, then the `FocusTable` will attempt to automate the control and setting of host component\'s `tabIndex`. This ensures that a single keyboard tab will move to the next browser tab focusable element after the table. Tabbing back into the FocusTable should resume the previously selected cells focus.\\r\\n\\r\\nUnder the hood, we proxy the `tabIndex` descriptor of the given `HTMLElement` and track the `tabIndex` value so we can correctly reset to the right value (similar to how we track `input` values). Otherwise we pragmatically control the value to `-1` when we don\'t want a field to be browser tab focusable.","number":16922,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-27T11:18:06Z"},{"id":499340175,"title":"Error: \\"Minified React error ","body":"\\r\\nAn error was thrown: \\"Minified React error #301; visit https://reactjs.org/docs/error-decoder.html?invariant=301 for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \\"\\r\\n\\r\\nThe error was thrown at hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:61172)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256084\\r\\n    at Vo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256125)\\r\\n    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58828)\\r\\n    at Jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103390)\\r\\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89163)\\r\\n    at Ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89088)\\r\\n    at ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86037)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45275\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3691)","number":16921,"user":{"login":"jpelaa"},"state":"closed","created_at":"2019-09-27T09:32:28Z"},{"id":499323611,"title":"Error: \\"Minified React error ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16920,"user":{"login":"yemkhaung"},"state":"closed","created_at":"2019-09-27T08:58:16Z"},{"id":499307947,"title":"[Feature request] export shallowEqual from shared","body":"In order to determine whether the default use or `React.memo` will pass / fail it\'d be useful to have React export `shallowEqual` from shared in order that this can be inspected / tested. Is there any chance of adding this to the API given the implementation here is important.","number":16919,"user":{"login":"RichieAHB"},"state":"closed","created_at":"2019-09-27T08:24:28Z"},{"id":499300053,"title":"Rename newState to oldState when use reducer","body":"From https://redux.js.org/basics/reducers#handling-actions, this is how `reducer` means :)","number":16918,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-09-27T08:06:02Z"},{"id":499262271,"title":"[Feature Request] Allow useEffect/useLayoutEffect to have previous values","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n**What is the current behavior?**\\r\\nSay I have some count and an effect described to its update:\\r\\n\\r\\n```typescript\\r\\nconst [count, setCount] = useState(0);\\r\\n\\r\\nuseEffect(\\r\\n\\t() => {\\r\\n\\t\\t// I need to do something with the difference of how the count was changed\\r\\n\\t\\t// const diff = count - prevCount;\\r\\n\\t},\\r\\n\\t[count]\\r\\n);\\r\\n```\\r\\nwith current implementation I need to use `useRef` to have previous count:\\r\\n```typescript\\r\\nconst [count, setCount] = useState(0);\\r\\nconst prevCountRef = useRef<number>(0);\\r\\n\\r\\nuseEffect(\\r\\n\\t() => {\\r\\n\\t\\t// I need to do something with the difference of how the count was changed\\r\\n\\t\\tconst diff = count - prevCountRef.current;\\r\\n\\r\\n\\t\\tprevCountRef.current = count;\\r\\n\\t},\\r\\n\\t[count]\\r\\n);\\r\\n```\\r\\nwhich is actually not so bad if I need to track only one diff, right? ;)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSo I would like to have previous dependencies right inside `useEffect` like this:\\r\\n\\r\\n```typescript\\r\\nconst [count, setCount] = useState(0);\\r\\n\\r\\nuseEffect(\\r\\n\\t([prevCount]) => {\\r\\n\\t\\t// I need to do something with the difference of how the count was changed\\r\\n\\t\\tconst diff = count - (prevCount || 0);\\r\\n\\t},\\r\\n\\t[count]\\r\\n);\\r\\n```\\r\\nSo the callback in useEffect gets the same array as dependencies but with previous values.\\r\\nFor first render we can pass to the callback either empty array or undefined.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\"react\\": \\"^16.9.0\\"","number":16917,"user":{"login":"dmytro-lymarenko"},"state":"closed","created_at":"2019-09-27T06:34:06Z"},{"id":499137506,"title":"Remove canonical check in fiber host component","body":"I believe this is a dead branch.\\r\\n\\r\\nI added this code in https://github.com/facebook/react/pull/15126 and I *think* it has always been wrong. At least, I\'m not sure what could trigger it.\\r\\n\\r\\nI think I was pattern matching from this code in NativeMethodsMixin  https://github.com/facebook/react/blob/master/packages/react-native-renderer/src/NativeMethodsMixin.js#L166-L182\\r\\n\\r\\nSimplified: \\r\\n```\\r\\nconst maybeInstance = findHostInstance(this);\\r\\nif (maybeInstance == null) {\\r\\n  return;\\r\\n}\\r\\n\\r\\nif (maybeInstance.canonical) {\\r\\n```\\r\\n\\r\\nThe only thing in the codebase that creates an object with a canonical key is [createInstance in ReactFabricHostConfig](https://github.com/facebook/react/blob/master/packages/react-native-renderer/src/ReactFabricHostConfig.js#L238-L241). `canonical` is only set on Fabric host components, not paper ones.\\r\\n\\r\\nIn order to get that instance, you must call `findHostInstance`. NativeMethodsMixin and ReactNativeComponent both use `findHostInstance` in order to detect whether an instance is created with the paper renderer or the fabric renderer to know which API to call. \\r\\n\\r\\nFiberHostComponent only needs to deal with paper components and the FabricHostComponent only needs to deal with the fabric components, so this check for canonical in paper is unnecessary.\\r\\n\\r\\nWhen I wrote this code I also added tests for calling this function passing an argument created with all three `NativeMethodsMixin`, `ReactNativeComponent`, and a host component. If I add a `throw` to this if statement, none of the tests fail.\\r\\n","number":16914,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-09-26T22:02:59Z"},{"id":499116292,"title":"Critical bug at [server side render], failure when use [Context.Consumer] in [production] mode only.","body":"Hello everyone!\\r\\nThat fix for server side rendering when you use Context.Consumer.\\r\\n\\r\\nIssues for example in react:\\r\\nhttps://github.com/facebook/react/issues/16848\\r\\n\\r\\nIssues for example in react-router:\\r\\nhttps://github.com/ReactTraining/react-router/issues/6789\\r\\nhttps://github.com/ReactTraining/react-router/issues/6704\\r\\n\\r\\nIssues for example in redux-connect:\\r\\nhttps://github.com/makeomatic/redux-connect/issues/137\\r\\n\\r\\nIssues for example in next.js:\\r\\nhttps://github.com/zeit/next.js/issues/7167\\r\\n\\r\\nBug was in `ReactDOMServerRenderer.js` since version `16.6.2` and affects.\\r\\n\\r\\n- `renderToString`\\r\\n- `renderToStaticMarkup` \\r\\n- `renderToNodeStream`\\r\\n- `renderToStaticNodeStream`\\r\\n\\r\\nTo reproduce, only in `production` mode and total bundle, try\\r\\n\\r\\n```\\r\\nconst ThemeContext = React.createContext(\'light\');\\r\\n\\r\\nconst Button = () => {\\r\\n  return (\\r\\n    <ThemeContext.Provider value=\\"dark\\">\\r\\n      <ThemeContext.Consumer>\\r\\n        {theme => <span>{theme}</span>}\\r\\n      </ThemeContext.Consumer>\\r\\n   </ThemeContext.Provider>\\r\\n  )\\r\\n}\\r\\n\\r\\nconst appHTML = ReactDomServer.renderToString(<Button />)\\r\\n\\r\\nconsole.log(appHTML)\\r\\n```\\r\\n\\r\\nAnd you will see just `<span></span>` instead `<span>dark</span>`\\r\\n","number":16913,"user":{"login":"soldovskij"},"state":"closed","created_at":"2019-09-26T21:05:46Z"},{"id":499115146,"title":"Document `additionalHooks` option","body":"Hi!\\r\\n\\r\\nI noticed that there doesn\'t seem to be any documentation about this option for `exhaustive-deps`. Was this a deliberate decision or an oversight? Obviously, feel free to decline this if you don\'t want to do this or this is the wrong place.\\r\\n\\r\\nI recently used this for a custom hook at work and it\'s pretty useful but I\'m a little uneasy about using undocumented features.","number":16912,"user":{"login":"airjp73"},"state":"open","created_at":"2019-09-26T21:03:11Z"},{"id":499111302,"title":"Error: \\"Minified React error ","body":"It was an internal error on my project","number":16911,"user":{"login":"Mohsenazizi"},"state":"closed","created_at":"2019-09-26T20:54:25Z"},{"id":499106724,"title":"Bootstrap select element not rendered with react-router","body":"I am making a basic app in reactjs. I\'ve setup routes for 3 components. The problem is select fields don\'t appear when the component is rendered.\\r\\n\\r\\nThe select fields that have className as \\"selectpicker\\" do not render, they just aren\'t there. They showed up when I removed \\"selectpicker\\" from the className. When using \\"selectpicker\\", they show up when the browser page is reloaded.\\r\\n\\r\\nYou can read more about it here [stackoverflow.com/questions/58116697/bootstrap-select-element-not-rendered-with-react-router?noredirect=1#comment102635378_58116697](url)\\r\\n\\r\\nHere is a sample on codesandbox [ codesandbox.io/s/elegant-platform-5vpq2](url)\\r\\nJUST COPY PASTE THE ABOVE LINKS IN YOUR BROWSER\\r\\nIt is working perfectly on codesandbox but not with visual studio code. The problem arises only when I sure react routing. They work perfectly when i try to render them individually without routes.\\r\\n\\r\\nBelow is a snippet from my code: Component A and B both are almost similar.\\r\\n\\r\\n```import React from \'react\';\\r\\nimport Home from \'./Home\'\\r\\nimport A from \\"./A\\"\\r\\nimport B from \\"./B\\"\\r\\nimport C from \\"./C\\"\\r\\nimport {BrowserRouter as Router, Switch, Link, Route} from \\"react-router-dom\\"\\r\\n\\r\\nclass App extends React.Component{\\r\\n  constructor(){\\r\\n    super()\\r\\n  }\\r\\n    render(){\\r\\n      return(\\r\\n        <div>\\r\\n          <Router>\\r\\n            <ul>\\r\\n              <li><Link to=\\"/\\">TO A</Link></li>\\r\\n              <li><Link to=\\"/page1\\">TO B</Link></li>\\r\\n              <li><Link to=\\"/page2\\">TO C</Link></li>\\r\\n            </ul> \\r\\n            <Switch>\\r\\n              <Route exact path=\'/\' component={A}/>\\r\\n              <Route path=\'/page1\' component={B}/> \\r\\n              <Route path=\\"/page2\\" component={C}/>\\r\\n           </Switch>\\r\\n          </Router>\\r\\n        </div>\\r\\n      )\\r\\n    }\\r\\n}\\r\\n\\r\\nexport default App```\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```{/*Component A*/}\\r\\n\\r\\nimport React from \\"react\\"\\r\\n\\r\\nclass A extends React.component{\\r\\n  constructor(){\\r\\n    super()\\r\\n    this.state={\\r\\n      componentA: \\"\\"\\r\\n    }\\r\\n    this.handleChange = this.handleChange.bind(this)\\r\\n  }\\r\\n\\r\\n  handleChange(event){\\r\\n    const {name, value, type, checked} = event.target\\r\\n    type === \\"checkbox\\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\\r\\n  }\\r\\n\\r\\n  render(){\\r\\n    return(\\r\\n      <div className=\\"form-group row\\">\\r\\n        <label htmlFor=\\"tempid\\" className=\\"col-sm-2 col-form-label\\">Choose an option</label>\\r\\n        <div className=\\"col-sm-10\\">\\r\\n            <select \\r\\n              className=\\"form-control custom-select selectpicker\\"\\r\\n              name = \\"componentA\\" \\r\\n              id = \\"tempid\\"\\r\\n              value = {this.state.componentA}\\r\\n              onChange = {this.handleChange} \\r\\n              required\\r\\n            >\\r\\n              <option value=\\"\\" style={{display:\\"none\\"}} disabled selected>Choose one</option>\\r\\n              <option value=\\"p\\">P</option>\\r\\n              <option value=\\"q\\">Q</option>\\r\\n              <option value=\\"r\\">R</option>\\r\\n              <option value=\\"s\\">S</option> \\r\\n            </select>\\r\\n        </div>\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\nexport default A```\\r\\n\\r\\n\\r\\nFollowing is my index.html file, and i have included the bootstrap and bootstrap-select correctly. Its working fine when rendering the components individually. The problem arose when I started with routing.\\r\\n\\r\\n<!DOCTYPE html>\\r\\n<html lang=\\"en\\"><head>\\r\\n  <meta charset=\\"utf-8\\">\\r\\n\\r\\n  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\r\\n  <meta name=\\"theme-color\\" content=\\"#000000\\">\\r\\n  <meta name=\\"description\\" content=\\"Web site created using create-react-app\\">\\r\\n\\r\\n  <link rel=\\"stylesheet\\" href=\\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\\" integrity=\\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\\" crossorigin=\\"anonymous\\">\\r\\n  <link rel=\\"stylesheet\\" href=\\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.10/css/bootstrap-select.min.css\\">\\r\\n\\r\\n\\r\\n  <title>React App</title>\\r\\n\\r\\n</head>\\r\\n<body>\\r\\n  <noscript>You need to enable JavaScript to run this app.</noscript>\\r\\n  <div id=\\"root\\"></div>\\r\\n\\r\\n  <script src=\\"https://code.jquery.com/jquery-3.3.1.slim.min.js\\" integrity=\\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\\" crossorigin=\\"anonymous\\"><\/script>\\r\\n  <script src=\\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\\" integrity=\\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\\" crossorigin=\\"anonymous\\"><\/script>\\r\\n  <script src=\\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\\" integrity=\\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\\" crossorigin=\\"anonymous\\"><\/script>\\r\\n  <script src=\\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.10/js/bootstrap-select.min.js\\" type=\\"text/javascript\\"><\/script>\\r\\n\\r\\n</body></html>\\r\\n\\r\\n\\r\\n","number":16910,"user":{"login":"abhinandanmadaan"},"state":"closed","created_at":"2019-09-26T20:43:56Z"},{"id":499082844,"title":"expose isHydrating","body":"Added a function on `ReactFiberHydrationContext` to expose `isHydrating` in `ReactDOMFB`","number":16909,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-09-26T19:50:15Z"},{"id":499061883,"title":"eslint-plugin-react-hooks feature request: enforce naming convention for useState()","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThere is currently no rule to enforce the standard naming convention for `useState`.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIt would be great to have a rule to enforce the standard naming convention for `useState()`:\\r\\n\\r\\n```\\r\\nconst [x, setX] = useState(...)\\r\\n```\\r\\n\\r\\nFor example, the rule would consider this an error:\\r\\n\\r\\n```\\r\\nconst [x, setFoo] = useState(...)\\r\\n```\\r\\n\\r\\nThis would ensure that all useState variables followed the same convention, i.e. `${varName}` and `set${upperFirstVarName}`.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nAll versions with hooks\\r\\n\\r\\n**Note**\\r\\n\\r\\nI originally submitted a feature request for eslint-plugin-react: https://github.com/yannickcr/eslint-plugin-react/issues/2417. It was suggested that I make the feature request here instead. I\'m not sure which plugin would be the more appropriate place for this.","number":16908,"user":{"login":"mbrowne"},"state":"closed","created_at":"2019-09-26T19:03:11Z"},{"id":499051088,"title":"[bugfix] Fix false positive render phase update","body":"Need to reset the current \\"debug phase\\" inside the catch block. Otherwise React thinks we\'re still in the render phase during the subsequent event.","number":16907,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-26T18:39:21Z"},{"id":498985459,"title":"Stateless function components cannot have refs.","body":"After applying Route and Link I am facing this problem.\\r\\nStateless function components cannot have refs.\\r\\n\u25b6 22 stack frames were collapsed.\\r\\n./src/index.js\\r\\nsrc/index.js:7\\r\\n   4 | import App from \'./App\';\\r\\n   5 | import registerServiceWorker from \'./registerServiceWorker\';\\r\\n   6 | \\r\\n>  7 | ReactDOM.render( <App />, document.getElementById( \'root\' ) );\\r\\n   8 | registerServiceWorker();\\r\\n   9 | \\r\\n  10 | \\r\\n\\r\\n![Screenshot from 2019-09-26 21-43-49](https://user-images.githubusercontent.com/43892879/65705903-f0c2c500-e0a6-11e9-9332-54c2270b010f.png)\\r\\n","number":16906,"user":{"login":"Saifu0"},"state":"closed","created_at":"2019-09-26T16:15:38Z"},{"id":498937562,"title":"A note on function components default parameters","body":"When you define default parameters for a function component, the component will have brand new parameters on every render (function call) - in case they aren\'t defined.\\r\\nTurns out that by doing this way we are not actually defining `defaultProps` (as possibly wanted) but creating objects in every function call, causing an infinite loop if Hook dependency array relies on the default parameter.\\r\\n\\r\\nMaybe not a real issue here, but found that today and felt there should be a note about this somewhere in the docs.\\r\\n\\r\\n### Relevant code:\\r\\nSee: https://codesandbox.io/s/jest-test-mfz1z?fontsize=14\\r\\n\\r\\n```js\\r\\n\\r\\n// index.test.js:\\r\\nit(\\"renders\\", () => {\\r\\n  const container = render(<SimpleComponent />);\\r\\n\\r\\n  expect(1).toBe(1);\\r\\n});\\r\\n\\r\\n// SimpleComponent.js:\\r\\nimport React from \\"react\\";\\r\\n\\r\\nlet x;\\r\\nlet tries = 0;\\r\\n\\r\\n// a new array will be created in every render \\r\\nexport default function SimpleComponent({ openedList = [] }) {\\r\\n  const [opened, setOpened] = React.useState([]);\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    console.warn({ x, openedList });\\r\\n    console.warn(\\"equality = \\", x === openedList); // always false\\r\\n    x = openedList;\\r\\n\\r\\n    tries = tries + 1;\\r\\n\\r\\n    if (tries > 100) throw new Error(\\"This is an infinite loop\\");\\r\\n\\r\\n    setOpened(openedList);\\r\\n  }, [openedList]);\\r\\n\\r\\n  return null;\\r\\n}\\r\\n\\r\\n```","number":16905,"user":{"login":"melloc01"},"state":"closed","created_at":"2019-09-26T14:51:44Z"},{"id":498916121,"title":"More time between releasing @next and @latest","body":"As a library author, I test against both the `@next` and `@latest` versions of `react` and `react-dom` (as well as 16.3, the oldest version we support). The rationale for that is to know up front if the upcoming version of React is going to break our library. I think this is good practice for everyone involved.\\r\\n\\r\\nUnfortunately, when 16.9 was released, there was only 1 week between promoting the RC to `@next`, and promoting that to `@latest`. Because the last RC broke the way `act` works, I had only 1 week to fix our unit test suite, which was all the sudden mostly failing. In fact we had to wait for `react-testing-library` to be updated to deal with this change.\\r\\n\\r\\nLuckily I was able to scramble and find time to fix this before the final release, but this won\'t always be the case. I imagine other library authors may struggle with this too. As such I would like to see at least a 2 week window between `next` and `latest`. I hope that\'s feasible.\\r\\n\\r\\nPlease advise if there\'s a better way to test for future compatibility.","number":16904,"user":{"login":"ghengeveld"},"state":"open","created_at":"2019-09-26T14:18:06Z"},{"id":498832761,"title":"[react-interactions] Add wrapping support to FocusList/FocusTable","body":"This adds support to `FocusList` and `FocusTable` so that keyboard arrow focus moving can be wrapped back to the other side as requested internally. This also adds an optional `onKeyDown` prop for `TableCell` and `ListItem` so keyboard events can be intercepted.","number":16903,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-26T11:40:00Z"},{"id":498691887,"title":"can ReactDOM.render render to body without warning","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n**feature**\\r\\n**What is the current behavior?**\\r\\nI want render dom struct like [whatwg says:](https://html.spec.whatwg.org/multipage/grouping-content.html#the-main-element)\\r\\n```html\\r\\n<body>\\r\\n  <header>...</header>\\r\\n  <nav>...</nav>\\r\\n  <aside></aside>\\r\\n  <main>...</main>\\r\\n  <footer></footer>\\r\\n</body>\\r\\n```\\r\\nBut there get a warning:\\r\\nindex.js:1375 Warning: render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWithout call `ReactDOM.render` multiple times, can i do this  by strictly following the html specification\uff1f\\r\\n","number":16902,"user":{"login":"whensea"},"state":"closed","created_at":"2019-09-26T06:44:57Z"},{"id":498688624,"title":"Why does parent\'s componentDidMount gets called first, then child\'s?","body":"I thought it was always the case, that first, child\'s `componentDidMount` would be called, and then, parent\'s.\\r\\n\\r\\nHowever, in this example: https://codesandbox.io/s/tender-jones-gpkz3\\r\\n\\r\\nFirst parent\'s `componentDidMount` is called, then Child\'s (check the logs).\\r\\n\\r\\nThis happens _after_ I use this in child:\\r\\n\\r\\n```\\r\\nexport default compose(\\r\\n  withStyles(styles),\\r\\n  withWidth()\\r\\n)(Child);\\r\\n\\r\\n```\\r\\n\\r\\nDoes anyone have explanation why this happens?","number":16901,"user":{"login":"giorgi-m"},"state":"closed","created_at":"2019-09-26T06:36:13Z"},{"id":498632941,"title":"Moving backend injection to the content script","body":"This is our second attempt to make the React Dev Tool Extension compatible with Trusted Types (first attempt was https://github.com/facebook/react/pull/16752). Basically, for websites using Trusted Types, assigning a string to a script src in the context of the web page will trigger a `TrustedScriptURL` violation on this line: https://github.com/facebook/react/blob/master/packages/react-devtools-extensions/src/inject.js#L8\\r\\n\\r\\nOur first attempt was rolled back in https://github.com/facebook/react/issues/16840 because it caused the Components tab to be blank for some users on older browsers. I was able to reproduce the issue in Chromium 69.0.3497.0 on both Ubuntu and Mac.\\r\\n\\r\\nIn this PR, the main change on top of https://github.com/facebook/react/pull/16752 is to set a `targetOrigin` on the `postMessage` call. Without the `targetOrigin` argument, the postMessage was not sent to the content script (confirmed in Chromium 69.0.3497.0). Adding either `\'*\'` or `window.origin` worked for me, so I went with the latter.\\r\\n\\r\\nWith this change, I\'ve tested that\\r\\n- The React DevTools Components tab is working on https://reactjs.org/ in Chromium 69.0.3497.0 and Chrome 79.0.3921.0\\r\\n- Using React DevTools on a React website with Trusted Types enabled, the `TrustedScriptURL` violation was not triggered","number":16900,"user":{"login":"linshunghuang"},"state":"closed","created_at":"2019-09-26T03:21:44Z"},{"id":498589079,"title":"prevent Custom Element authors\' ability to override setAttribute from\u2026","body":"\u2026 being blocked\\r\\n\\r\\nThis prevents React from impeding on Custom Element authors\' ability to override or extend `setAttribute` in their classes. Some authors may wish to do custom handling of input data, which may involve non-string types.\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16899,"user":{"login":"trusktr"},"state":"closed","created_at":"2019-09-26T00:41:33Z"},{"id":498554170,"title":"Add HostComponent type to ReactNative","body":"**Note: This change was already landed to React Native in https://github.com/facebook/react-native/commit/69c38e5a639f34620038ae5724426c92c355e509 so this commit just updates the types in React core to make the next sync not have conflicts.**\\r\\n\\r\\n---------------\\r\\n\\r\\nIn React Native there are three types of \\"Native\\" components.\\r\\n\\r\\n```\\r\\ncreateReactClass with NativeMethodsMixin\\r\\n```\\r\\n```\\r\\nclass MyComponent extends ReactNative.NativeComponent\\r\\n```\\r\\n```\\r\\nrequireNativeComponent(\'RCTView\')\\r\\n```\\r\\n\\r\\nThe implementation for how to handle all three of these exists in the React Native Renderer. Refs attached to components created via these methods provide a set of functions such as\\r\\n```\\r\\n.measure\\r\\n.measureInWindow\\r\\n.measureLayout\\r\\n.setNativeProps\\r\\n```\\r\\n\\r\\nThese methods have been used for our core components in the repo to provide a consistent API. Many of the APIs in React Native require a `reactTag` to a host component. This is acquired by calling `findNodeHandle` with any component. `findNodeHandle` works with the first two approaches.\\r\\n\\r\\nFor a lot of our new Fabric APIs, we will require passing a ref to a HostComponent directly instead of relying on `findNodeHandle` to tunnel through the component tree as that behavior isn\'t safe with React concurrent mode.\\r\\n\\r\\nThe goal of this change is to enable us to differentiate between components created with `requireNativeComponent` and the other types. This will be needed to be able to safely type the new APIs.\\r\\n\\r\\nFor existing components that should support being a host component but need to use some JS behavior in a wrapper, they should use `forwardRef`. The majority of React Native\'s core components were migrated to use `forwardRef` last year. Components that can\'t use forwardRef will need to have a method like `getNativeRef()` to get access to the underlying host component ref.\\r\\n\\r\\nNote, we will need follow up changes as well as changes to the React Renderer in the React repo to fully utilize this new type.\\r\\n","number":16898,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-09-25T22:24:42Z"},{"id":498509313,"title":"DevTools shows unsupported renderer version dialog","body":"Rather than partially supporting v14, DevTools now shows an unsupported dialog with a link to instructions on how to downgrade DevTools to v3:\\r\\n\\r\\n![Screen Shot 2019-09-25 at 1 27 17 PM](https://user-images.githubusercontent.com/29597/65637372-ec0feb00-df98-11e9-8d79-223815f3e6d0.png)\\r\\n\\r\\nI decided on this approach to detecting versions by looking at all v14 and v15 minor releases and by referencing [the old DevTools logic](https://github.com/facebook/react-devtools/blob/d839081f79f681617df7584a8ffd2f4163fa40b9/backend/attachRenderer.js#L24-L76).\\r\\n\\r\\nI tested all minor release of v15 and v16 to ensure that the dialog didn\'t get shown. I tested the latest release of v14 and verified that it did.\\r\\n\\r\\nResolves #16462","number":16897,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-25T20:34:00Z"},{"id":498464528,"title":"Actually return the fallback fiber","body":"The current behavior of `findNativeNodesForFiberID` for a timed-out Suspense is to attempt to find the fallback fiber, and if not `null`, reassign it to `fiber`. Instead, I believe the proper behavior should be to return this non-null fallback fiber (and not fallback to a host fiber search).\\r\\n\\r\\nI found this mistake(?) on lgtm.com ([error](https://lgtm.com/projects/g/facebook/react/snapshot/570203d4d133d2b8d8bd56b0834381f9ce54798a/files/packages/react-devtools-shared/src/backend/renderer.js?sort=name&dir=ASC&mode=heatmap#L1795)) so maybe I\'m wrong, but I can\'t see why `fiber` would be assigned a new value if it\'s never used again.","number":16896,"user":{"login":"hugmanrique"},"state":"closed","created_at":"2019-09-25T18:56:35Z"},{"id":498456209,"title":"[react-interactions] FocusTable nesting fix","body":"This PR fixes an issue where keyboard presses at boundaries of nested FocusTables was not working as expected. Fixed the issue and added a regression test based off internal feedback.","number":16895,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-25T18:38:40Z"},{"id":498342810,"title":"[react-interactions] Add more documentation for a11y components","body":"This adds more internal documentation for the experimental accessibility components that we\'re using internally.","number":16894,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-25T14:58:03Z"},{"id":498308841,"title":"[devtools] Add support for React Scope symbol/number","body":"This adds support for displaying `Scope` for the fiber type rather than it being empty in dev tools. Note: scopes are an experimental feature that we\'re using only internally at FB. I also got rid of the old React Flare symbols that we no longer use anywhere.","number":16893,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-25T14:03:42Z"},{"id":498266108,"title":"[react-interactions] Add initial docs explaining React Scopes","body":"This adds some missing documentation for the experimental React Scopes API. This is for internal usage only.","number":16892,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-25T12:51:31Z"},{"id":498256369,"title":"State not updating in realtime","body":"I am updating state in setState() and the page is rendered correctly, but \\"React Developer Tools\\" is showing previous state.\\r\\nObjects and Arrays are updating in realtime but not \\"boolean / string / number values\\".\\r\\nBut when I close the dev tools window ( not switching tabs ) and reopen it, then only it shows the updated state.\\r\\nI don\'t remember if this was the issue from prev version, but please add realtime state update functionality to it.","number":16891,"user":{"login":"rohan7chaudhary"},"state":"closed","created_at":"2019-09-25T12:32:56Z"},{"id":498246148,"title":"Problem with updating component state in the \\"Components\\" tab of React Developer Tools -  Chrome extension","body":"Hello everyone,\\r\\n\\r\\nI have a problem with Chrome extension -  React Developer Tools, if I change component\'s state it\'s not changing in the dev tools window (as in the screenshot below) I am only able to see arrows with title \\"Reset value\\". \\r\\nDoes somebody know how it could be fixed?\\r\\n\\r\\nThanks a lot for help!\\r\\n\\r\\n![Zrzut ekranu z 2019-09-25 14-06-22](https://user-images.githubusercontent.com/40744326/65599624-8e7e9d00-df9e-11e9-9f5e-4be249278c6d.png)\\r\\n\\r\\n","number":16890,"user":{"login":"marcinszymaszek"},"state":"closed","created_at":"2019-09-25T12:13:45Z"},{"id":498237879,"title":"[react-interactions] Add Portal propagation configuration","body":"This adds Portal propagation configuration support to the new event system. By default responder targets will not propagate through React Portals, unless a `targetPortalPropagation` flag is set to `true` on the responder object.","number":16889,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-25T11:57:51Z"},{"id":498201174,"title":"React dev tools doesn\'t appear in chrome (Ubuntu 18.04.3)","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact dev tools don\'t appear in chrome dev tools\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nDownload latest chrome extension and go to https://reactjs.org, open dev tools\\r\\n\\r\\n**What is the expected behavior?**\\r\\nReact dev tools tab should appear in chrome\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: N/A  \\r\\n\\r\\n```bash\\r\\n\u25b6 lsb_release -a\\r\\nNo LSB modules are available.\\r\\nDistributor ID: Ubuntu\\r\\nDescription:    Ubuntu 18.04.3 LTS\\r\\nRelease:        18.04\\r\\nCodename:       bionic\\r\\n\\r\\n\u25b6 google-chrome --version\\r\\nGoogle Chrome 77.0.3865.75\\r\\n```\\r\\n\\r\\nThis worked in previous versions of chrome/chrome extension, but I\'m not sure when exactly the bug surfaced, since I haven\'t used it in a while.\\r\\n\\r\\nThanks in advance for any help, React is awesome :)","number":16888,"user":{"login":"goldylucks"},"state":"closed","created_at":"2019-09-25T10:40:39Z"},{"id":498149145,"title":"Hook params inside functions are not updated (only for event listeners)","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug(possibly)\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhenever a function is called as the consequence of an `EventListener`, the value of hooks inside that function is not updated.\\r\\n[Demo Hooks Behaviour](https://jsfiddle.net/Saliz/eqtd8x7g/16/)\\r\\n[Demo Class Behaviour](https://jsfiddle.net/Saliz/0m3tw9s1/1/)\\r\\n\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React.**\\r\\nIf you look at the examples, I created some `changeVal` methods which are responsible for adding +1 to `val` in 3 different cases.\\r\\n\\r\\nI call this handler on 3 different occasions:\\r\\n1) button `onClick`\\r\\n2) the eventListener `mouseMove` added to the `window`\\r\\n3) `onMouseMove` property of a div element\\r\\n\\r\\n**changeVal** is a small method like this:\\r\\n* class definition: \\r\\n```js\\r\\nchangeVal = () => {\\r\\n    console.log(\\"value inside changeVal:\\", this.state.val);\\r\\n    this.setState({ val: this.state.val + 1 });\\r\\n};\\r\\n```\\r\\n* functional definition:\\r\\n```js\\r\\nconst changeVal = () => {\\r\\n    console.log(\\"value inside changeVal:\\", val);\\r\\n    setVal(val => val + 1);\\r\\n};\\r\\n```\\r\\n\\r\\nHowever, if I try to `console.log` the value of `val` inside this `changeVal` function,\\r\\n* Class component behaves as expected, and it logs the value of `this.state.val` correctly for all cases\\r\\n* Functional component shows correct `val` for cases `(1)` and `(2)`, however for `(3)` it shows the initial value (0)\\r\\n\\r\\n[Somewhere in docs](https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function) I saw that:\\r\\n\\r\\n> Any function inside a component, including event handlers and effects, \u201csees\u201d the props and state from the render it was created in.\\r\\n\\r\\nI guess this is due to that issue, why is it even a case, because `val` exists in the lexical scope of the function. \\r\\nAlso, this behavior is different from the expected behavior from classes.\\r\\nMoreover, this statement is not completely right, because `onMouseMove` method of `div` is also an event handler, why does it show the correct value, but not `window.addEventListener` shows the wrong value?\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe log inside the function should show the same value in all cases because the scope of the function includes the `val` value\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact = 16.9\\r\\nreact-dom = 16.9\\r\\nI guess this problem has always existed with hooks.\\r\\n","number":16887,"user":{"login":"M-Izadmehr"},"state":"closed","created_at":"2019-09-25T09:03:18Z"},{"id":498136625,"title":"Error: Invalid operand to \'in\': Object expected ==> IE10","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\nGetting \\"_Invalid operand to \'in\': Object expected_\\"  error, in react application, I haven\'t used \'in\' operator throughout my application, it seems while bundling react application operator inserted and caused this issue/error.\\r\\n\\r\\nany help on above issue will be appreciated \\r\\n\\r\\nSimilar issue for IE 11 but fixed now,\\r\\n link -> http://github.com/material-components/material-components-web/issues/2626\\r\\n","number":16886,"user":{"login":"Veerbhadra277"},"state":"closed","created_at":"2019-09-25T08:40:21Z"},{"id":498100563,"title":"Wrong DOM calculations between renders in Firefox","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nUsing `useCallback` through a custom `hook` to measure DOM node offsets, the first render returns wrong values due to yet not applied _styles_, FOUT or related.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nFollowing [this example on docs](https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node), adapting to return _offset_ instead of _bounding rect_, seems that due to yet not applied _styles_, the first `render` gets different measures that the following ones.\\r\\n\\r\\n[Here is a sandbox](https://codesandbox.io/embed/focused-fast-452bc) with a reproduction, where the first render the red `outline`\'s width is large as an `h1` default _styles_ (`display:block` and default _font_) and after `hide/show` it, the `outline` match the `h1` styles.\\r\\n\\r\\n![react](https://user-images.githubusercontent.com/784056/65577787-cbce3500-df74-11e9-9425-c5c42fee69ca.gif)\\r\\n\\r\\nHere is also the question [asked on _StackOverflow_](https://stackoverflow.com/questions/58058965/solve-lifecycle-difference-measuring-dom-nodes-in-react).\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nTo return always the measurement that match the DOM element with styles applied.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nSince I switched to _Firefox_ as my default browser [time ago](https://twitter.com/elrumordelaluz/status/1069885713439752193), thanks to this template _Issue_ question I found the **most interesting part of this bug**: seems to only happen in _Firefox_!\\r\\n\\r\\nIn that case, please let me know if the _issue_ is more related on _browser vendor_ and I\'ll close the issue to migrate in teh correct bug tracker.\\r\\n\\r\\nFollowing there is a _screen capture_ comparing the behaviour between _Safari_ (left one), _Chrom_ (right bottom) and _Firefox_ (right top).\\r\\n\\r\\n![react](https://user-images.githubusercontent.com/784056/65578609-62e7bc80-df76-11e9-8390-c8d91b6c4c98.gif)\\r\\n\\r\\n\\r\\n\\r\\n","number":16885,"user":{"login":"elrumordelaluz"},"state":"closed","created_at":"2019-09-25T07:26:47Z"},{"id":498065369,"title":"unable to toggle true/false in state variables in new version of react dev tools","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16884,"user":{"login":"saipopcornapps"},"state":"closed","created_at":"2019-09-25T05:57:55Z"},{"id":498041160,"title":"These flags are hard coded in our internal config","body":"By hard coding them here they can get properly DCE and don\'t have to be sent to users. The internal config should only have dynamic flags.","number":16883,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-25T04:30:51Z"},{"id":498030556,"title":"Remove enableUserBlockingEvents flag","body":"Seems like this worked out. We can clean up the flag now.\\r\\n","number":16882,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-25T03:45:18Z"},{"id":498025606,"title":"Include tag in begin/complete invariant","body":"Need this to debug it.","number":16881,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-25T03:23:05Z"},{"id":497990716,"title":"Selective Hydration","body":"Because hydration in concurrent mode is yieldy, we can switch hydration priority when new events come in. Selective Hydration gives us the ability to increase priority of roots and suspense boundaries based on what is being interacted with.\\r\\n\\r\\nDiscrete events are replayed in order. They are based an intentional user action so they normally have pretty high priority.\\r\\n\\r\\nReplaying has some quirks given that we don\'t know if preventDefault will be called or not. Normally we allow the default behavior. However, a lot of times we\'ll already have received the data necessary to unblock a boundary. I.e. we\'re CPU bound.\\r\\n\\r\\nThis PR attempts to first synchronously hydrate the path to the discrete target. Only if that fails, do we create a queue to be replayed later.\\r\\n\\r\\nCurrently, hydration of boundaries bump to Normal pri once Suspense thennables resolve which is a bug. However, we probably also want these thennables to schedule work at even higher priority if they\'re blocking discrete events. I\'ll do that in a follow up.","number":16880,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-25T00:50:41Z"},{"id":497976096,"title":"[React Native] Improve errors for invalid ViewConfig getter functions","body":"# Overview\\r\\n\\r\\nImprove error messages around invalid ViewConfig getter functions.\\r\\n\\r\\n# Details\\r\\n\\r\\nAs a followup to #16821, it is unlikely but possible for ViewConfig registry\xa0entries to be corrupted. I would like to surface this as early as possible, and include a little more information in exceptions that could be thrown later on.","number":16879,"user":{"login":"JoshuaGross"},"state":"closed","created_at":"2019-09-24T23:48:11Z"},{"id":497903514,"title":"Update useEditableValue hook to sync external value changes","body":"This PR changes the `useEditableValue` to more intelligently reset the local/editable state value when external value changes.\\r\\n\\r\\nPreviously, the hook initialized local state (in `useState`) to mirror the prop/state value. Updates to the value were ignored though. (Once the state was initialized, it was never updated.) The new hook updates the local/editable state to mirror the external value *unless* there are already pending, local edits being made.\\r\\n\\r\\nNote that this particular change very closely resembles [one of the derived state anti-patterns](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#anti-pattern-erasing-state-when-props-change) outlined in a previous blog post. I think it might still be an acceptable approach for this specific scenario though.\\r\\n\\r\\n### Here is a demo of the (broken) behavior before:\\r\\n![useEditableValue broken before behavior](https://user-images.githubusercontent.com/29597/65546741-f49aef80-decc-11e9-9d21-550c715daf51.gif)\\r\\n\\r\\n### And here is the behavior after this change:\\r\\n![useEditableValue fixed after behavior](https://user-images.githubusercontent.com/29597/65546673-d503c700-decc-11e9-9bbe-258a97c59f53.gif)\\r\\n\\r\\n### Edge case\\r\\nBecause of the way the new hook works, there is a potentially odd edge case, but I think it\'s acceptable given the way the \\"reset\\" button works:\\r\\n![useEditableValue remaining weird edge case](https://user-images.githubusercontent.com/29597/65546490-7a6a6b00-decc-11e9-8def-83560e5ef566.gif)\\r\\n\\r\\nPosting this PR for discussion purposes. Let\'s talk!\\r\\n\\r\\nResolves #16843\\r\\n\\r\\ncc @hristo-kanchev\\r\\n\\r\\n---\\r\\n\\r\\nThis was also broken for other use cases before. The example above was just one of the most awkward cases, but here is another:\\r\\n\\r\\n### Before\\r\\n![useEditableValue before bug](https://user-images.githubusercontent.com/29597/65550502-8fe39300-ded4-11e9-8da3-213a87985f43.gif)\\r\\n\\r\\n### After\\r\\n![useEditableValue after](https://user-images.githubusercontent.com/29597/65550513-9540dd80-ded4-11e9-84c8-389a6fa83c70.gif)","number":16878,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-24T20:19:40Z"},{"id":497792069,"title":"Certain CSS appears different in React","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a *bug*.\\r\\n\\r\\n**What is the current behavior?**\\r\\nCSS appears different in React than in a vanilla HTML/CSS project.\\r\\n  \\r\\nCurrent behavior in React: https://codepen.io/jarodburchill/pen/YzKBMGZ\\r\\n\\r\\n**What is the expected behavior?**\\r\\nExpected behavior: https://codepen.io/jarodburchill/pen/qBWgwPa\\r\\n\\r\\n*Note: the frosting of the div\'s are very different despite the exact same CSS* \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nMost recent version of react.\\r\\n","number":16877,"user":{"login":"jarodburchill"},"state":"closed","created_at":"2019-09-24T16:20:26Z"},{"id":497778290,"title":"[react-interactions] Make FocusList bundle","body":"This make FocusList bundle in the build. Also revises the input to `createFocusTable` and `createFocusList` as the previous relied on internals (which wasn\'t ideal), now it relies on a public object (the scope).","number":16876,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-24T15:54:47Z"},{"id":497738551,"title":"[react-interactions] Add FocusList component","body":"This PR adds the FocusList component, to handle keyboard directional keys to move focus around parts of an application. It is somewhat similar to `FocusTable`, except with `FocusList` the direction is only portrait or landscape. To define this, there is a `portrait` boolean prop. If the `FocusList` is set to use `portrait` then the `up` and `down` keyboard keys will move the focus between the items of the `FocusList`.","number":16875,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-24T14:48:32Z"},{"id":497685053,"title":"[react-interactions] TabFocus -> FocusManager","body":"This PR makes some key alterations to the `TabFocus` component and its tests. It also makes some changes to the `FocusWithin` event responder.\\r\\n\\r\\n## `FocusManager` component\\r\\n- Renames `TabFocus` to `FocusManager`, as this is now a more generic focus handling component, it actually does a job of managing focus within its scope.\\r\\n- Adds `restoreFocus`\\r\\n- Adds `autoFocus`\\r\\n- Change `contain` prop to `containFocus` so its consistent with other props\\r\\n- Ensure any user focus outside of the scope correctly gets restored\\r\\n- Tidied up tests a bit more\\r\\n\\r\\n## `FocusWithin` responder\\r\\n- Adds `continuePropagation` to the focus event\\r\\n- Adds `onBlurWithin` event (needed for `FocusManager`)","number":16874,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-24T13:21:26Z"},{"id":497635505,"title":"[eslint-plugin-react-hooks] allow configuring custom hooks as \\"static\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature/enhancement\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCurrently the eslint plugin is unable to understand when the return value of a custom hook is static.\\r\\n\\r\\nExample:\\r\\n\\r\\n```jsx\\r\\nimport React from \'react\'\\r\\n\\r\\nfunction useToggle(init = false) {\\r\\n  const [state, setState] = React.useState(init)\\r\\n  return [state, React.useCallback(() => { setState(v => !v) }]\\r\\n}\\r\\n\\r\\nfunction MyComponent({someProp}) {\\r\\n  const [enabled, toggleEnabled] = useToggle()\\r\\n\\r\\n  const handler = React.useCallback(() => {\\r\\n    toggleEnabled()\\r\\n    doSomethingWithTheProp(someProp)\\r\\n  }, [someProp]) // exhaustive-deps warning for toggleEnabled\\r\\n\\r\\n  return <button onClick={handler}>Do something</button>\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would like to configure `eslint-plugin-react-hooks` to tell it that `toggleEnabled` is static and doesn\'t need to be included in a dependency array. This isn\'t a huge deal but more of an ergonomic papercut that discourages writing/using custom hooks.\\r\\n\\r\\nAs for how/where to configure it, I would be happy to add something like this to my .eslintrc:\\r\\n\\r\\n```js\\r\\n{\\r\\n  \\"staticHooks\\": {\\r\\n    \\"useToggle\\": [false, true],  // first return value is not stable, second is\\r\\n    \\"useForm\\": true,             // entire return value is stable \\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nThen the plugin could have an additional check [after these 2 checks](https://github.com/facebook/react/blob/8b580a89d6dbbde8a3ed69475899addef1751116/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L228-L231) that tests for custom names.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nAll versions of eslint-plugin-react-hooks have the same deficiency.","number":16873,"user":{"login":"grncdr"},"state":"open","created_at":"2019-09-24T11:45:13Z"},{"id":497457859,"title":"Proposal of recommended config in `eslint-plugin-react-hooks`","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf you are using `eslint-plugin-react-hooks` you need to put rules configuration manually. What if in the next version you will add some more rules?\\r\\nShould everyone who use it after future release add all the **new** rules to config manually?\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI propose instead of instructing on every new rule to create `recommended` [config](https://eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins) as in `eslint-plugin-react`, as follows:\\r\\n```\\r\\nexport default {\\r\\n  rules: {\\r\\n    \'rules-of-hooks\': RuleOfHooks,\\r\\n    \'exhaustive-deps\': ExhaustiveDeps\\r\\n  },\\r\\n  configs: {\\r\\n    recommended: {\\r\\n      plugins: [ \'react-hooks\' ],\\r\\n      parserOptions: {\\r\\n        ecmaFeatures: { jsx: true }\\r\\n      },\\r\\n      rules: {\\r\\n        \'react-hooks/rules-of-hooks\': \'error\',\\r\\n        \'react-hooks/exhaustive-deps\': \'warn\'\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n};\\r\\n```\\r\\nAlso, to instruct to extend instead:\\r\\n```\\r\\nextends: [\\r\\n  \'eslint:recommended\',\\r\\n  \'plugin:react/recommended\',\\r\\n  \'plugin:react-hooks/recommended\'\\r\\n],\\r\\n```","number":16872,"user":{"login":"maximandrews"},"state":"closed","created_at":"2019-09-24T05:06:18Z"},{"id":497387438,"title":"Idle updates should not be blocked by hidden work","body":"Use the special `Idle` expiration time for updates that are triggered at Scheduler\'s `IdlePriority`, instead of `Never`.\\r\\n\\r\\nThe key difference between Idle and Never\xb9 is that Never work can be committed in an inconsistent state without tearing the UI. The main example is offscreen content, like a hidden subtree.\\r\\n\\r\\n\xb9 \\"Never\\" isn\'t the best name. I originally called it that because it \\"never\\" expires, but neither does Idle. Since it\'s mostly used for offscreen subtrees, we could call it \\"Offscreen.\\" However, it\'s also used for dehydrated Suspense boundaries, which are inconsistent in the sense that they haven\'t finished yet, but aren\'t visibly inconsistent because the server rendered HTML matches what the hydrated tree would look like.","number":16871,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-24T00:12:26Z"},{"id":497367120,"title":"[react-interactions] Press with useRef instead of useState","body":"We only need to read and modify the value for the lifetime of the hook. This fixes some internal tests that were failing when replacing PressLegacy with Press.","number":16870,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-23T22:54:38Z"},{"id":497299620,"title":"DevTools FB feature flag system","body":"Adds a basic feature flag system to DevTools extension builds, supporting `stable` and `prerelease` builds. This will enable early testing of prerelease features within the smaller pool of Facebook engineers using DevTools.","number":16869,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-23T20:02:46Z"},{"id":497268872,"title":"[react-interactions] Add no-op stopPropagation + preventDefault to Press","body":"This re-introduces the warning back for `Press` responders for using `preventDefault` and `stopPropagation`. Otherwise the operation on these is a no-op for prod mode.","number":16868,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-23T18:56:30Z"},{"id":497259038,"title":"Fix DevTools v4.1 editable hook regression","body":"Fixes #16859","number":16867,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-23T18:34:35Z"},{"id":497255194,"title":"[react-interaction] Refactor a11y components more","body":"After some internal discussion around the React Interactions a11y components (for internal use only), it was made clear that we should be able to define the scope for these components.\\r\\n\\r\\n- `FocusTable` now accepts a scope implementation on `createFocusTable` factory function.\\r\\n- `TabFocusController` is now `TabFocus`\\r\\n- The focus controller methods are now broken out into their own file\\r\\n- `TabFocus` now accepts a `ReactScope` as a prop to be used","number":16866,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-23T18:26:02Z"},{"id":497239841,"title":"[work loop] Prevent work loop from being inlined","body":"Uses Closure Compiler\'s `@noinline` directive.\\r\\n\\r\\nSee https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#noinline","number":16865,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-23T17:52:06Z"},{"id":497217892,"title":"Revert change to backend injection method from PR #16752","body":"PR #16752 changed how we were injecting the backend script to be done by the content script in order to work around lack of Trusted Type support with the previous approach.\\r\\n\\r\\nThis seems to have caused a regression (#16840) so this PR backs out those changes. Waiting for a couple more confirmations that reverting the change fixes things, but if it does let\'s back it out and revisit TT support.","number":16864,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-23T17:02:15Z"},{"id":497163163,"title":"Expose shared/getComponentName as React.getComponentName","body":"`getComponentName` is a handy helper function to get a component name for 3rd party libraries and custom renderers.\\r\\n\\r\\nTo get a proper component name, we have to deal with React internals like `shared/getComponentNam` does.\\r\\nSo I think it\'s beneficial for 3rd party developers to expose the function.\\r\\nThis PR exposes the API as `React.getComponentName` but it\'s ok to expose the API as an npm package like `react-component-name` instead of adding a function into `React`.\\r\\n\\r\\n","number":16863,"user":{"login":"koba04"},"state":"closed","created_at":"2019-09-23T15:16:51Z"},{"id":497132046,"title":"[react-interaction] Tweak Focus Table component","body":"This PR cleans up some of the variables names in `FocusTable` that were not named right. It also adds `preventDefault` to keyboard presses that move focus and ensures we use `elementType` for the scope fibers to ensure reconciliation doesn\'t discard scopes on each update.","number":16862,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-23T14:26:31Z"},{"id":497075735,"title":"hooks bug with react-router","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nA bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen I change the route, hooks bug comes.\\r\\nclick the `button`.\\r\\n\\r\\nexample below:\\r\\nhttps://codesandbox.io/embed/react-router-basic-o3x2k\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIf it\'s not a bug, how can i fix it?\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n- React@latest \\r\\n - Chrome76.0.3809.100 \uff0864)\\r\\n- React-router-dom@latest","number":16861,"user":{"login":"Zaynex"},"state":"closed","created_at":"2019-09-23T12:45:27Z"},{"id":497060625,"title":"[react-interactions] Fix typo in FocusTable","body":"There was a typo and I muddled up the `key` for how arrow keys are pressed. Opps.","number":16860,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-23T12:14:23Z"},{"id":497033785,"title":"DevTools: hooks with numbers, strings or booleans show as undefined","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe `useState` hook\'s value is shown as `undefined` in React DevTools if the value is a string or a number. Clicking on the bug icon prints the correct values to console.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/21111572/65421153-b7225d80-de0b-11e9-8a69-a31836a41c7c.png)\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React.**\\r\\nCodeSandbox: https://codesandbox.io/s/keen-colden-syb7r\\r\\nDirect link to page so you can see the DevTools: https://2km9v.csb.app/\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe DevTools should show the correct value of the hook.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.9.0.\\r\\nGoogle Chrome [Version 77.0.3865.90 (Official Build) (64-bit)] running on Linux x64.\\r\\n\\r\\nThis issue appeared after version 4.1.0 (9/19/2019) of the DevTools Chrome extension.\\r\\n\\r\\nMight be same bug as #16843 but this one appears without any complicated reproduction steps.\\r\\n","number":16859,"user":{"login":"cxcorp"},"state":"closed","created_at":"2019-09-23T11:12:10Z"},{"id":497005519,"title":"Calling setState multiple times in hooks causes the previous state to be overridden","body":"[online link](https://codesandbox.io/s/condescending-clarke-nn93u)\\r\\n\\r\\nThe fetch is a public method of querying data and needs to be independent\\r\\nSince setState is asynchronous, the visible value of setState in fetch is still false\\r\\nHow can I put the popover to close and update the list without changing the fetch method?\\r\\n\\r\\nthanks advance! :)","number":16858,"user":{"login":"Sayid1"},"state":"closed","created_at":"2019-09-23T10:06:19Z"},{"id":496903689,"title":"help","body":"\\r\\n![issue](https://user-images.githubusercontent.com/50655436/65403704-a53ebb80-de07-11e9-91bc-0d6580315913.png)\\r\\n\\r\\n","number":16857,"user":{"login":"victorykong"},"state":"closed","created_at":"2019-09-23T05:40:15Z"},{"id":496899535,"title":"Difference between setState({ a: 1 }) and state.a = 1; setState({});","body":"I\'m confused with it. Some days ago, I developed a React app as demo. I found these two ways \\r\\nto update can lead to the same effect.\\r\\n\\r\\n`\\r\\nsetState({ a: 1 });\\r\\n`\\r\\n\\r\\nand\\r\\n\\r\\n`\\r\\nstate.a = 1; setState({});\\r\\n`\\r\\n\\r\\nSo is this matter?\\r\\n\\r\\n","number":16856,"user":{"login":"zxh19890103"},"state":"closed","created_at":"2019-09-23T05:21:52Z"},{"id":496853979,"title":"bug on ie/edge v16.9 (scheduler) ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBUG\\r\\n\\r\\n**What is the current behavior?**\\r\\nIt seems that scheduler v0.15.0 use methods from window (e.g., `setTimeout`, `requestAnimationFrame`) that are not properly bound to `window`, breaking in ie11 and edge with react-dom v16.9.0.\\r\\nProblem in PRODUCTION mode (development is ok).\\r\\n\\r\\n**Repo (full example)**: https://github.com/artola/react-bug\\r\\n\\r\\nSee [README](https://github.com/artola/react-bug/blob/master/README.md) in the repo for a detailed explanation.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should work as in previous versions, e.g., v16.8.6\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nOffending version: v16.9.0\\r\\nAffected browsers: ie (confirmed ie11, might be others) and edge (17 might be others).\\r\\nFormer versions v16.0.0 up to v16.8.6 working properly.\\r\\n","number":16855,"user":{"login":"artola"},"state":"closed","created_at":"2019-09-23T00:34:37Z"},{"id":496845291,"title":"[npm:create-react-class] Support PureComponent & propTypes","body":"https://reactjs.org/docs/react-without-es6.html\\r\\n\\r\\nThe \\"react without es6\\" page should give explanation on how to use the equivalent of a `PureComponent` using `create-react-class` npm package. I Couldn\'t figure out how to do it. The page seems to be very outdated with new react features.\\r\\n\\r\\nIf it\'s not possible to do, this issue should be a feature request.","number":16854,"user":{"login":"pjebs"},"state":"closed","created_at":"2019-09-22T23:12:45Z"},{"id":496814472,"title":"[eslint-plugin-react-hooks] Fix cyclic caching for loops containing a\u2026","body":"This MR Fixes a bug (#16832) in the `eslint-plugin-react-hooks`, where caching of cycles is performed wrong in some cases.\\r\\n\\r\\n**Example:** https://codesandbox.io/s/exciting-bhabha-mqj7q\\r\\n\\r\\n**Description**\\r\\nIf the user uses an `if` statement inside a `for ... of obj` statement, and uses a correct hook afterwards, the eslint shows an *error* that:\\r\\n`React Hook \\"${hook}\\" is called conditionally. React Hooks must be called in the exact same order in every component render.`\\r\\n\\r\\n**Reports**\\r\\nI guess that it is already known issue because, inside the [ESLintRulesOfHooks.js - L562](https://github.com/facebook/react/blob/master/packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js#L562), it is already known that in some cases caching of cyclic paths in code path, might result in the wrong errors.\\r\\n\\r\\nAlso (#16832) reports this case too.\\r\\n\\r\\n**Reason**\\r\\nEslint uses `CodePathSegment` which is similar to doubly linked list. Based on the `CodePathSegment` AST different types of cyclic segments might happen. In the special case of [ForInStatement](https://eslint.org/docs/developer-guide/code-path-analysis#forinstatement) there are two paths from obj identifier to the next segment. In such a graph, in order to traverse all the paths from start to end, we need to not only remember the current segment, but also the whole path. \\r\\n\\r\\nThe current code uses a simple caching just by name of segments (and not the list of segment history) as a result, whenever it faces a cycle, it breaks the cycle by returning 0. As a result, there might be several conditions, where the segment might have cyclic and not cyclic paths to end. In the current code, if the first path is cyclic all the non-cyclic ones are thrown away. And depending on the starting point and endpoint of AST, we might have different results.\\r\\n\\r\\nFor example for the demo code, the result of  [RulesOfHooks.js - L404](https://github.com/facebook/react/blob/master/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L291), the value of all `allPathsFromStartToEnd` is calculated as `2` instead of `3`\\r\\n\\r\\n**Solution**\\r\\nWe need caching of responses and also saving cyclic paths for later logic, In the new code, I added a different caching mechanism, which also remembers the path history too. The effect of the performance is still negligible because even for [the most difficult test](https://github.com/facebook/react/blob/master/packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js#L293) including `1099511627776` paths from start to end of the code, it only increases the time about 0.3s on MacBookPro.","number":16853,"user":{"login":"M-Izadmehr"},"state":"closed","created_at":"2019-09-22T18:23:33Z"},{"id":496806233,"title":"Suspense + useEffect?","body":"Hello all,\\r\\n\\r\\nFirst time around here so thank you very much for all your great work and providing this technology to the rest :)\\r\\n\\r\\nI want to report a bug even though maybe is the expected behaviour. I have a component that is wrapped by Suspense. Such component has a useEffect hook that throws a promise and such promise is not caught by anybody. However, if I throw the promise in the \\"body\\" of the function, that is, not inside the hook, it works as expected.\\r\\n\\r\\nI have created this stupid sandbox, my expected behaviour would be to have WAITING forever...\\r\\n\\r\\nhttps://codesandbox.io/embed/suspense-with-useeffect-u14br\\r\\n\\r\\nThank you in advance.","number":16852,"user":{"login":"javierguzman"},"state":"closed","created_at":"2019-09-22T17:12:23Z"},{"id":496773771,"title":"Adding `.displayName` documentation to Contexts","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nRequest a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nNo documentation is to be found on the property `.displayName` of Contexts. See https://github.com/facebook/react/issues/12695#issuecomment-456979851\\r\\n\\r\\n**What is the expected behavior?**\\r\\nDocumentation on the property\\r\\n\\r\\nI wanted to configure the name displayed in React DevTools of my `<Context.Provider />` and `<Context.Consumer />` components but found nothing in the documentation. Finally found this issue and a solution: https://github.com/facebook/react/issues/12695#issuecomment-456979851\\r\\n\\r\\nSimply adding it to the documentation would be nice :)\\r\\n","number":16851,"user":{"login":"yachaka"},"state":"closed","created_at":"2019-09-22T12:36:43Z"},{"id":496755423,"title":"Context api is re initial reducer in interval ","body":"@gaearon \\r\\n**Do you want to request a *feature* or report a *bug*?*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\ni have this context settings \\r\\n\\r\\n```\\r\\nexport const BalanceContext = createContext();\\r\\nexport const BalanceStateProvider = ({reducer, initialState, children}) => (\\r\\n    <BalanceContext.Provider value={useReducer(reducer, initialState)}>\\r\\n        {children}\\r\\n    </BalanceContext.Provider>\\r\\n);\\r\\n\\r\\nexport const useBalanceStateValue = () => useContext(BalanceContext);\\r\\n```\\r\\nthen i wrap my component with provider :\\r\\n\\r\\n```\\r\\n<LoginStateProvider initialState={initialState} reducer={reducer}>\\r\\n                        <BalanceStateProvider initialState={initialBalanceState}\\r\\n                                              reducer={balanceReducer}>\\r\\n                                                      <App/>\\r\\n                        </BalanceStateProvider>\\r\\n</LoginStateProvider>\\r\\n```\\r\\n\\r\\ninside App : \\r\\n\\r\\n    const [balances, dispatch] = useBalanceStateValue();\\r\\n    const [auth,] = useLoginStateValue();\\r\\n    setInterval(()=>{\\r\\n        console.log(\\"Balances from Context \\",balances)\\r\\n    },3000)\\r\\n\\r\\nit shows context api , then initial value . and repeated it , \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nit has to show just context value , not initial values . \\r\\n\\r\\n`\\r\\nthe value inside of devtools is correct \\r\\n`\\r\\n","number":16850,"user":{"login":"nimahkh"},"state":"closed","created_at":"2019-09-22T09:38:05Z"},{"id":496741791,"title":"Why I can\'t render ?!","body":"I have an error in this code\\r\\nI don\'t know why it doesn\'t render...\\r\\nI\'m on Firefox 69.0.1 (64 bits) and Windows 10.\\r\\n\\r\\n```\\r\\n<!DOCTYPE html>\\r\\n<html lang=\\"en\\" dir=\\"ltr\\">\\r\\n  <head>\\r\\n    <meta charset=\\"utf-8\\">\\r\\n    <title></title>\\r\\n  </head>\\r\\n  <body>\\r\\n    <div id=\\"root\\"></div>\\r\\n\\r\\n    <script src=\\"https://unpkg.com/react@16/umd/react.development.js\\" crossorigin><\/script>\\r\\n    <script src=\\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\\" crossorigin><\/script>\\r\\n    \\r\\n    <script>\\r\\n    ReactDOM.render(\\r\\n      <div>Hello world</div>,\\r\\n      document.getElementById(\'root\')\\r\\n    );\\r\\n    <\/script>\\r\\n  </body>\\r\\n</html>\\r\\n```\\r\\nThis simple code doesn\'t work... help.\\r\\n","number":16849,"user":{"login":"JeremyMeissner"},"state":"closed","created_at":"2019-09-22T07:01:10Z"},{"id":496648692,"title":"React DOM SSR crashes since React-Dom 16.6.2","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI\'ve setup an SSR configuration using ReactDOM.renderToString() method with react-apollo, and it throws an Invariant violation as the following, with no more information about:\\r\\n\\r\\n<img width=\\"297\\" alt=\\"Captura de pantalla 2019-09-21 a la(s) 6 29 37\\" src=\\"https://user-images.githubusercontent.com/33379285/65372722-36136c80-dc39-11e9-8342-90369c2055e5.png\\">\\r\\n\\r\\nEverything returns to normal when downgrading to react-dom@16.6.1\\r\\n\\r\\n*My SSR App component*\\r\\n\\r\\n<img width=\\"600\\" alt=\\"Captura de pantalla 2019-09-21 a la(s) 6 33 24\\" src=\\"https://user-images.githubusercontent.com/33379285/65372762-b9cd5900-dc39-11e9-9045-143146e0baf9.png\\">\\r\\n\\r\\n*Things I\'ve tried*\\r\\n\\r\\n- I have changed the react-dom package to serve the development version (./cjs/react-dom-server.node.development.js), just for debugging, and when importing that version, everything works fine, but when I return to the production version (./cjs/react-dom-server.node.production.min.js) the same error appears.\\r\\n\\r\\n- I removed one by one, every component wrapping my `<App/>`, and the one that seems to be causing the error is the `<AuthProvider>`, which is a context implementation of mine. By removing some things on that component, i figured out that is a problem within a HOC provided by react-apollo, but I don\'t know exactly what it is because it doesn\'t show me any information.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nI actually do not have any way to reproduce it quickly.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nRender correctly the website.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact - 16.9.0\\r\\nReact-DOM - 16.9.0\\r\\nBrowsers - Safari and Chrome (tested)\\r\\n\\r\\nWorking if downgrading to React-DOM 16.6.1\\r\\n","number":16848,"user":{"login":"ernestognw"},"state":"open","created_at":"2019-09-21T12:03:22Z"},{"id":496628517,"title":"it is a Hook BUG 2?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nwhen i click twice , that only add once\\r\\n\\r\\nhttp://jsfiddle.net/jLsephbr/","number":16847,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-09-21T08:06:21Z"},{"id":496625581,"title":"it is a Hook BUG?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nFooNo dit not work\\r\\n\\r\\nhttp://jsfiddle.net/kag0n7L3/\\r\\n\\r\\n\\r\\nthe FooNo and FooYes different :is the Bar in Foo Inside or outside\\r\\n\\r\\nand i used the rules-of-hooks\\r\\n\\r\\n","number":16846,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-09-21T07:30:29Z"},{"id":496526473,"title":"\u201cDefinition for rule \'@typescript-eslint/consistent-type-assertions\' was not found\u201d","body":"Hi,\\r\\n\\r\\nThere is a bug in the Create-react-app CLI.\\r\\nCurrently if you use and old package.json that has the : react-scripts: ^3.1.1 version. \\r\\nand you run npm i and then try to rum the site (npm start) you get the following error:\\r\\n\\r\\n\u201cDefinition for rule \'@typescript-eslint/consistent-type-assertions\' was not found\u201d\\r\\n\\r\\nI solved this by deleting the node_module entirely, then I updated my package.json file to use the \\"react-scripts: 3.1.2\\" version. then i run the npm i again, and it fixed the issue.\\r\\n\\r\\nIt looks like the new create-react-app doesn\'t backward support the react-scripts: 3.1.1 version.\\r\\n\\r\\nPlease check this ASAP since I already see posts in StackOverflow, meaning a lot of people are going to encounter this issue.\\r\\n\\r\\nThanks.","number":16845,"user":{"login":"arielvol"},"state":"closed","created_at":"2019-09-20T20:09:10Z"},{"id":496451283,"title":"[DevTools] Hotfix: Fixed element tree sorting when we have an array of entries.","body":"Fixes: #16843 \\r\\n\\r\\nDescription:\\r\\nThe bug was caused due to the use of `Object.entries` in the `InspectedElementTree` component.\\r\\n\\r\\nWe aren\'t taking into account that the `data` prop could change and that the `data` `entries` could be an array.\\r\\n\\r\\nIf we removed the second entry out of three entries in total the index will shift and thus remove the last one which is the incorrect one.\\r\\n\\r\\n@bvaughn Could you check this out? Thanks!\\r\\n","number":16844,"user":{"login":"hristo-kanchev"},"state":"closed","created_at":"2019-09-20T16:50:27Z"},{"id":496351326,"title":"DevTools: showing wrong state","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nVisual bug: showing wrong state; so user cant use devtools for debugging\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/wizardly-lewin-dlw5k\\r\\nhttps://dlw5k.csb.app/\\r\\n\\r\\n1) Open https://dlw5k.csb.app/\\r\\n2) Open browser dev tools\\r\\n3) select \\"Components\\", click on \\"App\\", expand `selectedPairs` of `State`\\r\\n4) select 3+ currencies from the list on the page. State is proper for now\\r\\n5) uncheck any not last box. \\r\\nDevtools will remove the last from the list.\\r\\nUncheck something once more, and again just last item will disappear.\\r\\n\\r\\n6) Click on \'bug\' icon (\\"Log this component data to the console\\") \\r\\nExpand data, \'State\' is ok. So just a visual bug?\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nDevtools should update State properly.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact Developer Tools: 4.1.0 (9/19/2019)\\r\\nBrowser: Google Chrome 76.0.3809.132 (64bit)\\r\\nOS: Windows 7 Professional SP1 64bit\\r\\n","number":16843,"user":{"login":"Kogoruhn"},"state":"closed","created_at":"2019-09-20T13:24:58Z"},{"id":496221895,"title":"Rename experimental react-ui => react-interactions","body":"Neither is intended as an actual name. It\'s a placeholder.\\r\\n\\r\\nBut ReactUI is something we might actually wanna use in the future. Using it as a codename now can make it more difficult to use later \\"for real\\". As we know, codenames leak and get a life of their own.\\r\\n\\r\\nIs `react-interactions` the perfect name? No. But that\'s the point. If we started using it as a codename, let\'s keep it that way. And I guess it\'s OK to put windowing stuff there too until we figure out another place for it.","number":16842,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-20T08:36:03Z"},{"id":496188159,"title":"Change Focus or minimize child browser window using portals not working","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nUsing react portals not able to blur the child browser window, I am able to close that window, but not able to minimize or change focus from child window to parent window.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe focus should change from child window to parent window or in case of blur child window should be minimize.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact v16.3\\r\\nOS - Window 10 and Ubuntu 18\\r\\nNot tried on previous versions of react\\r\\n\\r\\nHere is the sample code on codesand box\\r\\nhttps://codesandbox.io/s/react-browser-portals-4uhii\\r\\n","number":16841,"user":{"login":"anujengg"},"state":"closed","created_at":"2019-09-20T07:14:02Z"},{"id":496183053,"title":"React dev tools not showing (blank)","body":"i was working with it a while ago but now it will only show nothing in the Components tab. I tried everything, reinstalled or even try on a different browser. I even restarted my PC. \\r\\n![Screenshot from 2019-09-20 14-53-15]\\r\\n\\r\\n![Screenshot from 2019-09-20 14-53-15](https://user-images.githubusercontent.com/41131879/65306178-5dc1f080-dbb7-11e9-85e1-f3c7319ddd59.png)\\r\\n","number":16840,"user":{"login":"aaronchua13"},"state":"closed","created_at":"2019-09-20T07:00:25Z"},{"id":496150138,"title":"why not ReactElement compile to object but a funciton call(React.createElement)","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n```js\\r\\n//as we know\\r\\nconst ReactElement = <Wrap />\\r\\n//this will compile to\\r\\nconst ReactElement = React.createElement(Wrap)\\r\\n//and, why dont we further on,  direct,  compile it to the result of the function call\\r\\nconst ReactElement = {\\r\\n    $$typeof: Symbol(react.element),\\r\\n    type:Wrap,\\r\\n    ....\\r\\n}\\r\\n```\\r\\n","number":16839,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-09-20T05:18:28Z"},{"id":496063675,"title":"Create eslint rule to ask devs to specify 2nd parameter of useEffect/etc.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nI don\'t want to call it a bug, but more of a suggestion and open to discussion!\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI was debugging an issue on a webapp today where if you typed a character into an input element within a modal, the element would immediately lose focus and further keypresses won\'t go into the input (not the best UX!)\\r\\n\\r\\nAfter looking at keyboard event handlers, focus, blur, etc. and not finding answers, I eventually drilled it down to this:\\r\\n\\r\\n```typescript\\r\\nimport * as React from \'react\'\\r\\nimport * as ReactDOM from \'react-dom\'\\r\\nimport { useRef, useEffect } from \'react\'\\r\\n\\r\\nconst portalRootEl = document.getElementById(\'#top\')!\\r\\n\\r\\nexport const Portal = ({ children }) => {\\r\\n  const containerElement = useRef(document.createElement(\'div\'))\\r\\n\\r\\n  useEffect(() => {\\r\\n    const el = containerElement.current\\r\\n    portalRootEl.appendChild(el)\\r\\n\\r\\n    return () => {\\r\\n      portalRootEl.removeChild(el)\\r\\n    }\\r\\n  })\\r\\n\\r\\n  return ReactDOM.createPortal(children, containerElement.current)\\r\\n}\\r\\n```\\r\\n\\r\\nThe issue was useEffect\'s 2nd parameter should\'ve been an empty list (i.e. `[]`) to prevent the portal being destroyed and recreated every single time.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI know this can be attributed to developer error, but perhaps encouraging engineers to specify the 2nd argument can help prevent very hard to detect and pernicious bugs like this.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8 but anything with hooks really","number":16838,"user":{"login":"khoomeister"},"state":"closed","created_at":"2019-09-19T22:58:51Z"},{"id":496003627,"title":"[react-ui] Improve consistency of Tap responder","body":"Makes sure that touch events with modifier keys behave the same way as other\\r\\npointer types (i.e., does not call `onTapStart` if the gesture begins with a\\r\\nmodifier key held down)","number":16837,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-19T20:12:13Z"},{"id":495989579,"title":"Safari (macOS) Text fields are unable to receive input","body":"While teaching myself react I\'ve run into an issue where I am unable to type any text into text inputs but only in macOS Safari (and latest Technology Beta). \\r\\nEvery other browser I\'ve tried (Firefox Dev, Opera Dev, Chrome) it behaves as expected. \\r\\n\\r\\nHopefully it\'s not just me doing something wrong (which it probably is) but I figured I\'d report it anyway considering it\'s only affecting a single browser... \\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nSafari only (macOS): Text fields are unable to receive input at all. eventHandlers are not even being called.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI\'ve tried to simplify it as much as I can, sorry it\'s not the most simplest example but here\'s my CodeSandbox (https://codesandbox.io/s/unfortunate-broken-panda-bd708)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe 2 input fields should be able to receive text.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.9 and 16.8 tested and confirmed to be not working in macOS 10.14.6 (18G95) _Safari Version 12.1.2 (14607.3.9)_ and _Safari Technology Preview Release 92 (Safari 13.1, WebKit 14609.1.4)_\\r\\n","number":16836,"user":{"login":"curxxx"},"state":"closed","created_at":"2019-09-19T19:38:52Z"},{"id":495882130,"title":"DevTools: \\"Show only components where...\\" instead of just \\"Hide components where\\"","body":"I wonder whether is it in the plan to do the inverse of hiding components that match the filters, which is \\"show only components where match the filters\\"?\\r\\n\\r\\nI am currently doing a negative lookahead regex filter to achieve the behavior: https://twitter.com/lihautan/status/1174239606612647941. \\r\\n\\r\\nI am willing to work on it if this is a good feature to have.","number":16835,"user":{"login":"tanhauhau"},"state":"closed","created_at":"2019-09-19T15:43:15Z"},{"id":495800563,"title":"[DevTools] Remove Welcome dialog","body":"\\"Fixes\\" https://github.com/facebook/react/issues/16475 by removing the welcome screen, as it\'s been enough time for people to auto-upgrade. It still sucks that there are cases where prefs aren\'t persisted, but let\'s at least remove the dialog.\\r\\n\\r\\nTest plan:\\r\\n\\r\\n<img width=\\"1312\\" alt=\\"Screen Shot 2019-09-19 at 2 31 26 PM\\" src=\\"https://user-images.githubusercontent.com/810438/65248516-2df8e700-daea-11e9-99d3-15786742e98c.png\\">\\r\\n","number":16834,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-19T13:29:16Z"},{"id":495772417,"title":"[react-ui] Add preventDefault+ to Keyboard + update a11y components","body":"This PR is a sort of spiritual follow up to https://github.com/facebook/react/pull/16822. Here are the changes outlined in this PR:\\r\\n\\r\\n- Keyboard responder now provides `preventDefault` and `continuePropagation` to the user event. Keyboard still does not propagate to other keyboard responders by default, but provides a method to allow it to continue and extra level. I had to update tests respectfully, as we previous used the return value from the event (which was a bit confusing).\\r\\n- Keyboard responder now does not `preventDefault` any events by default. Instead, the user can optionally control this by calling `preventDefault` like already done on the web. The `Press` responder has been updated to ensure that the same standard behavior exists as before.\\r\\n- The accessibility components have been updated to properly make use of this new functionality.","number":16833,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-19T12:38:07Z"},{"id":495739299,"title":"eslint-plugin-react-hooks: \'Hook is being called conditionally\' error outside condition","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBUG (possibly)\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe plugin is showing this error:\\r\\n\\r\\n>React Hook \\"useState\\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return? (react-hooks/rules-of-hooks)eslint\\r\\n\\r\\nBut I don\'t think I\'m calling any hooks conditionally.\\r\\n\\r\\nThe code:\\r\\n\\r\\nhttps://codesandbox.io/s/exciting-bhabha-mqj7q\\r\\n\\r\\n```\\r\\nfunction App(props) {\\r\\n  const someObject = { propA: true, propB: false };\\r\\n\\r\\n  for (const propName in someObject) {\\r\\n    if (propName === true) {\\r\\n      console.log(\\"something\\");\\r\\n    } else {\\r\\n      console.log(\\"whatever\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // THE PLUGIN ERROR MSG ON THIS useState\\r\\n  const [myState, setMyState] = useState(null);\\r\\n\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <h1>Hello CodeSandbox</h1>\\r\\n      <h2>Start editing to see some magic happen!</h2>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/43407798/65239956-10bb1d00-dad8-11e9-88b9-ec517cd17645.png)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe plugin wouldn\'t show the error in this situation.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/43407798/65240081-5a0b6c80-dad8-11e9-8692-a9974342130e.png)\\r\\n\\r\\n","number":16832,"user":{"login":"cbdeveloper"},"state":"open","created_at":"2019-09-19T11:26:39Z"},{"id":495643128,"title":"Plans for handling `hidden` differently","body":"In one of talks about react Suspense [dan mentioned](https://youtu.be/6g3g0Q_XVb4?t=1650) that `<div hidden={true} />` would be deprioritized by react but still rendered if it has the time.\\r\\n\\r\\nIn his example he used it to prerender content that was seemingly part of another page. However in another talk by andrew it was used to [prerender tabs](https://youtu.be/ByBPyMBTzM0?t=1742). The second showcase is incorrect according to the [living standard for this attribute](https://html.spec.whatwg.org/multipage/interaction.html#the-hidden-attribute):\\r\\n\\r\\n> The hidden attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use hidden to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation \u2014 one could equally well just show all the form controls in one big page with a scrollbar.\\r\\n\\r\\nI don\'t necessarily agree with the reasoning given in the spec but I\'m more interested if the core team is aware of this conflict and if there are plans to resolve this somehow or simply ignore it.","number":16831,"user":{"login":"eps1lon"},"state":"closed","created_at":"2019-09-19T08:14:31Z"},{"id":495595843,"title":"Merge pull request #7 from facebook/master","body":"SeptUpdate\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16830,"user":{"login":"kambleaa007"},"state":"closed","created_at":"2019-09-19T06:18:26Z"},{"id":495587270,"title":"Merge pull request #1 from facebook/master","body":"update\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16829,"user":{"login":"kambleaa007"},"state":"closed","created_at":"2019-09-19T05:51:04Z"},{"id":495564656,"title":"React Hooks get image height before render / hook behavior inside asynchronous event handlers","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nClarification on how hooks behave inside event handlers\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI\'m looking to get image heights before I render them, and it seems like the behavior of the hooks change when used in Event Handlers (or other asynchronous functions).\\r\\n\\r\\n```js\\r\\nconst { data, loading, error } = useQuery(GET_ARTICLES)\\r\\n\\r\\nconst [preloadedImageHeights, setPreloadedImageHeights]: any = useState([])\\r\\n\\r\\n    useEffect(() => {\\r\\n        data &&\\r\\n            data.message.map((message: Message) => {\\r\\n                if (message.image != undefined) {\\r\\n                    let image = new Image()\\r\\n                    image.src = message.image\\r\\n                    image.onload = () => checkOnload(message.image!)\\r\\n                }\\r\\n            })\\r\\n    }, [data])\\r\\n\\r\\n    const checkOnload = (url: string) => {\\r\\n        console.log(\\"I just loaded!\\", url)\\r\\n        setPreloadedImageHeights([...preloadedImageHeights, url])\\r\\n    }\\r\\n\\r\\n    useEffect(() => {\\r\\n        console.log(\\"preloadedImageHeights\\", preloadedImageHeights)\\r\\n    }, [preloadedImageHeights])\\r\\n```\\r\\n\\r\\nThe hooks override the previous data, despite using the correct `[...item, newItem]` syntax - meaning there\'s definitely something wrong with my understanding of how they work.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect this to return something that looks like this;\\r\\n\\r\\n```js\\r\\npreloadedImageHeights [\\"url1\\", \\"url2\\", \\"url3\\" /* and so on */]\\r\\n```\\r\\n\\r\\nBut instead, I see that it\'s overridden each time.\\r\\n\\r\\n```js\\r\\npreloadedImageHeights [\\"url1\\"]\\r\\npreloadedImageHeights [\\"url2\\"]\\r\\npreloadedImageHeights [\\"url3\\"]\\r\\n```\\r\\n\\r\\nMy thinking is that I\'m messing up the hooks by putting them in that loop - but it\'s not clear to me how this can be done with hooks.\\r\\n\\r\\nBut, what confuses me is that if I add the following button, and click it, it behaves normally.\\r\\n\\r\\n```js\\r\\n<button onClick={() => checkOnload(\\"potato\\")}>Potato</button>\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.9","number":16828,"user":{"login":"ARMATAV"},"state":"closed","created_at":"2019-09-19T04:21:30Z"},{"id":495523928,"title":"[react-ui/events] Tap responder API changes","body":"This patch limits the `onTap*` callbacks to the primary pointer button. Auxiliary button and modified primary button interactions call `onAuxiliaryTap`, cancel any active tap, and preserve the native behavior.\\r\\n\\r\\nThis makes it easier to use `Tap` for primary pointer interactions while providing a basic way to record auxiliary taps for analytics, etc.","number":16827,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-19T01:16:46Z"},{"id":495394906,"title":"ESLint: exhaustive-deps rule doesn\'t catch useCallback issue","body":"This is a bug report in the form of a PR. I could add the fix, but I just want to make sure that I\'m not misunderstanding something. This test fails because the code doesn\'t give any warnings, but it should.\\r\\n\\r\\nSpecifically this should give a warning:\\r\\n\\r\\n```javascript\\r\\nconst debouncedCb = useCallback(debounce(cb, {wait: 300}), []);\\r\\n```\\r\\n\\r\\nMore context: https://twitter.com/kentcdodds/status/1174382572052180992\\r\\n\\r\\nLet me know if you\'d like me to continue with fixing this or if I\'m missing something.","number":16825,"user":{"login":"kentcdodds"},"state":"closed","created_at":"2019-09-18T18:48:09Z"},{"id":495292066,"title":"[Fresh] Always remount classes","body":"Class components should never attempt to preserve state.\\r\\n\\r\\nNormally this was already being handled by the Fresh Runtime. It chooses whether to put type in `updatedFamilies` (re-render) or `staleFamilies` (re-mount) based on whether it has `.prototype && .prototype.isReactComponent`. This is usually sufficient.\\r\\n\\r\\nThere are some corner cases where it isn\'t sufficient though. Such as recently deprecated factory components. They \\"look\\" like functions, but their fibers are tagged as a Class. I just spent an hour debugging a Fast Refresh issue in VR code which was caused by old Relay using factory components and hitting this.\\r\\n\\r\\nWhile we don\'t want to support deprecated components, fixing this is easy and may also help with other corner cases we may encounter in the future. Like a second level of defense.","number":16823,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-18T15:15:11Z"},{"id":495290094,"title":"[react-ui] Remove event object warnings","body":"This might be a bit controversial, but one that I\'ve spent the last few weeks considering quite a bit. Today, we don\'t allow for the new event system to supply methods on the event object to do `preventDefault` and `stopPropagation`. The reasoning for this was based a few important points:\\r\\n\\r\\n1. Events are used in hooks, and hooks aren\'t meant to be able to affect if another event hook triggers or doesn\'t.\\r\\n2. We want to be able to determine during server-side render what events should be prevented and propagated when it comes to replaying the events during client-side hydration.\\r\\n3. For RN, the idea is that we can tell the native side this information declaratively ahead of time.\\r\\n\\r\\n## Propagation\\r\\n\\r\\nWe already have a form of `stopPropagation` in the current event system. The `Keyboard` responder, which has a way of basically doing `stopPropagation` (the return value can allow for propagation). Given that we\'ve not run into that many issues with keyboard, this kind of already means that point 1 above was probably not needed. The hooks themselves still work, it\'s just their callbacks that are affected, and that doesn\'t actually invalidate the Rules of Hooks after-all.\\r\\n\\r\\n## Preventing native behaviour\\r\\n\\r\\nThere is a very important use-cases for where we want to be able to conditionally `preventDefault` at runtime \u2013 when handling user focus management.  In the cases where we want to \\"control\\" where focus goes using keyboard input, we `preventDefault` on the key that is being pressed so native focus doesn\'t fire. However, what if we don\'t want to control the focus? There\'s no way to conditionally switch of preventing the native event part way through a key press. I also noticed that we end up having all these complex abstractions to try and work around the fact that we have these constraints in place, often ending up generating far more code in the process.\\r\\n\\r\\n## What about event replaying?\\r\\n\\r\\nIt would be ideal to know ahead of time if something gets prevent defaulted or not, but it feels like we\'re building all this complex architecture just to handle a bunch of event replaying cases. Keyboard input probably shouldn\'t even be replayed, and that\'s one of the main cases where you need conditional propagation and preventing of default behaviour. Pointer events should probably always prevent default, or at least always be declaratively known \u2013 so at least they make sense when replaying. Things like scroll should ideally never be prevented, as it leads to a terrible UX.\\r\\n\\r\\n## What about RN?\\r\\n\\r\\nHandling of keyboard on RN is another tricky case. I\'m not sure of the best way forward here. It gets even more complex because it would be nice in an ideal world for this problem space to be handled in part with Fabric, where we can yield to JS without causing as much of an issue as there is today without Fabric.","number":16822,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-18T15:11:59Z"},{"id":495227101,"title":"[React Native] Fix for view config registrations","body":"## Overview\\r\\nThis change fixes a behavior in the React Native view config registry which would hide errors when registering components.\\r\\n\\r\\n## Details\\r\\nBefore this change, even if we failed to register the view config for any reason (e.g. the events are invalid), we would still clear the callback for the view config.\\r\\n\\r\\nThis means, the next time that a user renders the component and we check for the view config, we would show this error:\\r\\n\\r\\n> View config not found for name Slider\\r\\n\\r\\nThis error is wrong. The real error is masked (and may never be shown, if the registration happened before error handling is set up), and may be something like:\\r\\n\\r\\n> Event cannot be both direct and bubbling: topChange\\r\\n\\r\\nThis PR fixes this behavior by clearing the view config callback only after the view config is successfully registered.\\r\\n\\r\\n## Screen\\r\\n<img width=\\"756\\" alt=\\"Screen Shot 2019-09-18 at 2 28 04 PM\\" src=\\"https://user-images.githubusercontent.com/2440089/65152802-94193780-da20-11e9-84d6-2d8c6e92912f.png\\">\\r\\n\\r\\n## Test\\r\\n\\r\\n- Added test that fails without this change","number":16821,"user":{"login":"rickhanlonii"},"state":"closed","created_at":"2019-09-18T13:28:50Z"},{"id":495186540,"title":"[react-core] Do not null fiber.sibling in detachFiber","body":"We encountered an issue internally when using `findDOMNode` and the changes introduced in https://github.com/facebook/react/pull/16807. Specifically, setting the fiber `sibling` field to `null` is problematic in that it runs into this invariant:\\r\\n\\r\\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberTreeReflection.js#L213-L214\\r\\n\\r\\nWe traverse through the children of the fiber by going from fiber to fiber using `sibling`. Doing this, we encounter a child fiber that has been detatched earlier and thus has no sibling anymore, but the code for `findCurrentFiberUsingSlowPath` expects it should.\\r\\n\\r\\nWe need to revisit this, but for now, let\'s revert this specific change. I\'ll also try and make a repro when I get a chance and put in a follow up.","number":16820,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-18T12:12:51Z"},{"id":495171147,"title":"A property from parent component does not update realtime on a child functional component","body":"**Beginner question: not sure if this is an issue with react or with my code. I\'m basically asking for help.**\\r\\n\\r\\n**Current behavior**\\r\\n\\r\\nI have a property that I pass down to a child component that does not update in real time.\\r\\n\\r\\nExample:\\r\\n\\r\\n```ES6\\r\\nclass Parent extends Component {\\r\\n  state = {\\r\\n    sampleProp = true\\r\\n  }\\r\\n  render() {\\r\\n    <Fragment>\\r\\n      <Child sampleProp={this.state.sampleProp} />\\r\\n      <TouchableOpacity onPress={() => this.setState({sampleProp: sampleProp ? false : true})}>\\r\\n        {/* button content */}\\r\\n      </TouchableOpacity>\\r\\n    </Fragment>\\r\\n  }\\r\\n}\\r\\n\\r\\nconst Child = ({sampleProp}) => {\\r\\n  // some useState hooks\\r\\n  console.log(sampleProp) // if at this point sample prop is true...\\r\\n\\r\\n  const onClick = React.useCallback(\\r\\n    () => {\\r\\n      console.log(sampleProp) // this is false on first click then true on subsequent clicks\\r\\n      // update some state\\r\\n    },\\r\\n    [stateVariable]\\r\\n  )\\r\\n\\r\\n  return (\\r\\n    <TouchableOpacity onPress={() => onClick()}>\\r\\n      {/* update some state */}\\r\\n    </TouchableOpacity>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nBasing from the code above, the value of `sampleProp` in the child component is equal to the one in parent but when I update its value from the parent, then I click on `onClick` from the child, I get the previous value of `sampleProp`. I don\'t know what I\'m doing wrong because I am a beginner with React JS","number":16819,"user":{"login":"redeguzman-gbf"},"state":"closed","created_at":"2019-09-18T11:39:26Z"},{"id":495163809,"title":"Error: \\"Could not find commit data for root \\"1\\" and commit 6\\" - ReactDevTools","body":"React Dev Tools - Profiler\\r\\nDescribe what you were doing when the bug occurred:\\r\\nWas debugging in Storybook\\r\\n1. Changed the value in dropdown from WrapStory to Root\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16722)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293893)\\r\\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:294128)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in Al\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16818,"user":{"login":"aravindballa"},"state":"closed","created_at":"2019-09-18T11:22:37Z"},{"id":495017510,"title":"Wrong warning message is shown","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBUG\\r\\n**What is the current behavior?**\\r\\nWrong warning message is shown\\r\\n![image](https://user-images.githubusercontent.com/19818679/65120957-13e8d700-da0c-11e9-8289-e5ed7e5fe422.png)\\r\\n![image](https://user-images.githubusercontent.com/19818679/65120992-206d2f80-da0c-11e9-948d-c7ab494879cf.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\ngithub file: [github file](https://github.com/kambleaa007/AshITech-ReactJS-Redux-ReactRouter-Heroku-OAuth-CircleCI/blob/ba131c0608e3b3f0027fd771db789ae0685133bf/src/components/DishDetailComponent.js)\\r\\n\\r\\nsandbox: [sandbox](https://codesandbox.io/s/xenodochial-fast-34ftl?fontsize=14&hidenavigation=1&theme=dark)\\r\\n\\r\\nwrite simple functional componenet, put return method NOT render,\\r\\nwarning tells its render,\\r\\nactually its not render, its return method \\r\\n\\r\\n**What is the expected behavior?**\\r\\nShould tell, its return method of something.....\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n  \\"name\\": \\"confusion\\",\\r\\n  \\"version\\": \\"0.1.0\\",\\r\\n  \\"private\\": true,\\r\\n  \\"dependencies\\": {\\r\\n    \\"bootstrap\\": \\"4.0.0\\",\\r\\n    \\"bootstrap-social\\": \\"5.1.1\\",\\r\\n    \\"cross-fetch\\": \\"2.1.0\\",\\r\\n    \\"font-awesome\\": \\"4.7.0\\",\\r\\n    \\"gh-pages\\": \\"^2.0.1\\",\\r\\n    \\"mdbreact\\": \\"^4.18.0\\",\\r\\n    \\"prop-types\\": \\"15.6.0\\",\\r\\n    \\"react\\": \\"^16.4.0\\",\\r\\n    \\"react-animation-components\\": \\"3.0.0\\",\\r\\n    \\"react-dom\\": \\"^16.4.0\\",\\r\\n    \\"react-popper\\": \\"0.9.2\\",\\r\\n    \\"react-redux\\": \\"5.0.7\\",\\r\\n    \\"react-redux-form\\": \\"1.16.8\\",\\r\\n    \\"react-router-dom\\": \\"4.2.2\\",\\r\\n    \\"react-scripts\\": \\"1.1.4\\",\\r\\n    \\"react-transition-group\\": \\"2.3.0\\",\\r\\n    \\"reactstrap\\": \\"5.0.0\\",\\r\\n    \\"redux\\": \\"3.7.2\\",\\r\\n    \\"redux-logger\\": \\"3.0.6\\",\\r\\n    \\"redux-thunk\\": \\"2.2.0\\"","number":16817,"user":{"login":"kambleaa007"},"state":"open","created_at":"2019-09-18T06:33:36Z"},{"id":494998933,"title":"React remount hooks when using throw promise and suspence","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** \\r\\nNot sure if that is by design or a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n```\\r\\nfunction MyComponent() {\\r\\n    const [state, setState] = useState(() => { console.log(\\"init\\"); return \\"some state\\"; });\\r\\n    const promise = getOrFetch(\\"/some/api\\");\\r\\n    if (!promise.completed /* let imagine you can do this */) { console.log(\\"waiting\\"); throw promise; }\\r\\n    console.log(\'rendering\');\\r\\n}\\r\\n```\\r\\nthe result in the console is:\\r\\ninit\\r\\nwaiting\\r\\ninit\\r\\nwaiting\\r\\ninit\\r\\nrendering\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI expect hooks mounting will happen once even when using throw promise and suspense. looking at the console logs you can see that each time we thrown to suspence the hooks are remounting. I expect the console log be like:\\r\\ninit\\r\\nwaiting\\r\\nwaiting\\r\\nwaiting\\r\\nrendering\\r\\n\\r\\n In order to achivie a hook like behavior I will need to implement it by myself using the __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED (and I would like to keep my job)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nlatest, chrome, windows","number":16816,"user":{"login":"hugo972"},"state":"closed","created_at":"2019-09-18T05:36:28Z"},{"id":494992910,"title":"Any Material UI responsive theme available compatible with next js","body":"I have to implement my project functionality into a responsive theme. So please suggest me a material UI responsive theme compatible with next js.\\r\\n\\r\\nThanks.","number":16815,"user":{"login":"ankitpatelinitio"},"state":"closed","created_at":"2019-09-18T05:15:15Z"},{"id":494896874,"title":"[Flare] Focus has too limited a set of keys that set isGlobalFocusVisible","body":"At [/packages/react-ui/events/src/dom/Focus.js#L140](https://github.com/facebook/react/blob/3af05de1aaed309f8146bc53f9a4b4d785abdd3f/packages/react-ui/events/src/dom/Focus.js#L140), only `\'Enter\'`, `\' \'` and `Tab`, with no modifier keys, will set `isGlobalFocusVisible = true` so that the next element to receive focus will update to display its `isFocusVisible` state. \\r\\n\\r\\n```jsx\\r\\n/* ... */\\r\\n    case \'keydown\':\\r\\n    case \'keyup\': {\\r\\n      const nativeEvent = event.nativeEvent;\\r\\n      const focusTarget = state.focusTarget;\\r\\n      const {key, metaKey, altKey, ctrlKey} = (nativeEvent: any);\\r\\n      const validKey =\\r\\n        key === \'Enter\' ||\\r\\n        key === \' \' ||\\r\\n        (key === \'Tab\' && !(metaKey || (!isMac && altKey) || ctrlKey));\\r\\n\\r\\n      if (validKey) {\\r\\n        state.pointerType = \'keyboard\';\\r\\n        isGlobalFocusVisible = true;\\r\\n        if (\\r\\n          focusTarget !== null &&\\r\\n          context.isTargetWithinResponderScope(focusTarget)\\r\\n        ) {\\r\\n          callback(true);\\r\\n        }\\r\\n      }\\r\\n      break;\\r\\n    }\\r\\n/* ... */\\r\\n```\\r\\n\\r\\nThis ignores a number of other keys that commonly trigger focus changes like Arrow keys, Home, End, for navigating radio buttons, toolbars, tab lists, list boxes, and Escape, for closing a dialog or popover. \\r\\n\\r\\nThe [WICG/focus-visible polyfill](https://github.com/WICG/focus-visible/blob/master/src/focus-visible.js#L109) treats any keyboard event as valid. This may be going a bit too far, because any keyboard interaction, regardless of whether focus changed will render the `:focus-visible` style. \\r\\n\\r\\nA somewhat better approach may be to treat form elements that take text input, like `textarea`, `input[type=text]`, `input[type=number]`, etc., as a special case, where keys that input text or change the cursor position do not change the `isGlobalFocusVisible` state.","number":16814,"user":{"login":"majornista"},"state":"closed","created_at":"2019-09-17T23:07:21Z"},{"id":494827102,"title":"Error: \\"Could not find commit data for root \\"259\\" and commit 1\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. In React Profiler, under bar chart, clicked one of the components\\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16722)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293893)\\r\\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:294128)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in Al\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16813,"user":{"login":"scottmccreary"},"state":"closed","created_at":"2019-09-17T20:08:55Z"},{"id":494816027,"title":"expose isHydrating on host config/ReactDOM","body":"As part of an experiment, this PR moves `isHydrating` from ReactFiberHydrationContext to a ref on the host configs that support hydration (ie: react-dom and react-noop). It also exposes the same ref on react-dom\'s \\"internal\\" export. We will remove this export in the near future.","number":16812,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-09-17T19:43:57Z"},{"id":494798816,"title":"[react-ui] Fix bundle name [hotfix]","body":"It should be `ReactTabFocus` not `TabFocus`.","number":16811,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-17T19:04:07Z"},{"id":494762224,"title":"Release script filters DevTools NPM packages","body":"Tested by publishing [CI build 44948](https://circleci.com/gh/facebook/react/44948) as canary `0.0.0-b4b8a349a`","number":16810,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-17T17:44:54Z"},{"id":494748878,"title":"[scheduler][profiler] Start time of delayed tasks","body":"Fixes a bug in the Scheduler profiler where the start time of a delayed tasks is always 0.","number":16809,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-17T17:16:14Z"},{"id":494717483,"title":"DevTools: Updating numeric state through incrementer/decrementer doesn\'t render the updated value ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a *Bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf there is a state variable that holds a number, updating it via incrementer/decrementer doesn\'t render the updated value in the component. Instead it only updates if you focus (click) onto the field and press Enter.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe incrementer/decrementer should render the updated value without having to focus onto the field and press Enter.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact Devtool: 4.0.6\\r\\nBrowser: Firefox Dev 70.0b6 (64-bit)\\r\\n\\r\\n(Timer state variable updates the value in Session)\\r\\n![hfo_19](https://user-images.githubusercontent.com/17070403/65059248-46a2b900-d993-11e9-8a29-ec382c5f755f.gif)","number":16808,"user":{"login":"13thThief"},"state":"closed","created_at":"2019-09-17T16:08:22Z"},{"id":494678829,"title":"[react-core] Clear more properties in detachFiber","body":"This PR aims at tackling some potentially retained memory after a fiber gets detached. To do this, we clear down more fields on the fiber to be `null` in `detachFiber`.","number":16807,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-17T15:00:29Z"},{"id":494659991,"title":"[react-ui] FocusGrid -> ReactFocusTable + tweaks and fixes","body":"This PR is the continuation of work for the experimental React Accessibility components. Notably, this PR changes:\\r\\n\\r\\n- Rename `FocusGrid` -> `ReactFocusTable` to better reflect that it handles keyboard interactions (arrow keys) with layout matching that of a static table.\\r\\n- Adds support for getting the props from a scope.\\r\\n- Fixes a bunch of Flow issues\\r\\n- Adds a `onNavigateOut` prop that can be used on FocusTables to control the behavior when a user keyboard interactions out of a table\'s bounds. The callback provides the `direction` and a helper method to select another table of the same type.","number":16806,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-17T14:28:58Z"},{"id":494590272,"title":"useState and ES module","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nA bug, more a question\\r\\n\\r\\n**What is the current behavior?**\\r\\nI can\'t make `useState` to work when using ES module browser scripts.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI\'m trying to make a minimal working exemple of `useState` hook but from an ES module script tag\\r\\n\\r\\nmy `index.html` file:\\r\\n```html\\r\\n<html>\\r\\n  <head>\\r\\n    <script src=\\"https://unpkg.com/react@16/umd/react.development.js\\" crossorigin><\/script>\\r\\n    <script src=\\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\\" crossorigin><\/script>\\r\\n  </head>\\r\\n  <body>\\r\\n\\r\\n    <div id=\\"root\\"></div>\\r\\n\\r\\n    <script async type=\\"module\\">\\r\\n      import MyComponent from \'/dist/index.js\'\\r\\n      ReactDOM.render(MyComponent(), document.getElementById(\'root\'))\\r\\n    <\/script>\\r\\n\\r\\n  </body>\\r\\n</html>\\r\\n```\\r\\n\\r\\nI get the following error:\\r\\n```js\\r\\nreact.development.js:1621 Uncaught (in promise) Invariant Violation: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\r\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\r\\n2. You might be breaking the Rules of Hooks\\r\\n3. You might have more than one copy of React in the same app\\r\\n```\\r\\n\\r\\nHere is the source of my component:\\r\\n(There is no import react in the source, React is not included in the ES build, I only have one instance of React which is the one included in the html script tag bellow)\\r\\n```javascript\\r\\nexport default function Example() {\\r\\n  const [count, setCount] = React.useState(0);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <p>You clicked {count} times</p>\\r\\n      <button onClick={() => setCount(count + 1)}>\\r\\n        Click me\\r\\n      </button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nThis is the basic ES module I generate with `rollup` to include in the html file, don\'t know if that helps:\\r\\n```js\\r\\n(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = \'//\' + (location.host || \'localhost\').split(\':\')[0] + \':35729/livereload.js?snipver=1\'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, \'script\');\\r\\nfunction _slicedToArray(arr, i) {\\r\\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\\r\\n}\\r\\n\\r\\nfunction _arrayWithHoles(arr) {\\r\\n  if (Array.isArray(arr)) return arr;\\r\\n}\\r\\n\\r\\nfunction _iterableToArrayLimit(arr, i) {\\r\\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \\"[object Arguments]\\")) {\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  var _arr = [];\\r\\n  var _n = true;\\r\\n  var _d = false;\\r\\n  var _e = undefined;\\r\\n\\r\\n  try {\\r\\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\\r\\n      _arr.push(_s.value);\\r\\n\\r\\n      if (i && _arr.length === i) break;\\r\\n    }\\r\\n  } catch (err) {\\r\\n    _d = true;\\r\\n    _e = err;\\r\\n  } finally {\\r\\n    try {\\r\\n      if (!_n && _i[\\"return\\"] != null) _i[\\"return\\"]();\\r\\n    } finally {\\r\\n      if (_d) throw _e;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return _arr;\\r\\n}\\r\\n\\r\\nfunction _nonIterableRest() {\\r\\n  throw new TypeError(\\"Invalid attempt to destructure non-iterable instance\\");\\r\\n}\\r\\n\\r\\nfunction Example() {\\r\\n  var _React$useState = React.useState(0),\\r\\n      _React$useState2 = _slicedToArray(_React$useState, 2),\\r\\n      count = _React$useState2[0],\\r\\n      setCount = _React$useState2[1];\\r\\n\\r\\n  return React.createElement(\\"div\\", null, React.createElement(\\"p\\", null, \\"You clicked \\", count, \\" times\\"), React.createElement(\\"button\\", {\\r\\n    onClick: function onClick() {\\r\\n      return setCount(count + 1);\\r\\n    }\\r\\n  }, \\"Click me\\"));\\r\\n}\\r\\n\\r\\nexport default Example;\\r\\n```\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nchrome, react@16, react-dom@16\\r\\n","number":16805,"user":{"login":"larafale"},"state":"closed","created_at":"2019-09-17T12:23:35Z"},{"id":494583970,"title":"[react-a11y] Add react-ui/accessibility to bundle build","body":"In order to test the experimental accessibility components internally at FB, we need to be able to build the latest components so they get included in our syncs. This includes an accessibility bundle so we can test this out internally. Also, I made sure that our mappings for FB externals gets re-written appropriately, as our internal system won\'t recognise a `react-ui` package.","number":16804,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-17T12:09:50Z"},{"id":494547473,"title":"React makes react-native app crash while navigating.","body":"The react native app is crashing, getting the following error.\\r\\n```com.facebook.react.common.JavascriptException: TypeError: undefined is not an object (evaluating \'o.routes\')\\r\\nThis error is located at:\\r\\nin P\\r\\nin RCTView\\r\\nin l\\r\\nin Styled(l)\\r\\nin RCTView\\r\\nin l\\r\\nin Styled(l)\\r\\nin o\\r\\nin Connect(o)\\r\\nin n\\r\\nin n\\r\\nin withCachedChildNavigation(n)\\r\\nin Unknown\\r\\nin v\\r\\nin RCTView\\r\\nin AndroidDrawerLayout\\r\\nin k\\r\\nin o\\r\\nin Unknown\\r\\nin v\\r\\nin P\\r\\nin n\\r\\nin RCTView\\r\\nin RCTView\\r\\nin RCTView\\r\\nin u\\r\\nin o\\r\\nin P\\r\\nin RCTView\\r\\nin RCTView\\r\\nin n\\r\\nin RCTView\\r\\nin n\\r\\nin n\\r\\nin Unknown\\r\\nin v\\r\\nin P\\r\\nin RCTView\\r\\nin l\\r\\nin Styled(l)\\r\\nin t\\r\\nin Connect(t)\\r\\nin l\\r\\nin y\\r\\nin S\\r\\nin RCTView\\r\\nin RCTView\\r\\nin c, stack:\\r\\nt@1798:1483\\r\\ngetStateForAction@1798:1604\\r\\nP@415:823\\r\\nSn@92:30120\\r\\nOr@92:45887\\r\\nna@92:72881\\r\\nra@92:73371\\r\\nOa@92:80972\\r\\nWa@92:80310\\r\\nUe@92:83367\\r\\nDe@92:13673\\r\\nWe@92:13846\\r\\nreceiveTouches@92:14605\\r\\nvalue@28:3311\\r\\n<unknown>@28:822\\r\\nvalue@28:2565\\r\\nvalue@28:794\\r\\nat com.facebook.react.modules.core.ExceptionsManagerModule.showOrThrowError(ExceptionsManagerModule.java\\r\\n  at com.facebook.react.modules.core.ExceptionsManagerModule.reportFatalException (ExceptionsManagerModule.java:38)\\r\\n  at java.lang.reflect.Method.invoke (Native Method)\\r\\n  at com.facebook.react.bridge.JavaMethodWrapper.invoke (JavaMethodWrapper.java:372)\\r\\n  at com.facebook.react.bridge.JavaModuleWrapper.invoke (JavaModuleWrapper.java:158)\\r\\n  at com.facebook.react.bridge.queue.NativeRunnable.run (Native Method)\\r\\n  at android.os.Handler.handleCallback (Handler.java:907)\\r\\n  at android.os.Handler.dispatchMessage (Handler.java:105)\\r\\n  at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage (MessageQueueThreadHandler.java:29)\\r\\n  at android.os.Looper.loop (Looper.java:216)\\r\\n  at com.facebook.react.bridge.queue.MessageQueueThreadImpl$4.run (MessageQueueThreadImpl.java:232)\\r\\n  at java.lang.Thread.run (Thread.java:784)```","number":16803,"user":{"login":"rushikeshc7"},"state":"closed","created_at":"2019-09-17T10:48:19Z"},{"id":494496202,"title":"Survey on Pull Request Prioritization","body":"Dear Pull Requests integrators,\\r\\nWe are an international group of researchers investigating Pull Requests management activities. We implemented an automated approach, named CARTESIAN, for prioritizing Pull Requests (PRs) received by an open-source project according to the likelihood of acceptance/response. We would like to evaluate whether CARTESIAN can help integrators when reviewing PRs. \\r\\nAs we noticed that your project receives many PRs daily, we have taken the liberty of contacting you. Thus, we experimented CARTESIAN on Your projects, to help you in prioritizing PRs. To know more about these results, please fill in the form below. \\r\\nSurvey form link: https://forms.gle/AiAeCVUcN6FFN2o89     \\r\\nYour participation is voluntary and confidential. We kindly request you, ONLY to INTEGRATORS, to participate in this study which is expected to take about 15 minutes of your time. You might withdraw at any time.\\r\\nBest regards,\\r\\nMuhammad Ilyas Azeem, National Engineering Research Center of Fundamental Software, Chinese Academy of Sciences, China\\r\\nAndrea Di Sorbo, University of Sannio, Italy\\r\\nSebastiano Panichella, Zurich University of Applied Science, Switzerland\\r\\nAlexander Serebrenik, Eindhoven University of Technology, The Netherlands","number":16802,"user":{"login":"IlyasAzeem"},"state":"closed","created_at":"2019-09-17T09:05:26Z"},{"id":494348811,"title":"[suspense][error handling] Inline renderRoot and fix error handling bug","body":"Follow-up to work loop refactor in #16743.\\r\\n\\r\\nAfter the recent changes, the `isSync` argument to `renderRoot` is only used in a single place, to determine whether to call `workLoop` or `workLoopSync`. All other forked behavior was lifted into `performConcurrentWorkOnRoot` and `performSyncWorkOnRoot`. So, this goes one step further and inlines `renderRoot` into its callers.\\r\\n\\r\\nMost of the changes here are copy-pasting and moving stuff around. The high level flow is essentially the same. I split the work into small commits to help with reviewing.\\r\\n\\r\\nThe final commit is unrelated, but I\'ve included it because it fixes the test I added in #16800. The fix relies on the `handleError` function I extracted as part of this refactor PR. I could also submit a separate fix that\'s independent of this PR; however, since it\'s not a super urgent bug, and I was planning to do these refactors regardless, I think it\'s fine to group these.\\r\\n\\r\\nFixes #16800","number":16801,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-17T01:08:04Z"},{"id":494345739,"title":"[suspense][error handling] Add failing unit test","body":"Covers an edge case where an error is thrown inside the complete phase of a component that is in the return path of a component that suspends. The second error should also be handled (i.e. able to be captured by an error boundary.\\r\\n\\r\\nThe test is currently failing because there\'s a call to `completeUnitOfWork` inside the main render phase `catch` block. That call is not itself wrapped in try-catch, so anything that throws is treated as a fatal/unhandled error.\\r\\n\\r\\nI believe this bug is only observable if something in the host config throws; and, only in legacy mode, because in concurrent/batched mode, `completeUnitOfWork` on fiber that throws follows the \\"unwind\\" path only, not the \\"complete\\" path, and the \\"unwind\\" path does not call any host config methods.\\r\\n\\r\\nI have a fix, but it overlaps with a refactoring PR that I\'m also working on, so I\'m going to stack it on top of that.","number":16800,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-17T00:53:31Z"},{"id":494329434,"title":"Warning system refactoring (part 1)","body":"Step 1 of the refactoring proposed in https://github.com/facebook/react/issues/16753\\r\\n\\r\\nIt\'s pretty much the minimum for now, to make it easier to merge. The `toLowPriorityWarnDev` matcher usage checks still mention the `toWarnDev` name, though. It can be fixed by making the matcher name also an argument to the factory, or the matcher could be forked instead of using a factory.","number":16799,"user":{"login":"Jessidhia"},"state":"closed","created_at":"2019-09-16T23:46:17Z"},{"id":494298971,"title":"[react-devtools-shared] Added string type check for object name prop in getDisplayName function","body":"Fixes issue #16685\\r\\n\\r\\nI\'ve added a small fix in ```getDisplayName``` function from ```utils.js``` file for the case when ```type``` argument doesn\'t have a ```displayName``` property, but has ```name``` property with incorrect value ex. object. That case means that developer who is using react has in the code something like this: \\r\\n```\\r\\nconst Icon = () => {...}\\r\\nIcon.name = { foo: \'bar\' };\\r\\n```\\r\\nDevTools relay on displayName/name properties when displaying component names in the tree. \\r\\n```getDisplayName``` function requires displayName/name properties to be a string values, otherwise it will use fallback name - \'Anonymous\'. \\r\\n\\r\\nTests are included.\\r\\nYou can find longer description of what was wrong in the issue.","number":16798,"user":{"login":"LetItRock"},"state":"closed","created_at":"2019-09-16T22:03:33Z"},{"id":494249661,"title":"Read latest state value in event handler","body":"I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here.\\r\\n\\r\\nImagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**:\\r\\n\\r\\n    onClick(){\\r\\n    \\r\\n      let data = this.state.data;\\r\\n      API.makeRequest(\\"URL\\", data);\\r\\n    \\r\\n    }\\r\\n\\r\\n[Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date).\\r\\nHowever he says this applies to react 16.\\r\\n\\r\\nOtherwise he suggests to use functional `setState` to get current state.\\r\\n\\r\\nI have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don\'t want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn\'t be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this:\\r\\n\\r\\n \\r\\n\\r\\n    onClick(){\\r\\n        \\r\\n       this.setState(ps=>{ \\r\\n            // using this form only to read current state in event handler which works for 16 and onwards versions probably\\r\\n            // but this breaks purity of this function\\r\\n            API.makeRequest(\\"URL\\", ps.data);\\r\\n            return {};\\r\\n       })\\r\\n        \\r\\n    }\\r\\n\\r\\nbut then I would violate that the function passed to functional `setState` must be pure.\\r\\n\\r\\nIs there a solution to the question I asked?\\r\\n\\r\\n  [1]: https://stackoverflow.com/a/43440790/3963067","number":16797,"user":{"login":"giorgi-m"},"state":"closed","created_at":"2019-09-16T20:05:17Z"},{"id":494234968,"title":"Is React.createElement necessary when rendering function components without JSX?","body":"I asked this on Spectrum chat and in the React docs repo [(#2110)](https://github.com/reactjs/reactjs.org/issues/2110), but haven\'t received a thorough explanation. It was suggested to me to cross-post here. I have a better knowledge of React at this point, but I would still like to understand the technicals regarding the juxtaposition presented below and I think it would be useful for many who are starting to learn React coming from a JavaScript background without JSX.\\r\\n\\r\\n---\\r\\n\\r\\nI haven\'t found the answer to this in the documentation, so perhaps someone on the team can answer and it can be added to the docs:\\r\\n\\r\\nThe homepage gives this example component:\\r\\n\\r\\n![jsx-on-off](https://user-images.githubusercontent.com/868251/60399633-fd2d9500-9b2c-11e9-97c9-35b1779caec9.gif)\\r\\n\\r\\nHere is the same code (but as a function component) in JSX:\\r\\n\\r\\n```jsx\\r\\nfunction HelloMessage (props) {\\r\\n  return (\\r\\n    <div>\\r\\n      Hello {props.name}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nReactDOM.render(\\r\\n  <HelloMessage name=\\"Taylor\\" />,\\r\\n  document.getElementById(\'hello-example\')\\r\\n);\\r\\n```\\r\\n\\r\\nAnd here is that function component without JSX:\\r\\n\\r\\n```js\\r\\nfunction HelloMessage (props) {\\r\\n  return React.createElement(\\r\\n    \'div\',\\r\\n    null,\\r\\n    \'Hello \',\\r\\n    props.name\\r\\n  );\\r\\n}\\r\\n\\r\\nReactDOM.render(\\r\\n  React.createElement(HelloMessage, {name: \'Taylor\'}),\\r\\n  document.getElementById(\'hello-example\')\\r\\n);\\r\\n```\\r\\n\\r\\nIn the non-JSX example, as the first argument to `ReactDOM.render`, it lists\\r\\n\\r\\n```js\\r\\nReact.createElement(HelloMessage, {name: \'Taylor\'})\\r\\n```\\r\\n\\r\\nWhat I want to understand is this: Is it actually necessary to call `React.createElement` again, since it is already in the return value of the component? Is there any effective difference between that and calling the function component directly, like this?\\r\\n\\r\\n```js\\r\\nReactDOM.render(\\r\\n  HelloMessage({name: \'Taylor\'}),\\r\\n  document.getElementById(\'hello-example\')\\r\\n);\\r\\n```\\r\\n\\r\\nHere is another example with child components:\\r\\n\\r\\n```js\\r\\nfunction ParentComponent (props) {\\r\\n  return React.createElement(\\r\\n    React.Fragment,\\r\\n    null,\\r\\n    React.createElement(ChildComponentA, {someValue: props.someValueA}),\\r\\n    React.createElement(ChildComponentB, {someValue: props.someValueB}),\\r\\n    React.createElement(ChildComponentC, {someValue: props.someValueC})\\r\\n  );\\r\\n}\\r\\n\\r\\n// vs\\r\\n\\r\\nfunction ParentComponent (props) {\\r\\n  return React.createElement(\\r\\n    React.Fragment,\\r\\n    null,\\r\\n    ChildComponentA({someValue: props.someValueA}),\\r\\n    ChildComponentB({someValue: props.someValueB}),\\r\\n    ChildComponentC({someValue: props.someValueC})\\r\\n  );\\r\\n}\\r\\n```","number":16796,"user":{"login":"jsejcksn"},"state":"closed","created_at":"2019-09-16T19:32:11Z"},{"id":494191797,"title":"Follow-up to initial Trusted Types support","body":"This addresses a few things I\'ve noticed since merging #16157.\\r\\n\\r\\n* At FB we might want the flag to be dynamic while we\'re experimenting (e.g. depending on the user). We\'d like to avoid overhead on every call for people who aren\'t opted in. So I want to check for TT flag early and branch based on that instead of doing it in `toStringOrTrustedType`.\\r\\n  - My change sets `toStringOrTrustedType` to `toString` directly, and then adds the TT checks on top when the flag is on. I\'ve inlined `isTrustedTypesValue` into that branch since it wasn\'t useful by itself.\\r\\n* I\'ve added a global to Flow to remove the suppressions.\\r\\n* I\'m destructuring `isHTML` and friends early to avoid property access hit in the hot path. I\'m assuming `trustedTypes` methods don\'t care about `this` values. This might make mocking a bit more difficult but IMO this makes sense because we decide early on whether to use them or not. As opposed to TT support potentially \\"turning on\\" later in the app. This does mean, however, that TT needs to be initialized before ReactDOM to be acknowledged.\\r\\n* I\'ve revamped the tests so that they actually verify that we pass the TT objects to the DOM sinks. I\'ve checked that replacing every `toStringOrTrustedType` call with `\'\' + value` now fails a particular test so we\'re covering them all.\\r\\n* I\'ve restructured `setInnerHTML` a bit to remove the duplicate `innerHTML` assignment which is easy to accidentally mess up. The special path now has an early return.","number":16795,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-16T17:54:16Z"},{"id":494084311,"title":"[react-ui] Move experimental event+a11y work to react-ui package","body":"This PR renamed the `react-events` package to `react-ui` and adds a top-level directory for each category. The `react-events` work goes into a top-level `events` directory, whilst all the accessibility component experiments go into `accessibility`. This also allows us to move relevant other parts of our experimental UI work into React Interactions, and other projects, into other top-level directories of `react-ui` without having to make them fit into existing directory structures (which is getting awkward).","number":16794,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-16T14:24:33Z"},{"id":494057997,"title":"bug | useReducer changing payload of action","body":"I ran into a strange behavior of useReducer. I tried implemeting my own redux and redux thunk for a small project. Here is a small replication of what I try to achieve. https://codesandbox.io/s/delicate-microservice-5qlt5 I do not have the bug here, but on my production build only. When I dispatch this action once, it get triggered three times. The third time, the payload becomes null instead of [] (empty array). \\r\\nI tried to find where the action/payload was changed and this is in the updateReducer. \\r\\n![image](https://user-images.githubusercontent.com/25157915/64962655-14f8f780-d898-11e9-8f3c-bed07e0166de.png)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/25157915/64962685-2510d700-d898-11e9-9fa1-3eaa9bdf3051.png)\\r\\n\\r\\nI don\'t have any clue of how this could happen since we juste get the action from the firstRenderPhaseUpdate object. \\r\\n\\r\\nTelle me if I missed something, I can give you more information.","number":16793,"user":{"login":"BreadAndRoses95"},"state":"closed","created_at":"2019-09-16T13:42:32Z"},{"id":494043327,"title":"useCallback can\'t get the correct  dom value","body":"hello\uff5e I got a problem when I use the useCallback function. \\r\\n\\r\\nconst  MeasureExample = () => {\\r\\n  const [height, setHeight] = useState(0);\\r\\n\\r\\n  const measuredRef = useCallback(node => {\\r\\n    if (node !== null) {\\r\\n      setHeight(node.getBoundingClientRect().height);\\r\\n    }\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n      \\\\<div ref={measuredRef}  className=\\"departments_wrapper\\" \\\\>\\r\\n       something\\r\\n      \\\\<\\\\/div\\\\>\\r\\n  );\\r\\n}\\r\\n\\r\\n.departments_wrapper {\\r\\n    position: relative;\\r\\n    width: 100%;\\r\\n    padding: 20px;\\r\\n    background: $base-green;\\r\\n    z-index: 15;\\r\\n  }\\r\\n\\r\\nthis demo in official documents  can\'t get the correct height value in my code  if i set the padding property.  The value can\'t include the padding.","number":16792,"user":{"login":"ORION-G"},"state":"closed","created_at":"2019-09-16T13:16:35Z"},{"id":494001868,"title":"React Hooks don\'t work inside function without export default.","body":"Hello, I\'m trying to call the useContext hook inside a function and I get the following error \\r\\n![image](https://user-images.githubusercontent.com/33375759/64955422-de6bae80-d890-11e9-9ef3-4e119d2ba1d2.png).\\r\\nThis is the code that I\'m trying to make it work using hooks.\\r\\n\\r\\n`\\r\\nimport {MaterialUIComponentsNavigation} from \'app/main/documentation/material-ui-components/MaterialUIComponentsNavigation\';\\r\\nimport {authRoles} from \'app/auth\';\\r\\nimport React, {useContext, useState} from \\"react\\";\\r\\nimport TextContext from \\"../TextContext\\";\\r\\n\\r\\nexport function NavigationConfig () {\\r\\n  const test = useContext(TextContext);\\r\\n  console.log(\\"Navigation\\",test)\\r\\nreturn test;\\r\\n}\\r\\n`\\r\\nAnd for a reason or another if I change the syntax to export default instead of just export it works. I couldn\'t find any explanation online (trust me I\'ve tried) and I think this is a bug. My React versions is > 16.8.0 so that\'s not the issue. \\r\\n\\r\\n \\r\\n\\r\\n\\r\\n","number":16791,"user":{"login":"Octavians98"},"state":"closed","created_at":"2019-09-16T11:50:56Z"},{"id":493959554,"title":"Survey on Pull Request Prioritization","body":"Dear Pull Requests integrators,\\r\\nWe are an international group of researchers investigating Pull Requests management activities. We implemented an automated approach, named CARTESIAN, for prioritizing Pull Requests (PRs) received by an open-source project according to the likelihood of acceptance/response. We would like to evaluate whether CARTESIAN can help integrators when reviewing PRs. \\r\\nAs we noticed that your project receives many PRs daily, we have taken the liberty of contacting you. Thus, we experimented CARTESIAN on Your projects, to help you in prioritizing PRs. To know more about these results, please fill in the form below. \\r\\nSurvey form link: https://forms.gle/TXPuhk96ZK4EQXpV7 \\r\\nYour participation is voluntary and confidential. We kindly request you, ONLY to INTEGRATORS, to participate in this study which is expected to take about 15 minutes of your time. You might withdraw at any time.\\r\\nBest regards,\\r\\nMuhammad Ilyas Azeem, National Engineering Research Center of Fundamental Software, Chinese Academy of Sciences, China\\r\\nAndrea Di Sorbo, University of Sannio, Italy\\r\\nSebastiano Panichella, Zurich University of Applied Science, Switzerland\\r\\nAlexander Serebrenik, Eindhoven University of Technology, The Netherlands\\r\\n","number":16790,"user":{"login":"IlyasAzeem"},"state":"closed","created_at":"2019-09-16T10:12:38Z"},{"id":493927136,"title":"Error: \\"Could not find node with id \\"16070\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Opened profiler\\r\\n2. Recorded\\r\\n3. Switched to waterfall\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)\\r\\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98281)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\\r\\n\\r\\nComponent stack: in xi\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16789,"user":{"login":"psamim"},"state":"closed","created_at":"2019-09-16T09:03:53Z"},{"id":493866949,"title":"TEST","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16788,"user":{"login":"Ching-Yao-Hsu"},"state":"closed","created_at":"2019-09-16T06:21:31Z"},{"id":493859626,"title":"Update_README","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16787,"user":{"login":"Ching-Yao-Hsu"},"state":"closed","created_at":"2019-09-16T05:54:36Z"},{"id":493773623,"title":"Workaround to the input onChange lossing focus bug","body":"It\'s not the best solution since that React still destroying and creating the input element but when you are working with dynamic elements created on the fly, like for example, from an array, then you don\'t have any other choice:\\r\\n\\r\\n    import React, { useEffect } from \'react\'\\r\\n\\r\\n    function InputWithFocus(props) {\\r\\n      const { getFocusData, setFocusData, onChange, ...rest } = props\\r\\n      let isNeedSaveFocus = null\\r\\n\\r\\n      useEffect(() => {\\r\\n        const focus = getFocusData()\\r\\n        if (focus && focus.key === props.id) {\\r\\n          const el = document.getElementById(props.id)\\r\\n          if (el) {\\r\\n            el.focus()\\r\\n            el.setSelectionRange(focus.pos, focus.pos)  \\r\\n          } // Endif.\\r\\n\\r\\n          setFocus(null)\\r\\n        } // Endif.\\r\\n\\r\\n        return () => {\\r\\n          if (isNeedSaveFocus || isNeedSaveFocus === 0) {\\r\\n            setFocusData({key: props.id, pos: isNeedSaveFocus})\\r\\n          } // Endif.\\r\\n        }\\r\\n      })\\r\\n\\r\\n      function onChangeImp(event) {\\r\\n        isNeedSaveFocus = event.target.selectionStart\\r\\n        if (props.onChange) {\\r\\n          props.onChange(event)\\r\\n        } // Endif.\\r\\n      }\\r\\n\\r\\n      return <input onChange={onChangeImp} {...rest} />\\r\\n    }\\r\\n\\r\\nWorking great here. I\'ll be happy for a better solution which is to fix the bug in react so it\'ll use the key attribute to compare elements.","number":16786,"user":{"login":"Ziv-Barber"},"state":"closed","created_at":"2019-09-15T19:01:48Z"},{"id":493709411,"title":"Using a custom hook on multiple rendered components causing unexpected results","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nI want to report an unexpected behavior I found while using a custom hook not sure if it\'s a possible bug or miss understanding of how custom hooks functions.\\r\\n\\r\\n\\r\\n**What is the current behavior?**\\r\\nUsing a custom hook on multiple components, only 1 component receives updates other components don\'t.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React:**\\r\\n\\r\\n**CodeSandbox:** (https://codesandbox.io/s/react-custom-hooks-nkcn6)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nexpected behavior is to receive same updates on all child components.\\r\\n\\r\\n**Note** : I\'m not looking for a solution because i already found mine, (using the custom hook on the parent container and pass props to child components). \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact Version : 16.8\\r\\n","number":16785,"user":{"login":"thesimpledesigners"},"state":"closed","created_at":"2019-09-15T08:18:21Z"},{"id":493635491,"title":"[eslint] strip tailing property in assignments","body":"closes #15510\\r\\n\\r\\n>``` \\r\\n>let foo = {}\\r\\n>useEffect(() => {\\r\\n>   foo.bar.baz = 43;\\r\\n>}, []);\\r\\n>```\\r\\n>This asks you to include foo.bar.baz into deps. But this doesn\'t make sense, as you write to it. Instead it should ask to include foo.bar into array.","number":16784,"user":{"login":"Zzzen"},"state":"open","created_at":"2019-09-14T15:35:28Z"},{"id":493607136,"title":"The problem with server-side rendering React","body":"Hello!\\r\\nI have a project with server-side rendering **React**, connected directly to **Express** server using **ReactDOMServer** and **ReactDOMHydrate**, built with **Webpack**, **Babel**, etc. I would like to know how to implement two tasks:\\r\\n1. Import **css**.\\r\\n2. Manage the state of **React** (for example, create some kind of onclick event on the button).\\r\\nI have a reposirory:\\r\\n[isomorphic-react](https://github.com/narzantaria/isomorphic-react)\\r\\nThanks for any help!)","number":16783,"user":{"login":"narzantaria"},"state":"closed","created_at":"2019-09-14T10:05:45Z"},{"id":493538283,"title":"[Scheduler] Prevent event log from growing unbounded","body":"If a Scheduler profile runs without stopping, the event log will grow unbounded. Eventually it will run out of memory and the VM will throw an error.\\r\\n\\r\\nTo prevent this from happening, let\'s automatically stop the profiler once the log exceeds a certain limit. We\'ll also print a warning with advice to call `stopLoggingProfilingEvents` explicitly.","number":16781,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-13T22:20:36Z"},{"id":493530663,"title":"[react-events] Keyboard support for virtual clicks","body":"This accounts for all clicks that are natively dispatched following relevant\\r\\nkeyboard interactions (e.g., key is \\"Enter\\"), as well as programmatic clicks,\\r\\nand screen-reader virtual clicks.\\r\\n\\r\\n(Alternative to https://github.com/facebook/react/pull/16755)","number":16780,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-13T21:52:08Z"},{"id":493462834,"title":"[react-events] Keyboard calls preventDefault on \'click\' events","body":"Make sure to call preventDefault for any \'click\' events that follow a \'keydown\'\\r\\nevent that matches \'preventKeys\'.","number":16779,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-13T18:35:15Z"},{"id":493424348,"title":"Error with routing in isomorphic server-side react project","body":"Hello!\\r\\nI am trying to build a project using an isomorphic server-side rendering react. For some reason, the project stopped starting after adding routing.\\r\\nThe browser throws the following error:\\r\\n\\r\\n> Error: Invariant failed: Browser history needs a DOM\\r\\n\\r\\nMaybe someone can tell me what\'s wrong there. Thanks for any help)\\r\\nHere is a link to the repository:\\r\\n[isomorphic-react](https://github.com/narzantaria/isomorphic-react)","number":16778,"user":{"login":"narzantaria"},"state":"closed","created_at":"2019-09-13T16:52:53Z"},{"id":493409455,"title":"Remove unnecessary interaction tracing ping wrapper","body":"Follow up to PR #16776 \\r\\n\\r\\nPreviously we wrapped the call to `pingSuspendedRoot` in `attachPingListener` to restore interactions. Sebastian pointed out that this particular function is only relevant when there is an in progress render (at which point we are already tracking/managing the current interactions in the work loop) so wrapping here would be unnecessary.\\r\\n\\r\\nProbably no harm in leaving it in place? Opening this PR for discussion purposes though.","number":16777,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-13T16:15:17Z"},{"id":493389375,"title":"Support disabling interaction tracing for suspense promises","body":"If a thrown Promise has the `__reactDoNotTraceInteractions` attribute, React will not wrapped its callbacks to continue tracing any current interaction(s).\\r\\n\\r\\nExample usage:\\r\\n```js\\r\\nfunction SomeComponent() {\\r\\n  try {\\r\\n    const value = SomeCache.read(/*...*/);\\r\\n  } catch (maybePromise) {\\r\\n    if (typeof value === \\"object\\" && typeof value.then === \\"function\\") {\\r\\n      maybePromise.__reactDoNotTraceInteractions = true;\\r\\n    }\\r\\n    throw maybePromise;\\r\\n  }\\r\\n}\\r\\n```","number":16776,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-13T15:31:51Z"},{"id":493301502,"title":"Error: \\"Could not find commit data for root \\"624\\" and commit 2\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16722)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293893)\\r\\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:294128)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in Al\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16775,"user":{"login":"ahmed-saber"},"state":"closed","created_at":"2019-09-13T12:35:07Z"},{"id":493298918,"title":"react-hooks/exhaustive-deps suggesting wrong dependency","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe react-hooks/exhaustive-deps rule suggests an incorrect dependency.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n```js\\r\\nfunction useSomething(search: string) {\\r\\n  const request = useAxios({ url });\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (search.length >= 3) {\\r\\n      request.execute();\\r\\n    }\\r\\n  }, [request.execute, search]); // missing dependency `request` is shown\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (request.response) {\\r\\n      console.log(\'success\');\\r\\n    }\\r\\n  }, [request.response]);\\r\\n\\r\\n  return { request };\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`request.execute` should be fine as a dependency, just like `request.response`. However I get a warning that I should use `request` as a dependency which is wrong (it changes more often than `request.execute` and I just use `request.execute` in my effect).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`eslint-plugin-react-hooks@2.0.1`","number":16774,"user":{"login":"donaldpipowitch"},"state":"closed","created_at":"2019-09-13T12:29:00Z"},{"id":493116296,"title":"[Concurrent Mode] App stops updating/rendering on inactive tab","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n1. When Concurrent Mode is enabled\\r\\n2. and the Chrome tab is inactive\\r\\n3. and a new render happens inside app\\r\\n4. the app won\'t render this update until I open the chrome tab.\\r\\n\\r\\nThis only happens on Concurrent Mode. I noticed this because I update the document title on a react Context, like this:\\r\\n<img width=\\"140\\" alt=\\"Screen Shot 2019-09-12 at 23 58 05\\" src=\\"https://user-images.githubusercontent.com/619186/64834916-5e0c2b80-d5ba-11e9-8d1c-d3581c9c237e.png\\">\\r\\n\\r\\nand on Concurrent Mode it was never updating when the tab was inactive. Only when I opened the tab. \\r\\n\\r\\nDisabling Concurrent Mode was enough for it to start working as expected.\\r\\n\\r\\nI believe this is related to the Chrome throttling behavior of inactive tabs. For example, Chrome doesn\'t resolve neither `requestIdleCallback` neither `requestAnimationFrame` when the tab is inactive. Made this non-react example just to show this Chrome behavior because I believe it\'s related: https://codesandbox.io/embed/dank-fire-0zjxv\\r\\n\\r\\nReproduction using `useEffect` and allow changing between legacy/sync/concurrent modes: https://codesandbox.io/embed/react-bug-inactive-tabs-tnosy\\r\\n\\r\\n### Incorrect behavior (sync or concurrent mode, it get\'s completely suspended)\\r\\n\\r\\n![reproduction-concurrent.gif](https://user-images.githubusercontent.com/619186/64887291-b08f2b80-d63e-11e9-8d17-2ef9c6427881.gif)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nInactive tabs should have the same behavior with or without Concurrent Mode. They should keep updating/rendering things (ok if a little bit throttled), but NOT completely pause doing things until the tab becomes active.\\r\\n\\r\\n![correct-behavior.gif](https://user-images.githubusercontent.com/619186/64887568-4f1b8c80-d63f-11e9-90df-a990291eac75.gif)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.9\\r\\nChrome 76\\r\\nmacOS","number":16773,"user":{"login":"brunolemos"},"state":"closed","created_at":"2019-09-13T03:10:12Z"},{"id":493084654,"title":"[react-events] usePress from useKeyboard and useTap","body":"This implements `usePress` in user-space as a combination of `useKeyboard` and `useTap` (in an either/or configuration). The existing `usePress` API is preserved for now. The previous `usePress` implementation is moved to `PressLegacy`.\\r\\n\\r\\nDemo: https://codesandbox.io/s/usepress-usetap-usekeyboard-fcvg7","number":16772,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-13T00:19:24Z"},{"id":493060708,"title":"Re-enable risky work loop changes","body":"The stack of PRs in #16743 was reverted. This adds them back.\\r\\n\\r\\nTo avoid blocking future syncs, this time I will wait until these changes land in www before merging them into the master branch. The changes are isolated to the work loop so I don\'t expect the temporary fork will cause conflicts.","number":16771,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-12T22:37:31Z"},{"id":493040346,"title":"NPM START ERROR - Can\'t create local server","body":"I am learning React, I created react app, i typed cd davidsapp, but when I run npm install i get warnings and errors, and when I input npm start, I get all the errors posted in this link. What can I do?\\r\\n\\r\\nhttps://gist.github.com/DavidRNogueira/da37a599c37ad8661c55bf599b7e0751","number":16770,"user":{"login":"DavidRNogueira"},"state":"closed","created_at":"2019-09-12T21:33:03Z"},{"id":493033309,"title":"Revert risky work loop changes #16743","body":"I had some trouble landing #16743 internally. I\'m not sure yet if they are transient issues or a problem with the PR.\\r\\n\\r\\nJust to be safe, I\'m going to revert this to unblock the www sync and then only merge it back once this successfully lands downstream. Should be fine since it doesn\'t overlap with any of our pending PRs.","number":16769,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-12T21:15:08Z"},{"id":492974446,"title":"[react-interactions] Refactor TabFocusController","body":"After speaking to @gaearon today, he mentioned that we can extract the internal interface of `TabFocusController` so that it\'s exposed as an import rather than as an internal interface on the functional component (thus removing the need to use `useImperativeMethods` hook). This should improve the performance, memory and overall explicitness quite a bit \u2013 plus making more sense as a general way of handling tab focus across other scopes.\\r\\n\\r\\nI made the module `ReactTabFocus` as this is more like a bucket of methods + component needed for handling browser tab focus.","number":16768,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-12T18:58:28Z"},{"id":492973223,"title":"[react-devtools] Enable to display Long interaction names(#16736)","body":"issues: #16736 \\r\\n\\r\\nfixed long interaction names displayable.\\r\\n<img width=\\"747\\" alt=\\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2019-09-13 3 44 22\\" src=\\"https://user-images.githubusercontent.com/32378535/64811789-ebf70f00-d5d8-11e9-9f92-9e276b18f28a.png\\">","number":16767,"user":{"login":"toshi1127"},"state":"closed","created_at":"2019-09-12T18:56:00Z"},{"id":492873460,"title":"[react-interactions] Add experimental FocusGrid API","body":"This adds an experimental focus grid API that creates three linked components:\\r\\n\\r\\n- Container\\r\\n- Row (goes in a container)\\r\\n- Cell (goes in a row)\\r\\n\\r\\nWhen keyboard arrows are pressed, the correct cell is automatically selected and its first focusable element is focused accordingly \u2013 providing directional navigation through grid based interfaces. It can also be used on a list, where there is only one cell per row.\\r\\n\\r\\nI plan on adding up follow ups that validate they are nested in the correct orders. I also plan on adding Columns, which can take multiple Rows.","number":16766,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-12T15:19:15Z"},{"id":492852905,"title":"Add third parameter to useState to get current value","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThere should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nn/a","number":16765,"user":{"login":"sdegutis"},"state":"closed","created_at":"2019-09-12T14:45:25Z"},{"id":492783124,"title":"Different state values in functions under functional component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI\'m not sure if it\'s a bug or it is supposed to work that way.\\r\\n\\r\\n**What is the current behavior?**\\r\\nState values is somehow reset to initial values when used under an arrow function that is defined under a functional component when using hooks.\\n\\r\\n\\r\\n```\\r\\nconst DELTA = 5;\\r\\n\\r\\nconst initialState = {\\r\\n    isMounted: false,\\r\\n    scrollDirection: \'none\',\\r\\n    lastScrollTop: 0,\\r\\n    isSidebarOpen: false,\\r\\n};\\r\\n\\r\\nconst reducer = (state, action) => {\\r\\n    switch (action.type) {\\r\\n        case \'MOUNT\':\\r\\n            return { ...state, isMounted: true };\\r\\n        case \'UNMOUNT\':\\r\\n            return { ...state, isMounted: false };\\r\\n        case \'SET_SCROLL_DIRECTION\':\\r\\n            return { ...state, scrollDirection: action.payload };\\r\\n        case \'SET_LAST_SCROLL\':\\r\\n            return { ...state, lastScrollTop: action.payload };\\r\\n        case \'TOGGLE_SIDEBAR\':\\r\\n            return { ...state, isSidebarOpen: action.payload };\\r\\n        default:\\r\\n            return state;\\r\\n    }\\r\\n};\\r\\n\\r\\nconst Header = () => {\\r\\n    const [state, dispatch] = useReducer(reducer, initialState);\\r\\n    console.log(\'Rendered/Updated\');\\r\\n\\r\\n\\t// This show the updated state values\\r\\n    console.log(state);\\r\\n\\r\\n    const handleScroll = () => {\\r\\n        const fromTop = window.scrollY;\\r\\n\\r\\n        console.log(`Scrolled`);\\r\\n\\r\\n\\t\\t// This still shows the initial state values\\r\\n        console.log(state);\\r\\n\\r\\n        // ToDo: Restore this, Now always returned as this state is not changing\\r\\n        // Make sure they scroll more than DELTA\\r\\n        // if (!state.isMounted || Math.abs(state.lastScrollTop - fromTop) <= DELTA) {\\r\\n        //     return;\\r\\n        // }\\r\\n\\r\\n        if (fromTop < DELTA) {\\r\\n            dispatch({ type: \'SET_SCROLL_DIRECTION\', payload: \'none\' });\\r\\n        } else if (fromTop > state.lastScrollTop && fromTop > 100) {\\r\\n            if (state.scrollDirection !== \'down\') {\\r\\n                dispatch({ type: \'SET_SCROLL_DIRECTION\', payload: \'down\' });\\r\\n            }\\r\\n        } else if (fromTop + window.innerHeight < document.body.scrollHeight) {\\r\\n            if (state.scrollDirection !== \'up\') {\\r\\n                dispatch({ type: \'SET_SCROLL_DIRECTION\', payload: \'up\' });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        console.log(\'updated\');\\r\\n\\r\\n        return dispatch({ type: \'SET_LAST_SCROLL\', payload: fromTop });\\r\\n    };\\r\\n\\r\\n    useEffect(() => {\\r\\n        // update state after 100ms\\r\\n        setTimeout(() => {\\r\\n            return dispatch({ type: \'MOUNT\' });\\r\\n        }, 100);\\r\\n\\r\\n        window.addEventListener(\'scroll\', () => {\\r\\n            return throttle(handleScroll());\\r\\n        });\\r\\n\\r\\n        // unmounting\\r\\n        return () => {\\r\\n            dispatch({ type: \'UNMOUNT\' });\\r\\n            return window.removeEventListener(\'scroll\', handleScroll);\\r\\n        };\\r\\n    }, []); // empty-array means don\'t watch for any updates\\r\\n\\r\\n    const toggleSidebar = toggle => {\\r\\n        return dispatch({ type: \'TOGGLE_SIDEBAR\', payload: toggle });\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        <StyledHeader\\r\\n            className=\\"d-flex justify-content-end pr-0 pr-sm-3 pr-md-4 pr-lg-5\\"\\r\\n            scrollDirection={state.scrollDirection}\\r\\n        >\\r\\n            <Navbar style={{ flexFlow: \'row nowrap\', justifyContent: \'flex-start\' }} collapseOnSelect expand=\\"sm\\">\\r\\n                <HamburgerIcon toggleSidebar={toggleSidebar} isSidebarOpen={state.isSidebarOpen} />\\r\\n                <HorizontalHeader />\\r\\n                {/* <VerticalHeader toggleSidebar={toggleSidebar} isSidebarOpen={state.isSidebarOpen} /> */}\\r\\n            </Navbar>\\r\\n        </StyledHeader>\\r\\n    );\\r\\n};\\r\\n\\r\\nexport default Header;\\r\\n```\\r\\n**What is the expected behavior?**\\r\\nThe bindings should be the same isn\'t it?\\nIt worked perfectly when I was using class component with lifecycle methods.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: 16.9.0\\r\\nBrowser: Chrome 76.0.3809.132\\r\\nOS: Ubuntu 18.04\\r\\n\\r\\n![Screenshot from 2019-09-12 18-15-11](https://user-images.githubusercontent.com/34790378/64785162-5e400300-d589-11e9-91d5-41e37e1186aa.png)\\r\\n ","number":16764,"user":{"login":"abhijithvijayan"},"state":"closed","created_at":"2019-09-12T12:46:55Z"},{"id":492778819,"title":"Component sometimes fires event handlers twice","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nI want to report a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nEvent handlers on elements are fired twice, when hovering from one element onto the next.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/s/quizzical-mountain-9s48c\\r\\n\\r\\n**What is the expected behavior?**\\r\\nEvent handlers should only fire once.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.4\\r\\nReactDOM 16.8.4\\r\\nChrome 76.0.3809.132\\r\\nFirefox 69.0 (64-Bit)\\r\\nEdge 44.18362.267.0\\r\\n","number":16763,"user":{"login":"patrick-radulian"},"state":"closed","created_at":"2019-09-12T12:38:47Z"},{"id":492776554,"title":"autoplay attribute on videos is wrongly camel-cased","body":"JSX ignores the HTML `autoplay` attribute and warns it should be `autoPlay`.\\r\\n\\r\\nCamelcase here is incorrect. I should only expect to use camelcase if the attribute were hyphenated in vanilla HTML. Autoplay is one word both as an html attribute and according to English.","number":16762,"user":{"login":"rmfarrell"},"state":"closed","created_at":"2019-09-12T12:34:12Z"},{"id":492752110,"title":"useState() bug - state value different from initial value","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a _feature_ or report a bug?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI have an Input component that uses `useState()` to handle the state of its floating label, like this:\\r\\n\\r\\n```\\r\\nconst FloatingLabelInput = props => {\\r\\n  const {\\r\\n    value = \'\'\\r\\n  } = props\\r\\n\\r\\n  const [floatingLabel, toggleFloatingLabel] = useState(value !== \'\')\\r\\n```\\r\\n\\r\\nI have a series of those components and you\'d expect `initialFloatingLabel` and `floatingLabel` to be always the same, but they\'re not for some of them! I can see by logging the values:\\r\\n\\r\\n```\\r\\n  const initialFloatingLabel = value !== \'\'\\r\\n  console.log(initialFloatingLabel)\\r\\n  const [floatingLabel, toggleFloatingLabel] = useState(initialFloatingLabel)\\r\\n  console.log(floatingLabel)\\r\\n```\\r\\n\\r\\nAs a result some of the components have the label in floating state (Postcode and Address Line 1) when they shouldn\'t (because they\'re empty), like this:\\r\\n\\r\\n<img width=\\"524\\" alt=\\"Screen Shot 2019-09-12 at 12 17 39\\" src=\\"https://user-images.githubusercontent.com/1765942/64780453-4ef49180-d558-11e9-8dd9-9f7dbe362aff.png\\">\\r\\n\\r\\nA very interesting fact is that, if I reorder the fields, it will always be the two first fields that are affected, like in the image above.\\r\\n\\r\\nThese fields are part of a multi-step form (using [Formik](https://github.com/jaredpalmer/formik)) and the steps are handled by a state machine (using [xstate](https://github.com/davidkpiano/xstate)) library. This problem happens only on Step 2. If I set the machine to start on step 2 on app load, this will not happen.\\r\\n\\r\\nThat\'s on Google Chrome - on Safari, a different subset of fields are affected. There is consistency on which fields are affected in each browser though (if I don\'t change their order)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIf you pass an initial value to `useState()`, the state variable should always be equal to that:\\r\\n\\r\\n```\\r\\nconst [value, setValue] = useState(initialValue)\\r\\n```\\r\\n\\r\\n(```value``` must _always_ be equal to ```initialValue```)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: Version 16.8.5\\r\\nGoogle Chrome: Version 76.0.3809.132\\r\\nOS: MacOS Mojave Version 10.14.1\\r\\n","number":16761,"user":{"login":"isaacalves"},"state":"closed","created_at":"2019-09-12T11:41:22Z"},{"id":492543227,"title":"fix: inspect ClassComponent.render instead of constructor, ","body":"fixes #16749\\r\\n\\r\\n- when `Show source` is clicked open `.render` for class Components instead of `constructor`\\r\\n\\r\\nIn the old DevTools the \\"real\\" `.render` of the instance would be inspected, however, new DevTools has only `$type`, so opening a method on a prototype is the only option for now.\\r\\n\\r\\ncc @bvaughn ","number":16759,"user":{"login":"theKashey"},"state":"closed","created_at":"2019-09-12T01:51:15Z"},{"id":492531006,"title":"[react-events] Ensure we restore currentInstance + currentTimers","body":"This fixes an issue where we weren\'t correctly restoring the `currentInstance` and `currentTimers` bindings in the responder event system. This should hotfix and internal issue found.","number":16758,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-12T00:50:43Z"},{"id":492442855,"title":"[Scheduler][www] Put profiling feature behind flag","body":"Our infra currently doesn\'t support loading a separate profiling build of Scheduler. Until that\'s fixed, the recommendation is to load a single build and gate the profiling feature behind a flag.\\r\\n\\r\\nAlternative to #16659","number":16757,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-11T20:09:57Z"},{"id":492430285,"title":"Adds a minimum indentation size for components with extremely long names.","body":"Fixes https://github.com/facebook/react/issues/16742\\r\\n\\r\\nIn extreme cases, components with names that exceed the DevTools window width cause the dynamic indentation calculation to equal 0, flattening the entire component hierarchy. When this happens, it is difficult to discern between parent, sibling, and child components. This PR adds a minimum indentation size to ensure the tree is still visually usable in extreme cases, while preserving the regular dynamic indentation functionality under normal circumstances.\\r\\n\\r\\n**Before:**\\r\\n\\r\\n![before](https://user-images.githubusercontent.com/1900645/64728237-3032c400-d4a0-11e9-931c-a00c44c88441.PNG)\\r\\n\\r\\n**After:**\\r\\n\\r\\n![after](https://user-images.githubusercontent.com/1900645/64728944-c9160f00-d4a1-11e9-911b-5ea1176945cb.PNG)\\r\\n\\r\\n**Happy Path:**\\r\\n\\r\\n![normal](https://user-images.githubusercontent.com/1900645/64729070-ffec2500-d4a1-11e9-99f6-075eb70955e5.PNG)\\r\\n\\r\\n\\r\\n\\r\\n","number":16756,"user":{"login":"coreyleelarson"},"state":"closed","created_at":"2019-09-11T19:41:16Z"},{"id":492411118,"title":"[react-events] Tap support for virtual click","body":"A couple of issues:\\r\\n\\r\\n1. This implementation can\'t be used to produce visual feedback as the entire sequence is flushed for the same event. We could wrap the \\"end\\" phase in a setTimeout to support this.\\r\\n\\r\\n2. ~Changing the `targetEventTypes` to use `click` instead of `click_active` results in no `click` event being dispatched to `onRootEvent`, even though `rootEventTypes` contains `click_active`.~","number":16755,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-11T18:58:50Z"},{"id":492364232,"title":"SVG sprite icons blink when DOM re-renders","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug. \\r\\n\\r\\n**What is the current behavior?**\\r\\nI update state of chechbox from parent and after setState executed on parent all tree starts to re-render and icons blink.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI update state of chechbox from parent and expect re-render only for checked checkbox.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI use latest version of create-react app.\\r\\n\\r\\nSo, this is my first react app and I dont like how webpack and react works with SVG. I want to create one static svg symbol sprite and render all icons by their name, which I pass from props. \\r\\n```\\r\\nimport React from \'react\';\\r\\nimport PropTypes from \'prop-types\'; \\r\\nclass Icon extends React.Component {\\r\\n    getSprite() {\\r\\n        let icon = require(`../../assets/icons/sprite.svg`);\\r\\n        return icon;\\r\\n    }\\r\\n    render() {\\r\\n        return <svg className={`icon ${this.props.className ? this.props.className : \'\'}`} viewBox=\\"0 0 18 18\\" width=\\"24\\">\\r\\n            <use xlinkHref={`${this.getSprite()}#${this.props.name}`} />\\r\\n        </svg>\\r\\n    }\\r\\n}\\r\\nIcon.propTypes = {\\r\\n    name: PropTypes.string.isRequired,\\r\\n};\\r\\nexport default Icon\\r\\n```\\r\\nSprite has rendered by gulp task cause with webpack its too difficult and webpack cant modify svg like I need. So, I start to write Ui kit for project - create UiKit component and add some states for children. \\r\\n\\r\\n```\\r\\nclass Uikit extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      checkboxes: {\\r\\n        first: {\\r\\n          value: true\\r\\n        },\\r\\n        second: {\\r\\n          value: false\\r\\n        },\\r\\n        third: {\\r\\n          value: false\\r\\n        }\\r\\n      },\\r\\n      radio: {\\r\\n        first: {\\r\\n          value: true\\r\\n        },\\r\\n        second: {\\r\\n          value: false\\r\\n        },\\r\\n        third: {\\r\\n          value: false\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    this.updateCheckboxState = this.updateCheckboxState.bind(this);\\r\\n  }\\r\\n\\r\\n  updateCheckboxState(argKey, value) {\\r\\n    this.setState((state) => {\\r\\n        state.checkboxes[argKey].value = value;\\r\\n        return Object.assign({}, state);\\r\\n    })\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    function UiWrapper (props) {\\r\\n      return <div className=\'p-5 border border-dashed border-ui-blue\'>{props.children}</div>\\r\\n    }\\r\\n    return <div className=\'kit-grid\'>\\r\\n      <UiWrapper>\\r\\n        <Button /*narrow*/ /*thin*/ /*secondary*/ /*disabled*/ /*iconed - only for single icon*/>\\r\\n          <Icon name=\'plus\' className=\'mr-2 icon--sm stroke-dark\'/>\\r\\n          \u041f\u043b\u044e\u0441\\r\\n        </Button>\\r\\n      </UiWrapper>\\r\\n      <UiWrapper>\\r\\n        {Object.keys(this.state.checkboxes).map((key) => {\\r\\n          return <Checkbox checked={this.state.checkboxes[key].value}\\r\\n                  key={key} \\r\\n                  onChange={this.updateCheckboxState}\\r\\n                  id={key} label={key}/>\\r\\n        })}\\r\\n      </UiWrapper>\\r\\n    </div>\\r\\n  }\\r\\n}\\r\\n\\r\\n```\\r\\nWhen updateCheckboxState executed all UiKit re-rendered, icons blink and i\'m gets angry. Why?","number":16754,"user":{"login":"WebKieth"},"state":"closed","created_at":"2019-09-11T17:17:33Z"},{"id":492310313,"title":"RFC: Warning System Revamp","body":"This is a proposal to change how the internal warning system works.\\r\\n\\r\\n**Note: @walaura is already working on this, please don\'t send PRs.**\\r\\n\\r\\n## Current System\\r\\n\\r\\nReact has a concept of \\"warnings\\". Conceptually, most of them should be treated as errors. They indicate bugs. For example, not fixing a \\"key\\" warning can result in very bad issues in production. For these \\"warnings\\", the only difference from a real error is that they don\'t throw and the checks are removed in production. Because they\'re expensive to do.\\r\\n\\r\\nReact warnings ultimately become `console.error` calls. In the source, they are expressed as `warning(cond, message, ...args)`. If the `cond` is false, the warning gets printed.\\r\\n\\r\\nBy default, calling `warning` will print a `console.error` with the current component stack appended at the end. Sometimes, we may not want the component stack. Maybe the warning is aggregated from many components (e.g. a StrictMode violation), and the stack is not relevant. In that case we have `warningWithoutStack`. It has the same API as `warning`, but doesn\'t append the stack. In fact, `warning(format, ...args)` is internally implemented as `warningWithoutStack(format + \'%s\', ...args, stack)`.\\r\\n\\r\\nWe also have a lesser-known `lowPriorityWarning` module. Unlike `warning` which uses `console.error`, `lowPriorityWarning` uses `console.warn`. It is \\"lower severity\\" (appears yellow in console), and we currently use it only for deprecation messages.\\r\\n\\r\\n## Problems\\r\\n\\r\\n* The naming is confusing. `warning`s are conceptually errors, and use `console.error`, but their name doesn\'t reflect that.\\r\\n* The `warning(cond, ...)` API is confusing. It is easy to forget whether `cond` is supposed to be `true` or `false` for the warning to fire. (Answer: it fires on `false`.) Due to this confusion, a bunch of callsites just do `if (!cond) warning(false, ...)` to avoid thinking about this.\\r\\n* `warning` and `lowPriorityWarning` have different default behavior. `warning` appends component stack by default, but `lowPriorityWarning` doesn\'t. This makes it difficult to \\"downgrade\\" a `warning` to `lowPriorityWarning` because we\'d lose the stack and have to manually append it.\\r\\n* Some `warning`s don\'t actually represent \\"errors\\" in practice. They have too high severity. It\'s not a huge deal in the console. But if you start hooking up the console to richer mechanisms (e.g. an error dialog), the difference becomes more annoying. You want to clearly separate *what\'s broken today* from *what may break tomorrow*.\\r\\n\\r\\n## Ideal End State\\r\\n\\r\\n* All React warnings are audited and split into two severities: `error` (stuff that is likely broken today) and `warn` (stuff that may break in the future).\\r\\n  - This means we\'ll likely \\"downgrade\\" some mostly advisory warnings.\\r\\n* React codebase just calls `console.error` for severe warnings (potential bugs), and `console.warn` for mild warnings (e.g. deprecations).\\r\\n  - A build step may wrap them in `__DEV__ ` blocks, append the component stack, and otherwise tweak the implementation.\\r\\n\\r\\n## How Do We Get There?\\r\\n\\r\\n### <s>Step 1. lowPriorityWarning() Parity</s>\\r\\n\\r\\n* Rename `lowPriorityWarning` to `lowPriorityWarningWithoutStack`.\\r\\n* Add `lowPriorityWarning` which appends the stack (but don\'t add usages of it).\\r\\n\\r\\nThe goal here is just to make it easy to switch between `warning` <-> `lowPriorityWarning` or `warningWithoutStack` <-> `lowPriorityWarningWithoutStack` whenever we want.\\r\\n\\r\\nEnsure `toWarnDev` and `toLowPriorityWarnDev` matchers are equivalent too and both support `withoutStack` named argument.\\r\\n\\r\\nNotice there\'s `lowPriorityWarning.www.js` fork. It should be renamed to `lowPriorityWarningWithoutStack.www.js`, but it should keep reqiure-ing `lowPriorityWarning` inside (because it refers to an external module).\\r\\n\\r\\n### <s>Step 1.5. Replace Babel plugin with an ESLint plugin</s>\\r\\n\\r\\nSee https://github.com/facebook/react/pull/17081#issuecomment-541908417.\\r\\n\\r\\n### <s>Step 2. Remove the condition argument</s>\\r\\n\\r\\nWrite a codemod to convert all `warning(cond, format, ...args)` (and its `lowPriority*` or `*WithoutStack` variations) to `if (!cond) { warning(format, ...args) }`. If `cond` is already `false`, just omit the condition. You could do this manually but it seems error-prone. So I recommend a codemod.\\r\\n\\r\\nYou\'ll notice there are some \\"forks\\" of `warning`, like `warningWithoutStack.www.js` or `lowPriorityWarning.www.js`. You\'ll want to modify them to reflect the new API \u2014 but keep in mind that external files they reference still have the old API. So they need to \\"translate\\" it.\\r\\n\\r\\nDon\'t forget there are Babel plugins and build scripts that deal with `warning`. They probably make assumptions about its argument order that you will need to consider. Make sure we don\'t emit invalid code or accidentally stop transforming them.\\r\\n\\r\\n<s>### Step 3. Renames</s>\\r\\n\\r\\nMy proposal:\\r\\n\\r\\n* `warning` => `consoleError`\\r\\n* `warningWithoutStack` => `consoleErrorNoStack`\\r\\n* `lowPriorityWarning` => `consoleWarn`\\r\\n* `lowPriorityWarningWithoutStack` => `consoleWarnNoStack`\\r\\n* `toWarnDev` => `toConsoleErrorDev`\\r\\n* `toLowPriorityWarnDev` => `toConsoleWarnDev`\\r\\n* `{withoutStack}` => `{noStack}`\\r\\n\\r\\nMake sure all build transforms, the warning extraction script, and the forks continue working.\\r\\n\\r\\n### Step 4. Warning Audit\\r\\n\\r\\nSplit `consoleError` calls into two groups:\\r\\n\\r\\n* Actual likely bugs today (e.g. missing key, or an UNSAFE method in concurrent mode)\\r\\n* Possible future issues that don\'t cause bugs today (e.g. UNSAFE method in strict mode, or setState in unmounted component)\\r\\n\\r\\nDowngrade the second group to `consoleWarn` calls.\\r\\n\\r\\n### Follow-ups\\r\\n\\r\\nAt this point we\'ll be pretty close to direct `console.error` calls. I don\'t know if we want to actually start doing that in the source, and have transform catch that. If we do, we\'d need to find a way to express \\"no stack\\" in some other way (or even always append them).\\r\\n\\r\\nIf we stick with `consoleError` imports, we might want to add a lint rule that prevents adding direct `console.error` calls except a few places where it\'s intentional. So that we don\'t mix them up.\\r\\n\\r\\n### How to Split Work\\r\\n\\r\\nThis is gonna touch a lot of files. Expect merge conflicts etc.\\r\\n\\r\\nI suggest splitting it like this:\\r\\n\\r\\n* Step 1 as a PR. We can land this fast.\\r\\n* Step 2 + Step 3 can be done as changes to build scripts + a codemod. It should be easy to re-run just the codemod. This is one PR.\\r\\n* Then Step 4 after previous PR lands.\\r\\n\\r\\n**I need to emphasize again that @Jessidhia is taking this so please don\'t send PRs.**","number":16753,"user":{"login":"gaearon"},"state":"open","created_at":"2019-09-11T15:27:54Z"},{"id":492305336,"title":"Moved backend injection to the content script","body":"Moved the backend injection logic to the content script. Previously this was done by using `chrome.devtools.inspectedWindow.eval()`:\\r\\n\\r\\n```\\r\\nconst source = `\\r\\n  // the prototype stuff is in case document.createElement has been modified\\r\\n  (function () {\\r\\n    var script = document.constructor.prototype.createElement.call(document, \'script\');\\r\\n    script.src = \\"${scriptName}\\";\\r\\n    script.charset = \\"utf-8\\";\\r\\n    document.documentElement.appendChild(script);\\r\\n    script.parentNode.removeChild(script);\\r\\n  })()\\r\\n  `;\\r\\n\\r\\n  chrome.devtools.inspectedWindow.eval(source, function(response, error)\\r\\n...\\r\\n```\\r\\n\\r\\nSince this code runs in the context of the inspected page, it is subject to the page\'s CSP restrictions and will cause a [Trusted Types](https://github.com/WICG/trusted-types) violation. Content scripts, however, are not subject to the page\'s restrictions and can manipulate the DOM. This change will prevent a TrustedScriptURL violation on clients that have Trusted Types support.","number":16752,"user":{"login":"onionymous"},"state":"closed","created_at":"2019-09-11T15:19:10Z"},{"id":492272504,"title":"[react-interactions] More Tab Focus control handling","body":"This is a follow up PR to the previous initial work to handle basic tab focus control with `TabFocusController.js`s.\\r\\n\\r\\nThis PR adds a few more features to the experimental scope API and, most importantly, provides an internal imperative mechanism for controlling tab focus via an API. I\'ve also made containment an optional prop on `TabFocusController`s and provided a way of exposing an imperative ref to scopes so these can easily be handed back via scope traversal.\\r\\n\\r\\nIn my next PR I plan on demonstrating taking this future and building components that allow for a powerful Grid based keyboard focusable system (using arrows + tab + modifiers).","number":16751,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-11T14:25:20Z"},{"id":492177835,"title":"Change `trackedTouchCount` console.error to warn","body":"This is a workaround for an Android OS bug causing errors in React Native.\\r\\n\\r\\nThe very old bug facebook/react-native#15059 is caused by certain Android builds\' handling of three-finger screenshots. The OS sends three touchcancel events, but only two touchstart events. This causes unavoidable red box errors. This PR changes the console.error to console.warn. This behaviour is consistent with similar touch event errors. \\r\\n\\r\\n","number":16750,"user":{"login":"ascorbic"},"state":"closed","created_at":"2019-09-11T11:26:06Z"},{"id":492165899,"title":"DevTools: Show Source should point to `render`, not `constructor`","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug. Regression to be more concrete - https://github.com/facebook/react-devtools/pull/1191\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nShow Source points to a Function Component body, and Class Component constructor.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIn both cases, you should see \\"render\\" methods, class constructor is never something you might want to jump straight into. It was working in this expected way in a previous version of Dev Tools.\\r\\n\\r\\n**Why this is an issue?**\\r\\n\\r\\nWell, until React-Hot-Loader is not 100% deprecated, \\"Show Source\\" would not work at all, as long as it (and not only it - `mobx` would do the same) is wrapping class constructor, however keeping `render` untouched.","number":16749,"user":{"login":"theKashey"},"state":"closed","created_at":"2019-09-11T11:00:12Z"},{"id":492159687,"title":"[react-events] Use context.objectAssign in Tap responder","body":"This changes usage of object spread syntax to use the shared `Object.assign` helper function that we have on `context`, so the size of compiled Tap responder is smaller in file size (as we won\'t need the polyfills). According to size-bot, there\'s a nice 15% size saving from this change.","number":16748,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-11T10:46:24Z"},{"id":492082964,"title":"Devtools: three feature..thanks","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n1. \\r\\n![image](https://user-images.githubusercontent.com/21235555/64679262-f8cb1400-d4ad-11e9-8729-90b5d95241bd.png)\\r\\nlet props.children props.onChange similar props has Fixed-Position\\r\\nsuch as props.children always TOP and  props.onChange similar alway at last of list\\r\\n\\r\\n2.now, string and number type UI make no odds , please add some  visual difference\\r\\n\\r\\n3. if a props value was default, mean parent comp dont set the value, \\r\\nadd some  visual difference, with the props  that not default \\r\\n\\r\\nthanks you\\r\\n","number":16747,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-09-11T08:10:42Z"},{"id":492077288,"title":"React.Children.map(children, function[(thisArg)]) feature","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n**What is the current behavior?**\\r\\nReact.Children.map(children, function[(thisArg)]) feature \\r\\nwe must pass children arg, but in most case it is this.props.children\\r\\nso why not set a default value \\r\\nso that we can use like this \\r\\n```js\\r\\nReact.Children.map(function[(thisArg)]) \\r\\n//or\\r\\nReact.Children.map(children, function[(thisArg)]) \\r\\n\\r\\n```\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16746,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-09-11T07:58:00Z"},{"id":491984857,"title":"Handle SuspenseListComponent getting retried","body":"This happens for example when a deleted boundary transfers its pending promises to the list so that the list can be retried.\\r\\n\\r\\nThis wasn\'t caught by unit tests because this flag wasn\'t on in those tests.\\r\\n\\r\\nThis was made worse by the error below getting swallowed by promise handlers.","number":16745,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-11T02:33:16Z"},{"id":491955379,"title":"Devtools: Allow saving and loading a profiler run as JSON","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n**What is the current behavior?**\\r\\nCurrently, a profiler run is lost when reloading/refreshing the react app. This makes it hard to compare profiler runs across changes to the react code and use the profiler in CI/CD situations.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nBe able to download a completed profiler run as json. Be able to upload a profiler run to react devtools for review later. Be able to trigger react devtools profiler programmatically. Be able to save a react devtools profiler run programmatically.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact Devtools V4.","number":16744,"user":{"login":"venku122"},"state":"closed","created_at":"2019-09-11T00:17:56Z"},{"id":491941312,"title":"Re-arrange slightly to prevent refactor hazard","body":"## Based on #16715, #16678, and #16663\\r\\n\\r\\nIt should not be possible to perform any work on a root without calling `ensureRootIsScheduled` before exiting. Otherwise, we could fail to schedule a callback for pending work and the app could freeze.\\r\\n\\r\\nTo help prevent a future refactor from introducing such a bug, this change makes it so that `renderRoot` is always wrapped in try-finally, and the `finally` block calls `ensureRootIsScheduled`.","number":16743,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-10T23:15:59Z"},{"id":491920171,"title":"DevTools: Excessively long component names cause component tree to flatten","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nOur application uses an older version of Mobx, and its `inject` HOC creates excessively long component names (inject-Component-with-userStore-appStore-columnStore-...) when multiple stores are used. While navigating and scrolling down the component tree, when a components scrolls into frame whose name cannot fit horizontally, the entire tree flattens. This makes it difficult to discern between parent, sibling, and child components.\\r\\n\\r\\n![devtools](https://user-images.githubusercontent.com/1900645/64652970-2606bc00-d3f3-11e9-8bcd-45ad2c43dd19.PNG)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI would expect the component tree to either scroll horizontally or truncate component names that are excessively long, while still including indentation for child components.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact v16.3.0\\r\\nChrome v77\\r\\nDevTools v4.0.6\\r\\n","number":16742,"user":{"login":"coreyleelarson"},"state":"closed","created_at":"2019-09-10T22:01:43Z"},{"id":491912756,"title":"Findless Error in react, Error Can only update a mounted or mounting   component.","body":"I know this question has been asked before me, but I need help!\\r\\n\\r\\nReact doesn\'t detect the exact location that where is going error!\\r\\n\\r\\nI\'ve been getting this error for the 3 days, but I don\'t know about this error. even I search a lot, check the original code, but nothing happened!\\r\\n\\r\\n    `proxyConsole.js:56 Warning: Can only update a mounted or mounting \\r\\n     component. This usually means you called setState, replaceState, or \\r\\n     forceUpdate on an unmounted component. This is a no-op.\\r\\n\\r\\n    Please check the code for the _class2 component.`\\r\\n\\r\\n\\r\\n\\r\\n***ContactData.js***, I believe the error is happing here, because when I trigger the button, so I get that.\\r\\n\\r\\n        import React, { Component } from \'react\';\\r\\n    \\r\\n    import Button from \'../../../components/UI/Button/Button\';\\r\\n    import axios from \'../../../axios-orders\';\\r\\n    import classes from \'./ContactData.css\';\\r\\n    import Spinner from \'../../../components/UI/Spinner/Spinner\';\\r\\n    \\r\\n    \\r\\n    class ContactData extends Component {\\r\\n    \\r\\n        state = {\\r\\n            loading: false\\r\\n        }\\r\\n    \\r\\n        orderHandler = (event) => {\\r\\n            \\r\\n            event.preventDefault();\\r\\n    \\r\\n            // e.preventDefault();\\r\\n            this.setState( { loading: true } );\\r\\n    \\r\\n            const order = {\\r\\n                // ingredients: this.props.ingredients,\\r\\n                // price: this.props.price,\\r\\n                // // customer: {\\r\\n                // //     name: \'Max Schwarzm\xfcller\',\\r\\n                // //     address: {\\r\\n                // //         street: \'Teststreet 1\',\\r\\n                // //         zipCode: \'41351\',\\r\\n                // //         country: \'Germany\'\\r\\n                // //     },\\r\\n                // //     email: \'test@test.com\'\\r\\n                // // },\\r\\n                // deliveryMethod: \'fastest\'\\r\\n            }\\r\\n            axios.post( \'/orders.json\', order )\\r\\n                .then( response => {\\r\\n                    this.setState( { loading: false } );\\r\\n                    this.props.history.push(\'/\');\\r\\n    \\r\\n                } )\\r\\n                .catch( error => {\\r\\n                    this.setState( { loading: false } );\\r\\n                    this.props.history.push(\'/\');\\r\\n    \\r\\n                } );\\r\\n                console.log(\'9\')\\r\\n    \\r\\n        }\\r\\n    \\r\\n        render() {\\r\\n            console.log(this.state);\\r\\n    \\r\\n            let form = <Spinner />\\r\\n            \\r\\n            if( !this.state.loading )\\r\\n            {\\r\\n                form = (\\r\\n                    <form>\\r\\n                        <input type=\\"text\\" placeholder=\\"Enter Your Name\\" />\\r\\n                        <input type=\\"text\\" placeholder=\\"Enter Your Name\\" />\\r\\n                        <input type=\\"text\\" placeholder=\\"Enter Your Name\\" />\\r\\n                        <input type=\\"text\\" placeholder=\\"Enter Your Name\\" />\\r\\n                        <input type=\\"text\\" placeholder=\\"Enter Your Name\\" />\\r\\n                        <Button btnType=\\"Success\\" clicked={this.orderHandler}>Order</Button>\\r\\n                    </form>\\r\\n                );\\r\\n            }\\r\\n            console.log(\'10\')\\r\\n    \\r\\n    \\r\\n            return (\\r\\n                <div className={classes.Contact_data}>\\r\\n                    <h1> Your Contact Data !</h1>\\r\\n                    {form}\\r\\n                </div>\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    export default ContactData;\\r\\n\\r\\n\\r\\n\\r\\nThe Whole Repo is uploaded [here][1]\\r\\n\\r\\n\\r\\n  [1]: https://github.com/ShinyBoy0/React-error","number":16741,"user":{"login":"lifeeric"},"state":"closed","created_at":"2019-09-10T21:41:52Z"},{"id":491896990,"title":"DevTools: Props editing interface tweaks","body":"* Fix edge-case value input sizing issue with narrow DevTools UIs.\\r\\n* Don\'t allow adding new values unless an `overridePropsFn` function has been provided.\\r\\n* Don\'t show the \\"None\\" empty label at the same time as the \\"new prop\\" input.\\r\\n\\r\\n![new-edit-Kapture 2019-09-10 at 14 11 17](https://user-images.githubusercontent.com/29597/64651054-72db9a00-d3d5-11e9-9684-486550a498f4.gif)\\r\\n","number":16740,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-09-10T21:03:19Z"},{"id":491896839,"title":"Mark root as already hydrated after committing","body":"_I pulled this out of #16725._\\r\\n\\r\\nWe currently infer that a root is eligible for hydration if it has no children. The `current === null` check is just for Flow. A root will never render with no current because it comes into existence as a current with no children and then the first render is an _update_ to that.\\r\\n\\r\\nThis fixes that by setting `root.hydrate` to false after committing the first time. I also need this commit phase for event replaying anyway.","number":16739,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-10T21:02:59Z"},{"id":491852358,"title":"[Fresh] Hash signatures","body":"Fresh Babel plugin emits \\"signatures\\" that are strings containing names of Hooks and call metadata. For example:\\r\\n\\r\\n```js\\r\\nexport default function App() {\\r\\n  _s();\\r\\n\\r\\n  const [foo, setFoo] = useState(0);\\r\\n  React.useEffect(() => {});\\r\\n  return <h1>{foo}</h1>;\\r\\n}\\r\\n\\r\\n_s(App, \\"useState{[foo, setFoo](0)}\\\\\\\\nuseEffect{}\\"); // <-- signature\\r\\n```\\r\\n\\r\\nNote the signature contains `[foo, setFoo](0)`. This ensures that if we change the `foo` name, or if we change the initial state (`0`), we force a remount. Including the initial argument source code is a special case for `useState` and `useReducer` since that usually signals an intentional attempt to remount.\\r\\n\\r\\nUnfortunately, it\'s not always safe to emit an arbitrary string in some environments. For example, in www we have a transform that replaces `cx(\\"foo\\")` with some string hash *regardless of whether it\'s inside a string or not*. It\'s just a regex. So if an expression like this becomes a part of a signature, www transforms can produce a syntax error.\\r\\n\\r\\nTo fix this, we can default to always emitting hashes for signatures. They\'re guaranteed to be short, and can\'t cause these kinds of issues. I left a fallback for ASTExplorer and for our own snapshot tests. (However, our integration tests verify the other branch still works.)","number":16738,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-10T19:21:39Z"},{"id":491839094,"title":"Exclude react-dom when flow checking other builds","body":"_I pulled this commit out of #16725 into a separate PR._\\r\\n\\r\\nAny given build cannot be self-consistent if we type check all the files that are part of other builds. That\'s because the HostConfig is swapped out.\\r\\n\\r\\nImagine for example a shared method that accepts an `Instance` type:\\r\\n\\r\\n```\\r\\n// Reconciler.js\\r\\nexport function render(instance: Instance) {\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nAnd a file specific to ReactDOM might reference this:\\r\\n\\r\\n```\\r\\n// ReactDOM.js\\r\\nimport  {render} from \\"reconciler\\";\\r\\nexport function renderToId(id: string) {\\r\\n  render(document.getElementById(id));\\r\\n}\\r\\n```\\r\\n\\r\\nBut when we check the native file this won\'t work.\\r\\n\\r\\nThis is because the HostConfig can\'t be guaranteed to be consistent with other code such as code that touches the DOM directly.\\r\\n\\r\\nIdeally we\'d have a more systemic solution to this since it will pop up for other packages later too.","number":16737,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-10T18:50:29Z"},{"id":491808414,"title":"DevTools: Long interaction names cannot be seen","body":"Interaction names longer than about 30 characters are truncated without tooltips and so cannot be seen. If you go to the \\"Interactions\\" tab of the profiler, both the left-hand column and the right-hand sidebar are of fixed size and show a truncated name.","number":16736,"user":{"login":"davidmccabe"},"state":"closed","created_at":"2019-09-10T17:38:59Z"},{"id":491794610,"title":"DevTools: Component tree navigation","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhere is no way to collapse/expand component tree or it subtrees. \\r\\n\\r\\nIf I pick element with \\"Select element\\" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don\'t found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels. \\r\\n\\r\\nMaybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand. \\r\\n\\r\\n![image](https://user-images.githubusercontent.com/848985/64634574-396f5280-d406-11e9-9cb8-1630e2edef5e.png)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/848985/64634564-307e8100-d406-11e9-8d3d-1a97c9f3b77b.png)\\r\\n\\r\\nAlso I guess it maybe good place to add https://github.com/facebook/react/issues/16463\\r\\n","number":16735,"user":{"login":"zinoviev"},"state":"closed","created_at":"2019-09-10T17:06:02Z"},{"id":491794348,"title":"Calling window.print() can cause React to crash under specific conditions","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nProgrammatically calling window.print() can cause React to report strange errors before crashing under certain circumstances.  The trigger *seems to be* a call to print() that results in a React state change somewhere (which, in Chrome, seems to happen because the print preview it shows can cause media query events, which can be hooked up to calls to a setState function).  This does not always happen, however--as shown in the example if the code is not called from in a setTimeout it doesn\'t seem to crash.  In addition, if the user initiates printing instead (e.g. via CTRL+P), React never crashes.\\r\\n\\r\\nThe two errors I\'ve seen happen as a result of this are `Failed to execute \'handleEvent\' on \'EventListener\': The provided callback is no longer runnable` (needs \\"Pause on caught exceptions\\" in Chrome\'s DevTools to catch), and after a few of those they\'re followed by `Maximum update depth exceeded` (even though the setState function is only called once).  Once this happens, there\'s a good chance the tab become completely unresponsive after the print dialog is closed.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\nA minimal example can be found here: https://codesandbox.io/s/immutable-snowflake-06cj2 . There are no external dependencies. The code is commented with instructions to reproduce the behavior.\\r\\n\\r\\nI\'ve also included a copy of the code here for completeness\' sake:\\r\\n\\r\\n```jsx\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\n// Custom hook to match media queries.\\r\\n// The setMatch call in this function is at the bottom of the error stack.\\r\\nfunction useMediaQuery(query) {\\r\\n\\r\\n  const [match, setMatch] = React.useState(() => window.matchMedia(query).matches);\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    const queryList = window.matchMedia(query);\\r\\n\\r\\n    /*************************************************************/\\r\\n    /* If this function is not called, the crash does not occur. */\\r\\n    /* When window.print is called, this effect is run as a      */\\r\\n    /* consequence. However React handles it causes errors and   */\\r\\n    /* other strange behavior. Because Firefox handles printing  */\\r\\n    /* differently, it does not crash.                           */\\r\\n    /* While this is an example of using setState in useEffect,  */\\r\\n    /* it is only run once before the error is thrown anyway.    */\\r\\n    /*************************************************************/\\r\\n    const handleMatch = () => setMatch(queryList.matches);\\r\\n    handleMatch();\\r\\n\\r\\n    // Bookkeeping, not relevant to the crash.\\r\\n    queryList.addListener(handleMatch);\\r\\n    return () => queryList.removeListener(handleMatch);\\r\\n  }, [query]);\\r\\n\\r\\n  return match;\\r\\n}\\r\\n\\r\\n\\r\\nexport function App() {\\r\\n  // This is the simplist media query that will cause a crash\\r\\n  // But anything will work as long as it\'s different during printing.\\r\\n  // For example, \\"(max-width: 1260px)\\" also works if the window\\r\\n  // is wide enough.\\r\\n  let isPrint = useMediaQuery(\\"print\\");\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <p style={{ fontWeight: \'bold\' }}>Important: Only Chrome crashes; Firefox (and likely others) are safe.</p>\\r\\n      <p>(You may need to open this page in its own window instead of the Code Sandbox split-screen.)</p>\\r\\n\\r\\n      <button onClick={() => setTimeout(window.print, 100)}>Crashes</button>\\r\\n      <button onClick={asyncPrint}>Crashes</button>\\r\\n      <button onClick={() => window.print()}>Does not crash</button>\\r\\n      <button onClick={syncPrint}>Does not crash</button>\\r\\n      <p>(Note that pressing CTRL+P never crashes)</p>\\r\\n      <p>If you click the button to call window.print(), React will behave strangely. Once the print preview is about to show, suddenly an error <code>\\"Failed to execute \'handleEvent\' on \'EventListener\': The provided callback is no longer runnable\\"</code> will be thrown. After that happens a few times, a <code>\\"Maximum update depth exceeded\\"</code> error will be thrown, even though the setState function is only called once.</p>\\r\\n      <p>(Printing with CTRL+P won\'t crash, clicking the button to print will)</p>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n\\r\\nfunction syncPrint() { window.print(); }\\r\\nfunction asyncPrint() { setTimeout(window.print, 100); }\\r\\n\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nReact should not throw errors after calling window.print(), even if doing so causes state changes.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis is the latest release (16.9.0).  I am unsure if other versions of React are affected.\\r\\nThe behavior was tested using Chrome 76 on Windows 10.  This behavior _will not happen_ in Firefox and likely other browsers as well, probably due to the unique way Chrome handles printing and print previews.\\r\\n\\r\\n\\r\\n\\r\\n","number":16734,"user":{"login":"mwszekely"},"state":"open","created_at":"2019-09-10T17:05:25Z"},{"id":491758863,"title":"Add feature detection for required language features?","body":"ISTM that it would be very useful for the library to detect (and test as needed) required language features (e.g. Map and Set). If they are found to be missing or lacking, then the library could either self-destruct (abstain from creating its interfaces) or set a flag to indicate that it is unusable in the present environment.\\r\\n\\r\\nWhat is the point of presenting interfaces to callers that have no chance of working? As it sits, the only way to work around this issue is for applications to detect the required features themselves. Of course, this requires careful analysis of the React scripts to determine the full extent of the requirements (e.g. partial implementations of Map and Set won\'t cut it).\\r\\n\\r\\nIt is the same story for DOM feature requirements (e.g. requestAnimationFrame) but one step at a time.\\r\\n\\r\\nThis is a common issue with libraries that makes cross-browser scripting more difficult than it should be. For more information:\\r\\n\\r\\nhttps://www.linkedin.com/pulse/building-better-web-applications-david-mark/\\r\\n\\r\\nAs this is a very popular library at the moment, it would be nice to demonstrate some leadership in this area.","number":16733,"user":{"login":"david-mark"},"state":"closed","created_at":"2019-09-10T15:51:15Z"},{"id":491747963,"title":"[react-interactions] Add TabFocusContainer and TabbableScope UI components","body":"This PR adds two experimental components to be used for internal focus management handling. Furthermore, this PR fixes a bug with scope component refs correctly detaching.\\r\\n\\r\\n`TabFocusContainer` contains tabbable keyboard focus to within its children, where tabbing gets wrapped to the beginning.\\r\\n\\r\\n`TabbableScope` collects host components that are keyboard tabbable so that `TabFocusContainer` can handle the tab navigation through said components.","number":16732,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-10T15:31:58Z"},{"id":491683921,"title":"react 16.9.0 webpack build slowness (SSR + externals)","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nproject builds in 75 seconds\\r\\n**What is the expected behavior?**\\r\\nproject builds in 15 seconds\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nnew in 16.9.0\\r\\nwas working with all previous versions\\r\\n\\r\\n\\r\\nHello there,\\r\\n\\r\\nWe\'ve just updated to 16.9.0 and our webpack build now take 60 seconds more than before...\\r\\nThis is really weird, we don\'t really know where to start to understand why suddenly it takes so much time, The new changes in react 16.9.0 don\'t seem to affect webpack build time.\\r\\nWhat are we missing?\\r\\n\\r\\nThe only clues I have are, we are passing from:\\r\\n```\\r\\n+ 504 hidden modules                 + 881 hidden modules\\r\\n```\\r\\n\\r\\nAnd\\r\\n```\\r\\n    Child server:                         Child server:\\r\\n    Hash: 347e70ff10e5eede2203            Hash: 94c5e414f14beaf34f46\\r\\n    Time: 10580ms                         Time: 82081ms\\r\\n    Built at: 09/06/2019 5:33:58 PM       Built at: 09/06/2019 5:38:52 PM\\r\\n\\r\\n                         Asset      Size  Chunks             Chunk Names                      Asset      Size  Chunks             Chunk Names\\r\\n       font/LatoLatin-Bold.ttf   143 KiB          [emitted]                 font/LatoLatin-Bold.ttf   143 KiB          [emitted]  \\r\\n    font/LatoLatin-Regular.ttf   145 KiB          [emitted]              font/LatoLatin-Regular.ttf   145 KiB          [emitted]  \\r\\n                       main.js  3.17 MiB    main  [emitted]  main                           main.js  4.96 MiB    main  [emitted]  main\\r\\n                   main.js.map  1.65 MiB    main  [emitted]  main                       main.js.map  3.46 MiB    main  [emitted]  main\\r\\n\\r\\n    Entrypoint main = main.js main.js.map            Entrypoint main = main.js main.js.map\\r\\n\\r\\n    chunk {main} main.js, main.js.map (main) 2.48 MiB <{main}> >{main}< [entry] [rendered]            chunk {main} main.js, main.js.map (main) 4.02 MiB <{main}> >{main}< [entry] [rendered]\\r\\n```\\r\\n\\r\\n\\r\\n`main.js.map` is far bigger, is there something regarding source map to look after?\\r\\n\\r\\nenvironment is `development` with react-hot-loader enabled.\\r\\n\\r\\nThe production build seems not affected (building in 25 sec (due to terser plugin (minimify/uglify)))\\r\\n\\r\\nThank you,","number":16731,"user":{"login":"GuillaumeCisco"},"state":"closed","created_at":"2019-09-10T13:47:25Z"},{"id":491631163,"title":"[react-events] Remove stopPropagation (Press) + use document for delegation","body":"This PR does two things:\\r\\n\\r\\n- Removes the `stopPropagation` prop from the Press responder module. After internal inspection, this prop seems to have been misused internally because a misunderstanding on what it does. It thus makes sense to remove this prop, because it was always intended to be a temporary hack.\\r\\n- Ensure that we always listen to captures on the `document`. Given we no longer can use `stopPropagation` we no longer have the issue of blocking other event systems already on the `document`.","number":16730,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-10T12:06:56Z"},{"id":491584092,"title":"Eclipse running js : Uncaught SyntaxError: Unexpected identifier ","body":"D:\\\\javaworkspace\\\\APP_TEST\\\\main.js:1\\r\\nimport Vue from \'vue\'\\r\\n       ^^^\\r\\n\\r\\nSyntaxError: Unexpected identifier\\r\\n    at Module._compile (internal/modules/cjs/loader.js:723:23)\\r\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\\r\\n    at Module.load (internal/modules/cjs/loader.js:653:32)\\r\\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\\r\\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\\r\\n    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)\\r\\n    at startup (internal/bootstrap/node.js:283:19)\\r\\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)\\r\\n\\r\\n\\r\\nNewbie in the js. Someone tell me to put in the availablr .jar, but I dont understand how to adjust the environment of my code.\\r\\nBy the way, it\'s the code that I copy from net . I try to learn a simple app but after copy it confuse me.","number":16729,"user":{"login":"reynoldsliu"},"state":"closed","created_at":"2019-09-10T10:22:05Z"},{"id":491533937,"title":"useEffect() parent-child cleanup order","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n`useEffect()` runs the returned cleanup function in the wrong order between parents and child components.  Say both a parent and a child component use an effect to do initialization when mounted and cleanup when unmounted.   The behavior of `useEffect()` will be:\\r\\n\\r\\n1. parent initialization\\r\\n1. child initialization\\r\\n1. parent cleanup\\r\\n1. child cleanup\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSome type of hook that allows for proper cleanup order:\\r\\n\\r\\n1. parent initialization\\r\\n1. child initialization\\r\\n1. child cleanup\\r\\n1. parent cleanup\\r\\n\\r\\n\\r\\n","number":16728,"user":{"login":"rogierschouten"},"state":"open","created_at":"2019-09-10T08:44:45Z"},{"id":491495003,"title":"Event Replaying","body":"There\'s a gap between when we call `createRoot` or `createSyncRoot` and when we actually commit the hydrated tree. E.g. it can take a while before the user calls `root.render()`. In batched mode, there\'s a gap before the scheduled callback actually starts rendering. In concurrent mode, there\'s a gap every time we yield. Additionally, for Suspense boundaries, we use Partial Hydration and there\'s a gap between rendering each new level.\\r\\n\\r\\nIn between these gaps, there can be events issued on dehydrated DOM nodes that are currently dropped. This adds the basic infra for replaying those events.\\r\\n\\r\\nIt is not behind a feature flag or any mode because it should not be possible to get into this mode in the legacy `ReactDOM.hydrate(...)` API since it doesn\'t leave any gaps. So if there is a reason this has any behavior changes, that\'s a bug and we\'d like to find it.\\r\\n\\r\\n## Principle\\r\\n\\r\\nThe constraint here is that we can\'t wait for the actual components to load/render before showing the server rendered HTML. We also can\'t load much in terms of even the event system. We\'re limited to as much script we can reasonably inline into the HTML page which isn\'t much.\\r\\n\\r\\nSome interactions don\'t make sense to do any other way than handling once we do have the code. Such a click on a rich UI. These needs to be prioritized.\\r\\n\\r\\nOther interactions can\'t be replayed later. They have to be dealt with by the browser right now. Such as text input.\\r\\n\\r\\nMany small interactions such as hovering or scrolling a bit also is fairly harmless.\\r\\n\\r\\nSome events are not really user driven and can be inferred by a hydrating component (such as image \\"load\\").\\r\\n\\r\\nThere are cases where the dehydrated tree needs to be dropped and we can no longer replay that event. Such as if it gets deleted by a previous event or forced client-rendered. We could use this mechanism to force hydration even synchronously such as before invoking a discrete event. However, the issue with doing that is that there are so many discrete events that happen just by navigating around such as keypresses or touch to scroll. This would also not work before the code has loaded so we\'d have to always wait to show the SSR content until the code has loaded. This wouldn\'t work with the plain HTML option.\\r\\n\\r\\nMy hypothesis here is that we can get far by letting the browser do most of what it does by default. Server rendered components would know to be somewhat resilient to this. Then we simply replay those events as \\"passive\\" events later to let JS observed what happened. This inherently is a somewhat degrated experience.\\r\\n\\r\\n## Event Types\\r\\n\\r\\nI\'ve categorized events as \\"discrete\\", \\"continuous\\" or \\"other\\".\\r\\n\\r\\nThe \\"discrete\\" category are similar to Discrete priority events. It\'s events that needs to be replayed in the order they were issued and each one needs to be replayed.\\r\\n\\r\\nThe \\"continuous\\" category are things like mouseover, focus, selectionchange. It\'s expected that there are a lot of these while the user is simply navigating the page. However, the previous ones are not really relevant and can be collapsed. Only the last state for each type needs to be replayed. There\'s only one \\"hover target\\" and one \\"active element\\" once we hydrate. The intermediate steps are not relevant.\\r\\n\\r\\nThe \\"other\\" category don\'t need to be replayed. Either because it can be replayed by the Host component hydrating itself or it\'s not a critical event.\\r\\n\\r\\n## In this PR:\\r\\n\\r\\n- [x] Replay continuous events.\\r\\n- [x] Listen to all replayable events eagerly when we call createRoot.\\r\\n- [x] Tests\\r\\n\\r\\n## Follow up PRs:\\r\\n\\r\\n- [ ] Avoid attaching active listeners eagerly in Flare.\\r\\n- [ ] Expose callback when an event doesn\'t get a target during replay. I.e. it\'s \\"dropped\\".\\r\\n- [ ] Don\'t replay events if `beforeunload` fires. This means a link or form successfully navigated. This avoids double side-effects by the browser navigation and JS both triggering.\\r\\n- [ ] Allow grandfathered events to be passed to `ReactDOM.createRoot(..., {replayEvents: ...})`. This allows an early light script to track events that happened before even React loaded onto the page.\\r\\n- [x] Increase priority of suspense boundaries that are blocked on for discrete updates to User Blocking priority. (All boundaries or just the first event?) This gives us \\"selective hydration\\".\\r\\n   - [x] We have an option to also attempt at sync priority which could allow `preventDefault` behavior *if* that succeeds. This is useful for handling links with JS.\\r\\n- [x] Increase priority of suspense boundaries that are blocked on for continuous updates to Low priority.\\r\\n- [x] Add API such as `ReactDOM.hydrate(node)` to increase the priority of that boundary to Normal pri or whatever scheduler priority context we\'re running in.\\r\\n- [ ] Timeout boundary if it takes too long to hydrate.\\r\\n\\r\\nIn future PRs we can improve the actual replaying mechanism based on special cases. I\'m sure there\'s a long tail.\\r\\n\\r\\nIn particular the integration with Flare has some flaws right now. We can also evaluate having Flare replaying happen at other levels such as in the synthetic layer.","number":16725,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-10T07:17:39Z"},{"id":491482659,"title":"is it a bug about updata?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nnot same with twice case,\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/s/lively-monad-vxx2r?fontsize=14\\r\\n**What is the expected behavior?**\\r\\nthe same with twice case, or all updata, or none updata about state2\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16724,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-09-10T06:46:33Z"},{"id":491480392,"title":"Update README.md","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16723,"user":{"login":"any86"},"state":"closed","created_at":"2019-09-10T06:40:29Z"},{"id":491464137,"title":"memo name is Anonymous when passed the result of forwardRef","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nConsider the following code:\\r\\n\\r\\n```js\\r\\nconst forwardRefComponentLike = function forwardRefComponentLike(_props, _ref) {\\r\\n  return <span>FowardRef</span>;\\r\\n};\\r\\n\\r\\nconst FowardRefComponent = React.forwardRef(forwardRefComponentLike, {});\\r\\n\\r\\nconst MemoOfFowardRefComponent = React.memo(FowardRefComponent);\\r\\n```\\r\\n\\r\\nThe `MemoOfFowardRefComponent` component does not pick up the name of the ForwardRefComponent and is instead rendered in devtools as:\\r\\n\\r\\n```\\r\\n Anonymous [Memo]\\r\\n    forwardRefComponentLike [ForwardRef]\\r\\n```\\r\\n\\r\\n<img width=\\"262\\" alt=\\"Screen Shot 2019-09-09 at 10 45 02 PM\\" src=\\"https://user-images.githubusercontent.com/227292/64587241-81816d00-d353-11e9-8f20-873aa00f5076.png\\">\\r\\n\\r\\nSee this codesandbox for a demo and a comparison of how React.memo handles regular functional components: https://codesandbox.io/s/react-forwardref-and-memo-combo-33vx7\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect this to pick up the name of the thing passed into React.Memo, as happens for regular components\\r\\n\\r\\n```\\r\\nforwardRefComponentLike [Memo]\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nTested with React 16.9.0.","number":16722,"user":{"login":"BPScott"},"state":"closed","created_at":"2019-09-10T05:50:12Z"},{"id":491443410,"title":"unstable_renderSubtreeIntoContainer does not transfer context","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n`unstable_renderSubtreeIntoContainer` does not inherit the context from its current tree and transfer it to the rendered subtree\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/s/portal-context-propagation-169-jid1w\\r\\n\\r\\n**What is the expected behavior?**\\r\\nthe second set of text should also be red\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact v16+","number":16721,"user":{"login":"probablyup"},"state":"closed","created_at":"2019-09-10T04:29:30Z"},{"id":491436256,"title":"WIP: Show unsupported screen in dev tools for React version < 15.0.0","body":"refs https://github.com/facebook/react/issues/16462\\r\\n\\r\\n<img width=\\"634\\" alt=\\"Screen Shot 2019-09-09 at 20 51 00\\" src=\\"https://user-images.githubusercontent.com/1857751/64583259-3ceed500-d345-11e9-9a36-0b474bfc5f2b.png\\">\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16720,"user":{"login":"danielhusar"},"state":"closed","created_at":"2019-09-10T03:58:10Z"},{"id":491399060,"title":"npm start error on Mac","body":"I keep getting this error when plugging in npm start to the system. Any ideas?\\r\\n\\r\\n`Davids-MacBook-Air:davidsapp davidnogueira$ npm start\\r\\n\\r\\n> davidsapp@0.1.0 start /Users/davidnogueira/Documents/React:Redux/davidsapp\\r\\n> react-scripts start\\r\\n\\r\\nsh: react-scripts: command not found\\r\\nnpm ERR! file sh\\r\\nnpm ERR! code ELIFECYCLE\\r\\nnpm ERR! errno ENOENT\\r\\nnpm ERR! syscall spawn\\r\\nnpm ERR! davidsapp@0.1.0 start: `react-scripts start`\\r\\nnpm ERR! spawn ENOENT\\r\\nnpm ERR! \\r\\nnpm ERR! Failed at the davidsapp@0.1.0 start script.\\r\\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\\r\\n\\r\\nnpm ERR! A complete log of this run can be found in:\\r\\nnpm ERR!     /Users/davidnogueira/.npm/_logs/2019-09-10T01_15_07_461Z-debug.log\\r\\nDavids-MacBook-Air:davidsapp davidnogueira$ `","number":16719,"user":{"login":"DavidRNogueira"},"state":"closed","created_at":"2019-09-10T01:19:24Z"},{"id":491369779,"title":"Feature Request: Lazy evaluation of useEffect dependencies.","body":"# Current Behaviour \\r\\n\\r\\nThe dependencies to `useEffect` are given as an array:\\r\\n\\r\\n```js\\r\\nuseEffect(\\r\\n  () => { ... }\\r\\n  [deps],\\r\\n);\\r\\n```\\r\\n\\r\\nSo they are evaluated as soon as the hook is declared.\\r\\n\\r\\n# Desired Behaviour \\r\\n\\r\\nThe dependencies can also be given as a function, so these can be evaluated *after the children have been rendered*:\\r\\n\\r\\n```js\\r\\nuseEffect(\\r\\n  () => { ... }\\r\\n  () => [deps],\\r\\n);\\r\\n```\\r\\n\\r\\n# Rationale\\r\\n\\r\\nSometimes an effect in an ancestor is conditional on its descendants changing. Phrased alternatively, sometimes the effect dependencies of an ancestor are those of its dependents. \\r\\n\\r\\nBut if we are to compose the descendants (via the `children` prop), the ancestor has no knowledge  of the descendants\' dependencies.\\r\\n\\r\\n# Simple Example (SVG)\\r\\n\\r\\n*Note: This is ultra-simplified example and an ultra-specific case of a generic behaviour/mechanism.*\\r\\n\\r\\n## Result\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/880132/64571118-b8a74c80-d35a-11e9-9a28-754ad9f7293e.png)\\r\\n\\r\\n## Code\\r\\n\\r\\nEssential code only, removing HOCs and props:\\r\\n\\r\\n```js\\r\\n<Hexagon>\\r\\n  <Text value=\\"Text\\"/>\\r\\n</Hexagon>\\r\\n```\\r\\n\\r\\n## Constraints\\r\\n\\r\\n- BBox = BoundingBox\\r\\n- You can only query the DOM for the BBox of the text after it has been mounted.\\r\\n- The `Hexagon`\'s shape should update based on its contents.\\r\\n- As previously mentioned, the `Hexagon` should not know that its `children` are `Text` - it just query the BBox of the element containing its `children`.\\r\\n\\r\\n## Solution\\r\\n\\r\\n### Descendant notifies change \\r\\n\\r\\nSomething like this in `Text` (an HOC really):\\r\\n\\r\\n```js\\r\\nconst {onChanged} = useContext(ChangeContext);\\r\\n\\r\\nuseEffect(() => {\\r\\n onChanged()\\r\\n}, [props.value]); \\r\\n```\\r\\n\\r\\n### Ancestor being notified\\r\\n\\r\\nWhenever a descendant fires onChange a `ref` in the ancestor is mutated:\\r\\n\\r\\n```js\\r\\ndescendantsChanged.current = true;\\r\\n```\\r\\n\\r\\nHow this happens is an implementation detail I can share.\\r\\n\\r\\nThe important point is that by the time we hit `useEffect` in Hexagon, it has the knowledge one of its descendants has changed.\\r\\n\\r\\n### The missing link\\r\\n\\r\\nIssue is, this won\'t work:\\r\\n\\r\\n```js\\r\\nuseEffect(\\r\\n  () => { /* query children bbox here */ }\\r\\n  [descendantsChanged.current],\\r\\n);\\r\\n```\\r\\n\\r\\nWhereas this will (I guess):\\r\\n```js\\r\\nuseEffect(\\r\\n  () => { /* query children bbox here */ }\\r\\n  () => [descendantsChanged.current],\\r\\n);\\r\\n```\\r\\n\\r\\n# Complex example (HTML)\\r\\n\\r\\nWhen the text of a port (eg, `out`) changes, the box of the \'chip\' has to be queried:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/880132/64572456-4dac4480-d35f-11e9-8512-19f86fb752f9.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":16718,"user":{"login":"Izhaki"},"state":"closed","created_at":"2019-09-09T23:13:30Z"},{"id":491365674,"title":"[react-reconciler] Flatten responder listeners array","body":"This supports nested arrays of listeners, allowing people to use responder\\r\\nhooks that combine several other listeners. For example:\\r\\n\\r\\n```\\r\\nfunction usePress(config) {\\r\\n  const tap = useTap({ ... });\\r\\n  const keyboard = useKeyboard({ ... });\\r\\n  // ...\\r\\n  return [ tap, keyboard ];\\r\\n}\\r\\n\\r\\nfunction MyComponent(props) {\\r\\n  const press = usePress({ ... });\\r\\n  return <div listeners={[press]} />\\r\\n}\\r\\n```","number":16717,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-09T22:57:52Z"},{"id":491362923,"title":"Remove console.log from copyWithSet","body":"This doesn\'t seem like it\'s intentional.\\r\\n\\r\\nSee https://fb.workplace.com/groups/2299331103613797/permalink/2425185521028354/ [FB-Only]","number":16716,"user":{"login":"Daniel15"},"state":"closed","created_at":"2019-09-09T22:48:34Z"},{"id":491361119,"title":"Don\'t bind expiration time to render callback","body":"## Based on #16663 and #16678 \\r\\n\\r\\nThis is a fragile pattern because there\'s only meant to be a single task per root, running at a single expiration time. Instead of binding the expiration time to the render task, or closing over it, we should determine the correct expiration time to work on using fields we store on the root object itself.\\r\\n\\r\\nThis removes the \\"return a continuation\\" pattern from the `renderRoot` function. Continuation handling is now handled by the wrapper function, which I\'ve renamed from `runRootCallback` to `performWorkOnRoot`. That function is merely an entry point to `renderRoot`, so I\'ve also removed the callback argument.\\r\\n\\r\\nSo to sum up, at at the beginning of each task, `performWorkOnRoot` determines which expiration time to work on, then calls `renderRoot`. And before exiting, it checks if it needs to schedule another task.","number":16715,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-09T22:42:11Z"},{"id":491337856,"title":"Let\'s schedule the passive effects even earlier","body":"It turns out I needed to schedule mine in the mutation phase and there are also clean up life-cycles there.\\r\\n","number":16714,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-09T21:32:31Z"},{"id":491264343,"title":"Schedule passive callbacks before layout effects are invoked","body":"I\'ll need this to schedule event replaying after the passive effects.","number":16713,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-09T18:49:51Z"},{"id":491190428,"title":"Fix ESLint hook rules for wrapped components","body":"This PR fixes the issue that rules like \\"no hooks in conditional statements\\" do not work with wrapped functions like you would have with forwardRef. (#14088)\\r\\n\\r\\nI added new tests for these cases and ensured that the existing tests still pass. Making PR to huge projects is quite new to me, so I hope I did not miss anything.","number":16712,"user":{"login":"Shadowlauch"},"state":"open","created_at":"2019-09-09T16:09:37Z"},{"id":491157162,"title":"Error: \\"Could not find node with id \\"44300\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Reading the flamegraph of my React app\\r\\n2. Clicked on one of the options in the `Rendered at` list of the graph\\r\\n  ![image](https://user-images.githubusercontent.com/41026008/64542778-69710580-d2e1-11e9-8846-ab1b810e034c.png)\\r\\n3. This caused the below error to appear in React DevTools.\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)\\r\\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\\r\\n\\r\\nComponent stack: in xi\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16711,"user":{"login":"chrisdusyk-iq"},"state":"closed","created_at":"2019-09-09T15:10:14Z"},{"id":491059629,"title":"Sites can detect when you have installed React Developer Tools","body":"Not sure how, but websites can detect usage of React developer tools. Example: https://smallpdf.com\\r\\n\\r\\nSmallPDF will show you a chatbot asking you to join their team if you have React developer tools installed in your browser. Although smart, this is also creepy.\\r\\n\\r\\nI tested my theory by uninstalling React developer tools after which the chat bot did not appear.","number":16710,"user":{"login":"jordyvandomselaar"},"state":"closed","created_at":"2019-09-09T12:15:22Z"},{"id":491025621,"title":"Bind rAF and cAF to window (#16606)","body":"When capturing local references of requestAnimationFrame and cancelAnimationFrame - bind them to the window object.\\r\\nFixes #16606","number":16709,"user":{"login":"liady"},"state":"open","created_at":"2019-09-09T10:57:04Z"},{"id":490999390,"title":"Correct link for troubleshooting react-dev-tools (#16690)","body":"As pointed out in #16690 - the link for \'React Tab Doesn\'t Show Up\' points to the empty README.MD.\\r\\nThis points it to that section in the v3 version README.MD - until an updated section will be added to the new dev-tools.\\r\\n","number":16708,"user":{"login":"liady"},"state":"closed","created_at":"2019-09-09T09:59:21Z"},{"id":490988889,"title":"react bundle size is creeping up","body":"Hi,\\r\\n\\r\\nI really love React, especially with the new hooks API, but I have issues with the bundle size.\\r\\n\\r\\nReact 16.9.0 takes 131kB of my bundle. And I also need to ship my code and some other packages.\\r\\n\\r\\nThis makes the time to interactive on older phones slow.\\r\\n\\r\\nI serve the bundle compressed, but it is still a lot of CPU cycles processing javascript. My point is that 131kB of JS !== 131kB of jpg image.\\r\\n\\r\\nThe bundle size of react is creeping up all the time. Maybe React could benefit from some bundle limit, let\'s say 70kB?\\r\\n\\r\\nI know that there is Preact that has only 3kB gzipped, but I am not sure if it is as stable as React.\\r\\n\\r\\nIs there a plan to work on the bundle size?\\r\\n\\r\\n<img width=\\"742\\" alt=\\"react\\" src=\\"https://user-images.githubusercontent.com/18726534/64520304-253c3000-d2f6-11e9-9b42-3a69c02c032d.png\\">\\r\\n\\r\\nthank you","number":16707,"user":{"login":"zsolt-dev"},"state":"closed","created_at":"2019-09-09T09:38:11Z"},{"id":490885212,"title":"useEffect with react proxy resulting in react page request going to api server","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI am user react proxy in development to route api request to jsonserver. When using useEffect to fetch initial data for a page, I see a second page request initiated by react-dom.development.js that instead of going to react app is received by jsonserver which hangs till browser terminate connection. See screenshot below. \\r\\n![image](https://user-images.githubusercontent.com/40739654/64505468-96012f00-d299-11e9-855c-94405208e198.png)\\r\\n\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact: 16.8.6\\r\\nreact-dom: 16.8.6","number":16706,"user":{"login":"gsinghab2"},"state":"closed","created_at":"2019-09-09T05:32:17Z"},{"id":490855630,"title":"[new feature] support array in the className","body":"I konw the classnames package can resolve the problem,\\r\\nbut I want react support this by default without classnames package.\\r\\n\\r\\nclassnames is good, but when I want to use it, I should type a long name,\\r\\nand the mostly time, I don\'t have installd it, but I need to do a little code to merge classname to install it.\\r\\n\\r\\nand a little different to classnames\\r\\n* className can accept a array (any[]), not support object.\\r\\n* className still accept a string\\r\\n\\r\\n```js\\r\\n<div className={[\'a\', \'b\']}></div>\\r\\n```\\r\\nto \\r\\n```js\\r\\n<div className=\\"a b\\"></div>\\r\\n```\\r\\n\\r\\nand filter the string item to be the className\\r\\nthis can do some conditions, like jsx (true && <div></div>)\\r\\n```js\\r\\n<div className={[\\r\\n  \'a b c\',\\r\\n  true && \'d\',\\r\\n  false && \'f\',\\r\\n  null && \'g\',\\r\\n  0 && \'h\',\\r\\n  undefined && \'i\',\\r\\n]}></div>\\r\\n```\\r\\nto \\r\\n```js\\r\\n<div className=\\"a b c d\\"></div>\\r\\n```\\r\\n","number":16705,"user":{"login":"coppyC"},"state":"closed","created_at":"2019-09-09T03:15:13Z"},{"id":490855016,"title":"React Hooks useEffect issue. Using useEffect inside a function.. Error on some function names.","body":"![image](https://user-images.githubusercontent.com/30321279/64500996-7572ae00-d274-11e9-8a0e-654b15868c7d.png)\\r\\n\\r\\n-  Line 44:  React Hook \\"useEffect\\" is called in function \\"displayNoneOnAdmin\\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks.\\r\\n\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/30321279/64501097-cb475600-d274-11e9-9b31-521bf5042b75.png)\\r\\n\\r\\nUsing lowercase as a function name causes an error? This is a bug right?\\r\\nAs you can see, I alse used camel case in the previus function(useOutsideClick)\\r\\n","number":16704,"user":{"login":"gerardsegismundo"},"state":"closed","created_at":"2019-09-09T03:11:47Z"},{"id":490740312,"title":"[Question]Is there a way to access new context api within constructor?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Is there a way to access new context api within constructor?**\\r\\n\\r\\nI want to get context in constructor function, but now i only get after componentDidMount.\\r\\ndemo: https://codesandbox.io/s/dank-wave-yy8uq\\r\\n\\r\\nI try to add the second parameter to constructor function, i can get context in constructor.but I don\'t know if this is the right way\uff1for is there another way?\\r\\ndemo: https://codesandbox.io/s/quizzical-sinoussi-ln7lg\\r\\n\\r\\n\\r\\n**react: 16.8.6 redux: 4.0.4 react-redux: 7.1.1**\\r\\n","number":16703,"user":{"login":"zaleGZL"},"state":"closed","created_at":"2019-09-08T10:59:56Z"},{"id":490729960,"title":"`useEffect()` not working correctly on `codepen.io`.","body":"In my app there\'s a component called `SortableList` that is a drag\'n\'drop list.\\r\\nIt works.\\r\\nI created a `codepen.io` with it for a small demo but it doesn\'t work there.\\r\\nI debugged a bit with `console.log()` and seems like `useEffect()` is not being run after a state property changes.\\r\\nhttps://codepen.io/catamphetamine/pen/qBWxEQX\\r\\n\\r\\nThe code is:\\r\\n\\r\\n```js\\r\\nconst [dragging, setDragging] = useState()\\r\\nconst onDragStart = useCallback(() => {\\r\\n  setDragging({ ... })\\r\\n}, [])\\r\\nconsole.log(\'In render(): `gragging` is\', dragging)\\r\\nuseEffect(() => {\\r\\n  console.log(\'In useEffect(): `gragging` is\', dragging)\\r\\n}, [dragging])\\r\\n```\\r\\n\\r\\nThe console output is:\\r\\n\\r\\n```\\r\\n\\"In render(): `dragging` is\\" undefined\\r\\n\\"In useEffect(): `dragging` is\\" undefined\\r\\n\\"In render(): `dragging` is\\" Object { ... }\\r\\n```\\r\\n\\r\\n`useEffect()` triggers right before the new `dragging` is set for some reason.\\r\\nSeems like a `codepen.io` bug.\\r\\nWhat do you think?\\r\\n\\r\\ncc @CodePen","number":16702,"user":{"login":"catamphetamine"},"state":"closed","created_at":"2019-09-08T09:07:29Z"},{"id":490660311,"title":"[DevTools] Fixed font family issue in Firefox.","body":"Fixes: #16464 \\r\\n\\r\\nIt appears that we need to explicitly set the `font-family` for FF.\\r\\n\\r\\nScreenshot:\\r\\n<img width=\\"201\\" alt=\\"Screenshot 2019-09-07 at 19 30 13\\" src=\\"https://user-images.githubusercontent.com/23095052/64478248-0dee2d00-d1a6-11e9-9864-8c0c7750884c.png\\">\\r\\n\\r\\n","number":16701,"user":{"login":"hristo-kanchev"},"state":"closed","created_at":"2019-09-07T17:31:22Z"},{"id":490649943,"title":"[DevTools] Support for adding props | Improved state/props value editing ","body":"**Solves**:\\r\\n- #16484 \\r\\n- #16476 \\r\\n\\r\\nAs both issues are highly overlapping, @bvaughn and I decided to submit the fix for both in one PR.\\r\\n\\r\\n**Changes**:\\r\\n- Extracted `sanitizeForParse` to the `utils` file as it\'s used in multiple places\\r\\n- Added new component - `EditableName`\\r\\n- Added support for adding additional entries (currently only enabled for `prop`)\\r\\n- Fixed the issue with locking values by `type`.\\r\\n- String values are now surrounded by quotes.\\r\\n\\r\\n**Screenshots**:\\r\\n\\r\\n**Adding new props**\\r\\n![props-1](https://user-images.githubusercontent.com/23095052/64477058-3fabc780-d197-11e9-8d51-dd48016f4347.gif)\\r\\n![props-2](https://user-images.githubusercontent.com/23095052/64477059-40445e00-d197-11e9-894c-daed6dec234f.gif)\\r\\n![props-3](https://user-images.githubusercontent.com/23095052/64477060-40445e00-d197-11e9-9676-204d4ced7334.gif)\\r\\n\\r\\n---\\r\\n\\r\\n**Overwriting an existing prop value**\\r\\n![props-4](https://user-images.githubusercontent.com/23095052/64477061-40445e00-d197-11e9-8ccf-240a18a88065.gif)\\r\\n\\r\\n---\\r\\n\\r\\n**Changing data type** - **null** -> **array**\\r\\n![props-5](https://user-images.githubusercontent.com/23095052/64477062-40445e00-d197-11e9-9ca1-a7940b4b06b5.gif)\\r\\n","number":16700,"user":{"login":"hristo-kanchev"},"state":"closed","created_at":"2019-09-07T15:48:53Z"},{"id":490649503,"title":"How can I get DOM on the React Hook?","body":"In the class component\uff0cwe can use ReactDom.findDOMNode(this) to get DOM element:\\r\\n\\r\\nclass Collapse {\\r\\n    componentDidMount() {\\r\\n        ReactDom.findDOMNode(this) ;\\r\\n    }\\r\\n    return this.props.children;\\r\\n}\\r\\n\\r\\nBut how can I get it in React Hook without \'this\';","number":16699,"user":{"login":"karmiy"},"state":"closed","created_at":"2019-09-07T15:44:39Z"},{"id":490632476,"title":"[Question]Unnecessary rAF call","body":"At now, for sync mode, we will call `flushSyncCallbackQueue` after `scheduleCallbackForRoot`, but seems all works been done in `flushSyncCallbackQueue`, `scheduleCallbackForRoot` just to push callback in syncQueue. The question here is, `scheduleCallbackForRoot` will trigger rAF + postmessage(only use postmessage a few days ago), so here the rAF/message callback(`performWorkUntilDeadline`) is Unnecessary, you will find that it just execute meaningless code(go to flushWork and return because the work has been done in `flushSyncCallbackQueue`). So, could we avoid this or I miss something, please let me know, thanks!","number":16698,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-09-07T12:53:42Z"},{"id":490593301,"title":"default props = {}","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nInfinite loop\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/s/stoic-fermi-yb4ur\\r\\n**What is the expected behavior?**\\r\\nThere are no good coding specifications\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16697,"user":{"login":"qq645381995"},"state":"closed","created_at":"2019-09-07T05:14:04Z"},{"id":490592084,"title":"new react app keeps on reloading!","body":"I created a new react app with `npx create-react-app` after all installation finished I started the application but its keep on reloding, I tired all solution on the internet but nothing fix the issue.\\r\\n```\\r\\nOS: Ubuntu 19.04\\r\\nNode.js v12.6.0.\\r\\nNpm version 6.10.3\\r\\n\\"react\\": \\"^16.9.0\\",\\r\\n\\"react-dom\\": \\"^16.9.0\\",\\r\\n\\"react-scripts\\": \\"3.1.1\\"\\r\\n```\\r\\n![Screenshot from 2019-09-07 10-26-17](https://user-images.githubusercontent.com/42825498/64470039-0e60d680-d15a-11e9-8d44-8b3f1c8fd660.png)\\r\\n","number":16696,"user":{"login":"usama-asfar"},"state":"closed","created_at":"2019-09-07T04:57:33Z"},{"id":490584373,"title":"Remove wrong copy-paste code in test","body":"Seems this test case copies from the former one which has a `{ this.state.active ? <button</button> : null}`, but this test case doesn\'t need that","number":16695,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-09-07T03:11:16Z"},{"id":490570037,"title":"[react-events] Tap: change order of events","body":"Before:\\r\\n\\r\\nstart -> change -> update -> end (cancel) -> change\\r\\n\\r\\nNow:\\r\\n\\r\\nstart -> change -> update -> change -> end (cancel)","number":16694,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-07T00:37:23Z"},{"id":490554716,"title":"Calling setState in the callback of setState prevents input\'s value to be updated by onChange ","body":"**I am reporting a *bug***\\r\\n\\r\\n\\r\\n**Current behavior:** Calling setState in the callback of setState to generate dynamic HTML containing inputs prevents input\'s `value=` to be updated by `onChange=`.\\r\\n\\r\\nConcretely, for a use case like this:\\r\\n```javascript\\r\\nrender() {\\r\\n    return (\\r\\n        <div>\\r\\n            <div>{this.state.inputs}</div>\\r\\n            // <button>Add one more input</button>\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n```\\r\\n\\r\\nThis doesn\'t work:\\r\\n```javascript\\r\\nvar apiData = [{ value: \\"\\" }, { value: \\"\\" }]\\r\\nthis.setState({\\r\\n    items: apiData,\\r\\n}, () => this.setState({\\r\\n    inputs: apiData.map((v, i) => {\\r\\n        return <input key={i} value={this.state.items[i].value}\\r\\n            onChange={(e) => this.handleChangeArray(e, i)} />\\r\\n    })\\r\\n}))\\r\\n```\\r\\n\\r\\nHere is a basic example that shows bug: https://jsfiddle.net/jw81uo4y/1/\\r\\n\\r\\nI opened a [question on stack overflow](https://stackoverflow.com/questions/57802807/calling-setstate-in-callback-of-setstate-generate-a-weird-bug-that-prevents-input) to check with the community first if I was not doing something silly.\\r\\n\\r\\n_I\'m running react@16.9.0_\\r\\n\\r\\nThanks!\\r\\n","number":16692,"user":{"login":"adriendomoison"},"state":"closed","created_at":"2019-09-06T23:08:03Z"},{"id":490542708,"title":"DevTools: Failed to execute \'postMessage\' on \'Window\': #<HTMLAllCollection> could not be cloned.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nNew dev tools are working fine. But I have a particular component that, when it mounts, the dev tools no longer can inspect anything about it. When I select it, the right hand side just says \\"Loading...\\" and nothing ever loads.\\r\\n\\r\\n![interactive](https://user-images.githubusercontent.com/1316441/64463256-95fa0700-d0c0-11e9-9d7b-a853854a1bfe.gif)\\r\\n\\r\\nAs you can see from the gif above, before I click on that particular component that seems to break, I have no errors in my console. But as soon as I click on the component that breaks (or any of its children) the number of console errors goes up by one.\\r\\n\\r\\nThe error in the console looks like this:\\r\\n\\r\\n![Screen Shot 2019-09-06 at 4 08 14 PM](https://user-images.githubusercontent.com/1316441/64463296-bc1fa700-d0c0-11e9-9cf4-4dd5fa10ff72.png)\\r\\n\\r\\n```\\r\\nbackend.js:1 Uncaught DOMException: Failed to execute \'postMessage\' on \'Window\': #<HTMLAllCollection> could not be cloned.\\r\\n    at Object.send (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:1:94424)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:9:5785\\r\\n```\\r\\n\\r\\nHard to provide steps to reproduce this since it\'s a custom component with business-specific logic (so can\'t provide the code). But I tried google-ing this problem and error and nothing showed up. So figured posting it here might help if others out there on the interwebs are having the same issue and they can comment here.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nInspecting any mounted component will work.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nCurrently on react/react-dom 16.3 and the previous dev tools worked just fine. I could inspect any component and see it\'s data. But the [latestest update](https://reactjs.org/blog/2019/08/15/new-react-devtools.html) broke that.\\r\\n","number":16691,"user":{"login":"jimniels"},"state":"open","created_at":"2019-09-06T22:12:51Z"},{"id":490526423,"title":"Troubleshooting instructions link update","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nLink to troubleshooting instructions in the devtools extension disabled popup is outdated. It is pointing [here](https://github.com/facebook/react-devtools/blob/master/README.md#the-react-tab-doesnt-show-up) which is redirecting [here](https://github.com/facebook/react).\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://github.com/facebook/react/blob/master/packages/react-devtools-extensions/popups/disabled.html\\r\\nLink needs to be updated- not sure what the correct link is\\r\\n\\r\\n**What is the expected behavior?**\\r\\nhttps://github.com/facebook/react/blob/master/packages/react-devtools-extensions/popups/disabled.html\\r\\nLink needs to be updated- not sure what the correct link is","number":16690,"user":{"login":"tessawiedmann"},"state":"closed","created_at":"2019-09-06T21:16:35Z"},{"id":490497518,"title":"[react-events] Tap: add maximumDistance prop","body":"A prop for configuring the maximum distance that the active pointer can move before the tap is cancelled.\\r\\n\\r\\nDemo: https://codesandbox.io/s/latest-responder-build-rz96j30rp","number":16689,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-06T19:55:59Z"},{"id":490484551,"title":"[Fresh] Add skipEnvCheck option to Babel plugin","body":"This is a first-class way to override the env check in Fresh Babel transform. The check is usually helpful but maybe you want more control. For example, in www we _do_ want to run the transform in tests to ensure it doesn\'t regress. Same in the React repo.","number":16688,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-06T19:20:35Z"},{"id":490470758,"title":"[Fresh] Fix a crash with implicit arrow return","body":"This used to crash because we tried to insert code into a non-block body. Now we convert it to a block first. See the snapshot.\\r\\n\\r\\nFixes https://github.com/facebook/react/issues/16686","number":16687,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-06T18:44:36Z"},{"id":490426516,"title":"Compile error `react-refresh/babel` 0.4.0","body":"Using `react-refresh/babel` 0.4.0 is giving me this error on a large number of files:\\r\\n\\r\\n```\\r\\nERROR in ../orbit-app/src/hooks/useStores.ts\\r\\nModule build failed (from ../node_modules/babel-loader/lib/index.js):\\r\\nTypeError: Cannot read property \'0\' of undefined\\r\\n    at Function.get (/Users/nw/projects/motion/orbit/node_modules/@babel/traverse/lib/path/index.js:115:33)\\r\\n    at NodePath.unshiftContainer (/Users/nw/projects/motion/orbit/node_modules/@babel/traverse/lib/path/modification.js:191:31)\\r\\n    at PluginPass.exit (/Users/nw/projects/motion/orbit/node_modules/react-refresh/cjs/react-refresh-babel.development.js:546:28)\\r\\n```\\r\\n\\r\\nI narrowed down that file to the simplest thing that causes it:\\r\\n\\r\\n```\\r\\nimport { useContext } from \'react\'\\r\\n\\r\\nexport default () => useContext()\\r\\n```\\r\\n\\r\\n_Originally posted by @natew in https://github.com/facebook/react/issues/16604#issuecomment-528708174_","number":16686,"user":{"login":"natew"},"state":"closed","created_at":"2019-09-06T16:55:45Z"},{"id":490421184,"title":"Doesn\'t support profiler even with latest React version","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe profiler tab only shows this message even though I have a version greater than 16.5.\\r\\n\\r\\n![Screen Shot 2019-09-06 at 13 26 47](https://user-images.githubusercontent.com/5483459/64444238-0d706c00-d0aa-11e9-8d32-810465a13433.png)\\r\\n\\r\\n\\r\\nSomething strange on the console is this message and just appears when the extension is active.\\r\\n\\r\\n![Screen Shot 2019-09-06 at 13 25 17](https://user-images.githubusercontent.com/5483459/64444170-e74acc00-d0a9-11e9-8b7c-acaa31e50cea.png)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact **16.9.0**\\r\\nReact DevTools **4.0.6-a39d9c3**\\r\\n","number":16685,"user":{"login":"iamgbayer"},"state":"closed","created_at":"2019-09-06T16:42:07Z"},{"id":490398513,"title":"Add FreshRuntime WWW bundle, remove ESLint","body":"* Adds Fresh runtime build for www\\r\\n* Removes ESLint plugin www build because we actually use the Node build on www for it","number":16684,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-06T15:47:27Z"},{"id":490298541,"title":"class render another type","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n*feature* \\r\\n\\r\\nnow\\r\\n```\\r\\nclass Hello extends React.Component {\\r\\n  render() {\\r\\n    return <div>Hello</div>\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nfeature\\r\\n```\\r\\nclass Hello extends React.Component {\\r\\n  render = <div>Hello</div>\\r\\n}\\r\\n```","number":16683,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-09-06T12:23:45Z"},{"id":490255629,"title":"Is it possible to disable all contexts within the specified subcomponent?","body":"Here is an example. I want that contexts work in PageOne and PageTwo, but all subcomponents of SandBox won\'t get any context. How can I achieve it?\\r\\n\\r\\n```jsx\\r\\nconst ContextA = React.createContext(\'a\');\\r\\nconst ContextB = React.createContext(\'b\');\\r\\n\\r\\nclass App extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <ContextA.Provider value=\\"A\\">\\r\\n           <ContextB.Provider value=\\"B\\">\\r\\n              <PageOne />\\r\\n              <PageTwo />\\r\\n              <SandBox>\\r\\n                  <SubPage />\\r\\n              </SandBox>\\r\\n           </ContextB.Provider>\\r\\n      </ContextA.Provider>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction SubPage() {\\r\\n  return (\\r\\n    <ContextA.Consumer>\\r\\n      {a => (\\r\\n        <ContextB.Consumer>\\r\\n          {b => (\\r\\n            <Content />\\r\\n          )}\\r\\n        </ContextB.Consumer>\\r\\n      )}\\r\\n    </ContextA.Consumer>\\r\\n  );\\r\\n}\\r\\n```","number":16682,"user":{"login":"neoimale"},"state":"closed","created_at":"2019-09-06T10:34:18Z"},{"id":490237367,"title":"fix typos on react-devtools comments","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16681,"user":{"login":"alexrohleder"},"state":"closed","created_at":"2019-09-06T09:52:33Z"},{"id":490220921,"title":"DevTools: Uninitialized context is displayed as an empty object","body":"When inspecting a component that is missing `context` it is displayed as an empty object, meanwhile if the `state` is not initialized it is not displayed at all, for no `props` it is displayed the string `None`. In my humble opinion it is misleading that no context is displayed as an empty object.","number":16679,"user":{"login":"micnic"},"state":"closed","created_at":"2019-09-06T09:18:19Z"},{"id":490106585,"title":"Get next expiration time from FiberRoot","body":"## Based on #16663\\r\\n\\r\\nGiven a FiberRoot, we should be able to determine the next expiration time that needs to be worked on, taking into account the levels that are pending, suspended, pinged, and so on.\\r\\n\\r\\nThis removes the `expirationTime` argument from `scheduleCallbackForRoot`, and renames it to `ensureRootIsScheduled` to reflect the new signature. The expiration time is instead read from the root using a new function, `getNextExpirationTimeToWorkOn`.\\r\\n\\r\\nThe next step will be to remove the `expirationTime` argument from `renderRoot`, too.","number":16678,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-06T03:19:03Z"},{"id":490028267,"title":"React DevTools downgrade not working for Chrome.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n**What is the current behavior?**\\r\\nThe following command fails\\r\\n```\\r\\nyarn run test:chrome \\r\\n```\\r\\nerror message:\\r\\n```                                                                               \ue0b2 \\r\\nyarn run v1.17.3\\r\\n$ node ./shells/chrome/test\\r\\ninternal/validators.js:112\\r\\n    throw new ERR_INVALID_ARG_TYPE(name, \'string\', value);\\r\\n    ^\\r\\n\\r\\nTypeError [ERR_INVALID_ARG_TYPE]: The \\"file\\" argument must be of type string. Received type object\\r\\n    at validateString (internal/validators.js:112:11)\\r\\n    at normalizeSpawnArguments (child_process.js:398:3)\\r\\n    at spawn (child_process.js:534:16)\\r\\n    at launchChrome (/home/andrei/src/react-devtools/node_modules/chrome-launch/index.js:27:12)\\r\\n    at Object.<anonymous> (/home/andrei/src/react-devtools/shells/chrome/test.js:9:1)\\r\\n    at Module._compile (internal/modules/cjs/loader.js:936:30)\\r\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)\\r\\n    at Module.load (internal/modules/cjs/loader.js:790:32)\\r\\n    at Function.Module._load (internal/modules/cjs/loader.js:703:12)\\r\\n    at Function.Module.runMain (internal/modules/cjs/loader.js:999:10)\\r\\nerror Command failed with exit code 1.\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nLaunch a new browser window. The following command works\\r\\n```\\r\\nyarn run test:firefox \\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nUsing Version 76.0.3809.100 (Official Build) (64-bit), /usr/bin/google-chrome-stable is aliased to chrome.\\r\\n\\r\\nAny help is appreciated, we\'re running a old version of React at work and upgrading it would be nontrivial. Hence I need the old version of the React DevTools.","number":16677,"user":{"login":"ztasre"},"state":"closed","created_at":"2019-09-05T21:54:48Z"},{"id":490017898,"title":"Different components with the same key replicate when toggling the key","body":"**Do you want to request a *feature* or report a *bug*?** bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn the following program:\\r\\n\\r\\n```jsx\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nimport React, {useState} from \\"react\\";\\r\\nimport {render} from \\"react-dom\\";\\r\\n\\r\\nfunction App() {\\r\\n  const [locked, setLocked] = useState(false);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={() => setLocked(x => !x)}>Toggle</button>\\r\\n      <ul>\\r\\n        <Part1 key={locked} />\\r\\n        <Part2 key={locked} />\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Part1() {\\r\\n  return <li>Part 1</li>;\\r\\n}\\r\\n\\r\\nfunction Part2() {\\r\\n  return <li>Part 2</li>;\\r\\n}\\r\\n\\r\\nrender(<App />, document.getElementById(\\"root\\"));\\r\\n```\\r\\n\\r\\nPressing \u201ctoggle\u201d creates new copies of the `<Part1 />` component forever. See this Codesandbox: https://codesandbox.io/embed/suspicious-edison-gwhjk\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nMy expectation here is either that:\\r\\n\\r\\n- React will warn about two different component types with the same key,\\r\\n- or React will unmount the component when the key changes.\\r\\n\\r\\nThe latter is how I thought React worked.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nDiscovered this issue when upgrading from React 15 to 16. The issue does not exist in React 15.","number":16676,"user":{"login":"calebmer"},"state":"closed","created_at":"2019-09-05T21:26:40Z"},{"id":489953634,"title":"React DevTools 4+ is breaking for react 0.14","body":"There was already an issue open for this, however, it has been locked: https://github.com/facebook/react/issues/16500\\r\\n\\r\\nI\'m only opening a new issue to add some additional information as the current outcome isn\'t ideal. I work for a very large sports apparel company out of Baltimore with various applications of varying age.\\r\\n\\r\\nSome of our newer applications are running react@latest, however, we still have many legacy applications on 0.14.7. While we\'re working to replace these, the EOL for many is still at least a year out.\\r\\n\\r\\nAccording to the [last post](https://github.com/facebook/react/issues/16500#issuecomment-525022121) by @gaearon, the solution is to install the 3.x version. This is not ideal since we\'re still also working on react@latest - switching between extension versions is not manageable. \\r\\n\\r\\nIdeally, instead of a better error message, React Dev Tools 4.x just wouldn\'t [throw](https://github.com/facebook/react/blob/b438699d3620bff236282b049204e1221b3689e9/packages/react-devtools-shared/src/backend/legacy/renderer.js#L264) at all for 0.14.x. Currently it breaks the application when Dev Tools is open (I use Chrome); I\'d rather at least have console and Redux dev tools when I have to work on our legacy apps than nothing at all!\\r\\n\\r\\nIt\'s perfectly understandable that support for 0.14.x was nixed, but should the latest version break legacy React applications? Just because I have Chrome Dev Tools open doesn\'t mean I intend to use React Dev Tools, but with the latest extension I can\'t use Chrome Dev Tools at all, so perhaps it makes more sense just to display the error in the React Dev Tools tab?","number":16675,"user":{"login":"woodenconsulting"},"state":"closed","created_at":"2019-09-05T19:23:09Z"},{"id":489941941,"title":"`componentDidPropsUpdate` and `componentDidStateUpdate` ???","body":"Why not have two different additional lifecycle hooks, which they should work exactly like `componentDidUpdate` but each one for each type of update method\\r\\none for state update `componentDidStateUpdate(prevState)`\\r\\none for props update `componentDidPropsUpdate(prevProps)`","number":16674,"user":{"login":"mohamedatef98-lincx"},"state":"closed","created_at":"2019-09-05T19:00:44Z"},{"id":489936532,"title":"Check for Suspense boundary in a root Container","body":"If we find a Container that might mean that we\'re on a node that is inside\\r\\na Suspense boundary that is directly inside the Container root.\\r\\n\\r\\nImagine the div is a Container and the span is a dehydrated instance:\\r\\n\\r\\n```\\r\\n<div>\\r\\n  \x3c!--$--\x3e\\r\\n  <span />\\r\\n  \x3c!--/$--\x3e\\r\\n</div>\\r\\n```\\r\\n\\r\\nThere\'s no way to tests this yet since I\'m not actually utilizing\\r\\nthe return value yet.\\r\\n\\r\\nThe solution is to just use the same path to check for a Suspense boundary\\r\\nas if we find a parent instance.","number":16673,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-09-05T18:48:00Z"},{"id":489931552,"title":"Remove experimental scheduler flags","body":"Removes `requestIdleCallbackBeforeFirstFrame` and `requestTimerEventBeforeFirstFrame`.\\r\\n\\r\\nBoth were rAF-specific experiments but we went with MessageLoop instead. We left rAF temporarily in the code but since we never actually used these code paths, I think we should delete them to make the code easier to understand.","number":16672,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-09-05T18:36:18Z"},{"id":489918212,"title":"[react-events] Fix isTargetWithinNode type","body":"isTargetWithinNode passes the childTarget to getClosestInstanceFromNode which\\r\\ndoes not account for a null value of \'node\'.","number":16671,"user":{"login":"necolas"},"state":"closed","created_at":"2019-09-05T18:06:01Z"},{"id":489898744,"title":"Rerender issue","body":" Here is my small problem for you to solve.\\r\\nHere is the code snippet:- https://github.com/surendragalwa111/jsmpeg-player-canvas/blob/master/src/App.js\\r\\nWould you tell me that why my canvas doesn\'t render when I check my checkbox 2nd time??\\r\\n(I know destroy() removing it) BUT render should bring it back since I\'m updating state and render method is getting called again.\\r\\nThanks.\\r\\n\\r\\n**React version: 16**\\r\\n","number":16670,"user":{"login":"surendragalwa11"},"state":"closed","created_at":"2019-09-05T17:22:42Z"},{"id":489895905,"title":"SyntaxError with React and ReactDOMServer imported into express project","body":"I installed and imported **react** and **react-dom** into the **express** project. I want to learn how to use React server-side rendering, based on a simple boilerplate.\\r\\nI have a minimal Express project, where I imported React.\\r\\nNpm throws: \\r\\n> \\"SyntaxError: Unexpected identifier\\".\\r\\n\\r\\nI looked at the docs and a lot of examples on the basis of which I build my own, but for some reason it does not start, even in the simplest configuration. Can someone tell me how to run it properly?\\r\\nThanks!\\r\\n\\r\\nHere is index.js listing (express server starter):\\r\\n```\\r\\nconst express = require(\'express\');\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOMServer from \'react-dom/server\';\\r\\nimport App from \'./components/App\';\\r\\n\\r\\nconst app = express();\\r\\n\\r\\napp.get(\\"/\\", (req, res) => {\\r\\n  res.send(`\\r\\n      <!DOCTYPE html>\\r\\n      <head>\\r\\n        <title>Server-side React</title>\\r\\n      </head>\\r\\n      <body>\\r\\n        <div id=\\"root\\">${ReactDOMServer.renderToString(<App />)}</div>\\r\\n      </body>\\r\\n    </html>\\r\\n  `);\\r\\n});\\r\\n\\r\\napp.listen(3000);\\r\\n```\\r\\nApp.js of React:\\r\\n```\\r\\nimport React from \'react\';\\r\\n\\r\\nconst App = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <h3>Hello!!!</h3>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default App;\\r\\n```\\r\\nindex.js of React:\\r\\n```\\r\\nimport React from \'react\';\\r\\nimport ReactDOM from \'react-dom\';\\r\\nimport App from \'./App\';\\r\\n\\r\\nReactDOM.hydrate(<App />, document.getElementById(\'root\'));\\r\\n```\\r\\nInstalled dependencies:\\r\\nreact,react-dom,express,body-parser.","number":16669,"user":{"login":"narzantaria"},"state":"closed","created_at":"2019-09-05T17:15:53Z"},{"id":489850230,"title":"Can you provide the ability to compile components into webcomponents? Is cross-framework a future trend? I hope that the component ecosystem can be shared in other front-end frameworks.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n\\r\\nfeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nCan you provide the ability to compile components into webcomponents? Is cross-framework a future trend?\\r\\nI hope that the component ecosystem can be shared in other front-end frameworks.\\r\\n\\r\\n\\r\\n\u80fd\u5426\u63d0\u4f9b\u628a\u7ec4\u4ef6\u7f16\u8bd1\u6210webcomponents\u7684\u529f\u80fd\uff1f\u8de8\u6846\u67b6\u7ec4\u4ef6\u662f\u672a\u6765\u7684\u8d8b\u52bf\u5417\uff1f\\r\\n\u5e0c\u671b\u53ef\u4ee5\u5728\u5176\u4ed6\u524d\u7aef\u6846\u67b6\u4e2d\u5171\u4eab\u7ec4\u4ef6\u751f\u6001\u3002\\r\\n\\r\\n\\r\\n\\r\\n### What does the proposed API look like?\\r\\n```js\\r\\n\\r\\nimport {transformToWebcomponents} from \\"react\\"\\r\\n\\r\\nimport mycomponent from \\"./mycomponent.jsx\\"\\r\\n\\r\\nconst MyElement=transformToWebcomponents(mycomponent)\\r\\n\\r\\nwindow.customElemnt.define(\'my-element\', MyElement)\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16668,"user":{"login":"masx200"},"state":"closed","created_at":"2019-09-05T15:49:40Z"},{"id":489664853,"title":"Avoid unnecessary rAFTimeout timer called","body":"There is a case: we spend more than `frameLength * 3` to execute `performWorkUntilDeadline` when `port.onmessage` be called, so, the `onTimeout` timer will be fired because the cancel(`clearTimeout`) in the rAF will be fired **after** the onTimeout(that\'s how event loop works) though this won\'t cause any problem since we do a check in `performWorkUntilDeadline`\\r\\n\\r\\nSo, I want to put the `clearTimeout` in `performWorkUntilDeadline` to avoid this","number":16667,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-09-05T10:24:37Z"},{"id":489622621,"title":"DevTools don\'t show components rendered by custom renderers","body":"**Steps to reproduce**\\r\\n\\r\\n1. Go to https://bispt.csb.app/ (source code is in https://codesandbox.io/s/react-pixi-example-bispt )\\r\\n2. Open React Dev Tools and look at the Components tree.\\r\\n\\r\\n**Expected behaviour**\\r\\n\\r\\nThe Components tree structure should be like this:\\r\\n\\r\\n```\\r\\n- App\\r\\n  - MyStage\\r\\n    - Stage\\r\\n       - CustomComponent\\r\\n          - Sprite\\r\\n```\\r\\n\\r\\n**Current behaviour**\\r\\n\\r\\n\\r\\nThe Components tree structure is skipping the components that use custom renderers (**CustomComponent** and **Sprite**), showing only the following:\\r\\n\\r\\n```\\r\\n- App\\r\\n  - MyStage\\r\\n    - Stage\\r\\n```\\r\\n\\r\\nTested on Chrome (Mac).","number":16666,"user":{"login":"RodrigoHamuy"},"state":"closed","created_at":"2019-09-05T09:02:33Z"},{"id":489585234,"title":"ref.current returns null when ref returns current.div. ...","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen accessing `ref.current` using the `useRef` hook, it returns null even when it\'s clearly linked to the `div` element.\\r\\n\\r\\n```tsx\\r\\nconst MyComponent:FC = props => {\\r\\n  const ref = useRef<HTMLDivElement>(null);\\r\\n  console.log({{ ref, current: ref.current })\\r\\n  //  { ref: { current: div }, current: null }\\r\\n  // `null` is not what it is supposed to be!\\r\\n  return <div ref={ref} />\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/embed/refcurrent-is-null-1nvlw\\r\\n\\r\\n**What is the expected behavior?**\\r\\n```tsx\\r\\nconst MyComponent:FC = props => {\\r\\n  const ref = useRef<HTMLDivElement>(null);\\r\\n  console.log({{ ref, current: ref.current })\\r\\n  //  { ref: { current: div }, current: div }\\r\\n  //  `div` is what we want to see!\\r\\n  return <div ref={ref} />\\r\\n}\\r\\n```\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI ran `yarn create react-app --info` in my app.\\r\\n\\r\\n```\\r\\nEnvironment Info:\\r\\n\\r\\n  System:\\r\\n    OS: Linux 5.2 Ubuntu 19.10 (Eoan Ermine)\\r\\n    CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\\r\\n  Binaries:\\r\\n    Node: 10.15.2 - /tmp/yarn--1567669486663-0.4246551671762293/node\\r\\n    Yarn: 1.17.3 - /tmp/yarn--1567669486663-0.4246551671762293/yarn\\r\\n    npm: Not Found\\r\\n  Browsers:\\r\\n    Chrome: 76.0.3809.132\\r\\n    Firefox: Not Found\\r\\n  npmPackages:\\r\\n    react: ^16.9.0 => 16.9.0 \\r\\n    react-dom: ^16.9.0 => 16.9.0 \\r\\n    react-scripts: 3.1.1 => 3.1.1 \\r\\n  npmGlobalPackages:\\r\\n    create-react-app: Not Found\\r\\n```\\r\\n","number":16665,"user":{"login":"waynevanson"},"state":"closed","created_at":"2019-09-05T07:46:37Z"},{"id":489578427,"title":"When a module which uses react hooks is dynamically imported into an application the application crashes","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nMy application consists of two parts. The main web application and a module which gets dynamically loaded into the web application.\\r\\nBoth web application and the module uses React 16.9.0.\\r\\nThe module is loaded into the web application using React.lazy() and dynamic import() statement.\\r\\nWhen the module is loaded the application crashes with the following message in the console.\\r\\n\\r\\n![Lazy loading demo](https://user-images.githubusercontent.com/5545438/64320589-39381700-d002-11e9-9026-33da5388496c.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nTo reproduce the issue, we require an application and 2 modules each having their own build.\\r\\nTherefore a demo couldn\'t be created in codesandbox. I\'ve attached a demo which can be used to reproduce the issue.\\r\\n[lazy-loading.zip](https://github.com/facebook/react/files/3577981/lazy-loading.zip)\\r\\n\\r\\n1. Download the attached demo app.\\r\\n2. Navigate to \\"\\\\app\\\\modules\\\\module1\\" and \\"\\\\app\\\\modules\\\\module1\\" folders and run \\"npm install\\" and \\"npm build\\" to build the modules.\\r\\n3. Navigate to \\"\\\\app\\" folder and run \\"npm install\\" and \\"npm start\\" to run the main app.\\r\\n4. Open the dev tools and Browse to http://localhost:3000.\\r\\n5. Application will try to load the module which uses react hooks and crashes. The error message in the above screenshot will be displayed in the console.\\r\\n6. In app.jsx comment the line < LazyModule1 /> and un-comment the line < LazyModule2 />. Now the application will try to load the module which does not use react hooks.\\r\\n7. The app will now load successfully.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nWhen both the app and the dynamically imported module is using the latest version of react the app should load without crashing.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact - v16.9.0\\r\\nBrowser - Chrome\\r\\nOS - Windows 10\\r\\n","number":16664,"user":{"login":"rajithaw"},"state":"closed","created_at":"2019-09-05T07:30:56Z"},{"id":489495398,"title":"Track \\"pending\\" and \\"suspended\\" ranges","body":"A FiberRoot can have pending work at many distinct priorities. (Note: we refer to these levels as \\"expiration times\\" to distinguish the concept from Scheduler\'s notion of priority levels, which represent broad categories of work. React expiration times are more granular. They\'re more like a concurrent thread ID, which also happens to correspond to a moment on a timeline. It\'s an overloaded concept and I\'m handwaving over some of the details.)\\r\\n\\r\\nGiven a root, there\'s no convenient way to read all the pending levels in the entire tree, i.e. there\'s no single queue-like structure that tracks all the levels, because that granularity of information is not needed by our algorithms. Instead we track the subset of information that we actually need \u2014 most importantly, the highest priority level that exists in the entire tree.\\r\\n\\r\\nAside from that, the other information we track includes the range of pending levels that are known to be suspended, and therefore should not be worked on.\\r\\n\\r\\nThis is a refactor of how that information is tracked, and what each field represents:\\r\\n\\r\\n- A *pending* level is work that is unfinished, or not yet committed. This includes work that is suspended from committing. `firstPendingTime` and `lastPendingTime` represent the range of pending work. (Previously, \\"pending\\" was the same as \\"not suspended.\\")\\r\\n- A *suspended* level is work that did not complete because data was missing. `firstSuspendedTime` and `lastSuspendedTime` represent the range of suspended work. It is a subset of the pending range. (These fields are new to this commit.)\\r\\n- `nextAfterSuspendedTime` represents the next known level that comes after the suspended range.\\r\\n\\r\\nThis commit doesn\'t change much in terms of observable behavior. The one change is that, when a level is suspended, React will continue working on the next known level instead of jumping straight to the last pending level. Subsequent commits will use this new structure for a more substantial refactor for how tasks are scheduled per root.","number":16663,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-05T02:36:43Z"},{"id":489446395,"title":"[react-events] Refine executeUserEventHandler","body":"This is a follow up to #16657 where I wasn\'t quite happy about losing the usage of `invokeGuardedCallbackAndCatchFirstError`. This reinstates `invokeGuardedCallbackAndCatchFirstError` and works around the problem-space by using an inline function to work out the user callback return value.","number":16662,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-04T23:09:53Z"},{"id":489393943,"title":"There is no \'rendered by\' section in my extension","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16661,"user":{"login":"Connei"},"state":"closed","created_at":"2019-09-04T20:55:04Z"},{"id":489336797,"title":"[react-events] Refactor getCurrentTarget to getResponderNode","body":"After discussion with @necolas, the behaviour of `getCurrentTarget` should be the same as the previous `event.responderTarget` \u2013 `context.getResponderNode`. This PR changes it so that this is the case.\\r\\n\\r\\nIn the case of scopes, they will always receive `null` for `getResponderNode`.","number":16660,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-04T18:56:40Z"},{"id":489323470,"title":"[Scheduler] Add \\"combined\\" www build","body":"The Scheduler module in www is loaded before most of our other infra: too early to conditionally load a separate build in production versus development. Which means we\'re currently sending both a prod and dev bundle to every single user.\\r\\n\\r\\nWe should fix this on the Facebook infra side, but in the meantime, this updates the build script to generate a new type of bundle, `FB_WWW_COMBINED`, which preserves __DEV__ conditions.","number":16659,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-09-04T18:29:20Z"},{"id":489299338,"title":"[react-events] Fix Scope listener issue","body":"This fixes an issue where event listeners on scopes would fail during the complete phase when a parent fiber was a host component. Added a test case for a regression test.","number":16658,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-04T17:43:46Z"},{"id":489249737,"title":"[react-events] Keyboard responder propagation handling","body":"This adds support for conditional Keyboard responder propagation, for where there are nested keyboard responders. To allow a `onKeyDown` or `onKeyUp` event to propagate the callback is required to return `true` to propagate a single responder level. This is done by providing a new method on context called `continuePropagation` \u2013 which tells the responder propagation system to propagate a single level after processing the current responder (of the same responder type).\\r\\n\\r\\nI also had to remove the usage of `invokeGuardedCallbackAndCatchFirstError` when calling the user-land event callback. This was because the existing `invokeGuardedCallbackAndCatchFirstError` doesn\'t support returning a value from the callback \u2013 which is what we need here. Attempting to change the mechanics of the function seemed far too invasive, so we can test this approach out internally to see if we run into any issues (we shouldn\'t though).","number":16657,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-04T15:53:44Z"},{"id":489225624,"title":"Abstract away code duplicates","body":"Apparently there are a couple of mostly similar functions that could be refactored to remove duplicate pieces of code. The commit does that.","number":16656,"user":{"login":"ch3rn0v"},"state":"closed","created_at":"2019-09-04T15:16:10Z"},{"id":489178419,"title":"[Feature Request] Metadata for which props were inherited from default props.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature Request\\r\\n\\r\\n**What is the current behavior?**\\r\\nIt\'s impossible/super inefficient to figure out which props on a child component were explicitly defined (such that `prop in props` is true) vs which were inherited by default props.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt would be helpful to have some metadata on a child that specifies if a prop was merged in from default props. A simple true / false would suffice. This would be useful to have for a very specific issue I\'m facing with using `recharts`. It has a super nice declarative JSX approach but based on the way it\'s designed, it has some limitations. Some child components (XAxis for instance) are tightly coupled with their parent component (BarChart, etc). Long story short, creating proper HOCs on them is basically impossible due to defaultProps interference. I\'m creating a wrapper for the top level component (BarChart) that provides additional default props to its child components (theme context, etc). I have the following code:\\r\\n```typescript\\r\\nconst BarChart: React.FC<BarChartProps> = fixWrapperFC(BarChartBase, (props) => {\\r\\n\\tconst { children, ...rest } = props;\\r\\n\\r\\n\\tconst theme = React.useContext(ThemeContext);\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<BarChartBase {...rest}>\\r\\n\\t\\t\\t{React.Children.map(children, (c: any) => {\\r\\n\\t\\t\\t\\tif (!c || !c.type || !c.type.displayName) {\\r\\n\\t\\t\\t\\t\\treturn c;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tconst displayName = c.type.displayName;\\r\\n\\t\\t\\t\\tif (displayName === \\"XAxis\\") {\\r\\n\\t\\t\\t\\t\\treturn React.cloneElement(c, { ...xAxisProps({ theme, ...c.props }), });\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\treturn c;\\r\\n\\t\\t\\t})}\\r\\n\\t\\t</BarChartBase>\\r\\n\\t);\\r\\n});\\r\\n```\\r\\nThe problem is that `c.props` already has default props, and the only way to accomplish what I\'m doing is to subtract off default props with some type of equality algorithm, but my first thought is that it\'s ugly (the code I pasted above is ugly too, but the exterior would be nice and clean).\\r\\n\\r\\nI suppose the real problem is the limitations on how this library is designed and that it probably indulges anti-patterns to achieve it\'s declarative style. The real solution would likely be to rewrite it to support HOCs, however, I\'d imagine at some point in the react code, `Object.keys(passedInProps)` and/or `Object.keys(defaultProps)` is somewhat cheaply available and could be tacked onto the child object?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.9","number":16655,"user":{"login":"kalbert312"},"state":"closed","created_at":"2019-09-04T13:58:45Z"},{"id":489148586,"title":"[react-events] Various core tweaks for event responder system","body":"This PR introduces a few fixes and core changes that are required for having event listeners/responders on scope components:\\r\\n\\r\\n- Removes `responderTarget` from the responder event object. Instead `context.getCurrentTarget()` has been introduced that achieves the same purpose, without needing to mutate the event object. Furthermore, this works with scopes, which do not have a direct DOM node (instead the nearest current DOM from the target is picked up).\\r\\n\\r\\n- Fixes a bug @necolas found and fixed in another PR, which also came up in this with the responder target changes above, so they were needed here too.\\r\\n\\r\\n- Scope components via `React.unstable_createScope` now accept event responders via the `listeners` prop, like host components can. This makes it easier to compose scopes that need to tight control over handling things like keyboard/focus interactions.","number":16654,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-04T13:05:25Z"},{"id":488994301,"title":"Stateless Component: React.forwardRef make defaultProps invalid","body":"When I add React.forwardRef to a stateless component that is already have defaultProps,  It make all defaultProps to undefined? \\r\\nReact.forwardRef can\'t use with defaultProps ?\\r\\n\\r\\nreact-version: 16.8.6","number":16653,"user":{"login":"gitHber"},"state":"closed","created_at":"2019-09-04T07:39:49Z"},{"id":488988576,"title":"usestate","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16652,"user":{"login":"WisdomTrick"},"state":"closed","created_at":"2019-09-04T07:25:29Z"},{"id":488913116,"title":"DevTools: Allow editing props that weren\'t passed initially","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCurrently we can only edit the props that were passed to the component:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/619186/64222327-15f85500-cea6-11e9-9420-59ae25017fe4.png)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nBut the component has other props (e.g. `loading`, `type`, etc) that weren\'t passed to this specific instance. And we should be able to play with them in the devtools similar to how Chrome allow us to add new css:\\r\\n\\r\\n![Kapture 2019-09-03 at 23 55 57](https://user-images.githubusercontent.com/619186/64222438-72f40b00-cea6-11e9-92f8-2b5b72ab1b43.gif)\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nLatest\\r\\n\\r\\n@bvaughn ","number":16651,"user":{"login":"brunolemos"},"state":"closed","created_at":"2019-09-04T02:57:21Z"},{"id":488847253,"title":"Testing PR","body":"**PLEASE IGNORE THIS**\\r\\n","number":16650,"user":{"login":"jsonau"},"state":"closed","created_at":"2019-09-03T22:07:37Z"},{"id":488836954,"title":"[Dev Tools] Chrome component console errors get output from \\"backend.js\\"","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen I get a component stack trace, the log trace comes from the dev tools extension:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/12100/64210499-4d401500-ce58-11e9-87f5-b0c9115fe62f.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI use that trace usually to click and set a debugger so I can debug some React internals.\\r\\n","number":16649,"user":{"login":"natew"},"state":"closed","created_at":"2019-09-03T21:37:55Z"},{"id":488811430,"title":"Use symbols for SchedulerPriorities","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nEnhancement/Refactoring\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nConstants being used to define priorities\\r\\nhttps://github.com/facebook/react/blob/master/packages/scheduler/src/SchedulerPriorities.js\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSymbols to be used for defining priorities\\r\\n","number":16648,"user":{"login":"tstreamDOTh"},"state":"closed","created_at":"2019-09-03T20:38:55Z"},{"id":488802140,"title":"Use www Flag version for warnAboutStringRefs and warnAboutDefaultPropsOnFunctionComponents","body":"Previously, warnAboutStringRefs and warnAboutDefaultPropsOnFunctionComponents were always false. Change these so that their value is dictated by ReactFeatureFlags.js in www instead.","number":16647,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-09-03T20:17:15Z"},{"id":488778233,"title":"useEffect does not execute after first render in react 16.9.0","body":"**useEffect does not execute after the first render in react 16.9.0**\\r\\n\\r\\n**Demo**\\r\\nPlease check this [small test on jsfiddle](https://jsfiddle.net/9wkLb7gv/1/). \\r\\nHere is the source code for the test for reference:\\r\\n```js\\r\\n    function Test () {\\r\\n        const [text, setText] = React.useState(\'Hello\');\\r\\n         React.useEffect(() => {\\r\\n            setText(\'World\');\\r\\n        });\\r\\n        return <h1>{text}</h1>;\\r\\n    }\\r\\n    ReactDOM.render(<Test />, document.getElementById(\'container\'));\\r\\n```\\r\\n\\r\\n**Current behavior**\\r\\nThe text does not change from \'Hello\' to \'World\' after the first render.\\r\\n\\r\\n**Expected behavior** \\r\\nThe text should change from \'Hello\' to \'World\' right after the first render. This is the behavior with react 16.8.6. \\r\\n\\r\\n**Environment**\\r\\nThis test was run in Chrome v69 on Linux.","number":16646,"user":{"login":"GnsP"},"state":"closed","created_at":"2019-09-03T19:20:06Z"},{"id":488776424,"title":"React devtools always launches in Chrome","body":"Hi.\\r\\n\\r\\nI have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.\\r\\n\\r\\nHow do I change the default browser for devtools to Firefox?","number":16645,"user":{"login":"nextriot"},"state":"closed","created_at":"2019-09-03T19:15:32Z"},{"id":488751396,"title":"Add Warning on React.createElement for Key Spread/React.jsx","body":"As part of the process of simplifying `React.createElement` as per [this RFC](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md) and to make sure the warning against spreading key (which is currently only in `React.jsx`) is received, we want to start issuing a warning, once the Babel plugin is updated, to ask users to:\\r\\n   1.) stop spreading key (the only time that they would be redirected to `React.createElement` in the new Babel plugin)\\r\\n   2.) upgrade babel (if they\'ve only upgraded React and not Babel)\\r\\n   3.) stop calling `React.createElement` directly and calling `React.jsx` instead.","number":16644,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-09-03T18:17:00Z"},{"id":488663941,"title":"React memo always get the same results on prevparams and next params","body":"Hello i\'m trying to implement React memo on my project to especify when i want to update my component. But i realize that i\'m always receiving the same values on prevProps, and currentProps so i cant make any validation.\\r\\n\\r\\nNow im making it in this way:\\r\\n\\r\\n\\r\\n```\\r\\nconst Task =(props)=>{\\r\\n//some code here...\\r\\n}\\r\\nfunction areEqual(prevProps, currentProps) {\\r\\n    console.log(\\"1 \\",prevProps.task.stateCheckbox);\\r\\n    console.log(\\"2 \\",currentProps.task.stateCheckbox);\\r\\n    return false;\\r\\n}\\r\\nexport default React.memo(Task, areEqual);\\r\\n```\\r\\n\\r\\n\\r\\nThe field I\'m editing it\'s in the parent component and it made it in this way :\\r\\n\\r\\n```\\r\\n  handleStateTask=(position)=>{\\r\\n\\r\\n    this.setState((prevState)=>{\\r\\n       console.log(prevState.taskList[0]);\\r\\n      const arrTemp=[...prevState.taskList];\\r\\n      arrTemp[position].stateCheckbox=!arrTemp[position].stateCheckbox;\\r\\n      return{\\r\\n        taskList:arrTemp\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n```\\r\\n\\r\\nit works well and update the field on it\'s specify position. My problem its that on React memo it cant detect the previous state.\\r\\n\\r\\nCan anybody give me some ideas about what am i making wrong..\\r\\n\\r\\nthanks..\\r\\n","number":16643,"user":{"login":"andrestamayoglobant"},"state":"closed","created_at":"2019-09-03T15:09:24Z"},{"id":488610804,"title":"[react-events] Adds preventKeys support to Keyboard responder","body":"This PR adds the functionality to natively `preventDefault` on the Keyboard responder. This is done via a `preventKeys` prop, which takes an array of key strings that should be preventing during the `keydown` event; along with a `defaultPrevented` flag on the callback\'s event object.","number":16642,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-09-03T13:36:26Z"},{"id":488581871,"title":"How can i hide eslint warning \'useMemo has missing dependencies\'?","body":"hello\\r\\nsimply, i\'d like to hide  eslint warning message from \'useMemo\'\\r\\ni can use   // eslint-disable-line   // eslint-disable-next-line in useEffect.\\r\\nbut i have no idea how i can hide it in ***useMemo***\\r\\nplease help me!!\\r\\n\\r\\nthis is my code example\\r\\n\\r\\n```javascipt\\r\\n<div>\\r\\n      {useMemo(\\r\\n        () => (\\r\\n          <ChatTextarea\\r\\n            placeholder=\\"text..\\"\\r\\n            text={text}\\r\\n          />\\r\\n        ),\\r\\n        [text]\\r\\n      )}\\r\\n</div>\\r\\n```","number":16641,"user":{"login":"huurray"},"state":"closed","created_at":"2019-09-03T12:41:52Z"},{"id":488558105,"title":"dose react16.9 not support for ie?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16640,"user":{"login":"livaha"},"state":"closed","created_at":"2019-09-03T11:50:05Z"},{"id":488526525,"title":"can\'t save settings in react devtools forever","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nwhen I clicked \\"Okay\\"  - I can work, but after reload page - it\'s still showing. \\r\\nAlso when I tried to change settings (theme, etc.) in plugin - it\'s also reset to default after reload\\r\\nthat behavior for all urls \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n![image](https://media.giphy.com/media/KB0s8VbkKDX77DsMx9/giphy.gif)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nsave settings in dev tools\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nchrome OS, chrome 76.0.3809.102","number":16639,"user":{"login":"haritonasty"},"state":"closed","created_at":"2019-09-03T10:37:13Z"},{"id":488292504,"title":"Inline setTimeout within the render causes a random number to appear on screen.","body":"Reporting a bug:\\r\\n\\r\\nThe current behaviour is that setTimeout, inside a render method, is producing a random number, for no explained reason. The number persist after the setTimeout has gone off, and the setTimeout still produces the desired effect, for example, if it was to log something the console, it would still do that.\\r\\n```jsx\\r\\n// sample code\\r\\n\\r\\n(not the original code in which the problem occurred, but I was able to reproduce the problem in codesandbox.io):\\r\\n\\r\\n** start of code example **\\r\\n(styles.css = \\r\\n    .App {\\r\\n        font-family: sans-serif;\\r\\n        text-align: center;\\r\\n    }\\r\\n)\\r\\n\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <h1>Hello CodeSandbox</h1>\\r\\n      <h2>Start editing to see some magic happen!</h2>\\r\\n      {setTimeout(() => console.log(\\"hello world\\"), 3000)}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n```\\r\\n\\r\\n/* (output of webpage) */\\r\\n\\r\\nHello CodeSandbox\\r\\nStart editing to see some magic happen!\\r\\n5\\r\\n\\r\\n** end of code **\\r\\n\\r\\nThe expected behaviour was that the setTimeout function would produce no trace of any text, whilst still working.\\r\\n\\r\\nIt is present in react version 16.9.0","number":16638,"user":{"login":"AlastairM-E"},"state":"closed","created_at":"2019-09-02T18:49:15Z"},{"id":488245139,"title":"Relying on console.log native string substitution interferes with typical patched console logging","body":"Seems to me that this will be a hairy one to fix.\\r\\n\\r\\nThe warning/error messages emitted from React often rely on string substitution of the native console.log function to give necessary location of the problem.  But when the console.log functions are patched in applications to redirect messages to the server for logging, say, in json format to a file, the templates\' string substitution parameters are lost.  ex. `Warning: Each child in a list should have a unique \\"key\\" prop.%s%s` which isn\'t very helpful to see in the log in a large project with many developers.\\r\\n\\r\\nI believe this could be easily addresses in the logger patch if there were a reliable way to assign the output of native string substitution to a new javascript string (so that the full string message could be wrapped in json metadata AFTER the substitution), but this native string substitution doesn\'t seem to be available to javascript and there\'s no way to get resulting string.  We could add a javascript implementation of string substitution such as https://github.com/anseki/console-substitute, but there\'s [not much of a spec](https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions).\\r\\n\\r\\nCould these messages be templatized in React in a different way?","number":16637,"user":{"login":"JasonKleban"},"state":"closed","created_at":"2019-09-02T15:37:35Z"},{"id":488201706,"title":"Error: \\"Could not find node with id \\"3742\\" in commit tree\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)\\r\\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98281)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\\r\\n\\r\\nComponent stack: in xi\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16636,"user":{"login":"albertobisello"},"state":"closed","created_at":"2019-09-02T13:52:59Z"},{"id":488196792,"title":"react-devtools","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16635,"user":{"login":"hgz1997"},"state":"closed","created_at":"2019-09-02T13:41:56Z"},{"id":488185159,"title":"Limitations of context API compared to legacy implementation","body":"This isn\'t technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead.\\r\\n\\r\\nI have a fairly \\"edgy\\" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively).\\r\\n\\r\\nExample:\\r\\n```jsx\\r\\n<Accordion> \x3c!-- provided by host app --\x3e\\r\\n    \x3c!-- provided by separate plugin --\x3e\\r\\n    <AccordionItem label=\\"item 1\\">Content</AccordionItem>\\r\\n    //...\\r\\n</Accordion>\\r\\n```\\r\\n\\r\\nThus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user.\\r\\n\\r\\nThis worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do.\\r\\n\\r\\nAs stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I\'d like to avoid being stuck on React 16, when that happens.\\r\\n","number":16634,"user":{"login":"use-strict"},"state":"closed","created_at":"2019-09-02T13:14:47Z"},{"id":488034367,"title":"Add failing test to demonstrate interleaving issue with Suspense","body":"cc/ @acdlite, as suggested on this twitter thread https://twitter.com/acdlite/status/1167531547508953088\\r\\n\\r\\nThere\'s a race condition that can happen on both Concurrent and Batched Modes Suspense where it\'s possible for all pending thenables to settle between the `commitRoot` continuation being yielded and it actually getting invoked, as `shouldYieldToHost` might return `true` if it ran out of frame time budget during the last `performUnitOfWork` iteration. This causes all of the `retryTimedOutBoundary` -> `scheduleCallbackForRoot` invocations to find a pre-existing `Immediate` callback already queued, and so no notifications are scheduled at all.\\r\\n\\r\\nThis is not really something that can be simulated on the mock scheduler (or I didn\'t find out how to), so it was brute-forced by inserting an intermediate continuation between `workLoop` and `commitRoot`.","number":16632,"user":{"login":"Jessidhia"},"state":"closed","created_at":"2019-09-02T07:10:56Z"},{"id":487868197,"title":"Complete one expiration test case","body":"Just make it more complete though there is no bug right now","number":16631,"user":{"login":"NE-SmallTown"},"state":"closed","created_at":"2019-09-01T10:24:34Z"},{"id":487775992,"title":"Can\'t use instance values without refs","body":"I am experimenting with migrating some of my class components to Hooks. My use case is explained in detail [here](https://stackoverflow.com/questions/57722818/idiomatic-react-with-heavy-dom-manipulation-mathjax), but I can quickly explain the idea.\\r\\n\\r\\nI have a class component `<MJX>` which exposes a `.ready` Promise. Since `<MJX>` produces a `<span>` element, I guess I can use the `useImperativeHandle` hook to attach `.ready` to the ref I use for the `<span>`. This is no problem.\\r\\n\\r\\nHowever, I also have a class component `<RenderGroup>` which uses `React.Children` to collect the `.ready` Promises from all its `<MJX>` descendants, and exposes `Promise.all` of that array of Promises as its own `.ready` value. Since `<RenderGroup>` does not produce any markup of its own, and you can\'t place refs on `<React.Fragment>`, I don\'t see how to use`useImperativeHandle` here: there\'s nowhere to attach the ref.\\r\\n\\r\\nHere is the relevant code:\\r\\n\\r\\n```tsx\\r\\nexport class RenderGroup extends React.Component {\\r\\n  private promises: Promise<void>[];\\r\\n\\r\\n  ready: Promise<void>;\\r\\n\\r\\n  componentDidMount() {\\r\\n    this.ready = Promise.all(this.promises).then(() => {});\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    this.promises = [];\\r\\n\\r\\n    return recursiveMap(this.props.children, node => {\\r\\n      if (shouldInspect(node)) {\\r\\n        const originalRef = node.ref;\\r\\n        return React.cloneElement(node, {\\r\\n          ref: (ref: MJX) => {\\r\\n            if (!ref) return;\\r\\n            this.promises.push(ref.ready);\\r\\n            if (typeof originalRef === \\"function\\") {\\r\\n              originalRef(ref);\\r\\n            } else if (originalRef && typeof originalRef === \\"object\\") {\\r\\n              (originalRef as React.MutableRefObject<MJX>).current = ref;\\r\\n            }\\r\\n          }\\r\\n        });\\r\\n      }\\r\\n\\r\\n      return node;\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction shouldInspect(node: ReactNode): node is React.ReactElement & React.RefAttributes<MJX> {\\r\\n  return React.isValidElement(node) && typeof node.type === \\"function\\" && node.type.prototype instanceof MJX;\\r\\n}\\r\\n\\r\\nexport function recursiveMap(\\r\\n  children: ReactNode,\\r\\n  fn: (child: ReactNode) => ReactNode\\r\\n) {\\r\\n  return React.Children.map(children, (child) => {\\r\\n    if (!React.isValidElement(child)) {\\r\\n      return child;\\r\\n    }\\r\\n\\r\\n    if (\\"children\\" in child.props) {\\r\\n      child = React.cloneElement(child, {\\r\\n        children: recursiveMap(child.props.children, fn)\\r\\n      });\\r\\n    }\\r\\n\\r\\n    return fn(child);\\r\\n  });\\r\\n}\\r\\n```","number":16630,"user":{"login":"ysulyma"},"state":"closed","created_at":"2019-08-31T14:31:51Z"},{"id":487722647,"title":"Chrome Extension Background Page and useEffect Not Triggered","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen using `useEffect` from a background page in a chrome extension the body of the effect isnt triggered.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\nSee the demo project here: https://github.com/mikecann/bgpage-hooks-issue\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`useEffect` should be triggered\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nIt stopped working somewhere between react 16.8 and 16.9 , you can change the react and react_dom version in the demo project and see that it works as expected in 16.8\\r\\n\\r\\n**Workaround**\\r\\n\\r\\nFor now the issue can be worked around as demonstrated: https://github.com/mikecann/bgpage-hooks-issue/blob/master/bg.tsx#L5\\r\\n\\r\\nSo im not really sure whats going on but perhaps because background pages arent actually visually rendered to the screen then React has optimized things so that effects arent triggered?","number":16629,"user":{"login":"mikecann"},"state":"open","created_at":"2019-08-31T02:56:16Z"},{"id":487712420,"title":"[react-events] Tap responder","body":"This is a partial replacement for the \'Press\' responder:\\r\\n\\r\\n1. `useTap` is scoped to pointers (no keyboard support). Our current thinking is\\r\\nthat \\"responders\\" should be limited to working with pointers, and that they can\\r\\nbe combined with \'useKeyboard\' in user-space. For example, we might create a\\r\\n\'usePress\' hook in user-space that combines \'useTap\' with \'useKeyboard\' to react\\r\\nto both pointers and keyboard interactions.\\r\\n\\r\\n2. `useTap` cancels the gesture once the pointer moves over an element that is\\r\\nnot within the responder target\'s subtree. This differs from `usePress` (and\\r\\nReact Native), where the gesture remains active after the pointer exits the\\r\\ntarget\'s subtree and is restarted once the pointer reenters. One of the\\r\\ndrawbacks with the `usePress` behavior is that it requires repeatedly measuring\\r\\nDOM elements (which can cause jank) to perform hit region tests. `useTap` avoids\\r\\ndoing this and relies on `document.elementFromPoint` only to support the\\r\\nTouchEvent fallbacks.\\r\\n\\r\\n3. `useTap` calls `onTapUpdate` when the active gesture\'s state changes,\\r\\n`onTapEnd` when the gesture successfully completes. and `onTapCancel` when it\\r\\nfails. There is no `onTap` callback. `usePress` did not explicitly report back\\r\\nwhen the gesture failed, and product developers were confused about the\\r\\ndifference between `onPress` and `onPressEnd`.\\r\\n\\r\\n4. `useTap` explicitly separates the PointerEvent implementation from the\\r\\nMouseEvent/TouchEvent fallback.\\r\\n\\r\\n5. `useTap` has better unit test coverage . All pointer types and the fallback\\r\\nenvironment are tested. The shape of the gesture state object is also defined\\r\\nand tested.\\r\\n\\r\\n[Demo](https://codesandbox.io/s/latest-responder-build-rz96j30rp)","number":16628,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-31T00:47:35Z"},{"id":487689788,"title":"Refactored backend renderer to remove most of the recursion","body":"DevTools doesn\'t currently handle extremely deep trees (#16491) or extremely wide trees (#16501) very well, due to recursion in the backend interface. This PR removes _most_ of that.\\r\\n\\r\\nAs a sanity test, I confirmed that after this refactor, DevTools was able to handle the following:\\r\\n```js\\r\\nconst Child = ({ children = null }) => children;\\r\\n\\r\\nconst Deep = () => {\\r\\n  let children = null;\\r\\n  for (let i = 0; i < 15000; i++) {\\r\\n    children = <Child>{children}</Child>;\\r\\n  }\\r\\n  return children;\\r\\n};\\r\\n\\r\\nconst Wide = () => {\\r\\n  let children = [];\\r\\n  for (let i = 0; i < 15000; i++) {\\r\\n    children.push(<Child key={i} />);\\r\\n  }\\r\\n  return children;\\r\\n};\\r\\n```\\r\\n\\r\\nMigrated from https://github.com/bvaughn/react-devtools-experimental/pull/385","number":16627,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-30T22:18:13Z"},{"id":487673132,"title":"Add Auto Import to Babel Plugin ","body":"This babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don\'t plan to own this code in the future, and we will upstream this to Babel at some point once we\'ve proven out the concept.\\r\\n\\r\\nAs per the [RFC](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md) to simplify element creation, we want to add the ability to auto import \\"react\' directly from the babel plugin. This commit updates the babel plugin with **two options**:\\r\\n\\r\\n1.) `importSource`: The React module to import from. Defaults to `react`.\\r\\n2.) `shouldCacheImportFns`: If this is set to `true`, React functions that are imported will be cached at the top of the file (ex. `var _jsx = _react.jsx`) instead of calling the member expression (ex. `_react.jsx`) directly in the code. Defaults to `false`.\\r\\n3.) `autoImport`: The type of import. Defaults to `none`.\\r\\n      - `none`: Does not import React. JSX compiles to `React.jsx` etc.\\r\\n      - `namespace`: `import * as _react from \\"react\\";`. JSX compiles to `_react.jsx` etc.\\r\\n      - `default`: `import _default from \\"react\\";` JSX compiles to `_default.jsx` etc.\\r\\n      - `namedExports`: `import {jsx as _jsx} from \\"react\\";` JSX compiles to `_jsx` etc.\\r\\n      - `require`: `var _react = _interopRequireWildcard(require(\\"react\\"));`. jSX compiles to `_react.jsx` etc.\\r\\n\\r\\n`namespace`, `default`, and `namedExports` can only be used when `sourceType: module` and `require ` can only be used when `sourceType: script`.\\r\\n\\r\\nWe plan to test #16432 before landing this diff.","number":16626,"user":{"login":"lunaruan"},"state":"open","created_at":"2019-08-30T21:13:36Z"},{"id":487663040,"title":"[ESLint] \'Run on mount\' use case for \'exhaustive-deps\' lint rule","body":"I\'m unsure how best to resolve the `react-hooks/exhaustive-deps` lint rule when trying to run something only the first time the user sees something and would appreciate some pointers.\\r\\n\\r\\nPer @gaearon\'s recommendation in an [older thread about this lint rule](https://github.com/facebook/create-react-app/issues/6880#issuecomment-486875202), I\'ll try to explain from a user-oriented perspective rather than one that is mount/update-oriented.\\r\\n\\r\\n## Use Case\\r\\n\\r\\nWhen a user initially loads my app, a random element should be generated. There is a button that changes the random element which should be different from the previously generated element.\\r\\n\\r\\nIn my particular application, I\'m generating [guitar chords](https://dkthehuman.com/chord-bunny/), but for the sake of simplicity, let\'s say that we\'re generating random numbers.\\r\\n\\r\\n### Setting random element in `useState`\\r\\n\\r\\nMy initial approach was to use the initial state to generate the random number: https://codesandbox.io/s/generate-rand-num-as-initial-state-mf49x\\r\\n\\r\\nThis works well, but ended up being problematic when I added server-side rendering because there would be a noticeable flicker between the random number in the HTML (generated on the server) and the random number created when the page is loaded (generated on the client).\\r\\n\\r\\n### Setting random element in `useEffect`\\r\\n\\r\\nMy current approach is to set the initial state to `null` and generate the number when the user first loads the page (on mount) using `useEffect`: https://codesandbox.io/s/generate-rand-num-as-effect-46cne\\r\\n\\r\\nThis works but triggers the `exhaustive-deps` warning: `React Hook useEffect has a missing dependency: \'changeNum\'. Either include it or remove the dependency array  react-hooks/exhaustive-deps`\\r\\n\\r\\n### Potential Solutions\\r\\n\\r\\nHaving read through much of [the feedback thread for this rule](https://github.com/facebook/react/issues/14920), [another discussion about it](https://github.com/facebook/create-react-app/issues/6880), and the [Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies), I know that I can wrap `changeNum` into the `useCallback` hook, but I can\'t help but feel that there must be a better way.\\r\\n\\r\\nI suspect I may be thinking too imperatively rather than declaratively, but I\'m having a hard time figuring out what the idiomatic solution would be here. (If the answer is to just use the `useCallback` hook, so be it.) Any pointers would be greatly appreciated. Thanks!","number":16625,"user":{"login":"dkthehuman"},"state":"closed","created_at":"2019-08-30T20:41:20Z"},{"id":487630979,"title":"add a \\"always pure\\" config for react components ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nrequest a *feature* \\r\\n\\r\\n**What is the current behavior?**\\r\\nas default all the components are behave as impure-component\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI want react to give a config and then I can tell it I\'m always write my components as pure components and then I didn\'t need `React.memo` before all my components and as you know `React.memo` will only handle props not state (hooks). \\r\\n\\r\\n\\r\\nI don\'t know why default behavior is impure component I had never use them it\'s so ugly in my mind","number":16624,"user":{"login":"MHA15"},"state":"closed","created_at":"2019-08-30T19:08:28Z"},{"id":487600825,"title":"use-subscription tearing fix","body":"Adds a test (previously failing) and a fix for a potential tearing case reported in #16396.\\r\\n\\r\\nResolves #16396","number":16623,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-30T17:47:29Z"},{"id":487545630,"title":"Enhance React DevTools \\"Why did this render?\\" for values nested in prop objects","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n*feature*\\r\\n\\r\\n**What is the current behavior?**\\r\\n[as demonstrated here, \\"Why did this render?\\"](https://github.com/facebook/react/issues/16437#issuecomment-524892514) does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe \\"why did this render?\\" shows a collapsible tree with the \\"leaf\\" value that changed inside the prop object displayed.\\r\\n\\r\\nA couple use cases this would benefit:\\r\\nIn some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you\'d like to avoid storing the individual object items as separate prop variables such that you don\'t need to redefine them together as a dict later on, but changes are due to a single element in the dict that you\'d like visibility on in react devTools.\\r\\n\\r\\nIn rarer cases, it is unavoidable having props that aren\'t nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nNew feature never before released in React DevTools. I am using `16.8.6`\\r\\n","number":16622,"user":{"login":"evbo"},"state":"closed","created_at":"2019-08-30T15:30:57Z"},{"id":487511489,"title":"[react-core] Add more support for experimental React Scope API","body":"The React Scope API is an experimental internal API only. This PR enables the flag for internal www usage and also adds support for ReactDOMServer and ReactTestRenderer.","number":16621,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-30T14:24:06Z"},{"id":487490477,"title":"Error: \\"getCommitTree(): Unable to reconstruct tree for root \\"1\\" and commit 38\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. Start profiling app, record and reload page\\r\\n2. going through profilers commits\\r\\n3. crush\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5745)\\r\\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8527)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:275553)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in bi\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16620,"user":{"login":"antonramha"},"state":"closed","created_at":"2019-08-30T13:41:45Z"},{"id":487442458,"title":"Better support for internal use of forwardRef","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nNot sure. The core of the issue is `React.forwardRef` passing `null` as `ref` argument to the wrapped component if the parent component doesn\'t pass a ref. `undefined` would be better in this case, but there might be a reason to pass `null` that I\'m not aware of, so I\'m not comfortable calling this a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nGiven:\\r\\n```javascript\\r\\nexport default React.forwardRef((props, ref) => <MyComponent innerRef={ref} {...props} />);\\r\\n```\\r\\n\\r\\n`MyComponent` will receive `null` as `ref` argument when a parent component doesn\'t pass a ref. Leaving aside that `undefined` better represent the fact that something was not passed than `null`, this also makes it impossible to use the forwarded ref internally in `MyComponent` because it will be `null` and we cannot reassign the prop.\\r\\n\\r\\nI\'ve been able to work around this using the following solution (excuse my classyness please, shouldn\'t matter much for the example):\\r\\n```javascript\\r\\nclass MyComponent extends React.Component {\\r\\n\\tel = React.createRef();\\r\\n\\r\\n\\tcomponentDidMount() {\\r\\n\\t\\tif (!this.el.current) {\\r\\n\\t\\t\\tthis.el = this.props.innerRef;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (!this.el.current) return;\\r\\n\\r\\n\\t\\t// bind event handlers to this.el\\r\\n\\t}\\r\\n\\r\\n\\trender() {\\r\\n\\t\\tconst childRef = this.props.innerRef || this.el;\\r\\n\\r\\n\\t\\treturn <button ref={childRef}>Look at my button</button>;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\nWhile the above works, it\'s not the nicest piece of code and there\'s code in two places in order to support adapting to the case when parent doesn\'t pass a ref.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nNot only is `undefined` a less surprising value for `ref` argument when no ref is passed by the parent, but I think it would also allow us to use `defaultProps` to make a new ref the default when nothing is passed in. My initial attempt was something like:\\r\\n```javascript\\r\\nclass MyComponent extends React.Component {\\r\\n\\tstatic defaultProps = {\\r\\n\\t\\tinnerRef: React.createRef(),\\r\\n\\t};\\r\\n\\r\\n\\tcomponentDidMount() {\\r\\n\\t\\tif (!this.innerRef.current) return;\\r\\n\\r\\n\\t\\t// bind event handlers to this.innerRef.current\\r\\n\\t}\\r\\n\\r\\n\\trender() {\\r\\n\\t\\treturn <button ref={innerRef}>Look at my button</button>;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\nbut it didn\'t work because `innerRef` is `null`.\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.9.0\\r\\nChrome 76.0.3809.132 on Linux\\r\\nDidn\'t try with older versions of React or in other browsers.\\r\\n","number":16619,"user":{"login":"MilosRasic"},"state":"closed","created_at":"2019-08-30T11:51:30Z"},{"id":487368086,"title":"Update README","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16618,"user":{"login":"ChengYi821128"},"state":"closed","created_at":"2019-08-30T08:54:02Z"},{"id":487321866,"title":"[DevTools] [Context] Legacy Context","body":"Fixes: #16466  and #16679\\r\\n\\r\\n**Description**:\\r\\nWe are now changing the context label in DevTools based on if the component is using the legacy way of adding context. \\r\\n","number":16617,"user":{"login":"hristo-kanchev"},"state":"closed","created_at":"2019-08-30T07:00:41Z"},{"id":487321053,"title":"Error: \\"Cannot modify filter preferences while profiling\\"","body":"Describe what you were doing when the bug occurred:\\r\\n1. \\r\\n2. \\r\\n3. \\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.6-a39d9c3\\r\\n\\r\\nCall stack: at n.set (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:34098)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:261228\\r\\n    at Fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:72851)\\r\\n    at Vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:74577)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:93355\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25093)\\r\\n    at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:91165)\\r\\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:79859)\\r\\n    at M (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:2839)\\r\\n\\r\\nComponent stack: in Ma\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ga\\r\\n    in Xa\\r\\n    in div\\r\\n    in lo\\r\\n    in ir\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16616,"user":{"login":"Sargis0101"},"state":"closed","created_at":"2019-08-30T06:58:11Z"},{"id":487252150,"title":"useState update Array but child Component did\'t rerender","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\ni don\'t know\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n[https://codesandbox.io/s/gallant-chandrasekhar-p4pvi](url)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI click the \\"change count\\" button, count++\\r\\nI click the \\"change title\\" button, title is changed but Child Component is not rerender\\r\\n","number":16615,"user":{"login":"wangcode"},"state":"closed","created_at":"2019-08-30T02:17:10Z"},{"id":487230947,"title":"[Hydration Bugfix] Updates to dehydrated content when `disableSchedulerTimeoutBasedOnReactExpirationTime` is enabled","body":"## The Bug\\r\\n\\r\\nWhen server rendered content that hasn\'t finished hydrating yet (\\"dehydrated\\" content) receives an update (via props or context), React has a mechanism to force the content to hydrate before applying the update. It does this by increasing the priority of the hydration task from Idle to a level slightly higher than the current render. React will abort the current render, perform the hydration, then try the update again on top of the now-fully-hydrated content.\\r\\n\\r\\nThere are unit tests that cover this case. The bug starts happening when `disableSchedulerTimeoutBasedOnReactExpirationTime` is enabled. It turns out that the mechanism to interrupt the current rendering task depends on the hydration task having a slightly earlier timeout, because Scheduler tasks are sorted by their timeouts. When the hydration task is higher priority, it causes `shouldYield` to flip to true, forcing the render to yield execution and allowing the hydration task to start. (This is similar to how input events can interrupt normal priority renders.)\\r\\n\\r\\n`disableSchedulerTimeoutBasedOnReactExpirationTime` breaks this mechanism, because when it is enabled, the timeout given to Scheduler is no longer based on React\'s internal expiration times. Effectively, all rendering tasks within the same priority category are first-in-first-out. So, the hydration task comes *after* the original task in the Scheduler queue, and therefore `shouldYield` will keep returning `false`, and the original task will run to completion. (See https://github.com/facebook/react/pull/16284 for more information on `disableSchedulerTimeoutBasedOnReactExpirationTime`.)\\r\\n\\r\\nThe first commit in this PR adds a regression test for this case.\\r\\n\\r\\n## The Fix\\r\\n\\r\\nThere are several potential fixes. The one I\'ve chosen is not ideal in the long term, but it\'s lower risk compared to the complete solution, which will likely require some refactoring of how rendering tasks are scheduled.\\r\\n\\r\\nThe work loop already has some logic to cancel a rendering task in favor of a higher priority one, using `Scheduler.cancelCallback`. It does this by comparing the React expiration times of each task, so it doesn\'t depend on the ordering of tasks in Scheduler. This works when the high priority task is received during an input event.\\r\\n\\r\\nHowever, `Scheduler.cancelCallback` is currently a no-op when given an already-running task. It does not cause the task to stop execution, and if the task does yield with a continuation, then the continuation will run. Which means it won\'t work if React is already inside the render phase. (Note the distinction between \\"inside the render phase\\" versus \\"in an event that fires in between two chunks of a time sliced task.\\")\\r\\n\\r\\nThe fix in the second commit addresses both parts: canceling the current task causes `shouldYield` to return `true`, and if the canceled task returns a continuation, the continuation is ignored.\\r\\n\\r\\nThis is sufficient to fix the regression.\\r\\n\\r\\n## Alternative Fixes\\r\\n\\r\\nA proper fix would be to model interruptions of in-progress renders in such a way that it does not depend on Scheduler\'s semantics for canceling and yielding. However, because of the inherent risk involved in changing how rendering tasks are scheduled, I would prefer to land this smaller fix first before attempting a refactor.\\r\\n\\r\\n(There\'s already a planned mini-refactor of the work loop, e.g. to optimize how pings and restarts are modeled. We can fold this into that larger change.)","number":16614,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-30T00:30:20Z"},{"id":487211617,"title":"Adopt Contributor Covenant","body":"In order to foster healthy open source communities, we\'re adopting the\\r\\n[Contributor Covenant](https://www.contributor-covenant.org/). It has been\\r\\nbuilt by open source community members and represents a shared understanding of\\r\\nwhat is expected from a healthy community.","number":16613,"user":{"login":"zpao"},"state":"closed","created_at":"2019-08-29T23:00:28Z"},{"id":487047856,"title":"[DevTools] [Profiler]: Save profile now working in Firefox","body":"Fixes: #16527 \\r\\n\\r\\n**Description**:\\r\\nBasically the reason for FF to block it with the previous implementation was that we didn\'t have a physical DOMNode for the download anchor tag.\\r\\n\\r\\nWith this fix we now pass a `HTMLAnchorElement` to the `downloadFile` function in order to set the correct attributes.\\r\\n","number":16612,"user":{"login":"hristo-kanchev"},"state":"closed","created_at":"2019-08-29T16:00:44Z"},{"id":487047673,"title":"Error message when calling work.commit in commit phase","body":"This was me just toying around with unstable APIs. I don\'t know what these can be used for. Just tried to make sense of them from their names.\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nerror message of `batch.commit()` is confusing\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it\'s called after the commit [which doesn\'t seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`\\r\\n\\r\\n```js\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <h1>Hello CodeSandbox</h1>\\r\\n      <h2>Start editing to see some magic happen!</h2>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nconst root = ReactDOM.unstable_createRoot(rootElement);\\r\\n\\r\\nroot.render(<App />).then(() => {\\r\\n  const batch = root.createBatch();\\r\\n\\r\\n  batch.render(<App />);\\r\\n  // bad\\r\\n  batch.commit();\\r\\n  setTimeout(() => {\\r\\n    // good\\r\\n    //batch.commit()\\r\\n  }, 0);\\r\\n  batch.then(() => {\\r\\n    // good\\r\\n    //batch.commit();\\r\\n  });\\r\\n});\\r\\n\\r\\n```\\r\\n\\r\\nThree things I noticed:\\r\\n1. seems like I need to call batch.commit after the batch is complete. Changing it to \\r\\n```\\r\\nbatch.then(() => {\\r\\n  // good\\r\\n  batch.commit();\\r\\n});\\r\\n```\\r\\ngot rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.\\r\\n\\r\\n2. \\"lifecycle\\" should be replaced with something different before these APIs get stable since we try to get away from this mental model. \\r\\n\\r\\nFor example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would\'ve expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.\\r\\n\\r\\n3. Not all lifecycles are \\"during rendering\\" as far as I know. `componentDidUpdate` is called during commit.\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/dreamy-wood-dvzrp\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'m basically asking when it\'s safe to call `batch.commit`: \\r\\n* [ ] during render phase\\r\\n* [ ] during commit phase \\r\\n* [ ] outside of these phases e.g. in some `onComplete` callback \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`react(-dom)@16.9.0`\\r\\n","number":16611,"user":{"login":"eps1lon"},"state":"closed","created_at":"2019-08-29T16:00:22Z"},{"id":486988870,"title":"chore: Update nvmrc with latest lts","body":"On `master`:\\r\\n```bash\\r\\n$ nvm use\\r\\nNow using node v8.4.0 (npm v5.3.0)\\r\\n$ yarn\\r\\nerror gitlab@10.2.1: The engine \\"node\\" is incompatible with this module. Expected version \\">=10.0.0\\". Got \\"8.4.0\\"\\r\\nerror Found incompatible module.\\r\\n```\\r\\n\\r\\nUpdated with latest node lts release.","number":16610,"user":{"login":"eps1lon"},"state":"closed","created_at":"2019-08-29T14:20:59Z"},{"id":486953645,"title":"How do we replace an element with DOM instead of inserting a DOM into an element when hydrating?","body":"I think we have the following issue.\\r\\n\\r\\nhttps://stackoverflow.com/questions/55611192/reactdom-hydrate-replace-container-instead-of-inserting-into\\r\\n\\r\\nIn preact, a new feature was added to solve this issue.\\r\\n\\r\\nhttps://github.com/preactjs/preact/pull/1557\\r\\n\\r\\nIt would be useful for partial server-side rendering if we can do this. Can we replace an element with DOM instead of inserting a DOM into an element when hydrating? Or, do you have any plans to implement new features to solve this?","number":16609,"user":{"login":"lightnet328"},"state":"closed","created_at":"2019-08-29T13:19:07Z"},{"id":486936122,"title":"[react-events] Split out mixed event responder tests","body":"This PR moves about some of the tests into their own \\"mixed responders\\" test file, including:\\r\\n\\r\\n- mixing Input and Press responders\\r\\n- mixing heritage event system with Press\\r\\n\\r\\nAlso, this more the `timeStamp` logic into the core responder test file.","number":16608,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-29T12:45:29Z"},{"id":486802688,"title":"[eslint-plugin-react-hooks] Added meta property (including docs)","body":"ESLint v4.15.0 added an official location for rules to store metadata such as a URL to their documentation (see eslint/eslint#9788). This adds the URL to all the existing rules so anything consuming them can know where their documentation is without having to resort to external packages to guess.  Plugins such as this one can also help the ESLint ecosystem benefit from the same information by adding the `type` and `docs` properties to the `meta` object in their rule definitions.\\r\\n\\r\\nIn order to allow my vscode extension [lintlens](https://marketplace.visualstudio.com/items?itemName=ghmcadams.lintlens) to direct users to the right documentation, this PR adds/updates the meta property (in accordance with ESLint\'s [Rule Basics](https://eslint.org/docs/developer-guide/working-with-rules#rule-basics)) to each of the rules in the `eslint-plugin-react-hooks` package.\\r\\n\\r\\nI tried my best to determine the correct values for `type`, `docs.description`, `docs.category`, and `docs.url`.  Usually, plugins would place a markdown file under `/docs/rules` (EX: [ESLint Rules](https://github.com/eslint/eslint/tree/master/docs/rules)) for each rule and use that as the url property value.  I did not include such documentation myself.  Rather, I pointed to existing documentation for each rule:\\r\\n- exhaustive-deps: [https://github.com/facebook/react/issues/14920](https://github.com/facebook/react/issues/14920)\\r\\n- rules-of-hooks: [https://reactjs.org/docs/hooks-rules.html](https://reactjs.org/docs/hooks-rules.html)","number":16607,"user":{"login":"ghmcadams"},"state":"open","created_at":"2019-08-29T08:04:12Z"},{"id":486744596,"title":"TypeError: \\"\'requestAnimationFrame\' called on an object that does not implement interface Window.\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** **Bug**\\r\\n\\r\\n**What is the current behavior?**\\r\\nTypeError: \\"\'requestAnimationFrame\' called on an object that does not implement interface Window.\\"\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://github.com/facebook/react/blob/0f6e3cd61cf4a5a1491bb3c92780936aebc2a146/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L88\\r\\n\\r\\nIn the WebExtension content script, globalThis !== window.\\r\\nSo when `const requestAnimationFrame = window.requestAnimationFrame`, the `this` binding of `rAF` is lost.\\r\\n\\r\\nIn the after calling, `rAF` rebinds to the globalThis, but globalThis doesn\'t implements Window interface.\\r\\n\\r\\nPoC: Install this extension in the Firefox and you will see the error reported.\\r\\n```index.js\\r\\ntry {\\r\\n    const raf = window.requestAnimationFrame\\r\\n    raf(() => console.log(\'Okay.\'))\\r\\n} catch (e) {\\r\\n    console.warn(e)\\r\\n}\\r\\n```\\r\\n\\r\\n```manifest.json\\r\\n{\\r\\n    \\"name\\": \\"rAF in content script test\\",\\r\\n    \\"version\\": \\"0.0.1\\",\\r\\n    \\"manifest_version\\": 2,\\r\\n    \\"content_scripts\\": [{ \\"js\\": [\\"/index.js\\"], \\"matches\\": [\\"<all_urls>\\"] }]\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nFirefox, in WebExtension. \\r\\n\\r\\nRelated to https://github.com/facebook/react/issues/16605","number":16606,"user":{"login":"Jack-Works"},"state":"open","created_at":"2019-08-29T05:25:38Z"},{"id":486730933,"title":"logCapturedError ate our error message","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** **Bug**\\r\\n\\r\\n**What is the current behavior?** \\r\\n![image](https://user-images.githubusercontent.com/5390719/63910087-ee455f00-ca57-11e9-941a-f934d1525f01.png)\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nOur application is run in a very complicated environment. It\'s hard to do that.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI change the bundled file, add `console.error(error)` in `logCapturedError`\\r\\n\\r\\nAnd the correct error and it\'s stack is printed.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/5390719/63910242-7461a580-ca58-11e9-9bb8-9e1f8f58c10e.png)\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI\'m debugging in Firefox Developement Edition. And the code is running in the WebExtension environment. Please consider if the following code is correct in Firefox\\r\\n```\\r\\n// Browsers support silencing uncaught errors by calling\\r\\n    // `preventDefault()` in window `error` handler.\\r\\n    // We record this information as an expando on the error.\\r\\n\\r\\n    if (error != null && error._suppressLogging) {\\r\\n      if (errorBoundaryFound && willRetry) {\\r\\n        // The error is recoverable and was silenced.\\r\\n        // Ignore it and don\'t print the stack addendum.\\r\\n        // This is handy for testing error boundaries without noise.\\r\\n        return;\\r\\n      }\\r\\n      // The error is fatal. Since the silencing might have\\r\\n      // been accidental, we\'ll surface it anyway.\\r\\n      // However, the browser would have silenced the original error\\r\\n      // so we\'ll print it first, and then print the stack addendum.\\r\\n      console.error(error);\\r\\n      // For a more detailed description of this block, see:\\r\\n      // https://github.com/facebook/react/pull/13384\\r\\n    }\\r\\n```","number":16605,"user":{"login":"Jack-Works"},"state":"closed","created_at":"2019-08-29T04:30:07Z"},{"id":486657610,"title":"How should we set up apps for HMR now that Fast Refresh replaces react-hot-loader?","body":"Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20\\r\\n\\r\\n> **Me:**\\r\\n> I have this hook:\\r\\n> ```require(\\"react-reconciler\\")(hostConfig).injectIntoDevTools(opts);```\\r\\n> But HMR has always worked completely without it. Is this now a new requirement?\\r\\n\\r\\n> **Dan:**\\r\\n> Yes, that\'s what the new mechanism uses. The new mechanism doesn\'t need \\"react-hot-loader\\" so by the time you update, you\'d want to remove that package. (It\'s pretty invasive)\\r\\n\\r\\nI can\'t see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(\\"react-hot-loader/root\\").hot` method), how should we set up apps for HMR in:\\r\\n\\r\\n* React DOM apps\\r\\n* React Native apps\\r\\n* React custom renderer apps\\r\\n\\r\\nI\'d be particularly interested in a migration guide specifically for anyone who\'s already set up HMR via `react-hot-loader`.\\r\\n\\r\\nAlso, for HMR, does it matter whether we\'re using the standalone Devtools or the browser-extension Devtools?","number":16604,"user":{"login":"shirakaba"},"state":"open","created_at":"2019-08-28T23:30:26Z"},{"id":486648799,"title":"Updated DevTools extension build script to work when run remotely","body":"These changes are in support of the Facebook internal DevTools pre-release build script.","number":16603,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-28T22:58:36Z"},{"id":486585266,"title":"chore: upgrade to danger 9","body":"#15778 is broken since Danger@3 loads babel 7 and only works with babel 6. Upgrading  danger fixes it, so here\'s a separate PR with it. \ud83e\udd1e it passes","number":16602,"user":{"login":"SimenB"},"state":"closed","created_at":"2019-08-28T20:11:51Z"},{"id":486504247,"title":"add integrity field in yarn.lock","body":"While rebasing #15778, I noticed a ton of dependencies were missing an `integrity` field in the lockfile, creating more conflicts than necessary (and although `yarn` auto-solves merge conflicts, it should reduce the diff anyways).","number":16601,"user":{"login":"SimenB"},"state":"closed","created_at":"2019-08-28T17:10:28Z"},{"id":486457351,"title":"[react-events] Ensure screen reader virtual clicks support preventDefault","body":"This adds `preventDefault` support to screen reader virtual clicks.","number":16600,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-28T15:34:10Z"},{"id":486431379,"title":"New plugin not working after change any props in debugger tools","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nHaving an issue\\r\\n\\r\\n**What is the current behavior?**\\r\\nnot able to see any rendering after changing any props in debugging tool. and also getting below issue \\r\\n![image](https://user-images.githubusercontent.com/7201068/63866449-d7a7f500-c9d0-11e9-80dd-a19d0456711c.png)\\r\\n\\r\\nUncaught TypeError: Cannot read property \'_reactInternalInstance\' of undefined\\r\\n    at Object.get (react-dom.min.js:formatted:4200)\\r\\n    at a (react-dom.min.js:formatted:4937)\\r\\n    at Object.enqueueForceUpdate (react-dom.min.js:formatted:4965)\\r\\n    at s (backend.js:9)\\r\\n    at Object.setInProps (backend.js:9)\\r\\n    at t.<anonymous> (backend.js:1)\\r\\n    at t.l.emit (backend.js:1)\\r\\n    at backend.js:9\\r\\n    at t (backend.js:1)\\r\\n\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nReproduce bug.\\r\\ntry to change any dynamic pros in the debugger tools section and you will not able to see any DOM changes\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nWhenever change any props in debugger tools. react component should be rendered as per it.\\r\\nIt was working fine with previous react developer tools chrome plugin \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI am using the below version.\\r\\n\\"react\\": \\"15.6.2\\",\\r\\n   \\"react-dom\\": \\"15.6.2\\",\\r\\n","number":16599,"user":{"login":"sagar-k"},"state":"open","created_at":"2019-08-28T14:49:53Z"},{"id":486416822,"title":"Unable to switch a variable with number type to a string in Devtools ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn the Devtools components tab: If the current value of a state member is a number, there is  no way to set it to an string. You cannot type quotes if it is of type \'number\' and leaving it empty does not reset the value.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n1. Create a react component that has an integer value in the state.\\r\\n2. Find the state variable and try to type \\"\\".\\r\\n3. Erase the value and copy to the console.\\r\\n4. The value resets to the value it was before these steps.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nParse values in devtools like the JS compiler does for literals. \\"[value]\\" = string, [0-9*] = number, [[values]] = array.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact v 16.8.6\\r\\nDevtools v 4.0.6","number":16598,"user":{"login":"jsc144"},"state":"closed","created_at":"2019-08-28T14:25:26Z"},{"id":486360343,"title":"Devtools doesn\'t properly loads components content","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen I open two instances of devtools (browser extension and standalone) is doesn\'t load components content (props, state etc.)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n- open project with <script src=\\"http://localhost:8097\\"><\/script>\\r\\n- run it\\r\\n- open chrome browser with react-devtools\\r\\n- chrome devtools\\r\\n- open standalone via console `react-devtools &`\\r\\n- try to select any component\\r\\n- ...\\r\\n- infinite `loading...`\\r\\n\\r\\n**What is the expected behavior?**\\r\\ndevtools loads components content even if opened two instances (maybe more?)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact: `16.9`\\r\\nreact-devtools (chrome): `4.0.6 (8/26/2019)`\\r\\nreact-devtools (standalone): `4.0.6-a39d9c3`","number":16597,"user":{"login":"chrisands"},"state":"closed","created_at":"2019-08-28T12:46:22Z"},{"id":486341207,"title":"Devtools flamegraph component sizes are not proportional to render time","body":"**Do you want to request a *feature* or report a *bug*?**: Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe flamegraph appears to be intended to show the component tree with each component sized proportional to the time taken to render it & its children. Either it doesn\'t do this reliably, or the relative sizes are intended to show something else (in which case: I don\'t know what). As an example:\\r\\n\\r\\n![Screenshot from 2019-08-28 13-53-00](https://user-images.githubusercontent.com/1526883/63853615-7580cd00-c99b-11e9-83b9-0a53d1d954c6.png)\\r\\n\\r\\nCompare the sizes of `pane1` & `pane2` (the two direct children of the highlighted SplitPane). Pane1 is approx 75% of the size, and took 3.7ms to render, whilst Pane2 is 25% of the size and took 23.2ms.\\r\\n\\r\\nThis UI encourages me to focus on Pane1, but Pane2 is definitely what I should be looking at.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\\r\\n\\r\\nI\'m not sure of the steps to reproduce this in general, but it\'s completely reliable when profiling my application in quite a few places, I think this is likely a general issue. Not sure, but I suspect comparing the numbers and relative sizes when profiling any substantial render will find odd mismatches.\\r\\n\\r\\nLet me know if that doesn\'t seem to be true, and I\'ll find time to do some more testing & build a proper repro.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe components should be sized relative to their overall render time, so you can easily find the most expensive component trees.\\r\\n\\r\\nIt\'s totally possible that the bug here is that my expectations are wrong, in which case I\'d love to know what this is _supposed_ to show, and imo it\'d be worth considering showing the proportional render time instead.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue?**\\r\\n\\r\\nReact: 16.6.3\\r\\nChrome: 75.0.3770.142 \\r\\nReact devtools addon: `Created from revision a39d9c3 on 8/26/2019.` \\r\\n","number":16596,"user":{"login":"pimterry"},"state":"closed","created_at":"2019-08-28T12:08:11Z"},{"id":486316438,"title":"Fix link on error-codes/README.md","body":"Fixed minor typo.\\r\\n","number":16595,"user":{"login":"sukjae"},"state":"closed","created_at":"2019-08-28T11:16:59Z"},{"id":486230388,"title":"useObserver and ESlint conflict","body":"Hello!\\r\\n\\r\\nI found **bug** in `eslint-plugin-react-hooks` package.\\r\\n\\r\\nNow, it throw error (`React Hook \\"useState\\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.`) for the following code:\\r\\n\\r\\n```js\\r\\nimport { useObserver } from \'mobx-react-lite\';\\r\\n\\r\\nconst Component = () =>\\r\\n  useObserver(() => {\\r\\n    const [count, setCount] = useState(0);\\r\\n   \\r\\n    const increment = useCallbacl(() => setCount(c => c + 1));\\r\\n   \\r\\n   return (\\r\\n     <>\\r\\n       <p>COUNT {count}</p>\\r\\n       <button onClick={increment}>INC</button>\\r\\n     </>\\r\\n   )\\r\\n  });\\r\\n```\\r\\n\\r\\nI guess, it is not correct, because `useObserver` **can** be used like this.\\r\\n\\r\\nIn normal case, this code don\'t throw eslint error.\\r\\n\\r\\nThis issue accur on `\\"eslint-plugin-react-hooks\\": \\"1\\"`.\\r\\n","number":16594,"user":{"login":"igorkamyshev"},"state":"closed","created_at":"2019-08-28T08:25:09Z"},{"id":486205725,"title":"Stucking in an infinite loop when add some breakpoints between  `ReactFiberWorkLoop.js#L876` and `#L891``","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nmaybe a bug\\r\\n**What is the current behavior?**\\r\\nIn `ReactFiberWorkLoop.js`,if you add some **breakpoint** between line 876 and 891,It seems the condiction in [#L881](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberWorkLoop.js#L881) always pass,and it return `renderRoot` as continuation,which cause an infinite loop.\\r\\nIt seems the  `currentTime` equal to  `expirationTime` if without any breakpoints.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nMaybe it\'s not a bug,it only happens when you add a breakpoint between line 876 and line 891.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.9.0, Chrome","number":16593,"user":{"login":"lintuming"},"state":"closed","created_at":"2019-08-28T07:28:16Z"},{"id":486132886,"title":"React@16.9 block `javascript:void(0);`","body":"```\\r\\n<a href=\\"javascript:void(0);\\"></a>\\r\\n```\\r\\n\\r\\nWarning: A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed \\"javascript:void(0);\\".\\r\\n\\r\\nreact@16.9","number":16592,"user":{"login":"fengxinming"},"state":"closed","created_at":"2019-08-28T02:56:58Z"},{"id":486105676,"title":"[Partial Hydration] Don\'t invoke listeners on parent of dehydrated event target","body":"If an event gets invoked on a child of a suspense boundary we haven\'t hydrated yet, that\'s an opportunity where we might want to consider replaying it instead. In the existing semantics there exist no replaying, instead things are ignored (see #16532). So this PR makes sure we don\'t dispatch these events to React\'s event system. They may still have been invoked on non-React nodes.\\r\\n\\r\\nHowever the tricky part is that we don\'t readily know if a node is a non-React DOM node or if it\'s just a node we haven\'t gotten to yet. We can\'t just mark the node as dehydrated since the server streaming can update the content of dehydrated boundaries as they go and that would lose the markers.\\r\\n\\r\\nHowever, typically there will at least be some React DOM node that is a parent of the Suspense boundary so that will normally become the target today. We also need to deal with the same case when there is a Suspense boundary at the root and while the root most level is concurrently hydrating.\\r\\n\\r\\nIn the case where there is a parent React DOM node, we don\'t know if the target node was a non-React DOM node that someone manually inserted or if it is a child of a dehydrated boundary.\\r\\n\\r\\nThe common case is that if it\'s a DOM node that someone messes with, it won\'t have any children so we can use that as a quick bailout to assume it\'s not a React node.\\r\\n\\r\\nIf it does have children, I backtrack on the previous siblings to see if we\'re nested inside a Suspense boundary (i.e. if we\'re inside two comment nodes). This could potentially be expensive if there are many previous siblings but most of the time there\'s only one direct DOM node inside a Suspense boundary, and it\'s unusual that it wouldn\'t be a Suspense boundary in this case. The worst case is that this is happening on a non-React node and that the React parent happens to have a child that renders null or something in it, and also that this has many children in it.","number":16591,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-28T00:57:03Z"},{"id":486060548,"title":"[react-events] Improve mock event object accuracy","body":"* Better simulation for `pointercancel`\\r\\n* Fix pressure values for different pointers\\r\\n* Add describe/test helpers for pointer events","number":16590,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-27T22:15:03Z"},{"id":486023593,"title":"Confusing error when passing non-function to useMemo","body":"\\r\\n\\r\\n[Example](https://codesandbox.io/s/boring-albattani-grhhp).\\r\\n\\r\\nWhen passing something like an object to `useMemo` the error isn\'t very helpful.\\r\\n\\r\\n```\\r\\nTypeError: nextCreate is not a function\\r\\n    at mountMemo (https://grhhp.csb.app/node_modules/react-dom/cjs/react-dom.development.js:13459:19)\\r\\n    ...\\r\\n```\\r\\n\\r\\nMost developers wont know what `nextCreate` is, and passing an object to `useMemo` doesn\'t seem _obviously_ wrong at first. We could add a `typeof` check that throws a better error, but maybe that\'s too much overhead? At the very least we could add a DEV warning with more helpful guidance.","number":16589,"user":{"login":"aweary"},"state":"open","created_at":"2019-08-27T20:41:37Z"},{"id":485959884,"title":"[react-reconciler] fix: same key render error","body":"###  it is a render bug !!!\\r\\n\\r\\ndemo: https://jsfiddle.net/rmtusg0v/\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/9846613/63797206-2e162480-c93a-11e9-93cb-9c8164c5acc6.png)\\r\\n\\r\\n\\r\\n\\r\\nThis bug is caused by the same key.\\r\\nI am troubled by adding tests in the case ~, because same key will cause warn dev\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":16588,"user":{"login":"yongningfu"},"state":"closed","created_at":"2019-08-27T18:18:05Z"},{"id":485918619,"title":"[react-core] Add experimental React Scope component API","body":"This PR adds an experimental `React.unstable_createScope` API for internal testing and usage only. This is to be used for testing with projects around handling focus management within React. In order to keep things small and sane for reivew this PR only has ReactDOM (client) support for now (other renderer support to follow).","number":16587,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-27T16:43:29Z"},{"id":485910950,"title":"Can\'t use ReactDOM.unmountComponentAtNode to unmount portal before DOM container is erased...","body":"I have a Blaze template application outside of the main react app that houses a container for a React portal to be rendered within it. On render of the Blaze template, we load data and send a custom event to an event listener inside the React application, which then renders the portal.\\r\\n\\r\\nThis works perfectly inside Chrome, but with Internet Explorer 11, the rendering and derendering of both the portal and template is a lot slower, and we run into a race condition??\\r\\n\\r\\nOn the second render of the Blaze template, React goes through its lifecycle and attempts to unmount all the children of the previous portal container, however - they do not exist since we\'ve removed that DOM node entirely (using .html(\'\')), and we run into an error within ReactDOM where the child is not found.\\r\\n\\r\\n```\\r\\nfunction removeChildFromContainer(container, child) {\\r\\n  if (container.nodeType === COMMENT_NODE) {\\r\\n    container.parentNode.removeChild(child);\\r\\n  } else {\\r\\n    container.removeChild(child); // Error on this line. \\r\\n  }\\r\\n}\\r\\n```\\r\\nI\'ve attempted to remove unmount the portal by sending a custom event before the existing code removes the DOM container.\\r\\n\\r\\n    //Derender the previous portal if it exists\\r\\n    if (window.isEvalTool) {\\r\\n        console.log(\'removing the portal\')\\r\\n        // Send an event to React to unmount the previous portal node for IE\\r\\n        var container = document.getElementById(\'eval-panel-root\');\\r\\n        var removePortal = new CustomEvent(\\"readyForPortalRemoval\\", {\\r\\n            detail: container\\r\\n        });\\r\\n        window.dispatchEvent(removePortal);\\r\\n    }\\r\\n    $(findingContainer).html(\'\');\\r\\n\\r\\n\\r\\n// Code that should unmount the component manually\\r\\n```\\r\\n        window.addEventListener(\'readyForPortalRemoval\', function (event) {\\r\\n            console.log(\'removing previous portal container\');\\r\\n            var removed = ReactDOM.unmountComponentAtNode(event.detail);\\r\\n            console.log(removed); // This usually returns false, meaning it \\r\\n            // couldn\'t find it. \\r\\n        })\\r\\n```\\r\\nRight now the problem is that unmountComponentAtNode doesn\'t seem to work for my portal (which is a classical component) - even when passing the direct parent container. I thought it might be because events aren\'t guaranteed to fire immediately and so it might be looking for the container only after the .html(\'\') call, but that isn\'t the issue, after placing the remove portal event right after the create portal event (no removal of html between those two calls).\\r\\n\\r\\nAny information on how I can gracefully unmount and derender the portal before its parent container gets replaced by Blaze would be extremely helpful!\\r\\n\\r\\nThanks in advance.\\r\\n\\r\\nI expected to at least have a successful removal of the portal at some point but have not. I cannot remove the html.(\'\') call because that is how the current templating engine replaces templates.","number":16586,"user":{"login":"sqiii"},"state":"closed","created_at":"2019-08-27T16:26:36Z"},{"id":485847978,"title":"useState\'s setState hangs when called in closed window","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf useState\'s setState is called in a closed window, it hangs the browser (at least Chrome). I agree that this seems like a weird issue, but we do this all of the time in our plugin we\'ve built for an application that has iframe based UI.\\r\\n\\r\\nThis reproduces it. Just click \\"Do it\\". Note that your codesandbox service worker will spin up to 100% cpu and I can\'t figure out a way to stop it other than to kill that task in the Chrome task manager\\r\\n\\r\\nhttps://codesandbox.io/s/react-setstate-on-hidden-window-hangs-repro-cixqn\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nNo hang, it should just ignore the setState call, ideally.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.9. I\'m not sure, but hooks are fairly new. This reproduces in Chrome 76, but not Firefox as far as I can tell.\\r\\n","number":16585,"user":{"login":"aaronjensen"},"state":"open","created_at":"2019-08-27T14:32:08Z"},{"id":485782443,"title":"[react-events] Support screen reader virtual clicks","body":"This PR aims to address issues around using screen reader tooling (VoiceOver, NVDA, JAWS) with the `Press` event responder. We previously relied on \\"press\\" events firing when coming from a valid pointer/mouse/touch sequence of events. We also supported \\"Enter\\" and \\"Space\\" keyboard events. However, we did not take into account that screen reader tooling can also fire virtual `click` events to specific DOM nodes.\\r\\n\\r\\nScreen reader virtual click events have a pattern that makes them somewhat easy to detect. They seem to also have `0` as the `nativeEvent.detail`, rather than `1` and they also never provide screen co-ordinates (they are all always `0`).\\r\\n\\r\\nTesting URL: https://m9zxnyvpj9.csb.app/","number":16584,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-27T12:34:26Z"},{"id":485756074,"title":"IE11 polyfill seems to be not working with react-scripts build","body":"Imported below polyfills in the index.js and using react-scripts build for creating the bundle as suggested for fixing the initial page loading issue.\\r\\n```js\\r\\nimport \'react-app-polyfill/ie11\';\\r\\nimport \'react-app-polyfill/stable\'\\r\\n```\\r\\nBut seems to be not working after the initial page load and throwing invalid object error in console with details like invalid symbol and is happening while doing a `this.props.history.push` method call and an error seems to be occurring from `confirmTransitionTo` method in `history` as anonymous function.\\r\\n\\r\\nAlso using the below browser list\\r\\n```json\\r\\n  \\"browserslist\\": {\\r\\n    \\"production\\": [\\r\\n      \\">0.2%\\",\\r\\n      \\"not dead\\",\\r\\n      \\"not op_mini all\\",\\r\\n      \\"ie 11\\"\\r\\n    ],\\r\\n    \\"development\\": [\\r\\n      \\"last 1 chrome version\\",\\r\\n      \\"last 1 firefox version\\",\\r\\n      \\"last 1 safari version\\",\\r\\n      \\"ie 11\\"\\r\\n    ]\\r\\n  }\\r\\n```\\r\\n\\r\\nUsing below version for react/ react scripts/polyfill.\\r\\n```json\\r\\n\\"react-scripts\\": \\"^3.1.1\\",\\r\\n \\"react\\": \\"^16.8.6\\",\\r\\n \\"react-app-polyfill\\": \\"^1.0.2\\",\\r\\n```\\r\\n\\r\\nPlease let me know if any one else face this similar issues and any working fixes.\\r\\n\\r\\n\\r\\n","number":16583,"user":{"login":"sarathsp"},"state":"closed","created_at":"2019-08-27T11:36:47Z"},{"id":485738725,"title":"Should have a queue. This is likely a bug in React. Please file an issue","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI\'ve received this message: \\"Should have a queue. This is likely a bug in React. Please file an issue.\\"\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nTried to reproduce in Sandbox but was unsuccessful: https://codesandbox.io/s/admiring-mayer-2uiiu\\r\\n\\r\\nPlease checkout this repo frozen with this bug above: https://github.com/metamn/react-best-practices/releases/tag/v0.0.1\\r\\n\\r\\nThe bug appeared after adding useMemo in `src/components/PlaceholderText/PlaceholderText.js`\\r\\n\\r\\n```\\r\\n/**\\r\\n   * Generates the text rows\\r\\n   */\\r\\n  const textRows = useMemo(\\r\\n    () =>\\r\\n      [...Array(numberOfRows)].map(i => {\\r\\n        /**\\r\\n         * Generates a random uuid\\r\\n         */\\r\\n        const id = uuid.v4();\\r\\n\\r\\n        return {\\r\\n          id: id,\\r\\n          text: textRow\\r\\n        };\\r\\n      }),\\r\\n    [numberOfRows, textRow]\\r\\n  );\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nTo render the component as usual\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact\\": \\"^16.9.0\\r\\nFirefox 68.0.2 (64-bit) Ubuntu\\r\\nUbuntu 18.04.3 LTS\\r\\n\\r\\n\\r\\n\\r\\n","number":16582,"user":{"login":"metamn"},"state":"closed","created_at":"2019-08-27T10:56:56Z"},{"id":485722542,"title":"Developer Tools for idiomatic JavaScript","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReact Developer Tools ***feature*** request.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nConsider the following class-based component:\\r\\n\\r\\n```js\\r\\nclass App extends React.Component {\\r\\n render() {\\r\\n    return e(\\"div\\", {}, \\"...\\");\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nConsider the equivalent functional component:\\r\\n```js\\r\\nfunction renderApp() {\\r\\n  return e(\\"div\\", {}, \\"...\\");\\r\\n}\\r\\n```\\r\\n\\r\\nConsider is common practice name functions with a verb followed by a noun (`doSomething()`).\\r\\nConsider, most of the time, I\'m using React without JSX so I\'m not forced to capitalize functional components (e.g. `renderApp()` instead of `RenderApp()`).\\r\\n\\r\\nCurrently, the [React Developer Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) shows the following tree:\\r\\n\\r\\n```txt\\r\\nrenderApp\\r\\n  Context.Provider\\r\\n    renderList\\r\\n      renderItem\\r\\n```\\r\\n\\r\\nIt would be nice if instead, it could hide the lowercase portion `render`.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe tree should look as follows:\\r\\n\\r\\n```txt\\r\\nApp\\r\\n  Context.Provider\\r\\n    List\\r\\n      Item\\r\\n```\\r\\n\\r\\nI propose to strip away `render` from the component name.\\r\\n\\r\\nWhy `render`?\\r\\n\\r\\nIn class-based components, we use the `render()` method so it makes sense to call a functional component `renderComponent()`.\\r\\n\\r\\nThank you.","number":16581,"user":{"login":"i5ar"},"state":"closed","created_at":"2019-08-27T10:22:27Z"},{"id":485657595,"title":" console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:104","body":"Hi\\r\\n\\r\\nI\'m facing following issue when i\'m run test case:-\\r\\n\\r\\n console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:104\\r\\n    Warning: An update to Query inside a test was not wrapped in act(...).\\r\\n\\r\\n    When testing, code that causes React state updates should be wrapped into act(...):\\r\\n\\r\\n    act(() => {\\r\\n      /* fire events that update state */\\r\\n    });\\r\\n    /* assert on the output */\\r\\n\\r\\n    This ensures that you\'re testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act\\r\\n        in Query (at TicketTypes/index.js:19)\\r\\n        in TicketTypes (at TicketTypes/index.test.js:42)\\r\\n        in ApolloProvider (created by MockedProvider)\\r\\n        in MockedProvider (at TicketTypes/index.test.js:41)\\r\\n\\r\\n\\r\\nMy test case is:-\\r\\n\\r\\n```jsx\\r\\nimport React from \\"react\\"\\r\\nimport { shallow } from \\"enzyme\\"\\r\\n//import  { Templates }  from \\"./index\\"\\r\\nimport Adapter from \\"enzyme-adapter-react-16\\"\\r\\nimport { MockedProvider } from \\"@apollo/react-testing\\"\\r\\nimport { GET_TICKET_TYPE } from \\"./TicketTypesGraphQL\\"\\r\\nimport { TicketTypes } from \\"./index\\"\\r\\n//import  renderer  from \\"react-test-renderer\\"\\r\\nimport TestRenderer from \'react-test-renderer\';\\r\\nimport wait from \'waait\';\\r\\n\\r\\n  const mocks = [\\r\\n    {\\r\\n      request: { query: GET_TICKET_TYPE, variables: { isp_id: 877 } },\\r\\n      result: {\\r\\n        data: {\\r\\n          listOfTemplate: {\\r\\n            ticket_types : [\\r\\n              {\\r\\n                flag_default_print_notes: false,\\r\\n                flag_is_print_content: false,\\r\\n                flag_subscriber_report: false,\\r\\n                ticket_template: \\"<p>Sanity test</p>\\",\\r\\n                ticket_type_desc: \\"Connection\\",\\r\\n                ticket_type_id: 12563,\\r\\n              }\\r\\n            ]\\r\\n          },\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  ];\\r\\n\\r\\ndescribe(\\"TicketTypes\\", () => {\\r\\n  const ticketTypes = shallow(<TicketTypes />)\\r\\n\\r\\n  it(\\"should render loading state initially\\", async () => {\\r\\n    let component;\\r\\n    TestRenderer.act(() => {\\r\\n        component = TestRenderer.create(\\r\\n          <MockedProvider mocks={mocks} addTypename={false}>\\r\\n            <TicketTypes  />\\r\\n          </MockedProvider>,\\r\\n        );\\r\\n    });\\r\\n    await wait(0);\\r\\n    TestRenderer.act(() => {\\r\\n      const tree = component.toJSON();\\r\\n      console.log(\\"component ===========>\\", tree )\\r\\n    });\\r\\n  })\\r\\n})\\r\\n```\\r\\n\\r\\n","number":16580,"user":{"login":"vineet-agrawal96"},"state":"closed","created_at":"2019-08-27T08:17:44Z"},{"id":485638457,"title":"Uncaught TypeError: net.isIP is not a function","body":"I am getting below error.\\r\\ni am trying to send email with nodemailer with simple react application,  but getting below error.\\r\\n\\r\\nthis code works fine ,if i run simply as javascript file( node prog,js)\\r\\n\\r\\nindex.js:40 Uncaught TypeError: net.isIP is not a function\\r\\n    at Object.push../node_modules/nodemailer/lib/shared/index.js.module.exports.resolveHostname (index.js:40)\\r\\n    at SMTPConnection.connect (index.js:327)\\r\\n    at index.js:251\\r\\n    at index.js:73\\r\\n    at run (setImmediate.js:48)\\r\\n    at runIfPresent (setImmediate.js:83)\\r\\n    at onGlobalMessage (setImmediate.js:125)\\r\\n\\r\\n\\r\\nCode is:-\\r\\n\\r\\nexport default main;\\r\\nfunction main() {\\r\\n    let transporter = nodemailer.createTransport({\\r\\n        host: \'smtp.gmail.com\',\\r\\n        port: 587,\\r\\n        secure: false, \\r\\n        auth: {\\r\\n            user: \'Anything@gmail.com\', \\r\\n            pass: \'Anything@1\' \\r\\n        }\\r\\n    });\\r\\n    let info = transporter.sendMail({\\r\\n        from: \'\\"SMC \\" <Anything@gmail.com>\', // sender address\\r\\n        to: \'sender@gmail.com\', // list of receivers\\r\\n        subject: \'Hello \u2714\', // Subject line\\r\\n        text: \'Hello world? jhsgjkhjag ASGJHAGSUAH jasgjGS \', // plain text body\\r\\n       \\r\\n    });\\r\\n    return info; // HERE IT IS COMING AS UNDEFINED\\r\\n}\\r\\n\\r\\nPlease help me on this\\r\\n\\r\\n\\r\\n","number":16579,"user":{"login":"rk173238"},"state":"closed","created_at":"2019-08-27T07:35:50Z"},{"id":485586417,"title":"prevent firefox marking required textareas invalid","body":"Bug was caused by an IE10/IE11 bugfix dealing with the placeholder attribute and textContent. Solved by avoiding the IE bugfix when textContent was empty.\\r\\n\\r\\nCloses #16402 \\r\\n\\r\\n## Test Plan\\r\\n\\r\\nOpen up DOM test fixtures and compare (in Firefox)...\\r\\n\\r\\nlocal: http://screeching-degree.surge.sh/textareas\\r\\nto latest: http://screeching-degree.surge.sh/textareas?version=16.9.0\\r\\n\\r\\n...and verify that textareas are no longer marked invalid on load when required.\\r\\n\\r\\nAlso confirm that the original IE bugfix is still functioning as intended.","number":16578,"user":{"login":"halvves"},"state":"closed","created_at":"2019-08-27T05:09:36Z"},{"id":485556672,"title":"this.props not find form","body":"In my project using \\"typescript\\",\\"redux\\", I use it like this :\\r\\n\\r\\nexport interface EditManagementProps extends RouteComponentProps {\\r\\n    \\r\\n}\\r\\nexport interface EditManagementStates {\\r\\n    \\r\\n}\\r\\nexport class EditManagement extends React.Component<EditManagementProps, EditManagementStates> {\\r\\n    constructor(props: EditManagementProps, context?: any) {\\r\\n        super(props, context);\\r\\n        this.state = {\\r\\n        }\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        // const { getFieldDecorator } = this.props.form;\\r\\n            return (\\r\\n                <div className=\\"\\">\\r\\n                    <Form labelCol={{ span: 5 }} wrapperCol={{ span: 12 }}>\\r\\n                </Form> \\r\\n                </div>\\r\\n            );\\r\\n    }\\r\\n}\\r\\nconst WrappedApp = Form.create()(EditManagement)\\r\\nunction mapStateToProps(state: RootState) {\\r\\n    return {\\r\\n        projectData: state.projectData\\r\\n    };\\r\\n}\\r\\n\\r\\nfunction mapDispatchToProps(dispatch) {\\r\\n    return {\\r\\n        projectSaved: bindActionCreators(Actions.projectSave, dispatch)\\r\\n    };\\r\\n}\\r\\n\\r\\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedApp);\\r\\n\\r\\n\\r\\n\\r\\n**but I\'v got an error : \\"Property \'form\' does not exist on type \'Readonly<EditManagementProps> & Readonly<{ children?: ReactNode; }>\\"**\\r\\n\\r\\n\\r\\n","number":16577,"user":{"login":"xuehang1"},"state":"closed","created_at":"2019-08-27T03:06:24Z"},{"id":485531044,"title":"How do I use highlight update?","body":"After updating the version, I found that the previous `highlighting render` function had disappeared! Is there an alternative function? And how to use it\uff01","number":16576,"user":{"login":"TimbokY"},"state":"closed","created_at":"2019-08-27T01:23:51Z"},{"id":485496653,"title":"Change Babel spread transform from loose -> strict","body":"The spread syntax should work for typed arrays, e.g.\\r\\n```js\\r\\n\\r\\n```\\r\\n\\r\\nWhile importing DevTools, I noticed that some of the hydration tests were failing because the spread operator was returning unexpected values.\\r\\n```js\\r\\n[...new Uint8Array([1,2,3])]\\r\\n\\r\\n// rather than this\xa0[1, 2, 3]\\r\\n// it was returning this\xa0[[1, 2, 3]]\\r\\n```\\r\\n\\r\\nThis seems to be because of the way we\'ve configured the `@babel/plugin-transform-spread` \\"loose\\" mode. Docs say:\\r\\n> In loose mode, all iterables are assumed to be arrays.\\r\\n\\r\\nIn the case of DevTools though, we _know_ we are dealing with iterables that aren\'t necessarily arrays.\\r\\n\\r\\nHopefully we can change this transform without negatively impacting the build? Let\'s compare the output from CI and see if this does anything unexpected.","number":16575,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-26T23:07:41Z"},{"id":485432730,"title":"[Fresh] Don\'t ignore dependencies for render phase updates","body":"During a Fresh update, we ignore dependencies. We let the effects re-run, even if deps are `[]`, and free the memo\'d values.\\r\\n\\r\\nThis is important because it prevents us from referencing stale code. For example, if we edit top-level `computeExpensive`, we still want `useMemo(() => computeExpensive(), [])` to re-evaluate.\\r\\n\\r\\nSometimes this may cause problems, but arguably this points to other flaws in components or Hooks that should be fixed regardless.\\r\\n\\r\\n---\\r\\n\\r\\nThere is a failure case though. Generally, while components shouldn\u2019t *rely* on `useMemo` for semantics, there is still an expectation that memo chains can \u201csettle\u201d. For example, `useSubscription` does a render-phase update if its arguments differ from its state:\\r\\n\\r\\nhttps://github.com/facebook/react/blob/0da7bd0604a5be7f96572b9f75d16fef5674bc5d/packages/use-subscription/src/useSubscription.js#L42-L45\\r\\n\\r\\nIt has to rely on something like `useMemo` in the calling code to keep the source *eventually stable*.\\r\\n\\r\\n---\\r\\n\\r\\nThe problem with our current approach is that during a Fresh update, dependencies are ignored completely. So even with `useMemo`, things never truly \u201csettle\u201d. This breaks the pattern relied upon by `useSubscription`, and likely, other similar mechanisms.\\r\\n\\r\\nThe fix is to **only ignore dependencies during the first render after the patch**. By that point it has run, all memo\'d values have been recreated with fresh code. So it makes sense that we can turn off the cache busting flag for all subsequent render-phase updates of this component, thus letting it settle. This fixes the infinite loop in the regression test I\'ve added.","number":16574,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-26T20:23:26Z"},{"id":485401156,"title":"[react-hooks/exhaustive-deps] missed warning when passing a function","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nArguably a **bug** in eslint-plugin-react-hooks\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe exhaustive-deps rule does not catch the following case:\\r\\n\\r\\n```js\\r\\nconst FooContext = React.createContext(() => {});\\r\\n\\r\\n// Meanwhile, somewhere deep in the component tree\\r\\nfunction Bar() {\\r\\n  const foo = useContext(FooContext);\\r\\n  useEffect(foo, []);\\r\\n  return <div>A div walks into a Bar\u2026</div>;\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI think the plugin should suggest adding the dependency on `foo`:\\r\\n\\r\\n```js\\r\\nuseEffect(foo, [foo]);\\r\\n```\\r\\n\\r\\nIt already makes this suggestion for the verbose form of the code:\\r\\n\\r\\n```js\\r\\n// This code:\\r\\nuseEffect(() => foo(), []);\\r\\n// is fixed to:\\r\\nuseEffect(() => foo(), [foo]);\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- eslint@6.2.2\\r\\n- eslint-plugin-react-hooks@2.0.1\\r\\n- react@16.9.0","number":16573,"user":{"login":"whatisaphone"},"state":"open","created_at":"2019-08-26T19:19:58Z"},{"id":485333117,"title":"Remove duplicate character in regex group","body":"Single quote character (`\'`) was present 2 times in the same regex group.","number":16572,"user":{"login":"baspeeters"},"state":"closed","created_at":"2019-08-26T16:50:19Z"},{"id":485269035,"title":"WebComponents - DOM manipulation Exception for out-of-sync VDOM","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf a non-react WebComponent handles the children nodes by adding and removing elements from the DOM, it may lead to exception as the DOM is no more in sync with the VirtualDOM.\\r\\n\\r\\nFor example, if the WebComponent add an extra element in between the children and the webElement itself, when React tries to unmount the child (ReactComponent) it throws a DOM exception for:\\r\\n```\\r\\nFailed to execute \'removeChild\' on \'Node\': The node to be removed is not a child of this node.\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nDemo here: https://codesandbox.io/s/react-webcomponent-issue-e3qy6\\r\\nTo replicate the exception, just click on the Button.\\r\\n\\r\\n**Important key points are:**\\r\\n1. WebElement definition: on connect, it wraps all children in a red-block div (in Angular terms you would call this _\\"transclusion\\"_).\\r\\n```js\\r\\nclass CustomWebelement extends HTMLElement {\\r\\n  connectedCallback() {\\r\\n    const wrapper = document.createElement(\\"div\\");\\r\\n    wrapper.style.background = \\"red\\";\\r\\n    while (this.hasChildNodes()) {\\r\\n      wrapper.appendChild(this.firstChild);\\r\\n    }\\r\\n\\r\\n    this.appendChild(wrapper);\\r\\n  }\\r\\n}\\r\\n\\r\\ncustomElements.define(\\"custom-webelement\\", CustomWebelement);\\r\\n```\\r\\n\\r\\n2. Any (react) direct-child of the webelement that is dynamically removed throws exception. This is because the parent node of the component `<div>some nested content</div>` is the WebElement `<custom-webelement>` only in the VDOM, but effectively it is child of the red-div.\\r\\n```js\\r\\n<custom-webelement>\\r\\n  {visible && <div>some nested content</div>}\\r\\n\\r\\n  <button onClick={() => setState({ visible: !visible })}>\\r\\n    {visible ? \\"Visible\\" : \\"Hidden\\"}\\r\\n  </button>\\r\\n</custom-webelement>\\r\\n```\\r\\n\\r\\n3. If instead all children of the webElement (in the render function) were wrapped by any other HTML element, this won\'t cause any problem, since the parent element and child nodes are properly linked in the VDOM.\\r\\n```js\\r\\n<custom-webelement>\\r\\n  <div>\\r\\n    {visible && <div>some nested content</div>}\\r\\n\\r\\n    <button onClick={() => setState({ visible: !visible })}>\\r\\n      {visible ? \\"Visible\\" : \\"Hidden\\"}\\r\\n    </button>\\r\\n  </div>\\r\\n</custom-webelement>\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWebComponents are meant to provide View components that can run outside the React render-loop, so as a Developer I expect to use a webComponent written in any kind of JS framework with no exception.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nTested with React 16.8.6 on Chrome.","number":16571,"user":{"login":"indrimuska"},"state":"closed","created_at":"2019-08-26T14:32:54Z"},{"id":485163919,"title":"Minified React error #188","body":"I have an occasional problem today.\\r\\nInvariant Violation: Minified React error #188; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=188 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\\r\\nMy version of react is 16.2.0, So I want to know if this problem exists in this version.","number":16570,"user":{"login":"Weipengzhou"},"state":"closed","created_at":"2019-08-26T10:24:41Z"},{"id":485055860,"title":"Devtools V4: Breadcrumbs are removed?","body":"**Request for feature**\\r\\nThe older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn\'t find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?\\r\\n","number":16569,"user":{"login":"Anenth"},"state":"closed","created_at":"2019-08-26T05:50:40Z"},{"id":485028595,"title":"Error: \\"getCommitTree(): Unable to reconstruct tree for root \\"1\\" and commit 1\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.5-5441b09\\r\\n\\r\\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)\\r\\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:275512)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\\r\\n\\r\\nComponent stack: in bi\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16568,"user":{"login":"jonatanalava"},"state":"closed","created_at":"2019-08-26T03:49:43Z"},{"id":484975346,"title":"Does not work on Chrome 38","body":"Using webpack and babel, compiled with target set to chrome 38.\\r\\n\\r\\nPresets:\\r\\n```\\r\\n    [\\r\\n      \'@babel/preset-env\',\\r\\n      {\\r\\n        targets: {\\r\\n          chrome: \'38\',\\r\\n        },\\r\\n      },\\r\\n    ],\\r\\n    \'@babel/preset-react\',\\r\\n```\\r\\nand @babel/plugin-transform-runtime with corejs 3.\\r\\n\\r\\nThe project then **works** great on newest chrome version with no errors in console.\\r\\n\\r\\nBut when I run it on chrome 38 I get this error: \\r\\n```\\r\\nUncaught Invariant Violation: Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner, _store}). If you meant to render a collection of children, use an array instead. \\r\\n```\\r\\nin console.\\r\\n\\r\\nI checked, and all compiled js code is valid es5 code. What\'s going on?\\r\\n\\r\\n```\\r\\n\\"react\\": \\"^16.9.0\\",\\r\\n\\"react-dom\\": \\"^16.9.0\\",\\r\\n```","number":16567,"user":{"login":"Mykybo"},"state":"closed","created_at":"2019-08-25T21:00:34Z"},{"id":484952225,"title":"onMouseEnter event missing when component hides on top of another (i.e. contextual menu)","body":"I provide a codepen example showcasing the issue here,\\r\\nhttps://codepen.io/ivalduan/pen/VwZpmMQ\\r\\n\\r\\n1. The component on the screen tracks correctly a hover state of the mouse pointer\\r\\n2. With the right button you create a contextual menu without covering the text and the hover state is correct when the mouse is over the menu\\r\\n3. When you select and option of the contextual menu on top of the background component the second does not receive an onMouseEnter event and the hover state remains false when it should be true","number":16566,"user":{"login":"ivalduan"},"state":"closed","created_at":"2019-08-25T16:56:06Z"},{"id":484919288,"title":"createElement() decorators.","body":"Please, let\'s consider the following change. So far it\'s just a proof of concept, I\'ll do all other necessary steps (tests, typings, docs) if it has a chance to land.\\r\\n\\r\\nI\'ve seen people monkey-patching `React.createElement()` from their frameworks before. I need to monkey-patch it myself now in order to be able to automatically add some accessibility related attributes (which in my case are needed in the majority of DOM elements, could be added automatically, so adding them manually and teaching every dev on the project to add them is too much of a hustle). Some might suggest using custom jsxFactory in the project\'s config, which is a semi-option, it requires to import that custom `createElement` in all 100500 tsx files of the project and educate all the devs about it. And it won\'t help with the components which are built without JSX.\\r\\n\\r\\nSo, I\'d like to be able to augment `React.createElement()` in a convenient way (you import a module, call a setup function \u2014 and it\'s working). And monkey-patching currently gives that convenience, but it\'s a hack and it\'s not future-proof (`React.createElement` might become read-only in some environment).\\r\\n\\r\\nI propose to add Decorators API. The example of which is reflected in this PR\'s code change. The way of defining a decorator is similar to how Python decorators are being defined. Plus a few methods to add/remove them. And the `React.Decorators` namespace could also be extended with some methods like `React.Decorators.disable()` (so that people are able to have that API consumption under their control from the application code).\\r\\n\\r\\nA code example (inside of my module\'s setup function):\\r\\n\\r\\n```js\\r\\nReact.Decorators.createElement.add(function(createElement) {\\r\\n    // createElement is a reference to the parent createElement\\r\\n    // (can be already decorated by something else).\\r\\n\\r\\n    // Should return a function with the same signature as the original createElement().\\r\\n    return function(type, config, children) {\\r\\n        if (type === \'h1\') {\\r\\n            arguments[0] = \'h6\'; // Instead of all h1\'s create h6\'s (just an example).\\r\\n        }\\r\\n        return createElement.apply(this, arguments);\\r\\n    };\\r\\n});\\r\\n```\\r\\n\\r\\nWhat do you think?","number":16565,"user":{"login":"mshoho"},"state":"closed","created_at":"2019-08-25T11:16:34Z"},{"id":484778506,"title":"Firefox browser console opens randomly blank after installing react dev tools","body":"Hi,\\r\\n\\r\\nFirefox v68.0.2\\r\\nReact dev tools: latest version\\r\\n\\r\\nAfter disabling React dev tools same tab works as expected.\\r\\n\\r\\np.s: this happens mostly on non-react tabs.\\r\\n\\r\\nI just started using react dev tools and I don\'t know about prev version of Firefox or React dev tools btw.","number":16564,"user":{"login":"dehghani-mehdi"},"state":"closed","created_at":"2019-08-24T04:50:05Z"},{"id":484772825,"title":"Embedding Creative Commons License on a React.js application","body":"Hello, I\'m getting this error when I embed a Creative Commons Licence on my React.js application:\\r\\n\\r\\n> SyntaxError: D:\\\\Node.js Projects\\\\React Apps\\\\Project Name\\\\components\\\\ComponentName.js: Namespace tags are not supported by default. React\'s JSX doesn\'t support namespace tags. You can turn on the \'throwIfNamespace\' flag to bypass this warning.\\r\\n```\\r\\n  28 |           </a>\\r\\n  29 |           <br />\\r\\n> 30 |           <span xmlns:dct=\\"http://purl.org/dc/terms/\\" property=\\"dct:title\\">\\r\\n     |                 ^\\r\\n```\\r\\n\\r\\nYou can generate your Creative Commons Licence\' HTML code at: https://creativecommons.org/choose/\\r\\n\\r\\nI already tried to replace `xmlns:dct` with `xmlnsDct` and the other namespace tags with their `camelCase` forms but that just caused another problem making `xmlnsDct` and the others non-valid properties.\\r\\n\\r\\nAny solution for this?","number":16563,"user":{"login":"5ervant"},"state":"closed","created_at":"2019-08-24T03:25:30Z"},{"id":484662878,"title":"DevTools: TypeError: Cannot read property \'0\' of null","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen using the latest Dev tools (v4.0.5) on my project, when I inspect react-redux elements that use connect() devtools crashes. I can\'t map from my crash to the actual source but the code is react devtools: build/backend.js\\r\\n```\\r\\n useMemo: function(e, t) {\\r\\n            var n = w()\\r\\n              , r = null !== n ? n.memoizedState[0] : e(); // <-- here n exists, but n.memoizedState itself is null\\r\\n            return v.push({\\r\\n                primitive: \\"Memo\\",\\r\\n                stackError: new Error,\\r\\n                value: r\\r\\n            }),\\r\\n            r\\r\\n        },\\r\\n```\\r\\n\\r\\nup one level of stack is react: \\r\\n```\\r\\nfunction useMemo(create, inputs) {\\r\\n  var dispatcher = resolveDispatcher();\\r\\n  return dispatcher.useMemo(create, inputs);\\r\\n}\\r\\n```\\r\\n\\r\\nand up one level is react-redux: (https://github.com/reduxjs/react-redux/blob/master/src/components/connectAdvanced.js#L199)\\r\\n```\\r\\nconst childPropsSelector = useMemo(() => {\\r\\n        // The child props selector needs the store reference as an input.\\r\\n        // Re-create this selector whenever the store changes.\\r\\n        return createChildSelector(store)\\r\\n      }, [store])\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI\'ll have to try and make a small repro, but I hope there\'s something obvious given the info above. It\'s not clear to me if react-redux is doing something or if its devtools. This behavior existed in v3 and i was hoping it\'d get magically fixed with v4 but it remains.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThis is in an electron app w/ react-redux v7.1.0 and react v16.8.3 (have to use this due to the version of react native i\'m on)\\r\\n","number":16562,"user":{"login":"chrisnojima"},"state":"closed","created_at":"2019-08-23T18:43:03Z"},{"id":484627473,"title":"chore(ReactFiberWorkLoop): rephrase comment","body":"Minor tweak.","number":16561,"user":{"login":"jamesgeorge007"},"state":"closed","created_at":"2019-08-23T17:06:32Z"},{"id":484627268,"title":"chore(ReactFiberWorkLoop): fix typo","body":"fixed minor typo.","number":16560,"user":{"login":"jamesgeorge007"},"state":"closed","created_at":"2019-08-23T17:05:55Z"},{"id":484599404,"title":"chore(ReactThreadIdAllocator): rephrase comment","body":"`tightly packed array` sounds much better :smile: \\r\\n\\r\\n> sidenote: Google search would suggest the respective phrase instead","number":16559,"user":{"login":"jamesgeorge007"},"state":"closed","created_at":"2019-08-23T15:52:14Z"},{"id":484593900,"title":"Have useDebugValue return the value it\'s passed","body":"**Do you want to request a *feature* or report a *bug*?** Feature\\r\\n\\r\\n**What is the current behavior?** Currently, `useDebugValue` returns nothing. This means the debug value must be extracted to a local variable if it is also to be returned or passed to another function.\\r\\n\\r\\n**What is the desired behavior?** Change the function to return its first argument, instead of nothing.\\r\\n\\r\\n```typescript\\r\\nfunction useDebugValue<T>(value: T, format?: (value: T) => any): T;\\r\\n```\\r\\n\\r\\nThis will make it really lightweight for library hooks to provide good debugging experiences.\\r\\n\\r\\nIt\'s worth noting that the `dbg!` macro in Rust [does the same thing](https://doc.rust-lang.org/std/macro.dbg.html).","number":16558,"user":{"login":"TedDriggs"},"state":"closed","created_at":"2019-08-23T15:39:30Z"},{"id":484592246,"title":"Version 4 removed files location","body":"**This technically is a _feature_, a missing one from version 3**.\\r\\n\\r\\nOn version 3 you could visualize files locations which was key in finding bugs, me and my team are currently struggling due to this removed feature on version 4.\\r\\n\\r\\nYou should fix this ASAP as it costs a lot of time now.","number":16557,"user":{"login":"HugoSnow"},"state":"closed","created_at":"2019-08-23T15:35:38Z"},{"id":484579829,"title":"React DevTools not persisting settings","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nDevTools extension does not persist state. For example, the \u201cWelcome\u201d dialog displays upon every refresh.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n1. Open React DevTools in a React app.\\r\\n2. Change DevTools settings.\\r\\n3. Refresh app in browser. \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSettings should be changed. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis is in a corporate install of Chrome 71. It\u2019s possible that it blocks whichever persistence API React DevTools is using (Chrome DevTools itself persists settings successfully).\\r\\n","number":16556,"user":{"login":"brianblakely"},"state":"closed","created_at":"2019-08-23T15:08:58Z"},{"id":484546823,"title":"Add trusted types to react on server side","body":"## Trusted Types\\r\\n[Trusted Types](https://github.com/WICG/trusted-types) ([spec](https://wicg.github.io/trusted-types/dist/spec/), [introductory article](https://developers.google.com/web/updates/2019/02/trusted-types)) is a new experimental DOM API implemented within the WICG , with a working [Chrome implementation](https://www.chromestatus.com/feature/5650088592408576).\\r\\n\\r\\nThe API creates a few new objects available on the global object in the browser, like most other web APIs ([impl in TS](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts) and in [Closure compiler](https://github.com/WICG/trusted-types/blob/master/externs/externs.js)).\\r\\n\\r\\nUnder certain conditions, controlled by a HTTP header (analogous to Content-Security-Policy behavior), the API can enable the enforcement - then it changes the signature of several DOM API functions and property setters, such that they accept specific object types, and reject strings. Colloquially, DOM API becomes strongly typed.\\r\\n\\r\\nFor example, with Trusted Types Element.innerHTML property setter accepts a TrustedHTML object.\\r\\n\\r\\nTrusted Type objects stringify to their inner value. This API shape is a deliberate choice that enables existing web applications and libraries to gradually migrate from strings to Trusted Types without breaking functionality. In our example, it makes it possible to write the following:\\r\\n\\r\\n```javascript\\r\\nconst policy = TrustedTypes.createPolicy(\'foo\', { \\r\\n  createHTML: (s) => { /* some validation*/; return s} \\r\\n});\\r\\n\\r\\nconst trustedHTML = policy.createHTML(\'bar\');\\r\\nanElement.innerHTML = trustedHTML\\r\\n\\r\\nanElement.innerHTML === \'bar\'\\r\\n```\\r\\n\\r\\nThe above code works regardless if the Trusted Types enforcement is enabled or not.\\r\\n\\r\\nReading from the DOM is unaffected, so Element.innerHTML getter returns a string. That\'s for practical reasons -- web applications read from DOM more often than they write to it, and only writing exposes the application to DOM XSS risks. Typing only the setters allows us to secure web applications with minimal code changes.\\r\\n\\r\\n## Adding Trusted Types to React for server side\\r\\nUnfortunately, there are no Trusted Types (TT) on server side. However, it\u2019s really easy to introduce a reflected xss attack via server side rendering. Markup rendered on server side is rendered to string (without any DOM emulation) and returned as a response from the server and there is no way TT can prevent this attack. This creates inconsistency when rendering on client and server side (client side would fail with TT violation), which shouldn\u2019t happen. Also, if application uses hot reloading, you will get a TT error after each reload (because React templates are re-rendered to DOM, this time on client).\\r\\n\\r\\nThis PR enables applications to use Trusted Types on server side. Functions inside [ReactDOMNodeStreamRenderer.js](https://github.com/facebook/react/blob/fc807720780962729df2ad1b0f53258603c020c7/packages/react-dom/src/server/ReactDOMStringRenderer.js) and [ReactDOMStringRenderer.js](https://github.com/facebook/react/blob/fc807720780962729df2ad1b0f53258603c020c7/packages/react-dom/src/server/ReactDOMNodeStreamRenderer.js) in react-dom/server package now accept optional third parameter with [trusted types polyfill implementation](https://github.com/WICG/trusted-types). If TT are provided, they are enforced, **otherwise no behavioral change is made**. If TT are enforced, we check whether the values are trusted before creating the markup from them and throw an error otherwise.   \\r\\n\\r\\n## Reference\\r\\n* [Add trusted types to react on client side](https://github.com/facebook/react/pull/16157)\\r\\n","number":16555,"user":{"login":"Siegrift"},"state":"open","created_at":"2019-08-23T14:01:19Z"},{"id":484540050,"title":"Input type=\\"number\\" fields don\'t call onChange","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\n\\r\\n`<input type=\\"number\\">` fields do not call onChange, and ignore their controlled value if text is entered into them.  Upon a number being entered, they start to use onChange correctly.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIn the following example, either the input should not allow non-numeric values at all OR it should call onChange on every value change.  Instead, typing any alphabetic character is rendered in the input, but onChange is not called\\r\\nhttps://codesandbox.io/s/serverless-morning-ct2ss\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nUnsure","number":16554,"user":{"login":"CluEleSsUK"},"state":"closed","created_at":"2019-08-23T13:47:19Z"},{"id":484539820,"title":"Is there a way to infer state out of the component? (TS)","body":"Hi, there!\\r\\n\\r\\nWriting a function that can wrap my component with props and state passed in to help with component isolation when testing.\\r\\n\\r\\nCurrent progress (questions in the code):\\r\\n\\r\\n```ts\\r\\nimport React, { ComponentProps, ComponentClass, ComponentState } from \'react\';\\r\\nimport { shallow } from \'enzyme\';\\r\\nimport { Todo, State } from \'../Todo\';\\r\\n\\r\\nfunction createSubject<S extends ComponentState>() {\\r\\n  return function withComponent<C extends ComponentClass<P, S>, P = ComponentProps<C>>(InputComponent: C) {\\r\\n    return function withSubject(props?: P, state?: Partial<S>) {\\r\\n      const wrapper = shallow(<InputComponent {...props} />);\\r\\n\\r\\n      if (state)\\r\\n        wrapper.setState(state);\\r\\n\\r\\n      return wrapper;\\r\\n    };\\r\\n  };\\r\\n}\\r\\n\\r\\n// can I somehow infer the state from the component without having to pass the interface like that?\\r\\n// bonus: how can I omit the first function call here?\\r\\nconst subject = createSubject<State>()(Todo); \\r\\n\\r\\ndescribe(\'<Todo />\', () => {\\r\\n  it(\'some test\', () => {\\r\\n    const component = subject({\\r\\n      todos: [], // I have help from ts\\r\\n    }, {\\r\\n      active: false // I have help from ts, but it\'s using hack right now\\r\\n    });\\r\\n  });\\r\\n});\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\nThanks in advance! :heart: ","number":16553,"user":{"login":"viktor-ku"},"state":"closed","created_at":"2019-08-23T13:46:52Z"},{"id":484535653,"title":"You need to enable JavaScript to run this app","body":"Hello every body I have a react page that was working pretty well but from nothing it started to appear this error \\"You need to enable JavaScript to run this app.\\"\\r\\n\\r\\n\\r\\n\\"react\\": \\"^16.8.4\\",","number":16552,"user":{"login":"dev-intellisoft"},"state":"closed","created_at":"2019-08-23T13:38:07Z"},{"id":484452512,"title":"Error: \\"Could not find node with id \\"339\\" in commit tree\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.5-5441b09\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11441\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11387)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11920)\\r\\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:277765)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98280)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n\\r\\nComponent stack: in xi\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16551,"user":{"login":"Wenhan129"},"state":"closed","created_at":"2019-08-23T10:18:20Z"},{"id":484304478,"title":"Devtools scrollbar hides flamegraph","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nscrollbar is covering flamegraph\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\ncurrent\\r\\n![current](https://user-images.githubusercontent.com/3931792/63563638-b09a8f00-c59c-11e9-95fc-627dcea023b6.png)\\r\\n\\r\\nwithout scrollbar, there is more graphs hidden by scrollbar\\r\\n![without scrollbar](https://user-images.githubusercontent.com/3931792/63563645-b8f2ca00-c59c-11e9-917e-8c63be90cb2d.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nscrollbar does not cover flame graph or if flamegraph\'s height is long enough to use scrollbar, flamegraph container\'s width should shrink about scrollbars width \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.9 / chrome 78.0.3887.7 / macOS 10.14.6 /  \\r\\n","number":16550,"user":{"login":"Curzy"},"state":"open","created_at":"2019-08-23T02:55:42Z"},{"id":484234990,"title":"Is it possible to write a script to inject props on a component?","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nRequest a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nUnknown\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nSo this is a little crazy. There\'s a web app that I use that is built with React, which has made certain design decisions that I disagree with. The design is actually simple to change exactly the way I want by just opening the chrome devtools and changing the props assigned to a specific component. But I don\'t want to manually do this every time, that\'s not worth it. I want to write a (super hacky) personal script that automatically modifies the props being passed to this component. Wondering if anyone knows a simple hack for this.","number":16549,"user":{"login":"suddjian"},"state":"closed","created_at":"2019-08-22T21:54:24Z"},{"id":484103767,"title":"Devtools: Impossible to debug firefox webextension moz-extension: pages due to strict CSP","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n* feature request\\r\\n* Original issue is: https://github.com/facebook/react-devtools/issues/922\\r\\n   * There are more details.\\r\\n* Mozilla\'s Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1573027\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe react-devtools toolbar button does not light up and clicking on it says \\"This page does not appear to be using react\\". This is probably since extensions are not allowed to inject scripts into other extensions\' pages.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe react-devtools toolbar button should light up and the addon should be able to debug the page\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis is still reproducible\\r\\n\\r\\n* Firefox v68~\\r\\n* react devtools v4.0.5\\r\\n* react v16.9\\r\\n","number":16548,"user":{"login":"saneyuki"},"state":"closed","created_at":"2019-08-22T16:46:40Z"},{"id":484101954,"title":"Devtools v4 does not work with Firefox\'s private window","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n* bug\\r\\n* This issue has been reported in https://github.com/facebook/react-devtools/issues/1383\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n\\r\\nSteps to Reproduce is here:\\r\\n\\r\\n1. Environments are:\\r\\n2. Open the page which uses react with a private window.\\r\\n3. Open Firefox\'s devtools.\\r\\n\\r\\nActual Result is:\\r\\n\\r\\n* react devtools\' _component_ pane show `Unable to find React on the page.`\\r\\n* From about:debugging, we can see the below messsage:\\r\\n\\r\\n```\\r\\nSecurityError: Permission denied to access property \\"container\\" on cross-origin object main.js:51:305877\\r\\n    Kl moz-extension://56db142d-3d36-b04e-91ca-a7504c7708a5/build/main.js:51\\r\\n    apply self-hosted:4417\\r\\n    applySafeWithoutClone resource://gre/modules/ExtensionCommon.jsm:588\\r\\n    asyncWithoutClone resource://gre/modules/ExtensionCommon.jsm:2400\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nreact devtools work\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n* Firefox 68\\r\\n* react devtools v4.0.5\\r\\n* react v16.9","number":16547,"user":{"login":"saneyuki"},"state":"open","created_at":"2019-08-22T16:42:22Z"},{"id":484101282,"title":"[react-events] Fix middle-click for Press","body":"Browsers always report \'buttons\' as 0 when a pointer is released.","number":16546,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-22T16:40:44Z"},{"id":484034081,"title":"Show property type of value (string,int,etc) on state/props.","body":"**feature**\\r\\n\\r\\n**What is the current behavior?**\\r\\nOn the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: \\"1\\" (string) or id: 1 (int)). Both string and int are shown without quotes.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI want to see if the value inside the prop or state is an string or integer by using quotation marks on the value.\\r\\n`id: \\"1\\"`\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nI\'m using version:\\r\\n4.0.5 (8/19/2019)\\r\\n\\r\\nDid this work in previous versions of React?\\r\\nYes, 3.*","number":16545,"user":{"login":"gydotitulaer"},"state":"closed","created_at":"2019-08-22T14:37:38Z"},{"id":484026772,"title":"[feedback] Hooks and timeout Id","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeedback on hooks adoption\\r\\n\\r\\n**What is the current behavior?**\\r\\nbefore react hooks, I sometimes used instance properties to store some data irrelevant for the render function. A good example would be a timeoutId, could be for some custom debouncing.\\r\\n\\r\\n    class SomeComponent extends React.PureComponent {\\r\\n      handleSomething() {\\r\\n        clearTimeout(this.timeoutId);\\r\\n        this.timeoutId = setTimeout(() => {\\r\\n          // do something\\r\\n        }, 1000);\\r\\n      }\\r\\n      // ...\\r\\n    }\\r\\n\\r\\nNow I don\'t have `this` anymore. I don\'t see how to have a timeoutId for each component instance except using `useState`:\\r\\n\\r\\n    const SomeComponent = () => {\\r\\n      const [timeoutId, setTimeoutId] = useState(null);\\r\\n      const handleSomething = () => {\\r\\n        clearTimeout(timeoutId);\\r\\n        setTimeoutId(setTimeout(() => {\\r\\n          // do something\\r\\n        }, 1000));\\r\\n      }\\r\\n      // ...\\r\\n    };\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIn the last example using state to store the timeoutId feels wrong because I\'m triggering a re-render (I think) but `timeoutId` is irrelevant for the rendering step.\\r\\nI feel like I should store it elsewhere but where ?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8+\\r\\n\\r\\n----\\r\\n\\r\\nThe title is specific to my issue but it is a generic problem, everywhere I used to have instance member I\'m now forced to put everything in states.","number":16544,"user":{"login":"VincentCharpentier"},"state":"closed","created_at":"2019-08-22T14:24:42Z"},{"id":484004399,"title":"Only warn in case the fourth argument is a function","body":"Ref. #16526.\\r\\n\\r\\nAs per @gaearon \'s suggestion, this PR scope down the warning to just the case when second argument is a function.\\r\\n","number":16543,"user":{"login":"brunoscopelliti"},"state":"closed","created_at":"2019-08-22T13:45:20Z"},{"id":483983229,"title":"[Scheduler] Profiler Features (second try)","body":"This is a revert of a revert of #16145 + my attempts to fix its issues.\\r\\nYou need to read individual commits.\\r\\n\\r\\nThe main fix has already landed independently in https://github.com/facebook/react/pull/16407.\\r\\n\\r\\nHowever, there were a few more issues in #16145 that I\'m fixing in this PR:\\r\\n\\r\\n* Bad copy paste for re-exports (fixed in https://github.com/facebook/react/commit/935526e121add025ff74df8f7dde06de27bf7c2e)\\r\\n* Init time dependency on ArrayBuffer which would break IE9 (fixed in ee548c3cc17dc58c000cf6b13278c4b08642050f)\\r\\n* Potential deopt for tasks due to adding a field later (fixed in 9c30b0b695d81e9c43b296ab93d895e4416ef713)\\r\\n\\r\\nThere is a bigger conceptual issue though that I\'m struggling with.\\r\\n\\r\\n(Feel free to skip these details)\\r\\n\\r\\n<details>\\r\\n\\r\\n#16145 added a bunch of `pop()` calls \u2014 for example, when a task errors or get cancelled. My understanding is that this was done as an optimization. I.e. we don\'t need to schedule another loop if there\'s no actual tasks in the loop left.\\r\\n\\r\\nThat optimization doesn\'t seem like it would cover all cases. For example, if we have tasks [A, B, C], and then cancel C, B, and A in sequence, only A would be popped (because it\'s the first item). So this optimization seems \\"optional\\" and not something we can rely on.\\r\\n\\r\\nHowever, the tests *do* rely on this optimization being present.\\r\\nWithout it, the \\"main thread\\" bar never stops:\\r\\n\\r\\n```\\r\\n Scheduler \u203a marks when a task is canceled\\r\\n\\r\\n   !!! Main thread              \u2502      \u2588\u2588\\r\\n    Task 1 [Normal]              \u2502\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\ud83e\udc50 canceled\\r\\n    \\"\\r\\n    Received:\\r\\n      \\"\\r\\n    !!! Main thread              \u2502      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\r\\n    Task 1 [Normal]              \u2502\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\ud83e\udc50 canceled\\r\\n\\r\\n\\r\\nScheduler \u203a marks when a task errors\\r\\n\\r\\n    Expected value to equal:\\r\\n      \\"\\r\\n    !!! Main thread              \u2502\\r\\n    Task 1 [Normal]              \u2502\u2588\u2588\u2588\u2588\u2588\u2588\ud83e\udc50 errored\\r\\n    \\"\\r\\n    Received:\\r\\n      \\"\\r\\n    !!! Main thread              \u2502        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\r\\n    Task 1 [Normal]              \u2502\u2588\u2588\u2588\u2588\u2588\u2588\ud83e\udc50 errored\\r\\n    \\"\\r\\n\\r\\nScheduler \u203a marks when multiple tasks are canceled\\r\\n\\r\\n    Expected value to equal:\\r\\n      \\"\\r\\n    !!! Main thread              \u2502      \u2588\u2588\\r\\n    Task 1 [Normal]              \u2502\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\ud83e\udc50 canceled\\r\\n    Task 2 [Normal]              \u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\ud83e\udc50 canceled\\r\\n    \\"\\r\\n    Received:\\r\\n      \\"\\r\\n    !!! Main thread              \u2502      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\r\\n    Task 1 [Normal]              \u2502\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\ud83e\udc50 canceled\\r\\n    Task 2 [Normal]              \u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\ud83e\udc50 canceled\\r\\n    \\"\\r\\n```\\r\\n\\r\\nI don\'t know how to interpret this.\\r\\n\\r\\nIs this optimization essential for profiler\'s _correctness_? In that case it seems dodgy that depending on the order in which you cancel callbacks, it would either work or not.\\r\\n\\r\\nOr is this optimization purely an optimization? Are the test asserting on implementation details too aggressive? Why does the \\"Main Thread\\" bar never stop? Or are we missing a \\"suspended\\" event that should have happened in that case?\\r\\n\\r\\nFinally, the logic to determine whether we \\"suspended\\" or \\"resumed\\" seems fragile to me. I don\'t know for sure what those terms are supposed to mean. For example, if a callback errors, did we \\"suspend\\"? It seems like no from the code, but I don\'t know why. Conceptually, I\'d think of an \\"error\\" as \\"suspending\\" the scheduler loop. Unless \\"suspend\\" means something else here.\\r\\n\\r\\nMy last commit just removes the \\"optimization\\" (9a6440440ef9b0100579d70abfb1c51592922bfb). **It breaks some tests but I can\'t move further without understanding their intent.** Is it the code, the assertions, or the test setup that needs to change?\\r\\n\\r\\nWas this more than an optimization? I\'ll leave it at that so someone else can pick it up. :-)\\r\\n\\r\\n</details>\\r\\n\\r\\nI chatted to Boone, and arrived at a solution that satisfies both of us. Basically, I wasn\'t sure what Suspended and Resumed events mean. Boone told me it\'s okay to treat them as \\"exit the loop\\" and \\"enter the loop\\".\\r\\n\\r\\nSo in the next commits I did the following:\\r\\n\\r\\n* Removed the `pop()` optimization that affected non-profiling paths to reduce the risk. (9a6440440ef9b0100579d70abfb1c51592922bfb)\\r\\n  - This broke tests because they seemed to assert on implementation details\\r\\n* Strengthened tests to explicitly treat Suspend and Resumed as \\"exit\\" and \\"enter\\", and added assertions for that (8482f5de03f1621d6025bc0cf87da3d565c2f979)\\r\\n  - This further broke tests because we didn\'t always emit these events in pairs\\r\\n- Finally, made Suspended and Resumed match 1:1 to \\"exiting\\" and \\"entering\\" the flush (1f5f7df068a52aeb180797aa21dea1aef0329781)\\r\\n  - I had to amend tests to match this new behavior. These changes make sense to me. We now flag \\"main thread\\" time as anything not spent in the Scheduler.\\r\\n\\r\\n","number":16542,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-22T13:05:49Z"},{"id":483964734,"title":"DevTools: Ability to save inspected values as global variable (as it was in previous version)","body":"Hi, I really like new dev tools (4.0.5), but I would like to request one useful feature.\\r\\n\\r\\nIn previous version it was possible to save inspected value (prop/state/context) and its parts as a global variable using context menu->store as global variable, so it can be easily be accessed through console using `$tmp{n}`. In current version this is behaviour was replaced be creating new \\"bug\\" button which will just print all values in console. Unfortunately it\'s hard to navigate through this object, because $_ in console will return undefined. And in order to access it you need to expand group, find desired property and open context menu->store as global variable. \\r\\nIt would be perfect if you combine these 2 approaches so it would be possible to both print values using \\"bug\\" button and opening context menu directly in react dev tools panel wihtout need of intermediate step. \\r\\n\\r\\nThanks! \\r\\n\\r\\n","number":16541,"user":{"login":"AkhmedovValikhan"},"state":"closed","created_at":"2019-08-22T12:29:14Z"},{"id":483931508,"title":"[react-events] Ensure updateEventListeners updates in commit phase","body":"This is a follow up to the comment @sebmarkbage pointed out in https://github.com/facebook/react/pull/16532#issuecomment-523673963. Notably, we should only be updating EventResponder instances in the commit phase. EventResponder instances should continue to mount in the complete phase.\\r\\n\\r\\nI also managed to resolve the issue that prevented us from moving the event fiber logic into the `ReactFiberEvents` file, as that logic is now shared between the complete and commit phase files.","number":16540,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-22T11:14:42Z"},{"id":483881468,"title":"Getting error when import component  to write unit test cases.","body":"I\'m trying to write unit test case using jest and enzyme. but when i\'m importing a component then i\'m facing a issue. I\'m writing test case for following component:- \\r\\n\\r\\n```jsx\\r\\nimport React, { PureComponent } from \\"react\\"\\r\\nimport PropTypes from \\"prop-types\\"\\r\\nimport { connect } from \\"react-redux\\"\\r\\nimport {\\r\\n   List,\\r\\n   ListItem,\\r\\n   ListItemSecondaryAction,\\r\\n   ListItemText,\\r\\n   Typography\\r\\n} from \\"@material-ui/core\\"\\r\\n\\r\\nimport DeleteIcon from \\"@material-ui/icons/Delete\\"\\r\\nimport AddCircleIcon from \\"@material-ui/icons/AddCircle\\"\\r\\nimport { withStyles } from \\"@material-ui/core/styles\\"\\r\\nimport { showSnackbar } from \\"pages/App/AppActions\\"\\r\\nimport RenderTicketForm from \\"../TicketForm\\"\\r\\nimport ConfirmationAlertDialog from \\"../../common/ConfirmationAlertDialog\\"\\r\\nimport client from \\"config/apollo\\"\\r\\nimport {\\r\\n   GET_TICKET_TYPE,\\r\\n   DELETE_TICKET_TEMPLATE\\r\\n} from \\"../../TicketTypesGraphQL\\"\\r\\nimport IconButton from \\"@material-ui/core/IconButton\\"\\r\\nimport { filter } from \\"lodash\\"\\r\\nimport { customStyles } from \\"../../common/Styles\\"\\r\\nimport Grid from \'@material-ui/core/Grid\';\\r\\n\\r\\nconst initialValues = {\\r\\n   ticket_type_desc: \\"\\",\\r\\n   ticket_template: \\"\\",\\r\\n   flag_default_print_notes: false,\\r\\n   flag_is_print_content: false,\\r\\n   flag_subscriber_report: false\\r\\n}\\r\\n\\r\\nconst propTypes = {\\r\\n   ispId: PropTypes.number.isRequired,\\r\\n   classes: PropTypes.object.isRequired,\\r\\n   defaultSelectedTemplate: PropTypes.object.isRequired,\\r\\n   showSnackbar: PropTypes.func\\r\\n}\\r\\n\\r\\n class Templates extends PureComponent {\\r\\n   state = {\\r\\n      selectedTicketId: this.props.defaultTemplateId,\\r\\n      selectedTicketTemplate: this.props.defaultSelectedTemplate,\\r\\n      list: this.props.list,\\r\\n      isOpen: false,\\r\\n      selectItemIdToDelete: 0\\r\\n   }\\r\\n\\r\\n   addNewTemplate = () => {\\r\\n      this.setState({\\r\\n         selectedTicketId: 0,\\r\\n         selectedTicketTemplate: initialValues\\r\\n      })\\r\\n   }\\r\\n\\r\\n   handleUpdateTemplate = (item, list) => {\\r\\n      this.setState({ list })\\r\\n      this.onSelectTemplate(item)\\r\\n   }\\r\\n\\r\\n   onSelectTemplate = item => {\\r\\n      const {\\r\\n         flag_default_print_notes,\\r\\n         flag_is_print_content,\\r\\n         ticket_template,\\r\\n         ticket_type_desc,\\r\\n         ticket_type_id,\\r\\n         flag_subscriber_report\\r\\n      } = item\\r\\n      this.setState({\\r\\n         selectedTicketId: ticket_type_id,\\r\\n         selectedTicketTemplate: {\\r\\n            flag_default_print_notes,\\r\\n            flag_is_print_content,\\r\\n            ticket_template,\\r\\n            ticket_type_desc,\\r\\n            flag_subscriber_report\\r\\n         }\\r\\n      })\\r\\n   }\\r\\n\\r\\n   handleDeleteTicket = item => {\\r\\n      const { isOpen } = this.state\\r\\n      this.setState({\\r\\n         isOpen: !isOpen,\\r\\n         selectItemIdToDelete: item.ticket_type_id\\r\\n      })\\r\\n   }\\r\\n\\r\\n   renderListItem = (item, index) => {\\r\\n      const { classes } = this.props\\r\\n      const { selectedTicketId } = this.state\\r\\n      const isSelected =\\r\\n         selectedTicketId === item.ticket_type_id\\r\\n            ? \\" listItems activecls\\"\\r\\n            : \\"listItems\\"\\r\\n      return (\\r\\n         <ListItem\\r\\n            key={item + index}\\r\\n            dense\\r\\n            button\\r\\n            className={isSelected}\\r\\n            onClick={e => this.onSelectTemplate(item, index)}\\r\\n         >\\r\\n            <ListItemText primary={`${item.ticket_type_desc}`} className={classes.textEllipsis} />\\r\\n            <ListItemSecondaryAction className={classes.listAction}>\\r\\n               <DeleteIcon\\r\\n                  className={\\"material-icons mr-3 \\" + classes.delIcon}\\r\\n                  onClick={() => this.handleDeleteTicket(item)}\\r\\n               />\\r\\n            </ListItemSecondaryAction>\\r\\n         </ListItem>\\r\\n      )\\r\\n   }\\r\\n\\r\\n   renderAddCircleIcon = () => {\\r\\n      const { classes } = this.props\\r\\n      // console.log(\\"renderAddCircleIcon\\", this.state)\\r\\n      const { selectedTicketId } = this.state\\r\\n      const isDisable = selectedTicketId === 0 ? true : false\\r\\n      return (\\r\\n         <div className={classes.bottomBorder + \\" w-100\\"}>\\r\\n            <IconButton\\r\\n               onClick={this.addNewTemplate}\\r\\n               className={classes.addTemplate + \\" d-flex justify-content-start\\"}\\r\\n               disabled={isDisable}\\r\\n            >\\r\\n               <AddCircleIcon className={classes.addIcon + \\" mr-2\\"} />\\r\\n               <Typography variant=\\"h6\\">Add new template</Typography>\\r\\n            </IconButton>\\r\\n         </div>\\r\\n      )\\r\\n   }\\r\\n\\r\\n   handleClickOnYes = async () => {\\r\\n      const { selectItemIdToDelete } = this.state\\r\\n      const { ispId, showSnackbar } = this.props\\r\\n      try {\\r\\n         const result = await client.mutate({\\r\\n            mutation: DELETE_TICKET_TEMPLATE,\\r\\n            variables: { id: selectItemIdToDelete }\\r\\n         })\\r\\n\\r\\n         if (result.data.deleteTicketType) {\\r\\n            let { listOfTemplate } = await client.readQuery({\\r\\n               query: GET_TICKET_TYPE,\\r\\n               variables: { isp_id: ispId }\\r\\n            })\\r\\n\\r\\n            const templateList = filter(\\r\\n               listOfTemplate.ticket_types,\\r\\n               (item, index) => {\\r\\n                  if (item.ticket_type_id !== selectItemIdToDelete) {\\r\\n                     return item\\r\\n                  }\\r\\n               }\\r\\n            )\\r\\n\\r\\n            await client.writeQuery({\\r\\n               query: GET_TICKET_TYPE,\\r\\n               data: {\\r\\n                  listOfTemplate: { ticket_types: templateList, __typename: \\"Isps\\" }\\r\\n               },\\r\\n               variables: { isp_id: ispId }\\r\\n            })\\r\\n\\r\\n            this.setState({\\r\\n               list: { ticket_types: templateList },\\r\\n               selectedTicketId: templateList[0].ticket_type_id,\\r\\n               selectedTicketTemplate: templateList[0]\\r\\n            })\\r\\n            showSnackbar(\\"Template removed successfully\\", \\"success\\")\\r\\n         }\\r\\n      } catch (error) {\\r\\n         showSnackbar(error.message, \\"error\\")\\r\\n      }\\r\\n   }\\r\\n\\r\\n   renderAlertDialog = () => {\\r\\n      const { isOpen } = this.state\\r\\n      if (isOpen) {\\r\\n         return (\\r\\n            <ConfirmationAlertDialog\\r\\n               open={isOpen}\\r\\n               handleClose={this.handleDeleteTicket}\\r\\n               handleClickOnYes={this.handleClickOnYes}\\r\\n               dialogeTitle={\\"Are you sure?\\"}\\r\\n               okBtnLabel={\\"Delete\\"}\\r\\n               cancelBtnLabel={\\"Cancel\\"}\\r\\n            />\\r\\n         )\\r\\n      }\\r\\n      return null\\r\\n   }\\r\\n\\r\\n   render() {\\r\\n      const { classes } = this.props\\r\\n      const { selectedTicketTemplate, selectedTicketId, list } = this.state\\r\\n      const lists =\\r\\n         list && list.ticket_types && list.ticket_types.map(this.renderListItem)\\r\\n      return (\\r\\n         <>\\r\\n            <div className=\\" container-fluid customContainerFuild ticketSection button_bottom\\" >\\r\\n               <Grid spacing={4} container className={\\"tray-body \\" + classes.trayPadding}>\\r\\n                  <Grid item lg={3} className={\\"sectionContent tabSection \\" + classes.templatePaddingLeft}>\\r\\n                     <Grid container className=\\"templateSection\\">\\r\\n                        <Grid item lg={12} className={classes.templateBottomBorder + \\" pb-0\\"}>\\r\\n                           <Typography className={classes.templateTitle + \\" pl-4\\"} variant=\\"h6\\">Templates</Typography>\\r\\n                        </Grid>\\r\\n                        {this.renderAddCircleIcon()}\\r\\n                        <div\\r\\n                           className={classes.root}\\r\\n                           style={{ maxHeight: \\"calc(100vh - 155px)\\" }}\\r\\n                        >\\r\\n                           <List className=\\"template-list\\">{lists}</List>\\r\\n                        </div>\\r\\n                     </Grid>\\r\\n                  </Grid>\\r\\n                  <Grid item lg={9} className=\\"sectionContent clientInvoiceSection\\"\\r\\n                     id=\\"editorSection\\"\\r\\n                     style={{ height: \\"100vh\\", borderColor: \\"#ddd\\" }}>\\r\\n                        <Grid spacing={2} container className=\\"row emailSection\\" style={{ margin: \\"0\\" }}>\\r\\n                           <Grid item lg={12} className=\\"headerTitle px-0\\">\\r\\n                              <Typography className={classes.ticketTypes} variant=\\"h6\\">Ticket Types</Typography>\\r\\n                           </Grid>\\r\\n                        </Grid>\\r\\n                        <RenderTicketForm\\r\\n                        selectedTicketTemplate={selectedTicketTemplate}\\r\\n                        selectedTicketId={selectedTicketId}\\r\\n                        updatedSelectedItem={this.handleUpdateTemplate}\\r\\n                     />\\r\\n                     \\r\\n                  </Grid>\\r\\n               </Grid>\\r\\n            </div>\\r\\n            {this.renderAlertDialog()}\\r\\n         </>\\r\\n      )\\r\\n   }\\r\\n}\\r\\n\\r\\nTemplates.propTypes = propTypes\\r\\n\\r\\nconst mapStateToProps = state => {\\r\\n   return {\\r\\n      ispId: state.ispId\\r\\n   }\\r\\n}\\r\\n\\r\\nexport default connect(\\r\\n   mapStateToProps,\\r\\n   { showSnackbar }\\r\\n)(withStyles(customStyles)(Templates))\\r\\n```\\r\\n\\r\\nmy test case is \\r\\n```jsx\\r\\nimport React from \'react\';\\r\\nimport { shallow, configure } from \'enzyme\';\\r\\nimport  { Templates }  from \\"./index\\"\\r\\nimport Adapter from \\"enzyme-adapter-react-16\\";\\r\\n\\r\\nconfigure({ adapter: new Adapter() });\\r\\n\\r\\n\\r\\ndescribe(\'Templates\', () => {\\r\\n    const templates = shallow(<Templates />)\\r\\n  it(\'should render correctly in \\"debug\\" mode\', () => {\\r\\n      console.log(\\"test----------\x3e\\")\\r\\n  });\\r\\n});\\r\\n```\\r\\n\\r\\nAnd error is:\\r\\n\\r\\n[http://prntscr.com/ow04ym](url)","number":16539,"user":{"login":"vineet-agrawal96"},"state":"closed","created_at":"2019-08-22T09:39:30Z"},{"id":483837792,"title":"use Math.ceil() to reduce expirationTime opetarion steps","body":"use Math.ceil() to reduce expirationTime opetarion steps","number":16538,"user":{"login":"TigerHee"},"state":"closed","created_at":"2019-08-22T08:13:23Z"},{"id":483790210,"title":"useReducer causing loop when used with context, but useState is not","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug, I think\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI apologize this might seem convoluted, but there are several things involved that make this problem:\\r\\n\\r\\n1. I have a typical Context provider that stored it\'s state values using `useReducer`\\r\\n2. In a leaf component where I\'m consuming that context, I have an effect that does some async code and then sets state in the context (setState function passed down through context)\\r\\n\\r\\n```js\\r\\nfunction ShoppingPage() {\\r\\n  const { shoppingCartState } = useContext(Context);\\r\\n  useEffect(() => {\\r\\n    getShoppingCartStuff().then(shoppingCartState.setCart);\\r\\n  }, []);\\r\\n  // I later added [shoppingCartState.setCart] to the dep array. See comments below\\r\\n\\r\\n  return <div>Cart: {shoppingCartState.cart}</div>;\\r\\n}\\r\\n```\\r\\n\\r\\n3. Recently I added the \\"exhaustive-deps\\" lint rules and caught that I wasn\'t adding `shoppingCartState.setCart` to that dep array. So I added it and started getting an infinite loop. My thought process was `shoppingCartState` must be getting a new identity in memory. \\r\\n4. After exploring for a while, I decided to change the state of the context to use `useState` and the infinite loop went away.\\r\\n\\r\\nSo just to be clear, the state in context being managed with `useState` or `useReducer` doesn\'t cause an infinite loop until I add that dep array value for `shoppingCartState.setCart`, then `useReducer` causes a loop and `useState` doesn\'t\\r\\n\\r\\nExample with both `useState` and `useReducer` versions\\r\\nhttps://codesandbox.io/s/competent-boyd-yzzyh\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nHopefully no loop\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8 and 16.9 tested","number":16537,"user":{"login":"bradwestfall"},"state":"closed","created_at":"2019-08-22T06:13:33Z"},{"id":483784074,"title":"Error: \\"Could not find commit data for root \\"1180\\" and commit 2\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.5-5441b09\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16721)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:293849)\\r\\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:294084)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\\r\\n\\r\\nComponent stack: in Al\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16536,"user":{"login":"rohanvachheta"},"state":"closed","created_at":"2019-08-22T05:52:20Z"},{"id":483758615,"title":"Improve `table > tr` warning","body":"This PR improves clarity of warning thrown when a `tr` element is a direct child of `table`.\\r\\n\\r\\nThe current warning suggests that the user wrap all child `tr`\'s in a `<tbody>`. In fact, `<thead>` and `<tfoot>` are also valid here. The warning has been updated to reflect this.","number":16535,"user":{"login":"tomquirk"},"state":"closed","created_at":"2019-08-22T04:09:39Z"},{"id":483706700,"title":"Error: \\"getCommitTree(): Unable to reconstruct tree for root \\"1\\" and commit 4\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.5-5441b09\\r\\n\\r\\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)\\r\\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:275512)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\\r\\n\\r\\nComponent stack: in bi\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16534,"user":{"login":"eunsookim"},"state":"closed","created_at":"2019-08-22T00:11:57Z"},{"id":483689785,"title":"[react-events] Rename hook exports","body":"For example, \'useHoverResponder\' becomes \'useHover\'","number":16533,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-21T22:59:02Z"},{"id":483666575,"title":"[Partial Hydration] Dispatching events should not work until hydration commits","body":"This includes a bunch of clean up to set up for selective hydration.\\r\\n\\r\\nPrimarily the bug it fixes is that we attach event listeners while hydrating but these need to be noops (and later replayable) until we actually commit. Since the parent may not be mounted any setStates that we let through might become invalid.\\r\\n\\r\\nThere\'s no way around that we need some commit-phase effect to indicate when it\'s done. We could do these on all event listeners but it\'s sufficient to just do it at the root of the things we\'re hydrating.\\r\\n\\r\\nIn fact, we did that with HostRoot already by attaching a fake Placement effect tag on it.\\r\\n\\r\\nThis PR formalizes that by making Hydrating a new effect tag. It means that this is the beginning of a in-progress hydrating subtree. The tag gets removed in the commit phase to indicate that the tree is mounted. Same as Placement.","number":16532,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-21T21:41:40Z"},{"id":483601401,"title":"eslint-plugin-react-hooks v2.0.0 is not loaded correctly.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug (maybe)\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n`eslint-plugin-react-hooks` is not loaded correctly.\\r\\n\\r\\n[`eslint-plugin-react-hooks@2.0.0/index.js`](https://unpkg.com/browse/eslint-plugin-react-hooks@2.0.0/index.js) is not the correct file. [`packages/eslint-plugin-react-hooks/npm/index.js`](https://github.com/facebook/react/blob/06728290533bce24b0893461c3f4ddc1547f85b4/packages/eslint-plugin-react-hooks/npm/index.js) should be used.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n```console\\r\\n$ cd $(mktemp -d)\\r\\n$ yarn add -D eslint eslint-plugin-react-hooks\\r\\n$ touch test.js\\r\\n$ yarn eslint --plugin react-hooks test.js\\r\\nyarn run v1.17.3\\r\\nwarning package.json: No license field\\r\\n$ /tmp/tmp.nAQkiU0etB/node_modules/.bin/eslint --plugin react-hooks test.js\\r\\nError: Failed to load plugin \'react-hooks\' declared in \'CLIOptions\': Cannot find module \'./src/index\'\\r\\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:582:15)\\r\\n    at Function.Module._load (internal/modules/cjs/loader.js:508:25)\\r\\n    at Module.require (internal/modules/cjs/loader.js:637:17)\\r\\n    at require (/tmp/tmp.nAQkiU0etB/node_modules/v8-compile-cache/v8-compile-cache.js:161:20)\\r\\n    at Object.<anonymous> (/tmp/tmp.nAQkiU0etB/node_modules/eslint-plugin-react-hooks/index.js:10:18)\\r\\n    at Module._compile (/tmp/tmp.nAQkiU0etB/node_modules/v8-compile-cache/v8-compile-cache.js:194:30)\\r\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)\\r\\n    at Module.load (internal/modules/cjs/loader.js:600:32)\\r\\n    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)\\r\\n    at Function.Module._load (internal/modules/cjs/loader.js:531:3)\\r\\nerror Command failed with exit code 2.\\r\\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nPlugin is loaded successfully.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nonly `eslint-plugin-react-hooks@2.0.0`\\r\\n","number":16531,"user":{"login":"ykzts"},"state":"closed","created_at":"2019-08-21T19:08:42Z"},{"id":483587130,"title":"Is useImperativeHandle redundant?","body":"Excuse my naivety, but I see no need for useImperativeHandle. Instead of this: \\r\\n\\r\\n````javascript\\r\\n// https://reactjs.org/docs/hooks-reference.html#useimperativehandle\\r\\n\\r\\nfunction FancyInput(props, ref) {\\r\\n  const inputRef = useRef();\\r\\n  useImperativeHandle(ref, () => ({\\r\\n    focus: () => {\\r\\n      inputRef.current.focus();\\r\\n    }\\r\\n  }));\\r\\n  return <input ref={inputRef} ... />;\\r\\n}\\r\\nFancyInput = forwardRef(FancyInput);\\r\\n````\\r\\n\\r\\nWhy not simply assign the current property to the forwarded ref?\\r\\n\\r\\n````javascript\\r\\nfunction FancyInput(props, fwdRef) {\\r\\n  const inputRef = useRef();\\r\\n  useEffect(() => {\\r\\n    if (fwdRef) {\\r\\n      fwdRef.current = inputRef.current;\\r\\n    }\\r\\n  }, []);\\r\\n  return <input ref={inputRef} ... />;\\r\\n}\\r\\nFancyInput = forwardRef(FancyInput);\\r\\n````","number":16530,"user":{"login":"evoyy"},"state":"closed","created_at":"2019-08-21T18:38:15Z"},{"id":483576015,"title":"Merge pull request #1 from facebook/master","body":"updating react version after merging a PR\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16529,"user":{"login":"utkarshiam"},"state":"closed","created_at":"2019-08-21T18:17:23Z"},{"id":483571104,"title":"Bump ESLint plugin to 2.0","body":"This is so we can release https://github.com/facebook/react/pull/16455 without waiting for a React release. Putting notes into 16.9 release is a bit odd but I don\'t have a better idea right now.","number":16528,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-21T18:06:01Z"},{"id":483570280,"title":"DevTools: Profiler: Save profile does nothing on Firefox","body":"Hi, long time user, first time issuer.\\r\\n\\r\\nI think I found a bug with the Profiler component. When I click on the `Save profile...` button at the top nothing happens and there appears to be no new files in my Downloads folder. I think it might be silently failing and that\'s why I am not getting any response.  Has anyone else ran into this issue?\\r\\n\\r\\nAnother thing I would like to mention is that I haven\'t looked through all of the documentation material about the new Profiler. I only read [this introductory blog post](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html), so if this issue is addressed elsewhere I apologize and also request the source to that solution.\\r\\n\\r\\nThank you for your time!\\r\\n\\r\\n**Versions:**\\r\\n * `React DevTools 4.0.5`\\r\\n * `Firefox: 68.0.2(64-bit)`\\r\\n * `Ubuntu: 18.04`\\r\\n","number":16527,"user":{"login":"deadmau6"},"state":"closed","created_at":"2019-08-21T18:04:11Z"},{"id":483499048,"title":"Custom hook and strange warnings ","body":"I\'ve a question about a behaviour that appears strange to me.\\r\\n\\r\\nI am writing a custom hook.\\r\\n\\r\\n```js\\r\\nconst useToggle =\\r\\n  (initialState) => {\\r\\n    const [isTrue, setState] = useState(initialState || false);\\r\\n\\r\\n    const False =\\r\\n      () => {\\r\\n        setState(false);\\r\\n      };\\r\\n\\r\\n    const True =\\r\\n      () => {\\r\\n        setState(true);\\r\\n      };\\r\\n\\r\\n    return [isTrue, True, False];\\r\\n  };\\r\\n```\\r\\n\\r\\nIt works fine.\\r\\n\\r\\nBut if I try to rewrite `False`, and `True` using `setState.bind` I get the following warning in console.\\r\\n\\r\\n```js\\r\\nconst False = setState.bind(null, false);\\r\\n\\r\\nconst True = setState.bind(null, true);\\r\\n```\\r\\n\\r\\nThe warning:\\r\\n\\r\\n```\\r\\nWarning: State updates from the useState() and useReducer() Hooks don\'t support the second callback argument.\\r\\nTo execute a side effect after rendering, declare it in the component body with useEffect().\\r\\n```\\r\\n\\r\\nIs this the expected behaviour?\\r\\n\\r\\nWhy is that? The two snippet appear equivalent to me.\\r\\n","number":16526,"user":{"login":"brunoscopelliti"},"state":"closed","created_at":"2019-08-21T15:39:25Z"},{"id":483464562,"title":"Revert \\"Revert \\"[ESLint] Forbid top-level use*() calls (#16455)\\"\\"","body":"Reverts facebook/react#16522\\r\\n\\r\\nIt was a misunderstanding \u2014 the PR was fine. So we can include it.","number":16525,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-21T14:41:13Z"},{"id":483445266,"title":"Router navigated page doesn\'t refresh","body":"Hey, I noticed that when using Router Routes to navigate to pages and if reload the browser at that page it doesn\'t reload, it need to go to the root \'/\' to load them again!\\r\\n\\r\\nthis is my code! (ScrollToTop makes page scroll to top every time router updates)\\r\\n\\r\\n```\\r\\n<Router>\\r\\n\\r\\n      <ScrollToTop>\\r\\n\\r\\n            <Route exact path=\\"/\\" component={FirstPage}/>\\r\\n\\r\\n            <Route exact path=\\"/sec\\" component={SecondPage}/>\\r\\n\\r\\n            <Route exact path=\\"/appoint\\" component={ThirdPage}/>\\r\\n\\r\\n      </ScrollToTop>\\r\\n\\r\\n</Router>\\r\\n```\\r\\nHow can I reload in the SecondPage for example and still load it instead of getting 404?\\r\\n","number":16524,"user":{"login":"iamanas20"},"state":"closed","created_at":"2019-08-21T14:09:37Z"},{"id":483317860,"title":"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons","body":"In ErrorPage Component this error is coming at last statement of \\"export default connect(...) \\".\\r\\n```jsx\\r\\nimport React, { Component } from \'react\'\\r\\nimport { connect } from \'react-redux\';\\r\\n\\r\\nclass ErrorPage extends Component {\\r\\n    state = {}\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                ErrorPage;\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\\r\\nconst mapStateToProps = (state) => {\\r\\n    console.log(\'====================================\');\\r\\n    console.log(state);\\r\\n    console.log(\'====================================\');\\r\\n}\\r\\n\\r\\n\\r\\nexport default connect(mapStateToProps, null)(ErrorPage);\\r\\n```","number":16523,"user":{"login":"MidhunUvt"},"state":"closed","created_at":"2019-08-21T09:50:00Z"},{"id":483297158,"title":"Revert \\"[ESLint] Forbid top-level use*() calls (#16455)\\"","body":"This reverts commit 96eb703bbff49b7d52ad7d41ea18074dc8e7857a.\\r\\n","number":16522,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-08-21T09:12:36Z"},{"id":483255195,"title":"React throws an error when using onSelectStart","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen setting this event handler property, React throws an error.\\r\\n\\r\\nExample jsx:\\r\\n\\r\\n```jsx\\r\\n<div\\r\\n  onSelectStart={e => e.preventDefault()}\\r\\n>\\r\\n  Test\\r\\n</div>\\r\\n```\\r\\n\\r\\nReact throws the following error:\\r\\n\\r\\n`Warning: Unknown event handler property `onSelectStart`. It will be ignored.`\\r\\n\\r\\nCodesandbox link: https://codesandbox.io/embed/holy-violet-4unq8\\r\\n\\r\\n**What is the expected behavior?**\\r\\nReact is aware of `onSelectStart` and connects to `onselectstart` correctly, without throwing an error\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nTested on latest desktop (linux) Chromium and Firefox with react/react-dom 16.8.6 and 16.9.0, react-scripts 3.0.1 and 3.1.0.\\r\\n\\r\\nc.f. https://github.com/facebook/react/issues/15787\\r\\n","number":16521,"user":{"login":"mtjn"},"state":"closed","created_at":"2019-08-21T07:49:03Z"},{"id":483185293,"title":"flow with import * as React from \'react\'","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\nI use flow, so \\r\\n```js\\r\\nimport * as React from \'react\',\\r\\n```\\r\\nBut also I use React Hook, like useState.\\r\\nso how can I import this?\\r\\nlike\\r\\n```js\\r\\nimport * as React, {useState} from \'react\' \\r\\n```\\r\\nor\\r\\n```js\\r\\nimport * as React from \'react\';\\r\\nimport  {useState} from \'react\';\\r\\n```\\r\\n or some other method?\\r\\n\\r\\nHope for better workaround!\\r\\n","number":16520,"user":{"login":"httol"},"state":"closed","created_at":"2019-08-21T03:53:04Z"},{"id":483164854,"title":"hook component can not been clicked in react-dev-tool if you want it works well.","body":"### issue type\\r\\nbug\\r\\n\\r\\n### issue description\\r\\nlook at the code blow (it is very very very simple).\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nexport default function DemoCounter() {\\r\\n  const [fnWrapper] = useState(\'fn\');\\r\\n  const [count, setCount] = useState(0);\\r\\n  fnWrapper.__proto__.setCount = s => {\\r\\n    setCount(s);\\r\\n  }\\r\\n\\r\\n // assign fnWrapper.__proto__.setCount to callSetCount\\r\\n  const callSetCount = fnWrapper.__proto__.setCount;\\r\\n\\r\\n  return (\\r\\n    <div style={{ border: \'1px solid blue\', margin: \'8px\' }}>\\r\\n      count: {count}\\r\\n      {/* this does not work if I open react-dev-tool and click the dom node */}\\r\\n      <input value={count} onChange={e => fnWrapper.__proto__.setCount(e.currentTarget.value)} />\\r\\n\\r\\n       {/* this always works not matter I open react-dev-tool and click the dom node or not */}\\r\\n      <input value={count} onChange={e => callSetCount(e.currentTarget.value)} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n```\\r\\n### why callSetCount always works but `fnWrapper.__proto__.setCount` not if and only if after I open the react-dev-tool and click the dom node ~~~~(>_<)~~~~\uff0c\\r\\n\\r\\n### please tell me the truth.\\r\\n","number":16519,"user":{"login":"fantasticsoul"},"state":"closed","created_at":"2019-08-21T02:20:13Z"},{"id":483156643,"title":"Bring back the ability to show props in the tree","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature. I would like the ability to see props in the component tree, like in React DevTools version 3, not just in the sidebar.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nAs of React DevTools 4.0.5, the component tree does not show a component\'s props:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/110000/63395824-d98f0a00-c379-11e9-94a5-7d7ada53238f.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would like the ability to toggle an interface more similar to React 3.6.0, where the props were shown in the tree. Please excuse the annotations on the following photo, I\'m reusing it from https://github.com/facebook/react-devtools/issues/1361.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/110000/63395853-f4fa1500-c379-11e9-8f84-580bf2803f5b.png)\\r\\n\\r\\n--------------\\r\\n\\r\\nAs described in https://github.com/facebook/react-devtools/issues/1361, the problem with showing props in the sidebar, but not in the tree, is that it\'s common for me to scroll upward through the tree to try to find where an event handler is registered. If I have to click a component to get it to show a function prop like `onSelectValue`, that makes my search for the handler more difficult.\\r\\n\\r\\nNote that the previous implementation showing props in the tree appeared to be broken in part, as described by https://github.com/facebook/react-devtools/issues/1361.","number":16518,"user":{"login":"wearhere"},"state":"closed","created_at":"2019-08-21T01:41:15Z"},{"id":483116808,"title":" [react-events] Press responder simplification ","body":"NOTE: this stacks on top of #16479 which I\'ll merge once we\'ve internally synced what is currently in master. Preview-review should only look at the second commit in this PR \\"Press responder simplification\\".\\r\\n\\r\\n* Remove \'pressRetentionOffset\' so we don\'t have to perform layout measurements during moves.\\r\\n* Maintain the pressed state while a pointer is down and moving, even if it moves outside the target.\\r\\n* Determine whether to call \'onPress\' based on whether the pointer was released over the target.\\r\\n\\r\\nThis aligns more closely with how the web natively deals with pointers and simplifies the responder.\\r\\nWe only need to call getBoundingClientRect for touch pointers. Further revisions could be made to\\r\\navoid target capturing for touch pointers with PointerEvents, which would leave the gBCR call only\\r\\nfor the fallback TouchEvents.\\r\\n\\r\\nDemo: https://codesandbox.io/s/latest-responder-build-rz96j30rp","number":16517,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-20T22:44:23Z"},{"id":482938774,"title":"Use renderToStaticMarkup for tests","body":"Make sure the tests under `renderToStaticMarkup` actually use `renderToStaticMarkup`, rather than `renderToString`.","number":16516,"user":{"login":"devknoll"},"state":"closed","created_at":"2019-08-20T15:40:59Z"},{"id":482901798,"title":"create-react-class uses unmaintained version of core-js","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nUsing an unmaintained version of `core-js`\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nAdd `create-react-class` to `package.json` and then run `yarn install` and the following warning is output:\\r\\n`create-react-class > fbjs > core-js@1.2.7: core-js@<2.6.8 is no longer maintained. Please, upgrade to core-js@3 or at least to actual version of core-js@2`\\r\\n\\r\\n**What is the expected behavior?**\\r\\nMaintained version of `core-js` is used\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n`create-react-class: 15.6.3` (current version available in npm)","number":16515,"user":{"login":"daveisfera"},"state":"closed","created_at":"2019-08-20T14:37:25Z"},{"id":482871136,"title":"DevTools: Firefox extension fails to recognize React on sites with strict CSP","body":"When I run react devtools on Chrome on https://www.getmyboat.com, it works just fine, but when I go to the same page with react devtools on Firefox, the icon is greyed out and it says the page doesn\'t appear to be using React.\\r\\n\\r\\nThe site uses a strict CSP policy - i.e. no unsafe-inline or unsafe-eval - so I\'m wondering if it\'s something where Firefox treats extension code as injected code, where Chrome doesn\'t.\\r\\n\\r\\nIs this a known issue? I\'m fine if it\'s a wontfix on account of some behavior of Firefox, but I\'d like to know for sure that that\'s the case.\\r\\n\\r\\nEDIT: If it is a wontfix, I\'ll add something to the devtools docs to that effect.","number":16514,"user":{"login":"tstirrat15"},"state":"closed","created_at":"2019-08-20T13:46:06Z"},{"id":482838468,"title":"eslint-plugin-react-hooks should warn when a custom hook returns a component with possibly stale closure","body":"**Request for a *feature***\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nAlthough the CRA 3 default linters are configured to warn about possible closure bugs, they don\'t warn about a likely closure bug when a hook returns a component. Please see the example below. The value rendered in the HookCount component does not change when the button is clicked:\\r\\n```\\r\\nimport React, { useState, useContext } from \'react\';\\r\\n\\r\\nconst CountContext = React.createContext(1);\\r\\n\\r\\nfunction useHookCount () {\\r\\n  const count = useContext(CountContext);\\r\\n  const HookCount = () => (\\r\\n    <div>{ count }</div>\\r\\n  )\\r\\n  return HookCount;\\r\\n}\\r\\n\\r\\nconst Count = () => {\\r\\n  const count = useContext(CountContext);\\r\\n  return <div>{ count }</div>\\r\\n}\\r\\n\\r\\nfunction App() {\\r\\n  const [ count, setCount ] = useState(3);\\r\\n  const HookCount = useHookCount();\\r\\n  return (\\r\\n    <CountContext.Provider value={ count }>\\r\\n      <div>\\r\\n        <button onClick={() => setCount(prevCount => prevCount + 1)}>{ count }</button>\\r\\n        <HookCount />\\r\\n        <Count />\\r\\n      </div>\\r\\n    </CountContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\neslint-plugin-react-hooks should warn about the possible closure problem(s) when a custom hook returns a component that uses a value from the hook function closure.\\r\\n\\r\\n**Which versions of React are affected by this issue?**\\r\\n\\r\\nTested with \\r\\nreact: 16.9.0\\r\\nreact-scripts: 3.1.1\\r\\n","number":16513,"user":{"login":"viheikki"},"state":"closed","created_at":"2019-08-20T12:44:36Z"},{"id":482836114,"title":"Question: shouldComponenteUpdate equivalent for state change detection in hooks","body":"I\'m having a component, which is facing a lot of \\"unnecessary\\" renders because it it located at a relatively low level in the component stack. Up to now I was using `shouldComponentUpdate` comparing internal state with the given `nextState` in order to determine, if it is OK to re-render. I\'m wondering now, how this could be done with hooks. AFAIK `memo` is just covering the props changes, but what about state change comparisons? \\r\\n","number":16512,"user":{"login":"neilyoung"},"state":"closed","created_at":"2019-08-20T12:39:51Z"},{"id":482833475,"title":"React deftools on firefox not working The extension \\"React Developer Tools\\" is not allowed to access about:home","body":"**Bug**\\r\\n\\r\\nReact dev tools not showing up in firefox dev tools.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nno react tabs in firefox dev tools and i get the following error in console.\\r\\n\\r\\nThe extension \\"React Developer Tools\\" is not allowed to access about:home\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nthey show up\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nfirefox 68.0.2 \\r\\nlatest app \\r\\nwindows 10 latest non insiders\\r\\n","number":16511,"user":{"login":"NicTanghe"},"state":"closed","created_at":"2019-08-20T12:34:25Z"},{"id":482823011,"title":"Error: \\"Could not find commit data for root \\"26047\\" and commit 5\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.5-5441b09\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16721)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:293849)\\r\\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:294084)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\\r\\n\\r\\nComponent stack: in Al\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl","number":16510,"user":{"login":"nassif7"},"state":"closed","created_at":"2019-08-20T12:12:15Z"},{"id":482813173,"title":"Remove emoji from browser devtools tabs","body":"![image](https://user-images.githubusercontent.com/1235286/63173784-425c4680-c049-11e9-9708-5fd2c99f9e43.png)\\r\\nMake it possible to remove emoji from the tabs. It violate the common devtools style. \\r\\n\\r\\nAlso in Firefox 68.0.2 @ Macos it is duplicated\\r\\n<img width=\\"292\\" alt=\\"\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\\" src=\\"https://user-images.githubusercontent.com/1235286/63266594-ef78ce00-c298-11e9-90ca-73f95ef25181.png\\">","number":16509,"user":{"login":"inoyakaigor"},"state":"closed","created_at":"2019-08-20T11:50:12Z"},{"id":482813021,"title":"Bug - Upgrading `react-dom` from 16.8.6 to 16.9.0 breaks tests (await Promise.all not supported)","body":"When upgrading to react-dom 16.9.0, I have several jest tests break.\\r\\n\\r\\nThe first failure is pasted below. There are other failures to do with missing elements on the page (renders in the browser fine) but they feel less informative so are being omitted for now.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nTests pass!\\r\\n\\r\\nI\'m unsure of whether this is a bug with react or whether it\'s just something else that this upgrade has revealed. Could also be an issue with something else in the test setup (my code, React Testing Library, Jest, babel compilation)\\r\\n\\r\\nI also suspect there might be something wrong with my usage of the async loading of polyfills in `componentDidMount` but I\'m not sure if this is the case. If this is the case it would still mean that other tests were breaking in the upgrade.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nOnly occurs with 16.9.0. Was working with 16.8.6\\r\\n\\r\\n### Failing Test Message\\r\\n``` \\r\\n\u25cf <CustomApp /> \u203a renders the error page with a 500 error if there is an unknown error\\r\\n\\r\\n    Not supported\\r\\n\\r\\n      26 | async function loadIntlPolyfills(locale: string) {\\r\\n      27 |   const lang = localeToLang(locale);\\r\\n    > 28 |   await Promise.all([\\r\\n         |                 ^\\r\\n      29 |     import(\'intl-pluralrules\'),\\r\\n      30 |     import(\'@formatjs/intl-relativetimeformat/polyfill\'),\\r\\n      31 |     import(`@formatjs/intl-relativetimeformat/dist/locale-data/${lang}`),\\r\\n\\r\\n      at all (pages/_app.tsx:28:17)\\r\\n      at CustomApp.loadIntlPolyfills (pages/_app.tsx:153:5)\\r\\n      at commitLifeCycles (node_modules/react-dom/cjs/react-dom.development.js:20049:22)\\r\\n      at commitLayoutEffects (node_modules/react-dom/cjs/react-dom.development.js:22813:7)\\r\\n      at HTMLUnknownElement.callCallback (node_modules/react-dom/cjs/react-dom.development.js:347:14)\\r\\n      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\\r\\n      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\\r\\n      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\\r\\n      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\\r\\n      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\\r\\n      at Object.invokeGuardedCallbackDev (node_modules/react-dom/cjs/react-dom.development.js:397:16)\\r\\n      at invokeGuardedCallback (node_modules/react-dom/cjs/react-dom.development.js:454:31)\\r\\n      at commitRootImpl (node_modules/react-dom/cjs/react-dom.development.js:22585:9)\\r\\n      at unstable_runWithPriority (node_modules/scheduler/cjs/scheduler.development.js:643:12)\\r\\n      at runWithPriority$2 (node_modules/react-dom/cjs/react-dom.development.js:11305:10)\\r\\n      at commitRoot (node_modules/react-dom/cjs/react-dom.development.js:22414:3)\\r\\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:21421:20)\\r\\n      at scheduleRootUpdate (node_modules/react-dom/cjs/react-dom.development.js:24319:3)\\r\\n      at updateContainerAtExpirationTime (node_modules/react-dom/cjs/react-dom.development.js:24347:10)\\r\\n      at updateContainer (node_modules/react-dom/cjs/react-dom.development.js:24436:10)\\r\\n      at node_modules/react-dom/cjs/react-dom.development.js:24963:7\\r\\n      at unbatchedUpdates (node_modules/react-dom/cjs/react-dom.development.js:21687:12)\\r\\n      at legacyRenderSubtreeIntoContainer (node_modules/react-dom/cjs/react-dom.development.js:24962:5)\\r\\n      at Object.render (node_modules/react-dom/cjs/react-dom.development.js:25042:12)\\r\\n      at node_modules/@testing-library/react/dist/pure.js:86:25\\r\\n      at batchedUpdates$1 (node_modules/react-dom/cjs/react-dom.development.js:21643:12)\\r\\n      at act (node_modules/react-dom/cjs/react-dom-test-utils.development.js:1002:14)\\r\\n      at act (node_modules/react-dom/cjs/react-dom-test-utils.development.js:1418:12)\\r\\n      at render (node_modules/@testing-library/react/dist/pure.js:82:26)\\r\\n      at Object.it (__tests__/pages/_app.test.tsx:68:27)\\r\\n```\\r\\n\\r\\n### Custom `_app.tsx` (Next component, see docs [here](https://nextjs.org/docs#custom-app))\\r\\n```typescript\\r\\n// _app.tsx\\r\\n\\r\\nasync function loadIntlPolyfills(locale: string) {\\r\\n  const lang = localeToLang(locale);\\r\\n  await Promise.all([\\r\\n    import(\'intl-pluralrules\'),\\r\\n    import(\'@formatjs/intl-relativetimeformat/polyfill\'),\\r\\n    import(`@formatjs/intl-relativetimeformat/dist/locale-data/${lang}`),\\r\\n  ]);\\r\\n}\\r\\n\\r\\nexport default class CustomApp extends App<Props, State> {\\r\\n  // ...\\r\\n\\r\\n  componentDidMount(): void {\\r\\n    const { locale } = this.props;\\r\\n    loadIntlPolyfills(locale);\\r\\n    // ...\\r\\n  }\\r\\n\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\n### Failing Test\\r\\n```typescript\\r\\n  let mockedRouter;\\r\\n\\r\\n  it(\'renders the error page with a 500 error if there is an unknown error\', async () => {\\r\\n    const props = await CustomApp.getInitialProps({\\r\\n      Component: TestComponent, // some mocked component with getInitialProps\\r\\n      ctx: {\\r\\n        req: reqMock,\\r\\n      },\\r\\n    });\\r\\n\\r\\n    mockedRouter = { pathname: \'/web-client-test/\' };\\r\\n    Router.router = mockedRouter;\\r\\n    jest.spyOn(global.console, \'error\').mockImplementation(() => {});\\r\\n    const pageProps = {\\r\\n      throwWebErrorInInitialProps: false,\\r\\n      throwWebErrorInRender: false,\\r\\n    };\\r\\n\\r\\n    const app = (\\r\\n      <CustomApp\\r\\n        {...props}\\r\\n        Component={TestComponent}\\r\\n        router={Router.router}\\r\\n        pageProps={pageProps}\\r\\n      />\\r\\n    );\\r\\n\\r\\n    const { getByText } = rtlRender(app);\\r\\n    expect(\\r\\n      getByText(\'A 500 error occurred on the server.\'),\\r\\n    ).toBeInTheDocument();\\r\\n  });\\r\\n\\r\\n```\\r\\n\\r\\n### Complete diff between version of our app that had passing tests and version with failing tests\\r\\n(apologies for b&w diff; `+`s and `-`s should show changes)\\r\\n```\\r\\ndiff --git a/web_client/package.json b/web_client/package.json\\r\\nindex e8f0aebdf3..bdb47345fa 100644\\r\\n--- a/web_client/package.json\\r\\n+++ b/web_client/package.json\\r\\n@@ -41,7 +41,7 @@\\r\\n     \\"postcss-flexbugs-fixes\\": \\"^4.1.0\\",\\r\\n     \\"query-string\\": \\"5\\",\\r\\n     \\"react\\": \\"^16.9.0\\",\\r\\n-    \\"react-dom\\": \\"^16.8.6\\",\\r\\n+    \\"react-dom\\": \\"^16.9.0\\",\\r\\n     \\"react-intl\\": \\"^3.1.8\\",\\r\\n     \\"react-stripe-elements\\": \\"^4.0.1\\",\\r\\n     \\"store\\": \\"^2.0.12\\",\\r\\ndiff --git a/web_client/yarn.lock b/web_client/yarn.lock\\r\\nindex 3658d6ccfc..900e0caa5a 100644\\r\\n--- a/web_client/yarn.lock\\r\\n+++ b/web_client/yarn.lock\\r\\n@@ -7959,15 +7959,15 @@ rc@^1.2.7:\\r\\n     minimist \\"^1.2.0\\"\\r\\n     strip-json-comments \\"~2.0.1\\"\\r\\n\\r\\n-react-dom@^16.8.6:\\r\\n-  version \\"16.8.6\\"\\r\\n-  resolved \\"https://registry.yarnpkg.com/react-dom/-/react-dom-16.8.6.tgz#71d6303f631e8b0097f56165ef608f051ff6e10f\\"\\r\\n-  integrity sha512-1nL7PIq9LTL3fthPqwkvr2zY7phIPjYrT0jp4HjyEQrEROnw4dG41VVwi/wfoCneoleqrNX7iAD+pXebJZwrwA==\\r\\n+react-dom@^16.9.0:\\r\\n+  version \\"16.9.0\\"\\r\\n+  resolved \\"https://registry.yarnpkg.com/react-dom/-/react-dom-16.9.0.tgz#5e65527a5e26f22ae3701131bcccaee9fb0d3962\\"\\r\\n+  integrity sha512-YFT2rxO9hM70ewk9jq0y6sQk8cL02xm4+IzYBz75CQGlClQQ1Bxq0nhHF6OtSbit+AIahujJgb/CPRibFkMNJQ==\\r\\n   dependencies:\\r\\n     loose-envify \\"^1.1.0\\"\\r\\n     object-assign \\"^4.1.1\\"\\r\\n     prop-types \\"^15.6.2\\"\\r\\n-    scheduler \\"^0.13.6\\"\\r\\n+    scheduler \\"^0.15.0\\"\\r\\n\\r\\n react-error-overlay@5.1.6:\\r\\n   version \\"5.1.6\\"\\r\\n@@ -8505,10 +8505,10 @@ sax@^1.2.4, sax@~1.2.1:\\r\\n   resolved \\"https://registry.yarnpkg.com/sax/-/sax-1.2.4.tgz#2816234e2378bddc4e5354fab5caa895df7100d9\\"\\r\\n   integrity sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==\\r\\n\\r\\n-scheduler@^0.13.6:\\r\\n-  version \\"0.13.6\\"\\r\\n-  resolved \\"https://registry.yarnpkg.com/scheduler/-/scheduler-0.13.6.tgz#466a4ec332467b31a91b9bf74e5347072e4cd889\\"\\r\\n-  integrity sha512-IWnObHt413ucAYKsD9J1QShUKkbKLQQHdxRyw73sw4FN26iWr3DY/H34xGPe4nmL1DwXyWmSWmMrA9TfQbE/XQ==\\r\\n+scheduler@^0.15.0:\\r\\n+  version \\"0.15.0\\"\\r\\n+  resolved \\"https://registry.yarnpkg.com/scheduler/-/scheduler-0.15.0.tgz#6bfcf80ff850b280fed4aeecc6513bc0b4f17f8e\\"\\r\\n+  integrity sha512-xAefmSfN6jqAa7Kuq7LIJY0bwAPG3xlCj0HMEBQk1lxYiDKZscY2xJ5U/61ZTrYbmNQbXa+gc7czPkVo11tnCg==\\r\\n   dependencies:\\r\\n     loose-envify \\"^1.1.0\\"\\r\\n     object-assign \\"^4.1.1\\"\\r\\n(END)\\r\\n```","number":16508,"user":{"login":"mulholio"},"state":"closed","created_at":"2019-08-20T11:49:51Z"},{"id":482812782,"title":"Devtools blocking React page loading","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nIt is a bug in dev tools I believe.\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhenever I go to specific page that uses react it shows me blank page. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nUnfortunately I cannot provide steps to reproduce.\\r\\n\\r\\nWhen I set the React dev tools to load only when I click, then page loads. But when reloading the devtools, it shows blank again. Seems like renderer is being overridden and it is unable to show anything when devtools are loaded.\\r\\n\\r\\nIn the console I get error on row, but might be irrelevant:\\r\\n```\\r\\nwindow.__REACT_DEVTOOLS_GLOBAL_HOOK__ && Object.keys(window.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers).length && (window.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers = {});\\r\\nUncaught TypeError: Cannot convert undefined or null to object\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe page to load as it did with previous version.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nIt did work before Chrome restart, now Chrome 76.0.3809.100. Tried reinstalling React DevTools, so they should be the newest. Most likely before restart of Chrome extension was older version.\\r\\n\\r\\n\\r\\nThere might be code issue on webpage side, but dev tools should not cause blank page still. Maybe to show warning, but not break the page. Since I am not maintainer of the web site side code, then it is something I cannot change. Observation was that the Dev Tools is for some reason breaking the loading of page.\\r\\n","number":16507,"user":{"login":"krisavi"},"state":"closed","created_at":"2019-08-20T11:49:23Z"},{"id":482767158,"title":"Error: \\"Could not find commit data for root \\"1896\\" and commit 16\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.4-3c6a219\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16721)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293207)\\r\\n    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293442)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in pl\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ha\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Ul","number":16506,"user":{"login":"grazlucinskas"},"state":"open","created_at":"2019-08-20T10:06:36Z"},{"id":482702938,"title":"Chrome\'s Custom Formatters","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n_Transferring feature request from the old repo https://github.com/facebook/react-devtools/issues/989_\\r\\n\\r\\nHi! Is there any plans on supporting [Chrome\'s custom formatters](https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview) to display custom data structures in readable format in React dev tools?\\r\\n\\r\\nFor example when debugging ClojureScript\'s immutable data structures we have a custom formatter that outputs data into the console in readable and inspectable format.\\r\\n\\r\\nHere how it looks like\\r\\n![screen shot 2018-02-19 at 3 02 32 pm](https://user-images.githubusercontent.com/1355501/36379156-39e8a882-1586-11e8-8973-7e6d3772cb4e.png)\\r\\n\\r\\nAnd here\'s how data looks like in React Dev Tools inspector (basically underlying implementation of a data structure as seen in plain JS)\\r\\n![screen shot 2018-02-19 at 2 59 04 pm](https://user-images.githubusercontent.com/1355501/36379177-4b280d90-1586-11e8-808d-ea7f2cebb274.png)\\r\\n\\r\\nI think this can be done for React Dev Tools since once Custom Formatters are defined they are applied everywhere in Chrome\'s Dev Tools where it\'s possible to inspect data.\\r\\n","number":16505,"user":{"login":"roman01la"},"state":"open","created_at":"2019-08-20T07:56:30Z"},{"id":482671090,"title":"warning after upgrade to the latest version: component appears to be a function component that returns a class instance.","body":"After I updated React to the latest version (@16.9.0), I am getting warnings below from most of the components. I am using material-ui, formik and tables.\\r\\n* I\'ve updated React in order to move from react-testing-library to testing-library/react.\\r\\n\\r\\n`The component appears to be a function component that returns a class instance. Change InputLabel to a class that extends React.Component instead. If you can\'t use a class try assigning the prototype on the function as a workaround. `InputLabel.prototype = React.Component.prototype`. Don\'t use an arrow function since it cannot be called with `new` by React.`\\r\\n\\r\\nI would like to keep my code with functional components using react hook as much as possible. \\r\\nIs there any other work around or should I just downgrade react ?\\r\\n\\r\\n    \\"react\\": \\"^16.9.0\\",\\r\\n    \\"react-dom\\": \\"^16.9.0\\",\\r\\n    \\"react-router-dom\\": \\"^5.0.1\\",\\r\\n    \\"@material-ui/core\\": \\"^3.1.2\\",\\r\\n    \\"formik\\": \\"^1.5.8\\",","number":16504,"user":{"login":"Jin827"},"state":"closed","created_at":"2019-08-20T06:35:19Z"},{"id":482659030,"title":"How can react be configured to package multi-page applications","body":"**I want to request a feature.**\\r\\n\\r\\n**How can react be configured to package multi-page applications**\\r\\n\\r\\nNow versions:\\r\\nReact v16.8.6\\r\\nBrowser Chrome 76\\r\\nOS Window 7","number":16503,"user":{"login":"i-fuyun"},"state":"closed","created_at":"2019-08-20T05:57:19Z"},{"id":482658315,"title":"Error: \\"Could not find commit data for root \\"1\\" and commit 10\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.5-5441b09\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16721)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:293849)\\r\\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:294084)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\\r\\n\\r\\nComponent stack: in Al\\r\\n    in div\\r\\n    in div\\r\\n    in Ir\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Wa\\r\\n    in ce\\r\\n    in be\\r\\n    in So\\r\\n    in Vl\\r\\n\\r\\n**I am getting this error when I am switching the rendered interface.**","number":16502,"user":{"login":"PluviaCon"},"state":"closed","created_at":"2019-08-20T05:54:50Z"},{"id":482614630,"title":"Getting maximum call stack exceeded on backend.js when rendering many elements.","body":"## Details\\r\\nUsing version 4.0.2 (8/15/2019) I am getting a maximum call stack size exceeded when my app starts up. While my app using this is a little different I have replicated the issue using a fresh create-react-app. I will include the App.js code below.\\r\\n\\r\\n## Steps to reproduce\\r\\n1. Create a new app using version 3.0.1 of create-react-app\\r\\n2. Replace the code in App.js with the code listed below\\r\\n3. Inspect the console, there should be a stack trace from a maximum call stack exceeded error\\r\\n\\r\\n## App.js\\r\\n```\\r\\nimport React from \'react\';\\r\\nimport logo from \'./logo.svg\';\\r\\nimport \'./App.css\';\\r\\n\\r\\nconst createDivs = num => {\\r\\n    const rtn = [];\\r\\n    for(let i = 0; i < num; i++) {\\r\\n        const key = `div-${i}`;\\r\\n        rtn.push(<div className={key} key={key} />)\\r\\n    }\\r\\n    return rtn;\\r\\n}\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <header className=\\"App-header\\">\\r\\n        <img src={logo} className=\\"App-logo\\" alt=\\"logo\\" />\\r\\n        <p>\\r\\n          Edit <code>src/App.js</code> and save to reload.\\r\\n        </p>\\r\\n        <a\\r\\n          className=\\"App-link\\"\\r\\n          href=\\"https://reactjs.org\\"\\r\\n          target=\\"_blank\\"\\r\\n          rel=\\"noopener noreferrer\\"\\r\\n        >\\r\\n          Learn React\\r\\n        </a>\\r\\n      </header>\\r\\n      <div>\\r\\n        {createDivs(15000)}\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n```\\r\\n\\r\\n## Call Stack\\r\\n<details>\\r\\n\\r\\n<summary>backend.js:formatted:2097 Uncaught RangeError: Maximum call stack size exceeded\\r\\n</summary>\\r\\n\\r\\n```\\r\\n    at ge (backend.js:formatted:2097)\\r\\n    at Ge (backend.js:formatted:2435)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\n    at Ge (backend.js:formatted:2478)\\r\\nge @ backend.js:formatted:2097\\r\\nGe @ backend.js:formatted:2435\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\nGe @ backend.js:formatted:2478\\r\\npostMessage (async)\\r\\nr @ contentScript.js:1\\r\\n88 @ contentScript.js:1\\r\\nn @ contentScript.js:1\\r\\n(anonymous) @ contentScript.js:1\\r\\n(anonymous) @ contentScript.js:1\\r\\nShow 170 more frames\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\nThis was not an issue in the previous version of react-devtools.","number":16501,"user":{"login":"ryan-rushton"},"state":"open","created_at":"2019-08-20T02:40:23Z"},{"id":482612077,"title":"React devtools 4.0.4 (8/18/2019) Expected to find root ID","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\na bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe new dev tools is deprecating react 0.14 in a breaking way.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nReference to [react-devtools#1388](https://github.com/facebook/react-devtools/issues/1388), the stack:\\r\\n\\r\\n![stack](https://user-images.githubusercontent.com/4995935/63243613-abcc9700-c28d-11e9-8350-9cb4b8dac2d4.png)\\r\\n\\r\\nIt happend when you try to unmount element in React 14.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nJust give a dprecated warning instead of breaking the runtime.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 0.14.7","number":16500,"user":{"login":"techird"},"state":"closed","created_at":"2019-08-20T02:28:44Z"},{"id":482596988,"title":"Wrong tab suggestion label in DevTools","body":"The popups that appear when you click on React icon still say \u201cReact tab will appear to the right\u201d. But the tab label has changed. ","number":16499,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-20T01:15:56Z"},{"id":482574919,"title":"Bugfox typo","body":"Fixes a typo in the Change Log - `Bugfox -> Bug fix`\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16498,"user":{"login":"wilsonhyng"},"state":"closed","created_at":"2019-08-19T23:32:20Z"},{"id":482567929,"title":"DevTools: Show component file path","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe new DevTools doesn\'t show the component file path as did the v3 version.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIt would be great to show the component file path, it\'s a really important feature when working in a large codebase.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact DevTools v4 is affected, v3 had it.\\r\\n","number":16497,"user":{"login":"Cretezy"},"state":"closed","created_at":"2019-08-19T23:05:12Z"},{"id":482557603,"title":"DevTools: Write tests for preserving selection","body":"See https://github.com/bvaughn/react-devtools-experimental/pull/215. It would be nice to have test coverage for it.\\r\\n\\r\\n---\\r\\nI got stuck here:\\r\\n\\r\\n```js\\r\\n    const Component = () => <div>Hi</div>;\\r\\n\\r\\n    act(() =>\\r\\n      ReactDOM.render(<Component />, document.createElement(\'div\'))\\r\\n    );\\r\\n    const id = store.getElementIDAtIndex(0);\\r\\n    const rendererID = store.getRendererIDForElement(id);\\r\\n\\r\\n    act(() => {\\r\\n      global.bridge.send(\'selectElement\', { id, rendererID });\\r\\n    })\\r\\n```\\r\\n\\r\\nThis test fails on master because bridge object is shared between agent and store. Separating it and emulating having two bridges didn\'t work because of some regression in the Suspense test. I haven\'t dug into why because the stack trace display is obscured and points to the wrong line in the test. The stack trace display points to the wrong line likely because of regenerator code. The regenerator code is likely coming from `babel-preset-env` thinking we need to polyfill async/await. I don\'t know why `babel-preset-env` doesn\'t realize my Node already has async/await. At that point I punted on this.\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/219","number":16496,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:27:51Z"},{"id":482557409,"title":"DevTools: Components tree is sometimes unexpectedly empty after navigation","body":"1. Open FB page\\r\\n2. Open Components tab\\r\\n3. Change address bar to `https://reactjs.org` and press Enter\\r\\n\\r\\nExpected: Components tab gets populated.\\r\\nActual:\\r\\n\\r\\n<img width=\\"783\\" alt=\\"Screen Shot 2019-04-23 at 7 27 37 PM\\" src=\\"https://user-images.githubusercontent.com/810438/56606380-00247a80-65fe-11e9-988c-2ad3e69eb579.png\\">\\r\\n\\r\\n~~If I **inspect background page**, I see this:~~ (fixed by #229)\\r\\n\\r\\n<img width=\\"652\\" alt=\\"Screen Shot 2019-04-23 at 7 27 12 PM\\" src=\\"https://user-images.githubusercontent.com/810438/56606408-0b77a600-65fe-11e9-9f65-5502401b7e4a.png\\">\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/217","number":16495,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:27:13Z"},{"id":482557333,"title":"DevTools: Audit places where we change tags or disconnect alternates in React","body":"Cases like https://github.com/bvaughn/react-devtools-experimental/issues/197 (where a dehydrated Suspense node turns into a regular one) produce confusing failures because we expect Fiber alternates to be \\"for life\\", whereas in practice they can actually get disconnected by React in some cases. (Search for \\"Disconnect\\" in ReactFiberBeginWork.)\\r\\n\\r\\nAdditionally, I think changing `tag` can also produce confusing failures if it changes from a value that was filtered out, to a value that is not filtered out.\\r\\n\\r\\nWe need to be more proactive about handling these cases when we make such changes to React, and we need to look at existing cases where this happens and whether we can handle them.\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/198","number":16494,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:26:58Z"},{"id":482557184,"title":"DevTools: Fix or silence \\"cannot find fiber with ID\\" warnings when hovering ","body":"Sometimes I see \\"cannot find fiber with ID\\" when hovering over the tree. They are sporadic. I\'ll need to dig into why they happen. But we also need to look at our usage of warnings to make sure they\'re either actionable or gated by DEV/DEBUG.\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/166","number":16493,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:26:25Z"},{"id":482557107,"title":"DevTools:  Commit picker should register leaving the picker at a side as setting a terminal value","body":"Seems non-ideal. Typically range controls handle this case.\\r\\n\\r\\n![Screen Recording 2019-04-12 at 07 54 PM](https://user-images.githubusercontent.com/810438/56059844-0e041100-5d5d-11e9-892c-f3872414ffaa.gif)\\r\\n\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/141","number":16492,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:26:10Z"},{"id":482557034,"title":"DevTools: Too deep trees can cause a stack overflow","body":"With 10,000 item nesting in `DeeplyNestedComponents` case:\\r\\n\\r\\n<img width=\\"432\\" alt=\\"Screen Shot 2019-04-06 at 15 16 02\\" src=\\"https://user-images.githubusercontent.com/810438/55670638-f3bec480-587e-11e9-850d-8a247aa42f7c.png\\">\\r\\n\\r\\nNot super realistic but we could fix this by avoiding recursion in the traversal.\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/76","number":16491,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-19T22:25:53Z"},{"id":482556957,"title":"DevTools: Check if accessibility regressions exist compared to old DevTools","body":"Before this becomes stable, we need to check if we are regressing accessibility on any important existing interactions.\\r\\n\\r\\nAt least, we should probably make the tree view focusable.\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/52","number":16490,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:25:36Z"},{"id":482556895,"title":"DevTools: Suspense Debugger","body":"### MVP\\r\\n- [x] Initial prototype with a tree and toggling.\\r\\n- [x] Tree should reflect real suspense state.\\r\\n- [ ] Make it less fragile.\\r\\n  - [x] Does findDOMNode issue affect this?\\r\\n- [ ] Ensure expensive tree construction doesn\'t run unless you\'re on the tab.\\r\\n- [ ] Improve navigation so the user doesn\'t get lost.\\r\\n  - [ ] Maybe flash nodes.\\r\\n  - [ ] Maybe offer a \\"finder\\" tool.\\r\\n- [ ] Sync selection with the Components tab.\\r\\n- [ ] Make it look nice. @bvaughn \\r\\n\\r\\n### Future\\r\\n- [ ] Consider a fuzzer.\\r\\n- [ ] Considering filtering by viewport.\\r\\n- [ ] Optimize the tree updates.\\r\\n  - [ ] Consider listening to operations. Don\'t forget to handle ancestor reorder.\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/43","number":16489,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:25:26Z"},{"id":482556701,"title":"DevTools: Re-enable postMessage transferable for faster ArrayBuffer transfers","body":"I got this on FB.com sandbox:\\r\\n\\r\\n<img width=\\"815\\" alt=\\"screen shot 2019-03-01 at 1 15 24 pm\\" src=\\"https://user-images.githubusercontent.com/810438/53640457-26dcbb00-3c24-11e9-828f-a987ffeec4da.png\\">\\r\\n\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/25","number":16488,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:24:43Z"},{"id":482556578,"title":"DevTools: Crashes and warnings when quickly collapsing","body":"This is weird. Happens if I select a node deeply and then long-press \\"left\\" arrow.\\r\\n\\r\\n```\\r\\nInvalid index 154 specified; store contains 154 items.\\r\\n\\r\\nUncaught Invariant Violation: Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\\r\\n    at ReactError (file:///Users/gaearon/p/react-devtools-experimental/shells/dev/build/devtools.js:8529:40)\\r\\n```\\r\\n\\r\\nIt starts with \\"invalid index\\" and then gives me different React invariants or warnings depending on how lucky I am.\\r\\n\\r\\n![Screen Recording 2019-04-25 at 05 58 PM](https://user-images.githubusercontent.com/810438/56754075-fcbafb80-6783-11e9-8fe6-84aa29d1c120.gif)\\r\\n\\r\\n---\\r\\nMore weird symptoms:\\r\\n\\r\\n<img width=\\"889\\" alt=\\"Screen Shot 2019-04-25 at 6 38 22 PM\\" src=\\"https://user-images.githubusercontent.com/810438/56756281-5671f480-6789-11e9-8d0b-631a5217e63b.png\\">\\r\\n\\r\\n---\\r\\n<img width=\\"832\\" alt=\\"Screen Shot 2019-04-25 at 6 41 37 PM\\" src=\\"https://user-images.githubusercontent.com/810438/56756492-c7191100-6789-11e9-8814-cb849590ee01.png\\">\\r\\n\\r\\n---\\r\\nThis \\"fixes\\" it:\\r\\n\\r\\n```diff\\r\\n       runWithPriority(UserBlockingPriority, () => dispatch(action));\\r\\n-      next(() => dispatch({ type: \'UPDATE_INSPECTED_ELEMENT_ID\' }));\\r\\n+      runWithPriority(UserBlockingPriority, () => dispatch({ type: \'UPDATE_INSPECTED_ELEMENT_ID\' }));\\r\\n     },\\r\\n```\\r\\n\\r\\nSo I suspect it\'s a bug with `Scheduler.next()`.\\r\\n\\r\\n---\\r\\nThis also looks funky. Note how somewhere in the middle right pane gets \\"stuck\\" showing the same cycle of values:\\r\\n\\r\\n![Screen Recording 2019-04-25 at 07 36 PM](https://user-images.githubusercontent.com/810438/56759733-8b824500-6791-11e9-95ba-d4d3630a4c5e.gif)\\r\\n\\r\\n---\\r\\nReact bug: https://github.com/facebook/react/issues/15512\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/228","number":16487,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:24:17Z"},{"id":482555597,"title":"DevTools: Elements height being clipped by console","body":"![clipping-bug](https://user-images.githubusercontent.com/10223856/55770859-3984b400-5a5c-11e9-8ae4-e51ecf1e4f51.gif)\\r\\n\\r\\nThis one was kinda tricky to reproduce, but basically the steps are:\\r\\n\\r\\n1. Click the inspect element and hover any component\\r\\n2. Open the console pressing esc\\r\\n3. Move mouse back to devtools and click again the inspect button (to stop inspection).\\r\\n4. Close the console with esc.\\r\\n\\r\\n(ps: sorry for the gif quality, I don\'t know how to properly convert the .mov to .gif)\\r\\n\\r\\n---\\r\\nOriginally reported by @lucasecdb via https://github.com/bvaughn/react-devtools-experimental/issues/110","number":16486,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:20:56Z"},{"id":482555341,"title":"DevTools: Overlay stays after devtools are closed","body":"1. Hover over a node so you see its bounding box over the page\\r\\n2. Without moving your mouse, press Cmd-Opt-J to hide the devtools\\r\\n\\r\\nResult: The overlay stays (even if you move your mouse or reopen React devtools!)\\r\\n\\r\\nExpected: It disappears.\\r\\n\\r\\n---\\r\\nOriginally reported by @sophiebits via https://github.com/bvaughn/react-devtools-experimental/issues/296","number":16485,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-19T22:20:03Z"},{"id":482555047,"title":"DevTools: Should be able to add a prop that is not yet set","body":"Right now I can inspect a component and edit its props but I could not find a way to add a _new_ prop that wasn\'t already set.\\r\\n\\r\\n---\\r\\nOriginally reported by @steveluscher via https://github.com/bvaughn/react-devtools-experimental/issues/300","number":16484,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-19T22:19:11Z"},{"id":482551102,"title":"DevTools: Better linking between browser Performance tab and DevTools Profiler","body":"Notes from a chat with Benoit:\\r\\n\\r\\nIt would be nice if starting profiling (or reload and profiling) in the browser auto-started profiling in DevTools.\\r\\n\\r\\nIt would also be nice if viewing a range of time in the Performance tab narrowed down the commits within the Profiler. At least starting the profilers at the same time would enable a manual match-up.\\r\\n\\r\\nTo my knowledge, none of the currently available APIs (including experimental) would enable us to support this level of integration.\\r\\n\\r\\n---\\r\\nIf we were to make use of the DevTools protocol, we could [`Profiler.start`](https://vanilla.aslushnikov.com/?Profiler.start) and [`Profiler.stop`](https://vanilla.aslushnikov.com/?Profiler.stop) the built-in profiler in sync with React\'s own profiler. Chrome\'s profiler also dispatches [`Profiler.consoleProfileStarted`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileStarted) and [`Profiler.consoleProfileFinished`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileFinished) events which we _could_ use to follow the browser\'s profiler if we wanted to.\\r\\n\\r\\nThere do not appear to be any APIs/events for syncing the zoomed-in range.\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/37","number":16483,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:07:31Z"},{"id":482550920,"title":"DevTools: Should Profiler surface the base duration?","body":"Benoit shared feedback that it would be helpful to show the base duration for the tree (and/or selected element) to get a sense of the total cost over time. (Not sure yet what we\'d call this.)\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/55","number":16482,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:07:02Z"},{"id":482550722,"title":"DevTools: Collect more info when profiling","body":"Some feedback I\'ve heard from a DevTools user (roughly transcribed by me):\\r\\n\\r\\n> I\'m trying to pinpoint those renders...with hooks, it\'s sometimes more unclear to me why something is rendering...I generally don\'t use devtools much anywhere. I use console.log. But Redux devtools worked really well for me because I could see when things were changing and what exactly changed.\\r\\n\\r\\nMaybe we could add an opt-in mode (in Settings > Profiler) to collect more data when profiling about _why_ a component rendered. For example, if `props` or `state` changed, we could show which keys changed (just their name, not their values). Maybe we could do something similar for context and for hooks?\\r\\n\\r\\nThen we could add this information to the right side panel for the selected fiber in the Profiler UI.\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/98","number":16481,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:06:29Z"},{"id":482550567,"title":"DevTools: Fix disabled hooks lint rule","body":"Disabled via 00f6466\\r\\n\\r\\nMore context at https://github.com/bvaughn/react-devtools-experimental/pull/154#discussion_r275134664\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/156","number":16480,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T22:06:06Z"},{"id":482547462,"title":"[react-events] Rely on \'buttons\' rather than \'button\'","body":"The semantics of \'button\' on events differs between PointerEvent and\\r\\nMouseEvent, whereas they are the same for \'buttons\'. Furthermore, \'buttons\'\\r\\nallows developers to determine when multiple buttons are pressed as the same\\r\\ntime.\\r\\n\\r\\nhttps://w3c.github.io/pointerevents/#the-button-property","number":16479,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-19T21:57:15Z"},{"id":482547444,"title":"DevTools: Component bookmarks","body":"Product developers sometimes find it useful to jump back and forth between a few components in a tree. Currently this requires scrolling or using the selection tool. Maybe we could allow you to temporarily bookmark one or more components somehow? Then the existing Search interface could maybe be repurposed to let you step between bookmarked components (when there\'s no search text).\\r\\n\\r\\nThese bookmarks would probably not need to be persisted between reloads, so they could be associated with the specific in-memory element<sup>1</sup>.\\r\\n\\r\\n<sup>1</sup> Although this association would be lost with a filter change.\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/305","number":16478,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:57:12Z"},{"id":482547222,"title":"DevTools: Profiler: Show which hooks changed","body":"# \\"Can you show which hooks changed?\\"\\r\\n\\r\\n...is a question I\'ve heard a couple of times with regard to the new Profiler change-tracking feature. This request is certainly understandable, but it presents a couple of challenges:\\r\\n\\r\\n1. Identifying which hooks values change would requires shallowly re-rendering each function component.\\r\\n2. Identifying a hook in a non-ambiguous way requires displaying the full hooks tree structure (since hooks aren\'t named).\\r\\n\\r\\nLet\'s take each of a look at each of these below.\\r\\n\\r\\n## 1 - Identifying which hooks values change\\r\\n\\r\\nOne of the challenge for DevTools when it comes to hooks is identifying custom hooks. Sebastian\'s [proposed solution](https://github.com/bvaughn/react-devtools-experimental/blob/master/src/backend/ReactDebugHooks.js) is that DevTools temporarily overrides React\'s hooks dispatcher while it shallowly re-renders the component. During the re-render, each time one of the built-in hooks is used, our override implementation parses the stack to identify \\"custom hooks\\" (functions higher up in the callstack that begin with \\"use\\"). After render is completed, we reassemble this information into a tree structure which DevTools can display.\\r\\n\\r\\nCurrently we only do this  shallow render when a component is [inspected](https://github.com/bvaughn/react-devtools-experimental/blob/master/OVERVIEW.md#inspecting-an-element), but in order for us to track which hooks have changed while profiling, we would need to shallowly render _every_ component using hooks during the profiling session. Mostly likely we would have to do this during the performance sensitive \\"commit\\" phase since that\'s when DevTools is notified of an update.\\r\\n\\r\\nI think we could do better than re-running the above hooks override for every component on every commit if we:\\r\\n* Created a map of Fiber to cached hooks tree structure.\\r\\n* Lazily populate the above map (by shallow re-rendering) only when a component was updated for the first time.\\r\\n* Compared Fiber `memoizedState`s to identify changes on future commits and map them back to the tree structure based on their position in the list structure. <sup>1</sup>\\r\\n\\r\\nHowever, even with the above optimizations this would still add significant overhead to a performance sensitive phase.\\r\\n\\r\\n<sup>1</sup> I think this should work but might also end up being complicated to implement.\\r\\n\\r\\n## 2 - Identifying a hook\\r\\n\\r\\nAlthough the variables that hooks values are assigned to are meaningfully named, the hooks themselves are unnamed. Because of this, DevTools has no feasible way of identifying a hook short of displaying the entire hooks tree structure. Consider the following example code:\\r\\n\\r\\n```js\\r\\nfunction useCustomHook(...) {\\r\\n  const [foo, setFoo] = useState(...);\\r\\n  // ...\\r\\n}\\r\\n\\r\\nfunction ExampleComponent(props) {\\r\\n  const [bar, setBar] = useState(...);\\r\\n  const [baz, setBaz] = useState(...);\\r\\n  const custom = useCustomHook(...);\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\nThe example above shows 4 hooks: three `useState` and one custom. Let\'s say that \\"foo\\" and \\"baz\\" changed in a particular render. How would DevTools identify this? It could just show \\"two state hooks\\" but that\'s not very helpful. I think the only way we could identify it would be to show the entire tree, and visually highlight which hooks in it have changed:\\r\\n\\r\\n```\\r\\nState\\r\\nState *\\r\\nCustomHook\\r\\n  State *\\r\\n```\\r\\n\\r\\nThis is _okay_ but it\'s not great unless the developer is cross-referencing the component (and probably the custom hooks definition as well). To help with this, we could also _show the values_ but now we\'re adding more overhead in terms of trackin and bridge traffic.\\r\\n\\r\\n## In summary\\r\\n\\r\\nClearly both of these challenges can be overcome but they are non-trivial to implement and they will certainly add more runtime overhead to the profiler. Because of this, it may be a while before we add this feature to the DevTools.\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/312","number":16477,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:56:36Z"},{"id":482547030,"title":"DevTools: Improve props/state value editing interface","body":"Follow up to a discussion thread on #294 and a Messenger chat with @gaearon.\\r\\n\\r\\nThe current UI for editing props/state/hooks values has a couple of shortcomings:\\r\\n* strings/numeric values are sometimes of an unclear type. (DevTools uses the correct `<input type>` but this is subtle. Showing e.g. quotation marks around strings could be more helpful.\\r\\n* `null` initial values can only become strings at the moment. (DevTools does not attempt to parse numeric or boolean values\xa0and change the input type. If it did, we would probably also need to enable a way for you to opt back out of that input type somehow in case it was incorrect.)\\r\\n* fields that maybe support multiple types (e.g. string | number) are locked into a single type (whichever type they happen to be initially).\\r\\n\\r\\nAdditional quirks that might be worth ironing out:\\r\\n* Non-editable strings are currently wrapped in quotation marks but editable ones aren\'t.\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/321","number":16476,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-19T21:55:59Z"},{"id":482545718,"title":"React DevTools: Welcome screen keeps showing up","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\u201cWelcome to the new React DevTools!\u201d message blocks the devtool panel every time the it is opened.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n1. Open a website with React with DevTools installed.\\r\\n2. Open the Component tab.\\r\\n3. Dismiss the welcome screen.\\r\\n4. Close the devtools and open it again.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nDismissing the \u201cWelcome to the new React DevTools!\u201d message should be permanent.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nDevTools: 4.0.5\\r\\nChrome: 77.0.3865.35","number":16475,"user":{"login":"proteriax"},"state":"closed","created_at":"2019-08-19T21:52:14Z"},{"id":482545095,"title":"DevTools: Named hooks","body":"## The problem\\r\\n\\r\\nOne common piece of feedback about DevTools hooks integration is that hooks have no name and can be confusing. Consider the following example:\\r\\n```js\\r\\nfunction useSomeCustomHook() {\\r\\n  const [foo, setFoo] = useState(true);\\r\\n  const [bar, setBar] = useState(false);\\r\\n\\r\\n  // ...\\r\\n}\\r\\n\\r\\nfunction Example() {\\r\\n  const baz = useSomeCustomHook();\\r\\n\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\nCurrently in DevTools the above component would be displayed as follows:\\r\\n```\\r\\nSomeCustomHook:\\r\\n  State: true\\r\\n  State: false\\r\\n```\\r\\n\\r\\nThis information isn\'t as rich as we would prefer. \u2639\ufe0f\\r\\n\\r\\nThe next question is often: \\"can you use the name of the variable the hook return value is assigned to?\\" but this is tricky because DevTools doesn\'t actually have any way to access that variable. (Even if DevTools has a handle on the `Example` function above, how would it access the `useSomeCustomHook` function?)\\r\\n\\r\\n## The proposal\\r\\n\\r\\nThe solution to this would be some form of user-defined metadata (preferably generated by a code transform). Building on the precedent of the `useDebugValue` hook (https://github.com/facebook/react/pull/14559), we might introduce a new no-op hook e.g. `useDebugName`.\\r\\n\\r\\nThe above example could make use of this hook like so:\\r\\n```js\\r\\nfunction useSomeCustomHook() {\\r\\n  const [foo, setFoo] = useState(true);\\r\\n  useDebugName(\\"foo\\"); // injected by Babel transform\\r\\n  const [bar, setBar] = useState(false);\\r\\n  useDebugName(\\"bar\\"); // injected by Babel transform\\r\\n\\r\\n  // ...\\r\\n}\\r\\n\\r\\nfunction Example() {\\r\\n  const baz = useSomeCustomHook();\\r\\n\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\nDevTools could then display something like:\\r\\n```\\r\\nSomeCustomHook:\\r\\n  State (foo): true\\r\\n  State (bar): true\\r\\n```\\r\\n\\r\\n## Implementation details\\r\\n\\r\\nThe new `useDebugName` hook might be a noop hook provided by React (similar to `useDebugValue`) _or_ it could even be an export from the (soon to be released [`react-debug-hooks` package](https://github.com/facebook/react/blob/master/packages/react-debug-tools/)). The key concerns would be that:\\r\\n1. It has no effect (and adds no overhead) when DevTools is not present.\\r\\n2. Not calling it at all (or only calling it for _some_ hooks) should not break or corrupt anything.\\r\\n\\r\\nDevTools could override the no-op `useDebugName` implementation before inspecting a component and automatically associate the provided name with the most recently called native hook.\\r\\n\\r\\nFor example, the following code should only result in one named hook (the second `useState` call).\\r\\n```js\\r\\nconst [foo, setFoo] = useState(true);\\r\\nconst [bar, setBar] = useState(false);\\r\\nuseDebugName(\\"bar\\"); // injected by Babel transform\\r\\nconst [baz, setBaz] = useState(true);\\r\\n```\\r\\n\\r\\nBeing able to support sparse name metadata would be important for third party code (that might not be transformed to supply the metadata).\\r\\n\\r\\nA code transform would be ideal for this scenario because manual annotation would probably be cumbersome. This could also be marketed as a **DEV-only transform** so as not to bloat production bundles with display names. We might even try to detect the env and throw if it isn\'t DEV (like https://github.com/facebook/react/pull/15939).\\r\\n\\r\\n## Further considerations\\r\\n\\r\\n### Custom hooks?\\r\\n\\r\\nIn some cases, custom hooks might also be ambiguous. Consider the `useSubscription` hook (https://github.com/facebook/react/pull/15022):\\r\\n```js\\r\\nfunction Example() {\\r\\n  const foo = useSubscription(...);\\r\\n  const bar = useSubscription(...);\\r\\n\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\nCurrently in DevTools the above component would be displayed as follows:\\r\\n```\\r\\nSubscription: \\"some value\\"\\r\\n  State: Object\\r\\nSubscription: \\"some other  value\\"\\r\\n  State: Object\\r\\n```\\r\\n\\r\\nMaybe the value alone (provided by `useDebugValue`) could be enough to uniquely identify the hook, but I suspect in many cases it might not be sufficient. Should we then use `useDebugName` for custom hooks as well?\\r\\n\\r\\nI think it would be more fragile given the way our custom hooks detection logic is implemented. Custom hooks are not identified until after a component has finished rendering. In order for us to associate names with custom hooks, we would need to maintain a stack of names. This could lead to potential mismatches though in the event that `useDebugName` was called more (or fewer) times than there are custom hooks.\\r\\n\\r\\nFor example, consider the following code:\\r\\n```js\\r\\nfunction useSomeCustomHook() {\\r\\n  const [foo, setFoo] = useState(true);\\r\\n  useDebugName(\\"foo\\");\\r\\n  useDebugName(\\"effectively ignored\\");\\r\\n  const [bar, setBar] = useState(false);\\r\\n  const [baz, setBaz] = useState(false);\\r\\n  useDebugName(\\"baz\\");\\r\\n\\r\\n  // ...\\r\\n}\\r\\n````\\r\\n\\r\\nThe proposed implementation of `useDebugName` would be robust enough to handle naming \\"foo\\" and \\"baz\\" states and leaving \\"bar\\" as anonymous state hook. If we were maintaining a stack of names however, this discrepency would be more difficult to manage.\\r\\n\\r\\nPerhaps there is a clever solution to this problem. I would probably suggest leaving it out of the initial implementation though and only revisiting if we determine it\'s a necessary feature.\\r\\n\\r\\n## Alternatives considered\\r\\n\\r\\n### Pass debug name as an additional (unused) parameter\\r\\n\\r\\nAn alternative approach to calling a separate hook for naming purposes would be to pass the display name as an additional parameter to the native hook, e.g.:\\r\\n```js\\r\\nfunction useSomeCustomHook() {\\r\\n  const [foo, setFoo] = useState(true, \\"foo\\");\\r\\n  const [bar, setBar] = useState(false, \\"bar\\");\\r\\n\\r\\n  // ...\\r\\n}\\r\\n\\r\\nfunction Example() {\\r\\n  const baz = useSomeCustomHook();\\r\\n\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Pros**:\\r\\n* Less code.\\r\\n* Does not introduce a new hook.\\r\\n\\r\\n**Cons**:\\r\\n* It requires knowledge about the arity of native hooks. Ror example `useReducer` has optional parameters that the transform (or manual code) would need to be aware of to avoid a runtime error.\\r\\n* It would not be possible to support naming custom hooks (if that\'s something we decided to do).\\r\\n\\r\\n### Load source code (with source maps) and parse for name\\r\\nWe could use an extension API like [`Resource.getContent`](https://developer.chrome.com/extensions/devtools_inspectedWindow#method-Resource-getContent) to load the source code (including custom hooks) and parse it determine the hook/variable names. Essentially this would work like the proposed transform above, but at runtime.\\r\\n\\r\\n**Pros**:\\r\\n* Does not require a Babel transform step. (\\"Just works\\")\\r\\n* Does not potentially bloat production builds (if transform is used incorrectly).\\r\\n\\r\\n**Cons**:\\r\\n* Adds additional async loading (complexity) to suspense cache used for hooks inspection.\\r\\n* May have difficulty parsing certain code patterns (e.g. Babel\'s destructuring transform) unless we embed a full parser.\\r\\n\\r\\n### Call `toString` on the function component and parse for name\\r\\nA possible 80/20 variant of the above proposal would be to simply call` toString` on the function component and parse any top-level hooks.\\r\\n\\r\\n**Pros**:\\r\\n* Does not require a Babel transform step. (\\"Just works\\")\\r\\n* Does not potentially bloat production builds (if transform is used incorrectly).\\r\\n* Does not require any additional asynchronous code.\\r\\n\\r\\n**Cons**:\\r\\n* Only supports top-level hooks (used directly within the function).\\r\\n* May have difficulty parsing certain code patterns (e.g. Babel\'s destructuring transform) unless we embed a fullp parser.\\r\\n\\r\\n### Use a Babel transform to leave an inline comment (and call `toString` to search for it)\\r\\nRather than inserting a call to a new custom hook, our code transform could just insert an inline comment with the name. We could then parse the code to find the inline comment, e.g.:\\r\\n```js\\r\\nfunction Example() {\\r\\n  /* hook:foo:Example.react.js:3 */\\r\\n  const foo = useSubscription(...);\\r\\n  /* hook:bar:Example.react.js:5 */\\r\\n  const bar = useSubscription(...);\\r\\n\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Pros**:\\r\\n* Does not potentially bloat production builds (if transform is used incorrectly).\\r\\n* Potentially sidesteps difficulty of parsing certain code patterns (e.g. Babel\'s destructuring transform).\\r\\n\\r\\n**Cons**:\\r\\n* Only supports top-level hooks (used directly within the function).\\r\\n* Still requires an explicit transform step.\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/323","number":16474,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:50:31Z"},{"id":482544795,"title":"DevTools: Switch between \\"Rendered At\\" renders using keyboard arrow keys","body":"My favorite devtools feature, \\"Why did this render?\\", has a remaining problem: it\'s too hard to flip through a long list of renders in the Rendered At list to find an interesting render. I know I can use the mouse (or Tab and then Space) to move to the next render, but that\'s painful if there are 50+ renders to work through.\\r\\n\\r\\nSuggestion: when an item in the Rendered At list has focus, then up/down arrows should change the selected render (and scroll the pane up/down if the selected render isn\'t visible). \\r\\n\\r\\nThis would be helpful for accessibility too.\\r\\n\\r\\nI\'ll file a separate issue for keyboard support for the flamegraph view. Keyboard access to that view will be much harder to implement so it makes sense to do it separately.\\r\\n\\r\\n---\\r\\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/332","number":16473,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:49:37Z"},{"id":482544667,"title":"DevTools: Keyboard arrow-key navigation for the flamegraph view","body":"It would be good to have keyboard navigation on the flamegraph view to make it easier and faster to scoot around to different components in the same render. \\r\\n\\r\\nGiven that flamegraph is implemented in SVG and given the complexity of navigating through an uneven grid, I suspect keyboard access is probably beyond the scope of near-future DevTools releases, but wanted to file this issue while it\'s top-of-mind. \\r\\n\\r\\nExpected behavior: \\r\\n* There should be a selected/focused UI of some sort around the active component. This could be a black or colored outline around the currently selected component, or perhaps a background pattern like diagonal hatching.  IMHO, this would be valuable even without keyboard support! \\r\\n* Up arrow should change selection to the parent component\\r\\n* Left/Right arrows should move selection to the prev/next sibling components. Should wrap when at the beginning or end of the line.\\r\\n* Tab should move focus to the right pane (this matches behavior of other DevTools tabs like Elements)\\r\\n* Shift+Tab should move focus to the rightmost control in the toolbar (currently this is the \\"next commit\\" button)\\r\\n\\r\\nThis is a companion issue to #332 which asks for keyboard access for the \\"Rendered At\\" list. Compared to this suggestion, #332 should be much easier to implement so I split them.\\r\\n\\r\\n---\\r\\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/333","number":16472,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:49:15Z"},{"id":482544193,"title":"DevTools: React Native: Support reload-and-profile be an important feature","body":"React DevTools v4 adds a new reload and profile feature to measure perf for application \\"mount\\" ([although it required a bit of hacking](https://github.com/bvaughn/react-devtools-experimental/pull/35)). I don\'t feel knowledgeable enough about React Native to tackle it, so my current plan is to just **not** support this feature for RN.\\r\\n\\r\\nIf we did decide to support it,I think we would need to solve the following:\\r\\n\\r\\n1. A reload hook on the backend that worked for all bundle types (not just DEV).\\r\\n2. Some assurance that the backend will be injected/initialized _before_ the first mount/commit (or a mechanism to delay the first commit, like we do in the browser).\\r\\n3. Some way for third party code to request a production+profiling build ([similar to how DOM does it](https://fb.me/react-profiling)).\\r\\n4. A sync storage mechanism (or some other way for DevTools could leave a flag for itself so it knows to begin profiling immediately after reload+connection).\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/336","number":16471,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:47:53Z"},{"id":482543940,"title":"DevTools: React Native: Remember saved component filters between reloads","body":"DevTools v4 added a pretty powerful new component filtering feature that enables devs to filter out components by type, name, or file system location. Because these filters can be a bit elaborate to create, they are saved between sessions to improve dev experience.\\r\\n\\r\\n**Unfortunately, I don\'t think I am going to be able to support the persistence functionality for React Native.** (In other words, filters will be forgotten each time you reload the app.)\\r\\n\\r\\nThe reason for this is a mix of timing and context. The biggest limiting factor is the lack of a synchronous storage option. React Native has a couple of faux sync storage options, but they just in-memory wrappers around an async storage layer and they require async initialization. That _could_ work if the React Native backend waited to initialize DevTools until it also initialized the async storage layer, _but_ this has implications on reload-and-profile support (#336).\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/337","number":16470,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:47:06Z"},{"id":482543159,"title":"DevTools: Triggering Error Boundaries from DevTools","body":"It would be useful to force components into an error state, in order to test error boundaries (similar to how the suspense toggle works).\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/340","number":16469,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:44:50Z"},{"id":482542595,"title":"Remember saved component filters by url or in bookmarks","body":"It would be cool if it will support saving filter based on url or some bookmarks. I think it will be really useful for switching between different projects. And seems that bookmarks is better solution because usually people have some different stages like production/pre-production/local development.\\r\\n\\r\\n---\\r\\nOriginally reported by @7rulnik via https://github.com/bvaughn/react-devtools-experimental/issues/359","number":16468,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:43:09Z"},{"id":482541565,"title":"DevTools: Improve HOC search UX","body":"Building on top of #360\\r\\n\\r\\nWe could probably improve the search UX in a couple of ways:\\r\\n\\r\\n* Visually indicate when the \\"match\\" is because of a HOC name, e.g.\\r\\n<img width=\\"161\\" alt=\\"Screen Shot 2019-08-03 at 1 54 21 PM\\" src=\\"https://user-images.githubusercontent.com/29597/62416804-36f32f00-b5f6-11e9-9150-e32f652c7f98.png\\">\\r\\n\\r\\n* Match built-in HOC types (e.g. searching \\"me\\" should match `React.memo` HOCs, searching \\"f\\" should match `React.forwardRef`, etc.)\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/365","number":16467,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:40:16Z"},{"id":482541147,"title":"DevTools: Don\'t show \\"context\\" for classes without either contextType or contextTypes","body":"* Don\'t show \\"context\\" for classes without either contextType or contextTypes\\r\\n* For classes with contextTypes, change the label to \\"legacy context\\" instead\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/368","number":16466,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-19T21:39:10Z"},{"id":482540711,"title":"DevTools: Occasional FOUC when loading DevTools","body":"Seems to only happen the first time DevTools is opened after being installed (or perhaps the first time after the browser is opened).\\r\\n\\r\\n---\\r\\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/381","number":16465,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:38:01Z"},{"id":482540253,"title":"DevTools: Tooltips appear to be Times New Roman in Firefox","body":"Windows Firefox:\\r\\n![image](https://user-images.githubusercontent.com/91933/63136723-30669f00-bf88-11e9-9268-896f5e4ddf5e.png)\\r\\n\\r\\nLooks OK in Chrome:\\r\\n![image](https://user-images.githubusercontent.com/91933/63136731-3eb4bb00-bf88-11e9-8b1f-d7dd6f8ce629.png)\\r\\n\\r\\n---\\r\\nOriginally reported by @Daniel15 via https://github.com/bvaughn/react-devtools-experimental/issues/382","number":16464,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-19T21:36:44Z"},{"id":482539346,"title":"DevTools: An easier way to see all siblings","body":"I have a particular pattern that I struggle with when navigating deep trees in devtools: I want to see all siblings of a node together.\\r\\n\\r\\nSay I\'m in the middle of something and I wonder what are all nodes on the same level. It\'s super hard to actually get to that state. I wonder if we could tweak \\"left\\" button to do that as an intermediate state.\\r\\n\\r\\n* first press: collapse the current node\\r\\n* second press: collapse all siblings (new)\\r\\n* third press: move to the parent\\r\\n\\r\\nMaybe this is too crazy :-) Or maybe there\'s another mechanic that can achieve the same effect. The goal here is to be able to make sense of the tree structure by going _upwards_. Currently implementation details of children prevent me from seeing it. (At least, with the \\"expand\\" mode on \u2014 which is now on by default.)\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384","number":16463,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-19T21:34:16Z"},{"id":482539067,"title":"DevTools: Fully disable 0.14 support","body":"It\u2019s confusing that 0.14 or earlier is in half-working state where it displays a tree (but incorrectly). We should detect it and fully disable if it doesn\u2019t work. Or fix it.\\r\\n\\r\\nIf we go the route of disabling support:\\r\\n1. DevTools should show a warning message that clearly indicates the version of React isn\'t supported. (This is probably a good idea for v13 and older anyway.)\\r\\n2. DevTools should not throw any errors.\\r\\n\\r\\n---\\r\\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384","number":16462,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-19T21:33:32Z"},{"id":482517504,"title":"Initial state from props","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature Request\\r\\n\\r\\n**What is the current behavior?**\\r\\nCurrently, the only way to reflect a prop change that serves as the initial state for the `useState` hook is via an explicit `useEffect` call.\\r\\n\\r\\n```js\\r\\nconst TodoList = ({ todos: initialTodos }) => {\\r\\n  const [todos, setTodos] = useState(initialTodos);\\r\\n\\r\\n  useEffect(() => setTodos(initialTodos), [initialTodos]);\\r\\n  \\r\\n  return (\\r\\n    <ul>\\r\\n      {todos.map(todo => (\\r\\n        <li onClick={/* Do something that setTodos */}>{todo.title}</li>\\r\\n      )}\\r\\n    </ul>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nThis is not particularly a rare use case. Like, displaying any filterable list in which the items need to be acted upon is basically a use case.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe first thing that comes to mind, would be adding a second argument, which is, you guessed it, a dependency array.\\r\\n\\r\\n```js\\r\\nconst TodoList = ({ todos: initialTodos }) => {\\r\\n  const [todos, setTodos] = useState(initialTodos, [initialTodos]);\\r\\n  \\r\\n  return (\\r\\n    <ul>\\r\\n      {todos.map(todo => (\\r\\n        <li onClick={/* Something that setTodos */}>{todo.title}</li>\\r\\n      )}\\r\\n    </ul>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nThere\'s probably a lot that I\'m missing and there might be an obvious reason why this is not the actual behavior.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nLatest.","number":16461,"user":{"login":"nachoaIvarez"},"state":"closed","created_at":"2019-08-19T20:41:18Z"},{"id":482457127,"title":"Throw on unhandled SSR suspending","body":"This adds a throw for suspending outside of `Suspense`, equivalent to what we do on the client side.","number":16460,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-19T18:18:45Z"},{"id":482455738,"title":"chore(ReactDomComponent): refactor code to avoid ambiguity","body":"Minor refactor to avoid ambiguities.","number":16459,"user":{"login":"jamesgeorge007"},"state":"closed","created_at":"2019-08-19T18:15:39Z"},{"id":482455270,"title":"chore(ReactDomComponent): refactor code","body":"Refactor code to a more concise version.","number":16458,"user":{"login":"jamesgeorge007"},"state":"closed","created_at":"2019-08-19T18:14:35Z"},{"id":482428633,"title":"Error: \\"Could not find node with id \\"6002\\" in commit tree\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\nSimply click on profiler and baam!!\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.3-95ffd3c\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11441\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11387)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11920)\\r\\n    at _i (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277079)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n\\r\\nComponent stack: in _i\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ha\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Ul","number":16457,"user":{"login":"Rutulpatel7077"},"state":"closed","created_at":"2019-08-19T17:12:37Z"},{"id":482399202,"title":"React DevTools: styling overrides global styles","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThis is a very specific case - there are some styles leaking from react devtools, if you use it in your own application directly. Specifically these lines: https://github.com/facebook/react/blob/devtools-v4-merge/packages/react-devtools-shared/src/devtools/views/root.css#L174-L178.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nIt\'s funny, I can give a *real* CodeSandbox editor now! You can see the styling on the editor elements here: https://codesandbox.io/s/new.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nNo leaking styles. Ideally the `* {` would be prefixed by an id or classname specific for the devtools. I think this should be possible with the styling used by the devtools. I can open a PR to fix this if everyone agrees on this fix.\\r\\n\\r\\ncc @bvaughn \\t","number":16456,"user":{"login":"CompuIves"},"state":"open","created_at":"2019-08-19T16:07:25Z"},{"id":482360605,"title":"[ESLint] Forbid top-level use*() calls","body":"In the initial release of `eslint-plugin-react-hooks/rules-of-hooks`, we forbid this:\\r\\n\\r\\n```js\\r\\nfunction foo() {\\r\\n  useState(); // BAD: calling a Hook from a non-Hook\\r\\n}\\r\\n```\\r\\n\\r\\nBut we didn\'t forbid this:\\r\\n\\r\\n```js\\r\\n// top-level code\\r\\n\\r\\nuseState(); // ALSO BAD: calling a Hook from top level\\r\\n```\\r\\n\\r\\nThis PR forbids it in the lint rule.\\r\\n\\r\\n### Why did it work before?\\r\\n\\r\\nWe didn\'t ban it at the time for three reasons:\\r\\n\\r\\n1. We didn\'t know how Hooks would be received by the community. Taking the whole `use*` prefix seemed dicey and we didn\'t want to push the convention harder than absolutely necessary.\\r\\n2. It is a runtime crash anyway, so you find out about this immediately.\\r\\n3. There\'s a `history` library whose 2.x versions had an API like this:\\r\\n\\r\\n```js\\r\\nconst {createHistory, useBasename} = require(\'history-2.1.2\');\\r\\nconst browserHistory = useBasename(createHistory)({\\r\\n  basename: \'/\',\\r\\n});\\r\\n```\\r\\n\\r\\nSo banning this pattern would create a false positive for it.\\r\\n\\r\\n### Why ban it now?\\r\\n\\r\\nIf your environment uses \\"inline requires\\" (opt-in on React Native), you might not get a crash at all. Instead, **the top level initialization of a module may run as a result of some component\'s render**, and so Hooks would accidentally \\"belong\\" to the parent. That\'s confusing. While \\"inline requires\\" aren\'t very common on the web, they\'re a powerful optimization, so it\'s plausible they will get used more often with time as build systems add support for them.\\r\\n\\r\\nEven regardless of that risk, we can confidently say Hooks have been a successful rollout now. So whether the bugs themselves are a problem or not, **the `use` convention effectively already strongly implies it\'s a Hook**. From that perspective, `use*()` at top level is just confusing to look at.\\r\\n\\r\\n### But I\'m not using a Hook!\\r\\n\\r\\nThere are some older versions of `history` and `react-router` that had `use`-prefixed APIs for things that aren\'t Hooks. **If you see a false positive, please feel free to suppress it:**\\r\\n\\r\\n```js\\r\\n// eslint-disable-next-line react-hooks/rules-of-hooks\\r\\nconst browserHistory = useBasename(createHistory)({\\r\\n  basename: \'/foo\'\\r\\n});\\r\\n```\\r\\n\\r\\nThis is not ideal, but this isn\'t an issue in recent versions of these libraries \u2014 and also most apps only have at most a single file with this issue.\\r\\n\\r\\nIf you for some reason can\'t add suppressions, you may alternatively:\\r\\n\\r\\n* Rename it during import like `import { useBasename as withBasename } from \'history\'`\\r\\n* Or use `import * as History from \'history\'` and `History.useBasename()`\\r\\n\\r\\nNote this isn\'t just to \\"appease the linter\\". People expect `use` prefix to only be used by Hooks now, so it\'s good to push the ecosystem towards consistent naming.\\r\\n\\r\\n### What about `MyLibrary.useFoo()`?\\r\\n\\r\\nWe warn about invalid use of `use*()` and `React.use*()`, but not `MyLibrary.use*()`. This is because initially we saw too many false positives from modules like `MyStore.useNewAnalytics()`.\\r\\n\\r\\nThe new top-level error respects the same rule. For example, it would warn for `useBasename()`, but not for `History.useBasename()`. So that\'s another escape hatch if you want to suppress it.\\r\\n\\r\\n```js\\r\\n// Doesn\'t warn\\r\\nconst browserHistory = History.useBasename(History.createHistory)({\\r\\n  basename: \'/foo\'\\r\\n});\\r\\n```\\r\\n\\r\\nIn the future, we might consider making it stricter, and banning invalid calls to `MyLibrary.use*()` too. But it\'s less common in general because the convention is to import Hooks directly without a namespace. It\'s also much more commonly encountered in open source, like `app.use()` from Express, or `jest.useFakeTimers()`. So maybe it\'s not worth it.","number":16455,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-19T14:54:18Z"},{"id":482252191,"title":"npm ERR! code ELIFECYCLE","body":"- Already tried with `npm cache clean`\\r\\n- Removing `node_modules`\\r\\n- try again installing `npm i`\\r\\n\\r\\n![Screenshot from 2019-08-19 16-43-12](https://user-images.githubusercontent.com/24680004/63261418-10452180-c2a1-11e9-9d4f-fc9585d9097a.png)\\r\\n","number":16454,"user":{"login":"anujsinghwd"},"state":"closed","created_at":"2019-08-19T11:17:57Z"},{"id":482242488,"title":"Don\'t trigger fallbacks in act()","body":"We have some code that triggers suspense fallbacks when in an act() scope. This has caused a few annoying problems.\\r\\n- We don\'t want this codepath in prod because it\'s testing specific.\\r\\n- It\'s also on a \'hot\' path, so we want to avoid code that we know will never be triggered\\r\\n- At this point, we have divergent behaviour between dev and prod, which sucks. it also probably means act() can\'t be used for prod tests (and it\'s not intuitive why)\\r\\n\\r\\nThis PR simply removes that feature. The longer I stare at it, I\'m sure it should either not be a feature of act(), or we should bite the bullet and let it exist on the prod path. Fallbacks can be triggered in tests with act(jest.runAllTimers) if needed (and I assume someone will make a helper)\\r\\n","number":16453,"user":{"login":"threepointone"},"state":"open","created_at":"2019-08-19T10:55:13Z"},{"id":482215540,"title":"Custom theme in React DevTools v4","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nA missing feature in React DevTools v4.\\r\\n\\r\\n\\r\\n**What is the current behavior?**\\r\\nThere isn\'t a menu for using a custom theme. \\r\\n\\r\\nCompare the old version:\\r\\n![custom-theme](https://user-images.githubusercontent.com/1857705/63256409-2f7f8700-c280-11e9-941d-98079eb95454.png)\\r\\n\\r\\nWith the new one:\\r\\n![image](https://user-images.githubusercontent.com/1857705/63256498-5e95f880-c280-11e9-9bf5-65c4cc98ca48.png)\\r\\n\\r\\nI cannot find an option to customize the theme in any of the new sections.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nA way to customize the theme colors (e.g. similar to the previous version).\\r\\n\\r\\n\\r\\n**Which versions of React Dev Tools are you using?**\\r\\nv4","number":16452,"user":{"login":"Stamo-Gochev"},"state":"closed","created_at":"2019-08-19T09:56:04Z"},{"id":482213942,"title":"React DevTools Chrome Browser Extension Option Select Boxes are broken","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n**What is the current behavior?**\\r\\nThe select dropdowns don\'t function correctly, and are currently unreadable.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n![settings broken](https://user-images.githubusercontent.com/5931248/63256241-102c2e00-c26f-11e9-96bc-ebcab5bb319c.gif)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nSelect dropdown options are readable and able to be set correctly\\r\\n\\r\\n**Which versions of React DevTools, and which browser / OS are affected by this issue? Did this work in previous versions of React DevTools?**\\r\\n\\r\\nApp Name | Version \\r\\n-- | --\\r\\nGoogle Chrome | 76.0.3809.100\xa0(Official Build)\xa0(64-bit)\xa0(cohort: Stable) \\r\\nReact DevTools |  4.0.4-3c6a219\\r\\nOS | Windows\xa010 OS Version 1809 (Build 17763.678)\\r\\nJavaScript | V8\xa07.6.303.29","number":16451,"user":{"login":"GeorgeWL"},"state":"closed","created_at":"2019-08-19T09:52:38Z"},{"id":482208208,"title":"Browser plugin crashing my browser when opening devtools","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?** \\r\\nBug\\r\\n\\r\\n**What is the current behavior?** \\r\\nWhen I open devtools with the React chrome extension enabled my browser crashes (all windows exit). If I disable the extension it devtools opens as expected and works just fine.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:** \\r\\nInstall the React chrome extension on Vivaldi browser and open devtools on any website\\r\\n\\r\\n**What is the expected behavior?**\\r\\nDevtools opens and functions normally\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** \\r\\nOS: Windows 10\\r\\nBrowser: Vivaldi\\r\\n","number":16450,"user":{"login":"scrossan-crown"},"state":"closed","created_at":"2019-08-19T09:40:21Z"},{"id":482196710,"title":"Implicitly access parent props via context","body":"I would like to request a feature for consideration.\\r\\n\\r\\nTypically when we want information in a descendant component we must explicitly pass the data down via props (prop drilling). The context API allows us to avoid doing this if we create, import and maintain our own context object wherever we need it.\\r\\n\\r\\nInside a functional component using the latest context API with hooks, this may look something like:\\r\\n\\r\\n```jsx\\r\\nimport React, { useContext } from \'react\';\\r\\nimport myContext from \'../myContext\';\\r\\n\\r\\n const MyComp = (props) => { \\r\\n  const context = useContext(myContext);\\r\\n\\r\\n  return(\\r\\n    <div>\\r\\n      ...\\r\\n    </div>\\r\\n   );\\r\\n}\\r\\n```\\r\\n\\r\\n([source](https://stackoverflow.com/a/55848811/2253888)). If I\'m not mistaken, the legacy context API exposed `context` as a second argument to functional components. For all intents and purposes, context is an opt-in feature (meaning there is no default/out-the-box `context` object exposed). \\r\\n\\r\\nI feel as though there would be good benefit in exposing a default context object which exposes information about ancestral components (essentially exposing the parent tree). After all, such information would qualify for the regular definition of \\"context\\".\\r\\n\\r\\nConsider the below JSX:\\r\\n\\r\\n```jsx\\r\\nconst Alpha = (props) = (\\r\\n  <Beta fizz=\'buzz\'>\\r\\n    <Gamma isActive>\\r\\n      <Delta />\\r\\n    </Gamma>\\r\\n    <Gamma>\\r\\n      <Delta />\\r\\n    </Gamma>\\r\\n  </Beta>\\r\\n);\\r\\n```\\r\\n\\r\\nConsider the `<Delta>` component - we want access to the parent `isActive` prop on the `Gamma` component and the `fizz` prop on the `Beta` component. The typical recommendation is to explicitly pass props to components that need the values. In the above case, it would be more convenient to access them implicitly.\\r\\n\\r\\nA scenario where I were able to do this would be wonderful:\\r\\n\\r\\n```jsx\\r\\nconst Delta = (props, context) => {\\r\\n  console.log(context.Beta.fizz); // => \'buzz\'\\r\\n\\r\\n  return (\\r\\n    <div style={context.Gamma.isActive ? \'block\' : \'none\'}>\\r\\n      Lorem ipsum\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nThus, essentially exposing parent props. Currently if I want similar behaviour I need to [create wrapper components](https://levelup.gitconnected.com/lifting-props-up-f1be43a1d7a4) (or I have to explicitly create, export and import various context objects).\\r\\n\\r\\nDoes anyone else feel as though something like this would be useful? Or does it offer too much potential for abuse? For \\"context\\", this would probably mostly help with things like styling, where it\'s often more convenient to work in this manner. Thanks!","number":16449,"user":{"login":"esr360"},"state":"closed","created_at":"2019-08-19T09:16:43Z"},{"id":482074035,"title":"Fix spelling in react-devtools CHANGELOG.md","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16448,"user":{"login":"morgsmccauley"},"state":"closed","created_at":"2019-08-19T02:20:06Z"},{"id":482065246,"title":"Error: \\"Could not find node with id \\"266\\" in commit tree\\"","body":"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\\r\\n\\r\\nI got this error when I click \'Ranked\'.\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.4-3c6a219\\r\\n\\r\\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11441\\r\\n    at Map.forEach (<anonymous>)\\r\\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11387)\\r\\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11920)\\r\\n    at _i (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277123)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98280)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n\\r\\nComponent stack: in _i\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ha\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Ul","number":16446,"user":{"login":"ldcc-juj"},"state":"closed","created_at":"2019-08-19T01:27:03Z"},{"id":482007607,"title":"Refactor ProfilerContext to use reducer instead of multi-state","body":"The `ProfilerContext` is currently comprised of several pieces of related state, each managed with `useState`. This necessitates awkward checks like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L126-L131) or even worse like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/SnapshotSelector.js#L62-L73) or [this](https://github.com/bvaughn/react-devtools-experimental/blob/source/src/devtools/views/Profiler/Profiler.js#L71-L83).\\r\\n\\r\\nThis context should be refactored to use a single reducer (`useReducer`) like `TreeContext`. This is a bit more involved at the moment because of suspense and the `ProfilerContext` being higher level than the suspense cache. Although maybe we could work around this by using some sort of [subscription](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L118-L124)?\\r\\n\\r\\nSee related issues like #16441 and commit [4697f5b](https://github.com/bvaughn/react-devtools-experimental/commit/4697f5b37967b85b2c844044aeebb5b1a740875d).","number":16444,"user":{"login":"bvaughn"},"state":"open","created_at":"2019-08-18T15:40:40Z"},{"id":481981786,"title":"[eslint-plugin-react-hooks] JSON.stringify in ehaustive-deps","body":"If it\'s practical and safe to use `[JSON.stringify(foo)]` in deps for light weight objects i think plugin should not report a warning in that case.","number":16443,"user":{"login":"amiralies"},"state":"closed","created_at":"2019-08-18T11:14:12Z"},{"id":481980793,"title":"Remove note about future react scripts","body":"react-scripts now includes this plugin","number":16442,"user":{"login":"amiralies"},"state":"closed","created_at":"2019-08-18T11:01:10Z"},{"id":481955518,"title":"Error: \\"Could not find commit data for root \\"1\\" and commit null\\"","body":"\x3c!-- please provide repro information here --\x3e\\r\\n**Repro:** https://codesandbox.io/s/xenodochial-lamarr-q71wt\\r\\n\\r\\n**Steps:**\\r\\n1. Profile\\r\\n2. Select a component from the flame graph (important)\\r\\n3. Click settings\\r\\n4. Toggle \\"hide commits below ms\\" (In my case, it\'s 100ms)\\r\\n\\r\\n**Demo:**\\r\\n![repro-2](https://user-images.githubusercontent.com/4465644/63220458-49529880-c1b2-11e9-9bd4-aeb059af8b9b.gif)\\r\\n\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.2-2bcc6c6\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\\r\\n    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293513)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25092)\\r\\n\\r\\nComponent stack: in pl\\r\\n    in div\\r\\n    in ml\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ua\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Fl","number":16441,"user":{"login":"raibima"},"state":"closed","created_at":"2019-08-18T05:21:06Z"},{"id":481916500,"title":"Update CHANGELOG.md","body":"Fixed typo\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16439,"user":{"login":"bbolek"},"state":"closed","created_at":"2019-08-17T19:02:08Z"},{"id":481900117,"title":"Added 4.0.1, 4.0.2, and 4.0.3 changelog entries","body":"Will hold off merging this until I\'ve finished cleaning up and landing the fix for #16424. Just wanted to do it before I forgot though.","number":16438,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-17T15:56:55Z"},{"id":481869224,"title":"Devtools V4: Where is Highlight Updates?","body":"If I understood correctly, this is the correct repository for devtools v4, right?\\r\\n\\r\\nI just noticed that react devtool were updated. I\'m missing the \\"Highlight Updates\\" function.\\r\\nHow can I activate it?\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/12381373/63209674-4ab58f80-c0e4-11e9-8134-40789625c81e.png)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/12381373/63209676-543ef780-c0e4-11e9-8128-a73c4b6bf8f7.png)\\r\\n\\r\\nVersion: 4.0.2 (8/15/2019)\\r\\n","number":16437,"user":{"login":"k3flo"},"state":"closed","created_at":"2019-08-17T09:45:03Z"},{"id":481869089,"title":"Me testing","body":"Hello","number":16436,"user":{"login":"myquyen"},"state":"closed","created_at":"2019-08-17T09:43:30Z"},{"id":481864868,"title":"useReducer become bad if I open the chrome react-dev-tool and click the react dom node","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n### bug\\r\\n___\\r\\n**What is the current behavior?**\\r\\ni have [issue](https://github.com/facebook/react/issues/16347) been closed, so I `CHANGE` my writing way, I am very confused these days about the bug, just see the code below:\\r\\n```jsx\\r\\nimport React, { useReducer } from \'react\';\\r\\n\\r\\nlet cursor = 1;\\r\\nfunction getCursor() {\\r\\n  return cursor;\\r\\n}\\r\\nfunction incCursor() {\\r\\n  cursor++;\\r\\n}\\r\\nconst cursor_ref_ = {};//map cursor to ref\\r\\n\\r\\n// always return new state\\r\\nfunction reducer(initState, partialState) {\\r\\n  Object.assign(initState.state, partialState);\\r\\n  return Object.assign({}, initState);\\r\\n}\\r\\n\\r\\n// make setState handler with dispatch\\r\\nconst makeSetState = (cursor, ccDispatch) => {\\r\\n  // broadcast is true by default, that means any ref call setState will trigger other ref update ui\\r\\n  return (state, broadcast = true) => {\\r\\n    console.log(`%c cursor ${cursor} update state`, \'color:purple; border:3px solid purple;\');\\r\\n    if(broadcast){\\r\\n      console.log(`%c cursor ${cursor} broadcast state`, \'color:purple; border:3px solid purple;\');\\r\\n      Object.keys(cursor_ref_).filter(v => v != cursor).forEach(c => {\\r\\n        const ref = cursor_ref_[c];\\r\\n        console.log(`%c start trigger cursor ${c} setState`, \'color:blue; border:3px solid blue;\');\\r\\n        // flag broadcast false, let it only change ref state self\\r\\n        ref.ctx.setState(state, false);\\r\\n      });\\r\\n    }\\r\\n    ccDispatch(state)\\r\\n  }\\r\\n}\\r\\n\\r\\n// initState is the target state that service for user \\r\\nfunction useMySpecialHook(initState) {\\r\\n  const tmpCursor = getCursor();\\r\\n  const [ccState, ccDispatch] = useReducer(reducer, { state: initState, cursor: tmpCursor });\\r\\n  const targetCursor = ccState.cursor;\\r\\n  let isFirstRendered = targetCursor === tmpCursor;\\r\\n\\r\\n  let ref;\\r\\n  if (isFirstRendered) {\\r\\n    incCursor();\\r\\n    console.log(`%c make setState for cursor ${targetCursor}`, \'color:green; border:3px solid green;\');\\r\\n    ref = {\\r\\n      ctx: {\\r\\n        cursor: targetCursor,\\r\\n        state: ccState.state,\\r\\n        setState: makeSetState(targetCursor, ccDispatch),\\r\\n      }\\r\\n    };\\r\\n    cursor_ref_[targetCursor] = ref;\\r\\n  } else {\\r\\n    // get the ref by cursor\\r\\n    ref = cursor_ref_[targetCursor];\\r\\n    // replace state\\r\\n    ref.ctx.state = ccState.state;\\r\\n    console.log(`%c replace cursor ${targetCursor} setState `+targetCursor, \'color:red; border:3px solid red;\');\\r\\n\\r\\n    // in re-render period, alway assign a latest setState handler to ref.ctx\\r\\n    ref.ctx.setState = makeSetState(targetCursor, ccDispatch);\\r\\n  }\\r\\n\\r\\n  return ref.ctx;\\r\\n}\\r\\n\\r\\nexport default function DemoCounter() {\\r\\n  const { state, setState } = useMySpecialHook({ count: 100 });\\r\\n  const dispatch = ({ type }) => {\\r\\n    if (type === \'increment\') setState({ count: state.count + 1 });\\r\\n    else setState({ count: state.count - 1 });\\r\\n  }\\r\\n  const changeCount = () => {\\r\\n    setState({ count: Date.now() });\\r\\n  }\\r\\n  return (\\r\\n    <div style={{ border: \'1px solid blue\', margin: \'8px\' }}>\\r\\n      <h2>DemoCounter</h2>\\r\\n      Count: {state.count}\\r\\n      <button onClick={() => dispatch({ type: \'increment\' })}>+</button>\\r\\n      <button onClick={() => dispatch({ type: \'decrement\' })}>-</button>\\r\\n      <button onClick={changeCount}>setState</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\nthen I  import Counter component and init 2 instance(at least 2) in `index.js`, and I click any one of them\'s inc button or dec button, the other one will been trigger rendered also, it works perfectly, but if I open the chrome react dev-tool, and click one react dom node in the tool, things become bad, it does\'t work agian/(\u3112o\u3112)/~~\uff0cif you don\'t understand what I said, just see the [video](https://concentjs.github.io/concent-site/bug-video.html)\\r\\n\\r\\n<p>\\r\\n<video id=\\"video\\" controls=\\"\\" preload=\\"none\\">\\r\\n<source id=\\"mp4\\" \\r\\nsrc=\\"https://concentjs.github.io/concent-site/bug-video.html\\" type=\\"video/mp4\\">\\r\\n</video>\\r\\n</p>\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nno matter if I click the react dom node in the dev-tool or not, the two instance will always been trigger rendered. please run the copy the code and run it in your computer, it is really strange, if I change component from hook to class(I mean take over class ins\'s setState, some examples like: https://stackblitz.com/edit/cc-complex-counter), it is always fine!!!! react-dev-tool does no matter to these code, but for hook, I don\'t know why it become bad if I click the react dom node in the dev-tool...\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact: 1.16.9\\r\\nreact dev tool: lastest","number":16435,"user":{"login":"fantasticsoul"},"state":"closed","created_at":"2019-08-17T08:48:12Z"},{"id":481829425,"title":"[Partial Hydration] Add \\"hydrationOptions\\" behind the enableSuspenseCallback flag","body":"This gets invoked when a boundary is either hydrated or if it is deleted because its props/context updated before getting hydrated or a parent got deleted before it mounted.\\r\\n\\r\\nIf there are nested boundaries in the tree that we haven\'t gotten to yet and the parent gets deleted, then no callback is fired. Only the top one.\\r\\n\\r\\nIf we have a hydration error that causes us to delete the parent node, then there also isn\'t a callback. That could however be a different callback we could add.","number":16434,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-17T00:46:34Z"},{"id":481818721,"title":"[react-events] DOM event testing library","body":"This patch formalizes the mock native events and event sequences used in unit tests.\\r\\n\\r\\nThe `createEventTarget` function returns an object that can be used to dispatch native event sequences on the target without having to manually do so across all the scenarios we need to account for. Unit tests can be written as if we were only working with PointerEvent, but they will dispatch realistic native event sequences based on the execution environment (e.g., is PointerEvent supported?) and pointer type.\\r\\n\\r\\n```\\r\\ndescribe.each(environments)(\'Suite\', (hasPointerEvents) => {\\r\\n  beforeEach(() => {\\r\\n    // setup\\r\\n  });\\r\\n\\r\\n  test.each(pointerTypes)(\'Test\', (pointerType) => {\\r\\n    const target = createEventTarget(node);\\r\\n    target.pointerdown({pointerType});\\r\\n    expect(callback).toBeCalled();\\r\\n  });\\r\\n});\\r\\n```\\r\\n\\r\\nEvery native event that is dispatched now includes a complete object by default. The properties of the events can be customized. Properties that shouldn\'t be relied on in responder implementations are excluded from the mock native events to ensure tests will fail. Equivalent properties are normalized across different event types, e.g., \'pointerId\' is converted to \'identifier\' before a TouchEvent is dispatched.","number":16433,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-16T23:26:42Z"},{"id":481777784,"title":"Babel Transform JSX to React.jsx/React.jsxDEV Plugin","body":"**This babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don\'t plan to own this code in the future, and we will upstream this to Babel at some point once we\'ve proven out the concept.**\\r\\n\\r\\nAs per the [RFC to simplify element creation](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md), we want to change the JSX transform from targeting `React.createElement(type, props, children)` to `React.jsx(type, props, key)`. This modifies the existing [`@babel/plugin-transform-react-jsx`](https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-react-jsx/src/index.js) (and [helper](https://github.com/babel/babel/blob/master/packages/babel-helper-builder-react-jsx/src/index.js)) babel plugin to support `React.jsx` and `React.jsxDEV`. \\r\\n\\r\\nThe main differences between `React.jsx`/`React.jsxDEV` and `React.createElement` are:\\r\\n  1.) `key` is now passed as an explicit argument rather than through props\\r\\n  3.) `children` are now passed through props rather than as an explicit argument\\r\\n  4.) `props` must always be an object\\r\\n  5.) `__source` and and `__self` are now passed as separate arguments into `React.jsxDEV` rather than through props\\r\\n\\r\\nPart of the rationale for this change is that we want to deprecate key spread through props because this is an expensive dynamic comparison operation. We want users instead always explicitly pass key as a prop. However, in the interim, we need a way to distinguish between `<div {...props} key={foo} />` and `<div key={foo} {...props} />`. Therefore, until we completely deprecate key spreading, we will use `React.createElement` to transform `<div {...props} key=\\"Hi\\" />` and `React.jsx` to transform everything else.","number":16432,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-08-16T20:41:25Z"},{"id":481769358,"title":"New React Developer Tools does not clearly indicate empty object or array","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug/unexpected behavior.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen an object or array is empty, there\'s no arrow to expand and see that it\'s empty, nor is there an `(empty)` indication. Initially, I was concerned that I couldn\'t expand any object or array from the new React DevTools due to this.\\r\\n\\r\\n![Screen Shot 2019-08-16 at 3 11 35 PM](https://user-images.githubusercontent.com/11951801/63195539-7aa75900-c038-11e9-95fe-4754f7d14693.png)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect to either be able to expand the empty object, or to see `(empty)` next to the non-expandable object.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nChrome version: 76.0.3809.100 (Official Build) (64-bit)\\r\\nReact Developer Tools Version: 4.0.2 (8/15/2019)\\r\\n\\r\\n[Reference discussion on Twitter](https://twitter.com/taniarascia/status/1162441422496325633)\\r\\n","number":16431,"user":{"login":"taniarascia"},"state":"closed","created_at":"2019-08-16T20:16:56Z"},{"id":481763401,"title":"New Devtools Cannot Expand Obervables","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nDevtools used to be able to expand observables created by Mobx. With the new update that is no longer possible.\\r\\n![image](https://user-images.githubusercontent.com/3083189/63194767-18495b00-c02e-11e9-95d2-1c83edbf2f26.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/embed/clever-blackwell-h0nzb\\r\\n\\r\\nCheck the props of the wrappedComponent in devtools. store.things does not expand.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nDevtools should expand Observables as it does any other object.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThis only seems to be an issue with Observables created by Mob v4. v5 works as expected.\\r\\n","number":16430,"user":{"login":"robskidmore"},"state":"closed","created_at":"2019-08-16T19:59:04Z"},{"id":481746300,"title":"React Dev tools does not show up in browser with new update.","body":"Was working 2 days ago, now does not work. I\'m assuming something happened with new update. \\r\\n\\r\\nChrome version 76.0.3809.100\\r\\nReact Developer Tools version 4.0.2 (8/15/2019)\\r\\n-Settings\\r\\nSite access onclick\\r\\nAllow access to file URLs","number":16429,"user":{"login":"skywalkerwin"},"state":"closed","created_at":"2019-08-16T19:10:42Z"},{"id":481745041,"title":"react dev tools: re-enable \\"store as global variable\\"","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n*feature*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nRight clicking props in the component view of the dev tools no longer brings up a context menu containing the option \\"store as global variable\\" (which previously stored the selected prop into `$tmp`. \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nRight clicking the props should bring up the aforementioned option.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nDevTools version 4.0.2-2bcc6c6 in Chrome 76.0.3809.100 on Xubuntu Linux 19.04 (Disco Dingo). The DevTools version 3 still had this feature.","number":16428,"user":{"login":"atk"},"state":"closed","created_at":"2019-08-16T19:07:08Z"},{"id":481738230,"title":"Error: \\"Could not find commit data for root \\"34\\" and commit 21\\"","body":"I tried to select a different component from the dropdown\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.2-2bcc6c6\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292537)\\r\\n    at ml (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292772)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in ml\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ua\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Fl","number":16427,"user":{"login":"fozcodes"},"state":"closed","created_at":"2019-08-16T18:48:27Z"},{"id":481714598,"title":"Devtools V4 standalone script at localhost:8097 fails to load","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReporting a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe standalone devtools v4 script does not load when we navigate to `http://localhost:8097/`\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n1. Run `react-devtools`\\r\\n2. Navigate to `http://localhost:8097/` in a browser\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n- Expect the network call to end and a script to show up\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nnot applicable\\r\\n","number":16426,"user":{"login":"sushruth"},"state":"closed","created_at":"2019-08-16T17:42:52Z"},{"id":481683754,"title":"fragment events","body":"This is a minimal working set for capturing/bubbling events on Fragements, as discussed in #12051. @bsidelinger912 helped me with this (thank you Ben!)\\r\\n\\r\\nI\'m opening this PR now to start a discussion, and to see if I am on the right track. There are still failing tests as a result of this change but I want to make sure this is something the team is still interested in before I invest more time to fix them.\\r\\n\\r\\nI have proved this out with the included unit test, as well as with manual confirmation with a built version in the test fixture (which I didn\'t commit).","number":16425,"user":{"login":"kyeotic"},"state":"closed","created_at":"2019-08-16T16:17:27Z"},{"id":481669723,"title":"New React DevTools can\'t access immutable.js objects?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen the state or props are formed by Immutable.js objects, react devtools cannot expand it nor copy to temporal variable anymore.\\r\\n![Screenshot from 2019-08-16 16-18-09](https://user-images.githubusercontent.com/28344917/63174215-c90d2580-c041-11e9-847c-7bbd153399f9.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/withered-cherry-h3dfh\\r\\n\\r\\n**What is the expected behavior?**\\r\\nBe able to inspect the value of the immutable object or at least, copy it into a temporal variable.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.6\\r\\nChrome Version 70.0.3538.77 (Official Build) (64-bit)","number":16424,"user":{"login":"fd-rey"},"state":"closed","created_at":"2019-08-16T15:42:33Z"},{"id":481667121,"title":"DevTools v4 error \\"startProfiling not supported by this renderer\\"","body":"**Do you want to request a *feature* or report a *bug*?** Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nStarting a profile in React DevTools v4 results in a console error and no change from the extension:\\r\\n\\r\\n```\\r\\nUncaught Error: startProfiling not supported by this renderer\\r\\n    at Object.startProfiling (backend.js:9)\\r\\n    at t.<anonymous> (backend.js:1)\\r\\n    at t.u.emit (backend.js:1)\\r\\n    at backend.js:9\\r\\n    at t (backend.js:1)\\r\\n```\\r\\n\\r\\nI am on React 16.8.2. I am also using auth0-lock, which uses React v15.6.2 ([relevant discussion here](https://github.com/auth0/lock/issues/1148)) as a direct non-dev and non-peer dependency. I suspect that this is causing the bug. This dependency existed when we used DevTools v3, so I suspect that something must have changed in v4 to cause this.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\n\\r\\n1. Open a React app\\r\\n2. Install auth-lock@11.14.0\\r\\n2. Try to profile\\r\\n3. Go to Console, see error\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nProfiling should work and not error.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact@16.8.6\\r\\nreact-dom@16.8.6\\r\\nauth-lock@11.14.0\\r\\n\\r\\nThese dependencies have not changed in between DevTools v3 and v4.","number":16423,"user":{"login":"eranimo"},"state":"closed","created_at":"2019-08-16T15:36:21Z"},{"id":481652656,"title":"Error: \\"Cannot read property \'isCollapsed\' of undefined\\"","body":"\x3c!-- please provide repro information here --\x3e\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.2-2bcc6c6\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:29005)\\r\\n    at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:29131)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:218806\\r\\n    at n.t.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:153564)\\r\\n    at Ei (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:66077)\\r\\n    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:65872)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99617)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n\\r\\nComponent stack: in n\\r\\n    in div\\r\\n    in n\\r\\n    in div\\r\\n    in div\\r\\n    in Vr\\r\\n    in div\\r\\n    in div\\r\\n    in io\\r\\n    in ar\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ua\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Fl","number":16422,"user":{"login":"AndriiTsapenkoCasafari"},"state":"closed","created_at":"2019-08-16T15:03:34Z"},{"id":481601398,"title":"Why does DevTool Chrome Extension need access to history?","body":"I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history. \\r\\n\\r\\nI couldn\'t find any explanations or reference in the changelog, so I opened this issue.","number":16421,"user":{"login":"luanmuniz"},"state":"closed","created_at":"2019-08-16T13:07:52Z"},{"id":481587839,"title":"React Router + Lazy + Suspense (CSS not loaded correctly on IE11)","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nI use react-router with *lazy* and *suspense* to lazy load routes and chunck my bundle (large application).\\r\\n\\r\\n_Chrome :_\\r\\nEverything work perfect : css loaded, good display and bundle chunks.\\r\\n\\r\\n_IE 11:_\\r\\nI get a bad display : wrong css margin, dimensions, sizes, colors, css vars not loaded...\\r\\nI get my bundle chuncks.\\r\\nIf I refresh the page (or F5) I get the correct display.\\r\\nIf I remove *lazy* I have the correct display.\\r\\n\\r\\n```javascript\\r\\nconst MyPage = (\\r\\n  lazy(() => (\\r\\n        import(\'./path/MyPage\')\\r\\n  ))\\r\\n);\\r\\n\\r\\n<Router>\\r\\n      <Suspense fallback={<div />}>\\r\\n        <Switch>\\r\\n          <Route path=\\"./my-page\\" component={MyPage} />\\r\\n        </Switch>\\r\\n      </Suspense>\\r\\n</Router>\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nSame result on IE and Chrome.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nBrowser affected: IE11.\\r\\nReact version : 16.8.6\\r\\nReact Router Dom : 5.0.1.\\r\\n\\r\\nThanks.","number":16420,"user":{"login":"helabenkhalfallah"},"state":"closed","created_at":"2019-08-16T12:31:14Z"},{"id":481572041,"title":"DevTools: react-devtools-tutorial.now.sh > editing-props-and-state have a bad state","body":"I don\'t know who\'s making the bug, so reporting here. I\'ll move to correct repo if someone helps me debug it.\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n**What is the current behavior?**\\r\\nPlease watch below screencast:\\r\\nhttps://drive.google.com/file/d/1KMP44qsZ4y3MwrLLDdnOzPZ8z5mMElFP/view\\r\\n\\r\\n1. Goto https://react-devtools-tutorial.now.sh/editing-props-and-state\\r\\n2. Change the last ListItem prop to isComplete from `false` to `true`.\\r\\n3. Click the checkbox in the view to change the state again from `true` to `false`.\\r\\n**What is the expected behavior?**\\r\\nIt should just change the state of that ListItem. Instead, it\'s adding 3 more in the list with duplicate keys.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nLatest React.\\r\\nMac, Chrome Version 75.0.3770.142 (Official Build) (64-bit)\\r\\n","number":16419,"user":{"login":"asimqt"},"state":"closed","created_at":"2019-08-16T11:43:51Z"},{"id":481533730,"title":"is that possible to get legacy version of react debugger?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\nbug: highlight element is no available in ver 4+ react debugger\\r\\nfeature: new version of react develop is good, bug sometimes i need legacy version of develop tool(i jest need BOTH of them), can you provide both of them?\\r\\n","number":16418,"user":{"login":"augustblizzard"},"state":"closed","created_at":"2019-08-16T09:53:28Z"},{"id":481531740,"title":"Error: \\"Could not find commit data for root \\"1\\" and commit null\\"","body":"\x3c!-- please provide repro information here --\x3e\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.2-2bcc6c6\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\\r\\n    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293513)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25092)\\r\\n\\r\\nComponent stack: in pl\\r\\n    in div\\r\\n    in ml\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ua\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Fl","number":16417,"user":{"login":"xu33"},"state":"closed","created_at":"2019-08-16T09:48:27Z"},{"id":481517156,"title":"SSR: Cannot set property \'memoizedState\' of null","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nA bug?\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n> Cannot set property \'memoizedState\' of null\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n```js\\r\\nconst processLink = html => {\\r\\n  return renderToStaticMarkup(<Link />)\\r\\n};\\r\\n\\r\\nconst RichText = ({ html }) => {\\r\\n  const htmlProcessed = useMemo(() => processLink(html), [html]);\\r\\n}\\r\\n```\\r\\nSee https://codesandbox.io/s/cannot-set-property-memoizedstate-of-null-mrxfr\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8~16.9\\r\\n\\r\\n","number":16416,"user":{"login":"ambar"},"state":"open","created_at":"2019-08-16T09:10:04Z"},{"id":481514514,"title":"New API proposal ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nFor SVG icons currently, we are preferring like functional components like this\\r\\n\\r\\nconst SvgIcon = () => (\\r\\n    SVG icon tag...\\r\\n);\\r\\n\\r\\nHere I am not taking any props for the functional component but if any updates happened parent component child component(SvgIcon) which is an SVG icon is rerendering.\\r\\n\\r\\nHere we can use memo but the React memo is not preferable for small components like this as a component should have memoizable content (props) or complex computations.\\r\\n\\r\\nIn SVG icon we can imagine any static text () or image the same happens.\\r\\n\\r\\nSo here I am proposing like better if we one API (naming convention can be anything) in internal it can be wrapped with memo or else any other but it should be rendered only once.\\r\\n\\r\\nany suggestions, queries.\\r\\n\\r\\nThanks to all.\\r\\n\\r\\n@gaearon @sebmarkbage \\r\\n\\r\\nReact - \\"^16.8.6\\"\\r\\nBrowser - Chrome","number":16415,"user":{"login":"skirankumar7"},"state":"closed","created_at":"2019-08-16T09:02:55Z"},{"id":481512511,"title":"Error: \\"Could not find commit data for root \\"44\\" and commit 4\\"","body":"\x3c!-- please provide repro information here --\x3e\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.2-2bcc6c6\\r\\n\\r\\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\\r\\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292537)\\r\\n    at ml (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292772)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in ml\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ua\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Fl","number":16414,"user":{"login":"phamwon"},"state":"closed","created_at":"2019-08-16T08:57:53Z"},{"id":481491183,"title":"Dev tools does not respect zoom level on firefox OSX","body":"Currently when using the react dev tools on Firefox OSX, I am unable to change the current zoom level. The default zoom level is quite small so even with good eyesight, I struggle to read it on a high resolution display.\\r\\n\\r\\nIt is possible to adjust the zoom level of the Firefox dev tools as a whole, by focusing the panel and using CMD +/-. However the React dev tools does not respect this and has no option to switch the zoom level manually. As a result, the react dev tools extension is unusable on Firefox. I would imagine this is a bigger issue for anyone with poor eyesight.\\r\\n\\r\\nCan we please add some accessibility options or fix this behaviour?","number":16413,"user":{"login":"andyhmltn"},"state":"closed","created_at":"2019-08-16T07:58:16Z"},{"id":481453891,"title":"[react profiler bug]Error: \\"getCommitTree(): Unable to reconstruct tree for root \\"1\\" and commit 1\\"","body":"\x3c!-- please provide repro information here --\x3e\\r\\n\\r\\n---------------------------------------------\\r\\nPlease do not remove the text below this line\\r\\n---------------------------------------------\\r\\n\\r\\nDevTools version: 4.0.2-2bcc6c6\\r\\n\\r\\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)\\r\\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)\\r\\n    at Ai (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:274200)\\r\\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\\r\\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\\r\\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\\r\\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\\r\\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\\r\\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\\r\\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\\r\\n\\r\\nComponent stack: in Ai\\r\\n    in div\\r\\n    in div\\r\\n    in div\\r\\n    in Or\\r\\n    in Unknown\\r\\n    in n\\r\\n    in Unknown\\r\\n    in div\\r\\n    in div\\r\\n    in Ua\\r\\n    in le\\r\\n    in ve\\r\\n    in ko\\r\\n    in Fl","number":16412,"user":{"login":"Zaynex"},"state":"closed","created_at":"2019-08-16T05:57:04Z"},{"id":481431306,"title":"fix typo","body":"\\"wnless\\" -> \\"unless\\"","number":16411,"user":{"login":"lintuming"},"state":"closed","created_at":"2019-08-16T04:00:50Z"},{"id":481367036,"title":"React DevTools tutorial instructions are hard to read","body":"**What is the current behavior?**\\r\\nhttps://react-devtools-tutorial.now.sh/\\r\\n\\r\\nThe text on the left is difficult to read because of thin font styling\\r\\n<img width=\\"461\\" alt=\\"Screen Shot 2019-08-15 at 3 32 36 pm\\" src=\\"https://user-images.githubusercontent.com/8007686/63131305-0e622200-bf72-11e9-867a-e94551a1c422.png\\">\\r\\n<img width=\\"467\\" alt=\\"Screen Shot 2019-08-15 at 3 35 42 pm\\" src=\\"https://user-images.githubusercontent.com/8007686/63131388-5da85280-bf72-11e9-9d11-401600713bed.png\\">\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIncrease the contrast on the top row buttons and increase the font-weight for the text\\r\\n\\r\\nfont-weight: 300 or 400 makes it easier to read\\r\\n(300 pictured)\\r\\n\\r\\n<img width=\\"467\\" alt=\\"Screen Shot 2019-08-15 at 3 35 42 pm\\" src=\\"https://user-images.githubusercontent.com/8007686/63131491-c099e980-bf72-11e9-9195-2ee571f384f8.png\\">\\r\\n\\r\\n\\r\\nRunning Catalina latest, macOS.","number":16410,"user":{"login":"brotzky"},"state":"closed","created_at":"2019-08-15T22:35:58Z"},{"id":481359340,"title":"[DevTools Changelog] Add a note about restoring selection","body":"+ Also a tiny nit, \\"inline\\" spelling seems more common in this context. My eyes stumbled at it on every read.\\r\\n","number":16409,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-15T22:07:38Z"},{"id":481350268,"title":"Enable MessageLoop implementation by default","body":"This disables the RAF scheduler impl in favor of the MessageLoop one, which we\'ve found better utilizes CPU. Unlike https://github.com/facebook/react/pull/16271, this keeps the RAF implementation for now just in case, but it\'s only in one specially marked test.\\r\\n\\r\\nThis matches what we already rolled out in www, except the rAF-specific flags (they\'re true on www but they\'re dead code in the rAF path anyway \u2014 and I didn\'t want to adjust the test for them).\\r\\n\\r\\nMy previous PR includes most of the extra test coverage for ML scheduler which I picked up from Andrew\'s earlier PR.","number":16408,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-15T21:38:12Z"},{"id":481303899,"title":"Fix message loop behavior when host callback is cancelled","body":"# https://github.com/facebook/react/pull/16407/commits/c2a1a771c6323c1b8256c3ca7c2834bd2b40c3a7\\r\\n\\r\\nNew test.\\r\\n\\r\\nThis works on master but would have been broken by #16145.\\r\\nI verified the test fails on that branch.\\r\\n\\r\\n# https://github.com/facebook/react/pull/16407/commits/3b70481e54882848c4b3a7e9edc4591c84c52053\\r\\n\\r\\nThis is the fix. Again, it doesn\'t affect master because we don\'t use `cancelHostCallback` yet. But it fixes the previously added test when combined with #16145. The actual problem isn\'t related to #16145, we just didn\'t execute the code path that triggers the bad case until that PR.\\r\\n\\r\\nThe problem itself is that `cancelHostCallback` would clear out the callback. Then in the message loop we would see that it\'s `null`, and exit early. But we wouldn\'t schedule another one, so the loop would stop. However, the boolean itself would stay true, so next time we schedule something, we\'d think the loop was still running. And fail to schedule it. The fix is to reset the boolean.\\r\\n\\r\\nThe rAF codepath handles this earlier \u2014 in `onAnimate`. But we don\'t have that entry point in the message loop implementation. So we forgot to do it.\\r\\n\\r\\n# 22a12878b6907bf84f430c5e057802dbe7d0ec50\\r\\n\\r\\nJust some more tests from #16271 since we\'re not doing it for now.","number":16407,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-15T19:34:24Z"},{"id":481282088,"title":"GraphQL + Axios + Proxy","body":"I tried to use GraphQL in Axios (where the URL is defined with Proxy inside the JSON file), but I couldn\'t find a way to make it work. Does anyone knows how to? How should I write the query?\\r\\n\\r\\nLike:\\r\\nquery {` news{ title, } `}\\r\\n","number":16406,"user":{"login":"Caroliveira"},"state":"closed","created_at":"2019-08-15T18:40:12Z"},{"id":481243362,"title":"Added CHANGELOG and READMEs for DevTools v4 NPM packages","body":"This is a stopgap for PR #16381 which will take a bit longer to land. It gives us a stable place to point embedded links to the `CHANGELOG` and NPM repo links for issue reporting.\\r\\n\\r\\nI\'ll erase these files and re-import them (with history) as part of landing #16381.","number":16404,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-15T16:59:12Z"},{"id":481205411,"title":"Clear canceled task node early","body":"This is unobservable. There should be no need to repeatedly clear it if we already did that once.","number":16403,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-15T15:26:36Z"},{"id":481182728,"title":"textarea with `required` attribute renders in invalid state in FF","body":"*Bug*\\r\\n\\r\\nWhen a `textarea` has the `required` attribute it renders in the invalid state using FireFox. \\r\\n\\r\\nThis behavior is visible here: https://codesandbox.io/s/rough-frog-f00ow. Remember to view it in FireFox.  \\r\\n\\r\\nI expect the required field to validate on form submit and not before. \\r\\n\\r\\nI have tested this with FireFox 68 and 69 and React 16.8.6\\r\\n\\r\\nThis appears appears to be a re-occurrence of: https://github.com/facebook/react/issues/8395\\r\\n\\r\\n","number":16402,"user":{"login":"dlaub3"},"state":"closed","created_at":"2019-08-15T14:38:52Z"},{"id":481171392,"title":"Revert \\"Revert \\"[Scheduler] Profiling features (#16145)\\" (#16392)\\"","body":"Preparing for a sync so I can debug this ","number":16401,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-15T14:14:43Z"},{"id":481092263,"title":"Refused to load the stylesheet","body":"I\'m using Rails and React with Webpacker. My application was working fine but suddenly ran into some errors:\\r\\n![Capture](https://user-images.githubusercontent.com/30777032/63089637-c17c4c80-bf6d-11e9-9021-167170edec32.PNG)\\r\\n\\r\\nHow possibly can I fix this?","number":16400,"user":{"login":"samialmorshedi"},"state":"closed","created_at":"2019-08-15T10:33:18Z"},{"id":481054856,"title":"please give the useReducer a built-in combineReducer function","body":"There is a problem when I use much more than one reducer, so will you please add a combineReducer function to useReducer like redux\uff1f\\r\\nI\u2018ll appreciate it if you could do that","number":16399,"user":{"login":"ainuo5213"},"state":"closed","created_at":"2019-08-15T08:46:20Z"},{"id":481011780,"title":"Add Experimental Flight Infrastructure","body":"This adds some plumbing for the Flight experiment.\\r\\n\\r\\nWe\'ll likely need this to (optionally) support a streaming protocol. This is the same as Fizz (streaming server rendering). There is quite a bit of wiring to make that work. This infra creates a build for each environment with zero overhead cost.\\r\\n\\r\\nWe have one build for Node which is the default. We currently have a separate build for a Browser environment (with browser stream support). This is useful for Service Workers or just debugging since the browser debugger is better than Node. We\'ll likely also have a FB specific one. \\r\\n\\r\\nReactServerHostConfig configures the runtime environment and has various overrides.\\r\\n\\r\\nAdditionally, we likely want to special case the encoding format for some parts of the protocol depending on what you\'re rendering into. E.g. a host component tree can be flattened into raw HTML. Therefore, we want one entry point for each renderer type. Not a single one for the whole project. This entry point is `react-dom/unstable-flight`.\\r\\n\\r\\nReactServerFormatConfig configures the output format configuration.\\r\\n\\r\\nBoth of these are shared between Fizz and Flight. So they each get the host config and the format config compiled in.\\r\\n\\r\\nThe second two commits show the actually relevant files.\\r\\n\\r\\ncc @timneutkens\\r\\n\\r\\n\\r\\n","number":16398,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-15T06:24:59Z"},{"id":480950371,"title":"[react-events] Press: improve test coverage","body":"1. Run the tests in environments with and without PointerEvent support.\\r\\n2. Improve test coverage to include both mouse and touch pointers.\\r\\n3. Change `Press` responder so that it only listens to either pointer events or fallbacks events.\\r\\n\\r\\nDemo: https://codesandbox.io/s/latest-responder-build-rz96j30rp","number":16397,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-15T00:59:46Z"},{"id":480924860,"title":"use-subscription causes UI tearing in some random cases","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nReferring to [this twitter conversation](https://twitter.com/milankinen/status/1161718618633248768?s=20), it seems that `use-subscription` can cause \\"UI tearing\\" in some random cases due to a (possible) race condition w.r.t. the combination of `subscribe` and `getCurrentValue` in internal usage.\\r\\n\\r\\nHere is a minimalistic application demonstrating the behaviour: https://github.com/milankinen/use-subscription-tearing-demo\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'d expect counters in the example application to *always* render same number.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nTested React version: 16.9.0 (haven\'t tested with older ones)\\r\\nOS: OSX 10.14.6\\r\\nHardware: MacBook Pro (Retina, 15-inch, Mid 2015) 2.8 GHz Intel Core i7 & 16GB RAM\\r\\nBrowser: Chrome Version 76.0.3809.100 (Official Build) (64-bit)\\r\\n\\r\\n\\r\\n\\r\\n@bvaughn ","number":16396,"user":{"login":"milankinen"},"state":"closed","created_at":"2019-08-14T23:00:03Z"},{"id":480890563,"title":"React keeps rendering multiple times recklessly","body":"This code is supposed to trigger the listening even on the mouse and it does but \\r\\n\\r\\nReact is ABSOLUTELY oblivious to  `[state.loading]` which is passed through useContext and it has forced me to use `useState` with `isFetching` which is totally ridiculous. \\r\\n\\r\\nI mean if useEffect is not gonna take parameters from a global state designed by react why was it even released in the first place ?\\r\\n\\r\\n```\\r\\n    const { state, dispatch } = React.useContext(SomeContext)\\r\\n    const [isFetching, setIsFetching] = useState(false);\\r\\n    useEffect(() => {\\r\\n        getAscii(1, Config.ADS_PER_ROW, dispatch, state.sortBy, false)\\r\\n        window.addEventListener(\'scroll\', handleScroll);\\r\\n        return () => window.removeEventListener(\'scroll\', handleScroll);\\r\\n    }, []);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n      function handleScroll() {\\r\\n        // if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\\r\\n        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && state.loading == true || isFetching)\\r\\n            setIsFetching(true);\\r\\n    }\\r\\n\\r\\n    useEffect(() => {\\r\\n        if (!isFetching) return;\\r\\n        fetchMoreListItems();\\r\\n    }, [isFetching]);\\r\\n\\r\\n\\r\\n\\r\\n    const fetchMoreListItems = () => {\\r\\n        getAscii(state.page, Config.ADS_PER_ROW, dispatch, state.sortBy, false)\\r\\n        setTimeout(() => {\\r\\n            setIsFetching(false);\\r\\n        }, 2222);\\r\\n    }\\r\\n```\\r\\n\\r\\non top of all that, the code in return which supposed to refresh the screen and add more data runs so many times I get browser crash at times and no throttling has worked as of now.\\r\\n\\r\\nI am in despair. ","number":16395,"user":{"login":"Hypothesis-github"},"state":"closed","created_at":"2019-08-14T21:10:17Z"},{"id":480883091,"title":"Added better error reporting for print-warnings errors","body":"When parsing fails, at least show which file the parsing error pertains to. The line/col numbers aren\'t useful by themselves.\\r\\n\\r\\n## Before\\r\\n![Screen Shot 2019-08-14 at 1 51 15 PM](https://user-images.githubusercontent.com/29597/63055395-a5f44180-be9a-11e9-9341-f64709a77436.png)\\r\\n\\r\\n## After\\r\\n![Screen Shot 2019-08-14 at 1 51 22 PM](https://user-images.githubusercontent.com/29597/63055396-a5f44180-be9a-11e9-8093-30f543f51ed7.png)\\r\\n","number":16394,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-14T20:51:55Z"},{"id":480880488,"title":"Shorthand CSS property collision should trigger a warning","body":"I faced a \\"bug\\" today that made me spent 1h figuring out what was going on:\\r\\n\\r\\nI\'m using an external component that accepts a `color` prop in order to set the `background-color` of the root element, but this same component also accepts a `background` prop which I wasn\'t passing, and by default, it was set to `\'\'`.\\r\\n\\r\\nThe result: React didn\'t throw an error nor a warning, however, the resulting element in the DOM didn\'t contain either `background-color` or `background`, and since the element had a default `background-color` coming from a CSS class, it took me a while to figure out why the color that I was passing wasn\'t being applied, and instead it was using the one from the CSS class.\\r\\n\\r\\nSee: https://codesandbox.io/s/react-example-8rxc8\\r\\n\\r\\nWhat I reported above was the `static1` case.\\r\\n\\r\\nI added other cases as a bonus, as when I was playing with this they also seemed weird to me. On `static2` I define the same properties, but because I change the order, it works. On the toggleable ones, initially I can see the background, but after changing it never appears anymore.\\r\\n\\r\\nI\'m not sure if I created those extra \\"test cases\\" correctly. My main concern is really around static1 not outputting anything on the console as a warning.\\r\\n\\r\\nRelated issues:\\r\\n#6348\\r\\n#8689\\r\\n\\r\\nI wonder if #14181 (@sophiebits) should have covered this?","number":16393,"user":{"login":"rdsedmundo"},"state":"closed","created_at":"2019-08-14T20:45:35Z"},{"id":480828158,"title":"Revert \\"[Scheduler] Profiling features\\"","body":"Reverts facebook/react#16145\\r\\n\\r\\nThere are a few bugs we need to solve first.","number":16392,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-14T18:37:18Z"},{"id":480802628,"title":"Work around a Scheduler bug","body":"- Comments out the broken cancellation logic until we figure out why.\\r\\n- Fixes copy paste mistakes.\\r\\n\\r\\nFollow-up to #16145 which introduced them.","number":16391,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-14T17:37:46Z"},{"id":480773064,"title":"Test sync","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16390,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-14T16:24:52Z"},{"id":480750832,"title":"useEffect fails to fire when hosted in display:none iFrame","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug starting at React version 16.9.0\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nReact version 16.8.6: If a react app was hosted in an iFrame and that iFrame was in a `display:none` style, the `useEffect` hook would trigger.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nReact version 16.9.0: If a react app using this version is hosted in an iFrame and that iFrame is set to `display:none` the `useEffect` hook is never fired.\\r\\n\\r\\nA CRA app with a very simple `useEffect` hook is created and hosted here: https://github.com/Kikketer/use-effect-none\\r\\n\\r\\nThe static hosted page is here: https://kikketer.github.io/use-effect-none/\\r\\n\\r\\nThe codesandbox that has this iFrame with `display:none` can be found here: https://codesandbox.io/embed/react-innerframe-tezku\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe `useEffect` hook should be fired even if the app is hosted in a `display:none` iFrame.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nFirefox, Chrome, Edge (77x on mac) with React 16.9.0 both fail to run `useEffect` on this iFrame\\r\\nSafari with React 16.9.0: Does run the `useEffect` on this iFrame\\r\\nIE (windows or 11): unknown\\r\\n","number":16389,"user":{"login":"Kikketer"},"state":"closed","created_at":"2019-08-14T15:38:37Z"},{"id":480709931,"title":"Rename legacy \\"events\\" package to \\"legacy-events\\"","body":"This package conflicts with the built-in `events` Node package. We already had to add special casing for it, and I was having to add more in #16381 (since DevTools depends on `events`) so let\'s just rename it?","number":16388,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-14T14:25:24Z"},{"id":480603115,"title":"DOM is rerender every time when I execute setState after await function","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n- bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n- DOM is rerender every time when I execute setState after await function.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nCode:\\r\\n```\\r\\nclass TestComponent extends React.Component {\\r\\n  async componentDidMount() {\\r\\n    this.setState({});\\r\\n    console.log(\'hey1\');\\r\\n    this.setState({});\\r\\n    console.log(\'hey2\');\\r\\n    await this.setState({});\\r\\n    console.log(\'hey3\');\\r\\n    this.setState({});\\r\\n  }\\r\\n\\r\\n  componentDidUpdate() {\\r\\n    console.log(\'update\');\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return <div></div>;\\r\\n  }\\r\\n}\\r\\n```\\r\\nConsole:\\r\\n```\\r\\nhey1\\r\\nhey2\\r\\nupdate\\r\\nhey3\\r\\nupdate\\r\\n```\\r\\n\\r\\nIs this intended?\\r\\n\\r\\n**What is the expected behavior?**\\r\\n- I guess that DOM will be updated single time.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n- Win/Mac\\r\\n- \\"react\\": \\"^16.8.6\\",","number":16387,"user":{"login":"TroyTae"},"state":"closed","created_at":"2019-08-14T10:31:21Z"},{"id":480449715,"title":"export default react  import ... React.createElement: type is invalid -- expected a string","body":"\\r\\nHere\'s the code address\\r\\n\\r\\n```\\r\\nhttps://codesandbox.io/s/fast-sky-6qxxp\\r\\n```\\r\\nI export all components of \'\'\'src/view\'\'\' in \'\'\'src/view\'\'\' in \'\'\'src/components\'\'\' and \'\'\'export default\'\'\' in \'\'\'src/components\'\'\'\\r\\nPrompt the following error\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/16183057/62990009-d4fbba80-be7c-11e9-9cd5-e72d9a6f2f39.png)\\r\\n\\r\\n\\r\\n\\r\\n","number":16386,"user":{"login":"gaoxiaosong1113"},"state":"closed","created_at":"2019-08-14T02:21:19Z"},{"id":480432735,"title":"[Partial Hydration] Remove SuspenseInstance boundaries upon hydration","body":"I\'ve modified the partial hydration logic to remove suspense instance boundary nodes after hydrating. This will provide a mechanism to determine when hydration happens (and that works with concurrent). I imagine we\'ll have a real API for this in the future, but at the very least this will clean up the high number of boundary nodes in the DOM, while also providing a visual signal to developers as to when hydration happens.","number":16385,"user":{"login":"alexmckenley"},"state":"closed","created_at":"2019-08-14T00:52:47Z"},{"id":480388436,"title":"Make component stack last argument for deprecation warnings","body":"Component stack is the last argument when we use `warning()`.\\r\\n\\r\\nThere are a few cases where we append stack manually. (Maybe some of them don\'t need to.) Those were originally written to be more readable. However, increasingly we\'re using tooling that treats last argument specially if it looks like a component stack. Both in RN and in FB5. We\'ll likely do the same in CRA/Next/etc.\\r\\n\\r\\nSo let\'s always put component stack last consistently. This makes it easier to build richer UIs and looks decent in console anyway.\\r\\n\\r\\n<img width=\\"1062\\" alt=\\"Screen Shot 2019-08-13 at 10 57 24 PM\\" src=\\"https://user-images.githubusercontent.com/810438/62980187-bc0fec80-be1d-11e9-9196-616fbc0273f7.png\\">\\r\\n","number":16384,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-13T21:57:18Z"},{"id":480320453,"title":"Partial support for React.lazy() in server renderer.","body":"Provides partial support for React.lazy() components from the existing PartialRenderer server-side renderer.\\r\\n\\r\\nLazy components which are already resolved (or rejected), perhaps with something like `react-ssr-prepass`, can be continued into synchronously. If they have not yet been initialized, they\'ll be initialized before checking, opening the possibility to exploit this capability with a babel transform. If they\'re pending (which will typically be the case for a just initialized async ctor) then the existing invariant continues to be thrown.","number":16383,"user":{"login":"leebyron"},"state":"closed","created_at":"2019-08-13T19:11:15Z"},{"id":480287797,"title":"False-positive security precaution warning (`javascript:` URLs)","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact 16.9.0 deprecates `javascript:` URLs (@sebmarkbage in #15047). It was motivated by preventing XSS vulnerability that can be used by injecting client-side scripts:\\r\\n```jsx\\r\\n<a href={url}>Unsafe Link</a>\\r\\n```\\r\\nThe following code cannot be exploited by attackers, it cannot be used to inject XSS:\\r\\n\\r\\n```jsx\\r\\n<a href=\\"javascript:void(0)\\">Safe Link</a>\\r\\n```\\r\\nReact 16.9 reports the security precaution warning for the example:\\r\\n```\\r\\nWarning: A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed \\"javascript:void(0)\\".\\r\\n```\\r\\n[![Edit determined-rgb-sws4g](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/determined-rgb-sws4g?fontsize=14)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expected that security precaution warnings aren\'t reported for values that cannot be controlled by attackers.\\r\\n\\r\\nThere were also [concerns](https://github.com/facebook/react/pull/15047/files#r264357918) regarding common patterns like `javascript:void(0)`, see @gaearon comment:\\r\\n> Especially javascript:void(0) seems like it\'s still pretty common because it\'s copy pasted from old samples etc. Is it dangerous to whitelist that one? Is it a vector by itself?\\r\\n\\r\\nIf there\'re tons of reported security issues, you definitely ignore something important.\\r\\n\\r\\nFor reference: [Angular\u2019s cross-site scripting security model](https://angular.io/guide/security#angulars-cross-site-scripting-security-model)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.9.0 is affected. 16.8.6 doesn\'t report the warning.\\r\\n","number":16382,"user":{"login":"sergei-startsev"},"state":"closed","created_at":"2019-08-13T17:56:22Z"},{"id":480284764,"title":"Import React DevTools v4","body":"This PR imports the entire [React DevTools v4 git repository](https://github.com/bvaughn/react-devtools-experimental) (with history). I will manually migrate open issues after this PR has landed.\\r\\n\\r\\nDespite its size, this PR is almost entirely additive:\\r\\n```sh\\r\\n$git diff master --name-status | grep -v \\"A\\"       \\r\\nM\\t.circleci/config.yml\\r\\nM\\t.eslintignore\\r\\nM\\t.gitignore\\r\\nM\\tpackage.json\\r\\nM\\tpackages/react-debug-tools/src/ReactDebugHooks.js\\r\\nM\\tpackages/react-devtools-core/package.json\\r\\nM\\tpackages/react-devtools-inline/package.json\\r\\nM\\tpackages/react-devtools/package.json\\r\\nM\\tscripts/flow/config/flowconfig\\r\\nM\\tscripts/jest/config.build.js\\r\\nM\\tscripts/jest/config.source-persistent.js\\r\\nM\\tscripts/jest/config.source.js\\r\\nM\\tscripts/jest/preprocessor.js\\r\\nM\\tscripts/print-warnings/print-warnings.js\\r\\nM\\tyarn.lock\\r\\n```\\r\\n\\r\\n# Checklist\\r\\n- [x] Import (with history preserved)\\r\\n- [x] Delete `ReactDebugHooks` fork (and use `react-debug-tools`)\\r\\n- [x] Relocate unique dependencies to the appropriate `package.json`\\r\\n- [x] Automated tests\\r\\n  - [x] Make sure all DevTools tests pass\\r\\n  - [x] Make sure CI runs DevTools tests also\\r\\n- [x] Remove forked\xa0Flow types\\r\\n- [x] Add copyright header to all files\\r\\n- [x] Test builds and artifacts\\r\\n  - [x] `react-devtools` standalone app\\r\\n  - [x] `react-devtools-core` package\\r\\n  - [x] `react-devtools-extensions` (Chrome and Firefox)\\r\\n  - [x] `react-devtools-inline` package\\r\\n  - [x] `react-devtools-shell` test harness\\r\\n- [x] Update outdated `README` instructions\\r\\n- [ ] Fix Now deployment script for demo shell\\r\\n\\r\\n# Folder structure\\r\\n\\r\\n```sh\\r\\n.\\r\\n\u251c\u2500\u2500 fixtures\\r\\n\u2502   \u251c\u2500\u2500 # (existing fixtures...)\\r\\n\u2502   \u2514\u2500\u2500 devtools\\r\\n\u2502       \u251c\u2500\u2500 regression\\r\\n\u2502       \u2514\u2500\u2500 standalone\\r\\n\u2514\u2500\u2500 packages\\r\\n    \u251c\u2500\u2500 # (existing packages...)\\r\\n    \u251c\u2500\u2500 react-devtools # Published to NPM\\r\\n    \u251c\u2500\u2500 react-devtools-core # Published to NPM\\r\\n    \u251c\u2500\u2500 react-devtools-extensions # Published to Chrome/Firefox stores\\r\\n    \u2502       \u251c\u2500\u2500 chrome\\r\\n    \u2502       \u251c\u2500\u2500 firefox\\r\\n    \u2502       \u2514\u2500\u2500 shared\\r\\n    \u251c\u2500\u2500 react-devtools-inline # Published to NPM\\r\\n    \u251c\u2500\u2500 react-devtools-shared # Source for other DevTools packages\\r\\n    \u2514\u2500\u2500 react-devtools-shell # Dev app built with \\"react-devtools-inline\\"\\r\\n```\\r\\n\\r\\n# Importing\\r\\n\\r\\nThe goal of this import is to preserve history from the DevTools v4 fork. Below are the steps I followed. Afterward, I verified that `git log --follow` worked as expected on imported files.\\r\\n\\r\\n## Prepare fork for merge\\r\\n```sh\\r\\nmkdir ~/Desktop/devtools-merge\\r\\ncd ~/Desktop/devtools-merge\\r\\n\\r\\ngit init .\\r\\ngit commit -m \\"Initializing empty merge repo\\" --allow-empty  \\r\\n\\r\\ngit remote add -f fork git@github.com:bvaughn/react-devtools-experimental.git\\r\\ngit merge fork/master --allow-unrelated-histories\\r\\n\\r\\n# Moved everything except \\"packages\\" into a new \\"extension\\" subdirectory\\r\\n# to avoid merge conflicts with React repo folder structure\\r\\n```\\r\\n\\r\\n## Import into React\\r\\n```sh\\r\\ncd ~/Documents/git/react\\r\\n\\r\\ngit remote add devtools-merge ~/Desktop/devtools-merge\\r\\ngit fetch devtools-merge\\r\\n\\r\\ngit checkout -b devtools-v4-merge\\r\\ngit merge --allow-unrelated-histories devtools-merge/master\\r\\n\\r\\ngit remote rm devtools-merge\\r\\n```","number":16381,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-13T17:49:41Z"},{"id":480174111,"title":"[CI] Disable coverage","body":"Looks like it\'s broken. Don\'t know if this will work to disable it while we figure out why?\\r\\n\\r\\n","number":16380,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-13T14:00:35Z"},{"id":480159299,"title":"Remove \\"Waiting for async callback\\" User Timing measurement","body":"This measurement is already broken (mark/measure calls for it mismatch in Concurrent Mode). This makes debugging very annoying because \\"break on caught exceptions\\" stops there all the time.\\r\\n\\r\\nIt\'s difficult to keep it up to date because it models a pause rather than an actual work slice. This is why we keep breaking it. I propose that we just remove this timing, and fix it forward with Root Events.","number":16379,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-13T13:32:29Z"},{"id":480078763,"title":"Rehydrate multiple dom elements.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nThis might be a feature as it seems to not be possible.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nNote: This might seem very very weird to some people but this is necessary as we are using micro frontends so I am technically loading 20 react apps in one html page. Hence the need to rehydrate them with one script.\\r\\n\\r\\nI get all elements by a certain data tag, this returns an array with dom elements and I loop over them and running hydrate on each one.\\r\\n\\r\\nNow, this works... kind of.\\r\\n\\r\\nThe server returns `<div style=\\"color:blue\\" data-reactroot=\\"\\">test</div>` while the client will turn this into `<div>test</div>`, I\'m only passing the color prop on the server for testing purposes.\\r\\n\\r\\nReact inspector shows all divs correctly as react elements with no props. But... the actual html output is different. Only the first div will have the updated html while all others after it will still have the color prop from the server render meaning that they weren\'t hydrated correctly.\\r\\n\\r\\nonClick events and such do work though for all the divs so the event listeners are connected correctly.\\r\\n\\r\\n**What is the expected behaviour?**\\r\\n\\r\\nI would expect to be able to run hydrate on multiple dom elements without issue. \\r\\n","number":16378,"user":{"login":"Pixelatex"},"state":"closed","created_at":"2019-08-13T10:25:34Z"},{"id":480007069,"title":"multiple `setState` calls in async callbacks trigger multilple updates","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen using `usingState` hook, mutiple `setState` calls in async callbacks will trigger multiple updates and `useEffect`s.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/react-async-set-state-bug-zsztm\\r\\n\\r\\nClick \'sync\' button, `countA` and `countB` will be updated at the same time. The `useEffect` will run only ONCE with the updated `countA` and `countB`.\\r\\n\\r\\nClick \'async\' button, `countA` and `countB` will be updated in sequence. The `useEffect` will run TWICE with the updated `countA` and old `countB` at the first time and both updated values at the second time.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe two `setState`s should only triger one update.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.9.0\\r\\n","number":16377,"user":{"login":"wangcheng"},"state":"closed","created_at":"2019-08-13T07:43:37Z"},{"id":479965143,"title":"Add Priorities for All Event Types","body":"Currently the simple event plugin defines a priority for the event but not all events go through the SimpleEventPlugin. That\'s just one of several EventPlugins. The remaining ones now get the wrong priority associated with them. \\r\\n\\r\\nE.g. I think all of these should be discrete:\\r\\n\\r\\nchange\\r\\ncompositionend\\r\\ncompositionstart\\r\\ncompositionupdate\\r\\nselectionchange\\r\\ntextinput\\r\\n\\r\\nThese show up too but I don\'t know if they\'re even bridged.\\r\\n\\r\\ndblclick\\r\\npointerenter\\r\\npointerleave\\r\\n\\r\\nFlare defines its own priorities.","number":16376,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2019-08-13T05:27:07Z"},{"id":479932212,"title":"Type of ContextProvider value props from useReducer","body":"I did a chunk of code to use `useContext` and `useReducer` to achieve the local state management. \\r\\n\\r\\nBut some type errors poped up,\\r\\n\\r\\n```javascript\\r\\n(property) state: Group\\r\\nType \'{ state: Group; dispatch: Dispatch<Action>; }\' is not assignable to type \'Group\'.\\r\\n  Object literal may only specify known properties, and \'state\' does not exist in type \'Group\'.ts(2322)\\r\\nindex.d.ts(290, 9): The expected type comes from property \'value\' which is declared here on type \'IntrinsicAttributes & ProviderProps<Group>\'\\r\\n```\\r\\n\\r\\nTo make the type `Group` to `any` will fix the problem and working well, but I don\'t really want to do that.\\r\\n\\r\\nHere\'s the code:\\r\\n\\r\\n    interface People {\\r\\n      name: string\\r\\n      age: number\\r\\n    }\\r\\n    \\r\\n    interface Group {\\r\\n      a: People\\r\\n      b: People\\r\\n    }\\r\\n    \\r\\n    interface Action {\\r\\n      type: string\\r\\n      payload: number\\r\\n    }\\r\\n    \\r\\n    // const myInitalState: Group = {\\r\\n    const myInitalState: any = {\\r\\n      a: {\\r\\n        name: \'Max\',\\r\\n        age: 16\\r\\n      },\\r\\n      b: {\\r\\n        name: \'Pom\',\\r\\n        age: 22\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    const myReducer = (state: Group, {type, payload}: Action) => {\\r\\n      switch (type) {\\r\\n        case \'a_increase\':\\r\\n          return {...state, a: { ...state.a, age: payload + 1 }}\\r\\n        case \'b_decrease\':\\r\\n          return {...state, b: { ...state.b, age: payload - 1 }}\\r\\n        default:\\r\\n          return state\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    const MyContext = createContext(myInitalState)\\r\\n    \\r\\n    const [state, dispatch] = useReducer(myReducer, myInitalState)\\r\\n    \\r\\n    const Comp = () => (\\r\\n      // this state will cause type error, change myInitialState type to any will fix it\\r\\n      <MyContext.Provider value={{state, dispatch}}>\\r\\n        <div>Group</div>\\r\\n               .\\r\\n               .\\r\\n               .\\r\\n      </MyContext.Provider>\\r\\n    )\\r\\n\\r\\nSo what\'s going on here? What\'s the correct type of `<MyContext.Provider value={???}>`.","number":16375,"user":{"login":"moshe444"},"state":"closed","created_at":"2019-08-13T02:40:20Z"},{"id":479889545,"title":"Verify that Dehydrated Boundaries (and SuspenseList) Works with DevTools","body":"The fixture might be a good start https://github.com/facebook/react/tree/master/fixtures/ssr (enableSuspenseServerRenderer flag to try it).\\r\\n\\r\\nIt has a long suspending thing.\\r\\n\\r\\nIt doesn\'t have a SuspenseList yet but might be nice.","number":16374,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2019-08-12T23:12:21Z"},{"id":479863147,"title":"Fix typo in error code map","body":"\\"responer\\" -> \\"responder\\"\\r\\n\\r\\nI also removed an unused error code that never shipped.\\r\\n","number":16373,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-12T21:40:47Z"},{"id":479859176,"title":"Remove flag that reverts #15650","body":"The change in #15650 has fully rolled out, so we can remove the flag\\r\\nthat reverts it.","number":16372,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-12T21:30:26Z"},{"id":479855596,"title":"Add test case for #16359","body":"See https://github.com/facebook/react/pull/16359#issuecomment-520598675","number":16371,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-12T21:20:17Z"},{"id":479800265,"title":"useEffect does not get executed again after 16.8.0-alpha1","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nIt is a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nAs seen in this [codepen](https://codesandbox.io/s/react-hooks-playground-k8hxy), the useEffect gets updated every 500ms as expected and mentioned in the docs:  \\r\\n\\r\\n> Does useEffect run after every render? Yes! By default, it runs both after the first render and after every update.\\r\\n\\r\\nBut if the react version is updated to a newer version, the timeout is called, the setCounter is called with 1 again (after the second run) which leads to a rerender of the component, but the effect is not executed as expected (2 is not called again and there is no loop).  As mentioned in the docs, use Effect without a second parameter should create a loop by calling the setTimeout again after setCount. But this is not the case for versions above 16.8.0-alpha1. Is this intended or not?\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nThis [codepen](https://codesandbox.io/s/react-hooks-playground-k8hxy) works by creating a infinity loop. But updating the react version here \\r\\n![image](https://user-images.githubusercontent.com/17567991/62890380-aa5a1680-bd43-11e9-8f6c-0e026510365a.png)\\r\\n\\r\\nwill break the functionality and will not loop again because the useEffect is note executed if the prevoiusState === currentState. But the component gets rerendered anyway.\\r\\n\\r\\nIf the intended behavior is not the rerender the component if the state is the same, console.log(1) should not be called. So either the useEffect does not work as intended, or it is not intended that  useState triggers a rerender, if the state is the same.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe expected behavior is for the useEffect to be called in a loop even if the state is the same and the functional component is rendered.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.0-alpha1 works, version above it do not.\\r\\n\\r\\nThanks for your time and I really enjoy coding with React. Keep it up.","number":16370,"user":{"login":"Domino987"},"state":"closed","created_at":"2019-08-12T19:00:06Z"},{"id":479794914,"title":"[Partial Hydration] Dehydrated suspense boundaries in SuspenseList","body":"__Builds on top of #16352 and #16359__\\r\\n\\r\\nIf we get an insertion after a boundary, that has not yet been hydrated, we take our best guess at which state the HTML is showing.\\r\\n\\r\\nisSuspenseInstancePending means that we\'re still waiting for more server HTML before we can hydrate. This should mean that we\'re showing the fallback state.\\r\\n\\r\\nisSuspenseInstanceFallback means that we want to client render something. That most likely means that the server was unable to render and is displaying a fallback state in this slot.\\r\\n\\r\\nAdds tests to ensure that dehydrated components don\'t consider the force flag set by suspense list. I.e. we should be able to hydrate something that is already showing content even though insertions are forced into fallback state.","number":16369,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-12T18:47:22Z"},{"id":479771890,"title":"[react-events] Fix keyboard responder test","body":"Fixes a bad test (scroll -> keydown)","number":16368,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-12T17:52:05Z"},{"id":479684926,"title":"Changing async act() to propagate returned value from async callback","body":"Addresses #16366\\r\\n","number":16367,"user":{"login":"pfgray"},"state":"closed","created_at":"2019-08-12T14:41:58Z"},{"id":479678038,"title":"`act` should yield the value returned from the async function.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\nA couple of things have surprised me about the new asynchronous `act` API.\\r\\n\\r\\n#### 1. Act doesn\'t return a promise.\\r\\n\\r\\nCurrently the `act` function returns an object with a `then` method that doesn\'t return a promise.\\r\\n\\r\\nRecently, I tried to write something like:\\r\\n\\r\\n```js\\r\\nact(() => {\\r\\n  return doSomethingAsynchronous()\\r\\n})\\r\\n.then(() => {\\r\\n  // ...\\r\\n})\\r\\n.then(() => {\\r\\n  // ...\\r\\n})\\r\\n```\\r\\n\\r\\nThe second `.then` call throws an error because the value that is returned from `act` isn\'t a full-fledged `Promise`, but rather just an object that contains a `.then` method that returns `undefined`. This is fine for simple `async`/`await` cases, but definitely caught me by surprise.\\r\\n\\r\\n\\r\\n#### 2. Act discards the returned value.\\r\\n\\r\\nAct also throws away the value returned from the async function callback, which makes it harder to use the values generated there. For example, if I wanted to use the value yielded by `doSomethingAsynchronous`, I would need to introduce a mutable variable:\\r\\n\\r\\n```js\\r\\nlet returnedValue;\\r\\nawait act(async () => {\\r\\n  returnedValue = await doSomethingAsynchronous()\\r\\n})\\r\\n\\r\\n// use returnedValue here\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\nIf `act` simply propogates the returned value from the asynnchronous callback, this will solve the confusing bits above, allowing for things like:\\r\\n\\r\\n```\\r\\nconst returnedValue = await act(() => doSomethingAsynchronous())\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":16366,"user":{"login":"pfgray"},"state":"closed","created_at":"2019-08-12T14:29:50Z"},{"id":479668806,"title":"ErrorBoundary rendering multiple copies of itself when ref assignment fails","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen a error occurs during the assignment of a `ref` (and maybe other conditions), a error boundary wrapping that error may get confused and it renders itself multiple times inside the same parent. See https://codesandbox.io/s/stoic-fermi-6etqb which renders:\\r\\n\\r\\n```html\\r\\n<div id=\\"root\\">\\r\\n  <div class=\\"boundary\\"><span>content</span></div>\\r\\n  <div class=\\"boundary\\"><span>error</span></div>\\r\\n</div>\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n```html\\r\\n<div id=\\"root\\">\\r\\n  <div class=\\"boundary\\"><span>error</span></div>\\r\\n</div>\\r\\n```","number":16365,"user":{"login":"silverwind"},"state":"open","created_at":"2019-08-12T14:12:35Z"},{"id":479606279,"title":"scheduler callback is not a function","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nAfter update react env from 16.8.6 -> 16.9.0\\r\\nI catch errors:\\r\\n```\\r\\nscheduler.development.js:107 Uncaught TypeError: callback is not a function\\r\\n    at flushFirstCallback (scheduler.development.js:107)\\r\\n    at flushWork (scheduler.development.js:219)\\r\\n    at MessagePort../node_modules/scheduler/cjs/scheduler.development.js.channel.port1.onmessage (scheduler.development.js:611)\\r\\nflushFirstCallback @ scheduler.development.js:107\\r\\nflushWork @ scheduler.development.js:219\\r\\n./node_modules/scheduler/cjs/scheduler.development.js.channel.port1.onmessage @ scheduler.development.js:611\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNo errors\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nVersion 16.9.0\\r\\nOn 16.8.6 all works fine\\r\\n","number":16364,"user":{"login":"Fyzu"},"state":"closed","created_at":"2019-08-12T11:57:47Z"},{"id":479600132,"title":"Add missing valid unitless CSS Property numbers","body":"I have added missing CSS properties that produce valid CSS without a unit.","number":16363,"user":{"login":"brandonkal"},"state":"closed","created_at":"2019-08-12T11:41:26Z"},{"id":479501383,"title":"Disable react strict mode on third party libraries","body":"I started to use react strict mode in my project.\\r\\n\\r\\nBut I\'m using third party libraries (like old react-bootstrap).\\r\\n\\r\\nIs it possible to disable the strict mode on those libraries specifically, or disable strict mode to all third party libraries?","number":16362,"user":{"login":"israelKusayev"},"state":"closed","created_at":"2019-08-12T07:25:18Z"},{"id":479498959,"title":"Listen to state change useReducer","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nNone. This is a question\\r\\n**What is the current behavior?**\\r\\nI try to create an object with the changed state value; however, the new object doesn\'t have the newest data. \\r\\n\\r\\n**This is the working version**\\r\\n![image](https://user-images.githubusercontent.com/36496259/62849932-c7332180-bd24-11e9-94d5-16eb3a6cd672.png)\\r\\n![image](https://user-images.githubusercontent.com/36496259/62850497-5ab92200-bd26-11e9-95df-52110538bb92.png)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nso the basketDetails object if I assign the id: state2.basketId then this object will have the value id of \\"\\" instead of the newest value assign by the dispatch function. \\r\\n![image](https://user-images.githubusercontent.com/36496259/62850227-8b4c8c00-bd25-11e9-8871-b1be0745462c.png)\\r\\n![image](https://user-images.githubusercontent.com/36496259/62850262-ac14e180-bd25-11e9-95c3-93c15b3b1370.png)\\r\\nBut the state print outside this function has the newest data:\\r\\n![image](https://user-images.githubusercontent.com/36496259/62850340-ee3e2300-bd25-11e9-8972-ca04835eeb35.png)\\r\\n\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.9.0","number":16361,"user":{"login":"totaland"},"state":"closed","created_at":"2019-08-12T07:17:19Z"},{"id":479478863,"title":"[dev-experience] 16.9.0 exception text if loading multiple versions of react-dom is misleading","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nafter updating 16.8.6>16.9.0 root functional component throws exception \\"Invariant Violation: Invalid hook call\\".\\r\\n\\r\\nIn fact, exception was caused by loading multiple versions of react-dom in child components.\\r\\n\\r\\nThe exception text is misleading, would be great to crash earlier (eg at the import stage) with appropriate message\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nAdd multiple versions of react-dom as deps from multiple referenced npm packages; not easily reproduceable w/fiddle\\r\\n\\r\\n**What is the expected behavior?**\\r\\nError on import, not on render, ideally including version numbers\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact-dom 16.9.0+16.8.4 in this case; all browsers","number":16360,"user":{"login":"wizzard0"},"state":"closed","created_at":"2019-08-12T05:57:41Z"},{"id":479404582,"title":"Reset didReceiveUpdate in beginWork","body":"This is a bad bug. It means that we sometimes inherit\\r\\ndidReceiveUpdate from a previous component\'s begin.\\r\\n\\r\\nEffectively this only means that we\'re overrendering in some cases.\\r\\n\\r\\nWe should refactor to get rid of this as a global flag.\\r\\n\\r\\nI don\u2019t have a test case because it only showed up as an intermediate state in another test. Maybe we can come up with something simplified.","number":16359,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-11T19:53:30Z"},{"id":479390208,"title":"React state values is shared between two components!!!","body":"**Bug**\\r\\n\\r\\nI have two components: \\r\\n `ComponentA` \\r\\n\\r\\n```js\\r\\nclass ComponentA extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.nextCardSet = this.nextCardSet.bind(this);\\r\\n    this.prevCardSet = this.prevCardSet.bind(this);\\r\\n  }\\r\\n  async prevCardSet() {\\r\\n    const currPage = this.state.currPage - 1;\\r\\n    const data = this.state.dataStore[currPage - 1];\\r\\n    await this.setState({\\r\\n      currPage,\\r\\n      data\\r\\n    });\\r\\n  }\\r\\n\\r\\n  async nextCardSet() {\\r\\n    const currPage = this.state.currPage + 1;\\r\\n    const data = this.state.dataStore[currPage - 1];\\r\\n    await this.setState({\\r\\n      currPage,\\r\\n      data\\r\\n    });\\r\\n  }\\r\\n\\r\\n  async componentDidMount() {\\r\\n    const response = await this.getData();\\r\\n\\r\\n    //...Doing some stuff...\\r\\n\\r\\n    await this.setState({\\r\\n      dataStore: mainData,\\r\\n      data: mainData[currPage - 1],\\r\\n      currPage,\\r\\n      totalPages,\\r\\n      isLoading: false\\r\\n    });\\r\\n  }\\r\\n\\r\\n  async getData() {\\r\\n    const response = await axios.get(\\r\\n      \'http://localhost:4000/getUserOverviewJson\'\\r\\n    );\\r\\n    return response;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n          <Fab size=\\"small\\" disabled={this.state.currPage === 1 ? true : false}>\\r\\n            <NavigateBefore\\r\\n              onClick={this.prevCardSet}\\r\\n            />\\r\\n          </Fab>\\r\\n          <Fab\\r\\n            size=\\"small\\"\\r\\n            disabled={\\r\\n              this.state.currPage === this.state.totalPages ? true : false\\r\\n            }\\r\\n          >\\r\\n            <NavigateNext\\r\\n              onClick={this.nextCardSet}\\r\\n            />\\r\\n          </Fab>\\r\\n        </div>\\r\\n        <CallWorkRender data={this.state.data} />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n`ComponentB`\\r\\n```js\\r\\nclass ComponentB extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.data = props.data;\\r\\n  }\\r\\n\\r\\n  getComponent = componentID => {\\r\\n    const data = this.data[\'pageData\'].shift();\\r\\n    return ComponentGetter.getComponent(componentID, data);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { width, data } = this.props;\\r\\n    this.data = data;\\r\\n    const layoutConfigCallPrep = layoutConfig[\'1\'][width];\\r\\n\\r\\n    return (\\r\\n      <FlexGrid\\r\\n        layoutConfiguration={layoutConfigCallPrep}\\r\\n        getComponent={this.getComponent}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default withWidth()(ComponentB);\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\nIn the initial load `ComponentA` sends data to `ComponentB` , so in CompB when `getComponent()` method is called it pops elements from array which it got as props.\\r\\n\\r\\n**Now the data in array is manipulated in CompB but when I try to print the state of  CompA  its data also get manipulated. I don\'t understand how this weird data manipulation is happening. How does the data of one component gets altered due to data change in other component?**\\r\\n\\r\\n*React@16.8.6*\\r\\n*Windows 10*\\r\\n","number":16358,"user":{"login":"PranjalAgni"},"state":"closed","created_at":"2019-08-11T17:08:56Z"},{"id":479375847,"title":"DOM is not updated after `render()`","body":"React 16.8.6, also updated to 16.9.0 \u2014 same behavior.\\r\\nSomewhere deep in the component tree there\'s a component that renders a `<button/>`.\\r\\nOn the first run it renders it with one `style`, on a subsequent second run it renders it with another `style`.\\r\\nI placed a `console.log(style)` there and I can see that when the `style` property is updated the corresponding console line is there.\\r\\nStill, the actual DOM node for the `<button style={style}/>` is not updated (I can see the previous `style` attribute in the Inspector).\\r\\nIt is updated only if I \\"kick\\" the component to re-render manually.\\r\\nCan this even be possible?\\r\\nIf you have no ideas then I\'ll close this issue.","number":16357,"user":{"login":"catamphetamine"},"state":"closed","created_at":"2019-08-11T14:30:45Z"},{"id":479352438,"title":"[eslint-plugin-react-hooks] Fixed crash when referencing arguments in arrow functions.","body":"**Description**:\\r\\nReferencing arguments from inside an arrow function caused a crash.\\r\\n\\r\\nFixes issue: #16003 \\r\\n\\r\\n\\r\\n","number":16356,"user":{"login":"hristo-kanchev"},"state":"closed","created_at":"2019-08-11T09:49:25Z"},{"id":479345160,"title":"Combination of wrapping component in function, updating state through hook and updating parent state through event listener does not update component\'s own state","body":" This combination of factors results in unexpected behaviour:\\r\\n\\r\\n* returning a child component from a function in a parent component\\r\\n* having an onClick listener inside child component update its own state through a hook call\\r\\n* having that same listener call an event listener that updates parent state\\r\\n\\r\\ncodesandbox.io demo: https://codesandbox.io/s/nice-kepler-bur5h\\r\\n\\r\\nI would expect the wrapped component to behave similar to the normal child component. Instead, upon click, only the parent state updates while its own state stays unchanged.\\r\\n","number":16355,"user":{"login":"luukschipperheyn"},"state":"closed","created_at":"2019-08-11T08:17:37Z"},{"id":479332417,"title":"Warn when textarea switches between controlled and uncontrolled","body":"Fixes issue #16342 \\r\\n\\r\\nI think the select element may need this warning as well. If so I will probably create a PR for that shortly.\\r\\n","number":16354,"user":{"login":"kdreagle"},"state":"closed","created_at":"2019-08-11T04:50:26Z"},{"id":479305994,"title":"missing dependencies in creact-react-app project","body":"when I tape `yarn check` in my react.js project it appears this error\\r\\n```\\r\\nyarn check v1.16.0\\r\\ninfo fsevents@2.0.6: The platform \\"linux\\" is incompatible with this module.\\r\\ninfo \\"fsevents@2.0.6\\" is an optional dependency and failed compatibility check. Excluding it from installation.\\r\\ninfo fsevents@1.2.9: The platform \\"linux\\" is incompatible with this module.\\r\\ninfo \\"fsevents@1.2.9\\" is an optional dependency and failed compatibility check. Excluding it from installation.\\r\\nwarning \\"react-scripts#babel-jest@^24.8.0\\" could be deduped from \\"24.8.0\\" to \\"babel-jest@24.8.0\\"\\r\\nwarning \\"react-scripts#babel-preset-react-app#@babel/plugin-transform-react-constant-elements@7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-react-constant-elements@7.2.0\\"\\r\\nwarning \\"react-scripts#babel-preset-react-app#@babel/plugin-transform-react-display-name@7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-react-display-name@7.2.0\\"\\r\\nwarning \\"react-scripts#babel-preset-react-app#@babel/preset-react@7.0.0\\" could be deduped from \\"7.0.0\\" to \\"@babel/preset-react@7.0.0\\"\\r\\nwarning \\"react-scripts#babel-jest#@babel/core@^7.0.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"react-scripts#babel-loader#@babel/core@^7.0.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"react-scripts#babel-plugin-named-asset-import#@babel/core@^7.1.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"jest-resolve#jest-pnp-resolver#jest-resolve@*\\" could be deduped from \\"24.8.0\\" to \\"jest-resolve@24.8.0\\"\\r\\nwarning \\"webpack#chrome-trace-event#tslib@^1.9.0\\" could be deduped from \\"1.10.0\\" to \\"tslib@1.10.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-class-properties#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-decorators#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-object-rest-spread#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-syntax-dynamic-import#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-classes#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-destructuring#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-flow-strip-types#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-react-display-name#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-runtime#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-async-generator-functions@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-proposal-async-generator-functions@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-json-strings@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-proposal-json-strings@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-optional-catch-binding@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-proposal-optional-catch-binding@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-unicode-property-regex@^7.4.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-proposal-unicode-property-regex@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-syntax-async-generators@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-syntax-async-generators@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-syntax-optional-catch-binding@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-syntax-optional-catch-binding@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-arrow-functions@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-arrow-functions@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-async-to-generator@^7.4.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-async-to-generator@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-block-scoped-functions@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-block-scoped-functions@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-block-scoping@^7.4.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-block-scoping@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-computed-properties@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-computed-properties@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-dotall-regex@^7.4.3\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-dotall-regex@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-duplicate-keys@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-duplicate-keys@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-exponentiation-operator@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-exponentiation-operator@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-for-of@^7.4.3\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-for-of@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-function-name@^7.4.3\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-function-name@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-literals@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-literals@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-member-expression-literals@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-member-expression-literals@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-amd@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-modules-amd@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-commonjs@^7.4.3\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-modules-commonjs@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-systemjs@^7.4.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-modules-systemjs@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-modules-umd@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-modules-umd@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-named-capturing-groups-regex@^7.4.2\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-named-capturing-groups-regex@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-new-target@^7.4.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-new-target@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-object-super@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-object-super@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-parameters@^7.4.3\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-parameters@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-property-literals@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-property-literals@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-regenerator@^7.4.3\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-regenerator@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-reserved-words@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-reserved-words@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-spread@^7.2.0\\" could be deduped from \\"7.2.2\\" to \\"@babel/plugin-transform-spread@7.2.2\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-template-literals@^7.2.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-template-literals@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-typeof-symbol@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-typeof-symbol@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-transform-unicode-regex@^7.4.3\\" could be deduped from \\"7.4.4\\" to \\"@babel/plugin-transform-unicode-regex@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-display-name@^7.0.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-react-display-name@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-jsx@^7.0.0\\" could be deduped from \\"7.3.0\\" to \\"@babel/plugin-transform-react-jsx@7.3.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-jsx-self@^7.0.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-react-jsx-self@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-jsx-source@^7.0.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-transform-react-jsx-source@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-typescript#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"react-scripts#babel-jest#babel-preset-jest#@babel/core@^7.0.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"@typescript-eslint/eslint-plugin#tsutils#tslib@^1.8.1\\" could be deduped from \\"1.10.0\\" to \\"tslib@1.10.0\\"\\r\\nwarning \\"eslint#inquirer#rxjs#tslib@^1.9.0\\" could be deduped from \\"1.10.0\\" to \\"tslib@1.10.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-class-properties#@babel/helper-create-class-features-plugin#@babel/core@^7.0.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/preset-env#@babel/plugin-proposal-async-generator-functions#@babel/plugin-syntax-async-generators@^7.2.0\\" could be deduped from \\"7.2.0\\" to \\"@babel/plugin-syntax-async-generators@7.2.0\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-proposal-decorators#@babel/plugin-syntax-decorators#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-flow-strip-types#@babel/plugin-syntax-flow#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"@babel/preset-react#@babel/plugin-transform-react-display-name#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nerror \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-jsx-self\\" not installed\\r\\nerror \\"babel-preset-react-app#@babel/preset-react#@babel/plugin-transform-react-jsx-source\\" not installed\\r\\nwarning \\"babel-preset-react-app#@babel/preset-typescript#@babel/plugin-transform-typescript#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"babel-preset-react-app#@babel/plugin-transform-typescript#@babel/plugin-syntax-typescript#@babel/core@^7.0.0-0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nwarning \\"jest-config#babel-jest#@babel/core@^7.0.0\\" could be deduped from \\"7.4.4\\" to \\"@babel/core@7.4.4\\"\\r\\nerror \\"babel-jest#babel-preset-jest\\" not installed\\r\\ninfo Found 68 warnings.\\r\\nerror Found 3 errors.\\r\\ninfo Visit https://yarnpkg.com/en/docs/cli/check for documentation about this command.\\r\\n```\\r\\nI attempted to fix it with `yarn install` but nothing change and show that they all up-to-date\\r\\n```\\r\\nyarn install v1.16.0\\r\\n[1/4] Resolving packages...\\r\\nsuccess Already up-to-date.\\r\\nDone in 0.85s.\\r\\n```\\r\\nI can\'t understand what\'s the reason that causes this and how to fix it.","number":16353,"user":{"login":"moun3iim"},"state":"closed","created_at":"2019-08-10T21:00:52Z"},{"id":479302409,"title":"[Partial Hydration] Attempt hydration at a higher pri first if props/context changes","body":"__Builds on top of #16346__\\r\\n\\r\\nI attempted this in an early PR but the approach of using mutation to change fiber tags was broken and lead to bugs. Now that\'s fixed in #16346 and I can finally rebase this fix.\\r\\n\\r\\nIf we haven\'t yet hydrated a boundary, we may still get props or context flowing into it. Currently, the delete the content and replace it with a content render in that case. Dropping events and state as a result.\\r\\n\\r\\nWhen we\'re already rendering the future state, it is too late to hydrate since we can\'t continue rendering down with the new props/context as it wouldn\'t yield the same result as what was rendered on the server. However, assuming people use immutable data for hydration as they should, then we can solve this problem. We solve it by \\"going back in time\\" to an earlier point on the timeline and hydrate using those props/context. After that is done, we then render the new props/context on top of it.\\r\\n\\r\\nIn practice, this just means that we increase the priority of the hydration to slightly higher than the render that otherwise would have to delete the content.\\r\\n\\r\\nWe also mark this as a \\"bad\\" loading state which means that we\'ll also take advantage of our maximum allowed suspense time to wait for any remaining data/code that we\'d need to complete the hydration. Meaning that we can do updates to parents before we have the code to the children and it still looks seamless to the user!","number":16352,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-10T20:11:49Z"},{"id":479302203,"title":"Make SchedulerMinHeap flow strict","body":"@acdlite while browsing Twitter, I saw [an opportunity][1] to do\\r\\nsomething more productive than browsing Twitter.\\r\\n\\r\\n[1]: https://twitter.com/acdlite/status/1160247965908234240\\r\\n\\r\\nTest plan:\\r\\n\\r\\n`yarn flow-ci`, `yarn test-prod`, `yarn lint`","number":16351,"user":{"login":"dmnd"},"state":"closed","created_at":"2019-08-10T20:09:11Z"},{"id":479300694,"title":"use-subscription readme","body":"It\'s not obvious (or I am dumb) why classic `addEventListener` and \'removeEventListener\' within useEffect without using useSubscription can be harmful in concurrent mode.\\r\\n\\r\\nMaybe React should warn about addEventListener usage? What am I missing? Thank you.\\r\\n\\r\\n","number":16350,"user":{"login":"steida"},"state":"closed","created_at":"2019-08-10T19:49:49Z"},{"id":479274774,"title":"How to call function from a function","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\nI am trying to build an website for upload and download music with firebase. The propblem is i am getting the error Typerror: Cannot read \\"uploadMusic\\", where upload music is my function that i am calling after image_upload. I also use bind() in cinstructor but still getting sam issue\\r\\nThis is my code\\r\\n```jsx\\r\\nclass App extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      //.....\\r\\n    };\\r\\n    this.upload_image = this.upload_image.bind(this);\\r\\n    this.uploadMusic = this.uploadMusic.bind(this);\\r\\n    this.savingAll = this.savingAll.bind(this);\\r\\n  }\\r\\n  componentDidMount() {\\r\\n    var firebaseConfig = {\\r\\n    };\\r\\n    if (!firebase.apps.length) {\\r\\n      firebase.initializeApp(firebaseConfig);\\r\\n    }\\r\\n  }\\r\\n  //code for handle changes\\r\\n  upload = () => {\\r\\n    if (\\r\\n      this.state.music !== \\"\\" &&\\r\\n      this.state.singer.length &&\\r\\n      this.state.album.length &&\\r\\n      this.state.name.length &&\\r\\n      this.state.lyrics.length &&\\r\\n      this.state.category.length\\r\\n    ) {\\r\\n      if (this.state.img !== \\"\\") {\\r\\n        this.upload_image();\\r\\n      } else {\\r\\n        var url = \\"somethig\\";\\r\\n        this.uploadMusic(url);\\r\\n      }\\r\\n    } else {\\r\\n      alert(\\"fill all the fields\\");\\r\\n    }\\r\\n  };\\r\\n  upload_image = () => {\\r\\n    console.log(\\"Uploading image\\");\\r\\n    var img = this.state.img;\\r\\n    var img_url;\\r\\n    var ref = firebase\\r\\n      .storage()\\r\\n      .ref()\\r\\n      .child(\\"img/\\" + this.state.name);\\r\\n    ref.put(img).then(function(snapshot) {\\r\\n      ref.getDownloadURL().then(function(url) {\\r\\n        img_url = url;\\r\\n        this.uploadMusic(img_url);//cannot start this function\\r\\n      });\\r\\n    });\\r\\n  };\\r\\n  uploadMusic = img_url => {\\r\\n    console.log(\\"Uploading Music\\");\\r\\n    var music_url;\\r\\n    var ref = firebase\\r\\n      .storage()\\r\\n      .ref()\\r\\n      .child(\\"music/\\" + this.state.name);\\r\\n    ref.put(this.state.music).then(function(snapshot) {\\r\\n      ref.getDownloadURL().then(function(url) {\\r\\n        music_url = url;\\r\\n        this.savingAll(img_url, music_url);\\r\\n      });\\r\\n    });\\r\\n  };\\r\\n  savingAll = (img_url, music_url) => {\\r\\n    console.log(\\"Saving all\\");\\r\\n    var name = this.state.name;\\r\\n    var singer = this.state.singer;\\r\\n    var category = this.state.category;\\r\\n    var album = this.state.album;\\r\\n    var lyrics = this.state.lyrics;\\r\\n    var db = firebase.firestore();\\r\\n    let data = {\\r\\n      name,\\r\\n      singer,\\r\\n      category,\\r\\n      album,\\r\\n      lyrics,\\r\\n      icon: img_url,\\r\\n      music_url: music_url\\r\\n    };\\r\\n    db.collection(\\"tracks\\")\\r\\n      .doc(name)\\r\\n      .set(data);\\r\\n    if (this.state.new_singer) {\\r\\n      console.log(\\"Adding singer\\");\\r\\n      db.collection(\\"singers\\")\\r\\n        .doc(\\"singer\\")\\r\\n        .set({ name: singer });\\r\\n    }\\r\\n    console.log(\\"All finish\\");\\r\\n  };\\r\\n```\\r\\nWhat can i do i have the same issue when i try to read state sometimes","number":16349,"user":{"login":"gopalkhasria"},"state":"closed","created_at":"2019-08-10T14:52:52Z"},{"id":479246335,"title":"Line numbers in component stack of `act` warning in 16.9","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen `act` is missing in a test, the warning contains information about the component tree _(see image below; without stack trace)_, but in a test file which might include the same components several times over it does not help finding the culprit. \\r\\n\\r\\nFurthermore, the warning does not fail a test (not a problem) and as such it\'s shown at the end of test run output (at least in case of Jest) so there is no colocation with test having a problem.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nWe have used a somewhat ugly hack that allows us to see the full stack trace and the originating line of failure in actual test file is there, although buried rather deeply.\\r\\n\\r\\n```js\\r\\nError.stackTraceLimit = Infinity\\r\\nconst origError = console.error\\r\\nconsole.error = function(msg) {\\r\\n    if (/react-wrap-tests-with-act/.test(\\"\\" + msg)) throw new Error(\\"missing act\\")\\r\\n    return origError.apply(this, arguments)\\r\\n}\\r\\n```\\r\\n\\r\\nI have tweaked it a bit in the following Sandbox and I am able to extract the exact location of a failure (notice the console output). It\'s slightly off due to lack of source maps, but in a proper environment, it\'s really helpful.\\r\\n\\r\\n[![Edit patient-leftpad-houzz](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/patient-leftpad-houzz?expanddevtools=1&fontsize=14&module=%2Fsrc%2Ferror.test.tsx&previewwindow=tests)\\r\\n\\r\\n### Not to be confused, this is output AFTER my modification\\r\\n**Currently, the output is without a stack trace**\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/1096340/62821857-daef5400-bb7b-11e9-8554-23a840a80184.png)\\r\\n\\r\\nSo I wonder why not include something like that in React?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nEverything is 16.9","number":16348,"user":{"login":"FredyC"},"state":"closed","created_at":"2019-08-10T08:59:37Z"},{"id":479244898,"title":"customized hook become bad when I open the react devtool and click the hook component dom in the tool.","body":"### issue type: bug\\r\\n### react version 16.8.19\\r\\n### os version: macOS Mojave 10.14.3(18D42)\\r\\n### chrome version: 75.0.3770.142\\r\\n### behavior:\\r\\nI am a react developer, recently I found a very very strange bug/(\u3112o\u3112)/~~\\r\\nlook at the code below, it works very well,  but if I open the chrome react dev tool, and then click the react dom node in the tool, the magic things happen, the Counter become bad...... no matter how I click the button \'inc\' or \'dec\', it does not work again.... why? can you give me a reason or solution, looking forward for your reply, thank you so much.\\r\\n```javascript\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nlet cursor = 1;\\r\\nfunction getCursor() {\\r\\n  return cursor;\\r\\n}\\r\\nfunction incCursor() {\\r\\n  cursor++;\\r\\n}\\r\\n\\r\\nconst cursor_ref_ = {};\\r\\n\\r\\nfunction makeSetState(ccState, ccSetter) {\\r\\n  return function (state) {\\r\\n    ccState.state = Object.assign({}, ccState.state, state);\\r\\n    const newCcState = Object.assign({}, ccState);\\r\\n    ccSetter(newCcState);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction useMySpecialHook(initState) {\\r\\n  const [ccState, ccSetState] = useState({ state: initState, cursor: getCursor() });\\r\\n  console.log(\'ccState.state\', ccState.state);\\r\\n\\r\\n  const isFirstRendered = ccState.cursor === cursor;\\r\\n  let ref;\\r\\n  if (isFirstRendered) {\\r\\n    incCursor();\\r\\n    ref = { ctx: {} };\\r\\n    cursor_ref_[ccState.cursor] = ref;\\r\\n  } else {\\r\\n    ref = cursor_ref_[ccState.cursor]\\r\\n  }\\r\\n  //replace state and setState in every render period\\r\\n  ref.ctx.state = ccState.state;\\r\\n  ref.ctx.setState = makeSetState(ccState, ccSetState)\\r\\n\\r\\n  return ref.ctx;\\r\\n}\\r\\n\\r\\nexport default function Counter() {\\r\\n  const ctx = useMySpecialHook({ count: 100 });\\r\\n  const state = ctx.state;\\r\\n\\r\\n  const dispatch = ({ type }) => {\\r\\n    if (type === \'increment\') ctx.setState({ count: state.count + 1 });\\r\\n    else ctx.setState({ count: state.count - 1 });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div style={{ border: \'1px solid blue\', margin: \'8px\' }}>\\r\\n      <h2>MySpecialHook</h2>\\r\\n      Count: {state.count}\\r\\n      <button onClick={() => dispatch({ type: \'increment\' })}>+</button>\\r\\n      <button onClick={() => dispatch({ type: \'decrement\' })}>-</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```","number":16347,"user":{"login":"fantasticsoul"},"state":"closed","created_at":"2019-08-10T08:43:56Z"},{"id":479233529,"title":"Refactor Partial Hydration","body":"This is a pretty invasive refactor of the SuspenseComponent and DehydratedSuspenseComponent.\\r\\n\\r\\nThe primary purpose of this refactor is to avoid the hacky \\"upgrade\\" and \\"downgrade\\" by mutating the tag.\\r\\n\\r\\nIn the new model, a boundary is always represented by the same SuspenseComponent fiber. Inside it I store a \\"DehydratedFragment\\". The inner fiber represents the dehydrated nodes in the tree. This can be used to delete the whole thing or insert before it.\\r\\n\\r\\nI also switched legacy mode to always client-render the boundary content since we can\'t hydrate partially in legacy mode. It also warns.\\r\\n\\r\\nOtherwise, this (hopefully) shouldn\'t have an semantic differences.","number":16346,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-10T06:21:14Z"},{"id":479210569,"title":"[Scheduler] Temporarily remove wrapper function","body":"This code is being compiled incorrectly by something in the Facebook build pipeline. I\'m removing it temporarily to unblock the sync while we investigate.","number":16345,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-10T00:47:15Z"},{"id":479182859,"title":"Would throwing lazy thenables would avoid side effects in render?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nSharing idea\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThrowing a promise when rendering means side effects happen at render, such as HTTP requests going out to a server.\\r\\n\\r\\nIsn\'t this something that prevent calling render in a \'dry-run\'? A future concrete use case could be if you would need to call render internally from react-conciler for some dependency analytics or similar, wouldn\'t it be great if the thrown thenable didn\'t start off it\'s side effect until \'then\' is actually called?\\r\\n\\r\\nIf so, your own reference libraries, like react-cache could be adjusted to not calling \'then()\' on given thenable, but instead throw a suspender that lazily would call given thenable when framework calls suspender.then().\\r\\n\\r\\nJust a thought that I couldn\'t get out of my mind for a while.\\r\\n","number":16344,"user":{"login":"dfahlander"},"state":"closed","created_at":"2019-08-09T22:03:13Z"},{"id":479182693,"title":"[react-events] Focus/FocusWithin responders with fallbacks","body":"Separate the PointerEvent and fallback implementations.\\r\\nFix the unit tests to cover both PointerEvent and non-PointerEvent environments.\\r\\nFix the focus-visible related callbacks to get called when keys other than \\"Tab\\" are used.","number":16343,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-09T22:02:30Z"},{"id":479129821,"title":"textarea does not show warning when switching from uncontrolled to controlled like inputs do","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhile things like `<input>` correctly get a warning when switching from uncrontrolled to controlled, I\'m noticing `<textarea>` does not\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nHere\'s a codesandbox. Type in the input field, we see error (correct), change to textarea and start over, type in field and we don\'t see the error (incorrect I think) https://codesandbox.io/s/recursing-dawn-jls8i\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8\\r\\n","number":16342,"user":{"login":"bradwestfall"},"state":"open","created_at":"2019-08-09T19:15:55Z"},{"id":479119088,"title":"Mark spawned work for client-rendered suspense boundary","body":"Currently this is getting marked as Never which is the normal continuation for a dehydrated boundary, but if it is client-rendered it has a higher priority. That causes us to drop the interaction tracing for that render.\\r\\n\\r\\nThis colocates the marking where we actually set the expiration time.","number":16341,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-09T18:44:57Z"},{"id":479114055,"title":"Cleanup Babel PR (ReactFreshPlugin)","body":"This PR addresses the comments in #16297 \\r\\n\\r\\nIn particular, for `ReactFreshBabelPlugin`, @gaearon mentioned that we could modify the `ReactFreshBabelPlugin` to not throw an error if it is run in a test (if `expect` is a function it is most likely in a test environment) instead of setting a precedent for modifying the jest config.\\r\\n\\r\\n\\r\\n","number":16340,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-08-09T18:31:06Z"},{"id":479110423,"title":"Inconsistent whitespace behaviour between inline elements when using css animations","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n Here is the fiddle: https://jsfiddle.net/y3b52mcL/\\r\\nWhen there is only one word in the animated span, after it leaves the screen some whitespace is left. When there are two words - no whitespace is there.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nConsistent behaviour. As I understand, for React that would be second line in the fiddle (no whitespace).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest React. Tried in latest Firefox and Chrome, Win10. HAve no idea about previous versions.\\r\\n","number":16339,"user":{"login":"Faithfinder"},"state":"closed","created_at":"2019-08-09T18:20:58Z"},{"id":479108407,"title":"Release script supports publishing a subset of packages","body":"Sometimes it\'s useful to skip publishing one or more packages. In the past, we\'ve done this by temporarily editing the local `package.json` to mark it as a \\"private\\" package, but this is kind of janky. The release script should support this since it can add some additional automated checks to make sure we don\'t publish something invalid.\\r\\n\\r\\n## Release flow\\r\\n\\r\\n### Step 1: Prepare canary\\r\\nIn this case, we still prepare all of the packages. (This greatly simplifies the following script steps.) For the packages we plan to \\"skip\\" as part of publishing, we just confirm the already published version numbers.\\r\\n![step-1-updatedKapture 2019-08-09 at 11 13 26](https://user-images.githubusercontent.com/29597/62799872-bff6e400-ba96-11e9-929d-067754666999.gif)\\r\\n\\r\\n### Step 2: Publish filtered set of packages\\r\\nWhen it is time to publish, we can specify one or more packages as \\"skipped\\". The updated script will confirm that we really want to skip them, and ensure that doing so wouldn\'t leave us in an invalid state (depending on something that hasn\'t already been released).\\r\\n\\r\\n![step-2-updated-Kapture 2019-08-09 at 11 39 38](https://user-images.githubusercontent.com/29597/62801363-6d1f2b80-ba9a-11e9-96a4-cd891185d740.gif)\\r\\n\\r\\nNote that this is still an advanced technique and something that should be done carefully and with consideration.\\r\\n\\r\\n## Error handling\\r\\n\\r\\n### Guard against typos\\r\\n![invalid-package-Kapture 2019-08-09 at 9 21 03](https://user-images.githubusercontent.com/29597/62798504-3e518700-ba93-11e9-8415-ad31a86ac530.gif)\\r\\n\\r\\n### Guard against publishing a dependency on an unpublished version\\r\\n![invalid-skipped-version-Kapture 2019-08-09 at 9 22 35](https://user-images.githubusercontent.com/29597/62798505-3e518700-ba93-11e9-802c-3bf519d30057.gif)\\r\\n","number":16338,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-09T18:15:28Z"},{"id":479068056,"title":"componentWillMount deprectaion","body":"I have seen that componentWillMount  is going to be deprectaed with React 17. However my state management slution hardly relays on it because during this call component is not still visible but i have access to props already so i can bind to appropriate store. \\r\\nThere is not an option neither constructor neither componentDidMount because I have render errors already since dom tries to get values from store.\\r\\n\\r\\nAnd only reason explanation i see in every blogpost i see - people are not using it wrongly with async rendering by fetching remote data in it. I think this is developes problem that he does not understand how it works...\\r\\n\\r\\nAny suggestions how to solve this?\\r\\n","number":16337,"user":{"login":"vytautas-pranskunas-"},"state":"closed","created_at":"2019-08-09T16:23:36Z"},{"id":478994626,"title":"fix some missing assertions","body":"These were discovered by @SimenB in https://github.com/facebook/react/pull/16332. We weren\'t making actual assertions on some values. This PR makes the assertions, and fixes the tests.","number":16336,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-08-09T13:44:12Z"},{"id":478963496,"title":"react doesn\'t work on android kitkat 4.4.4 webview","body":"i made an application with react, it works fine in chrome but when i try to run it with a browser that has a kiosk option, i get \\"Uncaught ReferenceError: Map is not defined\\". \\r\\ni tried the solution provided in the documentation but still no success, so i made another application just for test and i got this error : \\"SyntaxError: Use of const in strict mode\\".\\r\\n\\r\\nfirst project created with \\"react\\": \\"^16.8.6\\",\\r\\nsecond project created with \\"react\\": \\"^16.9.0\\",\\r\\n\\r\\n device is Samsung Galaxy Tab E.\\r\\n\\r\\nbrowser is kiosk browser lockdown : \\r\\nhttps://play.google.com/store/apps/details?id=com.procoit.kioskbrowser&hl=en\\r\\n\\r\\n\\r\\n","number":16335,"user":{"login":"maaqoul"},"state":"closed","created_at":"2019-08-09T12:33:18Z"},{"id":478961852,"title":"[Flare] Rework the responder dispatching/batching mechanism","body":"We want to change the event system so it is possible to handle and manage ownership/propagation of event responders as we process the fiber tree. In order to do this, we need to change how the current event responder system works so that events that are queued to dispatch happen after the processing of each individual responder, rather than at the end.\\r\\n\\r\\nPreviously, we built up an array of all user events that needed to be dispatched, along with their priority and dispatched them all together. This made it impossible for user events to have effects that make it possible to control propagation and ownership though, as by this stage, we\'ve already processed the responders. To illustrate this:\\r\\n\\r\\n```\\r\\nResponder A\\r\\n  ->\\r\\n    Responder B\\r\\n      ->\\r\\n        Responder C\\r\\n```\\r\\n\\r\\n*Old Model:*\\r\\n\\r\\nIf a native event happens and Responder C gets activated, we then bubble to Responder B and then to Responder A. Along the way, each responder might `dispatchEvent`, so we\'d store the user events in an array. Once all Responders A, B, C have been handled we then flush all the events we\'ve collected.\\r\\n\\r\\n*New Model:*\\r\\n\\r\\nIf a native event happens and Responder C gets activated, we then bubble to Responder B and then to Responder A. Along the way, each responder might `dispatchEvent`, if so, we now dispatch the user events at that point, rather than having to queue them up to flush at the end. We are able to do this by wrapping the entire event process in `batchedEventUpdates` and having a dedicated event that sets a flag for when we\'re in the process of executing a user event. The priority logic from before remains unchanged because of these tweaks.\\r\\n\\r\\nI also removed the global ownership model, as this new mechanism allows for a much more refined approach that simply globally saying a responder is the only owner. It also conflicts with how this new mechanism works.","number":16334,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-09T12:29:10Z"},{"id":478961164,"title":"Create React App builds empty document (blank screen) with react-router and firebase","body":"I get a white screen on my deployed react webapp, it worked perfectly before. I tried everything I could find here but it didn t worked. \\r\\n\\r\\nBelow is the link to my website : https://numbr-d1a20.firebaseapp.com/\\r\\nAnd below the link to my git repo : github.com/rosanche/Numbr  I just took of the firebase.js file because I have my private config in it.\\r\\n\\r\\nI tried everything,\\r\\nChange the homepage, look for error in the console, clear my cache and a lot more...\\r\\n\\r\\nBelow is my package.json\\r\\n\\r\\n```\\r\\n{\\r\\n      \\"name\\": \\"numbr\\",\\r\\n      \\"version\\": \\"0.1.0\\",\\r\\n      \\"private\\": true,\\r\\n      \\"dependencies\\": {\\r\\n        \\"@material-ui/core\\": \\"^4.3.1\\",\\r\\n        \\"express\\": \\"^4.17.1\\",\\r\\n        \\"firebase\\": \\"^6.3.4\\",\\r\\n        \\"mysql\\": \\"^2.17.1\\",\\r\\n        \\"node-sass\\": \\"^4.12.0\\",\\r\\n        \\"nodemon\\": \\"^1.19.1\\",\\r\\n        \\"react\\": \\"^16.8.6\\",\\r\\n        \\"react-dom\\": \\"^16.8.6\\",\\r\\n        \\"react-native-indicators\\": \\"^0.13.0\\",\\r\\n        \\"react-router-dom\\": \\"^5.0.1\\",\\r\\n        \\"react-scripts\\": \\"3.0.1\\",\\r\\n        \\"recompose\\": \\"^0.30.0\\"\\r\\n      },\\r\\n      \\"scripts\\": {\\r\\n        \\"start\\": \\"react-scripts start\\",\\r\\n        \\"build\\": \\"react-scripts build\\",\\r\\n        \\"test\\": \\"react-scripts test\\",\\r\\n        \\"eject\\": \\"react-scripts eject\\"\\r\\n      },\\r\\n      \\"eslintConfig\\": {\\r\\n         \\"extends\\": \\"react-app\\"\\r\\n      },\\r\\n      \\"browserslist\\": {\\r\\n        \\"production\\": [\\r\\n          \\">0.2%\\",\\r\\n          \\"not dead\\",\\r\\n          \\"not op_mini all\\"\\r\\n        ],\\r\\n        \\"development\\": [\\r\\n          \\"last 1 chrome version\\",\\r\\n          \\"last 1 firefox version\\",\\r\\n          \\"last 1 safari version\\"\\r\\n        ]\\r\\n      }\\r\\n}\\r\\n\\r\\n```\\r\\nI expect to see my sign in page and not a blank screen.\\r\\n\\r\\nThanks in advance for your help!","number":16333,"user":{"login":"rosanche"},"state":"closed","created_at":"2019-08-09T12:27:30Z"},{"id":478928485,"title":"chore: add eslint-plugin-jest\'s valid-expect rule","body":"~There are some assertions here which just do `expect(thing)` without a matcher, meaning it\'s not actually asserting anything (it does not work like `assert`). I added `.toBe(true)` to them, and 2 of the tests are failing, meaning they are either wrong, or false negatives on master.~\\r\\n\\r\\nThe above is dated now that #16336 was merged, but it _did_ uncover them \ud83d\ude42 ","number":16332,"user":{"login":"SimenB"},"state":"closed","created_at":"2019-08-09T10:59:34Z"},{"id":478902643,"title":"use defaultProps when an attribute of an object is undefined?","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nMaybe a bug?\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nhttps://codesandbox.io/s/green-snow-79z65\\r\\n\\r\\nWhen you give `undefined` to a direct attribute, it will use the defaultProp.\\r\\n\\r\\nWhen you give `undefined` to an attribute of an object, it\'ll use this `undefined`\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'m not sure but I\'m waiting for using the defaultProp even for an attribute of an object?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact `16.9.0`","number":16331,"user":{"login":"kud"},"state":"closed","created_at":"2019-08-09T09:55:00Z"},{"id":478869640,"title":"Bug on style properties","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBUG \\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nSome style properties disappear, like background and zIndex\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n```\\r\\n<div style={{position: \'fixed\', top: 0, left: 0, bottom: 0, right: 0, background: \'#fff\', zIndex: 10}} />\\r\\n\\r\\noutput:\\r\\n<div style=\'position: fixed; top: 0px; left: 0px; bottom: 0px; rigth: 0px;\' />\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.9.0, Chrome. \\r\\nIt works fine on 16.8.6","number":16330,"user":{"login":"maxguzenski"},"state":"closed","created_at":"2019-08-09T08:41:13Z"},{"id":478812836,"title":"React tests failing ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBUG\\r\\n**What is the current behavior?**\\r\\nTEST FAILING IN DEVLOPMENT ENVIRONMENT\\r\\nyarn test Fails\\r\\nwhere\\r\\nyarn test-prod works\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nDubug stack trace\\r\\n\\r\\nyarn debug-test --watch CSSPropertyOperations\\r\\nyarn run v1.15.2\\r\\n$ cross-env NODE_ENV=development node --inspect-brk node_modules/.bin/jest --config ./scripts/jest/config.source.js --runInBand --watch CSSPropertyOperations\\r\\nDebugger listening on ws://127.0.0.1:9229/bd62a716-f841-4472-aa55-e0f9f7983fb6\\r\\nFor help, see: https://nodejs.org/en/docs/inspector\\r\\nDebugger attached.\\r\\nC:\\\\Users\\\\ashish.kamble\\\\GIT\\\\react\\\\mainReact\\\\react\\\\node_modules\\\\.bin\\\\jest:2\\r\\nbasedir=$(dirname \\"$(echo \\"$0\\" | sed -e \'s,\\\\\\\\,/,g\')\\")\\r\\n          ^^^^^^^\\r\\n\\r\\nSyntaxError: missing ) after argument list\\r\\n    at new Script (vm.js:80:7)\\r\\n    at createScript (vm.js:274:10)\\r\\n    at Object.runInThisContext (vm.js:326:10)\\r\\n    at Module._compile (internal/modules/cjs/loader.js:664:28)\\r\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)\\r\\n    at Module.load (internal/modules/cjs/loader.js:600:32)\\r\\n    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)\\r\\n    at Function.Module._load (internal/modules/cjs/loader.js:531:3)\\r\\n    at Function.Module.runMain (internal/modules/cjs/loader.js:754:12)\\r\\n    at startup (internal/bootstrap/node.js:283:19)\\r\\nWaiting for the debugger to disconnect...\\r\\n","number":16329,"user":{"login":"kambleaa007"},"state":"closed","created_at":"2019-08-09T06:06:30Z"},{"id":478765200,"title":"Upgrade ESLint so we can use JSX Fragment syntax","body":"Now that we\'re using Babel 7, this is the last blocker.\\r\\n","number":16328,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-09T02:26:00Z"},{"id":478757176,"title":"data-reactroot disappears using react-router-dom for SSR","body":"\\r\\nI\'m encountering a very strange behaviour which I was not expecting such bizarre issue when setting up a skeleton of react based SSR application. I\'m wondering why this **[\\"data-reactroot\\"]** attribute just automatically vanished once **react-router-dom** is applied on. Here is an example I made that has minimum impact of external libraries.\\r\\n\\r\\n**Do you want to request a feature or report a bug?**\\r\\nBub, probably.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI\'m sort of expecting attribute **[\\"data-reactroot\\"]** is appended automatically and consistently.\\r\\n\\r\\nHere is the codebase\\r\\nclient.js\\r\\n```\\r\\nimport React from \'react\'\\r\\nimport ReactDOM from \'react-dom\'\\r\\nimport App from \'./App.js\';\\r\\nimport Routes from \\"./Routes\\";\\r\\nimport { BrowserRouter as Router } from \\"react-router-dom\\"\\r\\n\\r\\nconst RouteCtx = (\\r\\n  <Router>\\r\\n      <Routes />\\r\\n  </Router>\\r\\n)\\r\\nReactDOM.hydrate(\\r\\n  RouteCtx,\\r\\ndocument.getElementById(\'root\'));\\r\\n\\r\\n```\\r\\nclient/Routes.js\\r\\n```\\r\\nimport React from \\"react\\";\\r\\nimport Home from \\"./components/Home\\";\\r\\nimport Title from \\"./components/Title\\";\\r\\nimport { BrowserRouter as Router, Route } from \\"react-router-dom\\";\\r\\n\\r\\n\\r\\nexport default () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <Route exact path=\\"/\\" component={Home} />\\r\\n    </div>\\r\\n  );\\r\\n\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nserver/route.js\\r\\n```\\r\\nimport React from \\"react\\";\\r\\nimport { StaticRouter } from \\"react-router-dom\\";\\r\\nimport Routes from \\"../client/Routes\\";\\r\\nimport { renderToString } from \\"react-dom/server\\";\\r\\nimport Home from \\"../client/components/Home\\"\\r\\n\\r\\nexport default (req) => {\\r\\n    const content = renderToString(\\r\\n      <StaticRouter location={req.path}>\\r\\n        <Routes />\\r\\n      </StaticRouter>\\r\\n    )\\r\\n\\r\\n    return `\\r\\n      <html>\\r\\n      <head></head>\\r\\n      <body>\\r\\n          <div id=\\"root\\">${content}</div>\\r\\n          <script src=\\"bundle.js\\"><\/script>\\r\\n      </body>\\r\\n      \\r\\n      </html>\\r\\n    `;\\r\\n}\\r\\n\\r\\n```\\r\\n_The final outcome on browser side for the generated DOM differentiated accordingly using different version of react:_\\r\\n\\r\\n**Current behaviour with react v16.8.x**\\r\\n```\\r\\n<html>\\r\\n  <head></head>\\r\\n      <body>\\r\\n          <div id=\\"root\\">\\r\\n            <div>\\r\\n              <div>\\r\\n                    <h1>Hello! This is shanghai Team</h1>\\r\\n             </div>\\r\\n            </div>\\r\\n           </div>\\r\\n       <script src=\\"bundle.js\\"><\/script>\\r\\n    </body>\\r\\n</html>\\r\\n```\\r\\n\\r\\n**Behaviour with react v16.0.0**\\r\\nWith the same code base, the generated DOM is:\\r\\n```\\r\\n<html>\\r\\n<head></head>\\r\\n <body>\\r\\n     <div id=\\"root\\">\\r\\n            <div data-reactroot=\\"\\">\\r\\n                <div>\\r\\n                    <h1>Hello! This is shanghai Team</h1>\\r\\n                </div>\\r\\n             </div>\\r\\n     </div>\\r\\n     <script src=\\"bundle.js\\"><\/script>\\r\\n  </body>\\r\\n</html>\\r\\n```\\r\\nWhich has the attribute **[\\"data-reactroot\\"]** clearly.\\r\\nNot sure if this is something should be expecting or should be something wrong.\\r\\n","number":16327,"user":{"login":"BingjieGao"},"state":"closed","created_at":"2019-08-09T01:45:47Z"},{"id":478720136,"title":"Add use-subscription to Rollup bundle config","body":"Adds the new `use-subscription` package to `yarn build` so the release script will be able to publish it.","number":16326,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-08-08T22:47:19Z"},{"id":478680992,"title":"[test-renderer] Cannot read property `current` of undefined","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n[![Edit pedantic-minsky-o5s5t](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/pedantic-minsky-o5s5t?fontsize=14&module=%2Fsrc%2Fhook.test.js&previewwindow=tests)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe test shall pass :)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n    \\"react\\": \\"16.8.6\\",\\r\\n    \\"react-test-renderer\\": \\"16.9.0-rc.0\\"\\r\\n\\r\\nSame behavior for react-test-renderer 16.9.0-alpha.0, but works with 16.8.6.","number":16323,"user":{"login":"FredyC"},"state":"closed","created_at":"2019-08-08T20:49:24Z"},{"id":478650443,"title":"[Flare] Remove contextmenu logic from Press","body":"Now we have a separate `ContextMenu` responder, this removes the existing logic from the `Press` responder.","number":16322,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-08T19:34:03Z"},{"id":478627513,"title":"use a different link in the UNSAFE_ component warnings","body":"When React detects a deprectated/unsafe lifecycle method, the warning points to a page with more details on the why/what of the warning. However, the actual link (https://fb.me/react-async-component-lifecycle-hooks) uses the phrase \\"lifecycle-hooks\\" which is confusing since it doesn\'t have anything to do with hooks. This PR changes the link to something less confusing - https://fb.me/react-unsafe-component-lifecycles.\\r\\n","number":16321,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-08-08T18:37:16Z"},{"id":478618341,"title":"[react-events] Refactor unit tests for Hover","body":"First pass at refactoring the tests and responders. This only touches `Hover`.\\r\\n\\r\\nDemo: https://codesandbox.io/s/refactor-hover-responder-f9k2q\\r\\n\\r\\n**Problem**\\r\\n\\r\\nThe existing responders listen to pointer events by default and add fallback events if PointerEvent is not supported. However, this complicates the responders and makes it easy to create a problematic unit test environment. jsdom doesn\'t support PointerEvent, which means that the responders end up listening to pointer events *and* fallback events in unit tests. This isn\'t a direct problem in production environments, because no browser will fire pointer events if they aren\'t supported. But in the unit test environment, we often dispatch event sequences taken from browsers that support pointer events. This means that what we\'re often testing is actually a (complex) scenario that cannot even occur in production: a responder that is listening to and receives both pointer events and fallback events. Not only does this risk making responders more complicated to implement but it could also hide bugs in implementations.\\r\\n\\r\\n**Response**\\r\\n\\r\\nImplement the responders so that they\'re only listening to *either* pointer events *or* fallback events, never both. This should make the default pointer events implementations significantly simpler and easier to test, as well as free to rely on the complete PointerEvents API. In the future it should also make DCE easier for target environments that are known to support PointerEvents, as we can use build tools with an equivalent of the runtime check. The fallback events (touch and mouse) need to coexist and be resilient to browser emulated events. Our unit tests should express a suite of high-level interactions that can be run in environments with and without PointerEvents support.","number":16320,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-08T18:15:39Z"},{"id":478567732,"title":"componentDidUpdate not triggered on changes to context","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nComponents using a context update their content upon changes to the context, but `render` and `componentDidUpdate` are not invoked even though the the components\' content changes.\\r\\n\\r\\n[Here\'s a JSFiddle example](https://jsfiddle.net/0ewuj8L4/). Note how the component does update (the display on screen changes), but the \\"render\\" messages are only logged once (to the console), while the \\"update\\" messages are never logged.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI guess I understand why this is happening - the components which use `Context.Consumer` don\'t really re-render or get updated when the context changes; only the `Context.Consumer` component does. It would still be appreciated to at least make `componentDidUpdate` get invoked somehow (automatically).\\r\\n\\r\\nRegardless, this behavior should certainly be documented as it is quite unclear, unintuitive and not so easy to detect.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest React I guess? I\'m running on Windows 10.0.17134.799 and Chrome 75.0.3770.142, but I believe it should replicate on other environments as well.\\r\\n","number":16319,"user":{"login":"eyalroth"},"state":"closed","created_at":"2019-08-08T16:16:26Z"},{"id":478556845,"title":"unexpected behavior with useState. when state is accessed from a callback function","body":"**Do you want to request a feature or report a bug?**\\r\\nPossible bug\\r\\n\\r\\n\\r\\n**What is the current behavior?**\\r\\nIm using a 3rd party jQuery plugin in combination with useState and useEffect hook to bind plugin events when component is mounted, this plugin calls a callback that update the component state, but callback is sort of closing on the initial state and with each call , values in state gets rest to their initial state\\r\\n\\r\\n**Minimal Code Sample**\\r\\n```javascript\\r\\nfunction Example(props) {\\r\\n    const start = moment();\\r\\n    const end = moment().add(7, \\"days\\");\\r\\n    const dateRangeRef = useRef(null);\\r\\n    // component state\\r\\n    const [state, setState] = useState({\\r\\n        start_date: null,\\r\\n        end_date: null,\\r\\n        other_var1: 0,\\r\\n        other_var2: 0\\r\\n    });\\r\\n    // date range picker handle\\r\\n    useEffect(() => {\\r\\n        // initiate daterange picker\\r\\n        const daterange = $(dateRangeRef.current).daterangepicker({\\r\\n            startDate: start,\\r\\n            endDate: end\\r\\n        });\\r\\n        \\r\\n        const callback = (ev, picker) => {\\r\\n            /* BUG */\\r\\n            // call to setState here will rest the other values in state to their initial state \\r\\n            setState({\\r\\n                ...state, // state here is referring to initial state\\r\\n                start_date: picker.startDate.format(\\"YYYY-MM-DD\\"),\\r\\n                end_date: picker.endDate.format(\\"YYYY-MM-DD\\")\\r\\n            });\\r\\n        };\\r\\n        daterange.on(\\"apply.daterangepicker\\", callback);\\r\\n    }, []);\\r\\n\\r\\n    return (\\r\\n        <div>\\r\\n            <input ref={dateRangeRef} type=\\"text\\" />\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\nexport default Example;\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nwhen callback is called start_date and end_date will be saved in state along other variables, but in this case other variables will be always reset I don\'t why such a behavior is happening\\r\\n\\r\\n*Which versions of React?**\\r\\n\\r\\n- **React Version** : 16.2.0 \\r\\n- **Browser** : Chrome \\r\\n- **Os** : Linux Ubuntu \\r\\n","number":16318,"user":{"login":"thesimpledesigners"},"state":"closed","created_at":"2019-08-08T15:55:33Z"},{"id":478550295,"title":"[Feature Request] Finish/normalize Portal API","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nfeature\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nPortals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can\u2019t be server-side rendered. And so on.\\r\\n\\r\\nThis is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:\\r\\n\\r\\n* Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`\\r\\n* Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)\\r\\n* Deprecate `ReactDOM.createPortal()`\\r\\n\\r\\nNow with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:\\r\\n\\r\\n```\\r\\nfunction App(props) {\\r\\n  const modal = useRef(null)\\r\\n  return (\\r\\n    <div>\\r\\n      <ModalContext.Provider value={modal}>\\r\\n        <div>{props.content}</div>\\r\\n      </ModalContext.Provider>\\r\\n      <div ref={modal} />\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nfunction Modal(props) {\\r\\n  const modal = useContext(ModalContext)\\r\\n  return React.createPortal(\\r\\n    props.children,\\r\\n    modal,\\r\\n  )\\r\\n}\\r\\n\\r\\n// Somewhere in {props.content} tree...\\r\\nreturn (\\r\\n  <>\\r\\n    {visible && (\\r\\n      <Modal>\\r\\n        Hello, World!\\r\\n      </Modal>\\r\\n    )}\\r\\n  </>\\r\\n)\\r\\n```\\r\\n\\r\\nAfter `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:\\r\\n\\r\\n```\\r\\nthis.el = React.createRef(document.createElement(\'div\'))\\r\\n```\\r\\n\\r\\nfor the same behavior.\\r\\n\\r\\nAs an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn\u2019t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.","number":16317,"user":{"login":"devknoll"},"state":"closed","created_at":"2019-08-08T15:43:18Z"},{"id":478531220,"title":"React\'s Lifecycle is Wrong","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nA bug. \\r\\n\\r\\n**What is the current behavior?**\\r\\n React currently computes instance lifecycle according to its reconciliation algorithm. If an instance experiences any divergence in ancestral element types, then React will unmount and remount an instance that never left. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle:\\r\\nhttps://codesandbox.io/embed/cranky-grothendieck-xtqnn\\r\\n\\r\\n**What is the expected behavior?**\\r\\nReact should use the **instance tree** as defined in this [document](https://github.com/gactjs/gact/blob/master/docs/view-tree-duality.md) to compute instance lifecycle. The computation of lifecycle can be complemented with a ```key``` based strategy in the rare cases when comparing instance trees would conflate two distinct instances. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nall versions, all platforms ","number":16316,"user":{"login":"contrarian"},"state":"closed","created_at":"2019-08-08T15:09:30Z"},{"id":478327886,"title":"fixing some Unperformant Stringify Warning","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n\\r\\nhttps://github.com/facebook/react/issues/12209 ","number":16315,"user":{"login":"kambleaa007"},"state":"closed","created_at":"2019-08-08T08:36:57Z"},{"id":478297781,"title":"yarn test failing","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\nfailing yarn tests\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nshould success\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n\\r\\nSummary of all failing tests\\r\\n FAIL  packages/react-dom/src/__tests__/CSSPropertyOperations-test.js\\r\\n  \u25cf CSSPropertyOperations \u203a should not add units to CSS custom properties\\r\\n\\r\\n    expect(received).toEqual(expected)\\r\\n\\r\\n    Expected value to equal:\\r\\n      \\"5\\"\\r\\n    Received:\\r\\n      undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      253 |     ReactDOM.render(<Comp />, root);\\r\\n      254 |\\r\\n    > 255 |     expect(root.children[0].style.Foo).toEqual(\'5\');\\r\\n          |                                        ^\\r\\n      256 |   });\\r\\n      257 | });\\r\\n      258 |\\r\\n\\r\\n      at Object.<anonymous> (packages/react-dom/src/__tests__/CSSPropertyOperations-test.js:255:40)\\r\\n\\r\\n FAIL  packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js (6.559s)\\r\\n  \u25cf react-hooks \u203a valid \u203a\\r\\n      // Valid because hooks can call hooks.\\r\\n      function useHook() { useState(); }\\r\\n      const whatever = function useHook() { useState(); };\\r\\n      const useHook1 = () => { useState(); };\\r\\n      let useHook2 = () => useState();\\r\\n      useHook2 = () => { useState(); };\\r\\n      ({useHook: () => { useState(); }});\\r\\n      ({useHook() { useState(); }});\\r\\n      const {useHook = () => { useState(); }} = {};\\r\\n      ({useHook = () => { useState(); }} = {});\\r\\n\\r\\n\\r\\n    assert.strictEqual(received, expected)\\r\\n\\r\\n    Expected value to strictly be equal to:\\r\\n      0\\r\\n    Received:\\r\\n      1\\r\\n\\r\\n    Message:\\r\\n      Should have no errors but had 1: [ { ruleId: null,\\r\\n        fatal: true,\\r\\n        severity: 2,\\r\\n        source: \'      const {useHook = () => { useState(); }} = {};\',\\r\\n        message:\\r\\n         \'Parsing error: Identifier \\\\\'useHook\\\\\' has already been declared\\\\n\\\\n\\\\u001b[0m \\\\u001b[90m  8 | \\\\u001b[39m      ({useHook\\\\u001b[33m:\\\\u001b[39m () \\\\u001b[33m=>\\\\u001b[39m { useState()\\\\u001b[33m;\\\\u001b[39m }})\\\\u001b[33m;\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m  9 | \\\\u001b[39m      ({useHook() { useState()\\\\u001b[33m;\\\\u001b[39m }})\\\\u001b[33m;\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m\\\\u001b[31m\\\\u001b[1m>\\\\u001b[22m\\\\u001b[39m\\\\u001b[90m 10 | \\\\u001b[39m      \\\\u001b[36mconst\\\\u001b[39m {useHook \\\\u001b[33m=\\\\u001b[39m () \\\\u001b[33m=>\\\\u001b[39m { useState()\\\\u001b[33m;\\\\u001b[39m }} \\\\u001b[33m=\\\\u001b[39m {}\\\\u001b[33m;\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m    | \\\\u001b[39m             \\\\u001b[31m\\\\u001b[1m^\\\\u001b[22m\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m 11 | \\\\u001b[39m      ({useHook \\\\u001b[33m=\\\\u001b[39m () \\\\u001b[33m=>\\\\u001b[39m { useState()\\\\u001b[33m;\\\\u001b[39m }} \\\\u001b[33m=\\\\u001b[39m {})\\\\u001b[33m;\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m 12 | \\\\u001b[39m    \\\\u001b[0m\',\\r\\n        line: 10,\\r\\n        column: 14 } ]\\r\\n\\r\\n      at testValidTemplate (node_modules/eslint/lib/testers/rule-tester.js:418:20)\\r\\n      at Object.RuleTester.it (node_modules/eslint/lib/testers/rule-tester.js:573:25)\\r\\n\\r\\n FAIL  packages/react/src/__tests__/createReactClassIntegration-test.js (6.668s)\\r\\n  \u25cf create-react-class-integration \u203a warns if getDerivedStateFromProps is not static\\r\\n\\r\\n    Error: Unexpected warning recorded: - Expected\\r\\n    + Received\\r\\n\\r\\n    - Component: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.\\r\\n    + Warning: Foo: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.\\r\\n\\r\\n      129 |         // We don\'t throw an Error here though,\\r\\n      130 |         // Because it might be suppressed by ReactFiberScheduler.\\r\\n    > 131 |         unexpectedWarnings.push(new Error(errorMessage));\\r\\n          |                                   ^\\r\\n      132 |       };\\r\\n      133 |\\r\\n      134 |       // TODO Decide whether we need to support nested toWarn* expectations.\\r\\n\\r\\n      at BufferedConsole.consoleSpy (scripts/jest/matchers/toWarnDev.js:131:35)\\r\\n      at warningWithoutStack (packages/shared/warningWithoutStack.js:40:32)\\r\\n      at checkClassInstance (packages/react-reconciler/src/ReactFiberClassComponent.js:500:76)\\r\\n      at mountClassInstance (packages/react-reconciler/src/ReactFiberClassComponent.js:798:5)\\r\\n      at updateClassComponent (packages/react-reconciler/src/ReactFiberBeginWork.js:2614:168)\\r\\n      at beginWork (packages/react-reconciler/src/ReactFiberBeginWork.js:2944:1125)\\r\\n      at beginWork (packages/react-reconciler/src/ReactFiberWorkLoop.js:3201:153)\\r\\n      at performUnitOfWork (packages/react-reconciler/src/ReactFiberWorkLoop.js:3016:501)\\r\\n      at workLoopSync (packages/react-reconciler/src/ReactFiberWorkLoop.js:3012:213)\\r\\n      at renderRoot (packages/react-reconciler/src/ReactFiberWorkLoop.js:2925:242)\\r\\n      at scheduleUpdateOnFiber (packages/react-reconciler/src/ReactFiberWorkLoop.js:2835:22)\\r\\n      at scheduleRootUpdate (packages/react-reconciler/src/ReactFiberReconciler.js:491:560)\\r\\n      at updateContainerAtExpirationTime (packages/react-reconciler/src/ReactFiberReconciler.js:492:564)\\r\\n      at updateContainer (packages/react-reconciler/src/ReactFiberReconciler.js:493:364)\\r\\n      at packages/react-dom/src/client/ReactDOM.js:570:35\\r\\n      at unbatchedUpdates (packages/react-reconciler/src/ReactFiberWorkLoop.js:2886:240)\\r\\n      at legacyRenderSubtreeIntoContainer (packages/react-dom/src/client/ReactDOM.js:569:34)\\r\\n      at Object.render (packages/react-dom/src/client/ReactDOM.js:677:12)\\r\\n      at packages/react/src/__tests__/createReactClassIntegration-test.js:454:18\\r\\n      at Object.matcher (scripts/jest/matchers/toWarnDev.js:143:11)\\r\\n      at Object.throwingMatcher [as toWarnDev] (node_modules/expect/build/index.js:320:33)\\r\\n      at Object.<anonymous> (packages/react/src/__tests__/createReactClassIntegration-test.js:455:5)\\r\\n      at Object.<anonymous> (packages/react/src/__tests__/createReactClassIntegration-test.js:455:5)\\r\\n\\r\\n  \u25cf create-react-class-integration \u203a warns if getDerivedStateFromError is not static\\r\\n\\r\\n    Error: Unexpected warning recorded: - Expected\\r\\n    + Received\\r\\n\\r\\n    - Component: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.\\r\\n    + Warning: Foo: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.\\r\\n\\r\\n      129 |         // We don\'t throw an Error here though,\\r\\n      130 |         // Because it might be suppressed by ReactFiberScheduler.\\r\\n    > 131 |         unexpectedWarnings.push(new Error(errorMessage));\\r\\n          |                                   ^\\r\\n      132 |       };\\r\\n      133 |\\r\\n      134 |       // TODO Decide whether we need to support nested toWarn* expectations.\\r\\n\\r\\n      at BufferedConsole.consoleSpy (scripts/jest/matchers/toWarnDev.js:131:35)\\r\\n      at warningWithoutStack (packages/shared/warningWithoutStack.js:40:32)\\r\\n      at checkClassInstance (packages/react-reconciler/src/ReactFiberClassComponent.js:508:76)\\r\\n      at mountClassInstance (packages/react-reconciler/src/ReactFiberClassComponent.js:798:5)\\r\\n      at updateClassComponent (packages/react-reconciler/src/ReactFiberBeginWork.js:2614:168)\\r\\n      at beginWork (packages/react-reconciler/src/ReactFiberBeginWork.js:2944:1125)\\r\\n      at beginWork (packages/react-reconciler/src/ReactFiberWorkLoop.js:3201:153)\\r\\n      at performUnitOfWork (packages/react-reconciler/src/ReactFiberWorkLoop.js:3016:501)\\r\\n      at workLoopSync (packages/react-reconciler/src/ReactFiberWorkLoop.js:3012:213)\\r\\n      at renderRoot (packages/react-reconciler/src/ReactFiberWorkLoop.js:2925:242)\\r\\n      at scheduleUpdateOnFiber (packages/react-reconciler/src/ReactFiberWorkLoop.js:2835:22)\\r\\n      at scheduleRootUpdate (packages/react-reconciler/src/ReactFiberReconciler.js:491:560)\\r\\n      at updateContainerAtExpirationTime (packages/react-reconciler/src/ReactFiberReconciler.js:492:564)\\r\\n      at updateContainer (packages/react-reconciler/src/ReactFiberReconciler.js:493:364)\\r\\n      at packages/react-dom/src/client/ReactDOM.js:570:35\\r\\n      at unbatchedUpdates (packages/react-reconciler/src/ReactFiberWorkLoop.js:2886:240)\\r\\n      at legacyRenderSubtreeIntoContainer (packages/react-dom/src/client/ReactDOM.js:569:34)\\r\\n      at Object.render (packages/react-dom/src/client/ReactDOM.js:677:12)\\r\\n      at packages/react/src/__tests__/createReactClassIntegration-test.js:472:18\\r\\n      at Object.matcher (scripts/jest/matchers/toWarnDev.js:143:11)\\r\\n      at Object.throwingMatcher [as toWarnDev] (node_modules/expect/build/index.js:320:33)\\r\\n      at Object.<anonymous> (packages/react/src/__tests__/createReactClassIntegration-test.js:473:5)\\r\\n      at Object.<anonymous> (packages/react/src/__tests__/createReactClassIntegration-test.js:473:5)\\r\\n\\r\\n  \u25cf create-react-class-integration \u203a warns if getSnapshotBeforeUpdate is static\\r\\n\\r\\n    Error: Unexpected warning recorded: - Expected\\r\\n    + Received\\r\\n\\r\\n    - Component: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.\\r\\n    + Warning: Foo: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.\\r\\n\\r\\n      129 |         // We don\'t throw an Error here though,\\r\\n      130 |         // Because it might be suppressed by ReactFiberScheduler.\\r\\n    > 131 |         unexpectedWarnings.push(new Error(errorMessage));\\r\\n          |                                   ^\\r\\n      132 |       };\\r\\n      133 |\\r\\n      134 |       // TODO Decide whether we need to support nested toWarn* expectations.\\r\\n\\r\\n      at BufferedConsole.consoleSpy (scripts/jest/matchers/toWarnDev.js:131:35)\\r\\n      at warningWithoutStack (packages/shared/warningWithoutStack.js:40:32)\\r\\n      at checkClassInstance (packages/react-reconciler/src/ReactFiberClassComponent.js:516:73)\\r\\n      at mountClassInstance (packages/react-reconciler/src/ReactFiberClassComponent.js:798:5)\\r\\n      at updateClassComponent (packages/react-reconciler/src/ReactFiberBeginWork.js:2614:168)\\r\\n      at beginWork (packages/react-reconciler/src/ReactFiberBeginWork.js:2944:1125)\\r\\n      at beginWork (packages/react-reconciler/src/ReactFiberWorkLoop.js:3201:153)\\r\\n      at performUnitOfWork (packages/react-reconciler/src/ReactFiberWorkLoop.js:3016:501)\\r\\n      at workLoopSync (packages/react-reconciler/src/ReactFiberWorkLoop.js:3012:213)\\r\\n      at renderRoot (packages/react-reconciler/src/ReactFiberWorkLoop.js:2925:242)\\r\\n      at scheduleUpdateOnFiber (packages/react-reconciler/src/ReactFiberWorkLoop.js:2835:22)\\r\\n      at scheduleRootUpdate (packages/react-reconciler/src/ReactFiberReconciler.js:491:560)\\r\\n      at updateContainerAtExpirationTime (packages/react-reconciler/src/ReactFiberReconciler.js:492:564)\\r\\n      at updateContainer (packages/react-reconciler/src/ReactFiberReconciler.js:493:364)\\r\\n      at packages/react-dom/src/client/ReactDOM.js:570:35\\r\\n      at unbatchedUpdates (packages/react-reconciler/src/ReactFiberWorkLoop.js:2886:240)\\r\\n      at legacyRenderSubtreeIntoContainer (packages/react-dom/src/client/ReactDOM.js:569:34)\\r\\n      at Object.render (packages/react-dom/src/client/ReactDOM.js:677:12)\\r\\n      at packages/react/src/__tests__/createReactClassIntegration-test.js:492:18\\r\\n      at Object.matcher (scripts/jest/matchers/toWarnDev.js:143:11)\\r\\n      at Object.throwingMatcher [as toWarnDev] (node_modules/expect/build/index.js:320:33)\\r\\n      at Object.<anonymous> (packages/react/src/__tests__/createReactClassIntegration-test.js:493:5)\\r\\n      at Object.<anonymous> (packages/react/src/__tests__/createReactClassIntegration-test.js:493:5)\\r\\n\\r\\n FAIL  packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js (7.708s)\\r\\n  \u25cf react-hooks \u203a valid \u203a\\r\\n        function useMyThing(myRef) {\\r\\n          const myRef = useRef();\\r\\n          useEffect(() => {\\r\\n            const handleMove = () => {};\\r\\n            const node = myRef.current;\\r\\n            node.addEventListener(\'mousemove\', handleMove);\\r\\n            return () => node.removeEventListener(\'mousemove\', handleMove);\\r\\n          }, [myRef]);\\r\\n          return <div ref={myRef} />;\\r\\n        }\\r\\n\\r\\n\\r\\n    assert.strictEqual(received, expected)\\r\\n\\r\\n    Expected value to strictly be equal to:\\r\\n      0\\r\\n    Received:\\r\\n      1\\r\\n\\r\\n    Message:\\r\\n      Should have no errors but had 1: [ { ruleId: null,\\r\\n        fatal: true,\\r\\n        severity: 2,\\r\\n        source: \'          const myRef = useRef();\',\\r\\n        message:\\r\\n         \'Parsing error: Identifier \\\\\'myRef\\\\\' has already been declared\\\\n\\\\n\\\\u001b[0m \\\\u001b[90m 1 | \\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m 2 | \\\\u001b[39m        \\\\u001b[36mfunction\\\\u001b[39m useMyThing(myRef) {\\\\u001b[0m\\\\n\\\\u001b[0m\\\\u001b[31m\\\\u001b[1m>\\\\u001b[22m\\\\u001b[39m\\\\u001b[90m 3 | \\\\u001b[39m          \\\\u001b[36mconst\\\\u001b[39m myRef \\\\u001b[33m=\\\\u001b[39m useRef()\\\\u001b[33m;\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m   | \\\\u001b[39m                \\\\u001b[31m\\\\u001b[1m^\\\\u001b[22m\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m 4 | \\\\u001b[39m          useEffect(() \\\\u001b[33m=>\\\\u001b[39m {\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m 5 | \\\\u001b[39m            \\\\u001b[36mconst\\\\u001b[39m handleMove \\\\u001b[33m=\\\\u001b[39m () \\\\u001b[33m=>\\\\u001b[39m {}\\\\u001b[33m;\\\\u001b[39m\\\\u001b[0m\\\\n\\\\u001b[0m \\\\u001b[90m 6 | \\\\u001b[39m            \\\\u001b[36mconst\\\\u001b[39m node \\\\u001b[33m=\\\\u001b[39m myRef\\\\u001b[33m.\\\\u001b[39mcurrent\\\\u001b[33m;\\\\u001b[39m\\\\u001b[0m\',\\r\\n        line: 3,\\r\\n        column: 17 } ]\\r\\n\\r\\n      at testValidTemplate (node_modules/eslint/lib/testers/rule-tester.js:418:20)\\r\\n      at Object.RuleTester.it (node_modules/eslint/lib/testers/rule-tester.js:573:25)\\r\\n\\r\\n FAIL  packages/react-dom/src/__tests__/ReactDOMComponent-test.js (15.691s)\\r\\n  \u25cf ReactDOMComponent \u203a Object stringification \u203a should pass objects as attributes if they define toString\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"hello\\"\\r\\n    Received: \\"http://localhost/hello\\"\\r\\n\\r\\n      2428 |\\r\\n      2429 |       ReactDOM.render(<img src={obj} />, container);\\r\\n    > 2430 |       expect(container.firstChild.src).toBe(\'hello\');\\r\\n           |                                        ^\\r\\n      2431 |\\r\\n      2432 |       ReactDOM.render(<svg arabicForm={obj} />, container);\\r\\n      2433 |       expect(container.firstChild.getAttribute(\'arabic-form\')).toBe(\'hello\');\\r\\n\\r\\n      at Object.<anonymous> (packages/react-dom/src/__tests__/ReactDOMComponent-test.js:2430:40)\\r\\n\\r\\n  \u25cf ReactDOMComponent \u203a Object stringification \u203a allows objects that inherit a custom toString method\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"hello.jpg\\"\\r\\n    Received: \\"http://localhost/hello.jpg\\"\\r\\n\\r\\n      2462 |       const el = ReactTestUtils.renderIntoDocument(<img src={child} />);\\r\\n      2463 |\\r\\n    > 2464 |       expect(el.src).toBe(\'hello.jpg\');\\r\\n           |                      ^\\r\\n      2465 |     });\\r\\n      2466 |\\r\\n      2467 |     it(\'assigns ajaxify (an important internal FB attribute)\', function() {\\r\\n\\r\\n      at Object.<anonymous> (packages/react-dom/src/__tests__/ReactDOMComponent-test.js:2464:22)\\r\\n\\r\\n FAIL  packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js (47.993s)\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders custom properties with server string render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"5\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      399 |         // This seems like an odd way computed properties are exposed in jsdom.\\r\\n      400 |         // In a real browser we\'d read it with e.style.getPropertyValue(\'--foo\')\\r\\n    > 401 |         expect(e.style.Foo).toBe(\'5\');\\r\\n          |                             ^\\r\\n      402 |       });\\r\\n      403 |\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:401:29\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders custom properties with server stream render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"5\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      399 |         // This seems like an odd way computed properties are exposed in jsdom.\\r\\n      400 |         // In a real browser we\'d read it with e.style.getPropertyValue(\'--foo\')\\r\\n    > 401 |         expect(e.style.Foo).toBe(\'5\');\\r\\n          |                             ^\\r\\n      402 |       });\\r\\n      403 |\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:401:29\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders custom properties with clean client render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"5\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      399 |         // This seems like an odd way computed properties are exposed in jsdom.\\r\\n      400 |         // In a real browser we\'d read it with e.style.getPropertyValue(\'--foo\')\\r\\n    > 401 |         expect(e.style.Foo).toBe(\'5\');\\r\\n          |                             ^\\r\\n      402 |       });\\r\\n      403 |\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:401:29\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders custom properties with client render on top of good server markup\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"5\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      399 |         // This seems like an odd way computed properties are exposed in jsdom.\\r\\n      400 |         // In a real browser we\'d read it with e.style.getPropertyValue(\'--foo\')\\r\\n    > 401 |         expect(e.style.Foo).toBe(\'5\');\\r\\n          |                             ^\\r\\n      402 |       });\\r\\n      403 |\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:401:29\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders camel cased custom properties with server string render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"#000000\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n      405 |         const e = await render(<div style={{\'--someColor\': \'#000000\'}} />);\\r\\n    > 406 |         expect(e.style.SomeColor).toBe(\'#000000\');\\r\\n          |                                   ^\\r\\n      407 |       });\\r\\n      408 |\\r\\n      409 |       itRenders(\'no undefined styles\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:406:35\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders camel cased custom properties with server stream render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"#000000\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n      405 |         const e = await render(<div style={{\'--someColor\': \'#000000\'}} />);\\r\\n    > 406 |         expect(e.style.SomeColor).toBe(\'#000000\');\\r\\n          |                                   ^\\r\\n      407 |       });\\r\\n      408 |\\r\\n      409 |       itRenders(\'no undefined styles\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:406:35\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders camel cased custom properties with clean client render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"#000000\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n      405 |         const e = await render(<div style={{\'--someColor\': \'#000000\'}} />);\\r\\n    > 406 |         expect(e.style.SomeColor).toBe(\'#000000\');\\r\\n          |                                   ^\\r\\n      407 |       });\\r\\n      408 |\\r\\n      409 |       itRenders(\'no undefined styles\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:406:35\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders camel cased custom properties with client render on top of good server markup\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"#000000\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      404 |       itRenders(\'camel cased custom properties\', async render => {\\r\\n      405 |         const e = await render(<div style={{\'--someColor\': \'#000000\'}} />);\\r\\n    > 406 |         expect(e.style.SomeColor).toBe(\'#000000\');\\r\\n          |                                   ^\\r\\n      407 |       });\\r\\n      408 |\\r\\n      409 |       itRenders(\'no undefined styles\', async render => {\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:406:35\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders unitless-number rules with prefixes with server string render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"10\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      449 |\\r\\n      450 |         expect(style.lineClamp).toBe(\'10\');\\r\\n    > 451 |         expect(style.WebkitLineClamp).toBe(\'10\');\\r\\n          |                                       ^\\r\\n      452 |         expect(style.MozFlexGrow).toBe(\'10\');\\r\\n      453 |         // jsdom is inconsistent in the style property name\\r\\n      454 |         // it uses on the client and when processing server markup.\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:451:39\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders unitless-number rules with prefixes with server stream render\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"10\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      449 |\\r\\n      450 |         expect(style.lineClamp).toBe(\'10\');\\r\\n    > 451 |         expect(style.WebkitLineClamp).toBe(\'10\');\\r\\n          |                                       ^\\r\\n      452 |         expect(style.MozFlexGrow).toBe(\'10\');\\r\\n      453 |         // jsdom is inconsistent in the style property name\\r\\n      454 |         // it uses on the client and when processing server markup.\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:451:39\\r\\n\\r\\n  \u25cf ReactDOMServerIntegration \u203a property to attribute mapping \u203a inline styles \u203a renders unitless-number rules with prefixes with client render on top of good server markup\\r\\n\\r\\n    expect(received).toBe(expected) // Object.is equality\\r\\n\\r\\n    Expected: \\"10\\"\\r\\n    Received: undefined\\r\\n\\r\\n    Difference:\\r\\n\\r\\n      Comparing two different types of values. Expected string but received undefined.\\r\\n\\r\\n      449 |\\r\\n      450 |         expect(style.lineClamp).toBe(\'10\');\\r\\n    > 451 |         expect(style.WebkitLineClamp).toBe(\'10\');\\r\\n          |                                       ^\\r\\n      452 |         expect(style.MozFlexGrow).toBe(\'10\');\\r\\n      453 |         // jsdom is inconsistent in the style property name\\r\\n      454 |         // it uses on the client and when processing server markup.\\r\\n\\r\\n      at packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js:451:39\\r\\n\\r\\n\\r\\nTest Suites: 6 failed, 223 passed, 229 total\\r\\nTests:       19 failed, 26 skipped, 5017 passed, 5062 total\\r\\nSnapshots:   85 passed, 85 total\\r\\nTime:        149.925s\\r\\nRan all test suites.\\r\\nerror Command failed with exit code 1.\\r\\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\\r\\n\\r\\n","number":16314,"user":{"login":"kambleaa007"},"state":"closed","created_at":"2019-08-08T07:25:59Z"},{"id":478055861,"title":"[ESLint]react-hooks/exhaustive-deps rule autofix modifies code function, violating eslint best practices","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nConsider:\\r\\n```jsx\\r\\nfunction Example({ fetchData, someArg }) {\\r\\n  let data = \'defaultValue\';\\r\\n  useEffect(() => {\\r\\n    data = fetchData(someArg);\\r\\n }, [someArg]);\\r\\n\\r\\n  return JSON.stringify(data);\\r\\n}\\r\\n```\\r\\nauto fix will automatically change this to:\\r\\n```jsx\\r\\nfunction Example({ fetchData, someArg }) {\\r\\n  let data = \'defaultValue\';\\r\\n  useEffect(() => {\\r\\n    data = fetchData(someArg);\\r\\n }, [someArg, fetchData]);\\r\\n\\r\\n  return JSON.stringify(data);\\r\\n}\\r\\n```\\r\\n\\r\\nHere we have a simple data fetch component that should refetch data when parameters change, but not when the fetch function changes.  Whether this is right or not, it is legitimate code, that the lint fix will cause serious problems in the code if it is used like this:\\r\\n```jsx\\r\\nfunction ExmapleUsage({ fetchData }) {\\r\\n  return <Example fetchData={( arg ) => fetchData(\'Hello World\', arg)} someArg=\\"Goodbye\\" /> \\r\\n}\\r\\n```\\r\\n**What is the expected behavior?**\\r\\n\\r\\n[Eslint best practices](https://eslint.org/docs/developer-guide/working-with-rules#applying-fixes) say that fix rules should not change functionality of code, so that you can safely run fix and expect no functional changes to be made.  This rule directly breaks that.  I as a repo maintainer see the auto fix as a greater risk than the problems the lint rule prevents.  If autofix was turned off, the rule would be entirely a positive.  \\r\\nUnfortunately, [ESLint also has rejected the idea of disabling autofix for certain rules](https://github.com/eslint/eslint/issues/7549).  So not following best practices is not ideal.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nNot a React Bug but a lint rule.\\r\\n","number":16313,"user":{"login":"Alphy11"},"state":"open","created_at":"2019-08-07T17:37:42Z"},{"id":477972193,"title":"[act] remove obsolete container and warning","body":"In a previous version of `act()`, we used a dummy dom element to flush effects. This doesn\'t need to exist anymore, and this PR removes it. The warning doesn\'t need to be there either (React will fire a wrong renderer act warning if needed). ","number":16312,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-08-07T14:42:13Z"},{"id":477933713,"title":"Ensure Fundamental flags are added to more locations","body":"This wraps the fundamental build flag around more call-sites that were missed from when the code was merged. I scanned through the UMD prod build and confirmed that no more locations existed too.","number":16311,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-07T13:36:17Z"},{"id":477926672,"title":"Nit: fix inconsistent spacing in a warning","body":"Just a nitpick. To be consistent with `// for react-dom` in the same message.","number":16310,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-07T13:23:35Z"},{"id":477903455,"title":"Detecting if `ref` can be passed","body":"How can one tell if the `component` being passed is `ref`-able?\\r\\nThere was a way to tell a function from a class:\\r\\nhttps://overreacted.io/how-does-react-tell-a-class-from-a-function/\\r\\n\\r\\n```js\\r\\n/**\\r\\n * Checks if the argument is a React.Component class.\\r\\n * https://overreacted.io/how-does-react-tell-a-class-from-a-function/\\r\\n * @param  {any}  Component\\r\\n * @return {boolean}\\r\\n */\\r\\nfunction isComponentClass(Component) {\\r\\n\\t// return Component.prototype instanceof React.Component\\r\\n\\treturn Component.prototype.isReactComponent\\r\\n}\\r\\n```\\r\\n\\r\\nBut now there\'re also `React.memo()` that has `.prototype === undefined` and `React.forwardRef()` that can be passed a `ref` but also has `.prototype === undefined`.\\r\\n\\r\\nWhat\'s the simplest way of telling if `ref` could be passed to a component without having React complaining about it?","number":16309,"user":{"login":"catamphetamine"},"state":"closed","created_at":"2019-08-07T12:38:40Z"},{"id":477789526,"title":"useEffect false positive requiring dependencies ","body":"https://codesandbox.io/s/lively-sea-2crwk\\r\\n\\r\\nmissing dependencies in useEffect throw false positive warning in some case. How can I remove the warning above? I can think of firing the callback on `setDropdown(, () => console.log(\'call api here\'))`\\r\\n\\r\\n```\\r\\nuseEffect(() => {\\r\\n    if (inputVal) {\\r\\n      callApi({ inputVal, dropdown });\\r\\n    }\\r\\n  }, [dropdown]);\\r\\n```","number":16308,"user":{"login":"thian4"},"state":"closed","created_at":"2019-08-07T08:44:33Z"},{"id":477755205,"title":"React useState hook updating value multiple times in sequence","body":"### Do you want to request a feature or report a bug?\\r\\n\\r\\nbug\\r\\n\\r\\n### What is the current behavior?\\r\\n\\r\\nWhen trying to update a useState hook value by calling updater function (setState in this example) more than once and in sequence in an event handler, the last one overrides previous updates.\\r\\n\\r\\nExample:\\r\\n```\\r\\nimport React, { useState } from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\nconst SomeComponent = () => {\\r\\n  const [state, setState] = useState({\\r\\n    value1: 0,\\r\\n    value2: 0,\\r\\n  });\\r\\n\\r\\n  function onClick(event){\\r\\n    setState({\\r\\n        ...state,\\r\\n        value1: 1,          \\r\\n    });\\r\\n    setState({\\r\\n        ...state,\\r\\n        value2: 2,         \\r\\n    });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>      \\r\\n      <button onClick={onClick}>Click Me</button>\\r\\n      <h2>value1: {state.value1}</h2>\\r\\n      <h2>value2: {state.value2}</h2>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(\\r\\n    <SomeComponent />, \\r\\ndocument.getElementById(\\"root\\"));\\r\\n\\r\\n```\\r\\n### [Code Sandbox](https://codesandbox.io/s/create-react-app-rx30c)\\r\\n\\r\\n### What is the expected behavior?\\r\\nUpdating both value1 and value2 in state\\r\\n\\r\\n### Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?\\r\\n(don\'t seem to be version or OS specific)\\r\\n**react:** 16.8.6\\r\\n**browser:** chrome 76.0.3809.87\\r\\n**OS:** Windows 10","number":16307,"user":{"login":"ErAz7"},"state":"closed","created_at":"2019-08-07T07:32:32Z"},{"id":477675152,"title":"Reset hydration state after reentering","body":"We might reenter a hydration state, when attempting to hydrate a boundary. We need to ensure that we reset it to not hydrating once we exit it. Otherwise the next sibling will still be in hydration mode.","number":16306,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-07T02:30:44Z"},{"id":477669061,"title":"Different Suspense Behavior in ReactDOM.render vs React.createRoot().render","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThrowing a resolved promise inside an app mounted with `React.unstable_createRoot().render()` triggers the suspense fallback render, defocusing inputs in the app.\\r\\n\\r\\nIn contrast, throwing an immediately resolved promise inside the same app rendered with  `ReactDOM.render()` does not trigger the suspense fallback render.\\r\\n\\r\\nHere\'s a small reproduction showing the different behaviors: \\r\\n```javascript\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\nlet cache = {};\\r\\n\\r\\nfunction MyApp() {\\r\\n  let [text, setText] = React.useState(\\"edit this\\");\\r\\n\\r\\n  if (!cache[text]) {\\r\\n    cache[text] = true;\\r\\n    throw Promise.resolve();\\r\\n  }\\r\\n\\r\\n  return <input value={text} onChange={e => setText(e.target.value)} />;\\r\\n}\\r\\n\\r\\nlet fallback = <div style={{ background: \\"red\\" }}>fallback</div>;\\r\\nlet dom = (\\r\\n  <React.Suspense fallback={fallback}>\\r\\n    <MyApp />\\r\\n  </React.Suspense>\\r\\n);\\r\\n\\r\\n// Switch out the following two lines and type in the input\\r\\n// to see the difference in behavior\\r\\n\\r\\nReactDOM.unstable_createRoot(document.getElementById(\\"root\\")).render(dom);\\r\\n// ReactDOM.render(dom, document.getElementById(\\"root\\"));\\r\\n\\r\\n```\\r\\n\\r\\nHere\'s a CodeSandbox with the code above: https://codesandbox.io/s/stupefied-cookies-qh8sy\\r\\n\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThrowing an immediately resolved promise inside an app mounted with `React.unstable_createRoot().render()` should not trigger the suspense fallback render. Instead, it should behave identically to the app mounted with `ReactDOM.render()`.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI\'m using Chrome 75.0.3770.142, macOS 10.14.3, and react 16.9.0-alpha-0\\r\\n\\r\\nN.B. This issue is pretty much the same as #15900, though that one seemed to have more moving parts. Please merge these if appropriate.","number":16305,"user":{"login":"bijection"},"state":"closed","created_at":"2019-08-07T02:02:12Z"},{"id":477608260,"title":"[Flare] Adds support for hydrating host components with listeners","body":"This adds support for hydrating event listeners and their respective responders.","number":16304,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-08-06T21:43:38Z"},{"id":477577647,"title":"Reflect that rules-of-hooks are now included in react-scripts","body":"The ReadMe says to `please wait for a corresponding release of react-scripts`, but there is no need to wait any longer!  Version 3.0.0 enforces Rules of Hooks.  https://github.com/facebook/create-react-app/releases/tag/v3.0.0","number":16303,"user":{"login":"j10sanders"},"state":"closed","created_at":"2019-08-06T20:25:38Z"},{"id":477511705,"title":"[Fresh] Support multiple renderers at the same time","body":"Fresh Runtime used to assume there\'s only one renderer injected at a time. That assumption is inaccurate. For example, on DOM+ART or Paper+Fabric surfaces it resulted in the \\"wrong\\" roots being passed to a renderer.\\r\\n\\r\\nThe fix is to store the renderer helpers per renderer ID, and associate mounted roots with them. Then we know which one to use.\\r\\n\\r\\nI verified this fixes an issue we found in the Fabric experiment.","number":16302,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-08-06T17:45:58Z"},{"id":477444196,"title":"[ReactUpdateQueue] Why don\'t we stop processing higher priority update when we skip a low priority update?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nA question.\\r\\n**What is the current behavior?**\\r\\nThe current behavior is described in [ReactUpdateQueue.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactUpdateQueue.js#L61)\\r\\n```\\r\\n// For example:\\r\\n//\\r\\n//   Given a base state of \'\', and the following queue of updates\\r\\n//\\r\\n//     A1 - B2 - C1 - D2\\r\\n//\\r\\n//   where the number indicates the priority, and the update is applied to the\\r\\n//   previous state by appending a letter, React will process these updates as\\r\\n//   two separate renders, one per distinct priority level:\\r\\n//\\r\\n//   First render, at priority 1:\\r\\n//     Base state: \'\'\\r\\n//     Updates: [A1, C1]\\r\\n//     Result state: \'AC\'\\r\\n//\\r\\n//   Second render, at priority 2:\\r\\n//     Base state: \'A\'            <-  The base state does not include C1,\\r\\n//                                    because B2 was skipped.\\r\\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\\r\\n//     Result state: \'ABCD\'\\r\\n//\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI think there is no need to process subsequent higher priority updates. It\'s a waste of cpu.","number":16301,"user":{"login":"ahungrynoob"},"state":"closed","created_at":"2019-08-06T15:19:35Z"},{"id":477350687,"title":"Suspense and Lazy increases bundle size","body":"Use of React, Suspense and Lazy is increasing bundle size.\\r\\n\\r\\nI created a bundle with use of Suspense lazy, its size was **127mb**.\\r\\nThen I removed the use of Suspense lazy, and did normal imports, in result, the build was **80mb** only.\\r\\n\\r\\nBuild size should not get affected.\\r\\n\\r\\nI am using React app created via create-react-app.\\r\\n","number":16300,"user":{"login":"dimblek7"},"state":"closed","created_at":"2019-08-06T12:27:10Z"},{"id":477153300,"title":"[Feature Request] Alternative to service-locator pattern in React","body":"_**I\'m sorry about the long post**_\\r\\n \\r\\n### The problem:\\r\\n \\r\\nAchieving dependency inversion and inversion of control within React is challenging because existing solutions rely on the service locator pattern to transport dependencies from their providers into their consumers.\\r\\n \\r\\nThis results in strong coupling of components to their surrounding implementations, decreasing testability, increasing boilerplate and discouraging developers from creating abstractions. \\r\\n \\r\\nA common pre-context solution to dependency injection is manually wrapping all used components with \u201cprovider\u201d functions. An example of this is using functions like `withTheme()` or `connect()`.\\r\\n \\r\\n```jsx\\r\\nimport { withItems } from \'../items\'\\r\\n \\r\\nexport const Hello ={ items = [] }) => {\\r\\n  return <div>\\r\\n    { items.map(item => <div>{item}</div>) }\\r\\n  </div>\\r\\n}\\r\\n \\r\\nexport const InjectedHello = withItems(Hello)\\r\\n```\\r\\n \\r\\nWrapping components like this creates silos of troublesome testability and due to it\u2019s unergonomic nature, discourages decoupling components from the surrounding application implementation. \\r\\n \\r\\nIn order to create decoupled component packages (say a UI library that lives in npm), the author must create components which receive all dependencies via props. In order to satisfy these dependencies, a consumer must import the library and re-wrap/re-export every component, injecting their dependencies from a service locator. \\r\\n \\r\\n```javascript\\r\\nimport { Button } from \'generic-ui\'\\r\\nimport { withTheme } from \'../somewhere\' // service locator\\r\\n \\r\\nexport const ThemedButton = withTheme(Button)\\r\\n```\\r\\n \\r\\nA consumer must also exclude the wrapped \u201caware\u201d components from unit tests as it\u2019s impractical to test them in a sensible way.\\r\\n \\r\\nhttps://en.wikipedia.org/wiki/Service_locator_pattern\\r\\n \\r\\nAn example of a basic service locator in JS is here\\r\\nhttps://stackblitz.com/edit/js-6qzkak\\r\\n \\r\\nAn example of a service locator with React is here\\r\\nhttps://stackblitz.com/edit/react-tdt624\\r\\n \\r\\n \\r\\n### What about context?\\r\\n \\r\\nContext provides a much more ergonomic solution. It still relies on the same service-locator pattern, but it\u2019s ease of use makes it more approachable.\\r\\n \\r\\nBoiled down, what context simply provides is a vehicle for dependencies to tunnel from their creator to their consumer under the floorboards of the library. It\u2019s essentially an alternative to drilling props from the top level to the embedded components.\\r\\n \\r\\nReceiving the theme from a context `const theme = useContext(ThemeContext)` also relies on the context being supplied by a concrete location.\\r\\n \\r\\nIf you imagine a simple, generic concept like a store using the Flux architecture; utilities like Redux, MobX. These third party libraries *must* have \u201cReact\u201d as a peerDependency. The only alternative is supplying a \\"react-connected\\" variant of their library.\\r\\n \\r\\nFor this reason we have the two packages, \u2018redux\u2019 and \u2018react-redux\u2019. While the latter does provide some convenience utilities, it\'s use is not optional. It _*must*_ exist along-side the original implementation.\\r\\n \\r\\nSo here is a demonstration of how React enforces coupling by not providing an effective means to handle inversion of control. Below I have a factory function which creates a flux store:\\r\\n \\r\\n```javascript\\r\\nexport const createPostStore = () => {\\r\\n  const posts = createStateEmitter([])\\r\\n \\r\\n  const getValue = () => posts.getValue()\\r\\n \\r\\n  const add = (post) => {\\r\\n    posts.setState([\\r\\n      { title: post, id: randomString() },\\r\\n      ...getValue()\\r\\n    ])\\r\\n  }\\r\\n \\r\\n  return {\\r\\n    posts,\\r\\n    getValue,\\r\\n    add\\r\\n  }\\r\\n}\\r\\n```\\r\\nIt is consumed like you would consume Redux\\r\\n \\r\\n```javascript\\r\\nconst store = createPostStore()\\r\\nstore.subscribe(posts => console.log(posts))\\r\\nstore.add(\'New Post!\')\\r\\n```\\r\\nThis unit has no external dependencies and can be consumed within React to hold state and trigger re-renders. It is easily tested and can be put in npm without a hard dependency on React.\\r\\n \\r\\nexample:\\r\\nhttps://stackblitz.com/edit/react-gnj8ba\\r\\n \\r\\nThis example shows \\"prop drilling\\" to get the store into the component. This is ideal from an IoC standpoint, but impractical as with many layers of embedded components, you\'ll pass dependencies down a long tree and it\'s difficult to maintain.\\r\\n \\r\\nOf course, I can simply export a context from my package, but I want to avoid a hard dependency on React as it\'s not really a concern of the library.\\r\\n \\r\\nAnother solution to this problem is to have a shared, global context, where there is a contract that components will consume it and extract their required dependencies from there.\\r\\n \\r\\nhttps://stackblitz.com/edit/react-fz6ue8\\r\\n \\r\\nThe challenge here is that I can\'t expect Bootstrap, Material, or anyone on the internet to `npm install global-context` and have it be the de facto \\"shared context\\" which allows for IoC/agnosticism in component implementations.\\r\\n \\r\\nThe last solution is to make two packages, the package itself and a second package that has a hard dependency on React and exposes a context (Just like Redux and React Redux).\\r\\n \\r\\n### Ok, so what\'s the solution?\\r\\n \\r\\nHard to say. React applications often have many layers of components so any solution must involve supplying embedded components their dependencies in a way that scopes their \\"providing\\" to the current instance of React.\\r\\n \\r\\nSomething like a PropProvider, which supplies props to all embedded components might be a solution. It\'s opt-in making it minimally invasive. It changes nothing for the existing public React API and simply adds another, more flexible, option to a problem you\'d normally `useTheme()` to solve.\\r\\n \\r\\n```jsx\\r\\n<PropProvider values={{ everyone: \'gets this\' }}>\\r\\n    <MyComponent />\\r\\n</PropProvider>\\r\\n```\\r\\n \\r\\nThe problem with this is naming clashes. If you\'re a library vendor, you\'ll need to be creative to avoid clashes. The custom element specification stipulates that you must hyphenate your element names to avoid, or reduce the instances of clashes. Maybe that\'s a solution?\\r\\n \\r\\nAnother option is using getter functions, where key names are nearly impossible to clash and a function knows where to look.\\r\\n \\r\\n```javascript\\r\\nconst MyComponent = (props) => {\\r\\n    const theme = getTheme(props)\\r\\n}\\r\\n```\\r\\n \\r\\nMaybe an official static context for the react instance?\\r\\n \\r\\n```jsx\\r\\nReactDOM.render(\\r\\n    <App/>,\\r\\n    element,\\r\\n    { everyone: \'gets this\' }\\r\\n)\\r\\n```\\r\\n","number":16299,"user":{"login":"alshdavid"},"state":"closed","created_at":"2019-08-06T03:41:45Z"},{"id":477103923,"title":"Babel 7","body":"For #12548 \\r\\n\\r\\nUpgraded from Babel 6 to Babel 7.\\r\\n\\r\\nThe only significant change seems to be the way `@babel/plugin-transform-classes` handles classes differently from `babel-plugin-transform-es2015-classes`. In regular mode, the former injects a `_createClass` function that increases the bundle size, and in the latter it removes the safeguard checks. However, this is okay because we don\'t all classes in new features, and we want to deprecate class usage in the future in the react repo.\\r\\n\\r\\nDifferences between classes in Babel 6 (left) and Babel 7 (right)\\r\\n![image](https://user-images.githubusercontent.com/2735514/62641015-9fdcee80-b8f7-11e9-951e-779e9c869d3c.png)\\r\\n![image](https://user-images.githubusercontent.com/2735514/62641068-bc792680-b8f7-11e9-9388-3f8a2608b430.png)\\r\\n\\r\\nExample diffs (6 on the left and 7 on the right):\\r\\n[ReactDOM-prod.js (facebook-www)](https://www.diffchecker.com/l6yOxMlv)\\r\\n[ReactDOM-dev.js (facebook-www)](https://www.diffchecker.com/qX91sRbT)\\r\\n[react-dom.development.js (UMD)](https://www.diffchecker.com/nNATN138)\\r\\n[react-dom.production.js (UMD)](https://www.diffchecker.com/qenU4uy8)\\r\\n[react-dom.development.js (CommonJS)](https://www.diffchecker.com/KyACMHRa)\\r\\n[react-dom.production.js (CommonJS)](https://www.diffchecker.com/7PjUMRjo)\\r\\n[react-dom-server.node.production.min.js (CommonJS)](https://www.diffchecker.com/YYEcoNzs)\\r\\n[react-dom-server.browser.production.min.js (UMD)](https://www.diffchecker.com/hkhunOI0)\\r\\n\\r\\n","number":16297,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-08-05T23:46:56Z"},{"id":477067554,"title":"[react-events] Add ContextMenu responder","body":"A module for responding to contextmenu events. This functionality will be\\r\\nremoved from the Press responder in the future.","number":16296,"user":{"login":"necolas"},"state":"closed","created_at":"2019-08-05T21:31:38Z"},{"id":476935801,"title":"useReducer dispatch calls reduce twice ","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nreport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nwhen a `dispatch()` of OOTB `useReducer` is called, some instances calls the `reduce()` twice.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nAs the behavior is intermittent, I shall try to figure out a way to write a reproducer. But, based on call stacks here is what what I can narrow it down. \\r\\nAssume,\\r\\n\\r\\n```\\r\\nconst [state, dispatch] = useReducer(reduce, {})\\r\\n...\\r\\ndispatch({something_useful...}) //this call happens twice in the execution stack.\\r\\n```\\r\\n\\r\\nSeldom calls to `dispatch()` executes the `reduce()` twice and both the times (it does preserve the previous state. Meaning, it merely calls \\r\\nT1: (s\', a\') => s\'\'\\r\\nT2: (s\', a\') => s\'\'\\r\\nNotice, the state starts with s\' only and NOT s\'\'. Hence, the resultant state s\'\' is still safe.\\r\\n\\r\\nI do have some call stack that shows the difference from `react-dom`.\\r\\n\\r\\nFirst stack-trace when `dispatch()` is called.\\r\\n```\\r\\nhttps://github.com/facebook/react/blob/42794557ca44a8c05c71aab698d44d1294236538/packages/react-dom/src/server/ReactPartialRendererHooks.js#L404 -- dispatchAction\\r\\nwsReducer\\t@\\tuseWSConnector.js:11 <-- my reduce()\\r\\ndispatchAction\\t@\\treact-dom.development.js:14088\\r\\n(anonymous)\\t@\\tuseWSConnector.js:73 <-- my custom hook (the exact line to dispatch())\\r\\n```\\r\\n\\r\\nSecond stack-trace that is called implicitly.\\r\\n```\\r\\nhttps://github.com/facebook/react/blob/42794557ca44a8c05c71aab698d44d1294236538/packages/react-reconciler/src/ReactFiberHooks.js#L658 -- updateReducer\\r\\nwsReducer\\t@\\tuseWSConnector.js:11 <-- my reduce()\\r\\nupdateReducer\\t@\\treact-dom.development.js:13741\\r\\nuseReducer\\t@\\treact-dom.development.js:14349\\r\\nuseReducer\\t@\\treact.development.js:1500\\r\\nuseWS\\t@\\tuseWSConnector.js:41  <-- my custom hook (the stack to the start of my custom hook)\\r\\n```\\r\\n\\r\\nAs, I am not familiar with `react-dom` source code, some hints around what may be happening in both the call-stacks may help.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nwhen a `dispatch()` of OOTB `useReducer` is called, all instances should call the `reduce()` only once.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.6, Chrome 75.0.3770.142 (Official Build) (64-bit)","number":16295,"user":{"login":"babloo80"},"state":"closed","created_at":"2019-08-05T15:52:33Z"},{"id":476894389,"title":"[Feature Request] useDispatcher hook","body":"*useReducer* can be used for local state management. And *dispatch* produced by *useReducer* can be used locally or inside underlying components.\\r\\n\\r\\nBut sometimes it would be nice to \\"connect\\" arbitrary components in tree.\\r\\nSome kind of global event/action bus but without global state.\\r\\n\\r\\nAs a result, I propose the *useDispatcher* hook in addition to *useReducer*:\\r\\nhttps://codesandbox.io/embed/react-hooks-usedispatcher-gw6u9\\r\\n\\r\\nIt something like pattern-based discovery in microservices. Upsream and downstream remain loosely coupled.\\r\\n","number":16294,"user":{"login":"redneckz"},"state":"closed","created_at":"2019-08-05T14:34:01Z"},{"id":476782789,"title":"Hide env variable in production build","body":"Hey, I am a bit of confused about env variables in the production build. Simply i have a .env file which contains some variables like \\r\\n\\r\\n```\\r\\nREACT_APP_ALG=A128CBC-HS256\\r\\nREACT_APP_K=RvIm6UTHG0wqXWLvkSmRqQhS97NvW_IwYw0CKYhEF_0\\r\\n```\\r\\n\\r\\nand accessing then in code like \\r\\n\\r\\n```\\r\\n            \\"alg\\": process.env.REACT_APP_ALG,\\r\\n            \\"k\\": process.env.REACT_APP_K\\r\\n```\\r\\n\\r\\nBut when I build my project then in bundle files i found some like \\r\\n\\r\\n```\\r\\n                        alg: \\"A128CBC-HS256\\",\\r\\n                        k: \\"RvIm6UTHG0wqXWLvkSmRqQhS97NvW_IwYw0CKYhEF_0\\"\\r\\n```\\r\\n\\r\\nwhich is a security issue for me. Is there any way to hide them I\'m well aware about that it\'s not a bug it\'s just I could not find any suitable solutions","number":16293,"user":{"login":"anik587"},"state":"closed","created_at":"2019-08-05T10:29:00Z"},{"id":476725741,"title":"Add deps/selector/keys argument to useContext","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nuseContext triggers update if the whole passed store changed\\r\\n\\r\\n**What is the expected behavior?**\\r\\nadd keys argument to trigger update only if specified keys in passed store changed\\r\\n\\r\\nIt would be useful to improve application speed.\\r\\n\\r\\nF.e.\\r\\n\\r\\n```javascript\\r\\nfunction MyComponent() {\\r\\n  // example context value\\r\\n  // I want to ignore age changes (who does\'t hehe)\\r\\n  // {\\r\\n  //   name: \'Max\',\\r\\n  //   age: 35\\r\\n  // }\\r\\n  // dep\'s-like style\\r\\n  const {name} = useContext(MyContext, \'name\')\\r\\n  // or\\r\\n  // comparator style \\r\\n  const {name} = useContext(MyContext, (current, old) => current.name !== old.name)\\r\\n}\\r\\n```","number":16292,"user":{"login":"syabro"},"state":"closed","created_at":"2019-08-05T08:32:02Z"},{"id":476590770,"title":"react-hooks/exhaustive-deps, React.useCallback has an unnecessary dependency. Keying off of related values","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug? -ish\\r\\n**What is the current behavior?**\\r\\nIf you add a deps list state variable but don\'t use it directly, you get a warning.\\r\\n\\r\\n**What is the expected behavior?**\\r\\ndeps list allows you to provide sensitivity to a change, it should not be required to use the value that changed.\\r\\nPossibly this warning should have the message changed to a \\"if you know what you\'re doing\\" type message, such as \\"you may have left this in by mistake\\"\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n^16.8.6\\r\\n\\r\\n**example scenario, **\\r\\nmeasuring the overflow of an element on window resize, `useCallback` used to get the reference to the element to get it\'s `overflow/inner/scroll` sizes, but this should only be done when the window resize event happens. This can be done using a `customHook` that calls `setWindowSize` when the window is resized, our original `useCallback` can be sensitive to this `windowSize` even though it doesn\'t need the value directly, it needs to know when that value changed.\\r\\n\\r\\nI can add some arbitrary use of that dep to get the warning to go away, but that feels wrong. \\r\\n\\r\\nI realize in this example, the `useWindowSize` hook could live inside the `useCallback` hook but that would mean it\'s value couldn\'t be used by other hooks/components.\\r\\n\\r\\nIt works fine if the warning is ignored, But I have people on my team that see warnings as rules and since react hooks are new, it\'s hard to argue that it\'s okay in this case.\\r\\nmaybe this whole issue is due to some underlying misunderstanding on my part, but think I\'m using them correctly.","number":16291,"user":{"login":"RickeyWard"},"state":"closed","created_at":"2019-08-04T20:27:55Z"},{"id":476590616,"title":"Weird useState/useReducers behavior in seemingly synchronous code","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn console:\\r\\n```\\r\\ncanceled1 false\\r\\ncanceled2 true\\r\\ncanceled3 true\\r\\n```\\r\\n\\r\\nhttps://codesandbox.io/s/youthful-hoover-xixne\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIn console\\r\\n```\\r\\ncanceled1 false\\r\\ncanceled2 false\\r\\ncanceled3 false\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact 16.8.6 and `0.0.0-db3ae32b8`\\r\\nChrome 76.0.3809.87\\r\\nmacOS 10.14.6","number":16290,"user":{"login":"Igor10k"},"state":"closed","created_at":"2019-08-04T20:25:59Z"},{"id":476582021,"title":"What\u2019s the best way to handle scroll with effects hooks?","body":"Hi, this is not issue per se, more a question on what\u2019s the best recommended way of handling scroll with hooks.\\r\\n\\r\\nI want to freeze and unfreeze a div on demand (freezing hides the div overflow and scrolls it to the current body scroll, unfreezing scrolls the body back to its previous position and frees the overflow of the div). I believe this can be handy when dealing with transitions.\\r\\n\\r\\nEssentially to freeze the div you would need to read the current `window.scrollY`, add the `frozen` class (which sets `position: fixed` and `overflow: hidden`) to the div and immediately scroll it to the scroll position you\u2019ve just read. \\r\\n\\r\\nI tried several implementations, using `useEffect`, `useLayoutEffect`, a mix of both or directly manipulating the DOM (ie adding the class manually declaratively).\\r\\n\\r\\nhttps://codesandbox.io/s/freezing-dom-6k7lb\\r\\n\\r\\n\\r\\nThe first three implementations sometimes show a flash on Safari, only the last one is flash-free on both Safari desktop and mobile.\\r\\n\\r\\nI\u2019d be happy to get some thoughts on what\u2019s the best strategy t prevent any flashes, ie adding the `frozen` class and scrolling the div in the same render cycle. \\r\\n\\r\\n","number":16289,"user":{"login":"dbismut"},"state":"closed","created_at":"2019-08-04T18:45:43Z"},{"id":476581977,"title":"Fix hydration bug with nested suspense boundaries","body":"This happens in this case: `\x3c!--$!--\x3e\x3c!--$!--\x3e...\x3c!--/$--\x3e\x3c!--/$--\x3e...`\\r\\n\\r\\ngetNextHydratableInstanceAfterSuspenseInstance didn\'t take\\r\\nSUSPENSE_FALLBACK_START_DATA or SUSPENSE_PENDING_START_DATA into account\\r\\nso if a boundary was in one of those states, it wouldn\'t be considered to\\r\\npush the stack of boundaries. As a result the first end comment was\\r\\nconsidered the end but it really should\'ve been the second end comment.\\r\\n\\r\\nThe next comment then would\'ve been considered something that can be\\r\\nskipped. However, since the logic in there considered all comments as\\r\\n\\"hydratable\\", it was considered a hydratable node. Since it was considered\\r\\na node that didn\'t actually correspond to anything in the React tree it got\\r\\ndeleted (instead of left alone).\\r\\n\\r\\nThe HTML is now `\x3c!--$!--\x3e\x3c!--$!--\x3e...\x3c!--/$--\x3e...` and the trailing\\r\\ncontent is now hydrated since it did match something.\\r\\n\\r\\nNext, since this was client rendered, we\'re going to delete the suspended\\r\\nboundary by calling clearSuspenseBoundary and then inserting new content.\\r\\nHowever, clearSuspenseBoundary *is* aware of SUSPENSE_FALLBACK_START_DATA\\r\\nand assumes that there must be another `\x3c!--/$--\x3e` after the first one.\\r\\nAs a result it deleted the trailing content from the DOM since it should\\r\\nbe part of the boundary. However, those DOM nodes were already hydrated in\\r\\nthe React tree. So we end up in an inconsistent state.\\r\\n\\r\\nWhen we then try to insert the new content we throw as a result.\\r\\n\\r\\nI think we would have recovered correctly if clearSuspenseBoundary and\\r\\ngetNextHydratableInstanceAfterSuspenseInstance had the *same* bug but\\r\\nbecause they were inconsistent we ended up in a bad place.\\r\\n\\r\\nLikewise, if the getNextHydratable would\'ve skipped over the comment instead of deleted it, it also would\'ve recovered correctly. So it\'s a combination of both bugs that cause this.\\r\\n\\r\\nTODO: Test.","number":16288,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-04T18:45:14Z"},{"id":476499773,"title":"Trying out ","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16287,"user":{"login":"jayd89550"},"state":"closed","created_at":"2019-08-03T23:53:56Z"},{"id":476433998,"title":"Problem with useContext hook","body":"useContext hook have a problem. If you for example create a context like this:\\r\\n\\r\\n```javascript\\r\\nimport React, { createContext, useState } from \'react\';\\r\\n\\r\\nexport const DummyContext = createContext();\\r\\n\\r\\nexport const DummyProvider = (props) => {\\r\\n    const [state1, setState1] = useState(\'\');\\r\\n    const [state2, setState2] = useState(\'\');\\r\\n    const [state3, setState3] = useState(\'\');\\r\\n\\r\\n    return (\\r\\n        <DummyContext.Provider\\r\\n            value={[\\r\\n                [state1, setState1],\\r\\n                [state2, setState2],\\r\\n                [state3, setState3]\\r\\n            ]}\\r\\n        >\\r\\n            {props.children}\\r\\n        </DummyContext.Provider\\r\\n    )\\r\\n}\\r\\n```\\r\\n\\r\\nLet\'s say I have also wrote something like this:\\r\\n\\r\\n```javascript\\r\\nfunction App() {\\r\\n  return (\\r\\n    <DummyProvider>\\r\\n      <SomeComponent/>\\r\\n    </DummyProvider>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nIf I want to use that context inside SomeComponent, I will have to call those states and handlers in the exact order I have wrote inside DummyContext, because it seems React is looking for states and handlers by their index, instead of the name. If I don\'t use those states and handlers in the exact order, values will get mixed.\\r\\n\\r\\nOther issue with that is that I can\'t call only handler for that state, but I also have to include that state even tho I might not use that state inside that component, but only that state handler. If I only include handler, it will give me error like \'handler is not a function\', if we say that handler is the name of the actual handler.\\r\\n\\r\\nWouldn\'t it be better if it looks for those states by their name (since there can\'t be duplicate states in the context), so I would be able to include only those states I want from the context? Less code and it would be easier to maintain that code.","number":16286,"user":{"login":"Ryukote"},"state":"closed","created_at":"2019-08-03T09:29:29Z"},{"id":476423042,"title":"correct ReactContext.js if block writting at line21","body":"correct ReactContext.js if block writting at line21\\r\\n","number":16285,"user":{"login":"fantasticsoul"},"state":"closed","created_at":"2019-08-03T06:52:22Z"},{"id":476396684,"title":"Rendering tasks should not jump the queue","body":"When React schedules a rendering task, it passes a `timeout` option based on its expiration time. This is intended to avoid starvation by other React updates. However, it also affects the relative priority of React tasks and other Scheduler tasks at the same level, like data processing.\\r\\n\\r\\nThis adds a feature flag to disable passing a `timeout` option to Scheduler. React tasks will always append themselves to the end of the queue, without jumping ahead of already scheduled tasks.\\r\\n\\r\\nThis does not affect the order in which React updates within a single root are processed, but it could affect updates across multiple roots.\\r\\n\\r\\nThis also doesn\'t remove the expiration from Scheduler. It only means that React tasks are not given special treatment.","number":16284,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-03T00:27:28Z"},{"id":476316921,"title":"Automatic injection dependency list","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n**What is the current behavior?**\\r\\nhandwrite dependency list\\r\\n\\r\\n```jsx\\r\\nreturn useMemo(() => {\\r\\n    const hostNodeClassNames = classNames({\\r\\n        [styles.hostNode]: true,\\r\\n        [styles.hostNodeSelected]: isSelected || isActive,\\r\\n    });\\r\\n\\r\\n    return (\\r\\n        <g className={hostNodeClassNames}\\r\\n            onClick={handleClick}\\r\\n            onMouseDown={handleMouseDown}\\r\\n            onMouseUp={handleMouseUp}\\r\\n            onMouseEnter={handleMouseEnter}\\r\\n            onMouseLeave={handleMouseLeave}\\r\\n        >\\r\\n            <circle className={styles.displayNode} cx={x} cy={y} r={radius}/>\\r\\n            <circle className={styles.boundsNode} cx={x} cy={y} r={radius * 3}/>\\r\\n        </g>\\r\\n    );\\r\\n}, [\\r\\n    x,\\r\\n    y,\\r\\n    radius,\\r\\n    isActive,\\r\\n    isSelected,\\r\\n    handleClick,\\r\\n    handleMouseDown,\\r\\n    handleMouseUp,\\r\\n    handleMouseEnter,\\r\\n    handleMouseLeave\\r\\n]);\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nAutomatic injection dependency list\\r\\n\\r\\n```jsx\\r\\nreturn useMemo(() => {\\r\\n    const hostNodeClassNames = classNames({\\r\\n        [styles.hostNode]: true,\\r\\n        [styles.hostNodeSelected]: isSelected || isActive,\\r\\n    });\\r\\n\\r\\n    return (\\r\\n        <g className={hostNodeClassNames}\\r\\n            onClick={handleClick}\\r\\n            onMouseDown={handleMouseDown}\\r\\n            onMouseUp={handleMouseUp}\\r\\n            onMouseEnter={handleMouseEnter}\\r\\n            onMouseLeave={handleMouseLeave}\\r\\n        >\\r\\n            <circle className={styles.displayNode} cx={x} cy={y} r={radius}/>\\r\\n            <circle className={styles.boundsNode} cx={x} cy={y} r={radius * 3}/>\\r\\n        </g>\\r\\n    );\\r\\n});\\r\\n```\\r\\n","number":16283,"user":{"login":"baocang"},"state":"closed","created_at":"2019-08-02T19:05:41Z"},{"id":476273316,"title":"Warn if you try to use `act()` in prod","body":"We have behaviour divergence for act() between prod and dev (specifically, act() + concurrent mode does not flush fallbacks in prod. This doesn\'t affect anyone in OSS yet.)\\r\\n\\r\\nWe also don\'t have a good story for writing tests in prod (and what from what I gather, nobody really writes tests in prod mode).\\r\\n\\r\\nWe could have wiped out act() in prod builds, except that _we_ ourselves use act() for our tests when we run them in prod mode.\\r\\n\\r\\nThis PR is a compromise to all of this. We will log a warning if you try to use act() in prod mode, and we silence it in our test suites. (Any discrepancies in behaviour will still be caught by assertions). \\r\\n\\r\\nWe will revisit this in a future version. ","number":16282,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-08-02T17:00:24Z"},{"id":476190604,"title":"[react-hooks/exhaustive-deps] false positiy using `useState` and `useCallback`","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nNo errors raised in following demos.\\r\\n\\r\\nDemo JS: https://codesandbox.io/s/charming-mayer-l3nc3\\r\\nDemo TS: https://codesandbox.io/s/friendly-merkle-xinzm\\r\\n\\r\\n**What is the expected behavior?**\\r\\nError `setMenuAnchor` missing in `deps`.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nEslint is browser independend\\r\\nVersions: see codesandbox demos\\r\\n\\r\\n**additional**\\r\\n\\r\\nTried reproduce the trigger for the bug. When I replace the `usetState` with literal `[null, function() {}]`, the plugin **correctly** detects missing `setMenuAnchor` in `deps`.","number":16281,"user":{"login":"akomm"},"state":"closed","created_at":"2019-08-02T13:51:34Z"},{"id":476174749,"title":"Should componentDidMount optionally return a promise?","body":"**Do you want to request a feature or report a bug?**\\r\\n\\r\\nFeature Request\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nCurrently, `componentDidMount` returns nothing.  It is the recommended lifecycle hook for performing async operations.  It is necessary to create wrapper functions returning a promise to test such operations (#14687).\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nUnlike the suggestion in #1739 etc do not recommending changing any rendering semantics.  Simply allow a promise to be returned so that testing does not require boilerplate.","number":16280,"user":{"login":"patsplat"},"state":"closed","created_at":"2019-08-02T13:16:38Z"},{"id":476123855,"title":"Suggestion: useRender hook","body":"i don\'t know if that\'s possible from the technical view but i think it\'d be less confusing if there is a useRender hook so the developer doesn\'t have to be concerned about what gets rerendered in any hookful component and i think that will lead to useMemo deprecation \\r\\ne.g \\r\\n```js\\r\\nfunction App () {\\r\\n    // expensive calculations, state and the rest of the hooks\\r\\n    useRender(() => {\\r\\n        //calculation which being rerendered every update\\r\\n        return (\\r\\n        )\\r\\n    })\\r\\n}\\r\\n```\\r\\nidk why im saying that actually i mean that\'s very breaking change but eh it\'s just an idea","number":16279,"user":{"login":"yousefelgoharyx"},"state":"closed","created_at":"2019-08-02T11:00:17Z"},{"id":475996453,"title":"[SuspenseList] Bug fix: Reset renderState when bailing out","body":"If there are adjacent updates we bail out of rendering the suspense list at all but we may still complete the node. We need to reset the render state in that case.\\r\\n\\r\\nI restructured so that this is in the same code path so we don\'t forget it in the future.","number":16278,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-08-02T04:56:16Z"},{"id":475982854,"title":"Fix priority of clean-up function on deletion","body":"The clean-up function of a passive effect (`useEffect`) usually fires in a post-commit task, after the browser has painted. However, there is an exception when the component (or its parent) is deleted from the tree. In that case, we fire the clean-up function during the synchronous commit phase, the same phase we use for layout effects.\\r\\n\\r\\nThis is a concession to implementation complexity. Calling it in the passive effect phase would require either traversing the children of the deleted fiber again, or including unmount effects as part of the fiber effect list.\\r\\n\\r\\nBecause the functions are called during the sync phase in this case, the Scheduler priority is Immediate (the one used for layout) instead of Normal. We may want to reconsider this trade off later.\\r\\n\\r\\nIn practice, this should rarely matter because it\'s unusual to call `setState` inside a clean-up function. We might want to warn about this pattern.","number":16277,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-02T03:48:20Z"},{"id":475761580,"title":"Are we allowed to use set** in hooks dependencies array?","body":"The hooks document says, we can put variable of hooks dependencies array, such as this...\\r\\n\\r\\n```JS\\r\\nconst [some, setSome] = useState(0)\\r\\n\\r\\nconst val = useMemo(() => {\\r\\n return something\\r\\n}, [some])\\r\\n```\\r\\n\\r\\nHowever, are we allowed to use set** in hooks dependencies array?\\r\\nFor example, \\r\\n\\r\\n```JS\\r\\nconst [some, setSome] = useState(0)\\r\\n\\r\\nconst val = useMemo(() => {\\r\\n return something\\r\\n}, [setSome]) // <- Here\\r\\n```\\r\\n\\r\\nI wonder because the second example worked without any errors?\\r\\nIs it a proper way to use dependencies array?\\r\\n\\r\\nThank you.\\r\\n","number":16276,"user":{"login":"Gumichocopengin8"},"state":"closed","created_at":"2019-08-01T15:53:29Z"},{"id":475708232,"title":"IE11 - react.lazy loaded component fails to apply some css styles","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThis is observed in IE11.\\r\\nHave two components `<Home />` and `<Contact />`.\\r\\nThey have their own css. i.e `<Home />` has it\'s own \\"style.css\\" and `<Contact />` has it\'s own \\"style.css\\".\\r\\n\\r\\nUsing React.lazy we have implemented route-based code-splitting.\\r\\n\\r\\nInitially, page loads with \\"/home\\"  `<Home />`\\r\\nUser accesses  \\"/contact\\",\\r\\n`<Contact />` has a `<button />` that will have class `--is-disabled` if some external props `isDisabled` is true.\\r\\nwe have this style defined in the css of `<Contact/>`,\\r\\n```\\r\\nbutton.--is-disabled {\\r\\n    background-color: grey;\\r\\n}\\r\\n```\\r\\nObserved that although `<button />` has the class `--is-disabled`, it is NOT greyed out. \\r\\n\\r\\nThis works as expected in all other browsers - Edge, Chrome, Safari, Firefox\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nUnable to provide an example at this time.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nSince `<button/>` has the class `--is-disabled`, it should have background-color === grey, as defined in the css.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact.16.8.6\\r\\nOS: Windows 10\\r\\nBrowser: Internet Explorer 11 \\r\\n\\r\\nThis was working as expected previously\\r\\nwhen we were using React 16.1.1 and did not implement route-based code-splitting.\\r\\n","number":16275,"user":{"login":"ThekhoN"},"state":"closed","created_at":"2019-08-01T14:14:24Z"},{"id":475653129,"title":"About \u201cPOOL_SIZE\u201d in \\"React.children\\".","body":"In \\"React.children.js\\", \\"POOL_SIZE\\" is 10.\\r\\nWhy not set a value other than 10? For 10, isn\'t 1 better? Will take up less memory, or why not change the \\"traverseContextPool\\" to an object to transfer properties?","number":16274,"user":{"login":"xiaobai2017666"},"state":"closed","created_at":"2019-08-01T12:25:31Z"},{"id":475609066,"title":"False positive on style prop in development mode when hydrating","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug?\\r\\n\\r\\n**What is the current behavior?**\\r\\nSafari is showing an a mismatch error in development console when server side rendering and hydrating on the client for a style prop.\\r\\n\\r\\n![Screen Shot 2019-08-01 at 11 25 16](https://user-images.githubusercontent.com/34645/62286269-484e0700-b44f-11e9-939f-e28de23ec0b3.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/async-morning-zmwqu?fontsize=14\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI wouldn\'t expect a mismatch error to occur in the console despite the style prop being equivalent to one another, just in a different order.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.1\\r\\nReactDOM 16.8.1\\r\\n","number":16273,"user":{"login":"damian"},"state":"closed","created_at":"2019-08-01T10:41:14Z"},{"id":475570761,"title":"Make `key` available in `props`","body":"Why is the value of the `key`-attribute unavailable in `props`?\\r\\n\\r\\nI\'m experimenting with state management abstractions, and I wanted to make `key` required and use the value as the key to a state container - something along the lines of this:\\r\\n\\r\\n```jsx\\r\\n<Provider store={store} key=\\"count\\">\\r\\n    {count => <h1>Count: {count}</h1>}\\r\\n</Provider>\\r\\n```\\r\\n\\r\\nThis would be meaningful, because the `Provider` instance can\'t actually be reused if the key to the store changes, at least not without adding extra complexity.\\r\\n\\r\\nCurrently, my only recourse is to duplicate this value with a different name:\\r\\n\\r\\n```jsx\\r\\n<Provider store={store} key=\\"count\\" storeKey=\\"count\\">\\r\\n    {count => <h1>Count: {count}</h1>}\\r\\n</Provider>\\r\\n```\\r\\n\\r\\nThis is rather inelegant and errorprone.\\r\\n\\r\\n`key` is a prop, so I\'d expect it to exist in `props`.\\r\\n\\r\\nWhy this seemingly arbitrary restriction?\\r\\n","number":16272,"user":{"login":"mindplay-dk"},"state":"closed","created_at":"2019-08-01T09:20:58Z"},{"id":475446269,"title":"[Scheduler] Delete old rAF implementation","body":"Our performance tests indicate that the message loop implementation has better CPU utilization than the current rAF one. This commit removes the feature flag and deletes the rAF implementation.\\r\\n\\r\\nI removed the old SchedulerDOM tests because they assumed a rAF implementation. I ported the relevant tests to the SchedulerBrowser test suite.\\r\\n\\r\\nOpening the PR now, but I won\'t merge this until after 16.9.","number":16271,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-08-01T03:04:54Z"},{"id":475314070,"title":"[eslint-plugin-react-hook] [feature request]: Error out then class Component is passed to React.memo ","body":"I have seen some weird misuse of React.memo in codebase. I have fixed it, but for general public this could be useful","number":16270,"user":{"login":"JustFly1984"},"state":"closed","created_at":"2019-07-31T19:19:31Z"},{"id":475303483,"title":"Add a feature flag to disable legacy context","body":"Adds a feature flag that disables the legacy context API. The feature flag is turned off in open source builds. Strict Mode is already a mechanism that warns about it, but this feature flag actually makes `this.context` always an empty object, and `context` argument to functions always `undefined`. So it\'s a way to enforce it. If we later offer \\"modern\\" builds, we can turn it on there by default. For now, I want to use this internally for newly written code.\\r\\n\\r\\nNo whitespace: https://github.com/facebook/react/compare/master...gaearon:ctx?expand=1&w=1","number":16269,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-07-31T18:53:03Z"},{"id":475253334,"title":"use helper function to create react symbol","body":"This commit makes no functional change.\\r\\nIt brings:\\r\\n1. cleaner code;\\r\\n2. slightly reduce dist bundle size (~0.1kb).","number":16268,"user":{"login":"Yelmor"},"state":"closed","created_at":"2019-07-31T16:52:56Z"},{"id":475244466,"title":"[Flare] Remove FocusScope responder","body":"We plan on breaking out the focus management system from the event system, so that means that `FocusScope` no longer makes sense being an event responder.","number":16267,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-31T16:32:44Z"},{"id":475186946,"title":"Fix TypeError in getActiveElement","body":"During tests (with react-testing-library) a random test randomly fails\\r\\nwith \\"TypeError: Cannot read property \'body\' of null\\" in the getActiveElement.\\r\\nIt appears that sometimes the `doc` is null but the check in the file only\\r\\nchecks for undefined. This proposed change checks for both `null` or `undefined`\\r\\nwhich should prevent the failures.\\r\\n\\r\\nhttps://github.com/facebook/react/issues/15691\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16266,"user":{"login":"ishristov"},"state":"closed","created_at":"2019-07-31T14:42:59Z"},{"id":475084284,"title":"Warning for \'exhaustive-deps\' keeps asking for the full \'props\' object instead of allowing single \'props\' properties as dependencies","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBUG (possible) in `eslint-plugin-react-hooks`\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen I\'m in CodeSanbox using a React Sandbox I can use single properties of the `props` object as dependencies for the `useEffect` hook:\\r\\n\\r\\nExample 1:\\r\\n\\r\\n```\\r\\nuseEffect(()=>{\\r\\n    console.log(\'Running useEffect...\');\\r\\n    console.log(typeof(props.myProp));\\r\\n  },[ ]);\\r\\n```\\r\\n\\r\\nThe example 1 gives me the following warning in CodeSandbox environment:\\r\\n\\r\\n>React Hook useEffect has a missing dependency: \'**props.myProp\'**. Either include it or remove the dependency array. (react-hooks/exhaustive-deps) eslint\\r\\n\\r\\nAnd if I add `[props.myProp]` to the array, the warning goes away.\\r\\n\\r\\nBut the same example 1 in my local environment in VSCode, I get the following warning:\\r\\n\\r\\n>React Hook useEffect has a missing dependency: \'props\'. Either include it or remove the dependency array. However, \'props\' will change when *any* prop changes, so the preferred fix is to destructure the \'props\' object outside of the useEffect call and refer to those specific props inside useEffect.eslint(react-hooks/exhaustive-deps)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect that I would get the same behavior that I get on CodeSandbox in my local environment in VSCode.\\r\\n\\r\\nBut, if I add `[props.myProp]` to the array, the warning DOES NOT go away. Although the code works as intended.\\r\\n\\r\\nWhat could be happening? Does CodeSandbox uses a different version of the plugin? Is there any configuration I can make to change this behavior?\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nVersions I\'m using:\\r\\n\\r\\nDEV:\\r\\n```\\r\\n\\"eslint\\": \\"^5.10.0\\",\\r\\n\\"eslint-plugin-react\\": \\"^7.11.1\\",\\r\\n\\"eslint-plugin-react-hooks\\": \\"^1.6.1\\",\\r\\n```\\r\\n\\r\\nREGULAR\\r\\n```\\r\\n\\"react\\": \\"^16.8.6\\",\\r\\n\\"react-dom\\": \\"^16.8.6\\",\\r\\n```\\r\\n\\r\\nVSCODE (probably not causing this issue)\\r\\n\\r\\nVersion: 1.32.3 (user setup)\\r\\nCommit: a3db5be9b5c6ba46bb7555ec5d60178ecc2eaae4\\r\\nDate: 2019-03-14T23:43:35.476Z\\r\\nElectron: 3.1.6\\r\\nChrome: 66.0.3359.181\\r\\nNode.js: 10.2.0\\r\\nV8: 6.6.346.32\\r\\nOS: Windows_NT x64 10.0.17763\\r\\n\\r\\n**.eslintrc.json**\\r\\n\\r\\n```\\r\\n{\\r\\n  \\"root\\"  :true,\\r\\n  \\"env\\": {\\r\\n    \\"browser\\": true,\\r\\n    \\"commonjs\\": true,\\r\\n    \\"es6\\": true,\\r\\n    \\"node\\": true\\r\\n  },\\r\\n  \\"extends\\": [\\r\\n    \\"eslint:recommended\\",\\r\\n    \\"plugin:react/recommended\\",\\r\\n    \\"plugin:import/errors\\"\\r\\n  ],\\r\\n  \\"parser\\":\\"babel-eslint\\",\\r\\n  \\"parserOptions\\": {\\r\\n    \\"ecmaVersion\\": 2018,\\r\\n    \\"sourceType\\": \\"module\\",\\r\\n    \\"ecmaFeatures\\": {\\r\\n      \\"jsx\\":true\\r\\n    }\\r\\n  },\\r\\n  \\"plugins\\":[\\r\\n    \\"react\\",\\r\\n    \\"react-hooks\\"\\r\\n  ],\\r\\n  \\"rules\\": {\\r\\n    \\"react/prop-types\\": 0,\\r\\n    \\"semi\\": \\"error\\",\\r\\n    \\"no-console\\": 0,\\r\\n    \\"react-hooks/rules-of-hooks\\": \\"error\\",\\r\\n    \\"react-hooks/exhaustive-deps\\": \\"warn\\"\\r\\n  },\\r\\n  \\"settings\\": {\\r\\n    \\"import/resolver\\" : {\\r\\n      \\"alias\\" : {\\r\\n        \\"map\\" : [\\r\\n          [\\"@components\\",\\"./src/components\\"],\\r\\n          [\\"@constants\\",\\"./src/constants\\"],\\r\\n          [\\"@helpers\\",\\"./src/helpers\\"]\\r\\n        ],\\r\\n        \\"extensions\\": [\\".js\\"]\\r\\n      }\\r\\n    },\\r\\n    \\"react\\" : {\\r\\n      \\"version\\": \\"detect\\"\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n","number":16265,"user":{"login":"cbdeveloper"},"state":"open","created_at":"2019-07-31T11:18:04Z"},{"id":475071080,"title":"[Flare] Tweaks to Flare system design and API","body":"This PR makes some slight adjustments to the exist Flare event system design. After internal testing and from feedback, it was found that passing responders as a React Element to host components, then having detached listeners led to unnecessary boilerplate and some issues around composability. To address these concerns the follow changes have been made:\\r\\n\\r\\n## `useListener` -> `useResponder`\\r\\n\\r\\nThere was confusion as to why `useListener` was actually using an Event Responder, but was named \\"useListener\\". Now the hook is `useResponder`, which takes an Event Responder and returns and Event Listener. \\r\\n\\r\\n## `responders` prop -> `listeners` prop\\r\\n\\r\\nNow that the `useResponder` hook returns a discrete event listener object, this now gets passed to host components rather than supplying a responder as a React Element on the host component.\\r\\n\\r\\nTo demonstrate these changes, here\'s a before and after:\\r\\n\\r\\n```jsx\\r\\n// Before\\r\\nfunction PressableButton({onPress}) {\\r\\n  useListener(PressResponder, {onPress});\\r\\n\\r\\n  return (\\r\\n    <button responders={<PressResponder />}>Press me</button>\\r\\n  );\\r\\n}\\r\\n\\r\\n// After\\r\\nfunction PressableButton({onPress}) {\\r\\n  const pressListener = useResponder(PressResponder, {onPress});\\r\\n\\r\\n  return (\\r\\n    <button listeners={pressListener}>Press me</button>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nThis design change allows us to explore composing the sequence of listeners, allowing for more complex interactions. It also makes the bindings between listeners and their responders more explicit and less magical.","number":16264,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-31T10:46:21Z"},{"id":474968880,"title":"Invariant violation: it is not supported to run the profiling version of a renderer","body":"I have an issue with husky pre push. I have a react-native application. When I run the tests via a commandline the tests all succeed. I also have gitkraken which gives me this error when I trigger the pre push event of husky which runs my tests. \\r\\n\\r\\nHow can I fix this?\\r\\n                                                                      \\r\\n`FAIL src/domains/dashboard/screens/index.spec.tsx\\r\\n  b   Test suite failed to run\\r\\n\\r\\n Invariant Violation: It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling\\r\\n\\r\\n      15 | import styled from \'@app/theme\'\\r\\n      16 | \\r\\n         |                           ^\\r\\n      18 |   flex: 1;\\r\\n      19 |   justify-content: center;\\r\\n      20 |   align-items: center;\\r\\n\\r\\n      at ReactError (node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:38:15)\\r\\n      at ReactError (node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:5444:13)\\r\\n      at node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:5437:3\\r\\n      at Object.<anonymous> (node_modules/react-native/Libraries/Renderer/oss/ReactNativeRenderer-dev.js:16:3)\\r\\n      at Object.require (node_modules/react-native/Libraries/Renderer/shims/ReactNative.js:18:17)\\r\\n      at Object.requireActual [as user:/Users/arjan.vanmaren/Workspaces/KNLTB-app/node_modules/react-native/Libraries/Renderer/shims/ReactNative.js:] (node_modules/react-native/jest/setup.js:86:30)\\r\\n      at Object.require (node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js:13:21)\\r\\n      at Object.require (node_modules/react-native/Libraries/Components/View/View.js:14:29)\\r\\n      at requireActual (node_modules/react-native/jest/mockComponent.js:13:30)\\r\\n      at Object.mockComponent [as user:/Users/arjan.vanmaren/Workspaces/KNLTB-app/node_modules/react-native/Libraries/Components/View/View.js:] (node_modules/react-native/jest/setup.js:53:5)\\r\\n      at Object.require [as View] (node_modules/react-native/Libraries/react-native/react-native-implementation.js:159:12)\\r\\n      at Function.get [as View] (node_modules/styled-components/native/dist/styled-components.native.cjs.js:6512:41)\\r\\n      at Object.View (src/domains/dashboard/screens/index.tsx:17:27)\\r\\n      at Object.<anonymous> (src/domains/dashboard/screens/index.spec.tsx:2:1)\\r\\n`","number":16263,"user":{"login":"Arjanvanmaren"},"state":"closed","created_at":"2019-07-31T06:54:31Z"},{"id":474919796,"title":"ErrorBoundary can not catch children node error","body":"**Feature**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nErrorBoundary component can only catch the error from the **children component**.\\r\\n\\r\\nIs there some way can catch the error from the **children node**?\\r\\n\\r\\nexample App component:\\r\\n``` js\\r\\nfunction App() {\\r\\n  const user = {}\\r\\n  return (\\r\\n    <main>\\r\\n      <h2>main</h2>\\r\\n      <ErrorBoundary>\\r\\n        <User user={user} />\\r\\n      </ErrorBoundary>\\r\\n      {/* can not catch*/}\\r\\n      <ErrorBoundary>\\r\\n        <div>{user.info.name}</div>\\r\\n      </ErrorBoundary>\\r\\n      {/* also can not catch*/}\\r\\n      <ErrorBoundary>\\r\\n        {() => (<div>{user.info.name}</div>)}\\r\\n      </ErrorBoundary>\\r\\n    </main>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst User = (props) => {\\r\\n  return <div>{props.user.info.name}</div>\\r\\n}\\r\\n```\\r\\n\\r\\nErrorBoundary component:\\r\\n``` js\\r\\nclass ErrorBoundary extends Component {\\r\\n    constructor(props) {\\r\\n        super(props);\\r\\n        this.state = { hasError: false };\\r\\n    }\\r\\n\\r\\n    static getDerivedStateFromError(error) {\\r\\n        return { hasError: true };\\r\\n    }\\r\\n\\r\\n    componentDidCatch(error, info) {\\r\\n        console.log(error, info);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        if (this.state.hasError) {\\r\\n            return <h1>Something went wrong.</h1>;\\r\\n        }\\r\\n\\r\\n        if (typeof this.props.children === \'function\') {\\r\\n            return this.props.children()\\r\\n        }\\r\\n\\r\\n        return this.props.children;\\r\\n    }\\r\\n}\\r\\n```\\r\\nI don\'t think there is much difference between use  `User` component and  `<div>{user.info.name}</div>` . Also wrap *every* component in error boundary is  a bad idea. But sometimes, I can\'t take every small module to a separate component. So I expect the ErrorBoundary can catch the error from the children node\u3002\\r\\n\\r\\nAny suggestions? thanks a lot.","number":16262,"user":{"login":"Sylvenas"},"state":"closed","created_at":"2019-07-31T03:42:15Z"},{"id":474910701,"title":"Add missing check to unmocked Scheduler warning","body":"The unmocked Scheduler warning doesn\'t actually check if Scheduler is mocked.\\r\\n\\r\\nOnly affects www because the `warnAboutUnmockedScheduler` feature flag is off in the open source build.\\r\\n","number":16261,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-31T02:59:36Z"},{"id":474876859,"title":"[act] Wrap IsThisRendererActing in DEV check","body":"So that it doesn\'t leak into the production bundle. Follow-up to #16240.\\r\\n","number":16259,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-31T00:14:52Z"},{"id":474854768,"title":"[Regression] onChange behaviour on radio buttons","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nHaving an uncontrolled, but _observed_ Radio Group, `onChange` would not be called on the previously selected Radio, only on the newly selected one.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/elastic-tu-yvytn\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nonChange is called on both `inputs`\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8.6\\r\\n\\r\\nThis issue was fixed in 15.6.2 - https://github.com/facebook/react/issues/12172\\r\\n\\r\\n**Workaround**\\r\\n```js\\r\\nconst radioStates = new Map();\\r\\nconst nop = () => null;\\r\\nexport const Radio = ({inputGroupName, value}) => {\\r\\n  const [checked, setChecked] = React.useState(false);\\r\\n\\r\\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\r\\n    // Radio change events are broken\\r\\n    // see https://github.com/facebook/react/issues/9988\\r\\n    // emulating Radio Group controller\\r\\n    const group = e.target.name;\\r\\n\\r\\n    // disable old radio    \\r\\n    const oldHandler = radioStates.get(group) || nop;\\r\\n    oldHandler(false); \\r\\n\\r\\n    // enable new radio\\r\\n    radioStates.set(group, setChecked);    \\r\\n    setChecked(e.target.checked);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <label>\\r\\n      <input\\r\\n        type=\\"radio\\"\\r\\n        name={inputGroupName}\\r\\n        value={value}\\r\\n        onChange={handleInputChange}\\r\\n      />\\r\\n    </label>\\r\\n  );\\r\\n};\\r\\n```","number":16258,"user":{"login":"theKashey"},"state":"closed","created_at":"2019-07-30T22:42:14Z"},{"id":474833178,"title":"Bugfix:  Effects should never have higher than normal priority","body":"The priority of passive effects is supposed to be the same as the priority of the render. (That was the original intended behavior, at least.) The first commit fixes a bug where the priority is sometimes wrong if the effects are flushed early.\\r\\n\\r\\nHowever, the priority should really never be higher than Normal Priority.\\r\\n\\r\\nThe second commit changes the behavior so that effects always have normal priority, or lower if the render priority is lower (e.g. offscreen prerendering).\\r\\n\\r\\nThe implementation is a bit awkward because of the way `renderRoot`, `commitRoot`, and `flushPassiveEffects` are split. This is a known factoring problem that I\'m planning to address once 16.9 is released.","number":16257,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-30T21:38:27Z"},{"id":474831983,"title":"BugFix: Suspense priority warning firing when not supposed to","body":"Previously, the suspense priority warning was fired even if the Root wasn\'t suspended. Changed the warning to fire only when the root is suspended.\\r\\n\\r\\nAlso refactored the suspense priority warning so it\'s easier to read.","number":16256,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-07-30T21:34:59Z"},{"id":474774338,"title":"UseEffect infinity reload if value props is undefined","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf the props received undefined value, useEffect understand the value props change, and reload infinity times.\\r\\nObviously the data must be handled, but when it gets undefined the infinite reload should not happen.\\r\\n\\r\\nIn the codesandbox example, I force the props checkedItems with undefined, but if I don\'t pass any props, the default value is undefined, the useEffect understand the value change, and start que infinity loop.\\r\\n\\r\\n**Example below:**\\r\\nhttps://codesandbox.io/s/aged-river-ypn7y\\r\\n\\r\\n**What is the expected behavior?**\\r\\nLoad only one time, because the value undefined not change.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact Typescript\\r\\nMy react version: `16.8.1`\\r\\nMy react dom version: `16.8.1`\\r\\nMy chrome version: `75.0.3770.142`\\r\\n\\"@types/react\\": \\"16.7.22\\",\\r\\n\\"@types/react-dom\\": \\"16.0.11\\",\\r\\n\\r\\nThanks.\\r\\n","number":16255,"user":{"login":"viniarruda"},"state":"closed","created_at":"2019-07-30T19:12:53Z"},{"id":474710647,"title":"Changelog for 16.9","body":"### React\\r\\n\\r\\n * Add `<React.Profiler>` API for gathering performance measurements programmatically. ([@bvaughn](https://github.com/bvaughn) in [#15172](https://github.com/facebook/react/pull/15172))\\r\\n* Remove `unstable_ConcurrentMode` in favor of `unstable_createRoot`. ([@acdlite](https://github.com/acdlite) in [#15532](https://github.com/facebook/react/pull/15532))\\r\\n\\r\\n ### React DOM\\r\\n\\r\\n * Deprecate old names for the `UNSAFE_*` lifecycle methods. ([@bvaughn](https://github.com/bvaughn) in [#15186](https://github.com/facebook/react/pull/15186) and [@threepointone](https://github.com/threepointone) in [#16103](https://github.com/facebook/react/pull/16103))\\r\\n* Deprecate `javascript:` URLs as a common attack surface. ([@sebmarkbage](https://github.com/sebmarkbage) in [#15047](https://github.com/facebook/react/pull/15047))\\r\\n* Deprecate uncommon \\"module pattern\\" (factory) components. ([@sebmarkbage](https://github.com/sebmarkbage) in [#15145](https://github.com/facebook/react/pull/15145))\\r\\n* Add support for the `disablePictureInPicture` attribute on `<video>`. ([@eek](https://github.com/eek) in [#15334](https://github.com/facebook/react/pull/15334))\\r\\n* Add support for `onLoad` event for `<embed>`. ([@cherniavskii](https://github.com/cherniavskii) in [#15614](https://github.com/facebook/react/pull/15614))\\r\\n* Add support for editing `useState` state from DevTools. ([@bvaughn](https://github.com/bvaughn) in [#14906](https://github.com/facebook/react/pull/14906))\\r\\n* Add support for toggling Suspense from DevTools. ([@gaearon](https://github.com/gaearon) in [#15232](https://github.com/facebook/react/pull/15232))\\r\\n* Warn when `setState` is called from `useEffect`, creating a loop. ([@gaearon](https://github.com/gaearon) in [#15180](https://github.com/facebook/react/pull/15180))\\r\\n* Fix a memory leak. ([@paulshen](https://github.com/paulshen) in [#16115](https://github.com/facebook/react/pull/16115))\\r\\n* Fix a crash inside `findDOMNode` for components wrapped in `<Suspense>`. ([@acdlite](https://github.com/acdlite) in [#15312](https://github.com/facebook/react/pull/15312))\\r\\n* Fix pending effects from being flushed too late. ([@acdlite](https://github.com/acdlite) in [#15650](https://github.com/facebook/react/pull/15650))\\r\\n* Fix incorrect argument order in a warning message. ([@brickspert](https://github.com/brickspert) in [#15345](https://github.com/facebook/react/pull/15345))\\r\\n* Fix hiding Suspense fallback nodes when there is an `!important` style. ([@acdlite](https://github.com/acdlite) in [#15861](https://github.com/facebook/react/pull/15861) and [#15882](https://github.com/facebook/react/pull/15882))\\r\\n* Slightly improve hydration performance. ([@bmeurer](https://github.com/bmeurer) in [#15998](https://github.com/facebook/react/pull/15998))\\r\\n\\r\\n ### React DOM Server\\r\\n\\r\\n * Fix incorrect output for camelCase custom CSS property names. ([@bedakb](https://github.com/bedakb) in [#16167](https://github.com/facebook/react/pull/16167))\\r\\n\\r\\n ### React Test Utilities and Test Renderer\\r\\n\\r\\n * Add `act(async () => ...)` for testing asynchronous state updates. ([@threepointone](https://github.com/threepointone) in [#14853](https://github.com/facebook/react/pull/14853))\\r\\n* Add support for nesting `act` from different renderers. ([@threepointone](https://github.com/threepointone) in [#16039](https://github.com/facebook/react/pull/16039) and [#16042](https://github.com/facebook/react/pull/16042))\\r\\n* Warn in Strict Mode if effects are scheduled outside an `act()` call. ([@threepointone](https://github.com/threepointone) in [#15763](https://github.com/facebook/react/pull/15763) and [#16041](https://github.com/facebook/react/pull/16041))\\r\\n* Warn when using `act` from the wrong renderer. ([@threepointone](https://github.com/threepointone) in [#15756](https://github.com/facebook/react/pull/15756))\\r\\n","number":16254,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-07-30T17:31:25Z"},{"id":474647683,"title":"A failing test for the revertPassiveEffectsChange, er,  change","body":"Disabling the feature flag changed some behaviour that broke some fb tests. This is a reproduction of the issue as I understand it: A setState inside an effect, will cause an \'early\' flush of all effects on second render.\\r\\n\\r\\nToggling the `revertPassiveEffectsChange` feature flag passes/fails the test.\\r\\n\\r\\nQ: What is the expected behaviour in this case?\\r\\n","number":16253,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-30T15:17:18Z"},{"id":474630395,"title":"Updating data within a cloned jsx","body":"We are trying to implement customization of the application in runtime for different organizations. Here is a [diagram](https://www.lucidchart.com/documents/edit/b92cf5e4-26ca-42b5-a8e1-e22c1b00d7fe/0?shared=true&)  (login with Google to see )of how this should work.\\r\\n\\r\\nPortals didn\u2019t work for us because they implement only half of the script - they allow us to render a loaded element into an element already existing on the page\\r\\nbut they do not help in any way when the container for the element appears after loading the plugin.\\r\\nWe [forked](https://github.com/mg901/react-slot-fill) the [React-slot-fill](https://www.npmjs.com/package/react-slot-fill), updated the react to the current version, and added support for new slots.\\r\\n\\r\\nHere is a description of its API.\\r\\nSlot is a named point for mounting components, the name of the slot is unique throughout the project.\\r\\nMounting can be done from anywhere in the application.\\r\\n\\r\\n\\r\\nSome Slots are going through the whole app and some of them appears only at certain screens, for example user configured Dashboard. So we need a way to link Slot and Fills in spite of which of them was rendered first.\\r\\n\\r\\nAt the moment slot-fill meets all our requirements, but we don\'t understand how to update the data inside the components in each slot in the slot, and if that\'s not possible, what alternatives can you offer?\\r\\n\\r\\nI\'m also attaching an error scenario [video](https://youtu.be/_Y0Iz1qqnFg).\\r\\n[And a link to an application where you can play this bug](https://mv-test.ips.su/modelviewer/entity). \\r\\n\\r\\nlogin: admin\\r\\npassword: admin \\r\\n\\r\\n\\r\\n\\r\\n","number":16252,"user":{"login":"mg901"},"state":"closed","created_at":"2019-07-30T14:47:26Z"},{"id":474521824,"title":"How to save my components in browers caches (applications/frames)","body":"i want to do the same thing as Icloud.com \\r\\n![Capture du 2019-07-30 11-06-25](https://user-images.githubusercontent.com/48321338/62124857-39d2e480-b2c3-11e9-9764-c675c5b31e9f.png)\\r\\n![Capture du 2019-07-30 11-06-57](https://user-images.githubusercontent.com/48321338/62124858-3a6b7b00-b2c3-11e9-806f-be246e426a13.png)\\r\\n","number":16251,"user":{"login":"WajdiBf"},"state":"closed","created_at":"2019-07-30T11:09:39Z"},{"id":474453238,"title":"React Context deprecated warning","body":"\\r\\nWhen I use this.context in a class I see a warning \\"Deprecated symbol used, consult docs for better alternative\\" in PhpStorm IDE.. it is really deprecated?\\r\\n\\r\\n\\"react\\": \\"16.8.3\\"","number":16250,"user":{"login":"mydesweb"},"state":"closed","created_at":"2019-07-30T08:44:10Z"},{"id":474424202,"title":"\u66f4\u65b0\u4e86 README","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16249,"user":{"login":"tomatokai"},"state":"closed","created_at":"2019-07-30T07:37:47Z"},{"id":474326124,"title":"[Flare] Remove delay props from Hover","body":"Moving working with delays into user-space.","number":16248,"user":{"login":"necolas"},"state":"closed","created_at":"2019-07-30T01:27:04Z"},{"id":474326009,"title":"[Flare] Remove delay props from Press","body":"Moving working with delays into user-space.","number":16247,"user":{"login":"necolas"},"state":"closed","created_at":"2019-07-30T01:26:28Z"},{"id":474319189,"title":"React onChange event triggers the wrong props (when used with `htmlFor`)","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nComponent triggers the wrong props on the `onChange` event.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://codesandbox.io/s/muddy-https-r6w7p\\r\\nIt behaves alright when the default input(file selector) is clicked. But when the div that refers to the input(with `htmlFor`) is clicked, it seems like triggering the old props.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact v16.8.6\\r\\n","number":16246,"user":{"login":"ar-naseef"},"state":"closed","created_at":"2019-07-30T00:54:04Z"},{"id":474302277,"title":"[Scheduler] Store Tasks on a Min Binary Heap","body":"Switches Scheduler\'s priority queue implementation (for both tasks and timers) to an array-based min binary heap.\\r\\n\\r\\nThis replaces the naive linked-list implementation that was left over from the queue we once used to schedule React roots. A list was arguably fine when it was only used for roots, since the total number of roots is usually small, and is only 1 in the common case of a single-page app.\\r\\n\\r\\nSince Scheduler is now used for many types of JavaScript tasks (e.g. including timers), the total number of tasks can be much larger.\\r\\n\\r\\nHeaps are the standard way to implement priority queues. Insertion is O(1) in the average case (append to the end) and O(log n) in the worst. Deletion is O(log n). Peek is O(1).","number":16245,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-29T23:33:08Z"},{"id":474262645,"title":"Broken link to Lifecycle diagram","body":"Link doesn\'t work http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/","number":16244,"user":{"login":"tyty1602"},"state":"closed","created_at":"2019-07-29T21:21:42Z"},{"id":474233515,"title":"[Flare] Ensure we check for bad polyfill when creating responders","body":"We missed the bad polyfill for when creating event responders.","number":16243,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-29T20:10:10Z"},{"id":474188182,"title":"[Flare] Remove longpress from press responder","body":"Long press will move to a separate responder.","number":16242,"user":{"login":"necolas"},"state":"closed","created_at":"2019-07-29T18:16:27Z"},{"id":474107783,"title":"[Fresh] Transfer refs when remounting","body":"Previously, editing a class component would cause refs to it to get nulled after an edit.\\r\\n\\r\\nThis fixes the ref to be transferred on remount so it doesn\'t get lost. Added a (previously failing) regression test.\\r\\n\\r\\nThanks @TheSavior for the bug report.","number":16241,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-07-29T15:12:48Z"},{"id":473996708,"title":"[act] flush suspense fallbacks in tests","body":"Opening this to share the approach andrew et al, and answer some pending questions.\\r\\n\\r\\nIn this PR, for tests (specifically, code inside an `act()` scope), we immediately trigger work that would have otherwise required a timeout. This makes it simpler to tests loading/spinner states, and makes tests resilient to changes in React.\\r\\n\\r\\nFor some of our tests(specifically, ReactSuspenseWithNoopRenderer-test.internal), we _don\'t_ want fallbacks to immediately trigger, because we\'re testing intermediate states and such. Added a feature flag `flushSuspenseFallbacksInTests` to disable this behaviour on a per case basis.\\r\\n\\r\\nOpen questions - \\r\\n- should react warn you if you try to suspend outside an act scope?\\r\\n","number":16240,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-29T11:24:33Z"},{"id":473886392,"title":" Error on unit test : Cannot read property \'Symbol(Symbol.iterator)\' of undefined","body":"@gaearon \\r\\ni have a component that has a useState hooks as below  :\\r\\n\\r\\n`component is so big , because of that , i just write some of the problem .`\\r\\n\\r\\n```\\r\\nfunction Login(props){\\r\\n/*...*.\\r\\n    const [, dispatch] = useLoginStateValue();\\r\\n    \\r\\nreturn(\\r\\n/*...*/\\r\\n)\\r\\n\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nand i have a test for this component\\r\\n\\r\\n```\\r\\njest.mock(\\"../../Services/login\\")\\r\\n\\r\\nit(\\"mock login request testing\\", (done) => {\\r\\n    act(() => {\\r\\n        const wrapper = mount(\\r\\n            <MuiThemeProvider theme={dark}>\\r\\n                <Login theme={{isResponsive: true}}/>\\r\\n            </MuiThemeProvider>);\\r\\n\\r\\n        wrapper.setState({email: \\"@@22WWee\\"})\\r\\n        wrapper.setState({password: \\"test@test.com\\"})\\r\\n        wrapper.find(\'button#authenticate\').simulate(\'click\');\\r\\n\\r\\n        setTimeout(() => {\\r\\n            wrapper.update();\\r\\n            wrapper.setState({alert: \\"Bad credentials\\"})\\r\\n            expect(wrapper.instance().state.alert).toEqual(\\"Bad credentials\\")\\r\\n            done()\\r\\n        })\\r\\n    })\\r\\n})\\r\\n```\\r\\n\\r\\nwhen i run test , it shows error :\\r\\n`\\r\\n    Error: Uncaught [TypeError: Cannot read property \'Symbol(Symbol.iterator)\' of undefined]\\r\\n`\\r\\n\\r\\nafter removing `    const [, dispatch] = useLoginStateValue();` everything is ok , how can i use dispatch , and LoginStateValue without error in test ?","number":16239,"user":{"login":"nimahkh"},"state":"closed","created_at":"2019-07-29T07:09:06Z"},{"id":473857730,"title":"Is it possible to excute Android native function in React loading with Android Webview","body":"For example, jsBridege or jsInterface","number":16238,"user":{"login":"YouCii"},"state":"closed","created_at":"2019-07-29T05:34:58Z"},{"id":473763022,"title":"[Feature Request] useCallback and useMemo with a single argument should behave as if an empty array was given","body":"**This is a feature request with somewhat bc breaking behaviour**\\r\\n\\r\\nCurrently, useCallback and useMemo behave like useEffect, if a single argument is given. This means, they reevaluate on every render. While this makes a lot of sense for useEffect, i can\'t see use cases, where someone would want that with useCallback or useMemo, given that it\'s intended use case is to reduce the amount of times the given function is called or result is recreated.\\r\\n\\r\\nWhile the 4 digits of unnecssary code are not that much - still unnecessary though -, i\'m guessing i\'m not the only one who would assume such a standard behaviour just to find out, it\'s not working.\\r\\n\\r\\nWhat do you think?\\r\\n","number":16237,"user":{"login":"goatfryed"},"state":"closed","created_at":"2019-07-28T16:44:05Z"},{"id":473731253,"title":"Merge pull request #1 from facebook/master","body":"1\\r\\n\\r\\n**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16236,"user":{"login":"kivamobius"},"state":"closed","created_at":"2019-07-28T10:58:31Z"},{"id":473705538,"title":"Upgrade art fixtures to babel 7","body":"Part of #12548.","number":16235,"user":{"login":"epicfaace"},"state":"open","created_at":"2019-07-28T04:56:31Z"},{"id":473705301,"title":"[Feature Request] \\"PropsProvider\\" to inject props into all child components","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nNothing\\r\\n\\r\\n**What is the expected behavior?**\\r\\nSupply a method to inject props into all children components below declaration.\\r\\n\\r\\n```jsx\\r\\nconst globalProps = {\\r\\n    everywhere: \'Hello world!\'\\r\\n}\\r\\n\\r\\nReactDOM.render(\\r\\n    <PropsProvider value={globalProps}>\\r\\n        <App />\\r\\n    </PropsProvider>\\r\\n)\\r\\n```\\r\\n\\r\\n```jsx\\r\\nconst A = ({ everywhere }) => <div>{everywhere}</div>\\r\\n\\r\\nconst App = ({ everywhere }) => <div>\\r\\n    <p>{everywhere}</p>\\r\\n    <A />\\r\\n</div>\\r\\n```\\r\\n","number":16234,"user":{"login":"alshdavid"},"state":"closed","created_at":"2019-07-28T04:52:22Z"},{"id":473704291,"title":"[Feature Request] Global Context","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nContext is explicitly defined and consumed by providers and consumers.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nGeneral purpose context which is provided by default at the root level. It could function as a container for config or application dependencies.\\r\\n\\r\\nThe syntax example below hasn\'t be heavily considered but generally illustrates the feature request.\\r\\n\\r\\n```js\\r\\nconst globalContext = {\\r\\n    value: \'something\',\\r\\n    fetchSomething: () => fetch(\'https://some.thing\')\\r\\n}\\r\\n\\r\\nReactDOM.render(<App />, element, globalContext)\\r\\n```\\r\\nThen consume it with something like\\r\\n\\r\\n```js\\r\\nconst Toolbar = () => {\\r\\n    const globalContext = useGlobalContext()\\r\\n}\\r\\n```\\r\\n","number":16233,"user":{"login":"alshdavid"},"state":"closed","created_at":"2019-07-28T04:33:00Z"},{"id":473703753,"title":"Remove outdated comment about gcc","body":"```\\r\\n          // Works because `google-closure-compiler-js` is forked in Yarn lockfile.\\t\\r\\n          // We can remove this if GCC merges my PR:\\t\\r\\n          // https://github.com/google/closure-compiler/pull/2707\\t\\r\\n          // and then the compiled version is released via `google-closure-compiler-js`.\\r\\n```\\r\\n\\r\\nIt looks like the PR mentioned in that comment was merged quite some time ago, and React is no longer using a forked version of google-closure-compiler-js.","number":16232,"user":{"login":"epicfaace"},"state":"closed","created_at":"2019-07-28T04:22:23Z"},{"id":473671966,"title":"Remove unnecessary lines for `hasBadMapPolyfill` issue for rollup","body":"The removed lines in this PR were added by @gaearon in #11745. The reason was a tree-shaking [bug][1] in the rollup.\\r\\n\\r\\nAccording to @lukastaegert, this bug has been [fixed][2] and added to rollup in [v1.14.0][3]\\r\\n\\r\\nI was not sure whether to use the rollup version `1.14.0` or to upgrade it to the latest, so I updated it the latest (`1.17.0`).\\r\\n\\r\\n**Note**: One odd observation was that I ran the test with version `0.52.1` and they all still seem to pass.\\r\\n\\r\\n[1]: https://github.com/rollup/rollup/issues/1771\\r\\n[2]: https://github.com/rollup/rollup/pull/2892\\r\\n[3]: https://github.com/rollup/rollup/releases/tag/v1.14.0","number":16231,"user":{"login":"iAziz786"},"state":"open","created_at":"2019-07-27T19:52:46Z"},{"id":473545939,"title":"[Flare] Fix SSR issue with serializing responders prop","body":"We need to ensure that we don\'t serialize the `responders` prop in the HTML output when React Flare is enabled on server-side rendering.","number":16227,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-26T21:40:03Z"},{"id":473498359,"title":"0.5 stable","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16226,"user":{"login":"jayd89550"},"state":"closed","created_at":"2019-07-26T19:13:46Z"},{"id":473450484,"title":"Help please. TypeError: _ useContext is undefined. No idea why.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nnot sure.\\r\\n\\r\\n**What is the current behavior?**\\r\\nam getting the error \\"TypeError: _ useContext is undefined\\". I have it imported and everything set up properly (I think?). please see below.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nI am trying to have an app context for the entire app. Here is the code where useContext is called:\\r\\n\\r\\n```\\r\\nimport React, { useState, useContext } from \'react\';\\r\\nimport { AppContext } from \'../contexts/AppContext\';\\r\\n\\r\\nconst Burger = (props) => {\\r\\n  const [clicked, setClicked] = useState(false);\\r\\n\\r\\n  const { toggleClicked } = useContext(AppContext);\\r\\n\\r\\n  return ( \\r\\n    <div id=\\"burger\\" data-state=\\"burger\\" onClick={toggleClicked()}>\\r\\n      <div class=\\"bar1\\"></div>\\r\\n      <div class=\\"bar2\\"></div>\\r\\n      <div class=\\"bar3\\"></div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n \\r\\nexport default Burger;\\r\\n```\\r\\n\\r\\n\\r\\nand here is the context file: \\r\\n```\\r\\nimport React, { useState, createContext } from \'react\';\\r\\n\\r\\nexport const AppContext = createContext();\\r\\n\\r\\nconst AppContextProvider = (props) => {\\r\\n  const [burgerClicked, setBurgerClicked] = useState(false);\\r\\n\\r\\n  const toggleClicked = () => {\\r\\n    setBurgerClicked(true);\\r\\n    let overlay = document.getElementsByClassName(\'overlay\');\\r\\n    if (overlay.dataset.state = \'on\') {\\r\\n      overlay.dataset.state = \'off\'\\r\\n    } else {\\r\\n      overlay.dataset.state = \'on\';\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <AppContext.Provider value={{toggleClicked, burgerClicked}}>\\r\\n      {props.children}\\r\\n    </AppContext.Provider>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default AppContextProvider;\\r\\n```\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nuseContext is defined and allows me to access context variables.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nThis is the latest version of React and Firefox. The version of React is 16.8.6. It is installed both globally and in the local directory. Any help is very much appreciated. The suggestions I\'ve gotten so far are that I\'m importing it wrong or I\'m using the wrong version, which I\'m fairly certain are both not true. This is happening in two different projects and I can\'t really get any work done until I can sort it :(","number":16225,"user":{"login":"ccapua"},"state":"closed","created_at":"2019-07-26T16:57:26Z"},{"id":473425577,"title":"TypeError: _ useContext is undefined. Very confusing.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\na bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nam getting the error \\"TypeError: _ useContext is undefined\\". I have it imported and everything set up properly (I think?). please see below.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI am trying to have an app context for the entire app. Here is the code where useContext is called:\\r\\n\\r\\n```\\r\\nimport React, { useState, useContext } from \'react\';\\r\\nimport { AppContext } from \'../contexts/AppContext\';\\r\\n\\r\\nconst Burger = (props) => {\\r\\n  const [clicked, setClicked] = useState(false);\\r\\n\\r\\n  const { toggleClicked } = useContext(AppContext);\\r\\n\\r\\n  return ( \\r\\n    <div id=\\"burger\\" data-state=\\"burger\\" onClick={toggleClicked()}>\\r\\n      <div class=\\"bar1\\"></div>\\r\\n      <div class=\\"bar2\\"></div>\\r\\n      <div class=\\"bar3\\"></div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n \\r\\nexport default Burger;\\r\\n```\\r\\n\\r\\n\\r\\nand here is the context file: \\r\\n```\\r\\nimport React, { useState, createContext } from \'react\';\\r\\n\\r\\nexport const AppContext = createContext();\\r\\n\\r\\nconst AppContextProvider = (props) => {\\r\\n  const [burgerClicked, setBurgerClicked] = useState(false);\\r\\n\\r\\n  const toggleClicked = () => {\\r\\n    setBurgerClicked(true);\\r\\n    let overlay = document.getElementsByClassName(\'overlay\');\\r\\n    if (overlay.dataset.state = \'on\') {\\r\\n      overlay.dataset.state = \'off\'\\r\\n    } else {\\r\\n      overlay.dataset.state = \'on\';\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <AppContext.Provider value={{toggleClicked, burgerClicked}}>\\r\\n      {props.children}\\r\\n    </AppContext.Provider>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default AppContextProvider;\\r\\n```\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nuseContext is defined and allows me to access context variables.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThis is the latest version of React and Firefox.","number":16224,"user":{"login":"ccapua"},"state":"closed","created_at":"2019-07-26T15:52:23Z"},{"id":473384619,"title":"[act] flush work correctly without a mocked scheduler","body":"Not returning the value of flushPassiveEffects() in flushWork() meant that with async act, we wouldn\'t flush all work with cascading effects. This PR fixes that oversight, and adds some tests to catch this in the future.\\r\\n","number":16223,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-26T14:23:09Z"},{"id":473366846,"title":"Unclear error message for invalid member-components","body":"If you try to use a component which does not exist:\\r\\n\\r\\n```\\r\\n<Foo />\\r\\n```\\r\\n\\r\\nYou would get this real nice and clear compilation error:\\r\\n\\r\\n```\\r\\n./src/components/pages/ProfilePage.js\\r\\n  Line 547:  \'Foo\' is not defined  react/jsx-no-undef\\r\\n\\r\\nSearch for the keywords to learn more about each error.\\r\\n```\\r\\n\\r\\nHowever, if you try to use a member-component (I\'m not sure how they are actually called) which does not exist:\\r\\n\\r\\n```\\r\\n<Button.Foo />\\r\\n```\\r\\n\\r\\nYou get this huge mess:\\r\\n\\r\\n```\\r\\nElement type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it\'s defined in, or you might have mixed up default and named imports.\\r\\n\\r\\nCheck the render method of `ProfilePage`.\\r\\n```\\r\\n\\r\\nEven though it does hint there might be something wrong in the `ProfilePage` render method, we tend to look at the stack-trace first which is completely useless in this case, starting with:\\r\\n\\r\\n```\\r\\n 4 | import App from \\"./App\\";\\r\\n   5 | import registerServiceWorker from \\"./registerServiceWorker\\";\\r\\n   6 | \\r\\n>  7 | ReactDOM.render(\\r\\n   8 |     <BrowserRouter>\\r\\n   9 |         <App />\\r\\n  10 |     </BrowserRouter>,\\r\\n```\\r\\n\\r\\nI ran into this problem, when I tried to use React-Bootstrap\'s `Alert.Heading` component, but accidentally wrote `Alert.Title`. I went over pretty much all of my changes several times and missed it every time. Took me several hours to find the mistake. Same thing could happen if you simply mistype an element name like `Alert.Headign`.\\r\\n\\r\\nI suggest generating an error message with more information in this case. For example you could add the line:\\r\\n\\r\\n```\\r\\nButton.Foo is not defined\\r\\n```\\r\\n\\r\\nsomewhere in the error message.","number":16222,"user":{"login":"anddero"},"state":"closed","created_at":"2019-07-26T13:46:19Z"},{"id":473327349,"title":"[Feature Request] Allow custom compare function on hooks.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact performs a Shallow Compare on depenedencies for avoid unnecesary calls.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nShallow Compare is ok for plain values. For object it uses reference values and this may cause hook execution when maybe you don\'t want to.\\r\\n\\r\\nMy concrete use case is: im using ClojureScript immutable data structures that I want to be able to pass as dependency to a Hook and prevent execute the useEffect (as example) if the passed dependency is the same as previous one. With shallow  compare two identical objects will have different reference values that will make execute again the useEffect (with the corresponding cleanup) when I really don\'t want. \\r\\n\\r\\nI think that a good solution for this is provide the ability to pass a custom compare function to hooks (in the same way as `React.memo`).\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8.6\\r\\n","number":16221,"user":{"login":"niwinz"},"state":"open","created_at":"2019-07-26T12:09:48Z"},{"id":473270051,"title":"Server side sorting on a column : ReactJS","body":"I am trying to implement sorting where the sorting on the server side happens by taking the column name and the type of sort(asc or des). \\r\\n\\r\\nI am maintaining a component for a data table where-in I attach a click handler that basically should give the field name that I click and the type of sorting. I can hardcode the fieldnam, But how will I map each column with  type of sorting. \\r\\n\\r\\nI just need the name of the field and type to be sent to the backend, then it will give me sorted results. How will I map corresponding column names with either asc/desc\\r\\n\\r\\nCan someone help me with this?\\r\\n\\r\\nSandbox: https://codesandbox.io/s/misty-water-iutxl\\r\\n\\r\\n`````````````````````````\\r\\nimport * as React from \\"react\\";\\r\\nimport ReactTable from \\"react-table\\";\\r\\nimport \\"react-table/react-table.css\\";\\r\\nimport Child from \\"./Child\\";\\r\\ninterface IState {\\r\\n  data: {}[];\\r\\n  columns: {}[];\\r\\n  selectedValues: {};\\r\\n}\\r\\n\\r\\ninterface IProps {}\\r\\n\\r\\nexport default class App extends React.Component<IProps, IState> {\\r\\n  \\r\\n  constructor(props: any) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: [],\\r\\n      columns: [],\\r\\n    };\\r\\n  }\\r\\n\\r\\n  componentDidMount()\\r\\n  {\\r\\n    this.getColumnFilterValues();\\r\\n    this.getData();\\r\\n  }\\r\\n\\r\\n  getData = () =>{\\r\\n    let data = [\\r\\n        { firstName: \\"Jack\\", status: \\"Submitted\\", age: \\"14\\" },\\r\\n        { firstName: \\"Simon\\", status: \\"Pending\\", age: \\"15\\" },\\r\\n        { firstName: \\"Pete\\", status: \\"Approved\\", age: \\"17\\" }\\r\\n      ];\\r\\n      this.setState({data},()=> this.getColumns());\\r\\n  }\\r\\n\\r\\n  getColumnFilterValues = () =>{\\r\\n    let optionsForColumns = {\\r\\n        firstName: [\\r\\n          { Jack: \\"4\\", checked: false },\\r\\n          { Simon: \\"5\\", checked: false },\\r\\n          { Pete: \\"10\\", checked: false }\\r\\n        ],\\r\\n        status: [\\r\\n          { Submitted: \\"5\\", checked: false },\\r\\n          { Pending: \\"7\\", checked: false },\\r\\n          { Approved: \\"15\\", checked: false }\\r\\n        ]\\r\\n      }\\r\\n      this.setState({optionsForColumns});\\r\\n  }\\r\\n\\r\\n  sortHandler = (name) =>{\\r\\n     //Sort Handler, here I have to pass the field name and type of sorting\\r\\n  }\\r\\n\\r\\n  getColumns = () =>{\\r\\n    let columns = [\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div style={{ position: \\"absolute\\", marginLeft: \\"10px\\" }}>\\r\\n              <Child\\r\\n                key=\\"firstName\\"\\r\\n                name=\\"firstName\\"\\r\\n                options={this.getValuesFromKey(\\"firstName\\")}\\r\\n                handleFilter={this.handleFilter}\\r\\n              />\\r\\n            </div>\\r\\n            <span onClick={()=>this.sortHandler(\\"firstName\\")}>First Name</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"firstName\\",\\r\\n        sortable: false,\\r\\n        show: true,\\r\\n        displayValue: \\" First Name\\"\\r\\n      },\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div style={{ position: \\"absolute\\", marginLeft: \\"10px\\" }}>\\r\\n              <Child\\r\\n                key=\\"status\\"\\r\\n                name=\\"status\\"\\r\\n                options={this.getValuesFromKey(\\"status\\")}\\r\\n                handleFilter={this.handleFilter}\\r\\n              />\\r\\n            </div>\\r\\n            <span onClick={()=>this.sortHandler(\\"status\\")}>Status</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"status\\",\\r\\n        sortable: false\\r\\n      },\\r\\n      {\\r\\n        Header: () =>(\\r\\n          <span onClick={this.sort}>Age</span>\\r\\n        ),\\r\\n        accessor: \\"age\\"\\r\\n      }\\r\\n    ];\\r\\n    this.setState({ columns });\\r\\n  }\\r\\n  \\r\\n  //Rendering the data table\\r\\n  render() {\\r\\n    const { data, columns } = this.state;\\r\\n    return (\\r\\n      <div>\\r\\n        <ReactTable\\r\\n          data={data}\\r\\n          columns={columns}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n","number":16220,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-26T09:39:08Z"},{"id":473247923,"title":"more than more useState\uff0chow to get the values","body":"When using more than one useState, the response from the API contains more than one variable defined in the useState. How can we assign all states like this. setState ({... response}) to all states? If there are more than 10 useStates, this would be a waste of time.\\r\\nfor Example\uff1a\\r\\n\\r\\n const [quickDate,setQuickDate] = useState( \'9\');\\r\\n  const [from,setFrom] = useState( getDateTime(getLastYear3Days()[0]));\\r\\n  const [to,setTo] = useState(getDateTime(getLastYear3Days()[1]));\\r\\n  const [index,setIndex] = useState(\'\');\\r\\n  const [chargeState,setChargeState] = useState(0);\\r\\n  const [vin,setVin] = useState(\'\');\\r\\n  const [vinStar,setVinStar] = useState(\'\');\\r\\n  const [duration,setDuration] = useState(\'\');\\r\\n  const [analysisType,setAnalysisType] = useState(\'single\');\\r\\n  const [chartType,setChartType] = useState(\'bar\');\\r\\n  const [selectColumns,setSelectColumns] = useState([]);\\r\\n  const [groupByColumns,setGroupByColumns] = useState([]);\\r\\n  const [rightBlock,setRightBlock] = useState([]);\\r\\n  const [dslFilters,setDslFilters] = useState([]);\\r\\n  const [dslFilterCombiner,setDslFilterCombiner] = useState(\'must\');\\r\\n  const [dsl,setDsl] = useState(\'\');\\r\\n  const [vinFilterVisible,setVinFilterVisible] = useState(false);\\r\\n  const [mySearch,setMySearch] = useState(null);\\r\\n\\r\\n const mySearchInit = (searchId)=>{\\r\\n    dispatch({\\r\\n      type: \'common/fetchMySearchById\',\\r\\n      payload: { id: searchId },\\r\\n      callback: (response) => {\\r\\n        let newState = JSON.parse(response.condition);\\r\\n        initVlaue(newState,response);\\r\\n        previewChart(newState);\\r\\n        mountInit(newState);\\r\\n      },\\r\\n    });\\r\\n  }\\r\\n  const initVlaue = (newState,response)=>{\\r\\n    setAnalysisType(newState.analysisType);\\r\\n    setChargeState(newState.chargeState);\\r\\n    setChartType(newState.chartType);\\r\\n    setDsl(newState.dsl);\\r\\n    setDslFilterCombiner(newState.dslFilterCombiner);\\r\\n    setDslFilters(newState.dslFilters);\\r\\n    setDuration(newState.duration);\\r\\n    setFrom(newState.from);\\r\\n    setGroupByColumns(newState.groupByColumns);\\r\\n    setIndex(newState.index);\\r\\n    setQuickDate(newState.quickDate);\\r\\n    setRightBlock(newState.rightBlock);\\r\\n    setSelectColumns(newState.selectColumns);\\r\\n    setTo(newState.to);\\r\\n    setVin(newState.vin);\\r\\n    setVinFilterVisible(newState.vinFilterVisible);\\r\\n    setVinStar(newState.vinStar);\\r\\n    setMySearch(response);\\r\\n  }\\r\\n\\r\\nhow to do ??","number":16219,"user":{"login":"MaoGirlsQueen"},"state":"closed","created_at":"2019-07-26T08:47:18Z"},{"id":473178243,"title":"Renderer specific act warning","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16218,"user":{"login":"ops7766"},"state":"closed","created_at":"2019-07-26T05:02:49Z"},{"id":473146809,"title":"Warn when Using String Refs","body":"As part of the process to deprecate string refs (as per a larger proposal outlined [here](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md)), expand string ref warning to fire for everyone who uses string refs (not just people on strict mode) to notify them of planned deprecation changes.","number":16217,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-07-26T02:27:58Z"},{"id":473140500,"title":"Update use-subscription README","body":"It was a little confusing that the question asked when NOT to use this package, then the answer says when to use it. I think this is a little better.\\r\\n","number":16216,"user":{"login":"sophiebits"},"state":"closed","created_at":"2019-07-26T01:57:16Z"},{"id":473128227,"title":"[Bugfix] Check tag before calling hook effects","body":"Adds a missing tag check before calling passive effects.\\r\\n\\r\\nThe reason we didn\'t catch this earlier is because it happens to accidentally work even without the check in most cases.\\r\\n\\r\\nI added a regression test but it\'s very specific and weird and you should feel free to delete it later if the implementation details change and it causes you problems. I split this into the first commit to show that the test fails.\\r\\n\\r\\nThe second commit adds the tag check, to show that it fixes the test.","number":16215,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-26T00:52:15Z"},{"id":473116800,"title":"[scheduler] Yield many times per frame, no rAF","body":"Adds experimental flag to yield many times per frame using a message event loop, instead of the current approach of guessing the next vsync and yielding at the end of the frame.\\r\\n\\r\\nThis new approach forgoes a `requestAnimationFrame` entirely. It posts a message event and performs a small amount of work (5ms) before yielding to the browser, regardless of where it might be in the vsync cycle. At the end of the event, if there\'s work left over, it posts another message event.\\r\\n\\r\\nThis should keep the main thread responsive even for really high frame rates. It also shouldn\'t matter if the hardware frame rate changes after page load (our current heuristic only detects if the frame rate increases, not decreases).\\r\\n\\r\\nThe main risk is that yielding more often will exacerbate main thread contention with other browser tasks.\\r\\n\\r\\nI\'m also not sure to what extent message events are throttled when the tab is backgrounded, relative to `requestAnimationFrame` or `setTimeout`. I\'m starting with the assumption that `message` events fire with at least the same priority as timers, but I\'ll need to confirm.\\r\\n\\r\\nLet\'s try it and see.","number":16214,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-25T23:54:22Z"},{"id":473109684,"title":"when using useReducer\'s dispatch how to ensure order of execution?","body":"When using setState() I have the option of adding a callback once it\'s certain the state has been updated. When using useReducer\'s dispatch, what do I do for that? \\r\\n\\r\\nI have a use case right now where I need to queue dispatches in order and it is misbehaving and I have no callback, or promise or any other way to ensure the order that I can see...","number":16213,"user":{"login":"mgenev"},"state":"closed","created_at":"2019-07-25T23:21:08Z"},{"id":473066113,"title":"Optimize objectIs","body":"Native Object.is implementation is much faster than polyfill.\\r\\n\\r\\n~~https://jsperf.com/object-is-vs-polyfill/1~~\\r\\n\\r\\nhttps://jsperf.com/object-is-vs-polyfill-better/1\\r\\n\\r\\n![Zrzut ekranu 2019-07-25 o 22 43 15](https://user-images.githubusercontent.com/16975059/61908076-2cb69e00-af2f-11e9-94ba-328c19e44c04.png)\\r\\n","number":16212,"user":{"login":"ku8ar"},"state":"closed","created_at":"2019-07-25T20:55:03Z"},{"id":473045807,"title":"TypeError: Assignment to constant variable.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\n\\r\\nTypeError: Assignment to constant variable.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/102806/61904769-1be53880-aeed-11e9-81f9-9479e40490b5.png)\\r\\n\\r\\nSystem: OSX\\r\\nnpm: 6.10.2\\r\\nnode: v10.13.0\\r\\nreact: 16.8.6\\r\\n","number":16211,"user":{"login":"lidaof"},"state":"closed","created_at":"2019-07-25T20:03:11Z"},{"id":472989018,"title":"Warn when Using DefaultProps on Function Components","body":"As part of the process to deprecate defaultProps on function components (as per a larger proposal outlined [here](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md)), add a warning whenever someone does this.","number":16210,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-07-25T17:41:17Z"},{"id":472980336,"title":"Renamed React.Profiler to React.SubtreeProfiler","body":"# Suggestion: Do not merge\\r\\n\\r\\n### Backstory\\r\\n\\r\\nWe currently have two \\"profilers\\" - DevTools visual Profiler (similar to the browser\'s built in profiler) and `React.Profiler`. It\'s easy to confuse these two, especially since the DevTools Profiler makes use of the profiling API code. It seems like the profiler API could have a better name though.\\r\\nThe current two use cases it serves:\\r\\n\\r\\n1. Count the number of times a subtree commits (in DEV or PROD).\\r\\n2. Record the time spent a subtree (in PROD).\\r\\n\\r\\nUnfortunately the second metric (time spent) isn\'t all that useful in Concurrent/Batched modes because we reset counters in the case of interruptions or suspends (depending on where the `<React.Profiler>` node is relative to the nearest boundary).\\r\\n\\r\\nIt seems likely that a new API (#15727) may better serve the needs of complex apps using these new APIs. So far as I know, the new events would not be coupled with the `<React.Profiler>` API but would be exposed via something new.\\r\\n\\r\\n### Conclusion\\r\\n\\r\\nGiven this, we discussed potential new names on the team and the one that had the most support was `SubtreeProfiler`.\\r\\n\\r\\nHowever, after looking closer at what would be involved in this rename- I am no longer sure it\'s worth the effort, given all of the places we would need to change:\\r\\n\\r\\n* We have already released a stable version of `react-is` with `Profiler` and `isProfiler` exports, so we\'ll need to keep those around until v17.\\r\\n* This also impacts DevTools since it would have to continue to support the old `Symbol.for(\'react.profiler\')`.\\r\\n\\r\\n### Overall, I like this name _better_ but I\'m not convinced that it\'s _enough better_ to warrant the hassle. So here is a rename PR, but I think my vote would be to just pass on it at this point.","number":16209,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-07-25T17:19:03Z"},{"id":472971209,"title":"ReactCSSTransitionGroup deletes elements from DOM after animation","body":"ReactCSSTransitionGroup deletes elements from DOM after animation. I don\'t know why.\\r\\n\\r\\nThis is my component\\r\\n\\r\\n```\\r\\n`import React from \'react\';\\r\\nimport ReactCSSTransitionGroup from \'react-addons-css-transition-group\';\\r\\n\\r\\nimport WorkItem from \'../WorkItem\';\\r\\n\\r\\nclass PortfolioSectionPanel extends React.Component {\\r\\n\\r\\n    constructor() {\\r\\n        super();\\r\\n\\r\\n        this.state = {\\r\\n            showWorks: false,\\r\\n            works: [\\r\\n                {\\r\\n                    type: \'\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430\',\\r\\n                    link: \'some\',\\r\\n                },\\r\\n                {\\r\\n                    type: \'\u041f\u0440\u043e\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\',\\r\\n                    link: \'some1\',\\r\\n                },\\r\\n                {\\r\\n                    type: \'\u0421\u043a\u0440\u0438\u043f\u0442\u0438\u043d\u0433\',\\r\\n                    link: \'some\',\\r\\n                },\\r\\n                {\\r\\n                    type: \'\u0412\u0435\u0431-\u0434\u0438\u0437\u0430\u0439\u043d\',\\r\\n                    link: \'some1\',\\r\\n                },\\r\\n                {\\r\\n                    type: \'\u041a\u043e\u043f\u0438\u0440\u0430\u0439\u0442\u0438\u043d\u0433\',\\r\\n                    link: \'some\',\\r\\n                }\\r\\n            ]\\r\\n        }\\r\\n\\r\\n        this.showWorks = () => {\\r\\n            this.setState({\\r\\n                showWorks: !this.state.showWorks,\\r\\n            })\\r\\n        }\\r\\n\\r\\n    }\\r\\n    \\r\\n    render() {\\r\\n\\r\\n        let workItems;\\r\\n\\r\\n        if(this.state.showWorks) {\\r\\n            let {works} = this.state;\\r\\n\\r\\n            const angleRad = 360 / works.length * 0.017; //\u0427\u0430\u0441\u0442\u043e\u0442\u0430 \u043a\u0440\u0443\u0433\u043e\u0432 \u0432 \u0440\u0430\u0434\u0438\u0430\u043d\u0430\u0445\\r\\n            const bg = document.getElementById(\'portfolio-panel-disk\');\\r\\n            let radius;\\r\\n            if(bg) {\\r\\n                radius = parseInt(getComputedStyle(bg).width) / 2;\\r\\n            }\\r\\n\\r\\n            workItems = works.map((currentValue, index) => {\\r\\n                return <WorkItem \\r\\n                        type={currentValue.type} \\r\\n                        link={currentValue.link} \\r\\n                        key={index + 50} \\r\\n                        leftOffset={radius - radius * Math.cos(angleRad * index)}\\r\\n                        topOffset={radius - radius * Math.sin(angleRad * index)}  />\\r\\n            })\\r\\n        } else {\\r\\n            workItems = null;\\r\\n        }\\r\\n   \\r\\n        return(\\r\\n\\r\\n            <div className=\'portfolio-panel\' id=\'porfolioPanel\' ref={this.props.link}>\\r\\n                <div className=\'portfolio-panel-background\' ref={this.props.linkCircle} onTransitionEnd={this.showWorks} >\\r\\n                    <div className=\'portfolio-panel-disk\' id=\'portfolio-panel-disk\'>\\r\\n                        <ReactCSSTransitionGroup\\r\\n                        transitionName=\'work-item\'\\r\\n                        transitionEnterTimeout={500}\\r\\n                        transitionLeaveTimeout={500}>\\r\\n                            {workItems}\\r\\n                        </ReactCSSTransitionGroup>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n    \\r\\n\\r\\nexport default PortfolioSectionPanel;`\\r\\n```\\r\\n\\r\\nLess that I using:\\r\\n\\r\\n```\\r\\n`.work-item {\\r\\n    width: 400px;\\r\\n    height: 400px;\\r\\n    background-color: @maxColor;\\r\\n    transform:translate(-50%, -50%);\\r\\n    position: absolute;\\r\\n    border-radius: 50%;\\r\\n    color: @whiteColor;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    text-decoration: none;\\r\\n\\r\\n    &__type {\\r\\n        font-size: 1.6rem;\\r\\n        text-transform: uppercase;\\r\\n    }\\r\\n\\r\\n    &-enter {\\r\\n        opacity: 0;\\r\\n        transition: .5s;\\r\\n    }\\r\\n\\r\\n    &-enter-active {\\r\\n        opacity: 1;\\r\\n    }\\r\\n\\r\\n    &-leave {\\r\\n        opacity: 1;\\r\\n        transition: .5s;\\r\\n    }\\r\\n\\r\\n    &-leave-active {\\r\\n        opacity: 0;\\r\\n    }\\r\\n}`\\r\\n```\\r\\n\\r\\nVideo with my proplem: https://wmpics.pics/di-EUJC.gif","number":16208,"user":{"login":"uzinouzi"},"state":"closed","created_at":"2019-07-25T16:55:37Z"},{"id":472955305,"title":"Warn when rendering tests in concurrent/sync mode without a mocked scheduler","body":"Concurrent/Sync mode tests should always be run with a mocked scheduler (v17 or not). This PR adds a warning for the same. I\'ll put up a separate PR to the docs with a page detailing how to mock the scheduler.\\r\\n","number":16207,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-25T16:17:04Z"},{"id":472933320,"title":"[Flare] Remove references to EventComponent","body":"Event Components were removed from the codebase with the new event system design \u2013 this renames cases which I missed and removes dangling cases that are not used.","number":16206,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-25T15:31:47Z"},{"id":472917369,"title":"[Flare] Adds useListener implementation to ReactDebugHooks","body":"This adds the implementation of `useListener` to `ReactDebugHooks`.","number":16205,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-25T15:01:44Z"},{"id":472834358,"title":"[Flare] Adds Keyboard event responder","body":"This adds the Keyboard event responder. It\'s mostly just a pass-through of `keyDown` and `keyUp`, with polyfills and normalization for browsers that don\'t fully support the right `event.key` value.","number":16204,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-25T12:21:47Z"},{"id":472822447,"title":"After redirecting React is re rendered and send back to the cached login IE11","body":"I\'am struggling to find a quick solution to my problem , because clients are complaining about that the Site cannot be rendered on the IE . I have done a little research and i came across this `react-app-polyfill/ie11` .\\r\\nI have insert it as an entry point on mine `src/index.js` It have worked i saw my project ( only the login tho ) working on IE 11 , but after the login it is redirected again back to the login page . The error that IE throws back is :\\r\\n`DOM7011 : The code on this page disabled back and forward caching.`\\r\\n`Unhandled promise rejection TypeError: Unable to get property \'data\' of undefined or null reference`\\r\\n\\r\\nAfter a while i came also across this :\\r\\nhttps://reactjs.org/docs/javascript-environment-requirements.html\\r\\n\\r\\nThe new JavaScript Environment Requirements . Bassicly they suggest to enable as an entry point on your `index.js` this\\r\\n`import \'core-js/es/map\'; import \'core-js/es/set\';`\\r\\n\\r\\nSo far i have no clue what is going on , but still the app is not running properly on IE . Can somebody give me some advice what to do ?\\r\\n\\r\\n**UPDATED**\\r\\nLogin.js\\r\\n\\r\\n```jsx\\r\\nexport default class Login extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      translations: EN_TRANSLATIONS,\\r\\n      clientNumber: \\"\\",\\r\\n      password: \\"\\",\\r\\n      redirectToReferrer: \\"\\",\\r\\n      loginErrorMessage: \\"\\",\\r\\n      lockedUntilDate: \\"\\"\\r\\n    };\\r\\n  }\\r\\n\\r\\n  async componentWillMount() {\\r\\n    let tenant = window.location.hostname;\\r\\n\\r\\n    axios\\r\\n      .post(SERVER_URL + \\"/api/user/page\\", {\\r\\n        tenant: tenant\\r\\n      })\\r\\n\\r\\n      .then(response => {\\r\\n        localStorage.setItem(\\"page\\", JSON.stringify(response.data.branding));\\r\\n        localStorage.setItem(\\"tenant\\", tenant);\\r\\n\\r\\n        this.setState({\\r\\n          branding: response.data.branding,\\r\\n          tenant: tenant,\\r\\n          pageReady: true\\r\\n        });\\r\\n      });\\r\\n  }\\r\\n\\r\\n  login = () => {\\r\\n    axios\\r\\n      .post(SERVER_URL + \\"/api/user/access\\", {\\r\\n        tenant: this.state.tenant,\\r\\n        customerNumber: parseInt(this.state.clientNumber),\\r\\n        password: sha1(this.state.password + FE_SALT)\\r\\n      })\\r\\n      .then(response => {\\r\\n        localStorage.setItem(\\"token\\", response.data.token);\\r\\n        localStorage.setItem(\\"access\\", JSON.stringify(response.data.branding));\\r\\n\\r\\n        this.setState({\\r\\n          branding: response.data.branding,\\r\\n          accessReady: true\\r\\n        });\\r\\n\\r\\n        if (this.state.accessReady) {\\r\\n          if (response.data.passwordValidity >= 0) {\\r\\n            Auth.authenticate(response => {\\r\\n              this.setState({ redirectToReferrer: \\"dashboard\\" });\\r\\n            });\\r\\n          } else {\\r\\n            Auth.authenticate(response => {\\r\\n              this.setState({ redirectToReferrer: \\"changePassword\\" });\\r\\n            });\\r\\n          }\\r\\n        }\\r\\n      });\\r\\n  };\\r\\n\\r\\n  handleSubmit = event => {\\r\\n    event.preventDefault();\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      redirectToReferrer,\\r\\n      translations,\\r\\n      notValidTenant,\\r\\n      branding\\r\\n    } = this.state;\\r\\n    if (redirectToReferrer === \\"dashboard\\") {\\r\\n      return (\\r\\n        <Switch>\\r\\n          <Route\\r\\n            render={() => <Redirect to={`/dashboard/${Auth.customerId}`} />}\\r\\n          />\\r\\n        </Switch>\\r\\n      );\\r\\n    } else if (redirectToReferrer === \\"changePassword\\") {\\r\\n      return (\\r\\n        <Switch>\\r\\n          <Route\\r\\n            render={() => (\\r\\n              <Redirect to={`/change_password/${Auth.customerId}`} />\\r\\n            )}\\r\\n          />\\r\\n        </Switch>\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nindex.js\\r\\n\\r\\n```jsx\\r\\nimport \\"react-app-polyfill/ie9\\";\\r\\nimport \\"react-app-polyfill/ie11\\";\\r\\nimport \\"react-app-polyfill/jsdom\\";\\r\\n\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\nimport App from \\"./App\\";\\r\\nimport { BrowserRouter } from \\"react-router-dom\\";\\r\\n\\r\\nReactDOM.render(\\r\\n  <BrowserRouter>\\r\\n    <App />\\r\\n  </BrowserRouter>,\\r\\n  document.getElementById(\\"root\\")\\r\\n);\\r\\n```\\r\\n\\r\\nAlso i marked that i cannot import `\'react-app-polyfill/stable\'` i think this should work , but i am not sure .\\r\\n\\r\\n**UPDATE**\\r\\nI have deleted the `node_modules` and installed again `react-app-polyfill` . Now the `\'react-app-polyfill/stable\'` is recognized , but i ran into another error .\\r\\n`SCRIPT438: Object doesn\'t support property or method \'repeat\'` ... This IE is making me crazy ...\\r\\n\\r\\n**UPDATE**\\r\\nOkey so i was able to delete my private routes and make every route after the login visible `<Route/>` . If i hardcode the URL path and disable the security i can get access to my dashboard page . So that gives me thinking that the problem is coming from the `<Redirect/>` component . Because he is the only one standing between the login and the dashboard . Any suggestion why is this conflict between `IE` and `<Redirect/>` ???\\r\\n","number":16203,"user":{"login":"gmumdzhiev"},"state":"closed","created_at":"2019-07-25T11:52:51Z"},{"id":472819023,"title":"Problem in managing child component\'s state as a result the child\'s state will be set to initial value everytime : React JS","body":"Trying to implement a dropdown component (Child component) that has a list of checkboxes whose values are sent to the parent after an Apply button.\\r\\n\\r\\nThe values for this checkboxes are being sent from the parent and these are obtained from a backend server. I am having a table to which this component is attached to , like across multiple columns. Based on selected values, I make a server call that gives me filtered data.\\r\\n\\r\\nI am unable to maintain the checkboxes state, as a result after the filteration the values of the checkboxes is lost. \\r\\n\\r\\nI am maintaining a local state inside child component for these  options . But still the checkboxes are getting reset to initial value after the filtered data comes in.\\r\\n\\r\\nI am maintaining a state something similar to this :\\r\\n\\r\\n\\r\\n```tsx\\r\\n\\r\\n//data :data for the table from server\\r\\n//selectedValues: the data that i receive from the child\\r\\n//columns: column configuration \\r\\n//optionsForColumns: these are the options for based on which checkboxes values are defined with the format {columnName:[values:count]}\\r\\n \\r\\nthis.state = {\\r\\n      data: [ \\r\\n               { firstName: \\"Jack\\", status: \\"Submitted\\", age: \\"14\\" },\\r\\n               { firstName: \\"Simon\\", status: \\"Pending\\", age: \\"15\\" }\\r\\n            ],\\r\\n      selectedValues: {},\\r\\n      columns: [], \\r\\n      optionsForColumns:  { \\r\\n                             firstName: [{ Jack: \\"4\\" }, { Simon: \\"5\\" }],      \\r\\n                             status: [{ Submitted: \\"5\\" }, { Pending: \\"7\\" }]\\r\\n                          }\\r\\n };\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\nI have not added the server code here, but I have maintained Child component as a controlled one, but still the checkboxes values are reset.\\r\\n\\r\\nNot able to understand why?\\r\\n\\r\\nSand box: https://codesandbox.io/s/nervous-elgamal-0zztb\\r\\n\\r\\nI have added the sandbox link with proper comments. Please have a look. I am a bit new to react.\\r\\n\\r\\nHelp would be really appreciated\\r\\n\\r\\nParent\\r\\n--------\\r\\n```tsx\\r\\nimport * as React from \\"react\\";\\r\\nimport { render } from \\"react-dom\\";\\r\\nimport ReactTable from \\"react-table\\";\\r\\nimport \\"./styles.css\\";\\r\\nimport \\"react-table/react-table.css\\";\\r\\nimport Child from \\"./Child\\";\\r\\ninterface IState {\\r\\n  data: {}[];\\r\\n  columns: {}[];\\r\\n  selectedValues: {};\\r\\n  optionsForColumns: {};\\r\\n}\\r\\n\\r\\ninterface IProps {}\\r\\n\\r\\nexport default class App extends React.Component<IProps, IState> {\\r\\n\\r\\n  // Here I have  hardcoded the values, but data and optionsForColumns comes from the backend and it is set inside componentDidMount\\r\\n  constructor(props: any) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: [\\r\\n        { firstName: \\"Jack\\", status: \\"Submitted\\", age: \\"14\\" },\\r\\n        { firstName: \\"Simon\\", status: \\"Pending\\", age: \\"15\\" }\\r\\n      ],\\r\\n      selectedValues: {},\\r\\n      columns: [],\\r\\n      optionsForColumns: {\\r\\n        firstName: [{ Jack: \\"4\\" }, { Simon: \\"5\\" }],\\r\\n        status: [{ Submitted: \\"5\\" }, { Pending: \\"7\\" }]\\r\\n      }\\r\\n    };\\r\\n  }\\r\\n\\r\\n  // Get the values for checkboxes that will be sent to child\\r\\n  getValuesFromKey = (key: any) => {\\r\\n    let data: any = this.state.optionsForColumns[key];\\r\\n    let result = data.map((value: any) => {\\r\\n      let keys = Object.keys(value);\\r\\n      return {\\r\\n        field: keys[0],\\r\\n        checked: false\\r\\n      };\\r\\n    });\\r\\n    return result;\\r\\n  };\\r\\n\\r\\n  // Get the consolidated values from child and then pass it for server side filtering\\r\\n  handleFilter = (fieldName: any, selectedValue: any, modifiedObj: any) => \\r\\n  {\\r\\n    this.setState(\\r\\n      {\\r\\n        selectedValues: {\\r\\n          ...this.state.selectedValues,\\r\\n          [fieldName]: selectedValue\\r\\n        }\\r\\n      },\\r\\n      () => this.handleColumnFilter(this.state.selectedValues)\\r\\n    );\\r\\n  };\\r\\n\\r\\n  // Function that will make server call based on the checked values from child\\r\\n  handleColumnFilter = (values: any) => {\\r\\n    // server side code for filtering\\r\\n    // After this checkbox content is lost\\r\\n  };\\r\\n\\r\\n  // Function where I configure the columns array for the table . (Also data and column fiter values will be set here, in this case I have hardcoded inside constructor)\\r\\n  componentDidMount() {\\r\\n    let columns = [\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div>\\r\\n              <Child\\r\\n                key=\\"firstName\\"\\r\\n                name=\\"firstName\\"\\r\\n                options={this.getValuesFromKey(\\"firstName\\")}\\r\\n                handleFilter={this.handleFilter}\\r\\n              />\\r\\n            </div>\\r\\n            <span>First Name</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"firstName\\"\\r\\n      },\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div>\\r\\n              <Child\\r\\n                key=\\"status\\"\\r\\n                name=\\"status\\"\\r\\n                options={this.getValuesFromKey(\\"status\\")}\\r\\n                handleFilter={this.handleFilter}\\r\\n              />\\r\\n            </div>\\r\\n            <span>Status</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"status\\",\\r\\n      },\\r\\n      {\\r\\n        Header: \\"Age\\",\\r\\n        accessor: \\"age\\"\\r\\n      }\\r\\n    ];\\r\\n    this.setState({ columns });\\r\\n  }\\r\\n\\r\\n  //Rendering the data table\\r\\n  render() {\\r\\n    const { data, columns } = this.state;\\r\\n    return (\\r\\n      <div>\\r\\n        <ReactTable\\r\\n          data={data}\\r\\n          columns={columns}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nrender(<App />, rootElement);\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\nChild\\r\\n------------\\r\\n\\r\\n```jsx\\r\\n\\r\\nimport * as React from \\"react\\";\\r\\nimport { Button, Checkbox, Icon } from \\"semantic-ui-react\\";\\r\\ninterface IProps {\\r\\n  options: any;\\r\\n  name: string;\\r\\n  handleFilter(val1: any, val2: any, val3: void): void;\\r\\n}\\r\\ninterface IState {\\r\\n  showList: boolean;\\r\\n  selected: [];\\r\\n  checkboxOptions: any;\\r\\n}\\r\\nexport default class Child extends React.Component<IProps, IState> {\\r\\n  constructor(props: any) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      selected: [],\\r\\n      showList: false,\\r\\n      checkboxOptions: this.props.options.map((option: any) => option.checked)\\r\\n    };\\r\\n  }\\r\\n\\r\\n  // Checkbox change handler\\r\\n  handleValueChange = (event: React.FormEvent<HTMLInputElement>, data: any) => {\\r\\n    const i = this.props.options.findIndex(\\r\\n      (item: any) => item.field === data.name\\r\\n    );\\r\\n    const optionsArr = this.state.checkboxOptions.map(\\r\\n      (prevState: any, si: any) => (si === i ? !prevState : prevState)\\r\\n    );\\r\\n    this.setState({ checkboxOptions: optionsArr });\\r\\n  };\\r\\n\\r\\n  //Passing the checked values back to parent\\r\\n  passSelectionToParent = (event: any) => {\\r\\n    event.preventDefault();\\r\\n    const result = this.props.options.map((item: any, i: any) =>\\r\\n      Object.assign({}, item, {\\r\\n        checked: this.state.checkboxOptions[i]\\r\\n      })\\r\\n    );\\r\\n    const selected = result\\r\\n      .filter((res: any) => res.checked)\\r\\n      .map((ele: any) => ele.field);\\r\\n    console.log(selected);\\r\\n    this.props.handleFilter(this.props.name, selected, result);\\r\\n  };\\r\\n\\r\\n  //Show/Hide filter\\r\\n  toggleList = () => {\\r\\n    this.setState(prevState => ({ showList: !prevState.showList }));\\r\\n  };\\r\\n\\r\\n  //Rendering the checkboxes based on the local state, but still it gets lost after filtering happens\\r\\n  render() {\\r\\n    let { showList } = this.state;\\r\\n    let visibleFlag: string;\\r\\n    if (showList === true) visibleFlag = \\"visible\\";\\r\\n    else visibleFlag = \\"\\";\\r\\n    return (\\r\\n      <div>\\r\\n        <div style={{ position: \\"absolute\\" }}>\\r\\n          <div\\r\\n            className={\\"ui scrolling dropdown column-settings \\" + visibleFlag}\\r\\n          >\\r\\n            <Icon className=\\"filter\\" onClick={this.toggleList} />\\r\\n            <div className={\\"menu transition \\" + visibleFlag}>\\r\\n              <div className=\\"menu-item-holder\\">\\r\\n                {this.props.options.map((item: any, i: number) => (\\r\\n                  <div className=\\"menu-item\\" key={i}>\\r\\n                    <Checkbox\\r\\n                      name={item.field}\\r\\n                      onChange={this.handleValueChange}\\r\\n                      label={item.field}\\r\\n                      checked={this.state.checkboxOptions[i]}\\r\\n                    />\\r\\n                  </div>\\r\\n                ))}\\r\\n              </div>\\r\\n              <div className=\\"menu-btn-holder\\">\\r\\n                <Button size=\\"small\\" onClick={this.passSelectionToParent}>\\r\\n                  Apply\\r\\n                </Button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n","number":16202,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-25T11:44:15Z"},{"id":472773150,"title":"Add getBoundingClientRect to EventTarget type","body":"Hi.\\r\\nI\'ve found that I can\'t use getBoundingClientRect with MouseEvent in typescript.\\r\\n\\r\\n```\\r\\nonClick: (event: MouseEvent): void => {\\r\\n  const { left, top } = event.target.getBoundingClientRect();\\r\\n  const { left, top } = event.nativeEvent.target.getBoundingClientRect();\\r\\n},\\r\\n```\\r\\n\\r\\nTypescript message I see in VS code is:\\r\\n\\r\\n`Property \'getBoundingClientRect\' does not exist on type \'EventTarget\'.ts(2339)`","number":16201,"user":{"login":"droganov"},"state":"closed","created_at":"2019-07-25T09:55:09Z"},{"id":472649947,"title":"custom hook with Promise.all causes duplicate network request","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWith custom hook with using Promise.all I\'m noticing duplicate network requests, the issue occurs when I call the `setState` method of the hook. If I don\'t setState the call is made once.\\r\\n\\r\\nThe same hook written without Promise.all seems to work fine, ie one fetch request.\\r\\n\\r\\nThis could well be something with my code and happy to know if there\'s anything missing.\\r\\n\\r\\nhttps://gist.github.com/kang-chen/fe9fed2ca1c95a782713f76886a81865\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/hook-test-ndj7s\\r\\n\\r\\nOpen the network tab and view requests going out to test API, there should be only three requests although there are six.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nNo duplicated network calls using Promise.all in conjunction with custom hook.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8.6\\r\\n\\r\\n","number":16200,"user":{"login":"kang-chen"},"state":"closed","created_at":"2019-07-25T03:47:03Z"},{"id":472643237,"title":"Error boundary reports \\"fewer hooks\\" unexpectedly","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBUG\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen a error boundary receives error from its children and renders a custom error component, react reports \\"Rendered fewer hooks than expected\\" on the error component if we have some hooks after the `throw` statement\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/error-boundary-hooks-mismatch-tj52l\\r\\n\\r\\nAfter clicks \\"INC\\" button several times, the page will crash instead of rendering an error label:\\r\\n\\r\\n```\\r\\nUncaught Invariant Violation: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\\r\\n    at invariant (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:55:15)\\r\\n    at renderWithHooks (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:13010:28)\\r\\n    at mountIndeterminateComponent (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:15020:13)\\r\\n    at beginWork (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:15625:16)\\r\\n    at performUnitOfWork (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:19312:12)\\r\\n    at workLoop (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:19352:24)\\r\\n    at renderRoot (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:19435:7)\\r\\n    at performWorkOnRoot (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:20342:7)\\r\\n    at performWork (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:20254:7)\\r\\n    at performSyncWork (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:20228:3)\\r\\n    at interactiveUpdates$1 (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:20495:7)\\r\\n    at interactiveUpdates (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:2170:10)\\r\\n    at dispatchInteractiveEvent (https://tj52l.csb.app/node_modules/react-dom/cjs/react-dom.development.js:4882:3)\\r\\ninvariant @ react-dom.development.js:55\\r\\nrenderWithHooks @ react-dom.development.js:13010\\r\\nmountIndeterminateComponent @ react-dom.development.js:15020\\r\\nbeginWork @ react-dom.development.js:15625\\r\\nperformUnitOfWork @ react-dom.development.js:19312\\r\\nworkLoop @ react-dom.development.js:19352\\r\\nrenderRoot @ react-dom.development.js:19435\\r\\nperformWorkOnRoot @ react-dom.development.js:20342\\r\\nperformWork @ react-dom.development.js:20254\\r\\nperformSyncWork @ react-dom.development.js:20228\\r\\ninteractiveUpdates$1 @ react-dom.development.js:20495\\r\\ninteractiveUpdates @ react-dom.development.js:2170\\r\\ndispatchInteractiveEvent @ react-dom.development.js:4882\\r\\n\\r\\nThe above error occurred in the <ErrorLabel> component:\\r\\n    in ErrorLabel (created by _default)\\r\\n    in div (created by _default)\\r\\n    in _default\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAlthough there are some hooks after the `throw` statement in `App` component, it should not report hooks mismatch since the render of `App` is aborted and component type is switched from `App` to `ErrorLabel`.\\r\\n\\r\\nSecond, it should not report error at `ErrorLabel` component, `ErrorLabel` is only a simple presentational component without any hooks.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n- react: 16.8.6\\r\\n- react-dom: 16.8.6","number":16199,"user":{"login":"otakustay"},"state":"closed","created_at":"2019-07-25T03:13:34Z"},{"id":472622748,"title":"[Scheduler] Test browser implementation details","body":"The Scheduler implementation uses browser APIs like `MessageChannel`, `requestAnimationFrame`, and `setTimeout` to schedule work on the main thread. Most of our tests treat these as implementation details; however, the sequence and timing of these APIs are not precisely specified, and can vary wildly across browsers.\\r\\n\\r\\nTo prevent regressions, we need the ability to simulate specific edge cases that we may encounter in various browsers.\\r\\n\\r\\nThis adds a new test suite that mocks all browser methods used in our implementation. It assumes as little as possible about the order and timing of events. The only thing it assumes is that requestAnimationFrame is passed a frame time that is equal to or less than the time returned by performance.now. Everything else can be controlled at will.\\r\\n\\r\\nIt also includes Scheduler-specific invariants, e.g. only one rAF callback can be scheduled at a time.\\r\\n\\r\\nIt overlaps slightly with the existing SchedulerDOM-test suite, which also mocks the browser APIs, but exposes a higher-level set of testing primitives. I will consolidate the two suites in a follow-up.","number":16198,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-25T01:36:01Z"},{"id":472533703,"title":"Add guard to ensure Profiler onRender prop is function before calling","body":"FYI we already warn in DEV when creating the `Fiber`:\\r\\n> Profiler must specify an \\"id\\" string and \\"onRender\\" function as props","number":16197,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-07-24T21:14:35Z"},{"id":472429493,"title":"update legacy context warning message","body":"The link in the legacy context message doesn\'t point to anything related to context. This changes the link to point to https://fb.me/react-legacy-context, which points to https://reactjs.org/docs/context.html#legacy-api. Also adds a line that it\'ll probably be gone later.","number":16196,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-24T18:25:22Z"},{"id":472425692,"title":"\\"TypeError: _useContext is undefined\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nA bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen trying to implement useContext with my react hooks components, I am getting the aforementioned error: \\"TypeError: _useContext is undefined\\". It is definitely defined in my code. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt would be considered defined and grab all of the values I specify from the context file.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nFirefox, latest version of React","number":16195,"user":{"login":"ccapua"},"state":"closed","created_at":"2019-07-24T18:15:55Z"},{"id":472398212,"title":"Fix suspenseCallback type warning, add a test","body":"Sorry for the churn. Added a test.\\r\\n","number":16194,"user":{"login":"bgirard"},"state":"closed","created_at":"2019-07-24T17:08:17Z"},{"id":472266760,"title":"Bug: Environment variables with \'$\' are modified on Linux","body":"I report this issue here since I didn\'t find any occurence of it anywhere else.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nRight now whenever I want to read an env variable in the process.env object whose value contains a dollar sign \'$\'. The value is modified once passed to react and replaced by the corresponding env variable.\\r\\n\\r\\nFor example: If I type the following in my terminal : \\r\\n`export REACT_APP_EXAMPLE=\\"my\\\\$value\\"`\\r\\nIf I check again in the terminal I have : \\r\\n```\\r\\necho $REACT_APP_EXAMPLE \\r\\nmy$value\\r\\n```\\r\\nBut once my app is launched, React replace the portion followed by the \'$\' by the content of the \'value\' environment variable (empty by default). So if for example I want to log it, I will have : \\r\\n```\\r\\nconsole.log(process.env.REACT_APP_EXAMPLE);\\r\\n-> my\\r\\n```\\r\\nAnd if my \'value\' variable is set :\\r\\n`export value=something`\\r\\n```\\r\\nconsole.log(process.env.REACT_APP_EXAMPLE);\\r\\n-> mysomething\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nReact should give the proper value and not overriding its content because of special characters. Especially since I used double quotes and backslash expression to avoid the confusion when setting the variables.\\r\\nThis seems to be an issue with React when it redefines and filters the process.env object since I don\'t have this issue with plain JS or when running a node console.\\r\\nFor now I use dotenv to avoid that behaviour but it is still an issue worthy of note.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue?**\\r\\nReact v.16.8.6\\r\\nOS: Ubuntu 16.04","number":16193,"user":{"login":"thebananeman"},"state":"closed","created_at":"2019-07-24T12:53:47Z"},{"id":472200705,"title":"[Flare] Ensure Flare components are no-ops for TestRenderer","body":"This PR makes some changes to the TestRenderer to support Flare\'s new event system design. Specifically:\\r\\n\\r\\n- Previous errors are now no-ops.\\r\\n- We remove the `responders` prop from test instances so they don\'t affect JSON output in snapshots.","number":16192,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-24T10:19:47Z"},{"id":472186355,"title":"Child component\'s local state changes when change happens inside parent component","body":"I have a situation where I am implementing custom dropdown filter for a table in react. I have set of dropdown values for each column and there is a Apply button. \\r\\n\\r\\nI have maintained a child component for this which takes in drop down values  and sends the selected one\'s back to parent.\\r\\n\\r\\nThe filtering happens but when I open this dropdown again the checkbox values gets lost. \\r\\n\\r\\nAlso I want to preserve the values of all dropdown values so that filter across columns would work correctly \\r\\n\\r\\nCan someone tell where I am going wrong?\\r\\n\\r\\nI am stuck here\\r\\n\\r\\nI am doing something like : Code Sandbox: https://codesandbox.io/s/quizzical-glitter-np8iw\\r\\n\\r\\nMain Component\\r\\n---------------\\r\\n\\r\\n\\r\\n`````````````````````````\\r\\nimport * as React from \\"react\\";\\r\\nimport { render } from \\"react-dom\\";\\r\\nimport ReactTable from \\"react-table\\";\\r\\nimport \\"./styles.css\\";\\r\\nimport \\"react-table/react-table.css\\";\\r\\nimport Child from \\"./Child\\";\\r\\ninterface IState {\\r\\n  data: {}[];\\r\\n  columns: {}[];\\r\\n  selectedValues: {};\\r\\n}\\r\\n\\r\\ninterface IProps {}\\r\\n\\r\\nexport default class App extends React.Component<IProps, IState> {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: [\\r\\n        { firstName: \\"Jack\\", status: \\"Submitted\\", age: \\"14\\" },\\r\\n        { firstName: \\"Simon\\", status: \\"Pending\\", age: \\"15\\" },\\r\\n        { firstName: \\"Pete\\", status: \\"Approved\\", age: \\"16\\" },\\r\\n        { firstName: \\"Lucas\\", status: \\"Rejected\\", age: \\"19\\" }\\r\\n      ],\\r\\n      selectedValues: {},\\r\\n      columns: []\\r\\n    };\\r\\n  }\\r\\n\\r\\n  getValuesFromKey = (data, key) => {\\r\\n    return data.map(item => item[key]);\\r\\n  };\\r\\n\\r\\n  handleFilter = (fieldName: any, selectedValue: any) => {\\r\\n    this.setState(\\r\\n      {\\r\\n        selectedValues: {\\r\\n          ...this.state.selectedValues,\\r\\n          [fieldName]: selectedValue\\r\\n        }\\r\\n      },\\r\\n      () => this.handleColumnFilter(this.state.selectedValues)\\r\\n    );\\r\\n  };\\r\\n\\r\\n  handleColumnFilter = (values: any) => {\\r\\n    console.log(values);\\r\\n  };\\r\\n\\r\\n  componentDidMount() {\\r\\n    let columns = [\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div style={{ position: \\"absolute\\", marginLeft: \\"10px\\" }}>\\r\\n              <Child\\r\\n                key=\\"firstName\\"\\r\\n                name=\\"firstName\\"\\r\\n                options={this.getValuesFromKey(this.state.data, \\"firstName\\")}\\r\\n                handleFilter={this.handleFilter}\\r\\n              />\\r\\n            </div>\\r\\n            <span>First Name</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"firstName\\",\\r\\n        sortable: false,\\r\\n        show: true,\\r\\n        displayValue: \\" First Name\\"\\r\\n      },\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div style={{ position: \\"absolute\\", marginLeft: \\"10px\\" }}>\\r\\n              <Child\\r\\n                key=\\"status\\"\\r\\n                name=\\"status\\"\\r\\n                options={this.getValuesFromKey(this.state.data, \\"status\\")}\\r\\n                handleFilter={this.handleFilter}\\r\\n              />\\r\\n            </div>\\r\\n            <span>Status</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"status\\",\\r\\n        sortable: false\\r\\n      },\\r\\n      {\\r\\n        Header: \\"Age\\",\\r\\n        accessor: \\"age\\"\\r\\n      }\\r\\n    ];\\r\\n    this.setState({ columns });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { data, columns } = this.state;\\r\\n    return (\\r\\n      <div>\\r\\n        <ReactTable\\r\\n          data={data}\\r\\n          columns={columns}\\r\\n          defaultPageSize={10}\\r\\n          className=\\"-striped -highlight\\"\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nrender(<App />, rootElement);\\r\\n\\r\\n\\r\\n\\r\\n`````````````````````````````````\\r\\n\\r\\nChild component\\r\\n--------------------\\r\\n\\r\\n`````````````````````````\\r\\n\\r\\nimport * as React from \\"react\\";\\r\\nimport { Button, Checkbox, Icon } from \\"semantic-ui-react\\";\\r\\nimport \\"./styles.css\\";\\r\\ninterface IProps {\\r\\n  options: any;\\r\\n  name: string;\\r\\n  handleFilter(val1: any, val2: any): void;\\r\\n}\\r\\ninterface IState {\\r\\n  showList: boolean;\\r\\n  selected: [];\\r\\n}\\r\\nexport default class Child extends React.Component<IProps, IState> {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      selected: [],\\r\\n      showList: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleValueChange = (event: React.FormEvent<HTMLInputElement>, data: any) => {\\r\\n    let updated: any;\\r\\n    if (data.checked) {\\r\\n      updated = [...this.state.selected, data.name];\\r\\n    } else {\\r\\n      updated = this.state.selected.filter(v => v !== data.name);\\r\\n    }\\r\\n    this.setState({ selected: updated });\\r\\n  };\\r\\n\\r\\n  passSelectionToParent = (event: any) => {\\r\\n    event.preventDefault();\\r\\n    this.props.handleFilter(this.props.name, this.state.selected);\\r\\n  };\\r\\n\\r\\n  toggleList = () => {\\r\\n    this.setState(prevState => ({ showList: !prevState.showList }));\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    let { showList } = this.state;\\r\\n    let visibleFlag: string;\\r\\n    if (showList === true) visibleFlag = \\"visible\\";\\r\\n    else visibleFlag = \\"\\";\\r\\n    return (\\r\\n      <div>\\r\\n        <div style={{ position: \\"absolute\\" }}>\\r\\n          <div\\r\\n            className={\\"ui scrolling dropdown column-settings \\" + visibleFlag}\\r\\n          >\\r\\n            <Icon className=\\"filter\\" onClick={this.toggleList} />\\r\\n            <div className={\\"menu transition \\" + visibleFlag}>\\r\\n              <div className=\\"menu-item-holder\\">\\r\\n                {this.props.options.map((item: any, i: number) => (\\r\\n                  <div className=\\"menu-item\\" key={i}>\\r\\n                    <Checkbox\\r\\n                      name={item}\\r\\n                      onChange={this.handleValueChange}\\r\\n                      label={item}\\r\\n                    />\\r\\n                  </div>\\r\\n                ))}\\r\\n              </div>\\r\\n              <div className=\\"menu-btn-holder\\">\\r\\n                <Button size=\\"small\\" onClick={this.passSelectionToParent}>\\r\\n                  Apply\\r\\n                </Button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n","number":16191,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-24T09:49:35Z"},{"id":472138964,"title":"Question: Context API in conjunction with useState","body":"I am trying to understand whether it is a good idea to do the following:\\r\\n\\r\\n```javascript\\r\\n// NOTE: I deliberately skipped ValuesContext initialisation to make code shorter\\r\\n\\r\\nconst Counter = () => (\\r\\n  <ValuesContext.Consumer>\\r\\n    {({ counter, setCounter }) => (\\r\\n      <span>{counter}</span>\\r\\n      <button onClick={() => setCounter(counter + 1)}>Increase counter</button>\\r\\n    )}\\r\\n  </ValuesContext.Consumer>\\r\\n);\\r\\n\\r\\nconst Text = () => (\\r\\n  <ValuesContext.Consumer>\\r\\n    {({ text, setText }) => (\\r\\n      <span>{text}</span>\\r\\n      <input type=\\"text\\" value={text} onChange={({ target: { value } }) => setText(value)} />\\r\\n    )}\\r\\n  </ValuesContext.Consumer>\\r\\n);\\r\\n\\r\\nconst App = () => {\\r\\n  const [activePage, setActivePage] = useState(\'one\');\\r\\n  const [counter, setCounter] = useState(1);\\r\\n  const [text, setText] = useState(\'\');\\r\\n\\r\\n  return (\\r\\n    <ValuesContext.Provider value={{\\r\\n      activePage,\\r\\n      setActivePage,\\r\\n      counter,\\r\\n      setCounter,\\r\\n      text,\\r\\n      setText\\r\\n    }}>\\r\\n      <button onClick={() => setActivePage(activePage === \'one\' ? \'two\' : \'one\')}>Toggle pages</button>\\r\\n      {activePage === \'one\' && <Counter />}\\r\\n      {activePage === \'two\' && <Text />}\\r\\n    </ValuesContext.Provider>\\r\\n  );\\r\\n};\\r\\n```\\r\\n\\r\\nTechnically I am not breaking [hook rules](https://reactjs.org/docs/hooks-rules.html#explanation) but passing setter functions to other components and those setters may be used inside loops, conditions, or even nested functions. \\r\\n\\r\\nSo far everything seems to work fine but I am wondering whether this is a good idea before I start getting weird issues. Do you see/foresee any issues with this approach?\\r\\n\\r\\nThanks in advance for your help/advice.","number":16190,"user":{"login":"sergeykaikin"},"state":"closed","created_at":"2019-07-24T08:07:58Z"},{"id":472130279,"title":"Allow `on` attribute for amp interactions","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nA feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nSince React 16 we have the ability to define any attribute and it is passed to the DOM (contrary to the whitelisting approach of earlier versions). An exception are all attributes starting with `on` - for obvious security reasons. [(Source)](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#changes-in-detail)\\r\\nHowever, this restriction makes it impossible to write interactive AMP pages in React, since all actions are defined using the `on` attribute. [(Example)](https://github.com/ampproject/amphtml/blob/master/examples/standard-actions.amp.html)\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should be possible to use the `on` attribute, so that it is also passed to the DOM.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nAll React Versions","number":16189,"user":{"login":"dpuscher"},"state":"closed","created_at":"2019-07-24T07:46:42Z"},{"id":472076979,"title":"The error message supposed to be found in e.message only. Please, avoid copying error message to e.stack.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nA bug\\r\\n**What is the current behavior?**\\r\\nIt duplicates error message to the error stack. I run react code pre-processed by webpack/babel in node virtual machine for SSR purposes. Therefore, I need to re-map the error stack to proper files/lines/columns when the error happens. A duplicated error message in error stack is not corresponding to a common error stack format which causes incorrect re-mapping and mess in the error output.\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nThe following error message was found both in `e.message` and `e.stack`:\\r\\n```\\r\\nInvalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\r\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\r\\n2. You might be breaking the Rules of Hooks\\r\\n3. You might have more than one copy of React in the same app\\r\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\\r\\n```\\r\\n**What is the expected behavior?**\\r\\nThe error message should be found in `e.message` only.\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact@16.8.6\\r\\nwebpack@4.36.1\\r\\n@babel/core@7.5.5\\r\\n@babel/runtime@7.5.5","number":16188,"user":{"login":"maximandrews"},"state":"closed","created_at":"2019-07-24T04:47:21Z"},{"id":471989309,"title":"<Element> backgroundImage url triggers re-render on all elements where <Img> src does not ","body":"Possible bug?\\r\\n\\r\\nWhen dynamically rendering a list of `<div>` or `<img>` elements - each new addition re-renders the entire list ONLY if just background-image is specified. If `Img.src` is specified normal behavior occurs. \\r\\n\\r\\nExample: \\r\\nhttps://codesandbox.io/s/brave-mcnulty-0rrjz\\r\\n\\r\\nRelevant comments and code are at Preview.js:55\\r\\n","number":16187,"user":{"login":"colemars"},"state":"closed","created_at":"2019-07-23T22:17:03Z"},{"id":471937072,"title":"Edit Suspense Priority Warning Message","body":"move \'component that triggered the update\' in suspense priority warning message to the beginning of the message instead of the middle for better readability\\r\\n\\r\\nMessage after update:\\r\\n```\\r\\nWarning: The components that triggered the update: COMPONENT_NAME\\r\\n\\r\\nThe following components suspended during a user-blocking update: COMPONENT_NAME\\r\\n\\r\\nUpdates triggered by user interactions (e.g. click events) are considered user-blocking by default. \\r\\nThey should not suspend. Updates that can afford to take a bit longer should be wrapped with \\r\\n`Scheduler.next` (or an equivalent abstraction). This typically includes any update that shows new \\r\\ncontent, like a navigation.\\r\\n````","number":16186,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-07-23T20:48:27Z"},{"id":471920381,"title":"[React-test-renderer] imported asset paths ends up being null","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug, or maybe a newb question(?)\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nAsset paths resolve to null in snapshot trees when used this way:\\r\\n\\r\\n```js\\r\\nimport logo from \'./logo.svg\';\\r\\n...\\r\\n<LogoElement>\\r\\n    <img src={logo} />\\r\\n</LogoElement>\\r\\n```\\r\\n\\r\\nthe tree created using ```renderer.create``` is: \\r\\n\\r\\n```js\\r\\n<LogoElement>\\r\\n    <img src={null} />\\r\\n</LogoElement>\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nsrc to be the path of the logo.svg","number":16185,"user":{"login":"undrafted"},"state":"closed","created_at":"2019-07-23T20:22:54Z"},{"id":471834599,"title":"[Scheduler][Bugfix] Multiple rAFs in same frame","body":"Always sets `isRAFLoopRunning` back to false when an animation frame is scheduled. Fixes a bug where two rAFs fire in the same frame, but the second one exits and fails to schedule a new rAF.\\r\\n\\r\\nFixes bug observed in Safari.\\r\\n\\r\\nI\'ll figure out a better test plan later; need to land this to fix FB5.","number":16184,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-23T17:40:43Z"},{"id":471744449,"title":"[Fresh] Track unrecoverable errors","body":"We have a recovery mechanism in Fresh. If a mounted root fails during an update, we record the last attempted element (by reading it from the current memoized state), and retry rendering it after the next edit. This lets us quickly fix runtime errors that we introduce while editing.\\r\\n\\r\\nHowever, this recovery mechanism doesn\'t work for the initial mount of an app with no error boundaries. In that case, we don\'t currently have a way to read the last attempted rendered element \u2014 because this root has never been committed yet.\\r\\n\\r\\nCurrently, in that case we just end up with a blank screen. This is annoying because you get used to just saving a file after seeing a redbox. But in this case you\'ll keep seeing the blank screen.\\r\\n\\r\\nThis PR adds a way for the module environment integration to check whether we have an unrecoverable error like this. In that case, the module environment may decide to do a full reload instead.\\r\\n\\r\\nIn the future, we can get rid of this special case if there is some way to know the last attempted rendered element for any given root. For example, we could add a new `onTryRenderRoot(root, element)` DevTools hook that does that. This would also be useful so that we can stop relying on comparing `alternate.memoizedState.element` and `current.memoizedState.element` in DevTools to figure out what happened. This is out of scope of this PR though.","number":16183,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-07-23T14:51:09Z"},{"id":471704299,"title":"link onLoad is not triggered","body":"The `onLoad` event handler isn\'t triggered for a `link` element. It works if the element is pure DOM element and `onload` function is a string ` <link rel=\\"stylesheet\\" href=\\"style.css\\" onLoad=\\"console.log(this)\\">`.\\r\\n\\r\\nMDN docs: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Stylesheet_load_events\\r\\nReact docs /only image has `onLoad` event/: https://reactjs.org/docs/events.html#image-events\\r\\n\\r\\nLive demo: https://jsfiddle.net/7me2z3wh/","number":16182,"user":{"login":"melbon"},"state":"closed","created_at":"2019-07-23T13:40:35Z"},{"id":471464568,"title":"[act] with nested act()s from different renderers, flush work on exiting outermost act()","body":"Given this snippet:\\r\\n```jsx\\r\\nTestRenderer.act(() => {\\r\\n  TestUtils.act(() => {\\r\\n    TestRenderer.create(<Effecty />);\\r\\n  });\\r\\n});\\r\\n```\\r\\nWe want to make sure that all work is only flushed on exiting the outermost act().\\r\\n\\r\\nNow, naively doing this based on actingScopeDepth would work with a mocked scheduler, where flushAll() would flush all work across renderers.\\r\\n\\r\\nThis doesn\'t work without mocking the scheduler though; and where flushing work only works per renderer. So we disable this behaviour for a non-mocked scenario. This seems like an ok tradeoff.","number":16181,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-23T03:08:43Z"},{"id":471444588,"title":"[Scheduler] Add names to inline functions","body":"Noticed when looking at the performance profiler with @lunaruan that it\'s hard to tell which event causes `performWorkUntilDeadline` to fire because these functions are anonymous.","number":16180,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-23T01:34:04Z"},{"id":471410431,"title":"[Flare] Press: fix keyboard interactions","body":"Prevents Spacebar from scrolling the window.\\r\\nPrevents Enter from triggering a navigation if `preventDefault` is true.\\r\\nFixes the emulated events unit test.\\r\\n\\r\\nDemo: https://codesandbox.io/s/admiring-ride-rz96j30rp","number":16179,"user":{"login":"necolas"},"state":"closed","created_at":"2019-07-23T00:02:37Z"},{"id":471340811,"title":"Enable profiler+tracing for test renderer","body":"This commit just brings the feature flags to parity with other renderers.","number":16178,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-07-22T21:17:20Z"},{"id":471220722,"title":"Unnecessary re-render when using the hooks API","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nAsking for advice.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen you have a component that conditionally depends on a hook, it\'s quite hard to extract this logic to a place and not have the app do unnecessary re-renders.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nImplementation with hooks: https://codesandbox.io/s/nifty-williams-jg3q2\\r\\nWithout hooks: https://codesandbox.io/s/pedantic-ganguly-xchuz\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nWe could, of course, send a value down to the hook `useLongOperation({ dontRun: true })`, but this seems quite ugly to me. I expect some kind of API to do this more cleanly.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nIn previous versions of React you would just do the long operation on a didMount lifecycle when the context value equals true. The component would then have the images inside and would just re-render the image with the changed opacity.","number":16177,"user":{"login":"PepijnSenders"},"state":"closed","created_at":"2019-07-22T17:45:30Z"},{"id":471196073,"title":"How does import work in React?","body":"I want to know the deep concept when I\u2019m using import in React.\\r\\n\\r\\nAccording to [this article](https://link.medium.com/acpKOqJcxY), it said that \\r\\n\\r\\n> In the node world anything start with [A-Za-z0-9@] is considered a node module\\r\\n\\r\\nIn case I want to use [babel-plugin-module-resolver](https://github.com/tleunen/babel-plugin-module-resolver) to define alias for some path in my project. I may define it as \u201ccomponents\u201d so I can call import in every file in my project like `import A from \u2018components/A`.\\r\\n\\r\\nAs I understand react will run node\u2019s resolver for the import path that start with `[A-Za-z0-9@]` if non-exist in node_modules then it will looking for the path in local project or the alias. Am I right?\\r\\n\\r\\nMy question is naming alias like this affects to the performance, doesn\u2019t it?\\r\\n\\r\\nIf the answer for above question is yes. Can I ,naming alias path with the character that doesn\u2019t start with the case, to improve the performance?\\r\\n\\r\\nThank you.\\r\\n","number":16176,"user":{"login":"phakphumi"},"state":"closed","created_at":"2019-07-22T17:03:13Z"},{"id":471184874,"title":"useEarlyEffect or cancelled render cleanup hook request","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nThere is no way to run a side-effect generating hook before the first render.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nFor certain platforms (like Meteor) the reactive data access paradigm both runs immediately (data can be available on first render), and sets up side effects for later updates. I\'d like to be able to set all that up *before* the first render, instead of waiting a render pass with `useEffect`. [Currently](https://github.com/meteor/react-packages/pull/271), we have to jump through hoops to make sure sure we don\'t generate side-effects early, then duplicate effort later to actually set up the desired side effects. (we had been simply setting up the side-effects in sync with render, but understand that [upcoming Suspense features](https://overreacted.io/algebraic-effects-for-the-rest-of-us/#how-is-all-of-this-relevant-to-react) may cancel a render cycle, and never run the `useEffect` cleanup hook). A hook which ran before render (or synchronously with first render) with it\'s cleanup method in case the render pass is thrown away, would solve the issue nicely, without hoop jumping.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.x. Previous versions of react had life cycle methods `componentWillMount` or even just the constructor which could be used for similar behavior.","number":16175,"user":{"login":"CaptainN"},"state":"closed","created_at":"2019-07-22T16:44:28Z"},{"id":471175544,"title":"Request for support of oncuechange event on <track> elements","body":"## What\\r\\n\\r\\nFeature request for `oncuechange` event handler as prop for `<track>` html element.\\r\\n\\r\\n## Why?\\r\\n\\r\\nTo develop custom subtitles/captions it is necessary to listen to listen to this event in order to determine which entry from the subtitle file to render and at what time.\\r\\n\\r\\nAs of ReactDOM 16.8.6 this is not supported.\\r\\n\\r\\n## Current workaround\\r\\n\\r\\nYou can see from [this codesandbox](https://codesandbox.io/s/request-for-oncuechange-support-in-reactdom-7dltb) the only workaround is to manually assign an event listener for the `oncuechange` since `onCueChange` does not exist.","number":16174,"user":{"login":"JofBigHealth"},"state":"open","created_at":"2019-07-22T16:25:47Z"},{"id":471161961,"title":"Why is react-dom so big? Why can\'t we tree-shake it?","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nRequest a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nBundling react-dom with the current CJS module is _HUGE_ - 124KB of stuff we don\'t use.\\r\\nThe bundle can be so much smaller by adding the source files into the npm package and enabling users to do a proper tree-shaking by defining the file in webpack\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n![image](https://user-images.githubusercontent.com/1608474/61644207-ceba5a00-ac93-11e9-80b5-84537a938c9d.png)\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWhen bundling with webpack, we should be able to properly tree-shake the unused code automatically.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.6\\r\\nBrowser Chrome 75\\r\\nLinux ","number":16173,"user":{"login":"sigginet"},"state":"closed","created_at":"2019-07-22T15:29:33Z"},{"id":471035122,"title":"[Flare] Ensure mouse events can use target to validate press","body":"This PR fixes an interesting bug that we encountered internally using the `Press` responder. When using mouse events (via pointer events or mouse events), we have a guarantee that the event target will be that of the one we\'re moving/releasing from (unlike touch events, which can have the same target as when the press was initiated). This mechanic for mouse events lets us bypass the `getBoundingClientRect` logic, which is:\\r\\n\\r\\n- expensive as it requires a layout reflow\\r\\n- can be incorrect in cases where children of the `responderTarget` are absolutely positioned\\r\\n- can sometimes report `width` and/or `height` as `0` when some CSS styles are applied\\r\\n\\r\\nThis behaviour already existed in the current Press implementation. But there were two bugs:\\r\\n\\r\\n- `isTargetWithinNode` wasn\'t taking into account the `alternate` fiber\\r\\n- we weren\'t setting `isPressWithinResponderRegion` to `true` if we knew the mouse event target was in the responder region (by using the targets).\\r\\n\\r\\nThis fixes both cases, which also fixes the internal bug we were seeing.","number":16172,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-22T11:12:52Z"},{"id":470895252,"title":"[custom renderer] weird behavior of the useState hook","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nnot a bug nor a feature (I probably missed something in my custom renderer host config)\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI have the following example:\\r\\n\\r\\n```js\\r\\nfunction XXX() {\\r\\n  const [ counter, setCounter ] = useState(0);\\r\\n  console.log(counter);\\r\\n  useEffect(() => {\\r\\n    setCounter(42);\\r\\n  }, [])\\r\\n\\r\\n  return (\\r\\n    <span style={ { cursor: \'pointer\' } } onClick={ () => setCounter(counter + 1) }>\\r\\n      XXX({ counter })\\r\\n    </span>\\r\\n  );\\r\\n}\\r\\nfunction App() {\\r\\n  return (\\r\\n    <XXX />\\r\\n  );\\r\\n}\\r\\n\\r\\nBanana.render(<App />, document.querySelector(\'#root\'));\\r\\n```\\r\\n\\r\\nAll works fine until I click on the `XXX(42)` text. This is suppose to update the local state to `43` but it sets it to `1`. And then no matter how many times I click it stays `1`. I assume that it gets the initial value of `0` on ever render. \\r\\n\\r\\nHere\'s the code of the example https://github.com/krasimir/react-custom-renderer-experiment/blob/master/src/index.js together with my custom host config. The same example works just fine using ReactDOM renderer. I tried to cover as many methods as possible and can\'t figure out why `useState` is not behaving correctly.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI expect to get the updated state value out of the `useState` call.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```js\\r\\n\\"react\\": \\"16.8.6\\",\\r\\n\\"react-reconciler\\": \\"0.20.4\\",\\r\\n\\"scheduler\\": \\"0.13.6\\"\\r\\n```\\r\\n\\r\\nI\'m testing under macOS, Chrome 75.","number":16171,"user":{"login":"krasimir"},"state":"closed","created_at":"2019-07-22T05:10:27Z"},{"id":470806187,"title":"Unicode iconfont didn\'t render when using map function of lists.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n- Bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n- ReactDom just renders unicode iconfont as plain text when using map function of lists, instead of iconfont. \\r\\n  ![image](https://user-images.githubusercontent.com/30968676/61594654-eefd0100-ac20-11e9-9cc0-7f7007a1cc39.png)\\r\\n\\r\\n\\r\\n- However, it can render well when  I hardcode the lists without using map function.\\r\\n  ![image](https://user-images.githubusercontent.com/30968676/61594627-87df4c80-ac20-11e9-9936-fddb75327141.png)\\r\\n\\r\\n\\r\\n**Steps to reproduce this bug**\\r\\n1. Create an iconfont project from Alibaba [iconfont](https://www.iconfont.cn).\\r\\n    Like this\\r\\n    ![image](https://user-images.githubusercontent.com/30968676/61594159-e30e4080-ac1a-11e9-8833-4d6d9daddc9c.png)\\r\\n2. Make a list to render these icons using iconfont unicode.\\r\\n    ```js\\r\\n    lists.map((list, idx) => (\\r\\n        <li key={idx}>\\r\\n             <i className=\\"iconfont\\">{list.unicode}</i>\\r\\n        </li>\\r\\n    ))\\r\\n    ```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n- Render these iconfont as icon instead of plain text.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue?**\\r\\n\\r\\n- Broswer: Google Chrome, Version 75.0.3770.100 (Official Build) (64-bit)\\r\\n- OS: Ubuntu, Version 18.04.2 LTS (Bionic Beaver)\\r\\n- React: Version 16.8.6\\r\\n\\r\\n","number":16170,"user":{"login":"rhzone"},"state":"closed","created_at":"2019-07-21T17:42:48Z"},{"id":470804268,"title":"Do not warn when DOM attribute values are undefined","body":"Fixes #13381\\r\\n\\r\\nCurrently (React 16.8.6), passing `null` or `undefined` on a ReactDOMElement will result in that attribute being absent from the corresponding DOM element, however, the following warning still appears:\\r\\n\\r\\n```\\r\\nclass App extends Component {\\r\\n  render() {\\r\\n    return <div helloWorld={undefined}> Hello World</div>;\\r\\n  }\\r\\n}\\r\\n```\\r\\n![image](https://user-images.githubusercontent.com/34415120/61594340-c81fda00-abe2-11e9-8d75-05a2da3e66e4.png)\\r\\n\\r\\nAs explained in the referenced issue, this leads to warnings in dev environments when trying to remove props by using `cloneElement` , despite the prop not appearing in the actual DOM.\\r\\n\\r\\nThis pull request takes the approach @sophiebits recommended in that issue and will not give the error, only when the value of the prop is `undefined` (ie, when the prop is `null` or some other value, the previous behavior will be maintained). \\r\\n","number":16169,"user":{"login":"stephan-noel"},"state":"open","created_at":"2019-07-21T17:21:01Z"},{"id":470790349,"title":"[Shallow] Implement callEffects option to call effects from shallow renderer (#15275)","body":"Fixes the effects related part of #15275 by allowing the user to tell the shallow renderer to call effect hooks.\\r\\n\\r\\n~It could do with a couple more tests but I wanted to get feedback on the approach and was also worried about putting any more time into it given that the maintainers have not responded to the corresponding issue in the months it\'s been open.~\\r\\n\\r\\nAdded a full set of tests.","number":16168,"user":{"login":"insidewhy"},"state":"closed","created_at":"2019-07-21T14:52:51Z"},{"id":470666890,"title":"Don\'t hyphenate custom CSS properties for ReactDOMServer","body":"This PR fixes https://github.com/facebook/react/issues/16160\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","number":16167,"user":{"login":"bedakb"},"state":"closed","created_at":"2019-07-20T11:54:15Z"},{"id":470621207,"title":"[Scheduler] Use rIC to post first callback","body":"Scheduler uses `requestAnimationFrame` to post tasks to the browser. If this happens at the beginning of a frame, the callback might not fire until the subsequent frame, even if the main thread is idle.\\r\\n\\r\\nOur theory was that this wouldn\'t be an issue in practice, because once the first rAF fires, we schedule the next rAF as early as possible in that frame. Combined with our heuristic for computing frame deadlines, we shouldn\'t get any idle time in between frames \u2014 only before the *first* frame.\\r\\n\\r\\nThis reasoning holds true when you have a small number of large tasks, such as the ones posted by React. The idle time before the task starts is negligible relative to the lifetime of the entire task.\\r\\n\\r\\nHowever, it does not hold if you have many small tasks posted over a span of time, perhaps spawned by a flurry of IO events. In this case, instead of single, contiguous rAF loop preceded by an idle frame, you get many rAF loops preceded by many idle frames. Our new theory is that this is contributing to poor main thread utilization during page loads.\\r\\n\\r\\nTo try to reclaim as much idle time as possible, this PR adds two experimental flags. The first one adds a `requestIdleCallback` call to start the rAF loop, which will fire before rAF if there\'s idle time left in the frame. (We still call rAF in case there isn\'t. We start working in whichever event fires first.)\\r\\n\\r\\nThe second flag tries a similar strategy using `setTimeout(fn, 0)`. If the timer fires before rAF, we\'ll assume that the main thread is idle.\\r\\n\\r\\nIf either `requestIdleCallback` or `setTimeout` fires before rAF, we\'ll immediately perform some work. Since we don\'t have a real frame time that we can use to compute the frame deadline, we might miss the next vsync, but this is fine because we can catch up during the next frame, by which point a real rAF will have fired and the loop can proceed the same way it does today.\\r\\n\\r\\nTest plan: Try this on Facebook to see if it improves load times.","number":16166,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-20T01:39:17Z"},{"id":470604166,"title":"Unexpected behavior with ref callback and focus()","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug (I know it\'s more likely a bug of my own code, but I can\'t find out why)\\r\\n\\r\\n**What is the current behavior?**\\r\\n### [CodeSandbox Demo](https://codesandbox.io/s/quizzical-gagarin-bzvf1)\\r\\nIt\'s really hard to describe my issue in English, the only way to understand is looking at the demo. Basically I need to programmatically focus on any element in a dynamic array by the element id, so I created an object to store all the refs by id, but the reference to the object sometimes doesn\'t update as expected.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nClicking the last button should be able to create then focus on input5.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nv16.8.6, v3.0.1, Chrome, Win10, CodeSandbox. I don\'t know if previous versions or React is the same.\\r\\n","number":16165,"user":{"login":"ZYinMD"},"state":"closed","created_at":"2019-07-19T23:23:28Z"},{"id":470512732,"title":"Create ReactFabric.stopSurface and use that for bridgeless mode binding","body":"For Fabric we want to rename `unmountComponentAtNode` to `stopSurface` to be consistent with `startSurface`. Because `unmountComponentAtNode` is called from native code (see ReactInstanceManager), we can\'t just delete it yet. Once this change syncs, I\'ll clean up usage of `unmountComponentAtNode` in native code, then I\'ll come back and remove it completely.\\r\\n\\r\\nFor more context, see https://github.com/facebook/react-native/commit/305058178e144d4709606ea42d0edb9d864b33c5 (and additional discussion on D16273720 for fb employees). This PR also updates the binding I create in that diff for bridgeless mode to refer only to stopSurface.","number":16164,"user":{"login":"ejanzer"},"state":"closed","created_at":"2019-07-19T19:52:35Z"},{"id":470329536,"title":"[Flare] Redesign core event system","body":"This PR applies some core design changes as to how the React Flare event system works. This is a follow up to #16101 and #16122. This design tackles the problems already outlined in those PRs.\\r\\n\\r\\nThe design system now consists of two key parts:\\r\\n- responders (created via `React.unstable_createResponder`)\\r\\n- listeners (used via `React.unstable_useListener`)\\r\\n\\r\\nResponders work pretty much like how they did before, except they\'re no longer consumed via Event Components, but are rather passed directly as an array to host components:\\r\\n\\r\\n```jsx\\r\\nimport {PressResponder} from \'react-events/press\';\\r\\n\\r\\n<div responders={<PressResponder />} />\\r\\n```\\r\\n\\r\\nHost components can have multiple event responders, but any duplicate event responders are a warning and no-op. Event responders do not emit events, but they do accept optional props:\\r\\n\\r\\n```jsx\\r\\nimport {PressResponder} from \'react-events/press\';\\r\\n\\r\\n<div responders={<PressResponder preventDefault={false} />} />\\r\\n```\\r\\n\\r\\nWhen you give a responder to a host component, there\'s a binding between that host component and the logic from within the relevant event responder implementation. The host component is also the \\"responder target\\" from there on too. Event responders act like a sort of event emitter, where they listen to native DOM events, but emit custom React Flare events.\\r\\n\\r\\nEvent listeners then pick up the React Flare events as the propagate through the React fiber tree. Event listeners are used exclusively in hook form:\\r\\n\\r\\n```jsx\\r\\nReact.useListener(EventResponder, props)\\r\\n```\\r\\n\\r\\nExample:\\r\\n\\r\\n```jsx\\r\\nimport {usePressListener, PressResponder} from \'react-events/press\'l\\r\\n\\r\\nfunction MyComponent() {\\r\\n  usePressListener({ onPress: handlePress });\\r\\n\\r\\n  function handlePress(e) {\\r\\n    console.log(\'You pressed the div!\');\\r\\n  }\\r\\n\\r\\n  return <div responders={<PressResonder />}>Press me!</div>\\r\\n}\\r\\n```\\r\\n\\r\\nEvents emitted from responders will terminate if they propagate the tree and hit another responder of the same type:\\r\\n\\r\\n```jsx\\r\\nfunction MyComponent() {\\r\\n  // this won\'t get events from the inner div\\r\\n  usePressListener({ onPress: handlePress });\\r\\n\\r\\n  function handlePress(e) {\\r\\n    console.log(\'You pressed the div!\');\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div responders={<PressResonder />}>\\r\\n        <div responders={<PressResonder />}>\\r\\n          Inner div\\r\\n        </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nIf the desired effect is to listen from events, an appropiate component boundary with a hook should be inserted, or another event responder should be used (i.e. `PressWithin`?).\\r\\n\\r\\nIf there are multiple responders in a sub-tree that can be intercepted by the same listener, like show:\\r\\n\\r\\n```jsx\\r\\nfunction MyComponent() {\\r\\n  usePressListener({ onPress: handlePress });\\r\\n\\r\\n  function handlePress(e) {\\r\\n    console.log(\'You pressed the div!\');\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <div responders={<PressResonder />}>Div 1</div>\\r\\n      <div responders={<PressResonder />}>Div 2</div>\\r\\n    </React.Fragment>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nThen to only intercept a single event, the children should be broken into sub components that then listen to only the things it wants to be concerned about. It\'s also possible to determine the child being pressed by other mechanisms (`event.target` and maybe a future `event.responderProps`).\\r\\n\\r\\nCompared to the previous event system design in Flare:\\r\\n\\r\\n```jsx\\r\\nfunction PressableButton({children, onPress, onHover, onFocus}) {\\r\\n  return (\\r\\n    <Press onPress={onPress}>\\r\\n      <Hover onHover={onHover}>\\r\\n        <Focus onFocus={onFocus}>\\r\\n          <div>\\r\\n            {children}\\r\\n          </div>\\r\\n        </Focus>\\r\\n      </Hover>\\r\\n    </Press>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nWith this PR and design, you would do this:\\r\\n\\r\\n```jsx\\r\\nfunction PressableButton({children, onPress, onHover, onFocus}) {\\r\\n  usePressResponder({onPress});\\r\\n  useHoverResponder({onHover});\\r\\n  useFocusResponder({onFocus});\\r\\n\\r\\n  return (\\r\\n    <div responders={[<PressResponder/ >, <FocusResponder />, <HoverResponder />]}>\\r\\n      {children}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nNote: there are no fibers created for this new event system design. Instead we attached objects to the existing fibers in the tree already, or use hooks.\\r\\n","number":16163,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-19T13:37:56Z"},{"id":470234979,"title":"Once again on getDerivedStateFromProps being called after setState","body":"I\'ve read all the issues end blog posts on this topic and still can\'t find suitable solution for my case. I\'m still in the 16.3 camp, though I must be just not competent enough to judge. Please help me to do things right. So I have a sort of pivot grid component with quite heavy state and a GridCell (uncontrolled or semi-controlled) component which is basically one number input. So the value and onChange are cycled through it\'s state and in parent component I\'m handling just onBlur. So in order to do some validation when users enter unacceptable value I notify them and then I want to reset the cell by resetting prevState. [Here](https://codesandbox.io/s/musing-mclaren-qvclh) is a simplified reproduction of the problem.\\r\\n","number":16162,"user":{"login":"sarat12"},"state":"closed","created_at":"2019-07-19T09:41:30Z"},{"id":470059181,"title":"onBeforeInput fires after browser updates the DOM for special characters like \\"\u4e2d\\" or \ud83d\ude23on Firefox and Edge","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nonBeforeInput fires after browser updates the DOM for special characters like \\"\u4e2d\\" or \ud83d\ude23on Firefox and Edge\\r\\nhttps://codesandbox.io/s/modest-franklin-muirj  \\r\\nNOTE: pasting it would not trigger the bug, you have to type it in. You can use control-command-space to open the emoji keyboard on mac\\r\\n\\r\\n**What is the expected behavior?**\\r\\nDOM should not update before onBeforeInput fires\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact: 16.3.1\\r\\nFirefox: 68.0.1 \\r\\nMac: 10.14.5\\r\\n","number":16161,"user":{"login":"Chun-Yang"},"state":"closed","created_at":"2019-07-19T00:07:06Z"},{"id":470023770,"title":"Bug: React DOM Server is mutating CSS variable names","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n### Current Behaviour\\r\\n\\r\\n - `ReactDOMServer.renderToString` is mutating CSS Variable names that are inlined and in the `--camelCase` format into `--kebab-case`\\r\\n\\r\\n### Expected Behaviour\\r\\n\\r\\n - `ReactDOMServer.renderToString` does not mutate the CSS Variable name, and keeps it in `--camelCase` format\\r\\n\\r\\n### Demo\\r\\n\\r\\n - https://codesandbox.io/s/react-dom-server-debugging-28xsr\\r\\n\\r\\n### Versions:\\r\\n\\r\\n - Issue appears in `react@16.8.6` &  `react-dom@16.8.6` \\r\\n - Issue appears in `react@16.0.0` & `react-dom@16.0.0` \\r\\n - (That\'s all I\'ve tested so far)\\r\\n\\r\\n### Other notes:\\r\\n\\r\\n - It\'s worth noting that `ReactDOM.render` is preserving the CSS Variable name and not mutating it. It only seems to only be an issue with `ReactDOMServer.renderToString`\\r\\n","number":16160,"user":{"login":"rdhaliwal"},"state":"closed","created_at":"2019-07-18T22:38:21Z"},{"id":469988603,"title":"Can I download all tutorial pdf","body":"Ictually I want to read tutorial on bus or metro so \u015fs there any download pdf option ","number":16159,"user":{"login":"meteerogl"},"state":"closed","created_at":"2019-07-18T21:04:34Z"},{"id":469959204,"title":"How add resize height to element on hover","body":"In my react project i want show modal on hover, but when hover last elements crashed layout, how i can add resize height to parent div on hover ?\\r\\n\\r\\nhttps://codesandbox.io/embed/hardcore-poitras-mt2mw?fontsize=14","number":16158,"user":{"login":"yaverm"},"state":"closed","created_at":"2019-07-18T19:53:21Z"},{"id":469956453,"title":"Add trusted types to react on client side","body":"## Trusted Types\\r\\n[Trusted Types](https://github.com/WICG/trusted-types) ([spec](https://wicg.github.io/trusted-types/dist/spec/), [introductory article](https://developers.google.com/web/updates/2019/02/trusted-types)) is a new experimental DOM API implemented within the WICG , with a working [Chrome implementation](https://www.chromestatus.com/feature/5650088592408576).\\r\\n\\r\\nThe API creates a few new objects available on the global object in the browser, like most other web APIs ([impl in TS](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts) and in [Closure compiler](https://github.com/WICG/trusted-types/blob/master/externs/externs.js)).\\r\\n\\r\\nUnder certain conditions, controlled by a HTTP header (analogous to Content-Security-Policy behavior), the API can enable the enforcement - then it changes the signature of several DOM API functions and property setters, such that they accept specific object types, and reject strings. Colloquially, DOM API becomes strongly typed.\\r\\n\\r\\nFor example, with Trusted Types Element.innerHTML property setter accepts a TrustedHTML object.\\r\\n\\r\\nTrusted Type objects stringify to their inner value. This API shape is a deliberate choice that enables existing web applications and libraries to gradually migrate from strings to Trusted Types without breaking functionality. In our example, it makes it possible to write the following:\\r\\n\\r\\n```javascript\\r\\nconst policy = TrustedTypes.createPolicy(\'foo\', { \\r\\n  createHTML: (s) => { /* some validation*/; return s} \\r\\n});\\r\\n\\r\\nconst trustedHTML = policy.createHTML(\'bar\');\\r\\nanElement.innerHTML = trustedHTML\\r\\n\\r\\nanElement.innerHTML === \'bar\'\\r\\n```\\r\\n\\r\\nThe above code works regardless if the Trusted Types enforcement is enabled or not.\\r\\n\\r\\nReading from the DOM is unaffected, so Element.innerHTML getter returns a string. That\'s for practical reasons -- web applications read from DOM more often than they write to it, and only writing exposes the application to DOM XSS risks. Typing only the setters allows us to secure web applications with minimal code changes.\\r\\n\\r\\n## Adding Trusted Types to React for client side\\r\\nReact applications rarely manipulate DOM directly as this is what React is for. That means that, if users want to opt in to Trusted Types, values assigned to execution sinks must be trusted. React on its own doesn\'t produce these execution sinks, except one [hack for IE](https://github.com/facebook/react/blob/b4178af81b02dfa0e898670ce564c4649fd8947f/packages/react-dom/src/client/setInnerHTML.js#L34). The only problem in React is the stringifying of values before assigning them to element properties or attributes. \\r\\n\\r\\nThis PR enables applications to use Trusted Types on client side. The implementation removes stringifying of trusted values in reactDOM/client. It does so **only** when Trusted Types are available in global object. If they are available, there are special [is* functions](https://wicg.github.io/trusted-types/dist/spec/#dom-trustedtypepolicyfactory-ishtml) which are used to check if the value is trusted type or not. If the value is a trusted type, we return the value itself, otherwise we preserve the original logic and stringify the value.\\r\\n\\r\\n## Problems\\r\\n**We cannot use Trusted Types in Internet Explorer (IE) when using dangerouslySetInnerHTML on svg elements** - The cause is that in IE svg elements doesn\'t have innerHTML property, which means that to support innerHTML, react needs to use a [hack](https://github.com/facebook/react/blob/b4178af81b02dfa0e898670ce564c4649fd8947f/packages/react-dom/src/client/setInnerHTML.js#L34), which wraps the innerHTML of the svg and wraps them in an svg element and assigns this to innerHTML of some HTML element. This is a problem for Trusted Types because the original svg innerHTML value is stringified. There are a few workarounds for this:\\r\\na) Use default Trusted Type policy allowing creating svg nodes\\r\\nb) Do not use svg with dangerouslySetInnerHTML but wrap the svg with div element and use dangerouslySetInnerHTML there \\r\\n     \\r\\n## Reference\\r\\n* [Draft: Add trusted types to react on server side](https://github.com/facebook/react/pull/16555)\\r\\n\\r\\n## Update\\r\\n* [TrustedURLs are deprecated](https://github.com/WICG/trusted-types/pull/204) and are going to be replaced with default policy call on javascript URLs ([which are deprecated in React and will not be supported in the future release](https://github.com/facebook/react/pull/15047/files)).\\r\\n* [window.TrustedTypes is going to be renamed to window.trustedTypes](https://github.com/WICG/trusted-types/pull/205) (with lowercase **t**)","number":16157,"user":{"login":"Siegrift"},"state":"closed","created_at":"2019-07-18T19:46:46Z"},{"id":469751343,"title":"recommend react-codemod@next until we actually ship","body":"This changest the UNSAFE_ lifecycle recommendation to `npx react-codemod@next ...`, in preparation for the release. The sequence of events is -\\r\\n- publish the next version of react-codemod with the `next` tag\\r\\n- publish the react alpha\\r\\n- let it simmer for a week or so\\r\\n- publish react-codemod stable\\r\\n- another pr that removes `@next`\\r\\n- release the kraken","number":16156,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-18T12:49:54Z"},{"id":469642073,"title":"Get the values of all child components inside parent component: ReactJS","body":"Scenario :\\r\\n\\r\\nI have a scenario where-in there is a child which is being called multiple times inside Parent.\\r\\n\\r\\nEach child components has as a set of checkboxes , an Apply and a clear button. So on click of Apply , I have to send the checked one\'s to the parent .\\r\\n\\r\\nFor example first section gives me this after I check \\"Jack\\" and click on Apply\\r\\n````````\\r\\n{key: \\"Jack\\" text: \\"Jack\\" field: \\"firstName\\" checked: true} \\r\\n`````````````\\r\\n\\r\\nNow If I go to section 2 and check on \\"Pending\\" I get\\r\\n```````````\\r\\n {key: \\"Pending\\" text: \\"Pending\\" field: \\"status\\" checked: true} \\r\\n\\r\\n`````````````````\\r\\n\\r\\nI don\'t want this behavior. Instead I want both the values some thing like this \\r\\n`````````````````\\r\\n[\\r\\n {key: \\"Jack\\" text: \\"Jack\\" field: \\"firstName\\" checked: true},\\r\\n {key: \\"Pending\\" text: \\"Pending\\" field: \\"status\\" checked: true} \\r\\n] \\r\\n\\r\\n``````````````````````\\r\\n\\r\\nor in general whichever the checked one\'s without losing the previous content.\\r\\n\\r\\nSandbox: https://codesandbox.io/s/stupefied-cohen-f5td1\\r\\n\\r\\nParent Component\\r\\n------------------\\r\\n\\r\\n```````````````````````\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\nimport Child1 from \\"./Child1\\";\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nexport default class App extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: [\\r\\n        { firstName: \\"Jack\\", status: \\"Submitted\\" },\\r\\n        { firstName: \\"Simon\\", status: \\"Pending\\" },\\r\\n        { firstName: \\"Pete\\", status: \\"Approved\\" },\\r\\n        { firstName: \\"Lucas\\", status: \\"Rejected\\" }\\r\\n      ]\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleSetData = value => {\\r\\n    console.log(value); // need to get data here from all instances of child, it should not over ride\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <Child1\\r\\n          data={this.state.data}\\r\\n          param=\\"firstName\\"\\r\\n          handleSetData={this.handleSetData}\\r\\n        />\\r\\n        <Child1\\r\\n          data={this.state.data}\\r\\n          param=\\"status\\"\\r\\n          handleSetData={this.handleSetData}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n\\r\\n`````````````````````````````\\r\\n\\r\\nChild Component\\r\\n---------------------\\r\\n\\r\\n````````````````````````\\r\\nimport React from \\"react\\";\\r\\nimport { Checkbox, Button } from \\"semantic-ui-react\\";\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nexport default class Child extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      optionsArr: [],\\r\\n      originalState: []\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleItemClick = (event, data) => {\\r\\n    const index = this.state.data.findIndex(item => item.name === data.name);\\r\\n    const optionsArr = this.state.data.map((prevState, i) =>\\r\\n      i === index\\r\\n        ? {\\r\\n            display: prevState.display,\\r\\n            name: prevState.name,\\r\\n            checked: !prevState.checked\\r\\n          }\\r\\n        : prevState\\r\\n    );\\r\\n    this.setState({ data: optionsArr });\\r\\n  };\\r\\n\\r\\n  componentDidMount() {\\r\\n    let values = this.props.data.map(arr => arr[this.props.param]);\\r\\n    var optionsArr = [];\\r\\n    for (let i = 0; i < values.length; i++) {\\r\\n      var options = {};\\r\\n      options[\\"key\\"] = values[i];\\r\\n      options[\\"text\\"] = values[i];\\r\\n      options[\\"field\\"] = this.props.param;\\r\\n      options[\\"checked\\"] = false;\\r\\n      optionsArr.push(options);\\r\\n    }\\r\\n    this.setState({ optionsArr: optionsArr, originalState: optionsArr });\\r\\n  }\\r\\n\\r\\n  clearSelection = event => {\\r\\n    this.setState({ optionsArr: this.state.originalState });\\r\\n  };\\r\\n\\r\\n  submitSelection = () => {\\r\\n    let checkedValues = this.state.optionsArr.filter(item => item.checked);\\r\\n    this.setState({ originalState: this.state.optionsArr }, () =>\\r\\n      this.props.handleSetData(checkedValues)\\r\\n    );\\r\\n  };\\r\\n\\r\\n  handleItemClick = (event, data) => {\\r\\n    const index = this.state.optionsArr.findIndex(\\r\\n      item => item.text === data.name\\r\\n    );\\r\\n    const optionsArr = this.state.optionsArr.map((prevState, i) =>\\r\\n      i === index\\r\\n        ? {\\r\\n            key: prevState.key,\\r\\n            text: prevState.text,\\r\\n            field: this.props.param,\\r\\n            checked: !prevState.checked\\r\\n          }\\r\\n        : prevState\\r\\n    );\\r\\n    this.setState({ optionsArr });\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        Child Component\\r\\n        <div className=\\"menu-item-holder\\">\\r\\n          {this.state.optionsArr.map((item, i) => (\\r\\n            <div className=\\"menu-item\\" key={i}>\\r\\n              <Checkbox\\r\\n                name={item.text}\\r\\n                onChange={this.handleItemClick}\\r\\n                checked={item.checked}\\r\\n                label={item.text}\\r\\n              />\\r\\n            </div>\\r\\n          ))}\\r\\n        </div>\\r\\n        <div className=\\"menu-btn-holder\\">\\r\\n          <Button size=\\"small\\" onClick={this.submitSelection}>\\r\\n            Apply\\r\\n          </Button>\\r\\n          <Button size=\\"small\\" onClick={this.clearSelection}>\\r\\n            Cancel\\r\\n          </Button>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n","number":16155,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-18T08:41:04Z"},{"id":469603214,"title":"Accessing state/props in callback ref with hooks","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nRequesting guidance on how to implement something with hooks that used to be possible with class components (so it\'s not quite a bug, but it might end up becoming a feature request)\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIf you want to access an external value inside a callback ref (props/state/etc.), you can use `useCallback`. However, in some cases you may want to avoid re-triggering the callback ref when one of those external values change. In that case, you could use `useRef` to work around this, and update the ref\'s value with `useEffect`/`useLayoutEffect`, like this:\\r\\n\\r\\n```\\r\\nconst valueRef = useRef(value);\\r\\nuseEffect(() => {\\r\\n  valueRef.current = value;\\r\\n}, [value]);\\r\\n\\r\\n// Now the callback ref can use `valueRef.current`\\r\\n```\\r\\n\\r\\nHowever, callback refs are called before `useEffect`/`useLayoutEffect` callbacks, so if the callback ref happens to be triggered as a result of the same render in which `value` changes, it will see the old value when it access `valueRef.current`.\\r\\n\\r\\nThis could be worked around by updating `valueRef` as a side effect of render:\\r\\n\\r\\n```\\r\\nconst valueRef = useRef(value);\\r\\nvalueRef.current = value;\\r\\n```\\r\\n\\r\\nThis is admittedly a very specific edge case, but I have actually introduced bugs into real code due to this, when trying to convert existing class components to use hooks. Another motivation for this is to use it to help implement a custom hook for making callback refs nicer to use by mimicking the `useEffect` API: https://github.com/facebook/react/issues/15176#issuecomment-512185852\\r\\n\\r\\nInterestingly, this issue does not happen with class components, because `this.props` and `this.state` have the correct value when the callback ref is triggered.\\r\\n\\r\\nHere is a codesandbox with a contrived example that reproduces the issue (and shows how the issue does not occur with a class component): https://codesandbox.io/s/callback-refhooks-72m3p\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThat there is some way of handling this use case using hooks, and in such a way that works with concurrent mode:\\r\\n\\r\\n\u2022 Wanting to access external values in a callback ref\\r\\n\u2022 Wanting to avoid triggering the callback ref when those values change\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n* React/React-DOM 16.8.6\\r\\n* Not a browser/OS-related issue\\r\\n* Also did not work in previous versions of React","number":16154,"user":{"login":"butchler"},"state":"closed","created_at":"2019-07-18T07:03:20Z"},{"id":469533395,"title":"set hook not working inside an event handler","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nset hook not working inside an event handler\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal** \\r\\nthis is the reproduction of the \\"bug\\": https://codesandbox.io/s/react-hooks-counter-demo-ds67o\\r\\n\\r\\n**What is the expected behavior?**\\r\\nit should set state inside an event handler\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n```\\r\\n\\"react\\": \\"16.8.0\\",\\r\\n\\"react-dom\\": \\"16.8.0\\",\\r\\n\\"react-scripts\\": \\"3.0.1\\"\\r\\n```\\r\\n","number":16153,"user":{"login":"MatteoGioioso"},"state":"closed","created_at":"2019-07-18T01:55:29Z"},{"id":469459857,"title":"[Flare] Add FocusWithin responder","body":"FocusWithin is implemented as a separate responder, which keeps both focus\\r\\nresponders simple and allows for easier composition of behaviours.\\r\\n\\r\\nDemo https://codesandbox.io/s/focuswithin-byl1q\\r\\n\\r\\nClose #15848","number":16152,"user":{"login":"necolas"},"state":"closed","created_at":"2019-07-17T21:40:31Z"},{"id":469422523,"title":"[Scheduler] Bugfix: Cancelling a continuation","body":"Cancelling the original task should also cancel its continuation.\\r\\n","number":16151,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-17T20:15:43Z"},{"id":469389432,"title":"setState freezes UI for some seconds","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\ni guess bug \\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI am a noob in react but this is bugging me and couldn\'t find any relevant examples online.\\r\\n\\r\\nOn checkbox onchange, I\'m changing the state using setState like this- \\r\\n```\\r\\nhandleDeleteCheckboxChange=({ target }, id) => {\\r\\n    const { deleteMappings } = this.state;\\r\\n\\r\\n    const check = target.checked;\\r\\n    if (check === true) {\\r\\n      const addToExisting = deleteMappings;\\r\\n      addToExisting.push(id);\\r\\n      this.setState({ deleteMappings: addToExisting });\\r\\n    }\\r\\n    else {\\r\\n      const removeId = deleteMappings.filter(item => item !== id);\\r\\n      this.setState({ deleteMappings: removeId });\\r\\n    }\\r\\n  }\\r\\n\\r\\n```\\r\\n\\r\\nSet state works but each time checkbox is changed, it takes a full second to two to get updated on the screen. I tried to remove setState and its fast. \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16150,"user":{"login":"arswaroop"},"state":"closed","created_at":"2019-07-17T18:54:53Z"},{"id":469301767,"title":"How to get the data from of the child components inside of a parent compoNent: React JS","body":"I have a scenario where-in there a child and a parent component. Within this parent, I am calling this child components twice.\\r\\n\\r\\nEach child components has as a set of checkboxes has an Apply and a clear button. So on click of Apply , I have to send the checked one\'s to the parent . \\r\\n\\r\\nSince I am having two instances of the same child components within the parent, the click of Apply inside each child results in content is getting over-written. \\r\\n\\r\\nIs there a way where I can get the all the data from child components without getting over-written?\\r\\n\\r\\nAll I want is get the data of child components(the checked one\'s from each child)\\r\\n\\r\\nHelp would be appreciated!\\r\\n\\r\\n\\r\\nSandbox: https://codesandbox.io/s/stupefied-cohen-f5td1\\r\\n\\r\\nParent Component\\r\\n------------------\\r\\n\\r\\n```````````````````````\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\nimport Child1 from \\"./Child1\\";\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nexport default class App extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: [\\r\\n        { firstName: \\"Jack\\", status: \\"Submitted\\" },\\r\\n        { firstName: \\"Simon\\", status: \\"Pending\\" },\\r\\n        { firstName: \\"Pete\\", status: \\"Approved\\" },\\r\\n        { firstName: \\"Lucas\\", status: \\"Rejected\\" }\\r\\n      ]\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleSetData = value => {\\r\\n    console.log(value);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <Child1\\r\\n          data={this.state.data}\\r\\n          param=\\"firstName\\"\\r\\n          handleSetData={this.handleSetData}\\r\\n        />\\r\\n        <Child1\\r\\n          data={this.state.data}\\r\\n          param=\\"status\\"\\r\\n          handleSetData={this.handleSetData}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n\\r\\n`````````````````````````````\\r\\n\\r\\nChild Component\\r\\n---------------------\\r\\n\\r\\n````````````````````````\\r\\nimport React from \\"react\\";\\r\\nimport { Checkbox, Button } from \\"semantic-ui-react\\";\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nexport default class Child extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      optionsArr: [],\\r\\n      originalState: []\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleItemClick = (event, data) => {\\r\\n    const index = this.state.data.findIndex(item => item.name === data.name);\\r\\n    const optionsArr = this.state.data.map((prevState, i) =>\\r\\n      i === index\\r\\n        ? {\\r\\n            display: prevState.display,\\r\\n            name: prevState.name,\\r\\n            checked: !prevState.checked\\r\\n          }\\r\\n        : prevState\\r\\n    );\\r\\n    this.setState({ data: optionsArr });\\r\\n  };\\r\\n\\r\\n  componentDidMount() {\\r\\n    let values = this.props.data.map(arr => arr[this.props.param]);\\r\\n    var optionsArr = [];\\r\\n    for (let i = 0; i < values.length; i++) {\\r\\n      var options = {};\\r\\n      options[\\"key\\"] = values[i];\\r\\n      options[\\"text\\"] = values[i];\\r\\n      options[\\"field\\"] = this.props.param;\\r\\n      options[\\"checked\\"] = false;\\r\\n      optionsArr.push(options);\\r\\n    }\\r\\n    this.setState({ optionsArr: optionsArr, originalState: optionsArr });\\r\\n  }\\r\\n\\r\\n  clearSelection = event => {\\r\\n    this.setState({ optionsArr: this.state.originalState });\\r\\n  };\\r\\n\\r\\n  submitSelection = () => {\\r\\n    let checkedValues = this.state.optionsArr.filter(item => item.checked);\\r\\n    this.setState({ originalState: this.state.optionsArr }, () =>\\r\\n      this.props.handleSetData(checkedValues)\\r\\n    );\\r\\n  };\\r\\n\\r\\n  handleItemClick = (event, data) => {\\r\\n    const index = this.state.optionsArr.findIndex(\\r\\n      item => item.text === data.name\\r\\n    );\\r\\n    const optionsArr = this.state.optionsArr.map((prevState, i) =>\\r\\n      i === index\\r\\n        ? {\\r\\n            key: prevState.key,\\r\\n            text: prevState.text,\\r\\n            field: this.props.param,\\r\\n            checked: !prevState.checked\\r\\n          }\\r\\n        : prevState\\r\\n    );\\r\\n    this.setState({ optionsArr });\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        Child Component\\r\\n        <div className=\\"menu-item-holder\\">\\r\\n          {this.state.optionsArr.map((item, i) => (\\r\\n            <div className=\\"menu-item\\" key={i}>\\r\\n              <Checkbox\\r\\n                name={item.text}\\r\\n                onChange={this.handleItemClick}\\r\\n                checked={item.checked}\\r\\n                label={item.text}\\r\\n              />\\r\\n            </div>\\r\\n          ))}\\r\\n        </div>\\r\\n        <div className=\\"menu-btn-holder\\">\\r\\n          <Button size=\\"small\\" onClick={this.submitSelection}>\\r\\n            Apply\\r\\n          </Button>\\r\\n          <Button size=\\"small\\" onClick={this.clearSelection}>\\r\\n            Cancel\\r\\n          </Button>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n","number":16149,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-17T15:53:41Z"},{"id":469198533,"title":"[Flare] Add Input event responder surface","body":"This PR adds the `Input` event responder. This isn\'t an `<input />` DOM node, it\'s a responder surface to capture the following events:\\r\\n\\r\\n- `onChange`\\r\\n- `onValueChange`\\r\\n\\r\\nI\'ve taken almost all (minus a few that were not needed) tests from the existing ChangeEventPlugin from ReactDOM and they all pass correctly with this event responder, meaning you can do this:\\r\\n\\r\\n```jsx\\r\\nimport {Input} from \'react-events/input\';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const [value, setValue] = useState(\'\');\\r\\n  \\r\\n  return (\\r\\n    <Input onValueChange={setValue}>\\r\\n      <input type=\\"text\\" value={value} />\\r\\n    </Input>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nYou could abstract this into a hook and a text field component and it becomes really nice to compose:\\r\\n\\r\\n```jsx\\r\\nimport {Input, useInput} from \'react-events/input\';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const value = useInputValue();\\r\\n  return <TextField value={value} />\\r\\n}\\r\\n\\r\\nfunction useInputValue() {\\r\\n  const [value, onValueChange] = useState(\'\');\\r\\n  useInput({ onValueChange });\\r\\n  return value;\\r\\n}\\r\\n\\r\\nfunction TextField({value}) {\\r\\n  return (\\r\\n    <Input>\\r\\n      <input type=\\"text\\" value={value} />\\r\\n    </Input>\\r\\n  );\\r\\n}\\r\\n```","number":16148,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-17T13:37:06Z"},{"id":469168858,"title":"Increase `NESTED_UPDATE_LIMIT`","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI am creating a mobile app using Expo (SDK33).  I\'m using redux, redux-form, react-navigation, and redux-persist, amongst other things.  Without doing anything ridiculous, I have hit the `NESTED_UPDATE_LIMIT` just by having a reasonably deep component tree.\\r\\n\\r\\n```\\r\\n    in ConnectFunction (created by Connect(Form(Connect(BaseQuestionnairePage))))\\r\\n    in Connect(Form(Connect(BaseQuestionnairePage))) (created by ReduxForm)\\r\\n    in ReduxForm (created by Context.Consumer)\\r\\n    in Hoc (created by ReduxForm)\\r\\n    in ReduxForm (created by ConnectFunction)\\r\\n    in ConnectFunction (created by Connect(ReduxForm))\\r\\n    in Connect(ReduxForm) (at QuestionnaireScreen.jsx:17)\\r\\n    in RCTScrollContentView (at ScrollView.js:976)\\r\\n    in RCTScrollView (at ScrollView.js:1115)\\r\\n    in ScrollView (at Wizard.jsx:84)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at Wizard.jsx:83)\\r\\n    in BaseWizardInterface (created by ConnectFunction)\\r\\n    in ConnectFunction (at Wizard.jsx:173)\\r\\n    in BaseWizard (created by ConnectFunction)\\r\\n    in ConnectFunction (at QuestionnaireScreen.jsx:12)\\r\\n    in _default (created by SceneView)\\r\\n    in SceneView (at StackViewLayout.tsx:899)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at createAnimatedComponent.js:151)\\r\\n    in AnimatedComponent (at StackViewCard.tsx:93)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at createAnimatedComponent.js:151)\\r\\n    in AnimatedComponent (at screens.native.js:59)\\r\\n    in Screen (at StackViewCard.tsx:80)\\r\\n    in Card (at createPointerEventsContainer.tsx:95)\\r\\n    in Container (at StackViewLayout.tsx:971)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at screens.native.js:83)\\r\\n    in ScreenContainer (at StackViewLayout.tsx:383)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at createAnimatedComponent.js:151)\\r\\n    in AnimatedComponent (at StackViewLayout.tsx:379)\\r\\n    in PanGestureHandler (at StackViewLayout.tsx:372)\\r\\n    in StackViewLayout (at withOrientation.js:30)\\r\\n    in withOrientation (at StackView.tsx:103)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at Transitioner.tsx:267)\\r\\n    in Transitioner (at StackView.tsx:40)\\r\\n    in StackView (created by Navigator)\\r\\n    in Navigator (at createKeyboardAwareNavigator.js:12)\\r\\n    in KeyboardAwareNavigator (at create-redux-container.js:72)\\r\\n    in NavigatorReduxWrapper (created by ConnectFunction)\\r\\n    in ConnectFunction (at App.jsx:36)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at StatusBarWrapper.jsx:49)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at StatusBarWrapper.jsx:48)\\r\\n    in BaseStatusBarWrapper (created by ConnectFunction)\\r\\n    in ConnectFunction (at App.jsx:35)\\r\\n    in BaseAuthGate (created by ConnectFunction)\\r\\n    in ConnectFunction (at App.jsx:34)\\r\\n    in PersistGate (at App.jsx:33)\\r\\n    in Provider (at App.jsx:32)\\r\\n    in _default (at withExpoRoot.js:20)\\r\\n    in RootErrorBoundary (at withExpoRoot.js:19)\\r\\n    in ExpoRootComponent (at renderApplication.js:35)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at AppContainer.js:98)\\r\\n    in RCTView (at View.js:45)\\r\\n    in View (at AppContainer.js:115)\\r\\n    in AppContainer (at renderApplication.js:34)\\r\\n```\\r\\n\\r\\nFrom what I can tell, there are:\\r\\n\\r\\n* Eight layers for expo or react-native\'s bootstrapping;\\r\\n* A layer for the redux store `Provider`;\\r\\n* A layer for redux-persist\'s `PersistGate`;\\r\\n* Two layers for my `AuthGate` (as it\'s connected to the store with a HOC, `connect()`);\\r\\n* Two layers for my `StatusBarWrapper`;\\r\\n* Four layers for the `<View><View /></View>` in my `StatusBarWrapper`, (they come with `<RCTView />`s apparently);\\r\\n* Twenty-eight layers for `react-navigation`\'s `StackNavigator`;\\r\\n* Nine layers for my `Wizard`, (two for the outer component, connected to the store, two for the inner component also connected to the store, two for a `<View />`, and three for a `<ScrollView />`);\\r\\n* Seven layers for my `QuestionnairePage`, (one redux `connect()` HOC to connect the redux-form to the store to load initial values, one redux `connect()` HOC that the `redux-form` connects _itself_ to the store with for its own purposes, one for the `ReduxForm` itself, one for the HOC it contains, one for a context consumer layer (I think?), then finally two more for my actual form.\\r\\n\\r\\nGiven that\'s 62 in total, I imagine that perhaps the eight expo/react-native bootstrapping layers aren\'t counted, meaning the final seven layers push it over the edge.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n`NESTED_UPDATE_LIMIT` is there to provide oven mitts for infinite loops, right?  Every single question I found on Stack Overflow about this invariant was someone not understanding how JSX works and calling `.setState()` in `.render()`, which isn\'t at all what I\'m doing.  I don\'t understand why the detection for _infinite_ loops is set to such a low threshold.\\r\\n\\r\\nIn my opinion, `NESTED_UPDATE_LIMIT` should be at least 10x higher.  It\'ll still catch infinite loops just fine, and won\'t take much longer to do so, but won\'t kick my ass for having the audacity to use several libraries and a reasonably deep structure.\\r\\n\\r\\nFailing that, it should be configurable.  As I said, I\'m using expo, which I believe means there\'s no way for me to change this value when publishing my app.  I can edit it in `node_modules/` just fine on my local machine (and the error goes away of course), but with no way to do so on the build servers, I can\'t make this app.  Not with react, anyway.  I really don\'t want that to be the case, because I\'ve been building this for months, at this point, and starting over in swift or whatever would be an awful cost to my employers just because someone thought \\"50 is enough for anyone\\".  :/\\r\\n\\r\\nAs it seems like the expo bootstrapping layers are being ignored, I\'m going to start diving in to that code now to see if I can steal its ideas, but of course I shouldn\'t have to.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```\\r\\n  \\"dependencies\\": {\\r\\n    \\"@expo/browser-polyfill\\": \\"0.0.1-alpha.3\\",\\r\\n    \\"@expo/vector-icons\\": \\"10.0.1\\",\\r\\n    \\"@react-navigation/core\\": \\"3.3.1\\",\\r\\n    \\"airbnb-prop-types\\": \\"2.13.2\\",\\r\\n    \\"axios\\": \\"0.18.0\\",\\r\\n    \\"buffer\\": \\"5.2.1\\",\\r\\n    \\"expo\\": \\"33.0.0\\",\\r\\n    \\"expo-constants\\": \\"5.0.1\\",\\r\\n    \\"expo-gl\\": \\"5.0.1\\",\\r\\n    \\"expo-web-browser\\": \\"5.0.3\\",\\r\\n    \\"lodash\\": \\"4.17.11\\",\\r\\n    \\"moment\\": \\"2.24.0\\",\\r\\n    \\"path\\": \\"0.12.7\\",\\r\\n    \\"pixi.js\\": \\"4.7.0\\",\\r\\n    \\"prop-types\\": \\"15.7.2\\",\\r\\n    \\"react\\": \\"16.8.4\\",\\r\\n    \\"react-moment-proptypes\\": \\"1.6.0\\",\\r\\n    \\"react-native\\": \\"https://github.com/expo/react-native/archive/sdk-33.0.0.tar.gz\\",\\r\\n    \\"react-navigation\\": \\"3.11.0\\",\\r\\n    \\"react-navigation-redux-helpers\\": \\"3.0.2\\",\\r\\n    \\"react-redux\\": \\"7.1.0\\",\\r\\n    \\"react-switch-case\\": \\"1.0.6\\",\\r\\n    \\"redux\\": \\"4.0.1\\",\\r\\n    \\"redux-form\\": \\"8.2.1\\",\\r\\n    \\"redux-persist\\": \\"5.10.0\\",\\r\\n    \\"redux-persist-expo-securestore\\": \\"2.0.0\\",\\r\\n    \\"redux-thunk\\": \\"2.3.0\\",\\r\\n    \\"reselect\\": \\"4.0.0\\",\\r\\n    \\"whatwg-url\\": \\"7.0.0\\"\\r\\n  },\\r\\n```\\r\\n\\r\\nLinux Mint 18, iOS 12.2.  Most likely didn\'t work in previous versions of react, but I haven\'t checked.","number":16147,"user":{"login":"Asday"},"state":"closed","created_at":"2019-07-17T12:38:29Z"},{"id":469011843,"title":"scheduler package use set but don\'t use es6-shim","body":"When I use a vivo phone\uff0cI find a browser console error, That is scheduler package use set, \\r\\nLike: \\r\\nsubscribers = new Set();\\r\\n\\r\\nBut Browser don\'t support es6 \\r\\n\\r\\nCan you help me Fix this ?\\r\\n\\r\\n","number":16146,"user":{"login":"souoxs"},"state":"closed","created_at":"2019-07-17T06:31:47Z"},{"id":468952209,"title":"[Scheduler] Profiling features","body":"Adds two new profiling features to Scheduler.\\r\\n\\r\\n## Sample-based approach\\r\\n\\r\\nThe main feature is a way to read the current state of the Scheduler from a worker, using a shared array buffer. The shared array buffer contains (only in the profiling and development builds)\\r\\n\\r\\n- the priority at which Scheduler is currently running (or 0 if it\'s not)\\r\\n- the size of the queue\\r\\n- the id of the currently running task (if applicable)\\r\\n- a unique \\"run id\\" per block (if applicable)\\r\\n\\r\\nRegarding the last point each synchronous block of Scheduler work is given a unique run ID. This is different than a task ID because a single task will have more than one run if it yields with a continuation.\\r\\n\\r\\nThe worker thread can use this information to construct a flamegraph. The advantage of the sample-based approach is that it scales in proportion to the available resources \u2014 if the CPU slows down, the sample rate slows down accordingly.\\r\\n\\r\\n## Event-based approach\\r\\n\\r\\nThe disadvantage of the sample-based approach is that it doesn\'t during the very first part of page initialization, before the worker has initialized.\\r\\n\\r\\nTo address this problem, there\'s a separate feature to write to a log of events: `startLoggingProfilerEvents` and `stopLoggingProfilerEvents`.\\r\\n\\r\\n`stopLoggingProfilerEvents` returns a typed, 32-bit integer array buffer (though not a shared array buffer). The log conforms to a custom event format. A profiler can then convert this log into a flamegraph.\\r\\n\\r\\nAn array buffer is used so that the log can be sent to a worker thread via `postMessage` and the structured clone algorithm.\\r\\n\\r\\nThe test suite works by printing a text representation of a Scheduler flamegraph. Example:\\r\\n\\r\\n```\\r\\n!!! Main thread              \u2502          \u2588\u2588\\r\\nTask 2 [User-blocking]       \u2502        \u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\\r\\nTask 1 [Normal]              \u2502  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\\r\\n```\\r\\n\\r\\n## Both approaches combined\\r\\n\\r\\nThe suggested approach is to use the event log during page start up, then switch to the sample-based approach once the profiler worker is ready.","number":16145,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-17T02:20:54Z"},{"id":468840467,"title":"Provide easy way to add `debugger` to \\"lifecycle hook scheduled a cascading update\\" errors","body":"**Do you want to request a *feature* or report a *bug*?** Feature\\r\\n\\r\\n**What is the current behavior?** Can\'t find a way to place a debugger on \\"lifecycle hook scheduled a cascading update\\" errors\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI\'m getting this error currently, I tried adding a debugger in `react-scheduler` but it seems Webpack doesn\'t pick it up, which means it\'s not actually importing that in development mode I guess. I don\'t see this message anywhere in react.development.js, so I guess I\'m wondering where this code is coming from?\\r\\n\\r\\nI don\'t need this as a feature but rather just to know where/how you can get a debug breakpoint here, but after [reading this thread](https://github.com/reduxjs/react-redux/issues/834) I didn\'t see any clear resolution so I wanted to start a ticket for it.","number":16144,"user":{"login":"natew"},"state":"closed","created_at":"2019-07-16T20:08:37Z"},{"id":468812219,"title":"Support React.createContext in ReactShallowRenderer","body":"Fixes #14442\\r\\n\\r\\n- Adds support for `React.createContext` and `contextType` in React.ShallowRenderer.\\r\\n\\r\\n- We\'re still supporting [contextTypes](https://reactjs.org/docs/context.html#legacy-api) in React 16.x releases, so the code for that was not removed.","number":16143,"user":{"login":"hassaans"},"state":"open","created_at":"2019-07-16T18:56:43Z"},{"id":468572851,"title":"Need to get all the values of all the child component instances and use it in parents method: ReactJS","body":"I have this scenario where I have a table(react-table), where I am applying column level filtering. I have extracted this as a separate component(DropdDown Component) and this can be attached to any column . I am maintaining  a method inside parent component which picks up the union of all the values i.e., selected values of all the dropdowns and then apply server side filtering.\\r\\n\\r\\nNow the challenge here is , How can i get this consolidated values inside the parent component method? \\r\\n\\r\\nThis DropDown component has list of unique values with respect to that column, there is an Apply button , which applies the server side filtering. Now if I jump onto another column, I need to get the previously checked values and also the current values.\\r\\n\\r\\nInside handleSetData() filtering logic is written, I need to get the data from DropDown Component. Everytime I click on Apply on a column filter, I need to get the previously checked values as well.\\r\\n\\r\\nCan someone help me with this:\\r\\n\\r\\nCode Sandbox: https://codesandbox.io/s/quizzical-glitter-np8iw\\r\\n\\r\\n\\r\\nApp Component\\r\\n----------------\\r\\n`````````````````````\\r\\nimport * as React from \\"react\\";\\r\\nimport { render } from \\"react-dom\\";\\r\\nimport ReactTable from \\"react-table\\";\\r\\nimport \\"./styles.css\\";\\r\\nimport \\"react-table/react-table.css\\";\\r\\nimport DropDownComponent from \\"./DropDown\\";\\r\\ninterface IState {\\r\\n  data: {}[];\\r\\n  columns: {}[];\\r\\n}\\r\\n\\r\\ninterface IProps {}\\r\\n\\r\\nexport default class App extends React.Component<IProps, IState> {\\r\\n  constructor(props: any) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: [\\r\\n        { firstName: \\"aaaaa\\", status: \\"Pending\\", visits: 155 },\\r\\n        { firstName: \\"aabFaa\\", status: \\"Pending\\", visits: 155 },\\r\\n        { firstName: \\"adaAAaaa\\", status: \\"Approved\\", visits: 1785 },\\r\\n        { firstName: \\"aAaaaa\\", status: \\"Approved\\", visits: 175 },\\r\\n        { firstName: \\"adaSaaa\\", status: \\"Cancelled\\", visits: 165 },\\r\\n        { firstName: \\"aaaaa\\", status: \\"Cancelled\\", visits: 157 },\\r\\n        { firstName: \\"aaaaa\\", status: \\"Approved\\", visits: 153 },\\r\\n        { firstName: \\"aaaaa\\", status: \\"Pending\\", visits: 155 }\\r\\n      ],\\r\\n      columns: []\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleSetState = (columns: any) => {\\r\\n    this.setState({ columns });\\r\\n  };\\r\\n\\r\\n  handleSetData = (value: any) => {\\r\\n    console.log(value); // Here filtering logic is written, I need to get the data from DropDown Component. Everytime I click on Apply on a column filter, I need to get the previously checked values as well\\r\\n  };\\r\\n\\r\\n  componentDidMount() {\\r\\n    let columns = [\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div style={{ position: \\"absolute\\", marginLeft: \\"10px\\" }}>\\r\\n              <DropDownComponent\\r\\n                data={this.state.data}\\r\\n                handleSetData={this.handleSetData}\\r\\n                param=\\"firstName\\"\\r\\n              />\\r\\n            </div>\\r\\n            <span>First Name</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"firstName\\",\\r\\n        sortable: false,\\r\\n        show: true,\\r\\n        displayValue: \\" First Name\\"\\r\\n      },\\r\\n      {\\r\\n        Header: () => (\\r\\n          <div>\\r\\n            <div style={{ position: \\"absolute\\", marginLeft: \\"10px\\" }}>\\r\\n              <DropDownComponent\\r\\n                data={this.state.data}\\r\\n                handleSetData={this.handleSetData}\\r\\n                param=\\"status\\"\\r\\n              />\\r\\n            </div>\\r\\n            <span>Status</span>\\r\\n          </div>\\r\\n        ),\\r\\n        accessor: \\"status\\",\\r\\n        sortable: false,\\r\\n        show: true,\\r\\n        displayValue: \\" Status \\"\\r\\n      },\\r\\n      {\\r\\n        Header: \\"Visits\\",\\r\\n        accessor: \\"visits\\",\\r\\n        sortable: false,\\r\\n        show: true,\\r\\n        displayValue: \\" Visits \\"\\r\\n      }\\r\\n    ];\\r\\n    this.setState({ columns });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { data, columns } = this.state;\\r\\n    return (\\r\\n      <div>\\r\\n        <ReactTable\\r\\n          data={data}\\r\\n          columns={columns}\\r\\n          defaultPageSize={10}\\r\\n          className=\\"-striped -highlight\\"\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nrender(<App />, rootElement);\\r\\n\\r\\n``````````````````````````````\\r\\n\\r\\nDropDown Component\\r\\n-----------------------\\r\\n``````````````````````````````\\r\\nimport * as React from \\"react\\";\\r\\nimport { Button, Checkbox, Icon } from \\"semantic-ui-react\\";\\r\\ninterface IProps {\\r\\n  data: {}[];\\r\\n  handleSetData(arr: any): void;\\r\\n  handleSetData(arr: any): void;\\r\\n  param: string;\\r\\n}\\r\\ninterface IState {\\r\\n  showList: boolean;\\r\\n  optionsArr: {}[];\\r\\n  originalState: {}[];\\r\\n}\\r\\n\\r\\nexport default class DropDownComponent extends React.Component<IProps, IState> {\\r\\n  constructor(props: any) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showList: false,\\r\\n      optionsArr: [],\\r\\n      originalState: []\\r\\n    };\\r\\n  }\\r\\n\\r\\n  toggleList = () => {\\r\\n    this.setState(prevState => ({ showList: !prevState.showList }));\\r\\n  };\\r\\n\\r\\n  handleItemClick = (event: React.FormEvent<HTMLInputElement>, data: any) => {\\r\\n    const index = this.state.optionsArr.findIndex(\\r\\n      (item: any) => item.text === data.name\\r\\n    );\\r\\n    const optionsArr = this.state.optionsArr.map((prevState: any, i: any) =>\\r\\n      i === index\\r\\n        ? {\\r\\n            key: prevState.key,\\r\\n            text: prevState.text,\\r\\n            checked: !prevState.checked\\r\\n          }\\r\\n        : prevState\\r\\n    );\\r\\n    this.setState({ optionsArr });\\r\\n  };\\r\\n\\r\\n  submitSelection = () => {\\r\\n    console.log(this.state.optionsArr.filter((item: any) => item.checked)); // This gives me selecte ones\\r\\n    let checkedValues: any = this.state.optionsArr.filter(\\r\\n      (item: any) => item.checked\\r\\n    );\\r\\n    this.setState({ originalState: this.state.optionsArr }, () =>\\r\\n      this.props.handleSetData(checkedValues)\\r\\n    );\\r\\n  };\\r\\n\\r\\n  componentDidMount() {\\r\\n    if (this.props.data) {\\r\\n      let arr = this.props.data;\\r\\n      let uniqueValues = Array.from(\\r\\n        new Set(arr.map((arr: any) => arr[this.props.param]))\\r\\n      );\\r\\n      var optionsArr = [];\\r\\n      for (let i = 0; i < uniqueValues.length; i++) {\\r\\n        var options: any = {};\\r\\n        options[\\"key\\"] = uniqueValues[i];\\r\\n        options[\\"text\\"] = uniqueValues[i];\\r\\n        options[\\"checked\\"] = false;\\r\\n        optionsArr.push(options);\\r\\n      }\\r\\n      this.setState({ optionsArr: optionsArr, originalState: optionsArr });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  clearSelection = (event: any) => {\\r\\n    // Push it to previous state, before cancel was clicked\\r\\n    this.setState({ showList: false, optionsArr: this.state.originalState });\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    let { showList } = this.state;\\r\\n    let visibleFlag: string;\\r\\n    if (showList === true) visibleFlag = \\"visible\\";\\r\\n    else visibleFlag = \\"\\";\\r\\n    return (\\r\\n      <div>\\r\\n        <div style={{ position: \\"absolute\\" }}>\\r\\n          <div\\r\\n            className={\\r\\n              \\"ui scrolling dropdown column-settings customized \\" +\\r\\n              visibleFlag +\\r\\n              \\" \\" +\\r\\n              this.props.menuDirection\\r\\n            }\\r\\n          >\\r\\n            <Icon className=\\"filter\\" onClick={this.toggleList} />\\r\\n              {this.state.optionsArr.length > 0 ? (\\r\\n                <>\\r\\n                  <div className=\\"menu-item-holder\\">\\r\\n                    {this.state.optionsArr.map((item: any, i: number) => (\\r\\n                      <div className=\\"menu-item\\" key={i}>\\r\\n                        <Checkbox\\r\\n                          name={item.text}\\r\\n                          onChange={this.handleItemClick}\\r\\n                          checked={item.checked}\\r\\n                          label={item.text}\\r\\n                        />\\r\\n                      </div>\\r\\n                    ))}\\r\\n                  </div>\\r\\n                  <div className=\\"menu-btn-holder\\">\\r\\n                    <Button size=\\"small\\" onClick={this.submitSelection}>\\r\\n                      Apply\\r\\n                    </Button>\\r\\n                    <Button size=\\"small\\" onClick={this.clearSelection}>\\r\\n                      Cancel\\r\\n                    </Button>\\r\\n                  </div>\\r\\n                </>\\r\\n              ) : (\\r\\n                \\"\\"\\r\\n              )}\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n  ","number":16142,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-16T10:23:37Z"},{"id":468518301,"title":"Move ReactFiberErrorDialog RN fork into RN itself","body":"Along with facebook/react-native#25671, moves the RN-specific implementation of `ReactFiberErrorDialog` from React to RN. This should only be merged (and subsequently synced to RN) _after_ facebook/react-native#25671 lands.\\r\\n\\r\\nAlso, with this, React doesn\'t use `ExceptionsManager` directly anymore, so we remove it from the RN private interface definition.","number":16141,"user":{"login":"motiz88"},"state":"closed","created_at":"2019-07-16T08:30:39Z"},{"id":468452700,"title":"Deno support or Deno rewrite pilot program","body":"# \ud83d\ude80 feature request\\r\\nWould like [Deno](https://deno.land/) runtime support.\\r\\n\\r\\n### Description\\r\\nThis is a new runtime that has was created by [Ryan Dahl](https://en.wikipedia.org/wiki/Ryan_Dahl), the original creator of [NodeJS](https://nodejs.org/en/). It has several new advantages:\\r\\n\\r\\n- Use of Promises\\r\\n- Uses TypeScript out of the box\\r\\n- no need for node_modules\\r\\n- uses urls to load dependencies (might be a plus or minus). \\r\\n","number":16140,"user":{"login":"inunotaisho26"},"state":"closed","created_at":"2019-07-16T05:21:39Z"},{"id":468359445,"title":"Dev tools inject get component name and describe component frame","body":"This change is being made to enable DevTools to eagerly patch the console (before a renderer has been attached to the frontend) so that e.g. React Native developers can still get component stacks even if they aren\'t using the DevTools UI.\\r\\n\\r\\nWe don\'t strictly _need_ to inject these methods, but since the logic for getting the display name of a component is tied to the renderer version, this simplifies things for DevTools.\\r\\n\\r\\nAt this point, it would be much easier to just inject `ReactDebugCurrentFrame` and let it create the stacks for us- _but_ that would prevent DevTools from being able to create an owners-only stack, which I think is rather nice to have.","number":16139,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-07-15T22:15:35Z"},{"id":468336917,"title":"Memory leak - React DOM keeps references to previous states/props/children of component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nReactDOM keeps references to previous states/props/children when component gets updated. All in all consuming three times as much memory as it really needed.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nLink to the example below (using production versions of `react` and `react-dom`):\\r\\nhttps://codesandbox.io/s/epic-bartik-pvgqx.\\r\\n\\r\\nConsider following example:\\r\\n```\\r\\nimport * as React from \'react\';\\r\\nimport * as ReactDOM from \'react-dom\';\\r\\n\\r\\nlet dataInstanceCount = 0;\\r\\nclass MyBigData {\\r\\n  constructor() {\\r\\n    const id = `my-big-data:${dataInstanceCount++}`;\\r\\n    this.getMyDataId = () => id;\\r\\n    this.data = new Array(100000).fill(\'\');\\r\\n  }\\r\\n}\\r\\n\\r\\nlet componentInstanceCount = 0;\\r\\nclass MyItem extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this._myItemId = `my-item:${componentInstanceCount++}`;\\r\\n    this.state = {list: []};\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return this.props.item.getMyDataId();\\r\\n  }\\r\\n}\\r\\n\\r\\nclass MyApp extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {list: []};\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    this.updateList(() => {\\r\\n      this.updateList(() => {\\r\\n        this.updateList();\\r\\n      });\\r\\n    });\\r\\n  }\\r\\n\\r\\n  updateList(callback) {\\r\\n    this.setState({\\r\\n      list: [new MyBigData()]\\r\\n    }, callback);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return this.state.list.map((item) => (\\r\\n      <MyItem key={item.getMyDataId()} item={item} />\\r\\n    ));\\r\\n  }\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\'root\');\\r\\nReactDOM.render(\\r\\n  <MyApp />,\\r\\n  rootElement\\r\\n);\\r\\n\\r\\nsetTimeout(() => {\\r\\n  console.log(\\r\\n    rootElement._reactRootContainer._internalRoot.current.alternate.firstEffect.memoizedProps.item.getMyDataId(),\\r\\n    rootElement._reactRootContainer._internalRoot.current.alternate.firstEffect.stateNode._myItemId\\r\\n  );\\r\\n  // > my-big-data:0, my-item:0\\r\\n  console.log(\\r\\n    rootElement._reactRootContainer._internalRoot.current.firstEffect.memoizedProps.item.getMyDataId(),\\r\\n    rootElement._reactRootContainer._internalRoot.current.firstEffect.stateNode._myItemId\\r\\n  );\\r\\n  // > my-big-data:1, my-item:1\\r\\n  console.log(\\r\\n    rootElement._reactRootContainer._internalRoot.current.lastEffect.memoizedProps.item.getMyDataId(),\\r\\n    rootElement._reactRootContainer._internalRoot.current.lastEffect.stateNode._myItemId\\r\\n  );\\r\\n  // > my-big-data:2, my-item:2\\r\\n}, 1000);\\r\\n```\\r\\n\\r\\nI expect only one `MyBigObject` and one `MyItem` component to be in the memory. But instead I can see three of each in memory heap snapshot.\\r\\n\\r\\n***UPDATE***\\r\\nAs shown in the updated example the references to these objects and components can be accessed in the sub-properties of the root DOM element.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThere\'s no justifiable reason to keep in memory unmounted components and previous states/props of component after it was updated.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.9.0, ReactDOM 16.9.0 (Production versions)\\r\\nMac/Win\\r\\n","number":16138,"user":{"login":"dmitrysteblyuk"},"state":"open","created_at":"2019-07-15T21:10:04Z"},{"id":468264781,"title":"IE11 Syntax error when using Contexts","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIE 11 is displaying blank page when using React Contexts. Console says Syntax Error\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhttps://github.com/miluna/react-IE11-bug-minimal\\r\\n\\r\\n**What is the expected behavior?**\\r\\nPage rendering using React Router, Contexts and the necessary polyfills, just like Google Chrome\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nWin10, React 16.8.6, IE11, Chrome v75","number":16137,"user":{"login":"miluna"},"state":"closed","created_at":"2019-07-15T18:11:50Z"},{"id":468244425,"title":"Calling a hook setter recursively in a setTimeout is producing unexpected behaviour.","body":"**Do you want to request a *feature* or report a *bug*?** a bug, or I\'m using wrong \ud83d\ude04 \\r\\n\\r\\n**What is the current behavior?**\\r\\n```js\\r\\nconst [items, setItems] = useState([]);\\r\\n\\r\\nfunction addItems(delay = 0) {\\r\\n  setItems(items.concat({ timestamp: new Date() }));\\r\\n  setTimeout(() => {\\r\\n    addItems();\\r\\n  }, 1000);\\r\\n}\\r\\n\\r\\n\\r\\n//\\r\\n<button onClick={addItems}>Add items</button>;\\r\\n{\\r\\n  items.map((item, index) => \\r\\n     <div key={index}> {JSON.stringify(item)} </div>\\r\\n );\\r\\n}\\r\\n```\\r\\n![2019-07-15 19 14 58](https://user-images.githubusercontent.com/2982512/61235084-ebefa580-a734-11e9-97b4-8f54a72d5695.gif)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/broken-smoke-5x6g5\\r\\n\\r\\n**What is the expected behavior?**\\r\\n`items` will contain more and more items after the button is clicked.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? `16.8.6` Did this work in previous versions of React?** `no`\\r\\n","number":16136,"user":{"login":"tkrugg"},"state":"closed","created_at":"2019-07-15T17:22:39Z"},{"id":468167160,"title":"<g> or <text> are unrecognized in Jest","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n**BUG**\\r\\n**What is the current behavior?**\\r\\nI am using some SVG tags, especially for customized components from `recharts` library. These customized components tend to fall into this kind of warnings:\\r\\n\\r\\n```\\r\\n Warning: The tag <text> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\\r\\n```\\r\\n\\r\\nSame happens for `<g>` tag or `<circle>`.  It would be nice if Jest can recognize it, or at least ignore it \\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nRun jest without failing into this warning\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.6\\r\\nChrome 75.0.3770.100\\r\\n\\r\\nI think these 3 tags should be specified in after this line https://github.com/facebook/react/blob/67e3f3fb6e342f95f00215c84d5d013d7b0e1b33/packages/react-dom/src/client/ReactDOMComponent.js#L131\\r\\n\\r\\nIf this is a valid issue, and that\'s the place, I could  have a look to add them and adapt the tests to make it work \ud83d\ude04 ","number":16135,"user":{"login":"Ruffeng"},"state":"closed","created_at":"2019-07-15T14:40:09Z"},{"id":467958965,"title":"Add suspenseCallback feature for runtime tracing of loading states","body":"This adds a \'SuspenseCallback\' feature flag. When the property is set on\\r\\na suspense component it will be called during the commit phase with a\\r\\nset of the immediate thenable for this component. This will allow user\\r\\ncode to build runtime tracing of the cause for a suspense boundary.\\r\\n\\r\\nCC @sebmck ","number":16134,"user":{"login":"bgirard"},"state":"closed","created_at":"2019-07-15T06:22:23Z"},{"id":467903167,"title":"Inject getCurrentFiber() function to DevTools","body":"This returns the current value of ReactCurrentFiber and enables DevTools to append a custom (owner-only) component stack to warnings and errors in DEV mode.\\r\\n\\r\\nThis is an attempt to address concerns about component stacks being overly noisy in certain environments. It does feel like an improvement based on even my own test harness, e.g.\\r\\n![image](https://user-images.githubusercontent.com/29597/61191333-030f9400-a65e-11e9-86ed-377201a1aefb.png)\\r\\n\\r\\nSupersedes #16127\\r\\n","number":16133,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-07-15T00:38:28Z"},{"id":467840101,"title":"Lazy load component with path stored in a variable or prop","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nError and warning when trying to dynamically `lazy` load a component from a variable or props.\\r\\n\\r\\n```\\r\\nWarning: Critical dependency: the request of a dependency is an expression\\r\\n\\r\\nError: Cannot find module \'./Button\'\\r\\n(anonymous function)\\r\\n.../dynamic-lazy-load/src lazy groupOptions: {} namespace object:5\\r\\n```\\r\\n\\r\\n**Reproduction**\\r\\nIn a Codesandbox it seems to be working https://codesandbox.io/s/angry-rgb-vs0g4 fine. For some reason in a non codesandboxed environment, I was able to reproduce the issue [here](https://github.com/ReasonableDeveloper/react-dynamic-lazy-load-bug).\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should lazily load the component even when the path is passed down via props or stored in a variable without throwing a warning or error. The behavior of following code:\\r\\n\\r\\n```JavaScript\\r\\nconst buttonPath = \\"./Button\\";\\r\\nconst LazyLoadedButton = lazy(() => import(buttonPath));\\r\\n```\\r\\n\\r\\nshould match the behavior of\\r\\n```JavaScript\\r\\nconst LazyLoadedButton = lazy(() => import(\'./Button\'));\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest version of CRA (3.0.1) and latest React (16.8.6)\\r\\n\\r\\nThis issue was first reported in the lerna support CRA pull request seen [here](https://github.com/facebook/create-react-app/pull/6599#issuecomment-511161680).","number":16132,"user":{"login":"CodingDive"},"state":"closed","created_at":"2019-07-14T13:38:22Z"},{"id":467834546,"title":"useState can\'t hold \\"function\\" into state value","body":"Running the following snippet in a React \\"powered by hooks\\" app, the `getAsyncOptions` is not holding a function but a pending promise: the `getAsyncOptions1` is automatically invoked. \\r\\n\\r\\nIs this a known and expected behaviour? Does it mean I cannot put a function into a state variable otherwise it is automatically called?\\r\\n\\r\\n```\\r\\nconst getAsyncOptions1 = async () => {\\r\\n    await sleep(2500);\\r\\n    return [\'first\', \'second\', \'third\'];\\r\\n};\\r\\n\\r\\nconst getAsyncOptions2 = async () => {\\r\\n    await sleep(2500);\\r\\n    return [\'apple\', \'pear\', \'banana\'];\\r\\n};\\r\\n\\r\\nconst App = props => {\\r\\n    const [getAsyncOptions, setGetAsyncOptions] = useState(getAsyncOptions1);\\r\\n    console.log(\'what is getAsyncOptions?\', getAsyncOptions);\\r\\n\\r\\n    useEffect(async () => {\\r\\n        await sleep(5000);\\r\\n        console.log(\'changing getAsyncOptions\');\\r\\n        setGetAsyncOptions(getAsyncOptions2);\\r\\n    }, []);\\r\\n```","number":16131,"user":{"login":"damianobarbati"},"state":"closed","created_at":"2019-07-14T13:09:04Z"},{"id":467815884,"title":"Double render for failed component with ErrorBoundary","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen using ErrorBoundary, component has been rendered twice, even after throwing error during the first render.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\\r\\nHaving simple example:\\r\\n- Straightforward ErrorBoundary copied from docs;\\r\\n- Functional component Boom, that throws error on first render;\\r\\n\\r\\n```javascript\\r\\nclass ErrorBoundary extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { error: undefined };\\r\\n  }\\r\\n\\r\\n  static getDerivedStateFromError(error) {\\r\\n    // Update state so the next render will show the fallback UI.\\r\\n    console.log(\\"getDerivedStateFromError\\", { error });\\r\\n    return { error };\\r\\n  }\\r\\n\\r\\n  componentDidCatch(error, info) {\\r\\n    // You can also log the error to an error reporting service\\r\\n    console.log(\\"componentDidCatch\\", { error, info });\\r\\n    // this.setState({ error });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    console.log(\\"ErrorBoundary.render\\", this.state.error);\\r\\n\\r\\n    if (this.state.error) {\\r\\n      return \\"Oops\\";\\r\\n    }\\r\\n\\r\\n    return this.props.children;\\r\\n  }\\r\\n}\\r\\n\\r\\nlet boomCounter = 0;\\r\\nconst Boom = () => {\\r\\n  console.log(\\"Boom\\", ++boomCounter);\\r\\n  throw new Error(\\"Boom\\");\\r\\n};\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <ErrorBoundary>\\r\\n        <Boom />\\r\\n      </ErrorBoundary>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n```\\r\\n\\r\\nBoom component has been rendered twice, even after throwing error during the first render.\\r\\nTo make it more clear, I\'m logging global counter, increasing with each render :\\r\\nhttps://codesandbox.io/s/agitated-lumiere-6zd3h\\r\\n\\r\\n**What is the expected behavior?**\\r\\nFailed component shouldn\'t be rendered after throwing an error.\\r\\nInternals of the component can produce side-effects or whatever else, that can be worsen if done twice.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.6\\r\\nBrowsers: Safari, Chrome.\\r\\n\\r\\n\\r\\nI have 2 assumptions why is that (I haven\'t read React core):\\r\\n- To perform graceful shutdown of useEffect/componentWillUnmount and stuff like that.\\r\\n- This happens because Boom component provided as external dependency, being rendered in App tree alongside with ErrorBoundary itself. And React perform full render of the App tree, despite ErrorBoundary could have something else to show.\\r\\n\\r\\nThis case is very confusing.\\r\\nFeel free to close the issue if this behavior is expected, though it should be noted in the documentation.\\r\\nIdeas of how to get desired behavior are welcome.\\r\\nI haven\'t found open problem with this exact behavior described, that\'s why I created a new one.","number":16130,"user":{"login":"Freak613"},"state":"closed","created_at":"2019-07-14T09:37:45Z"},{"id":467783558,"title":"jj","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16129,"user":{"login":"eostb"},"state":"closed","created_at":"2019-07-14T01:34:02Z"},{"id":467783521,"title":"Renderer specific act warning","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16128,"user":{"login":"eostb"},"state":"closed","created_at":"2019-07-14T01:33:23Z"},{"id":467735122,"title":"Inject ReactDebugCurrentFrame into DevTools","body":"So it can append component stacks to warnings in DEV mode.\\r\\n\\r\\nRelated issues:\\r\\n* https://github.com/facebook/react/pull/16126\\r\\n* https://github.com/bvaughn/react-devtools-experimental/issues/347","number":16127,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-07-13T15:42:24Z"},{"id":467620629,"title":"Remove React.error and React.warn","body":"Sebastian and I have just discussed [my concerns around `React.warn` and `React.error`](https://github.com/facebook/react/pull/16017). The quick takeaway is this: I am going to remove `React.warn` and `React.error` for now. We can revisit these methods later as part of a larger discussion around the console logging experience with React (see #15726) but we should not block 16.9 for this.\\r\\n\\r\\nIn the meanwhile, I will be adding functionality to React DevTools to intercept calls to `console.error`, `console.warn`, and `console.trace` and auto-append component stacks (in DEV mode). This seems like a nice 80/20 solution that doesn\'t limit our options for a future API.","number":16126,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-07-12T22:16:43Z"},{"id":467578650,"title":"Controlled input doesn\'t trigger onChange when value changes, how can I trigger SyntheticEvents?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nno, its a question\\r\\n\\r\\n**What is the current behavior?**\\r\\nonChange is not triggered when value of controlled input changes\\r\\n\\r\\n1. type something in the input -> console logs with SyntheticEvents\\r\\n2. click the button -> nothing :(\\r\\n\\r\\nhttps://codesandbox.io/s/dry-wood-rsgx1\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n2. click the button -> console logs with SyntheticEvents\\r\\n\\r\\nI need it to trigger onChange events. I am designing an autocomplete component and I want it have exactly the same \\"api\\" as standard `<input />`. That means whenever a use clicks one of the suggestions and that suggestions is being pasted into the input field, that input field should trigger standard onChange so that it can seamlessly integrate with other libraries (like formik)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact 16.8, chrome 75, mac os 10.14","number":16124,"user":{"login":"odrzutowiec"},"state":"closed","created_at":"2019-07-12T20:01:28Z"},{"id":467509992,"title":"warnings use console.error instead of console.warn","body":"warnings use console.error instead of console.warn","number":16123,"user":{"login":"piyushgarg195"},"state":"closed","created_at":"2019-07-12T16:55:14Z"},{"id":467418307,"title":"[Flare] Migrate from EventComponent to EventResponder","body":"This is a follow up to https://github.com/facebook/react/pull/16101. In that PR, we introduced `useResponder`. After some careful consideration, this PR revises that design slightly so Event Responders are their own component that get used in the render tree rather than the `useResponder` hook.\\r\\n\\r\\nThis PR also removes `React.unstable_createEvent` and `React.unstable.useEvent`. We expect to add something similar to those APIs in subsequent follow up PRs.\\r\\n\\r\\nBefore you would do:\\r\\n\\r\\n```jsx\\r\\nfunction PressableButton({children, onPress, onHover, onFocus}) {\\r\\n  return (\\r\\n    <Press onPress={onPress}>\\r\\n      <Hover onHover={onHover}>\\r\\n        <Focus onFocus={onFocus}>\\r\\n          <div>\\r\\n            {children}\\r\\n          </div>\\r\\n        </Focus>\\r\\n      </Hover>\\r\\n    </Press>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nWith this PR and design, you would do this:\\r\\n\\r\\n```jsx\\r\\nfunction PressableButton({children, onPress, onHover, onFocus}) {\\r\\n  return (\\r\\n    <div>\\r\\n      <PressResponder onPress={onPress} />\\r\\n      <HoverResponder onHover={onHover} />\\r\\n      <FocusResponder onFocus={onFocus} />\\r\\n      {children}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nPress Responders are created in a similar way to how Event Components were created before:\\r\\n\\r\\n```jsx\\r\\nexport PressResponder = React.unstable_createResponder(PressResponderImpl);\\r\\n```\\r\\n\\r\\nWhen it comes to the design, event responders \\"attach\\" themselves to their nearest host parent. So in the case of:\\r\\n\\r\\n```jsx\\r\\n<div>\\r\\n  <React.Fragment>\\r\\n    <FunctionWrapper>\\r\\n      <EventResponder>\\r\\n```\\r\\nThe `<EventResponder>` will attach itself to the `<div>`.\\r\\n\\r\\nYou can apply event responders to self-closing elements too (event responders do not created DOM nodes):\\r\\n\\r\\n```jsx\\r\\n<input><FocusResponder /></input>\\r\\n```\\r\\n\\r\\n## The reasons for this change:\\r\\n- There is now an explicit contract between an event responder and a host component. This is the nearest host component parent to the event responder.\\r\\n- We now resolve responders as a property of the thing we\'re interacting with, rather than wrapping around it. This provides an important constraint around how event responders are used, in that it makes extending an abstraction from the outside harder rather than easier.\\r\\n- By making a responder a child of the target, we can handle conditional cases with ease (the event responder will unmount/mount).\\r\\n- A target can only have a single type of event responder at a given time. If multiple event responders try to attach to the same target and they are the same event responder, only the first will register and the others will be no-ops (with dev warnings).\\r\\n- Unlike the other design, using `ref`s is somewhat error prone. The same ref might be passed around and assign conditionally or multiple times, which would be difficult to detect and handle.","number":16122,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-12T13:36:43Z"},{"id":467385397,"title":"useEffect will unpredictable when depends on ref (useRef)","body":"Look at this [demo](https://codesandbox.io/s/useeffect-depends-on-useref-194ec)\\r\\nIs there a bug?\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen you click the minus button until value to -1,  the # 1 effect will not be triggered, but the dependency has changed.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe # 1 effect will be trigger when the value changes from 0 to -1\uff0cjust like # 2 effect","number":16121,"user":{"login":"lihroff"},"state":"closed","created_at":"2019-07-12T12:22:15Z"},{"id":467322717,"title":"[react-cache] [Question] Feedback and stale-while-revalidate strategy","body":"First of all, I am aware that `react-cache` package is highly experimental and unstable, but I still would like to experiment and express my thoughts on the subject. (skip to the end for the actual question)\\r\\n\\r\\nI\'ve tried using it in several fun projects, and in my experience current version works pretty well with anything static, e.g. resources that need to be loaded only once, or can be loaded once and updated separately.\\r\\n\\r\\nHowever, not all resources are like that, and some of them need cache invalidation.  This https://github.com/facebook/react/issues/14783#issuecomment-461860954 mentions that there is no API for invalidation, but you can actually invalidate the resource, using the clever hash function. I\'ve put together a little [demo](https://codesandbox.io/s/react-cache-stale-while-revalidate-startegy-0o9jj).\\r\\n\\r\\nThe problem with that approach is that invalidations happens \\"soundly\\" and will trigger the suspense. \\r\\n\\r\\nThis could be solved by busting the cache only after the `preload` of the next entry already happened, but there\'s unfortunately no way to track the `preload` state of the next entry, since the `preload` method actually doesn\'t return the promise it called;\\r\\n\\r\\nAnother way to go around this issue is to have a side effect inside the async resource, that would cause a re-render when completed, thus giving the ability to invalidate the old entry only after the new entry has been completed;\\r\\n\\r\\nLastly there\u2019s the ability to create a invalidation method, wrapping a `read` method in a try-catch block and have custom logic of resolving with a result / awaiting  a suspender. This however makes the invalidation async, but it\'s probably fine, since we only need to invalidate the cache after we already have the initial result and can update the result when the invalidation has already happened.\\r\\n\\r\\nSince the first approach is basically impossible with current cache package and later two required a lot of custom logic, one would probably be better of writing an entirely custom suspender and cache provider with a required strategy.\\r\\n\\r\\nSorry for the long read, thus comes the question:\\r\\n\\r\\n**TLDR:** Is `react-cache` being developed and presented as a low-level API for writing custom resource caching logic OR as an example of writing custom suspenders and cache strategies?","number":16120,"user":{"login":"nulladdict"},"state":"closed","created_at":"2019-07-12T09:46:28Z"},{"id":467234419,"title":"How to make button clickable under Link","body":"Post.jsx file\\r\\nCode below is Post itself...\\r\\n```\\r\\n<Post>\\r\\n     <Link to=\'/somewhere\'>\\r\\n         <contents>\\r\\n             <usename />\\r\\n              <date />\\r\\n              <div onClick={doSomething}>Edit</div>\\r\\n         </contents>\\r\\n     </Link>\\r\\n</Post>\\r\\n```\\r\\nHow can I make the div tag button clickable under Link?\\r\\n\\r\\nI wanna implement like this...\\r\\nIf I click anywhere in the post except edit button, I go to post detail page.\\r\\nIf click edit button, edit modal shows up instead of going to post detail page.\\r\\nI believed I need to nest edit button trigger in the Link, but doesnt work.\\r\\nHow am I supposed to implement this?\\r\\nThank you.\\r\\n\\r\\nLIke this...\\r\\n![facebook_1199-141](https://user-images.githubusercontent.com/51696880/61104391-2d701e80-a4b1-11e9-9d9b-39207d0d34cc.jpg)","number":16119,"user":{"login":"nonanonakeita"},"state":"closed","created_at":"2019-07-12T05:53:35Z"},{"id":467182568,"title":".watchmanconfig must be valid json","body":"faceworldproblems?","number":16118,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-12T01:56:32Z"},{"id":467181467,"title":"is this a bug?","body":"I didn\'t see it\'s mentioned somewhere else so I\'d try to open a new thread for it. Sorry if it\'s already reported/discussed.\\r\\n\\r\\nI spent quite a while trying to understand why [this](https://codesandbox.io/s/react-context-api-c81jb) doesn\'t work, as it\'s a VERY simple user case and I was following the new context api instruction verbatim when doing it \\r\\n\\r\\nI know how to make it work, but it\'s more like a walkaround. I really want to know why my example doesn\'t work and if it\'s a bug, we should fix it.\\r\\n\\r\\nthanks","number":16117,"user":{"login":"bochen2014"},"state":"closed","created_at":"2019-07-12T01:51:25Z"},{"id":467170802,"title":"Allow hooks in class component render methods.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature.\\r\\n\\r\\n**What is the current behavior?**\\r\\nCurrently, it is only possible to use hooks in function components. I know the rationale behind this is to encourage use of the function component pattern, and allow for future optimization work in the form of precompilation. However, it makes it very inconvenient to use modern hooks-based libraries in class components, and you\'re essentially forced to resort to using a higher order component instead, if one is even provided. \\r\\nFor instance, included with the react-i18next library is a very convenient `useTranslation` hook, yet, if you\'re localizing class components, you must wrap everything with a HOC, since the library no longer includes a decorator. The HOC pattern is especially nasty with Typescript since you essentially have to add a bunch of extra properties to your component\'s props interface and then have the HOC function strip them with a compound type.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nN/A\\r\\n\\r\\n**What is the expected behavior?**\\r\\nCurrently, it is actually possible to shim the core React hooks API to allow calling `use...` functions in class component render methods with [react-universal-hooks](https://github.com/salvoravida/react-universal-hooks). It even works with custom hooks provided by third party libraries, since the built-in hooks they call are wrapped. We\'re currently using this with the `useTranslation` hook from react-i18next with no issues. \\r\\nI can\'t see any reason why this shouldn\'t be available natively, if only for compatibility and migration purposes. Render methods are just functions, and hooks are simply a way to allow repeated function calls to access persistent state from a backing list, correct? The hooks API documentation states that you shouldn\'t bother to refactor all your class components just for hooks, and even if that sort of usage wouldn\'t be possible to optimize through precompilation, allowing it would significantly ease the transition.\\r\\nThe only potential caveat is the common class component pattern of delegating out to subordinate render methods, in which hooks wouldn\'t work properly if they\'re called conditionally or in a loop. This can be avoided by passing hooked values from the top level render method instead.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nEvery version since hooks were added, 16.8.0 and up, all browsers obviously.","number":16116,"user":{"login":"FrobtheBuilder"},"state":"closed","created_at":"2019-07-12T01:01:51Z"},{"id":467126773,"title":"Clean up nextEffect pointer","body":"This change clears the `nextEffect` reference when it is no longer needed. If there are no passive effects, we iterate through the effect chain after committing host/layout effects. Otherwise, we remove the pointer while flushing passive effects. Pulled from #15157\\r\\n\\r\\nWithout this change, it is possible for live Fiber nodes to have `nextEffect` pointers to unmounted Fiber nodes. \\r\\n\\r\\n## Repro\\r\\n\\r\\nhttps://gist.github.com/paulshen/8a10c1ac7cd1b2983219e27a08d0f85b\\r\\nClick \\"Increment\\" many times and notice that all unmounted `<InnerBody>` Fiber nodes are retained via a `nextEffect` chain from `<Sidebar>`\'s Fiber node.\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/2266187/61087836-9a20e580-a3eb-11e9-8ccc-d68044626e2d.png)\\r\\n\\r\\nWith this change, `<Sidebar>`\'s Fiber node has an empty `nextEffect` reference.","number":16115,"user":{"login":"paulshen"},"state":"closed","created_at":"2019-07-11T21:58:57Z"},{"id":467092813,"title":"[Flare] Press: fix middle-click handling","body":"Make sure the root events are removed after middle-click completes.\\r\\n\\r\\n(Wasn\'t able to create a failing unit test. Another reason to eventually move to browser functional tests.)\\r\\n\\r\\n","number":16114,"user":{"login":"necolas"},"state":"closed","created_at":"2019-07-11T20:32:39Z"},{"id":467076634,"title":"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBugReport\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe system on our marketplace is not able to fetch certain products but successfully manages to get others. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nhere the difference \\r\\n-> https://www.feralhorses.co.uk/artworks/i-belong-to-you (works) \\r\\n-> https://www.feralhorses.co.uk/artworks/parallel-expressions (doesn\'t work) \\r\\n\\r\\n````\\r\\nimport React, { Component, PropTypes } from \'react\';\\r\\nimport { connect } from \'react-redux\';\\r\\nimport { bindActionCreators } from \'redux\';\\r\\nimport * as authActions from \'../actions/authActions\';\\r\\nimport * as lotActions from \'../actions/lotActions\';\\r\\nimport { requestCurrentLot } from \'../utils/crudHelpers\';\\r\\nimport { logActions, createLog } from \'../utils/logHelpers\';\\r\\nimport { checkToken } from \'../utils/authHelpers\';\\r\\nimport SingleArtworkPrimary from \'./SingleArtworkPrimary\';\\r\\nimport SingleArtworkSecondary from \'./SingleArtworkSecondary\';\\r\\nimport {\\r\\n  requestArtworkByName,\\r\\n  requestSingleArtworkGeneral,\\r\\n  requestArtworks\\r\\n} from \'../utils/crudHelpers\';\\r\\n\\r\\nclass SingleArtworkContainer extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.getSingleArtwork = this.getSingleArtwork.bind(this);    \\r\\n    this.requestArtistPrimaryArtworks = this.requestArtistPrimaryArtworks.bind(this);\\r\\n    this.readUrl = this.readUrl.bind(this);\\r\\n\\r\\n    this.state = {\\r\\n      singleArtwork: null,\\r\\n      artistArtworks: []      \\r\\n    };\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    if (checkToken()) {\\r\\n      document.body.classList.add(\'is-auth\');\\r\\n    }\\r\\n    this.getSingleArtwork(this.readUrl());  \\r\\n  }\\r\\n\\r\\n  readUrl() {\\r\\n    const browserPath = window.location.pathname;\\r\\n    return browserPath.split(\'/\')[2];\\r\\n  }\\r\\n\\r\\n  getSingleArtwork(artworkTitle) {\\r\\n    requestSingleArtworkGeneral(artworkTitle)\\r\\n      .then((response) => {\\r\\n        if(response.data.result){\\r\\n          const { artwork } = response.data;\\r\\n          if (artwork.status === 2) {\\r\\n            this.requestArtistPrimaryArtworks(artwork.primary_lot_id, artwork.artist.pretty_url);\\r\\n          }\\r\\n          this.setState({\\r\\n            singleArtwork: artwork\\r\\n          });\\r\\n          if(checkToken()) {\\r\\n            createLog(logActions.primaryMarketArtwork, `Artwork: ${artwork.artwork_id}-${artwork.artwork_title} by ${artwork.artist_name}`);\\r\\n          }\\r\\n        } else {\\r\\n          authActions.forwardUserTo(\'/not-found\');\\r\\n        }\\r\\n      })\\r\\n      .catch((err) => {\\r\\n        console.log(err);\\r\\n      });\\r\\n  }\\r\\n  \\r\\n  requestArtistPrimaryArtworks(lot_id, prettyUrl) {\\r\\n    requestArtworks(1, lot_id, 3, {artist_pretty_url: prettyUrl})\\r\\n      .then((response) => {\\r\\n        response.data.primary_lot_artworks.map((artwork, key) => {\\r\\n          this.state.artistArtworks.push(artwork);\\r\\n        });\\r\\n        this.setState({\\r\\n          isLoading: false          \\r\\n        });\\r\\n      })\\r\\n      .catch((err) => {\\r\\n        console.log(err);\\r\\n      });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    if(this.state.singleArtwork === null) {\\r\\n      return (\\r\\n        <div style={{ minHeight: \'95vh\' }}>\\r\\n          <h3>Loading</h3>\\r\\n        </div>\\r\\n      );\\r\\n    } else if (this.state.singleArtwork.status === 2) {\\r\\n      return (\\r\\n        <div>\\r\\n          <SingleArtworkPrimary\\r\\n            artwork={this.state.singleArtwork}\\r\\n            artistArtworks={this.state.artistArtworks}\\r\\n            />\\r\\n        </div>\\r\\n      );\\r\\n    } else {\\r\\n      return (\\r\\n        <div>\\r\\n          <SingleArtworkSecondary \\r\\n            artwork={this.state.singleArtwork}\\r\\n            />\\r\\n        </div>\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nconst mapStateToProps = (state, ownProps) => ({\\r\\n  lot: state.lots.lot\\r\\n});\\r\\n\\r\\nconst mapDispatchToProps = (dispatch) => ({\\r\\n  actions: {\\r\\n    lotActions: bindActionCreators(lotActions, dispatch)\\r\\n  }\\r\\n});\\r\\n\\r\\nSingleArtworkContainer.propTypes = {\\r\\n  artwork: PropTypes.object,\\r\\n  from: PropTypes.string,\\r\\n  lot: PropTypes.object\\r\\n};\\r\\n\\r\\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleArtworkContainer);\\r\\n````\\r\\n\\r\\nMy first catch error is what consoles it out\\r\\n\\r\\n**What is the expected behavior?**\\r\\nGiven that this is exactly the same code I am honestly surprised by the fact that I get a React error as the code behind the two pages is literally the same :(  \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nAll browsers \\r\\nReact 15.3.0 (but also happens in our UAT machine with react 16.8) \\r\\n","number":16113,"user":{"login":"bellancaf"},"state":"closed","created_at":"2019-07-11T19:52:16Z"},{"id":466937670,"title":"Reconciliation performance function vs. class components","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nneither/bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhile migrating class components to function components (with hooks), I noticed a **significant performance drop**. I have a component (called `TreeNodeComponent`) which is part of a tree-structure. Depending on the tree size, hundreds of instance could be visible. \\r\\n\\r\\n[Wrapping the function component in a PureComponent](https://github.com/thomasnordquist/MQTT-Explorer/commit/1a1596ad3db61a5b7a431f55799a8de2631bb4f1) significantly reduced the observed \\"render time\\". (From ~160ms to ~60ms)\\r\\n\\r\\n### \\"Render time\\", observed in Chrome Dev Tools\\r\\n<img width=\\"347\\" alt=\\"Bildschirmfoto 2019-07-11 um 16 24 10\\" src=\\"https://user-images.githubusercontent.com/7721625/61058938-7912c180-a3f8-11e9-8a4d-f3fe2d1d9823.png\\">\\r\\n\\r\\n### Context:\\r\\nThe App renders hundreds of these `TreeNodeComponent` in a `tree-structure`. When a parent is updated, all direct children need to be reconciled.\\r\\nProject: https://github.com/thomasnordquist/MQTT-Explorer\\r\\n\\r\\n**What is the expected behavior?**\\r\\nComparable performance between functional and class components.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nOSX\\r\\nChromium 73 / Electron 5.0.5\\r\\nReact 16.8\\r\\nTypescript & Webpack","number":16112,"user":{"login":"thomasnordquist"},"state":"closed","created_at":"2019-07-11T14:45:07Z"},{"id":466879584,"title":"Fix/polish code","body":"Alternate node will always be update as the condition is satisfied. So it\u2019s not necessary to write the same logic twice.\\r\\n","number":16111,"user":{"login":"Soyn"},"state":"closed","created_at":"2019-07-11T13:02:53Z"},{"id":466876003,"title":"Expose `act()` sigil correctly for umd builds","body":"After https://github.com/facebook/react/pull/16039, act was broken for umd builds. This PR fixes it.\\r\\n\\r\\nA longer term solution is to have some act sanity tests included in whatever we already do for umd builds (or make something new). ","number":16110,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-11T12:56:06Z"},{"id":466857612,"title":"Consider using reactjs.org instead of fb.me in react\'s error/warning messages","body":"Hi,\\r\\n\\r\\nFacebook is blocked in my country (and I think in some other countries) and links like `https://fb.me/react-invalid-hook-call` are blocked for me, in order to see the related documentation of the link I have to use VPN. so if is possible please use another link shortener service or point to `reactjs.org` directly.\\r\\n\\r\\nThanks.","number":16109,"user":{"login":"dehghani-mehdi"},"state":"open","created_at":"2019-07-11T12:18:34Z"},{"id":466707580,"title":"[Question]:How to get the context provided by the class component in a function component using the useContext","body":"Sorry to everyone, this is not a problem feedback, I did not find information in the docs that can save my doubts, so... How to get the context provided by the class component in a function component using the useContext?\\r\\n\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/6134547/61029831-89be3a00-a3ee-11e9-9b8d-88279b762a1f.png)\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/6134547/61029856-9b9fdd00-a3ee-11e9-94ed-732d5feede29.png)\\r\\n","number":16108,"user":{"login":"yoyo837"},"state":"closed","created_at":"2019-07-11T07:16:59Z"},{"id":466606691,"title":"Use Map instead of object as map in ReactNativeComponentTree","body":"Real Maps should now be used in RN JS engines. In theory this should be faster (but might not actually be in practice), and it avoids hitting upper bounds of property max counts.\\r\\n\\r\\n~I haven\'t actually tested since we don\'t have integration tests in this repo.~ I actually failed some initial tests so we at least have some coverage here. Will need to be tested when we do a sync.\\r\\n\\r\\nThe case that I could imagine would be different is that this no longer ToStrings the keys so if there are some string keys getting passed here, they would no longer match. Nothing should do that though.\\r\\n\\r\\nWe don\'t use these types of Maps in Fabric.","number":16107,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-07-11T01:22:42Z"},{"id":466580338,"title":"Airbnb sees ~1-2s TTI regression going from React 16.2 -> 16.5","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug.\\r\\n\\r\\n**What is the current behavior?**\\r\\nWe have one of the larger production React apps and recently we upgraded our version of React from 16.2.0 to 16.8.6. Immediately after the upgrade, with no other changes except bumping our `react` and `react-dom` packages, we saw a 1-2s TTI increase on many of our pages for users browsing with Chrome and Firefox (specifically, not Safari). This represents a ~15-50% increase in TTI for a few of our pages.\\r\\n\\r\\nIt\'s difficult to tell exactly what the issue is given the size and complexity of our app. We noticed that React spends a lot of time instantiating `FiberNode` classes, but haven\'t really found anything that stands out. We also noticed the TTI increase going from 16.2 to 16.5. 16.3 does not increase our TTI.\\r\\n\\r\\nFor some additional context: The TTI metric we use is a custom metric, defined per page. The default definition is wait until mount of the root container, fire a 0ms `setTimeout`, and mark when that resolves. Some pages wait until a certain API response arrives or an async component mounts, then fire a 0ms `setTimeout` and mark when that resolves. \\r\\n\\r\\nWe\'ll keep updating this thread as we collect more information, but wanted to see if anyone had run into a similar issue.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nWe can\'t reproduce this issue outside of the context of our app for now, and we don\'t want to copy/paste our source code here.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWe experience no regression in performance on React 16.8.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThis issue appears on React >=16.5 (potentially 16.4, but we haven\'t tried that yet).","number":16106,"user":{"login":"etripier"},"state":"closed","created_at":"2019-07-10T23:49:23Z"},{"id":466554639,"title":"[Scheduler] Support inferring priority from stack","body":"When executing a task, wraps the callback in an extra function whose name includes the current priority level. Profiling tools with access to function names can use this to determine the priority of the task.","number":16105,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-07-10T22:30:22Z"},{"id":466546144,"title":"Give unresolved lazy() a name in component stack","body":"Currently, if a `React.lazy(...)` component fails to load, React reports the error with a component stack in which the lazy component is represented as `Unknown` ([example](https://codesandbox.io/s/unresolved-lazy-component-stack-qjsb3)).\\r\\n\\r\\nWith this PR, the name reported will instead be `Lazy` while the lazy component is unresolved. This PR also adds a test covering the (unchanged) case of a *resolved* lazy component that throws an error during rendering.","number":16104,"user":{"login":"motiz88"},"state":"open","created_at":"2019-07-10T22:06:17Z"},{"id":466472180,"title":"unify deprecated/unsafe lifecycle warnings, pass tests","body":"This PR tweaks the deprecated/unsafe lifecycle warnings.\\r\\n\\r\\n- redoes #15431 from scratch, taking on the feedback there\\r\\n- unifies the messaging between \\"deprecated\\" and UNSAFE_ lifecycle messages. It reorganises ReactStrictModeWarnings.js to capture and flush all the lifecycle warnings in one procedure each.\\r\\n- this DOES NOT do the above treatment for context warnings, I\'ll do that in another PR too\\r\\n- matches the warning from ReactPartialRenderer to match the above treatment\\r\\n- passes all the tests\\r\\n- this also turns on `warnAboutDeprecatedLifecycles` for the test renderer. I think we missed doing so it previously. In a future PR, I\'ll remove the feature flag altogether.\\r\\n\\r\\nThings to do in future PRs asap - \\r\\n- give a similar treatment to legacy context warnings \\r\\n- make a docs page on reactjs.org that take the recommendations from https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html, and adds a section on the codemod.\\r\\n- polish the codemod experience \\r\\n\\r\\nScreenshot: \\r\\n![image](https://user-images.githubusercontent.com/18808/61232541-7086f780-a726-11e9-815c-069717e6aa16.png)\\r\\n\\r\\n","number":16103,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-10T19:11:52Z"},{"id":466450177,"title":"[eslint-plugin-react-hooks] Dealing with constant values in hooks\' closures","body":"I\'m totally fine with the current exhaustive-deps implementation, yet I feel like it would be cool to have an option to tell plugin about constant values that will never change. \\r\\n\\r\\nMinimal example:\\r\\n```jsx\\r\\nconst AuthProvider = ({ children }) => {\\r\\n  const { http } = useContainer(); // container is immutable\\r\\n  const [user, setUser] = React.useState(null);\\r\\n  \\r\\n  // exhaustive-deps wants to see \\"http\\" present in the deps list\\r\\n  React.useEffect(() => void http.get(\'/whoami\').then(setUser), []);\\r\\n\\r\\n  ...\\r\\n};\\r\\n```\\r\\n\\r\\nI wonder what options are available to make eslint happier. I believe some things could be done in AST/visitors layer, but no idea where to start.\\r\\n","number":16102,"user":{"login":"miraage"},"state":"closed","created_at":"2019-07-10T18:17:01Z"},{"id":466444831,"title":"[Flare] Migrate to `useResponder` event system design ","body":"This PR migrates away from the existing Flare event system design, to a slightly different design and API. Notably, there are now no Event Components, instead as the first of this new design there are only Event Responders. The only way to use an Event Responder is by using its hook form inside a functional component that you want to \\"tie\\" to becoming an event target for the responder in question.\\r\\n\\r\\nBefore you would do:\\r\\n\\r\\n```jsx\\r\\nfunction PressableButton({children, onPress, onHover, onFocus}) {\\r\\n  <Press onPress={onPress}>\\r\\n    <Hover onHover={onHover}>\\r\\n      <Focus onFocus={onFocus}>\\r\\n        <div>\\r\\n          {children}\\r\\n        </div>\\r\\n      </Focus>\\r\\n    </Hover>\\r\\n  </Press>\\r\\n}\\r\\n```\\r\\n\\r\\nWith this PR, you now do:\\r\\n\\r\\n```jsx\\r\\nfunction PressableButton({children, onPress, onHover, onFocus}) {\\r\\n  const targetRef= useRef(null);\\r\\n  usePressResponder(targetRef, {onPress});\\r\\n  useHoverResponder(targetRef, {onHover});\\r\\n  useFocusResponder(targetRef, {onFocus});\\r\\n  return <div ref={targetRef}>{children}</div>\\r\\n}\\r\\n```\\r\\n\\r\\n## The reasons for this change:\\r\\n- There is now an explicit contract between an event responder at the function component that owns it (using the hook design). This creates a boundary for any given responders inside the boundary, so they don\'t bubble up the fiber tree.\\r\\n- There is also an explicit contract between a responder and a host target. Before, there was no clear way to provide a 1:1 contract.\\r\\n- We create less fibers and objects with this model, whilst in the case before, each event component would have an associated fiber for each one in the tree.\\r\\n\\r\\n## Issues with Event Components:\\r\\n\\r\\nIt\'s difficult to compose event components without falling into pitfalls. The majority if event components have a 1:1 mapping to a DOM node, meaning they need a static child that remains constant through the lifecycle of the event responder. This is easy to visualize in this case:\\r\\n\\r\\n```jsx\\r\\n<Focus>\\r\\n  <button>Focus me!</button>\\r\\n</Focus>\\r\\n```\\r\\n\\r\\nIt\'s harder to track and warn about (without overhead) in cases where the node might resolve conditionally:\\r\\n\\r\\n```jsx\\r\\n<Focus>\\r\\n  <SomeComponent />\\r\\n</Focus>\\r\\n\\r\\nfunction SomeComponent() {\\r\\n  return condition ? <button>Focus me!</button> : <span>Focus me!</span>\\r\\n}\\r\\n```\\r\\n\\r\\nIt\'s even harder when the child might suspend or lazyily change. Not to mention, there\'s not a consistent story with event components. `<FocusScope>` might want to accept many children, yet is still an event component, whilst `<Focus>` clearly does not.\\r\\n\\r\\nThis updated design attempts to tackle some of those concerns.\\r\\n\\r\\n## Note:\\r\\n\\r\\nIt\'s important to remember that this is still experimental and may change at any time. We expect `useResponder` to be used sparingly \u2013 almost as if it as private API \u2013 to be used in core primitive componets that are the building blocks for an app. In later PRs, we will expose `createListener` and `useListener` which will be used as more of a public facing API to be used in user-space components.","number":16101,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-10T18:03:46Z"},{"id":466392637,"title":"[Flare] Press includes button type","body":"1. Allow auxillary button clicks (i.e., middle mouse button) to trigger \'onPressStart\' and \'onPressEnd\', but never \'onPress\'.\\r\\n2. Report the button type \u2013 \'primary\' or \'auxillary\' \u2013 on the press event.","number":16100,"user":{"login":"necolas"},"state":"closed","created_at":"2019-07-10T16:00:00Z"},{"id":466367989,"title":"npx create-react-app spawn ENOENT?","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nUsing npx create-react-app causes a \\"spawn enoent\\" error that points to my mongoDB folder. This only began after I installed mongoDB.\\r\\n\\r\\n`$ npx create-react-app client`\\r\\n`spawn C:\\\\Program Files\\\\MongoDB\\\\Server\\\\4.0\\\\bin ENOENT`\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nThe steps I took to experience this bug was to install mongoDB and attempt to create a react app. Somehow I doubt following those steps will recreate the bug, however.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe expected behavior is that I\'m able to create a new react app without any errors.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nVersion 16.8.6.\\r\\n","number":16099,"user":{"login":"Eric-Johnston"},"state":"closed","created_at":"2019-07-10T15:13:10Z"},{"id":466246681,"title":"reactjs typescript support throws maximum stack size exceeded while the same runs in the old typescript enabled template ","body":"Using the new typescript supported version of reactjs https://reactjs.org/docs/static-type-checking.html#typescript along with redux-orm i get \\"**maximum call stack size exceeded**\\" error. \\r\\n\\r\\nhere is the code which fails using the new template https://reactjs.org/docs/static-type-checking.html#typescript\\r\\n\\r\\nhttps://drive.google.com/file/d/1tl19W2-DSNSZiVHuGoxjOLs0ooCTrDRl/view?usp=sharing\\r\\n\\r\\nNow , the same is created using the old typescript template https://github.com/microsoft/TypeScript-React-Starter which works fine. Here is a link to the code which works fine.\\r\\n\\r\\nhttps://drive.google.com/file/d/1eWmOkaKnbuRCpBEaFj7BUElq2C9IxoYD/view?usp=sharing\\r\\n\\r\\nI want the same code used in the old version to be able to use in the new reactjs typescript supported template. \\r\\n\\r\\nIs there something the new template does which throws this issue ?\\r\\n\\r\\n","number":16098,"user":{"login":"franferns"},"state":"closed","created_at":"2019-07-10T11:07:35Z"},{"id":466202577,"title":"`yarn build --watch` throwing \\"JavaScript heap out of memory\\".","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReporting a bug regarding the yarn build.\\r\\n\\r\\n**What is the current behavior?**\\r\\nRunning `yarn build --watch` is throwing `JavaScript heap out of memory`.\\r\\n\\r\\nHere\'s the complete log:\\r\\n\\r\\n```\\r\\n<--- Last few GCs ---\x3e\\r\\n\\r\\n[74510:0x103800000]    84468 ms: Mark-sweep 1317.9 (1442.4) -> 1306.5 (1443.9) MB, 589.0 / 0.0 ms  (average mu = 0.251, current mu = 0.114) allocation failure scavenge might not succeed\\r\\n[74510:0x103800000]    85163 ms: Mark-sweep 1321.0 (1443.9) -> 1309.3 (1444.4) MB, 596.7 / 0.0 ms  (average mu = 0.210, current mu = 0.142) allocation failure scavenge might not succeed\\r\\n\\r\\n\\r\\n<--- JS stacktrace ---\x3e\\r\\n\\r\\n==== JS stack trace =========================================\\r\\n\\r\\n    0: ExitFrame [pc: 0x51a72adbe3d]\\r\\nSecurity context: 0x176d9701e6e1 <JSObject>\\r\\n    1: decode$$1(aka decode$$1) [0x176dffbe8169] [/Users/300067056/playground/random/react/node_modules/rollup/dist/rollup.js:~297] [pc=0x51a739966b9](this=0x176d9f8026f1 <undefined>,mappings=0x176d325aa201 <Very long string[26873]>)\\r\\n    2: /* anonymous */(aka /* anonymous */) [0x176d325a76b1] [/Users/300067056/playground/random/react/node_modules/rollup/dist...\\r\\n\\r\\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\\r\\n 1: 0x10003b1db node::Abort() [/usr/local/bin/node]\\r\\n 2: 0x10003b3e5 node::OnFatalError(char const*, char const*) [/usr/local/bin/node]\\r\\n 3: 0x1001a86b5 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [/usr/local/bin/node]\\r\\n 4: 0x100573ad2 v8::internal::Heap::FatalProcessOutOfMemory(char const*) [/usr/local/bin/node]\\r\\n 5: 0x1005765a5 v8::internal::Heap::CheckIneffectiveMarkCompact(unsigned long, double) [/usr/local/bin/node]\\r\\n 6: 0x10057244f v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [/usr/local/bin/node]\\r\\n 7: 0x100570624 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/usr/local/bin/node]\\r\\n 8: 0x10057cebc v8::internal::Heap::AllocateRawWithLigthRetry(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/usr/local/bin/node]\\r\\n 9: 0x10057cf3f v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/usr/local/bin/node]\\r\\n10: 0x10054c884 v8::internal::Factory::NewFillerObject(int, bool, v8::internal::AllocationSpace) [/usr/local/bin/node]\\r\\n11: 0x1007d4894 v8::internal::Runtime_AllocateInNewSpace(int, v8::internal::Object**, v8::internal::Isolate*) [/usr/local/bin/node]\\r\\n12: 0x51a72adbe3d\\r\\n13: 0x51a739966b9\\r\\nerror Command failed with signal \\"SIGABRT\\".\\r\\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nThe bug is related to `yarn build`. If we run yarn build with watch mode enabled, then it\'s throwing out of memory exception.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should not throw an exception.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nNot sure about the previous versions. I am exploring the code base of React for learning.\\r\\n\\r\\nOS:\\r\\nmacOs Mojave\\r\\nVersion: 10.14.3(18D109)\\r\\nMacBook Pro (Retina, 15-inch, Mid 2015)\\r\\nProcessor: 2.2 GHz Intel Core i7\\r\\nMemory: 16 GB 1600 MHz DDR3\\r\\n\\r\\nNodeJs: v10.15.1\\r\\nnpm: 6.9.0\\r\\n\\r\\n","number":16097,"user":{"login":"hk-skit"},"state":"closed","created_at":"2019-07-10T09:29:50Z"},{"id":466189333,"title":"[exhaustive-deps] Dependency list that is not array literal (false positive)","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n```js\\r\\n  const memoPosition = React.useMemo(() => position && gpsToLatLng(position), [\\r\\n    position && position.latitude,\\r\\n    position && position.longitude,\\r\\n  ])\\r\\n```\\r\\n\\r\\nAlternatively\\r\\n\\r\\n```js\\r\\n  const memoPosition = React.useMemo(\\r\\n    () => position && gpsToLatLng(position),\\r\\n    position ? [position.latitude, position.longitude] : [position],\\r\\n  )\\r\\n```\\r\\n\\r\\n**Both of these version yield following lint error and are fixed like that which isn\'t correct outcome...**\\r\\n\\r\\n> React Hook React.useMemo was passed a dependency list that is not an array literal. This means we can\'t statically verify whether you\'ve passed the correct dependencies.eslint(react-hooks/exhaustive-deps)\\r\\n\\r\\n\\r\\n```js\\r\\n  const memoPosition = React.useMemo(\\r\\n    () => position && gpsToLatLng(position),\\r\\n    [position],\\r\\n  )\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI am not sure if there is a better pattern to tackle that use case. The `position` can be null and I am fine with `memoPosition` to becoming `null` as well. However, since I cannot call the hook conditionally \\r\\n\\r\\nNote, I am not memoizing because the computation would be heavy, but because the value is passed further down and would cause re-render of a much bigger tree when a position has not actually changed. The consuming component is 3rd party and it has default `React.memo` applied.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```\\r\\n  System:\\r\\n    OS: Windows 10\\r\\n    CPU: (8) x64 Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz\\r\\n  Binaries:\\r\\n    Node: 10.16.0 - C:\\\\Program Files\\\\nodejs\\\\node.EXE\\r\\n    Yarn: 1.16.0 - C:\\\\Program Files (x86)\\\\Yarn\\\\bin\\\\yarn.CMD\\r\\n    npm: 6.9.0 - C:\\\\Program Files\\\\nodejs\\\\npm.CMD\\r\\n  npmPackages:\\r\\n    react: 16.9.0-alpha.0 => 16.9.0-alpha.0\\r\\n    react-dom: 16.9.0-alpha.0 => 16.9.0-alpha.0\\r\\n    react-scripts: ^3.0.1 => 3.0.1 (not ejected)\\r\\n```","number":16096,"user":{"login":"FredyC"},"state":"closed","created_at":"2019-07-10T09:03:01Z"},{"id":466184642,"title":"support callback for batchedUpdates","body":"In some scenarios, there are nested batchedUpdates, and each update requires notification of render completion.\\r\\n\\r\\n```js\\r\\nbatchedUpdates(()=>{\\r\\n\\r\\n// .... long code\\r\\n\\r\\nbatchedUpdates(()=>{\\r\\n  // some setState({});\\r\\n});\\r\\n\\r\\n// render is not completed because of batch\\r\\n\\r\\n});\\r\\n```","number":16095,"user":{"login":"yiminghe"},"state":"closed","created_at":"2019-07-10T08:53:25Z"},{"id":466085437,"title":"Add warning when single item or nested arrays are used with SuspenseList","body":"SuspenseList is a new type of component because its children have \\"row\\" semantics. Each child component or fragment in the children array is its own row. Regardless if that component renders a fragment. Fragments or nested arrays are also considered a whole row for the whole list.\\r\\n\\r\\nAnother confusing thing is that a single slot in JSX passes that straight through but multiple slots are wrapped in an array, causing nested arrays.\\r\\n\\r\\nEffectively this means that there\'s only really two legit ways to specify children to SuspenseList:\\r\\n\\r\\nStatic Children:\\r\\n\\r\\n```js\\r\\n<SuspenseList revealOrder=\\"forwards\\">\\r\\n  <A />\\r\\n  <B />\\r\\n  <C />\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nDynamic Children:\\r\\n\\r\\n```js\\r\\n<SuspenseList revealOrder=\\"forwards\\">\\r\\n  {items.map(item => <Item key={item.key} />)}\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nA combination is not legit because it\'s confusing (this would be two rows, not N+1):\\r\\n\\r\\n```js\\r\\n<SuspenseList revealOrder=\\"forwards\\">\\r\\n  {items.map(item => <Item key={item.key} />)}\\r\\n  <A />\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nTherefore this adds a warning for that case.\\r\\n\\r\\nThis case is also confusing because we special case keyless single fragments to get unwrapped. So this actually will not be a single row but N rows.\\r\\n\\r\\n```js\\r\\n<SuspenseList revealOrder=\\"forwards\\">\\r\\n  <>{items.map(item => <Item key={item.key} />)}</>\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nPassing a single static item also isn\'t really ever useful with the \\"forwards\\" option since there\'s nothing to coordinate. You can just use the \\"together\\" mode then.\\r\\n\\r\\nI added a warning if we see any single item since that seems like a mistake.\\r\\n\\r\\nPerhaps we should even fork child fiber to special case this type of reconciliation but that would cause more code so many a warning is sufficient for now.\\r\\n\\r\\nAnother quirky thing is that the \\"together\\" mode doesn\'t really have the same quirks. It would be reasonable even to render a single component that has many boundaries inside of it.\\r\\n\\r\\nSo arguably this is legit so I disable the warning for this mode:\\r\\n\\r\\n```\\r\\n<SuspenseList revealOrder=\\"together\\">\\r\\n  <Component />\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nWhere the Component contains something like:\\r\\n\\r\\n```\\r\\n<div>\\r\\n  <header><Suspense>...</Suspense></header>\\r\\n  <footer><Suspense>...</Suspense></footer>\\r\\n</div>\\r\\n```\\r\\n\\r\\nThis is unfortunate because now it gets trickier to enforce the types of children in a type system since it now depends on the revealOrder flag. That\'s what I get for putting the notion of a Suspense \\"group\\" and \\"list\\" in the same component. In the type system, we could say that even this case should include no nested arrays just for consistency. That\'s probably ok.","number":16094,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-07-10T03:56:57Z"},{"id":465975862,"title":"onClick not firing","body":"I can\'t seem to get the onClick event to fire at all. I\'ve reduced my app to the following file: \\r\\n\\r\\nindex.js:\\r\\n```\\r\\nimport React from \'react\'\\r\\nimport { render } from \'react-dom\'\\r\\n\\r\\nconst Index = () => {\\r\\n  console.log(\'rendered\')\\r\\n  return <button onClick={() => console.log(\'hello\')}>test</button>\\r\\n}\\r\\n\\r\\nrender(\\r\\n  <Index />,\\r\\n  document.getElementById(\'app\')\\r\\n)\\r\\n```\\r\\nI get \'rendered\' output to the console, but nothing when I click on the button.\\r\\n\\r\\npackage.json:\\r\\n```\\r\\n{ \\r\\n...\\r\\ndevDependencies {\\r\\n    ...\\r\\n    \\"react\\": \\"^16.8.4\\",\\r\\n    \\"react-dom\\": \\"^16.8.4\\",\\r\\n     ...\\r\\n}\\r\\n...\\r\\n}\\r\\n```\\r\\nbuilding inside a Laravel 5.2 app via: \\r\\n`browserify -t [ babelify --presets [ react es2015 ] ] resources/js/react/index.js -o public/js/test.js`\\r\\n","number":16093,"user":{"login":"jstierney"},"state":"closed","created_at":"2019-07-09T20:42:58Z"},{"id":465914548,"title":"[Feature] Return HTMLElement in functional components","body":"For now functional components are able to return string or jsx. It would be awesome to have support of native HTMLElement instances as well. \\r\\n\\r\\n**What is the current behavior?**\\r\\n```javascript\\r\\nfunction SuperFastCustomComponent () {\\r\\n  const el = document.createElement(\'div\');\\r\\n  ...\\r\\n  return el;\\r\\n}\\r\\n// Throws error: Objects are not valid as a React child (found: [object HTMLDivElement]).\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nJust insert provided element in DOM.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest\\r\\n\\r\\n**Motivation**\\r\\nFor some applications it needs to make UI as fast as possible. Especially it is critical on huge application with thousands elements which updates several times per second.  Virtual DOM in React provides good help for performance issues, but sometimes you need to go further and operate on level of vanilla js with incremental changes and custom virtual DOM model relevant to your application. For now the only way to do it is to use refs, but it is looks kind of ugly. Allow to return HTML elements will helps to solve this issue in elegant and intuitive way.","number":16092,"user":{"login":"abramov231"},"state":"closed","created_at":"2019-07-09T18:04:20Z"},{"id":465913162,"title":"[Question] useRef to reduce dependencies in useEffect/useCallback","body":"Firstly, sorry for putting a question in the issues tracker, since I\'m not sure where to put this.\\r\\n\\r\\nI really love the concept of hooks & have been converting many class components to hooks. One of the common problems I usually get with hooks, is to access the latest state/props in `useEffect` and `useCallback`, while avoiding specify too many dependencies to these hooks. \\r\\n\\r\\n(I\'m aware of exhausive deps, but for optimization, I don\'t want `useEffect` to be called too many times, or `useCallback` to return a different function every times)\\r\\n\\r\\nFor example, I want to maintain the identity of function returned from `useCallback`, so I\'d need to put `[]` as 2nd argument (because I\'m gonna pass it to a component inside `React.memo` and don\'t want to write custom props comparator). So it\'d be like this:\\r\\n```js\\r\\nuseCallback(() => doStuff(value1, value2), [])\\r\\n```\\r\\n\\r\\nOf course it won\'t work because `doStuff` will always receive initial value of `value1` and `value2`. That\'s why I\'d need to use `useRef`:\\r\\n\\r\\n```js\\r\\nconst ref = useRef({ value1, value2 });\\r\\nref.current = { value1, value2 };\\r\\nuseCallback(() => doStuff(ref.current.value1, ref.current.value2), [])\\r\\n```\\r\\n\\r\\nAnd could say that this happens so many time that I decided to write a custom hook for it :)\\r\\n\\r\\n```ts\\r\\nexport function useCallbackWithRef<TRef, TCb extends (...args: any[]) => any>(\\r\\n  refData: TRef,\\r\\n  callback: (refData: TRef) => TCb\\r\\n): TCb {\\r\\n  const ref = React.useRef(refData);\\r\\n  ref.current = refData;\\r\\n  return React.useCallback((...args: any[]) => {\\r\\n    return callback(ref.current)(...args);\\r\\n  }, []) as TCb;\\r\\n}\\r\\n\\r\\n//usage\\r\\nuseCallbackWithRef({ value1, value2 }, ref => () => doStuff(ref.value1, ref.value2))\\r\\n```\\r\\n\\r\\nAnd it seems to work quite nice: [Codesandbox](https://codesandbox.io/s/white-brook-1myr7)\\r\\n\\r\\nI\'m going to use this across many places in my project, but I don\'t want to have many regrets later on so I just want to ask a few things:\\r\\n\\r\\n1. Is there any performance issue with excessive use of `useRef`? Since they\'re just pointer to an already exist object, I guess it\'s not going to have any memory impact?\\r\\n2. I read somewhere that React may decide to re-compute value in `useMemo` if needed, even if I specify `[]` as dependencies. Is it better if I change the implementation to `useState` with lazy init, instead of `useCallback`?\\r\\n3. Or is there a much more simpler, a true React way to achieve what I want but I have overlooked?","number":16091,"user":{"login":"dangcuuson"},"state":"closed","created_at":"2019-07-09T18:00:38Z"},{"id":465681459,"title":"Update comments","body":"See files changed","number":16090,"user":{"login":"pixcai"},"state":"closed","created_at":"2019-07-09T09:46:28Z"},{"id":465667748,"title":"Remove Did not expect server HTML to contain a <style> in <div> from react-dom","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI\'m requesting to remove a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact dom shows warnings when there are style tags in between html responses from server\\r\\n\\r\\n```\\r\\nWarning: Did not expect server HTML to contain a <style> in <div>.\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nit\'s not a bug but here is how to reproduce it: \\r\\n\\r\\nClone a SSR supported boiler plate like [react-starter-kit](https://github.com/kriasoft/react-starter-kit) and add this code in any component\'s render method: \\r\\n```jsx\\r\\n{!process.env.BROWSER &&\\r\\n    <style>{\'.test { color: red; }\'}</style>\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nnot throwing warnings\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact: ^16.5.2\\r\\nReact-dom: ^16.5.2\\r\\nBrowser: FireFox 67.0.4\\r\\nI think it\'s always been like this!\\r\\n\\r\\nI think this warning message **should be totally removed from React DOM**, How should I stream using `ReactDOMServer.renderToNodeStream` if I don\'t put the style tags in between HTML tags?\\r\\nI\'ve seen many people using packages like [isomorphic-style-loader](https://github.com/kriasoft/isomorphic-style-loader) which puts all the styles in the head. However if you want to steam the server response, the idea of styles in head is not possible unless you first `renderToString` the entire component tree which eliminates the whole purpose of streaming the results.\\r\\n\\r\\nMy suggestion is that ReactDOM does not considers `style` tags inside html nodes an invalid response from server so it\'s possible to stream server response easier and remove all these inline styles in client and move them to the head(for the sake of easier DOM manipulations in feature).  ","number":16089,"user":{"login":"ImanMh"},"state":"closed","created_at":"2019-07-09T09:18:45Z"},{"id":465638956,"title":"Adding interval after every character input for making server side search : ReactJS","body":"Want to implement a search filter , with each character input I want to make a server call. Also after character that I enter, I need to maintain an interval, so that character is being sent to server and then results come back and then I can type the next character(to prevent user interaction till the data comes back). How can I achieve this?\\r\\n\\r\\n``````````````````````\\r\\n\\r\\n this.state ={\\r\\n      data: [],\\r\\n      searchInput: \'\'\\r\\n }\\r\\n\\r\\n handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\\r\\n    this.setState({ searchInput: event.target.value, loading :true }, () => {\\r\\n      if(this.state.searchInput){\\r\\n           this.search(this.state.searchInput);\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n search = async(input) =>\\r\\n {\\r\\n    let response = await fetch(\'api/fetch/${input}`);\\r\\n    let data = await response.json()\\r\\n    this.setState({data, loading: false});\\r\\n }\\r\\n \\r\\n <input\\r\\n                            name=\\"searchInput\\"\\r\\n                            value={this.state.searchInput || \\"\\"}\\r\\n                            placeholder=\\"Search\\"\\r\\n                            onChange={this.handleChange}\\r\\n />\\r\\n\\r\\n","number":16088,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-09T08:20:13Z"},{"id":465512106,"title":"[Umbrella] Memory Leaks","body":"This issue is a summary of issues mentioned in https://github.com/facebook/react/pull/15157.\\r\\n\\r\\nThere are many different ways to create memory leaks with React since we give you access to the imperative power to do so. Most should be dealt with by clean up / unmount functions.\\r\\n\\r\\nSome could be pure React bugs. Some could be related to the lack of clean up of render phase effects. Others could be related to leaks that exists but the way React works makes them larger than they otherwise would\'ve.\\r\\n\\r\\n# Actionable\\r\\n\\r\\nI think there are at least two actionable patterns to address from #15157:\\r\\n\\r\\n- [ ] If a handle on a DOM node is leaked, it takes the React tree with it. This is a fairly easy mistake to make and the effect is pretty high. What we would do here is special case DOM nodes with refs on them, and always detach their back pointer to the React Fiber, if it was ever fully mounted. We currently traverse these trees anyway when they get deleted. We want to stop doing this for most things but for nodes with a ref it seems minor to special case since they typically need to be invoked with null anyway.\\r\\n- [ ] Investigate the source of the leak in https://github.com/jonnycornwell/potential_react_leak and fix the source of the problem.\\r\\n\\r\\n# Unresolved\\r\\n\\r\\n- [ ] Closing over setState/dispatch or class component instances to global state can leak too. Does this pattern warrant special casing too? Under what conditions?\\r\\n- [ ] Land https://github.com/facebook/react/pull/15157 What patterns are actually covered? It can cut down on a potentially larger leak but is that the whole leak? I could imagine some patterns where this is the complete solution but unclear if it\'s the complete solution for the patterns that people are actually hitting in practice.\\r\\n- [ ] What other issues remain after solving the actionable above? Let\'s make another pass investigating if people\'s original issues remain.\\r\\n\\r\\n# Won\'t Fix\\r\\n\\r\\n- Side-effects in class constructor, componentWillMount, componentWillReceiveProps, componentWillUpdate, getDerivedStateFrom... and render that store a reference to anything stateful outside React won\'t be able to clean up. This is [documented](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in the 16.3 release and is a major design decision as part of the concurrent/suspense/error handling strategy.\\r\\n- Effects/state retained temporarily in alternate fiber likely won\'t be fixed short term. This is due to how Fiber uses two trees and swaps between them. This can lead to additional values being retained until that tree gets some work on it to swap again. This was observed in the Hooks release and there are some confusing cases where a destroy function can hold onto more memory than expected in the closure. Typically this is solved by using a custom hook since that gets its own scope/closure.\\r\\n- Props/child trees retained by alternate children. Similarly, children that was just removed can sometimes between retained by the alternate copy of that. That is until that node gets another update on it which clears out the old children. These cases are fairly unusual and fix themselves eventually as the app lives on.","number":16087,"user":{"login":"sebmarkbage"},"state":"open","created_at":"2019-07-09T00:17:45Z"},{"id":465434452,"title":"useContext unexpected behavior in immediate child component","body":"as [hook API](https://reactjs.org/docs/hooks-reference.html#usecontext) states, The current context value is determined by the value prop of the nearest <MyContext.Provider> ***above the calling component in the tree.*** \\r\\n\\r\\nbut before react new Hooks feature, we could use provider and consumer in the same component and the consumer always points to the nearest component, not nearest above the calling component.\\r\\n\\r\\nthis [sandbox ](https://codesandbox.io/s/gallant-elgamal-23r81) shows that only the useContext has unexpected behavior based on other methods of accessing context value.\\r\\n\\r\\nI think this is by hook\'s limit, or isn\'t it?\\r\\nso based on what premise useContext doesn\'t provide the value form the nearest provider? isn\'t it unexpected?\\r\\n","number":16086,"user":{"login":"HosseinAlipour"},"state":"closed","created_at":"2019-07-08T20:01:01Z"},{"id":465427706,"title":"[Fabric] Add dispatchCommand to React Native renderers","body":"We are adding dispatchCommand to the export of React Native renderers. Right now product code is calling `UIManager.dispatchViewManagerCommand` which we need to get rid of to migrate to Fabric. This export will work for fabric and paper and will be called via generated code in React Native for each view manager command. \\r\\n\\r\\nFor Facebook employees, you can see more information here: https://fb.quip.com/spvkA8zAH9yg","number":16085,"user":{"login":"TheSavior"},"state":"closed","created_at":"2019-07-08T19:43:38Z"},{"id":465365604,"title":"[Flare] Remove responder flags","body":"This PR removes `allowMultipleHostChildren` and `allowEventHooks` \u2013 so all event responders have better defaults and universal behaviour.","number":16084,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-08T17:00:38Z"},{"id":465314323,"title":"React ref incorrectly reports 0 height in production.","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n**What is the current behavior?**\\r\\nImageViewer.js:\\r\\n```\\r\\nclass ImageViewer extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { gotSize: false };\\r\\n    this.containerRef = React.createRef();\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    // get zero here, only in production and only on the first run after refresh\\r\\n    console.log(this.containerRef.current.clientHeight);\\r\\n    this.setState({ gotSize: true });\\r\\n    ...\\r\\n  }\\r\\n  ...\\r\\n  render() {\\r\\n    const { gotSize } = this.state;\\r\\n\\r\\n    return (\\r\\n         ...\\r\\n        <div className={scss[\'canvas-container\']} ref={this.containerRef}>\\r\\n          {gotSize && <Canvas containerRef={this.containerRef} />}\\r\\n        </div>\\r\\n        ...\\r\\n    );\\r\\n  }\\r\\n};\\r\\n```\\r\\nMy css in container basically a box of width:100% and height: 100%, and it takes the full size in the inspector\\r\\nCanvas.js:\\r\\n```\\r\\nclass Canvas extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.updateDimensions = this.updateDimensions.bind(this);\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    window.addEventListener(\'resize\', this.updateDimensions);\\r\\n  }\\r\\n\\r\\n  componentWillUnmount() {\\r\\n    window.removeEventListener(\'resize\', this.updateDimensions);\\r\\n  }\\r\\n\\r\\n  updateDimensions() {\\r\\n   ...\\r\\n   // and of course zero here, but only on the first run\\r\\n   // after refresh, if I close and open the component the second time it works fine\\r\\n    const rect = this.props.containerRef.current.getBoundingClientRect(); \\r\\n    ...\\r\\n  }\\r\\n\\r\\n  render() {...}\\r\\n}\\r\\n```\\r\\n**What is the expected behavior?**\\r\\nGet the correct height\\r\\nenv:\\r\\nproduction: default create-react-app script `\\"react-app-rewired build\\"`\\r\\nmacOS High Sierra 10.13.6\\r\\nChrome Version 75.0.3770.100 (Official Build) (64-bit)\\r\\n\\"react\\": \\"^16.8.6\\"\\r\\n\\"react-dom\\": \\"^16.8.6\\"","number":16083,"user":{"login":"grigory-bogush"},"state":"closed","created_at":"2019-07-08T15:11:41Z"},{"id":465295316,"title":"[Flare] Switch from currentTarget model to responderTarget model","body":"This PR changes responder `event.currentTarget` to `event.responderTarget`. This also works a bit differently, in that it will give you the last `currentTarget` for the specific responder you\'re working with. This ensures that the `currentTarget` remains consistent between `onEvent` and `onRootEvent` as well usage via hooks.","number":16082,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-08T14:36:49Z"},{"id":465253965,"title":"[Flare] Revise responder event types","body":"This changes responder event types to always be strings, rather than the confusing mix of either string or object (for when something needs to be marked as passive). So previously, you\'d do this `{name: \'click\', passive: false}`. With this change, you\'d do `\\"click_active\\"`.\\r\\n\\r\\nFrom doing this, we can get rid of a bunch of confusing branch code and unify the event targets of both DOM and RN responders so they\'re just `Array<string>`. So this also removes a lot of Flow generics abstraction too.\\r\\n\\r\\nThe net result is less memory used and faster runtime performance as we no longer generate sets and listening keys, instead we loop over the small array. Looping over a small array of strings (< 10 elements) was 5x faster than converting to a key and using that as a key to lookup existence within a Set.","number":16081,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-08T13:20:21Z"},{"id":465162104,"title":"React, how call parent method from child component (via slots)","body":"Hi. I make slots via vuejs. How get/write parent state or call parent method without redux.\\r\\n\\r\\n**Page**\\r\\n\\r\\n```\\r\\nclass Users extends Component {\\r\\n   callbackFilter(data) {\\r\\n     console.log(\'callbackFilter\', data)\\r\\n   }\\r\\n\\r\\n   render() {\\r\\n     return (\\r\\n        <div>\\r\\n           <AppFilter callback={this.callbackFilter.bind(this)}>\\r\\n              <AppFilter.AppSelect field=\\"name\\" />\\r\\n              <AppFilter.AppInput field=\\"name1\\" />\\r\\n              <AppFilter.AppInput field=\\"name1\\" />\\r\\n           </AppFilter>\\r\\n        </div>\\r\\n     )\\r\\n   }\\r\\n}\\r\\n```\\r\\n\\r\\n**AppFilter parent component**\\r\\n\\r\\n```\\r\\nclass AppFilter extends Component {\\r\\n   constructor(props) {\\r\\n    super(props)\\r\\n    this.state = {\\r\\n      filter: {\\r\\n        // dynamic fields child component\\r\\n      }\\r\\n    }\\r\\n    this.bFilter = this.bFilter.bind(this);\\r\\n   }\\r\\n\\r\\n   static AppSelect = AppSelect\\r\\n   static AppInput = AppInput\\r\\n   \\r\\n   bFilter(event) {\\r\\n    if (event) event.preventDefault()\\r\\n    // code map object for callback Users Component (page)\\r\\n    this.props.callback(this.state.filter)\\r\\n   }\\r\\n\\r\\n   render() {\\r\\n     return (\\r\\n        <div>\\r\\n           <div>\\r\\n             {this.props.children} // how call bFilter\\r\\n           </div>\\r\\n        </div>\\r\\n     )\\r\\n   }\\r\\n}\\r\\n```\\r\\n\\r\\n**Example child component**\\r\\n\\r\\n```\\r\\nclass AppInput extends Component {\\r\\n  callback(event) {\\r\\n    // how get parent instants state or bFilter method for read state\\r\\n  }\\r\\n  render() {\\r\\n    return (\\r\\n      <Input onChange={this.callback.bind(this)} />\\r\\n    )\\r\\n  }\\r\\n}\\r\\n```","number":16080,"user":{"login":"makenskiy"},"state":"closed","created_at":"2019-07-08T09:51:40Z"},{"id":464977430,"title":"eslint-plugin-react-hooks: Ensure reducer is pure","body":"I just spend the whole day debugging a race condition where one dispatch sometimes called a reducer twice and because of my reducer wasn\'t pure, the app behaved incorrectly.\\r\\n\\r\\n```ts\\r\\nconst reducer: Reducer<State, Action> = (state, action) => {\\r\\n  const getSortedFocusables = () => {\\r\\n    // Never do that! Reducer isn\'t pure!\\r\\n    return [...state.focusables].sort(documentPositionComparator);\\r\\n  };\\r\\n```\\r\\n\\r\\nAs Sebastian told me: \\r\\n\\r\\n> One dispatch can call a reducer twice under certain conditions but it would call it with the old state as input. So if it\'s pure, it\'s unobservable. A reducer function must be pure.\\r\\n\\r\\nA reducer function must be pure.\\r\\nA reducer function must be pure.\\r\\nA reducer function must be pure.\\r\\nA reducer function must be pure.\\r\\n\\r\\nI hope it\'s possible eslint-plugin-react-hooks could detect it, but I am not sure whether it\'s possible.","number":16079,"user":{"login":"steida"},"state":"closed","created_at":"2019-07-07T18:02:24Z"},{"id":464968632,"title":"extract \\"hooks\\" logic for reuse in other component frameworks","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\n*feature*\\r\\n\\r\\nWill you consider extracting hooks logic from React?\\r\\n\\r\\nLoving hooks idea, so much, but I am not able to use it at my work since I am tightly bound to webcomponents ecosystem, and React does not play nicely with it, even if it did it will add on a bundle size and complexity of learning multiple component frameworks for my colleagues.\\r\\n\\r\\nLooking at libraries like [haunted](https://github.com/matthewp/haunted), which implements React after hooks version but with webcomponents and lit-html, there is a demand to implement it in other components frameworks or in  this case webcomponents.\\r\\n\\r\\nIf implementation will be extracted, there is a higher chance of hooks from user land to work across frameworks in same way and with less workarounds \\r\\n","number":16078,"user":{"login":"askbeka"},"state":"closed","created_at":"2019-07-07T16:18:06Z"},{"id":464953932,"title":"React typescript StandardLonghandProperties -moz-transform is missing","body":"I\'m trying to put: \\"-moz-transform\\": \\"scale(\\" + zoom + \\")\\" on react style\\r\\n\\r\\nI got this error:\\r\\nUnsupported style property -moz-transform. Did you mean MozTransform?\\r\\n\\r\\nBut I cannot see MozTransform in csstype/index.d.ts (interface StandardLonghandProperties)\\r\\n\\r\\nWhat is the workaround? what is the correct key/class-name to use?","number":16077,"user":{"login":"chezih"},"state":"closed","created_at":"2019-07-07T13:41:37Z"},{"id":464952014,"title":"Fix typos","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16076,"user":{"login":"minho42"},"state":"closed","created_at":"2019-07-07T13:19:38Z"},{"id":464920870,"title":"useState setting issue OR Am I using useState horribly wrong?","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug  / behavior / or wrong usage by me\\r\\n\\r\\n**What is the current behavior?**\\r\\nisFresh remains same as previous state\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n(https://codesandbox.io/embed/goofy-blackburn-ptcil)\\r\\ntwo components\\r\\nstate will be logged in console after every set\\r\\nclick button to set state for component individually\\r\\nApp1 - deepcopy of state object - unexpected behavior\\r\\nApp2 - shallowcopy of state object - works fine\\r\\n\\r\\n**What is the expected behavior?**\\r\\nvalue of isFresh in state should get set to false (in deepcopy part)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nlatest - stable\\r\\n","number":16075,"user":{"login":"DExcalibur"},"state":"closed","created_at":"2019-07-07T06:42:16Z"},{"id":464899532,"title":"how the react compiler works","body":"Hello i want to know how the react compiler works\\r\\n\\r\\nStep by step\\r\\nThanks","number":16074,"user":{"login":"neutron92"},"state":"closed","created_at":"2019-07-06T23:46:39Z"},{"id":464890349,"title":"Issues regarding resetting the initial state","body":"I have the following hook:\\r\\n\\r\\n```jsx\\r\\nfunction usePromise ( promise ) {\\r\\n\\r\\n  let [result, setResult] = useState ({ loading: true });\\r\\n\\r\\n  useMemo ( () => {\\r\\n\\r\\n    result = { loading: true };\\r\\n    setResult ( result );\\r\\n\\r\\n    promise.then ( value => setResult ({ loading: false, value }) )\\r\\n           .catch ( error => setResult ({ loading: false, error }) );\\r\\n\\r\\n  }, [promise] );\\r\\n\\r\\n  return result;\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nIt accepts a promise and returns an object that tells you if the promise did resolve/reject or if it did not settle yet. I think this is a fairly common pattern.\\r\\n\\r\\nFirst of all notice how I\'m using `useMemo`, as we want to attach `then`/`catch` handlers only once.\\r\\n\\r\\nSecondly notice how inside `useMemo` I\'m resetting the `result` object whenever the promise changes, as we don\'t want it to return the previous result object instead.\\r\\n\\r\\nI\'m resetting the `result` object both permanently, via `setResult`, and temporarily, by assigning to it directly. I believe the direct assignment is necessary here because otherwise my component will immediately receive the previous `result` object instead of the new one.\\r\\n\\r\\nThere are multiple issues even with this fairly simple hook:\\r\\n\\r\\n### 1 - Inappropriate linter warning\\r\\n\\r\\nThe linter is complaining about assigning directly to `result` with the following message:\\r\\n\\r\\n```\\r\\nAssignments to the \'result\' variable from inside React Hook useMemo will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the \'.current\' property. Otherwise, you can move this variable directly inside useMemo.eslint(react-hooks/exhaustive-deps)\\r\\n```\\r\\n\\r\\nSince I\'m also using `setResult` here this issue seems none existent, maybe this warning shouldn\'t be displayed in this situation?\\r\\n\\r\\n### 2 - Missing linter warning\\r\\n\\r\\nIf I don\'t update the `result` variable immediately by directly assigning to it my component will initially receive the wrong object, which is an error, and I think it will also be rendered twice, once with the wrong object, and a second time with the right one once `setResult` does its job.\\r\\n\\r\\nShouldn\'t in situations like this be a linter rule that _encourages_, instead of discourages, you to also update the value directly in order to avoid those issues?\\r\\n\\r\\n### 3 - Updating state while the component is unmounted\\r\\n\\r\\nI think my `usePromise` hook will eventually call `setResult` while the component is unmounted because the promise will eventually resolve/reject after the component has been unmounted.\\r\\n\\r\\nSo I\'ll have to update it to check if the component is still mounted, otherwise React will log an error about this.\\r\\n\\r\\nWhat\'s the point of this error? Why can\'t/shouldn\'t React itself just ignore my `setResult` call if the component is not mounted? Or at the very least why is React logging an error about this and not a warning?\\r\\n\\r\\nI find myself stumbling into this issue pretty often, perhaps a linter rule can be written about this?\\r\\n\\r\\n### 4 - Which hook to use?\\r\\n\\r\\nIf I\'m understanding this correctly instead of `useMemo` I could have used `useEffect` or `useLayoutEffect` and have gotten _almost_ the same result, I say almost because:\\r\\n\\r\\n- `useMemo` calls the passed function immediately, which is want we want or the promise may throw an exception that we won\'t be able to catch.\\r\\n- `useLayoutEffect` would call the passed function at a later time, right before the browser is ready to render the frame, or at least I believe that\'s the case, but if I have 10 `useLayoutEffect` calls and the first one keeps the main thread busy for 1 minute are the other 9 always going to get executed before the browser paints?\\r\\n- `useEffect` will call the passed function at a point in time that\'s not very clear to me. (e.g. should it be equivalent to `componentDidMount` + `componentWillUnmount`? Or was it `componentWillMount` + `componentDidUnmount` or some other permutation?)\\r\\n\\r\\nThe fact that there are 3 built-in hooks that could be used for this, which may not reveal any error for a long time, is a bit confusing to me.\\r\\n\\r\\n### General feedback\\r\\n\\r\\nI\'ve recently migrated an app of mine to hooks and this particular issue has bit me more than once already, I keep stumbling upon it. In general I\'m having troubles writing reliable custom hooks and components.\\r\\n\\r\\n1. There\'s no linter rule that reminds me to also update the value provided by `useState` hooks immediately, in fact it seems the current one discourages it.\\r\\n2. I think my components have become harder to reason about sometimes: \\r\\n\\t- If I call `setFoo` 10 times is my component going to render 10 times?\\r\\n\\t- Will React re-render my component also if I pass `setFoo` the same exact value as before?\\r\\n\\t- If I use `useState` 3 times, and call the related `set*` methods from inside 3 `useEffect` hooks, one for each, is my component going to render 4 times if the first `useEffect` block relies on and updates the value provided by the first `useState`, the second `useEffect` block relies on the value provided by the first `useState` call too and updates the second, and the third `useEffect` block relies on the value provided by the second `useState` call and updates the third? And shouldn\'t I try to minimize these renderings by updating those values via an assignment also? \\r\\n\\t- I basically use `useEffect` by default, but some times I see a bit of flickering/glitches in the UI, I replace it with `useLayoutEffect` instead, the issue gets fixed, and I notice that I\'m actually mutating the DOM or something inside the hook.\\r\\n\\t\\t- I find this to be quite error-prone for me, as sometimes it\'s not clear that I\'m actually mutating the DOM (say I want to update the `scrollTop` property of an element or something), as the line that actually does that may be abstracted away by some other high-level API.\\r\\n\\t\\t- I also find the mere existence of 2 effect-related hooks confusing, I think I understand under which scenarios `useLayoutEffect` should be used, and that it\'s called before the browser paints the new frame, but then when is my `useEffect` hook called? Is it always called after `useLayoutEffect`? What would happen if I replaced all my `useEffect` calls with `useLayoutEffect` calls instead?\\r\\n3. Generally hooks seem like a very good abstraction to me, but writing custom ones seems too error prone to me. I\'m pretty new to hooks overall, but I think I\'m relatively experienced as a developer, but if even writing a relatively simple one, like the `usePromise` hook I posted, has so many pitfalls to be aware of maybe this is an issue? I realize this sounds a bit like blaming the language for the bugs I\'ve introduced, but perhaps there\'s a way to make this process less error prone? i.e. new/improved linter rules, less ambiguity (`useEffect`/`useLayoutEffect`), clearer lifecycle (when is `useEffect` even called? are my components re-rendering an unexpected amount of times?), no need to update values directly (hypothetically maybe they should be proxies so that `set*` functions can update them immediately or something? I realize that proxies aren\'t polyfillable but there might be other ways around it), no need for specifying dependencies (the code might be statically analyzable at build-time most of the times).\\r\\n\\r\\nIn hindsight maybe this \\"General feedback\\" section is a bit off-topic, let me know if you guys want me to move that into a separate issue.\\r\\n\\r\\nSorry for the long issue, hopefully it\'s helpful.","number":16073,"user":{"login":"fabiospampinato"},"state":"closed","created_at":"2019-07-06T21:03:26Z"},{"id":464818457,"title":"fix a puzzle variable name. rootSibling => rootChild.","body":"The origin variable is temporary for storing `container.lastChild`. So **Child** is more accurate than **Sibling**.","number":16072,"user":{"login":"gxvv"},"state":"closed","created_at":"2019-07-06T05:04:04Z"},{"id":464809008,"title":"Add div smooshing","body":"Add div smooshing just to show the diff from Dan\'s video :)\\r\\n\\r\\nSee https://twitter.com/dan_abramov/status/1143867683051646976","number":16071,"user":{"login":"nem035"},"state":"closed","created_at":"2019-07-06T02:25:03Z"},{"id":464806274,"title":"prop-types not work save child please","body":"I use prop-types package . want to validate my props, i transmit a error type of prop but prop-types not work.\\r\\n\\r\\nMACOS\\r\\nreact 16.8.6\\r\\nreact-dom 16.8.6\\r\\nprop-types 15.5.7\\r\\nredux 4.0.1\\r\\nreact-redux 2.3.0\\r\\n\\r\\n\\r\\n```\\r\\nimport React from \'react\';\\r\\nimport { Button, Icon } from \'antd\';\\r\\nimport PropTypes from \'prop-types\';\\r\\n\\r\\nconst PageHeader = ({isUnflod, showFilterPanel, title}) => (\\r\\n    <>\\r\\n        <div class=\'page-title\'>{title}</div>\\r\\n        <div class=\'page-header-base-button\'>\\r\\n            <Button className=\'left-button\' type=\'primary\'>\u6dfb\u52a0</Button>\\r\\n            <Button type=\'default\' onClick={() => showFilterPanel(!isUnflod)}>\\r\\n                \u7b5b\u9009<Icon type={isUnflod ? \'up\' : \'down\'} />\\r\\n            </Button>\\r\\n        </div>\\r\\n    </>\\r\\n)\\r\\n\\r\\nPageHeader.propTypes = {\\r\\n    title: PropTypes.number,\\r\\n    isUnflod: PropTypes.bool.isRequired,\\r\\n    showFilterPanel: PropTypes.func.isRequired\\r\\n}\\r\\n\\r\\nexport default PageHeader;\\r\\n```\\r\\n```\\r\\nconst Vehicle = ({isUnflod, showFilterPanel, pagination}) => (\\r\\n    <>\\r\\n        <PageHeader title=\'\u8f66\u8f86\u7ba1\u7406\' isUnflod={isUnflod} showFilterPanel={showFilterPanel} />\\r\\n        {\\r\\n            isUnflod ? <VehicleFilterPanel /> : null\\r\\n        }\\r\\n    </>\\r\\n)\\r\\n```","number":16070,"user":{"login":"shenweizheng110"},"state":"closed","created_at":"2019-07-06T01:42:30Z"},{"id":464616503,"title":"Better prop types warnigs","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nRequest a feature\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact prop types warning doesn\'t reveal info on the component\'s instance\\r\\n\\r\\n**What is the expected behavior?**\\r\\nPrint also the component\'s props\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nN/A\\r\\n\\r\\nThe current warnings point the developer only to the source code, and it would be AMAZING if we\'ll easily see which component instance caused the warnings. Consider a list with hundreds of items, each rendering a component. ATM there\'s no convenient way to track down the renegade instance.\\r\\n\\r\\nSo instead of the current behavior:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/6963212/60722000-479d8000-9f38-11e9-9295-a113dbac079d.png)\\r\\n\\r\\nAlso add:\\r\\n\\r\\n```\\r\\nindex.js:1375 Warning: Failed prop type: The prop `latitude` is marked as required in `RestaurantListItem`, but its value is `null`.\\r\\n\\r\\nRestaurantListItem\'s instance has the following props: {OBJECT_OF_PROPS_THAT_OPENS_ON_CLICK}\\r\\n```\\r\\n\\r\\nI currently find myself many times having to temporary do this in different components.\\r\\n\\r\\nIt seems to me like a very easy thing to add, at least for development build.\\r\\n\\r\\nThoughts?\\r\\n\\r\\nI can take a swing at it with some guidance (I\'d love to dip my toes in React\'s code)","number":16069,"user":{"login":"goldylucks"},"state":"closed","created_at":"2019-07-05T12:23:18Z"},{"id":464517946,"title":"react-dom/server - how to ignore trans-pile some values with renderToString method","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nhow to ignore trans-pile some values with renderToString method?\\r\\nmore details: [https://stackoverflow.com/questions/56897860/reactdomserver-how-to-ignore-trans-pile-some-values-with-rendertostring-method](https://stackoverflow.com/questions/56897860/reactdomserver-how-to-ignore-trans-pile-some-values-with-rendertostring-method)\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16068,"user":{"login":"ebrahimiaval"},"state":"closed","created_at":"2019-07-05T08:10:37Z"},{"id":464471676,"title":"[Flare] Clear pressStart timeout on pointercancel","body":"While using the Press component on a touchscreen device, if you started a press and subsequently used that press to scroll, any press feedback triggered by pressStart/pressChange still fires which causes some confusing UX. This diff prevents that by clearing the `pressStartTimeout` on `pointercancel`.","number":16067,"user":{"login":"vincentriemer"},"state":"closed","created_at":"2019-07-05T05:47:44Z"},{"id":464412844,"title":"[Flare] Add currentTarget and unify RN and DOM codepaths","body":"Previously, we had to use the context method `getEventCurrentTarget` to find the current event target. We can optimize this significantly by providing it on the `event` responder object passed to responder method callbacks. This way, we don\'t need to call `getEventCurrentTarget` and do more work than needed. From this, I noticed that we also didn\'t guard against `document` elements being the target (rare, granted \u2013 but possible). You can\'t call a bunch of the methods we use on `document` so this would result in JS errors at runtime.\\r\\n\\r\\nI also noticed that the RN codepath diverged from the ReactDOM version \u2013 so I took this opportunity to align them.","number":16066,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-04T23:27:25Z"},{"id":464306333,"title":"[Flare] Rename target/root events on event responders","body":"With the very likely addition of first-class event targets, the existing naming of `targetEventTypes` and `rootEventTypes` becomes a bit confusing. This PR renames them to include `host`, which is exactly what they are \u2013 host events that we register on the specific platform. Event \\"types\\" was also a bit confusing too, as originally they were only strings, but then became objects where you could define if something was passive etc. This should hopefully make things easier to understand.","number":16065,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-04T14:51:47Z"},{"id":464263483,"title":"Am i using context horribly wrong?","body":"Hi there, my first time asking a question here :)\\r\\n\\r\\nI don\'t have any problems at the moment (loving the react hooks btw).\\r\\n\\r\\nI just want to ask for ideas on how to handle a particular scenario i have and if i am using the context hooks properly.\\r\\n\\r\\nSo my situation is with a form like this:\\r\\n\\r\\nContext file: \\r\\n\\r\\n```\\r\\nexport const StepsContext = createContext({\\r\\n    steps: []\\r\\n});\\r\\n\\r\\n```\\r\\n\\r\\nThis would be the \\"parent\\" component. \\r\\n```\\r\\nconst steps = useContext(StepsContext);\\r\\n\\r\\nconst sendForm = () => {\\r\\n  callEndpoint(steps);\\r\\n};\\r\\n\\r\\nreturn <Form>\\r\\n\\r\\n  <Input />  // Default input always present\\r\\n  <Steps /> // Component that dynamically adds more inputs as i click on a button.\\r\\n\\r\\n  <button onClck={sendForm} />\\r\\n</Form>  \\r\\n```\\r\\n\\r\\nInside the Steps component\\r\\n```\\r\\n// This component adds more inputs as i click on a button and sets a \\"config\\" state with the \\r\\n// values of each input, in an array that looks kinda like [ 0: { value: \\"value\\" }  ]\\r\\n// Each new index is a new input\\r\\n\\r\\nconst context = useContext(StepsContext);\\r\\nconst [inputs, setInputs] = useState([]);\\r\\n\\r\\nreturn <button onClick={addNewInput}/>\\r\\n\\r\\nconst addNewInput = () => {\\r\\n // Do something to add new input and set the config, so if we have two the config looks like:\\r\\n// [ 0: { value: \\"somethig\\"}, 1: { value: \\"else\\" } ]\\r\\n\\r\\n// And now i update the context so the parent knows how many steps we have and their config\\r\\ncontext.steps = newConfig;\\r\\n}\\r\\n```\\r\\n\\r\\nThis works and i get the data where i want it, but for some reason this assignment i do: `context.steps = newConfig;` feels wrong hehe.\\r\\n\\r\\nAm i doing it right? \\r\\nCan anyone throw any ideas at me on how to approach this or do it in a nicer way?\\r\\n\\r\\nThanks and kind regards.\\r\\n\\r\\n","number":16064,"user":{"login":"jbures"},"state":"closed","created_at":"2019-07-04T13:19:58Z"},{"id":464227938,"title":"[Flare] Remove dead event target code","body":"This PR removes some dead code from the old event target model.","number":16063,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-04T11:58:56Z"},{"id":464197700,"title":"hooks clear effect function run behind DidUpdate erveytime","body":"hello\uff0ci try hooks;but when i try to clear effect,just like componentWillUnmount();but hooks clear effect function run just behind component did update everytime,\\r\\n\\r\\n```\\r\\nimport React, { useState, useEffect } from \'react\';\\r\\n\\r\\nexport default function ScrollView({ count }) {\\r\\n  useEffect(() => {\\r\\n    const timeId = setInterval(() => {}, 2000);\\r\\n    return function clear() {\\r\\n      console.log(\'\u4f60\u597d\' + count);\\r\\n      clearInterval(timeId);\\r\\n    };\\r\\n  });\\r\\n\\r\\n  return <div>counting + count</div>;\\r\\n}\\r\\n```","number":16062,"user":{"login":"cjl-df"},"state":"closed","created_at":"2019-07-04T10:44:20Z"},{"id":464195713,"title":"Show console warning when StrictMode is active","body":"I am extracting this feature request from #12906, which was already closed when the feature was requested, so was likely lost.\\r\\n\\r\\n**What is the current behaviour?**\\r\\n\\r\\nWhen `<React.StrictMode>` is used, some functions will be intentionally double-invoked such as the render method. This is fine, but can lead to confusion for developers months later, as they try to figure out why something is being called twice during debugging, etc.\\r\\n\\r\\n**What is the expected behaviour?**\\r\\n\\r\\nFrom my comment on the other thread:\\r\\n\\r\\n> The problem is that if strict mode was added long ago, it is not obvious what the source of the double-render is (I was hunting react-router and redux logic).\\r\\n>\\r\\n> I think it would be nice if strict mode printed a console statement when used anywhere on the page and currently enabled (i.e. in dev mode), akin to the existing \\"Download the React DevTools for a better development experience: https://fb.me/react-devtools\\" advert.\\r\\n>\\r\\n> Something like \\"Strict mode is enabled; some lifecycle methods including constructors and render will be double-invoked to check for side-effects\\"\\r\\n\\r\\nThe suggestion received some support on the original issue, and I think adding this feature would save developer time and confusion when working on codebases which have enabled strict mode during development.","number":16061,"user":{"login":"davidje13"},"state":"open","created_at":"2019-07-04T10:39:22Z"},{"id":464163108,"title":"[Fresh] Prevent local variables from being used in the hook signature","body":"The current implementation of the babel plugin would move any `use*` to the hook signature, except the \\"builtin\\" hooks.\\r\\nThat could lead to a false positive, when something, which _ducks_ like hook could not be used in the signature.\\r\\n\\r\\n```js\\r\\nconst Component = ({useTheForce}) => {\\r\\n  const useInnerHook = () => {useTheForce();};\\r\\n\\r\\n  useInnerHook();\\r\\n}\\r\\n```\\r\\n\\r\\n### Solution\\r\\nCheck that variable is reachable from the `signature` scope. That would not let track the \\"real\\" hook composition, but, at least, would not lead to runtime error.","number":16060,"user":{"login":"theKashey"},"state":"closed","created_at":"2019-07-04T09:27:46Z"},{"id":464150947,"title":"[Feature request] Improved reconciliation/diffing algorithm","body":"Currently, the reconciliation process, if finds change in element type, would mark and unmount the element and its sub nodes. And I have a big problem with it, I can\'t think of any way around but to ask for an improvement in the React core itself.\\r\\n\\r\\nFor example, I have Route A and Route B, and in both routes, I have same Layout element, and I can\'t find a way to change route without un-mounting my Layout component\\r\\n\\r\\nIf there could be a way to mark the Route elements, and let it by pass the diffing algorithm, and go on checking the Layout elements like normal, then would be god sent improvement for me\\r\\n\\r\\nThanks a lot, and after 15 years of software development, React is the best thing ever for me\\r\\n\\r\\nQuan","number":16059,"user":{"login":"quanla"},"state":"closed","created_at":"2019-07-04T09:02:11Z"},{"id":464074786,"title":"React fails when mapping through an immu array in JSX","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen `map`ing over an immu array in JSX, react fails with `Cannot add property validated, object is not extensible`.\\r\\nThe error is coming from `warnForMissingKey`\\r\\n\\r\\nSee: https://codesandbox.io/s/thirsty-mountain-j3bir for a failing example.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe rendering to flow as normal - in the supplied case, to see an unordered list with one element in it.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact `16.8.6`, \\r\\nUbuntu: 18.04.2 LTS\\r\\nChrome: Version 75.0.3770.80 (Official Build) (64-bit)\\r\\n\\r\\n","number":16058,"user":{"login":"tristanHessell"},"state":"closed","created_at":"2019-07-04T05:51:42Z"},{"id":464044829,"title":"Adding proxy to package.json breaks browser reload on change","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nAdding proxy with any website to package.json breaks browser reload on change. Removing it, resolves the issue.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n1. `npx create-react-app test`\\r\\n2. Add \\"proxy\\": \\"any website\\" to package.json,\\r\\n3. `npm start`\\r\\n4. Make any change in index.js\\r\\n5. Browser didn\'t reload\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nLatest create-react-app version. Ubuntu 18.04\\r\\n","number":16057,"user":{"login":"s2qts"},"state":"closed","created_at":"2019-07-04T03:39:51Z"},{"id":464034966,"title":"Undo, snapshot, hydration of state","body":"With Concurrent mode, storing all state in a single atom is no longer an option while taking advantage of prioritization. However, there are a number of benefits that a single atom provided such as history, and ease of snapshot + hydration.\\r\\n\\r\\nReact seems perfectly poised to be the location where these features could exist. Otherwise, we run into the continued problem that some component using local state can\'t be serialized/undone.\\r\\n\\r\\nI\'ve contemplated trying to pry open the internals of React and patching useState myself to experiment adding these features, but wanted to open up an issue first to see what current thoughts were on providing these functions at the framework level.","number":16056,"user":{"login":"Lokeh"},"state":"closed","created_at":"2019-07-04T02:53:21Z"},{"id":464024217,"title":"fix spelling error: resoltion ->  resolution","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16055,"user":{"login":"fnll"},"state":"closed","created_at":"2019-07-04T02:02:01Z"},{"id":463992493,"title":"[Flare] Remove capture phase Flare events","body":"This PR removes the capture phase from the Flare event system. It was never used or needed internally and only added code-size and complexity to the codebase.","number":16054,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-03T23:22:41Z"},{"id":463992381,"title":"Can\'t get dynamic data to show up in react component using several hooks...","body":"I have a react component using several hooks in which I\'m trying to output the data from `getBoundingCLientRect()` into a box on the site.\\r\\n\\r\\nThis is the code:\\r\\n\\r\\n\\r\\n```jsx\\r\\nconst ContentContainer = (props) => {\\r\\n\\r\\n  const elementRef = useRef()\\r\\n\\r\\n  function useScrollPosition() {\\r\\n  \\r\\n    function getScroll() {\\r\\n      const data = elementRef.current ? \\r\\n        elementRef.current.getBoundingCLientRect() : 0\\r\\n      const { bottom, top, left, right, x, y } = data\\r\\n      return { bottom, top, left, right, x, y }\\r\\n    }\\r\\n\\r\\n    const [scrollPosition, setScrollPosition] = useState(getScroll)\\r\\n  \\r\\n    useEffect(() => {\\r\\n      \\r\\n      function handleScroll() {\\r\\n        setScrollPosition(getScroll())\\r\\n      }\\r\\n  \\r\\n      window.addEventListener(\'scroll\', handleScroll)\\r\\n      return () => window.removeEventListener(\'scroll\', handleScroll)\\r\\n    }, []) // Empty array ensures that effect is only run on mount and unmount\\r\\n  \\r\\n    return scrollPosition\\r\\n  }\\r\\n\\r\\n  const scroll = useScrollPosition();\\r\\n\\r\\n  return (\\r\\n    <Main ref={elementRef}>\\r\\n      <ScrollInfo>\\r\\n        From Top: {scroll.top}px <br/>\\r\\n        From Bottom: {scroll.bottom}px <br/>\\r\\n        From Left: {scroll.left}px <br/>\\r\\n        From right: {scroll.right}px <br/>\\r\\n        Vertical Scroll: {scroll.y}px <br/>\\r\\n        Horizontal Scroll: {scroll.x}px <br/>\\r\\n      </ScrollInfo>\\r\\n      {props.children}\\r\\n    </Main>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default ContentContainer\\r\\n```\\r\\n\\r\\n...but no dynamic data shows up in the window where it\'s supposed to be displayed:\\r\\n\\r\\n<img width=\\"177\\" alt=\\"Screenshot 2019-07-03 16 15 17\\" src=\\"https://user-images.githubusercontent.com/7884263/60630205-e9dd2c80-9dad-11e9-897c-bdccfa5fa042.png\\">\\r\\n\\r\\nno errors show up in the terminal or the console, but it just does not work. Stumped at the current moment, and don\'t know what to fix to make it work.\\r\\n","number":16053,"user":{"login":"rchrdnsh"},"state":"closed","created_at":"2019-07-03T23:22:08Z"},{"id":463916727,"title":"Nested react router with user authentication","body":"I am trying to make my app use nested React routers to navigate through my app but am not managing to do the following: I have a router to switch between the login page and the homepage and a router in the homepage to switch between the body content \\r\\n\\r\\n1. Return to login page on clicking log out. If i click logout the url goes to /login but does not render the right component. Upon refreshing the page the right component is rendered. \\r\\n\\r\\n2. When inputing a direct page in the url eg. localhost:3000/about, the page doesn\'t load anything\\r\\n\\r\\nMy desired functionality is the following: \\r\\n1. On load of localhost:3000/ - If user is logged in it loads the \\"About\\" component ELSE if user is logged out it is redirected to /login\\r\\n2. On load of localhost:3000/contact - If user is logged in it loads the homepage and switches the body content to show the contact component , if user is logged out it redirects to the login page but on login takes the user to the contact component \\r\\n3. Clicking log out returns to the login component \\r\\n\\r\\nI have added the source code here: https://codesandbox.io/embed/loving-engelbart-x3ns3\\r\\nThe first router is in App/App.jsx and the body content router is in _pages/HomePage.jsx\\r\\nUnfortunately i had to remove the login authentication so the login does not work but maybe there is a clear issue with my code that can be outlined.\\r\\n\\r\\n\\r\\n\\r\\nThanks","number":16052,"user":{"login":"paufar"},"state":"closed","created_at":"2019-07-03T19:25:58Z"},{"id":463894507,"title":"[Flare] createInitialState -> getInitialState","body":"There was feedback that `createInitialState` on event responders made them seem like the old React component API and that responders might have a `this`. To be honest, the naming is probably better suited to be using `get` rather than `create` anyway, as the responder methods are not bound to an instance, but are rather static functions.","number":16051,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-03T18:26:13Z"},{"id":463858513,"title":"scheduler package contains wrong es module flag","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**bug**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe cjs version of scheduler includes the following line:\\r\\n\\r\\n```javascript\\r\\nObject.defineProperty(exports, \'__esModule\', { value: true });\\r\\n```\\r\\n\\r\\nhttps://unpkg.com/scheduler@0.14.0/cjs/scheduler.development.js\\r\\n\\r\\nBut it\'s definitely not an ES module.\\r\\n\\r\\nThe flag brokes our webpack build.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe cjs version should not include a `__esModule` flag.\\r\\n","number":16050,"user":{"login":"yesmeck"},"state":"closed","created_at":"2019-07-03T16:57:25Z"},{"id":463734716,"title":"Adds experimental fundamental interface","body":"Note: this is a completely private API for internal experimentation use only. Hydration support will coming in a follow up. The size differences are mostly due to the additional types and symbols added.","number":16049,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-03T12:50:40Z"},{"id":463733318,"title":"Adds experimental fundamental interface","body":"Note: this is a completely private API for internal experimentation use only.","number":16048,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-03T12:47:49Z"},{"id":463669785,"title":"[Flare] Cleanup ReactFiberEvents-test","body":"This fixes something I noticed last week but didn\'t get the chance to fix. It names the test file to the correct name and also uses the `React.unstable_createEvent` API rather than using internals.","number":16047,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-03T10:20:51Z"},{"id":463629768,"title":"[Fire] Remove unused React fire fork","body":"This PR removes the React Fire host config/reconciler fork of ReactDOM. The code isn\'t being used anywhere and has to be maintained every time we change the ReactDOM host config or object.","number":16046,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-03T08:58:19Z"},{"id":463595706,"title":"Keep getting `TypeError: Cannot read property \'scrollTop\' of null` in a custom hook...","body":"I made a hook to get the scroll position of a component, like so:\\r\\n\\r\\n```js\\r\\nfunction useScrollPosition() {\\r\\n\\r\\n  function getScroll() {\\r\\n    return {\\r\\n      x: document.getElementById(\'ContentContainer\').scrollTop,\\r\\n      y: document.getElementById(\'ContentContainer\').scrollLeft\\r\\n    }\\r\\n  }\\r\\n\\r\\n  const [scrollPosition, setScrollPosition] = useState(getScroll)\\r\\n\\r\\n  useEffect(() => {\\r\\n    \\r\\n    function handleScroll() {\\r\\n      setScrollPosition(getScroll())\\r\\n    }\\r\\n\\r\\n    window.addEventListener(\'scroll\', handleScroll)\\r\\n    return () => window.removeEventListener(\'scroll\', handleScroll)\\r\\n  }, []) // Empty array ensures that effect is only run on mount and unmount\\r\\n\\r\\n  return scrollPosition\\r\\n}\\r\\n```\\r\\n\\r\\n...and implemented it in the same file, like so:\\r\\n\\r\\n```jsx\\r\\nconst ContentContainer = (props) => {\\r\\n\\r\\n  const scroll = useScrollPosition();\\r\\n\\r\\n  return (\\r\\n    <Main id=\'ContentContainer\'>\\r\\n      <ScrollInfo>\\r\\n        Vertical position: {scroll.x}px / Horizontal Position: {scroll.y}px\\r\\n      </ScrollInfo>\\r\\n      {props.children}\\r\\n    </Main>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default ContentContainer\\r\\n```\\r\\n\\r\\n...and i keep getting the same error:\\r\\n\\r\\n<img width=\\"797\\" alt=\\"Screenshot 2019-07-03 00 38 46\\" src=\\"https://user-images.githubusercontent.com/7884263/60572670-f4a2ad80-9d2a-11e9-8162-d4fe1c973f87.png\\">\\r\\n\\r\\nIf I disable the hook and the app runs properly, I can then find the scroll position in the console just fine.\\r\\n\\r\\nAny thoughts as to why I might be getting `null` back for something that clearly isn\'t `null` when the app loads without this hook enabled?","number":16045,"user":{"login":"rchrdnsh"},"state":"closed","created_at":"2019-07-03T07:42:21Z"},{"id":463510795,"title":"How to share component instance, Don\'t unmount?","body":"I have a component.\\r\\n```jsx\\r\\nimport TradingView from \'react-tradingview-widget\'\\r\\n```\\r\\nIt\'s loading time too long and I need it in many pages.\\r\\nbut parent component unmount, it too.\\r\\nNo... <TradingView /> don\'t unmount. I need it save in memory and show anywhere have it\'s component.\\r\\n","number":16044,"user":{"login":"Lursun"},"state":"closed","created_at":"2019-07-03T02:15:46Z"},{"id":463507714,"title":"Antipattern? Pass state dispatcher as a prop to child component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nI have question\\r\\n\\r\\nCan I pass state dispatcher (second arg from `useState`) as a prop to child component. Is it antipattern or allowable practice?\\r\\n\\r\\nFor example. I have a component `TextField`. I\'m using it everywhere. And everyvere I need save its value to state. For example:\\r\\n\\r\\n```javascript\\r\\nimport { default as React, setState, useCallback } from \'react\';\\r\\nimport { TextField } from \'@component\';\\r\\n\\r\\nconst SomeComponent = (props) => {\\r\\n  const [value, setValue] = useState(\'\');\\r\\n \\r\\n const handleChange = useCallback((e) => setValue(e.target.value), []);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <TextField onChange={handleChange} />\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nI\'m tired to write handleChange everywhere when `TextField` had used... I want make this case simpliest.\\r\\n\\r\\nCan I pass `setValue` to TextField as a props (instead adding onChange) and implement setting value inside of TextField?\\r\\n\\r\\n```javascript\\r\\n// ...\\r\\n  <TextField valueDispatcher={setValue} />\\r\\n//...\\r\\n```","number":16043,"user":{"login":"vyushin"},"state":"closed","created_at":"2019-07-03T02:00:13Z"},{"id":463501684,"title":"[fail] reset IsThisRendererActing correctly","body":"I missed this in https://github.com/facebook/react/pull/16039. I\'d pointed at the wrong previous state, corrupting it in further use. This PR fixes that, and adds a test to make sure it doesn\'t happen again.\\r\\n\\r\\nAlso applies suggested change from https://github.com/facebook/react/pull/16041#discussion_r299748307","number":16042,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-03T01:29:26Z"},{"id":463475238,"title":"[fail] Only warn on unacted effects for strict / non sync modes","body":"(basically, when `fiber.mode !== 0b0000`)\\r\\n\\r\\nWarnings on unacted effects may be too noisy, especially for legacy apps. This PR fires the warning only when in a non sync mode (concurrent/batched), or when in strict mode. This should make gradually updating codebases easier too.\\r\\n\\r\\nI also added batched mode tests to the act() suite.","number":16041,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-02T23:16:32Z"},{"id":463439931,"title":"[ESLint] Include functions instead of the objects they are part of when the result is unused","body":"This changes how `eslint-plugin-react-hooks/exhaustive-deps` works.\\r\\n\\r\\nTake this component as an example:\\r\\n```js\\r\\nfunction App() {\\r\\n  const myContext = useMyContext();\\r\\n  useEffect(() => {\\r\\n    myContext.setValue(e => e + 1);\\r\\n  }, [myContext.setValue]);\\r\\n  return null;\\r\\n}\\r\\n```\\r\\n\\r\\nThe exhaustive deps rule compains with the warning that `myContext` is missing from the deps array. However, because calling the function changes stuff in `myContext` adding it to the deps array would result in an endless re-render loop.\\r\\n\\r\\nPlease see #15924 for more information. For an interactive version, please see this CodeSandbox:\\r\\n[![Edit react-issue-15924](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/react-issue-15924-yz8uq?fontsize=14)\\r\\n\\r\\nAs long as we don\'t use the result of a function, it\'s fine to include the function itself to the deps array instead of including the object it comes from.\\r\\n\\r\\nIf anything should work differently as how I implemented it, please let me know and I\'ll try to adjust my code.\\r\\n\\r\\nThis solves issues #15924 and #15448.","number":16040,"user":{"login":"bartlangelaan"},"state":"closed","created_at":"2019-07-02T21:17:27Z"},{"id":463419667,"title":"allow nested `act()`s from different renderers","body":"(an alternative to https://github.com/facebook/react/pull/15816/)\\r\\n\\r\\nThere are usecases where multiple renderers need to operate inside a single `act()` scope.\\r\\n- `ReactDOM.render` being used inside another component tree. The parent component will be rendered using `ReactTestRenderer.create` for a snapshot test or something.\\r\\n- a ReactDOM instance interacting with a ReactTestRenderer instance (like for the new devtools)\\r\\n\\r\\nThis PR changes the way the acting sigils operate to allow for this. It keeps 2 booleans, one attached to React, one attached to the renderer. `act()` changes these values, and the workloop reads them to decide which warning to trigger.\\r\\n\\r\\n(I also renamed `shouldWarnUnactedUpdates` to `warnsIfNotActing`)\\r\\n\\r\\n","number":16039,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-02T20:25:22Z"},{"id":463350020,"title":"[Fresh] Rename _getMountedRootCount to getMountedRootCount","body":"I planned to initially only use it for testing. But I think it may also be useful to force a full reload if all roots are gone. Such as if the first mount failed and never committed. So I\'m exposing it more officially.","number":16038,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-07-02T17:28:54Z"},{"id":463317050,"title":"Return render function in hooks ?","body":"Example: \\r\\n\\r\\nhttps://codesandbox.io/s/usemodal-z715z\\r\\n\\r\\n```jsx\\r\\nconst useModal = () => {\\r\\n  const [visible, setVisible] = useState(false)\\r\\n\\r\\n  const showModal = useCallback(() => setVisible(true), [])\\r\\n  const hideModal = useCallback(() => setVisible(false), [])\\r\\n\\r\\n  const renderModal = () => (\\r\\n    <AntdModal visible={visible} onCancel={hideModal} onOk={hideModal} />\\r\\n  )\\r\\n\\r\\n  return {\\r\\n    showModal,\\r\\n    hideModal,\\r\\n    renderModal,\\r\\n  }\\r\\n}\\r\\n\\r\\nconst App = () => {\\r\\n  const {renderModal, showModal} = useModal()\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button onClick={showModal}>Show</Button>\\r\\n      {renderModal()}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nI found this way to extract some render things and some local state in hooks. I\'m wondering if there is performance issue or bad practice. \\r\\n\\r\\nI tried to return Component at beginning and then find [OldModal !== NewModal](https://www.reddit.com/r/reactjs/comments/9yq1l8/how_do_you_feel_about_a_hook_returning_components/) issue. But how about just return partial renderer?\\r\\n\\r\\n","number":16037,"user":{"login":"stonexer"},"state":"closed","created_at":"2019-07-02T16:11:48Z"},{"id":463283196,"title":"[Flare] Add more functionality to Scroll event responder","body":"This PR adds more functionality to the `Scroll` event responder. Specifically:\\r\\n\\r\\n- Adds the direction property on the event object\\r\\n- Adds `onScrollDragStart` and `onScrollDragEnd`\\r\\n- Removes `onMomentumScrollStart` and `onMomentumScrollEnd` Flow prop types.\\r\\n- Fixed a bug when disabled never removed root events\\r\\n\\r\\nI looked into how we might implement the momentum scroll events and ultimately decided it wasn\'t worth the logic to support. The issue is that trackpad events fire `wheel` and `scroll` for each bit of momentum and thus it\'s not possible to know if the user is doing this \u2013 or if it\'s a system setting (like on MacOS).\\r\\n\\r\\nFurthermore, working out the difference in delta between scrolls and mousewheels is one possibility (as other third party libraries try do), but the amount of code it requires and the complexity in handling edge cases makes it non-trivial. Adding support for touch based momentum is simpler but then this feature feels half-baked. I\'d much rather leave it as a TODO for later work.","number":16036,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-02T15:06:19Z"},{"id":463214886,"title":"flush suspense fallbacks at the end of act() calls.","body":"- \'Saves\' a reference to the handle+root in a Map whenever `scheduleTimeout` is called\\r\\n- On exiting an `act()` scope, flushes them out, and clears the Map entry\\r\\n- Added a test for the same, and updated another that expected differently. \\r\\n\\r\\nI wrote just the one test for this, but I\'m keen to add more coverage. Any pointers to what other tests could be useful?","number":16035,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-07-02T12:58:35Z"},{"id":463177124,"title":"Inconsistent act behaviour for react-test-renderer","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen rendering a component that has cascading updates from multiple `useEffect` hooks we see a different behaviour when using `react-test-renderer` than when we use `react-dom` or `react-testing-library` to render the same component.\\r\\n\\r\\n[Here is a codesandbox to demponstrate the issue.](https://codesandbox.io/s/useeffect-with-react-test-renderer-repro-64guc?fontsize=14&module=%2Fsrc%2Fexample.test.js&previewwindow=tests)\\r\\n\\r\\nThe test that uses `react-test-renderer` fails where as the other 2 tests (`react-dom` and `@testing-library/react`) pass for the same component.  If you check the console for the logging it outputs, it has:\\r\\n\\r\\n```sh\\r\\nbefore react-test-renderer render \\r\\nrunning null null\\r\\ntriggering setAfterChanged \\r\\ntriggering setTestUpdated \\r\\nrunning Object {foo: \\"bar\\"} null\\r\\nafter react-test-renderer render Object {afterChanged: null}\\r\\n\\r\\nbefore rtl render \\r\\nrunning null null\\r\\ntriggering setAfterChanged \\r\\ntriggering setTestUpdated \\r\\nrunning Object {foo: \\"bar\\"} null\\r\\ntriggering setAfterChanged \\r\\nrunning Object {foo: \\"bar\\"} Object {foo: \\"bar\\"}\\r\\nafter rtl render Object {afterChanged: Object}\\r\\n\\r\\nbefore react-dom render \\r\\nrunning null null\\r\\ntriggering setAfterChanged \\r\\ntriggering setTestUpdated \\r\\nrunning Object {foo: \\"bar\\"} null\\r\\ntriggering setAfterChanged \\r\\nrunning Object {foo: \\"bar\\"} Object {foo: \\"bar\\"}\\r\\nafter react-dom render Object {afterChanged: Object}\\r\\n```\\r\\n\\r\\nAs you can see, the non `react-test-renderer` renders are performing more updates before the `act` call (assumed internal `act` call for RTL) returns.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect the effect flushing behaviour to be the same, regardless of the renderer, so all the tests would pass and the console logs would be:\\r\\n\\r\\n```sh\\r\\nbefore react-test-renderer render \\r\\nrunning null null\\r\\ntriggering setAfterChanged \\r\\ntriggering setTestUpdated \\r\\nrunning Object {foo: \\"bar\\"} null\\r\\ntriggering setAfterChanged \\r\\nrunning Object {foo: \\"bar\\"} Object {foo: \\"bar\\"}\\r\\nafter react-test-renderer render Object {afterChanged: Object}\\r\\n\\r\\nbefore rtl render \\r\\nrunning null null\\r\\ntriggering setAfterChanged \\r\\ntriggering setTestUpdated \\r\\nrunning Object {foo: \\"bar\\"} null\\r\\ntriggering setAfterChanged \\r\\nrunning Object {foo: \\"bar\\"} Object {foo: \\"bar\\"}\\r\\nafter rtl render Object {afterChanged: Object}\\r\\n\\r\\nbefore react-dom render \\r\\nrunning null null\\r\\ntriggering setAfterChanged \\r\\ntriggering setTestUpdated \\r\\nrunning Object {foo: \\"bar\\"} null\\r\\ntriggering setAfterChanged \\r\\nrunning Object {foo: \\"bar\\"} Object {foo: \\"bar\\"}\\r\\nafter react-dom render Object {afterChanged: Object}\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`react`: `16.8.6`\\r\\n`react-dom`: `16.8.6`\\r\\n`react-test-renderer`: `16.8.6`\\r\\n`@testing-library/react`: `8.0.4`\\r\\n","number":16034,"user":{"login":"mpeyper"},"state":"closed","created_at":"2019-07-02T11:33:57Z"},{"id":463163916,"title":"[Flare] Do not block mouse presses on scroll","body":"This PR changes the existing behaviour in `Press` so that `mouse` pointer events no longer get cancelled when a `scroll` event occurs. This matches the expected behaviour on platforms that use mouse interactions. Unlike `touch`, which is expected to have a connection with `scroll`, mouse events are detached from scrolling (aside from `mousewheel`).","number":16033,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-07-02T11:02:54Z"},{"id":463109500,"title":"Search filter does not work across the react-table on setState : React JS","body":"I am using react-table for data grid purposes. All I am trying to implement  a search filter that searches data across the table and filters down by using filter method. I have maintained a separate component for Searching and I set the table\'s data inside search component. The filtering breaks when the characters are being deleted from the search filter. Am I doing something wrong here. \\r\\n\\r\\nSandbox: https://codesandbox.io/s/stoic-gould-kw9iq\\r\\n\\r\\nSearchComponent\\r\\n------------------\\r\\n``````````````````````````\\r\\nimport React from \\"react\\";\\r\\nimport { Input } from \\"semantic-ui-react\\";\\r\\n\\r\\nexport default class DropDownComponent extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      filteredData: [],\\r\\n      searchInput: \\"\\"\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleChange = event => {\\r\\n    this.setState({ searchInput: event.target.value }, () =>\\r\\n      this.globalSearch()\\r\\n    );\\r\\n  };\\r\\n\\r\\n  globalSearch = () => {\\r\\n    let { searchInput } = this.state;\\r\\n    let filteredData = this.props.data.filter(value => {\\r\\n      return (\\r\\n        value.firstName.toLowerCase().includes(searchInput.toLowerCase()) ||\\r\\n        value.status.toLowerCase().includes(searchInput.toLowerCase()) ||\\r\\n        value.visits\\r\\n          .toString()\\r\\n          .toLowerCase()\\r\\n          .includes(searchInput.toLowerCase())\\r\\n      );\\r\\n    });\\r\\n    this.props.handleSetData(\\r\\n      (filteredData.length > 0 && filteredData) || searchInput\\r\\n        ? filteredData\\r\\n        : this.props.data\\r\\n    );\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <>\\r\\n        <br />\\r\\n        <Input\\r\\n          size=\\"large\\"\\r\\n          name=\\"searchInput\\"\\r\\n          value={this.state.searchInput || \\"\\"}\\r\\n          onChange={this.handleChange}\\r\\n          label=\\"Search\\"\\r\\n        />\\r\\n        <br />\\r\\n        <br />\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n``````````````````````````\\r\\nApp Component\\r\\n-----------------\\r\\n```````````````````````\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\nimport GlobalSearchComponent from \\"./GlobalSearchComponent\\";\\r\\nimport ReactTable from \\"react-table\\";\\r\\nimport \\"react-table/react-table.css\\";\\r\\nimport \\"./styles.css\\";\\r\\n\\r\\nexport default class App extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: []\\r\\n      columns: [],\\r\\n      searchInput: \\"\\"\\r\\n    };\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    this.getData();\\r\\n    this.getColumns();\\r\\n  }\\r\\n\\r\\n  getColumns = () => {\\r\\n    let columns = [\\r\\n      {\\r\\n        Header: \\"First Name\\",\\r\\n        accessor: \\"firstName\\"\\r\\n      {\\r\\n        Header: \\"Status\\",\\r\\n        accessor: \\"status\\"\\r\\n      },\\r\\n      {\\r\\n        Header: \\"Visits\\",\\r\\n        accessor: \\"visits\\"\\r\\n      }\\r\\n    ];\\r\\n    this.setState({ columns });\\r\\n  };\\r\\n\\r\\n  getData = () => {\\r\\n    let data = [\\r\\n      { firstName: \\"aaaaa\\", status: \\"Pending\\", visits: 155 },\\r\\n      { firstName: \\"aabFaa\\", status: \\"Pending\\", visits: 155 },\\r\\n      { firstName: \\"adaAAaaa\\", status: \\"Approved\\", visits: 1785 },\\r\\n      { firstName: \\"aAaaaa\\", status: \\"Approved\\", visits: 175 },\\r\\n      { firstName: \\"adaSaaa\\", status: \\"Cancelled\\", visits: 165 },\\r\\n      { firstName: \\"aasaaa\\", status: \\"Cancelled\\", visits: 157 },\\r\\n      { firstName: \\"aweaaaaaewea\\", status: \\"Approved\\", visits: 153 },\\r\\n      { firstName: \\"adaAAadsdweaa\\", status: \\"Approved\\", visits: 17585 },\\r\\n      { firstName: \\"aAaaaa\\", status: \\"Approved\\", visits: 175 }\\r\\n    this.setState({ data });\\r\\n  };\\r\\n\\r\\n  handleSetData = data => {\\r\\n    console.log(data);\\r\\n    this.setState({ data });\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    let { data, columns } = this.state;\\r\\n    return (\\r\\n      <div>\\r\\n        <GlobalSearchComponent\\r\\n          data={this.state.data}\\r\\n          handleSetData={this.handleSetData}\\r\\n        />\\r\\n        <ReactTable\\r\\n          data={data}\\r\\n          columns={columns}\\r\\n          defaultPageSize={10}\\r\\n          className=\\"-striped -highlight\\"\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst rootElement = document.getElementById(\\"root\\");\\r\\nReactDOM.render(<App />, rootElement);\\r\\n","number":16032,"user":{"login":"vjr12"},"state":"closed","created_at":"2019-07-02T09:05:11Z"},{"id":463072491,"title":"useEffect doesn\'t work as componentDidMount while using real time connections ","body":"```js\\r\\nuseEffect(() => {\\r\\n    connection.on(\'received\', (user, message) => {\\r\\n      if (userName && userName !== user) {\\r\\n        audio.play()\\r\\n      }\\r\\n      const newMessages = [...replies, {userName: user, text: message}]\\r\\n      setReplies(newMessages)\\r\\n    })\\r\\n  }, [connection, replies, audio, userName])\\r\\n```\\r\\nI want ```connection.on``` at ```componentDidMount``` or ngOnInit(in Angular). \\r\\n\\r\\n- If I add dependencies in the dependency array the ```connection.on``` gets called that many times the dependency states get updated.\\r\\n- If I don\'t add the dependencies the states (userName, replies) take the initial values even if they get updated by that time. And I get warning for not adding the dependencies in dependency array.\\r\\n- If I remove the dependency array the ```connection.on``` gets called that many times any state gets updated.\\r\\n\\r\\nCan you please provide any solution for that?","number":16031,"user":{"login":"md-shahnawaz08"},"state":"closed","created_at":"2019-07-02T07:43:08Z"},{"id":463039709,"title":"Update Suspense Priority Warning to Include Component that Triggered Update","body":"Improved warning whenever lower priority events (ex. data fetching, page load) happen during a high priority update (ex. hover/click events) to include:\\r\\n1.) Name of component that triggered the high priority update or\\r\\n2.) Information that the update was triggered on the root","number":16030,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-07-02T06:13:55Z"},{"id":463031243,"title":"Invariant Violation: Minified React error #321","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":16029,"user":{"login":"lianrenjie"},"state":"closed","created_at":"2019-07-02T05:44:10Z"},{"id":462982740,"title":"[Proposal] Global state, AKA Redux, built natively into React.","body":"Proposal:\\r\\n\\r\\nThe most top level component, like an `App.js` can create a global state store like Redux that all child components can access with a method like: `setGlobalState()`.\\r\\nNot with props or callback functions passed into props.\\r\\n\\r\\nRedux is a bit complex to achieve a task of global state across components and is hard for people to learn and understand. At the high level of React development, most people are using Redux. It would be cool if we could include the functionality of Redux natively into React with a simpler set of methods.\\r\\n\\r\\nMy Idea:\\r\\n\\r\\n``` \\r\\nconstructor(props){\\r\\n   this.state = {\\r\\n       // normal local component state as already implemented\\r\\n   }\\r\\n   this.globalState = {\\r\\n      // only 1 instance of globalState can be declared in application, preferably in the most top- \\r\\n      level component.\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nMethods:\\r\\n\\r\\n```\\r\\n.setState() // uses local component state, as already implemented\\r\\n.setGlobalState() // uses most top level component state, ex. `App.js`\\r\\nthis.state.foobar // normal access of state\\r\\nthis.globalState.foobar // global level access \\r\\n```\\r\\n\\r\\nRoast me if this won\'t work or it\'s a bad idea, but I\'d be interested in seeing if this could be done and would be of valuable to the project.\\r\\n\\r\\nThanks\\r\\n\\r\\n\\r\\n\\r\\n","number":16028,"user":{"login":"ChrisEddy"},"state":"closed","created_at":"2019-07-02T01:56:25Z"},{"id":462951264,"title":"Flush sync bug","body":"This fixes bug where `flushSync` runs with `NormalPriority` instead of `ImmediatePriority`","number":16027,"user":{"login":"lunaruan"},"state":"closed","created_at":"2019-07-01T23:18:32Z"},{"id":462910379,"title":"[eslint-plugin-react-hooks] using a hook in a try {} catch {} block not allowed","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nUsing a hook within a `try {} catch {}` block throws an eslint error:\\r\\n\\r\\nThe component:\\r\\n```typescript\\r\\nexport function Things({ parentId, searchTerm }: Props) {\\r\\n  try {\\r\\n    const { data: things, loading } = useThings(parentId, {\\r\\n      include: [\'other\'],\\r\\n      extra_fields: { things: \'foo\' },\\r\\n      filter: { other_name: searchTerm.trim() },\\r\\n      page: { size: 20 },\\r\\n    });\\r\\n\\r\\n    return (\\r\\n      <Content>\\r\\n        {!things ? (\\r\\n          <Loading />\\r\\n        ) : (\\r\\n          <ThingsList things={things} loading={loading} />\\r\\n        )}\\r\\n      </Content>\\r\\n    );\\r\\n  } catch {\\r\\n    return (\\r\\n      <Content>\\r\\n        <ThingsList roles={[]} loading={false} />\\r\\n      </Content>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\nWhere `useThings()` is a custom hook that performs a `fetch` in a `useEffect()` hook.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI think this should be acceptable because the hook is always called.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\neslint-plugin-react-hooks@1.6.1","number":16026,"user":{"login":"jboler"},"state":"closed","created_at":"2019-07-01T21:03:02Z"},{"id":462842214,"title":"Application gets hanged when 200 input fields gets render","body":"In my React component I have to render around 200 input fields. when I render component, browser gets hanged and screen becomes blank(I checked task manager their browser starts taking around 5000 MB space and CPU utilization reaches to 100%). If I refresh the page then same component is rendering very easily and screen also fine. This is issue I am facing only in my production environment and in dev environment it works absolutely fine on first render without refresh.\\r\\n\\r\\nThis happens only in Google crome. When I do same thing in Mozila it works fine.\\r\\n\\r\\nPlease suggest any solution. I am using React 16.2.0.\\r\\n\\r\\nThanks in advance.","number":16025,"user":{"login":"ajAnshul"},"state":"closed","created_at":"2019-07-01T18:07:50Z"},{"id":462841625,"title":"Add tail=\\"hidden\\" option to SuspenseList","body":"Builds on top of #16007.\\r\\n\\r\\nThis is similar to `tail=\\"collapsed\\"` except it hides all rows in the tail. The added complexity here is that sometimes we only know that we\'ve hit the tail after we\'ve already rendered this row. So we need undo the effects added by rendering the row.\\r\\n\\r\\nAdditionally, by not committing the boundary, there\'s nothing to retry. So we need to transfer the promise set to the list so that we get a retry if the only thing to ping was in the tail.","number":16024,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-07-01T18:06:14Z"},{"id":462660385,"title":"Dynamic compilation in react","body":" Is it possible to compile components dynamically (on demand) and load them then ?\\r\\nAs of now , what i know is if you use dynamic import, it builds a context chunk in the build/compile time and later downloads it if required by user. That is faster than the static import but it still goes through the files in my directory as mentioned in import during compile time.\\r\\n\\r\\nsay i do ->\\r\\nimport(`./${filename}`).then(component)=>{ /*code here*/}.catch(()=>console.log(\\"no such file))\\r\\n\\r\\nhere filename is the user input . So when i compile this i see it going through all the files in the current directory and giving me syntax error warnings for the files ?\\r\\n\\r\\n So my question is can we not compile those files on demand and load them then ?\\r\\nPlease assume that the imported files are error free in all manner.\\r\\nAlso , the query is for React . I know it can be done in AngularJs.\\r\\nThanks in advance.","number":16023,"user":{"login":"PRASHANT1104"},"state":"closed","created_at":"2019-07-01T11:27:45Z"},{"id":462593485,"title":"rewrite with typescript?","body":"as we know typescript get very popular now\\r\\nso does you have a plan that rewrite with ts?\\r\\n","number":16022,"user":{"login":"zhangenming"},"state":"closed","created_at":"2019-07-01T08:54:34Z"},{"id":462400881,"title":"[Proposal] Return a Promise from ReactDOM.render()","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nA backward-compatible feature.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nThe `ReactDOM.render()` function only accepts a callback, which is called whenever the component is rendered, and doesn\'t compliment asynchronous Promise-based programs as well as it could do.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe `ReactDOM.render()` function could return a Promise that resolves after the component has first been rendered.\\r\\n\\r\\n```js\\r\\nReactDOM.render(<Component />, container).then( ... )\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nN/A\\r\\n","number":16021,"user":{"login":"simon-robertson"},"state":"closed","created_at":"2019-06-30T12:39:44Z"},{"id":462390749,"title":"Update parent component passing lazy initialized refs","body":"I have a Parent to Children component relationship.\\r\\nThe Parent passes refs to each child.\\r\\nThe refs are initialized lazy because so are the children since their render is dependent on a prop array value.\\r\\nWhen the prop array value is passed to the Parent component I initialize the ref array with `useMemo` and then the children are rendered and are being passed the references respectively.\\r\\nMy problem is that after the refs are set no additional renders in the Parent component happens and I rely on the children refs to calculate Parent style.\\r\\nHere\'s an example:\\r\\n```\\r\\nimport React, {useEffect, useRef, useMemo} from \'react\';\\r\\nimport PropTypes from \'prop-types\';\\r\\nimport \'./SvgMap.scss\';\\r\\nimport classNames from \\"classnames\\";\\r\\nimport {Tooltip} from \'react-svg-tooltip\';\\r\\n\\r\\nconst propTypes = {\\r\\n    map: PropTypes.node.isRequired,\\r\\n    marker: PropTypes.node,\\r\\n    coordinates: PropTypes.array,\\r\\n    transform: PropTypes.func,\\r\\n    backgroundColor: PropTypes.string,\\r\\n    backgroundHoverColor: PropTypes.string,\\r\\n    bubbleWidth: PropTypes.number\\r\\n};\\r\\n\\r\\nconst DEFAULT_BUBBLE_WIDTH = 425;\\r\\nconst DEFAULT_BUBBLE_HEIGHT = 125;\\r\\n\\r\\nconst SvgMap = ({map, marker, coordinates, transform, className, backgroundColor, backgroundHoverColor, bubbleWidth, bubbleHeight}) => {\\r\\n    const mapContainerRef = useRef();\\r\\n    const glasspaneRef = useRef();\\r\\n    const mapRef = useRef();\\r\\n    const markersRef = useMemo(() => {\\r\\n        return coordinates.map(() => ({ref: React.createRef()}))\\r\\n    }, [coordinates]);\\r\\n\\r\\n    useEffect(() => {\\r\\n        if (mapRef.current) {\\r\\n            const paths = mapRef.current.getElementsByTagName(\\"path\\");\\r\\n            for (let i = 0; i < paths.length; i++) {\\r\\n                const path = paths[i];\\r\\n                const pathStyle = path.getAttribute(\\"style\\").replace(/fill: [^;]+;\\\\s/, \'\');\\r\\n                if (backgroundColor) {\\r\\n                    path.setAttribute(\\"style\\", `${pathStyle} fill: ${backgroundColor};`);\\r\\n                    path.addEventListener(\\"mouseleave\\", e => {\\r\\n                        e.currentTarget.setAttribute(\\"style\\", `${pathStyle} fill: ${backgroundColor};`);\\r\\n                    });\\r\\n                }\\r\\n                if (backgroundHoverColor) {\\r\\n                    path.addEventListener(\\"mouseenter\\", e => {\\r\\n                        e.currentTarget.setAttribute(\\"style\\", `${pathStyle} fill: ${backgroundHoverColor};`);\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }, [mapRef, backgroundColor, backgroundHoverColor]);\\r\\n\\r\\n    const getMarkersStyle = () => {\\r\\n        if (markersRef.length && markersRef[0].ref.current) {\\r\\n            return {\\r\\n                transform: `translate(-${markersRef[0].ref.current.width.baseVal.value / 2}px, -${markersRef[0].ref.current.height.baseVal.value}px)`\\r\\n            };\\r\\n        }\\r\\n    };\\r\\n\\r\\n    const renderMarkers = () => {\\r\\n        if (mapContainerRef.current && mapRef.current && marker && coordinates.length) {\\r\\n            const mapGeoViewBox = mapRef.current.getAttribute(\\"mapsvggeoviewbox\\").split(\' \');\\r\\n            return coordinates.map((coordinate, i) => {\\r\\n                return <svg>\\r\\n                    {markersRef.length && markersRef[i].current &&\\r\\n                    <Tooltip triggerRef={markersRef[i]} containerRef={glasspaneRef}>\\r\\n                        <rect x={2} y={2} width={10} height={5} rx={.5} ry={.5} fill=\'black\'/>\\r\\n                        <text x={5} y={5} fontSize={2} fill=\'white\'>Yay!</text>\\r\\n                    </Tooltip>}\\r\\n                    {marker.render({\\r\\n                            ...transform(coordinate.lat, coordinate.lng, mapRef.current.width.baseVal.value, mapRef.current.height.baseVal.value, mapGeoViewBox[0], mapGeoViewBox[2], mapGeoViewBox[3])\\r\\n                        },\\r\\n                        markersRef[i].ref\\r\\n                    )}\\r\\n                </svg>;\\r\\n            })\\r\\n        }\\r\\n        return null;\\r\\n    };\\r\\n\\r\\n    return <svg className={classNames(\\"map-container\\", className)} ref={mapContainerRef}>\\r\\n        <svg ref={glasspaneRef} className=\\"glasspane\\" viewBox=\\"0 0 100 100\\"/>\\r\\n        <g className=\\"map-wrapper\\">\\r\\n            {map.render({}, mapRef)}\\r\\n        </g>\\r\\n        <g className=\\"markers\\" style={getMarkersStyle()}>\\r\\n            {renderMarkers()}\\r\\n        </g>\\r\\n    </svg>;\\r\\n};\\r\\n\\r\\nSvgMap.propTypes = propTypes;\\r\\n\\r\\nexport default SvgMap;\\r\\n```\\r\\n\\r\\n","number":16020,"user":{"login":"Kashio"},"state":"closed","created_at":"2019-06-30T10:31:18Z"},{"id":462370837,"title":"[Fresh] Clone a custom hook node before use","body":"This is a small patch to react-refresh babel plugin to fix a problem we found in [react-hot-loader](https://github.com/gaearon/react-hot-loader/issues/1268).\\r\\n\\r\\nIn short - refresh babel plugin is using the \\"original\\" _babel node_ to put a custom hook into `signature`, and `common-js` babel plugin has a logical condition not to transform any node twice. As a result - custom hook reference would not be transformed. @dgreensp did an amazing job finding the root cause.\\r\\n\\r\\nSolution - just `clone` node before the use. Look like there is no need for deep clone in this case.\\r\\n\\r\\nKeep in mind - __no tests were added__. Unfortunately, this bug is not reproducible with babel 6, and only babel 7 is affected. To be more concrete - I\'ve added tests, but as long as they are not testing anything - they are passing initially - I\'ve removed them.","number":16019,"user":{"login":"theKashey"},"state":"closed","created_at":"2019-06-30T05:56:28Z"},{"id":462255336,"title":"useEffect nested under the suspense and lazy, the second empty array parameter does not work","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nMaybe bug?\\r\\n\\r\\n**What is the current behavior?**\\r\\nuseEffect nested under the suspense and lazy, the second empty array parameter does not work\\r\\n```js\\r\\nimport React, { useEffect } from \'react\';\\r\\nfunction Loader(props){\\r\\n    const Component = lazy(() => {\\r\\n        useEffect(() => {\\r\\n            // fetchData and then update store\\r\\n        }, []); // [] does not work. it will always fetchData when component rerender, but not just once.\\r\\n    });\\r\\n    return <Suspense fallback={<div>Loading...</div>}>\\r\\n        <Component />\\r\\n    </Suspense>\\r\\n}\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nWhen useEffect nested under the suspense and lazy, the second empty array parameter does not work.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n`\\"react\\": \\"^16.5.2\\"`","number":16018,"user":{"login":"carvinlo"},"state":"closed","created_at":"2019-06-29T02:13:01Z"},{"id":462194744,"title":"Replace React.error and React.warn with getComponentStack","body":"Proposed alternative to #15170\\r\\n\\r\\nSeveral people have asked, \\"_Could you provide a method to access the component stack directly?_\\". I think our reasoning against this was that we didn\'t want people to _depend_ on that stack, or to try to parse it and build anything on top of it.\\r\\n\\r\\nI don\'t think we considered the case of instrumenting error logging though. Facebook (and probably others) overrides `console.error` to capture the call stack and save it somewhere. A downside of `React.error` is that it would cause errors from different call sites to be grouped together (unless the instrumenting code was smart enough to skip over the React frame).\\r\\n\\r\\nOverriding only these two console methods also feels like a bit of an incomplete solution (#15726) to the logging story.\\r\\n\\r\\nThis PR replaces `React.warn` and `React.error` with a method that returns the current component stack\xb9 which people can log to whichever console group they want.\\r\\n\\r\\n\xb9 At the moment, this method always returns an empty string in prod.","number":16017,"user":{"login":"bvaughn"},"state":"closed","created_at":"2019-06-28T20:24:08Z"},{"id":462120652,"title":"HotReload Rendered more hooks than during the previous render when commenting out code","body":"**What is the current behavior?**\\r\\n\\r\\n```javascript\\r\\nfunction usePromotion() {\\r\\n  const [isOpen, setState] = useState(false);\\r\\n\\r\\n  useEffect(() => {\\r\\n    \\r\\n  })\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nSteps to reproduce:\\r\\n1. Comment out a hook/some hooks.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nDebatable, in my opinion this should be more of a warning. \\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n- Chrome[Version 75.0.3770.100 (Official Build) (64-bit)] \\r\\n- macOS 10.14.4 (18E226)\\r\\n- Gatsby 2.8.2\\r\\n- React 16.8.6","number":16016,"user":{"login":"MANTENN"},"state":"closed","created_at":"2019-06-28T16:42:33Z"},{"id":461916795,"title":"Update README","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":16015,"user":{"login":"Charles0123"},"state":"closed","created_at":"2019-06-28T08:21:06Z"},{"id":461799015,"title":"[Flare] Re-label Flare flag","body":"This PR changes the name of the existing flag to make more sense given the context of the project. It also makes it easier to find in bundles :)","number":16014,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-28T00:05:54Z"},{"id":461769636,"title":"Wrap ReactTestRenderer .create and .update with act() by default","body":"Read this PR with `?w=1`\\r\\n\\r\\n(I had an older version of this PR, made a fresh one to get out of conflict hell)\\r\\n\\r\\nThis PR adds `act()` by default to react-test-renderer\'s `.create`, `.update`, and `.unmount` methods.\\r\\n\\r\\nWe risk a major breaking change with having added warnings on unqueued effects outside of an act scope. Eg: A lot of people\'s snapshot tests will break; this would be good, if they didn\'t have to first wrap their renderer helper with `act()`, and then update snapshots.\\r\\n\\r\\nBroadly, we could also make a case why this makes sense to any consumers; they\'ll be using it only in testing scenarios, which we\'d want to wrap in `act()` anyway\\r\\n\\r\\nFor our internal tests, this had the effect that a larger portion of the test was just wrapped with an outer `act()`, letting us test incremental updates by advancing the `Scheduler` manually.\\r\\n","number":16013,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-06-27T22:05:10Z"},{"id":461554280,"title":"react-test-renderer with jest.resetModules: invariant violiation for hooks","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nWhen writing a test with jest (and requiring a component with hooks after `jest.resetModules()`), `react-test-renderer` complains \\r\\n> Invariant Violation: Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n1. Write a functional component using a hook\\r\\n2. Create a test using jest\\r\\n3. Call `jest.resetModules`\\r\\n4. Require the module\\r\\n5. Call `renderer.create(<MyComponent />).toJSON()` \\r\\n6. Run test, it fails with the error above\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe test should not crash on hooks in tests where resetModules() is called\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8. as hooks were introduced","number":16012,"user":{"login":"entropitor"},"state":"closed","created_at":"2019-06-27T14:13:00Z"},{"id":461477905,"title":"[Flare] Remove event targets including TouchHitTarget","body":"This PR removes event target components from React and all related tests. This should drop file by around 1kb min+gzip and also reduce the complexity and overhead in managing event targets.\\r\\n\\r\\nCurrently, we don\'t use event targets anywhere and we have no short-term plans on using them. So far, many of the ideas we\'ve had in terms of using them has shown there to be better alternatives to be used instead. We planned to use touch hit slop internally but we found we never actually needed them to improve touch interactivity (mobile browsers add a native touch hit slop when used with touch events rather than emulated mouse events it seems).\\r\\n\\r\\nIn the future, if we need them again, we can revisit attaching them via another route that might be less specific from the use-case that these were originally intended (touch hit slop).","number":16011,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-27T11:36:16Z"},{"id":461462961,"title":"unable to access env variables in html files other than index.html","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe environment variables are just acting as normal text in HTML files.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/elated-butterfly-r2jpe\\r\\n\\r\\nIn the above example, I am not able to use the `env variables` in the `index.html` and `callback.html`. This is different from CRA in which, I can at least access the `env variables` in the `index.html`.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe title of `callback.html` should be changed according to the `REACT_APP_CALLBACK_TITLE` in the `.env` file.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact -> 16.8.6\\r\\nreact-dom -> 16.8.6\\r\\nreact-scripts -> 3. 0.1\\r\\nbrowser: Google Chrome -> Version 75.0.3770.100 (Official Build) (64-bit)\\r\\nNope, it didn\'t work in previous versions of React.","number":16010,"user":{"login":"aditya81070"},"state":"closed","created_at":"2019-06-27T11:00:29Z"},{"id":461363735,"title":"[Flare] Rethinking Focus","body":"I think we need to rethink how focus works in React. React Flare is the perfection opportunity to allow us to do this, so here are some of my thoughts. None of these ideas wouldn\'t be possible if it weren\'t for the great ideas from @sebmarkbage, @devongovett and @necolas have had. Furthermore, the discussions in https://github.com/facebook/react/pull/16000, https://github.com/facebook/react/pull/15848 and https://github.com/facebook/react/pull/15849 got me thinking on a better system.\\r\\n\\r\\n## Focus is a mess on the DOM, so let\'s not use the DOM\\r\\n\\r\\nFocusing on the DOM is a mess today. We couple ideas around ideas around things like `tabIndex` and whether a specific browser treats something as focusable. This is very much a hard-coded disaster where no one really agrees on a good formula for success. Not to mention, that this just doesn\'t translate well for a declarative UI. How does one tab to a specific node that isn\'t focusable? How does one use keyboard arrows to navigate a table using keyboard arrows?\\r\\n\\r\\nThen there\'s implementation. Without relying on an attribute on an element or a `ref`, it\'s very hard to say: \\"Hey look, let\'s focus to this node, given this criteria\\". Not to mention the performance overhead of doing this: querying or \\"collecting\\" focusable elements is an expensive O(n) task, which doesn\'t scale for large applications well. I noticed that wrapping the an internal large app with `<FocusScope>` and then collecting all focusable nodes took over 850ms on Android using Chrome. Querying the DOM nodes took even longer.\\r\\n\\r\\nLastly, we can\'t use the DOM with React Native and the story for handling focus with React Flare is important. If we instead had a React system for handling focus, then both the web and RN would be consistent and performant.\\r\\n\\r\\n## Accessible components\\r\\n\\r\\nWe already have the `<Focus>` and `<FocusScope>` event components. We could extend on React Flare and introduce a way of layering accessibility logic on to host components. In this I introduce a new API called `createAccessibleComponent`, but really it could be anything \u2013 ignore the naming! This is purely hypothetical discussion for now.\\r\\n\\r\\n```jsx\\r\\n// input is not focusable\\r\\n<FocusScope>\\r\\n  <input type=\\"text\\" placeholder=\\"Enter your username\\" /> \\r\\n</FocusScope>\\r\\n\\r\\nconst FocusableInput = ReactDOM.createAccessibleComponent((props, focusable) => {\\r\\n  return <input tabIndex={focusable ? 0 : -1} {...props} />;\\r\\n});\\r\\n\\r\\n// now it\'s focusable\\r\\n<FocusScope>\\r\\n  <FocusableInput\\r\\n    type=\\"text\\"\\r\\n    placeholder=\\"Enter your username\\"\\r\\n    focusable={true}\\r\\n  />\\r\\n</FocusScope>\\r\\n```\\r\\n\\r\\nIf you don\'t use a `FocusScope`, then the normal DOM behaviour will continue to work as expected. `FocusScope` will only care about these new types of accessible component.\\r\\n\\r\\n## The focus manager should be encapsulated and relative to `FocusScope`\\r\\n\\r\\nIn order for focus management to be powerful, it needs to be baked into React. Event responders like `FocusScope` can let the manager know what scope it should be interacting with given a particular `<Focus>` that focuses occur in. `FocusScope` will also fully override the browser tabbing behaviour (like it does now) to ensure tabbing works as expected:\\r\\n\\r\\n```jsx\\r\\nimport { focusManager } from \'react-events/focus\';\\r\\n\\r\\nfocusManager.getFocusedNode();\\r\\nfocusManager.getFocusedId();\\r\\nfocusManager.focusFirst(isRTL?: boolean = false);\\r\\nfocusManager.focusLast(isRTL?: boolean = false);\\r\\nfocusManager.focusPrevious(fromId?: string, isRTL?: boolean = false);\\r\\nfocusManager.focusNext(fromId?: string, isRTL?: boolean = false, );\\r\\nfocusManager.focusById(id: string);\\r\\n\\r\\nconst FocusableDiv = ReactDOM.createAccessibleComponent((props, focusable) => {\\r\\n  return <div tabIndex={focusable ? 0 : -1} {...props} />;\\r\\n});\\r\\n\\r\\n<FocusScope onMount={() => focusManager.focusFirst()}>\\r\\n  <FocusableDiv focusable={true} />\\r\\n  <FocusableDiv focusable={true} />\\r\\n  <div tabIndex={0}>You can\'t focus this</div>\\r\\n</FocusScope>\\r\\n```\\r\\n\\r\\nFocusing by `focusId` will propagate until an `focusId` is found. So this would matter for cases such:\\r\\n\\r\\n```jsx\\r\\nconst FocusableDiv = ReactDOM.createAccessibleComponent((props, focusable, focusId) => {\\r\\n  return <div tabIndex={focusable ? 0 : -1} {...props} />;\\r\\n});\\r\\n\\r\\n<FocusScope>\\r\\n  <FocusableDiv focusable={true} focusId=\\"focus-me\\" />\\r\\n  <FocusScope>\\r\\n    <FocusableDiv focusable={true} focusId=\\"focus-me\\" />\\r\\n  </FocusScope>\\r\\n</FocusScope>\\r\\n```\\r\\n\\r\\nIf `focusManager.focusById(\'focus-me);` was used on the inner `FocusScope`, it would focus the inner button. If used on the outer `FocusScope`, it would focus the outer button. If the outer `FocusScope` didn\'t have an id that matched, then it would propagate the lookup to the inner `FocusScope`.\\r\\n\\r\\nDoing this, it makes it possible to apply keyboard navigation:\\r\\n\\r\\n```jsx\\r\\nfunction handleKeyPress(key) {\\r\\n  if (isValidArrowKey(key)) {\\r\\n    const currentId = focusManager.getFocusedId();\\r\\n    const nextId = findNextId(currentId, key);\\r\\n    focusManager.focusById(nextId);\\r\\n  }\\r\\n}\\r\\n<FocusScope onKeyPress={handleKeyPress}>\\r\\n  <FocousableCell focusable={true} focusId=\\"AA\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"AB\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"AC\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"BA\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"BB\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"BC\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"CA\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"CB\\" />\\r\\n  <FocousableCell focusable={true} focusId=\\"CC\\" />\\r\\n</FocusScope>\\r\\n```\\r\\n\\r\\nFurthermore, `<FocusScope>`s can also have `focusId`s that allows you to move focus to a specific scope. That particular event component can then act upon receiving focus `<FocusScope onFocus={...}>`.\\r\\n\\r\\n## It can simplify `<Focus>`\\r\\n\\r\\n```jsx\\r\\n<Focus onFocus={...}>\\r\\n  <div>\\r\\n    <FocusableDiv focusable={true} />\\r\\n  </div>\\r\\n</Focus>\\r\\n```\\r\\n\\r\\nBefore, focus would only be of the direct child of the `<Focus>` component. This made it somewhat problematic when you wanted to find the focusable element that was not a direct child. Focus no longer needs to be coupled with \\"bubbling up\\" through the DOM, but rather it bubbles from accessible component to event components. So doing this, will still result in the nearest focusable child being passed to the `Focus`:\\r\\n\\r\\n```jsx\\r\\n<Focus onFocus={...}>\\r\\n  <div>\\r\\n    <FocusableDiv focusable={true}>\\r\\n      <FocusableDiv focusable={true} />\\r\\n    </FocusableDiv>\\r\\n  </div>\\r\\n</Focus>\\r\\n```\\r\\n\\r\\n## This can be fast too\\r\\n\\r\\nIn terms of performance, we can actually fast-path how this all works because we\'re no longer using the DOM, but event components within the Flare event system. We\'d have optimized data collections that ensure that the least possible time is taken traversing focusable elements by leveraging a separate internal data structure that is separate from the Fiber and DOM structures. The cost is that this will take additional memory and time to construct when a focus scope gets mounted/unmounted. Given this shouldn\'t be a rapid event, it\'s worth the trade-off.\\r\\n\\r\\nAlso, given we\'re not wrapping `FocusScope` with a context provider (as mentioned in the FocusManager PR), which should get improved performance from not needing to do context lookups and traversals.\\r\\n\\r\\n## `Focus` and `FocusScope`, `focusManager`\\r\\n\\r\\nGiven that they now share underlying implementation details, they all should come from the same module. So going forward, it makes sense to import them all form `react-events/focus`.\\r\\n\\r\\nThe nice benefit from this is that this actually fixes a bunch of issues with the current implementation, where we can\'t use `FocusScope` as a hooked event component. With the changes outlined in this issue, it should allow for them to be used via the `useEvent` hook.\\r\\n\\r\\n## We can build in great dev tooling around the focus system\\r\\n\\r\\nWe can build in great support for debugging in React Dev Tools when working with focus and \\r\\nthis will help improve accessibility within apps that use `<Focus>`, `<FocusScope>` and `focusManager`. Plus it would support any future APIs that add accessibility benefits to components.","number":16009,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-27T07:28:34Z"},{"id":461349874,"title":"Enable soucemaps while run \'yarn debug-test\'","body":"the question is :\\r\\nwhen i ran \'yarn debug-test\' and debug from chrome://inspect , i got minified codes like this:\\r\\n`it(\'should return the only child\', function () {\\r\\n    var instance =\\r\\n    React.createElement(WrapComponent, { __source: { fileName: _jsxFileName, lineNumber: 70 } },\\r\\n      React.createElement(\'span\', { __source: { fileName: _jsxFileName, lineNumber: 71 } }));\\r\\n    expect(React.Children.only(instance.props.children)).toEqual(React.createElement(\'span\', { __source: { fileName: _jsxFileName, lineNumber: 74 } }));\\r\\n  });\\r\\n`\\r\\nactually,i want to get source code when i debug test , so i added  sourceMaps:\\"inline\\" to enable this feature","number":16008,"user":{"login":"flyOstrich"},"state":"closed","created_at":"2019-06-27T06:53:16Z"},{"id":461318074,"title":"Add tail=\\"collapsed\\" option to SuspenseList","body":"Builds on top of #16005.\\r\\n\\r\\nThis add an option to SuspenseList which ensures that we avoid inserting any new rows at the tail of the list past some point.\\r\\n\\r\\nThe first option is \\"collapsed\\" which means that there is only one row visible at the end of the list. I plan on adding a \\"hidden\\" option which ensures that zero visible rows are at the end.\\r\\n\\r\\nNote that the tail in terms of unfolding row-by-row is defined as any insertions at the bottom or any rows that updated to become suspended or were already inserted from previous commits. This option doesn\'t actually remove or hide those. However, this is a rare edge cases. Typically you\'re expected to clear the list for these cases.\\r\\n\\r\\nThe use case here is for streaming rendering of items. This lets you provide more rows to React than you have available yet. The main purpose of this is for server rendering where you can\'t update to add more. However, it also is useful so that React can prerender later rows while blocked on previous rows. This PR doesn\'t actually do that yet tho.\\r\\n\\r\\nThis option also allows to render CPU bound work, one item at a time without showing all the fallbacks. Thanks to the tail expiration time.\\r\\n\\r\\n## Collapsing to the last row\\r\\n\\r\\nThe `tail=\\"collapsed\\"` option uses the first new row for showing the fallback state. That\'s fairly efficient because we\'ve rendered it when we tried the last row.\\r\\n\\r\\nIf you want to instead show the last row, you have to use a nested suspense list and the \\"hidden\\" option of the inner one:\\r\\n\\r\\n```\\r\\n<SuspenseList revealOrder=\\"forward\\">\\r\\n  <SuspenseList revealOrder=\\"forward\\" tail=\\"hidden\\">\\r\\n    ...\\r\\n  </SuspenseList>\\r\\n  <Tail />\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nTail in this case can be a Suspense boundary that unsuspends when we\'re not expected to get more items added to the list.\\r\\n\\r\\n```\\r\\nfunction Blocker({suspendOn}) {\\r\\n  if (!suspendOn.isResolved()) throw something();\\r\\n  return null;\\r\\n}\\r\\nfunction Tail() {\\r\\n  return <Suspense fallback={<Shimmer />}>\\r\\n    <Blocker suspendOn={endOfTheList} />\\r\\n  </Suspend>;\\r\\n}\\r\\n```\\r\\n\\r\\nThis technique ensures that if `endOfTheList` resolves on the server, the SSR streaming can hide the tail shimmer. No need for client rerenders. Placing it in an outer SuspenseList also ensures that once `endOfTheList` is resolved we don\'t hide the Shimmer before the rows in the list are fully loaded. Otherwise, the shimmer would hide first and then we\'d wait for the inner rows but they\'re hidden.\\r\\n\\r\\nThis is a bit unfortunate since I think this is a pretty common use case for visualizing a tail load differently from suspended existing boundaries.\\r\\n\\r\\nIn theory we could add an option to collapse into the last row but it gets tricky. Because after the first commit, that row would now be mounted and now it\'s not a new insertion anymore. That complicates the semantics a bit. The collapsed tail would have to be something like everything after the last committed row that isn\'t the last one.\\r\\n\\r\\nThis approach doesn\u2019t actually work:\\r\\n\\r\\n```\\r\\n<SuspenseList>\\r\\n  {rows}\\r\\n  <Tail />\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nBecause that\u2019s actually just two rows since the fragment in that case is treated as a single row.\\r\\n\\r\\nI feel like it\'s just clearer with two lists. That also makes it clearer what a \\"row\\" means. E.g. if your tail has multiple rows, it kind of just works.\\r\\n\\r\\nI also suspect that at some point SuspenseList will accept a custom streaming data type and in that case it might be easier to think of the inner list as one stream and the outer as another.\\r\\n\\r\\nAlthough a counter point is that virtualization might make this api difficult/impossible to use.\\r\\n\\r\\nA possible option would be to add an explicit tail component:\\r\\n\\r\\n```\\r\\n<SuspenseList tailMarker={<Tail />}>\\r\\n  ...\\r\\n</SuspenseList>\\r\\n```\\r\\n\\r\\nHowever, that would require two fibers to be stored similar to how Suspense inserts extra fibers.","number":16007,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-06-27T05:15:11Z"},{"id":461313618,"title":"[eslint-plugin-react-hooks]: auto-fix may crash app when deps is array/object types","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\n\\r\\nbefore run lint, my code is\\r\\n\\r\\n```js\\r\\nconst App = () => {\\r\\n  const [options, setOptions] = useState([]);\\r\\n  const [includesA, setIncludesA] = useState(false);\\r\\n\\r\\n  const optionCodes = options.map(({ value }) => value);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (optionCodes.includes(\'A\')) {\\r\\n      setIncludesA(true);\\r\\n    }\\r\\n  }, [optionCodes.join(\',\')]); // transform array to string for compare \\r\\n\\r\\n  return <div onClick={() => setOptions([{ value: \'A\' }])}></div>;\\r\\n};\\r\\n\\r\\n```\\r\\nafter \'eslint --fix\'\\r\\n\\r\\n```js\\r\\n\\r\\nconst App = () => {\\r\\n  const [options, setOptions] = useState([]);\\r\\n  const [includesA, setIncludesA] = useState(false);\\r\\n\\r\\n  const optionCodes = options.map(({ value }) => value);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (optionCodes.includes(\'A\')) {\\r\\n      setIncludesA(true);\\r\\n    }\\r\\n  }, [optionCodes]); // optionCodes.join(\',\') was replaced ! \\r\\n\\r\\n  return <div onClick={() => setOptions([{ value: \'A\' }])}></div>;\\r\\n};\\r\\n```\\r\\nThe original code works fine and after \'eslint --fix\' it just crashed cuz `optionCodes` **is an array** created in render function, the effect runs every time and crash my app with error :\\r\\n\\r\\n> react-dom.development.js:55 Uncaught Invariant Violation: Maximum update depth exceeded.\\r\\n\\r\\nI\'ve also notice this rule fix will add other params used by effect function to deps automatically. Like\\r\\n\\r\\n```js\\r\\n// original code\\r\\nconst {id} = props\\r\\nuseEffect(()=> {\\r\\n  console.log(id)\\r\\n},[])\\r\\n\\r\\n// after fix\\r\\nconst {id} = props\\r\\nuseEffect(()=> {\\r\\n  console.log(id)\\r\\n}, [id]) // id has been add to deps\\r\\n```\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nFor \'eslint --fix\', what we expect is \'try to fix lint error automatically and **SAFELY**\', SAFELY means **DO NOT change my code logic**, run \'eslint --fix\' should never change your design or crash your app .\\r\\n\\r\\nIt would be better to tell developers to fix the deps by lint message, not auto fix it in dangerous way.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\neslint-plugin-react-hooks@1.6.1","number":16006,"user":{"login":"kpaxqin"},"state":"closed","created_at":"2019-06-27T04:53:35Z"},{"id":461302474,"title":"SuspenseList Optimizations","body":"This includes a bunch of refactoring and optimizations to SuspenseList. Individual commits help the review.\\r\\n\\r\\nThe biggest optimization focus on the common case of deep updates inside a fully completed tree.\\r\\n\\r\\nIn the case where nothing in the list was suspended and the children didn\'t change, we now avoid scanning through the list in the begin phase since we don\'t need to find a tail.\\r\\n\\r\\nAdditionally, if nothing new suspended in this whole render pass, we can also skip the scan in the complete phase.\\r\\n","number":16005,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-06-27T04:07:53Z"},{"id":461279913,"title":"Which University did Gaearon graduate from?","body":"@gaearon Which University did you graduate from?","number":16004,"user":{"login":"fridaymeng"},"state":"closed","created_at":"2019-06-27T03:08:08Z"},{"id":461267099,"title":"[eslint-plugin-react-hooks] Crash when referencing \\"arguments\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nReferencing `arguments` from inside an arrow function (i.e. the `arguments` from the nearest non-arrow function) causes a crash in the eslint plugin.\\r\\n\\r\\n```\\r\\nTypeError: Cannot read property \'type\' of undefined\\r\\nOccurred while linting /.../src/react.tsx:92\\r\\n    at gatherDependenciesRecursively (.../node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1032:21)\\r\\n    at visitFunctionExpression (.../node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:985:7)\\r\\n    at .../node_modules/eslint/lib/util/safe-emitter.js:45:58\\r\\n    at Array.forEach (<anonymous>)\\r\\n    at Object.emit (.../node_modules/eslint/lib/util/safe-emitter.js:45:38)\\r\\n    at NodeEventGenerator.applySelector (.../node_modules/eslint/lib/util/node-event-generator.js:251:26)\\r\\n    at NodeEventGenerator.applySelectors (.../node_modules/eslint/lib/util/node-event-generator.js:280:22)\\r\\n    at NodeEventGenerator.enterNode (.../node_modules/eslint/lib/util/node-event-generator.js:294:14)\\r\\n    at CodePathAnalyzer.enterNode (.../node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:632:23)\\r\\n    at .../node_modules/eslint/lib/linter.js:752:32\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nThis doesn\'t reproduce in codesandbox as CRA hasn\'t been updated yet.\\r\\n\\r\\nThis snippet is enough to cause the crash:\\r\\n\\r\\n```js\\r\\nfunction useMyHook(/*...*/) {\\r\\n  useEffect(() => {\\r\\n    arguments // crash because reference.resolved.defs is empty\\r\\n  }, [])\\r\\n}\\r\\n```\\r\\n\\r\\nThis, however, does not crash:\\r\\n\\r\\n```js\\r\\nfunction useMyHook(/*...*/) {\\r\\n  useEffect(function() {\\r\\n    arguments // ok\\r\\n    return () => arguments // also ok\\r\\n  }, [])\\r\\n}\\r\\n```\\r\\n\\r\\nIt is possible this depends on using the `@typescript-eslint/parser` parser; but I think scope analysis is run internally by `eslint` so it shouldn\'t matter.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNo crash\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n`eslint-plugin-react-hooks@1.6.1`, `react-hooks/exhaustive-deps` rule","number":16003,"user":{"login":"Jessidhia"},"state":"closed","created_at":"2019-06-27T02:06:47Z"},{"id":461265516,"title":"[Fresh] Handle changes at module boundaries","body":"Normally we use the registration mechanism to \\"contain\\" changes. We edit a component, there\'s a new version of it, we update the registration. Cool. We don\'t want to re-evaluate the world. Just that file alone, if we can.\\r\\n\\r\\nWhat if nothing registered during that file\'s evaluation? If there\'s nothing to register, there\'s nothing to update.. Right? Well, not quite.\\r\\n\\r\\nIf we had an `App` class, initially we registered it at the module boundary with a fallback `\\"[App.js] exports.default\\"` ID. But if we rewrite it to a function (imagine I\'m a product developer moving to Hooks), in the new version we\'ll register it twice \u2014 first via transform with `\\"[App.js] App\\"` and then with `\\"[App.js] exports.default\\"` ID. First registration wins. As a result, `\\"[App.js] exports.default\\"` ID _keeps pointing to the old `App` class_. That happens on RN now.\\r\\n\\r\\nAs a result, when you convert a class to a function, you keep seeing the class.\\r\\n\\r\\nWe could patch over it in different ways. But I think the core problem here is that _if the families changed at the module boundary, we can\'t safely stop at that module_. (Especially in an environment without inline requires.) We need to re-evaluate parent modules, and apply the same algorithm to them, so that they re-render and use the latest versions of exports.\\r\\n\\r\\nSo I\'m adding a mechanism that the module system can use to do this. The new method is `getFamilyByType`. The module system can compare the previous and next exports. If some were added or removed, we need to propagate the update. (This also helps fix the case where a parent references a deleted export from a child \u2014 that should become an error by re-rendering the parent.) The new method also lets us propagate the update if *registered family* becomes different for that export. So that catches cases like class-to-function, function-to-class, wrap-in-HOC, export-a-different-function-component-from-the-same-file.\\r\\n\\r\\nI added some integration tests to show the intent although I won\'t be fully modeling it here. That code will live in the module system.","number":16002,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-27T01:59:03Z"},{"id":461159193,"title":"[ESLint] \'exhaustive-deps\' lint rule - false warning and incorrect correction","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nI have eslint autofix my errors. For the first time, it caused a bug rather than helped.\\r\\nEslint will auto add dependencies that cause the code to improperly function. In my example, it added onClick. Then it would request me to change onClick to a useCallback (FYI, I did not show the useCallback changes). If I did make those changes, it would disrupt the order the test buttons disappear.\\r\\n**What is the current behavior?**\\r\\n```\\r\\nCurrent code\\r\\nfunction TimeoutAlert({ id, message, deleteAlert, autoClose }) {\\r\\n  const onClick = () => deleteAlert(id);\\r\\n  useEffect(() => {\\r\\n    if (autoClose) {\\r\\n      const timer = setTimeout(onClick, 2000);\\r\\n      return () => clearTimeout(timer);\\r\\n    }\\r\\n  }, [autoClose, onClick]);\\r\\n  return (\\r\\n    <p>\\r\\n      <button onClick={onClick}>\\r\\n        {message} {id}\\r\\n      </button>\\r\\n    </p>\\r\\n  );\\r\\n}\\r\\n```\\r\\nCodeSandbox link: https://codesandbox.io/s/multiple-alert-countdown-294lc\\r\\n\\r\\n**What is the expected behavior?**\\r\\n```\\r\\nfunction TimeoutAlert({ id, message, deleteAlert, autoClose }) {\\r\\n  const onClick = () => deleteAlert(id);\\r\\n  useEffect(() => {\\r\\n    if (autoClose) {\\r\\n      const timer = setTimeout(onClick, 2000);\\r\\n      return () => clearTimeout(timer);\\r\\n    }\\r\\n  }, [autoClose]);\\r\\n  return (\\r\\n    <p>\\r\\n      <button onClick={onClick}>\\r\\n        {message} {id}\\r\\n      </button>\\r\\n    </p>\\r\\n  );\\r\\n}\\r\\n```\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact 16.8.6\\r\\neslint-plugin-react-hooks 1.6.0","number":16001,"user":{"login":"TriStarGod"},"state":"closed","created_at":"2019-06-26T20:11:05Z"},{"id":461150488,"title":"Add option to includeNegativeTabIndex in getFocusableElementsInScope","body":"The idea for this pull request came up when @trueadm and I were talking about being able to differentiate between focusable and tabbable elements (to implement something like roving tabindex for focus management as recommended within aria best practices guide: https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).\\r\\n\\r\\nThe current `getFocusableElementsInScope` implementation treats elements with `tabIndex === -1` as not focusable. This introduces as boolean flag (`includeNegativeTabIndex`) that disables the `tabIndex < 0` filter. Also made the logic more generic to accommodate for `tabIndex` values other than `-1` and `0`. And I added some tests :)","number":16000,"user":{"login":"voideanvalue"},"state":"closed","created_at":"2019-06-26T19:48:59Z"},{"id":461120273,"title":"Prefix mock Scheduler APIs with _unstable","body":"For now this is only meant to be consumed via `act`.","number":15999,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-06-26T18:32:53Z"},{"id":461093927,"title":"Slightly improve performance of hydration.","body":"Avoid loading nodeType and data couple times from the same node in a row,\\r\\nbut instead load them only once, which will help engines to run this code\\r\\nfaster, especially during startup of the application. The general approach\\r\\nis still not ideal, since hydrating this way forces the browser engine\\r\\nto materialize JavaScript wrapper objects for all DOM nodes, even if they\\r\\nare not interesting to hydration itself.","number":15998,"user":{"login":"bmeurer"},"state":"closed","created_at":"2019-06-26T17:28:01Z"},{"id":461090419,"title":"[Flare] Fix issues with touch + pointer interactions","body":"This PR fixes a bunch of issues and removes some dead code from `Press`. Specifically, the event object we returned to the user wasn\'t always return the right co-ords if multiple events were being used at once (it only got the properties from the first even object). Also, pointer events that are touch events always have the same target as the original press start, so we now only use the logic for checking targets within targets for mouse events. To improve code, we now also leverage `touchEvent` on state to make things a bit saner.","number":15997,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-26T17:19:15Z"},{"id":461067425,"title":"Lifecycle methods not get called when component updating","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nSome lifecycle methods are not get called when component updating.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/cool-proskuriakova-pz40f\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nAlert message after click the `Toggle` button in the first time.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact: 16.8.6\\r\\nreact-dom: 16.8.6\\r\\nreact-scripts: 3.0.1\\r\\n","number":15996,"user":{"login":"yangmingshan"},"state":"closed","created_at":"2019-06-26T16:23:40Z"},{"id":460872688,"title":"expected 1 but found 2 instances with node type: \\"undefined\\"","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug?\\r\\n**What is the current behavior?**\\r\\nSo I have this component Im trying to test. It is one component with 3 fields, one input, one select, and then based on that select  the third is shown or not. \\r\\nSo far Im trying to write one text only for the input field (the first one).\\r\\n\\r\\nSo here is the code:\\r\\n```React\\r\\n it(\\"test input field\\", () => {\\r\\n    const newProps = {\\r\\n      something: initialState,\\r\\n      dispatch: reducer\\r\\n    };\\r\\n    const component = TestRenderer.create(\\r\\n      <ContextBR.Provider value={{ ...newProps }}>\\r\\n        <ComponentWithTheFields/>\\r\\n      </ContextBR.Provider>\\r\\n    );\\r\\n    const rootInstance = component.root;\\r\\n    console.log(rootInstance);\\r\\n    const inputField = rootInstance.findByType(\\"input\\");\\r\\n\\r\\n    inputField.props.onChange({ target: { value: \\"\\" } });\\r\\n    expect(inputField.props.value).toBe(\\"\\");\\r\\n\\r\\n    inputField.props.onChange({ target: { value: \\"blue\\" } });\\r\\n    expect(inputField.props.value).toBe(\\"blue\\");\\r\\n  });\\r\\n``` \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nI wanted to get the input field \\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n```React\\r\\n    <div>\\r\\n      <div className=\\"container\\">\\r\\n        <h3 className=\\"h3\\">Info</h3>\\r\\n        <div className=\\"row\\">\\r\\n          <div className=\\"col\\">\\r\\n            <label htmlFor=\\"test\\">test:</label>\\r\\n            <input\\r\\n              id=\\"myID\\"\\r\\n              value={aPropThatIsAnEmptyString}\\r\\n              type=\\"text\\"\\r\\n              className={`form-control form-control-sm ${style.fieldsGap}`}\\r\\n              onChange={e => setTest(e.target.value)}\\r\\n              placeholder=\\"test\\"\\r\\n            />\\r\\n          </div>\\r\\n          <div className=\\"col\\">\\r\\n            <label htmlFor=\\"ddlType\\">test2:</label>\\r\\n            <select\\r\\n              id=\\"SelectId\\" \\r\\n```\\r\\n\\r\\n\\r\\nbut Im getting \\r\\n\\r\\nExpected 1 but found 2 instances with node type: \\"undefined\\" \\r\\n\\r\\n\\r\\n      29 |     const rootInstance = component.root;\\r\\n      30 |     console.log(rootInstance);\\r\\n    > 31 |     const inputField= rootInstance.findByType(\\"input\\");\\r\\n         |                                   ^\\r\\n      32 | \\r\\n      33 |     inputField.props.onChange({ target: { value: \\"\\" } });\\r\\n      34 |     expect(inputField.props.value).toBe(\\"\\");","number":15995,"user":{"login":"C-odes"},"state":"closed","created_at":"2019-06-26T09:52:53Z"},{"id":460858158,"title":"useEffect issue in production mode","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nReport a bug.\\r\\n**What is the current behavior?**\\r\\nI use \\"useEffect\\" in my code as below:\\r\\n![image](https://user-images.githubusercontent.com/17432911/60167049-e2a9a200-9834-11e9-816b-1cc1f4068b7c.png)\\r\\nIn development mode, everything is correct, but in production mode, we will get this error:\\r\\n![image](https://user-images.githubusercontent.com/17432911/60167189-27353d80-9835-11e9-855c-5a75158278cc.png)\\r\\nI guess useEffect doesn\'t check whether the returned value is a function when unmounted in production mode, so I modified this structure as below and it works fine both in development and production mode.\\r\\n![image](https://user-images.githubusercontent.com/17432911/60167476-c0fcea80-9835-11e9-814d-b63561863db3.png)\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nAbove description.\\r\\n**What is the expected behavior?**\\r\\nin production, when we use this structure, we should get right behavior as same as development mode:\\r\\n![image](https://user-images.githubusercontent.com/17432911/60167049-e2a9a200-9834-11e9-816b-1cc1f4068b7c.png)\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\"react\\": \\"16.8.6\\",\\r\\n\\"react-dom\\": \\"16.8.6\\"","number":15994,"user":{"login":"jajk"},"state":"closed","created_at":"2019-06-26T09:23:31Z"},{"id":460808429,"title":"[Flare] Move click handling back into target phase","body":"When dealing with `click` handling, specifcally preventing the browser default, we should do this in the `onEvent` callback rather than `onRootEvent`. This is to allow for cases where we may have removed the root event listeners (due to cancellation) but want to preserve the ability to continue to block the browser native behaviour.","number":15993,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-26T07:33:22Z"},{"id":460711894,"title":"updated readme","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":15992,"user":{"login":"cmahlobo"},"state":"closed","created_at":"2019-06-26T01:08:51Z"},{"id":460661002,"title":"[Proposal] Children by type","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nFeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nReact.Children functions are very limited by what they offer.\\r\\n\\r\\n**Proposal**\\r\\n\\r\\nAdd the function byType to React.Children. That would take two arguments, the first one being the children (array, object, function, etc) and the second one being a component or the component\'s name. And would return an array of the components that match that. It also could have the second parameter optional, making it organize the return by an object that would return all children separated by type.\\r\\n\\r\\n**Example**\\r\\nThis example is not complete and should not be compared to the final proposal function\\r\\n\\r\\n``` javascript\\r\\nfunction byType (children, type : string) {\\r\\n    return React.Children.map(children, child => type == child.type.name? child:null);\\r\\n}\\r\\n```","number":15991,"user":{"login":"ghost"},"state":"closed","created_at":"2019-06-25T21:50:49Z"},{"id":460548659,"title":"Refactor \'ReactChildren.js\'","body":"Mainly split up \'traverseAllChildrenImpl\' which had already grown to 100 lines.","number":15990,"user":{"login":"olafur-palsson"},"state":"closed","created_at":"2019-06-25T17:27:36Z"},{"id":460540822,"title":"Collapsible Error Dialogs for the Ecosystem","body":"Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\\r\\n\\r\\nBoth in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it\'s useful to look \\"underneath\\" to see whether your boundary worked as expected, and to have an idea of the end user experience.\\r\\n\\r\\nWe could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.","number":15989,"user":{"login":"gaearon"},"state":"open","created_at":"2019-06-25T17:09:07Z"},{"id":460539339,"title":"getDerivedStateFromError for Control Flow","body":"Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\\r\\n\\r\\nWe might want to offer a way to \\"bubble\\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.","number":15988,"user":{"login":"gaearon"},"state":"open","created_at":"2019-06-25T17:05:13Z"},{"id":460493276,"title":"RFC: wrap react-test-renderer\'s .create and .update with act() by default","body":"DO NOT MERGE: Doing a PR so I can test on fb first. \\r\\n\\r\\nYou should read this whitespace changes off. \\r\\n\\r\\nThis PR adds act() by default to react-test-renderer\'s `.create`, `.update`, and `.unmount` methods. \\r\\n\\r\\nWe risk a major breaking change with having added warnings on unqueued effects outside of an act scope. Eg: A lot of people\'s snapshot tests will break; this would be good, if they didn\'t have to first wrap their renderer helper with `act()`, and then update snapshots.\\r\\n\\r\\nBroadly, we could also make a case why this makes sense to any consumers; they\'ll be using it only in testing scenarios, which we\'d want to wrap in `act()` anyway\\r\\n\\r\\nFor our internal tests, this had the effect that a larger portion of the test was just wrapped with an outer `act()`, letting us test incremental updates by advancing the `Scheduler` manually.\\r\\n\\r\\n- In the second commit, I also fix act()\'s flow signature\\r\\n- in the third commit, I update our fixtures to account for the change","number":15987,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-06-25T15:27:36Z"},{"id":460454159,"title":"npm run build in branch 16.8.6","body":"when run (npm run build)\\r\\nget error:\\r\\nError: Cannot find module \'react\'\\r\\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:580:15)\\r\\n    at Function.resolve (internal/modules/cjs/helpers.js:30:19)\\r\\n    at createBundle (D:\\\\E\\\\study\\\\vscode\\\\react-16.8.6\\\\scripts\\\\rollup\\\\build.js:452:31)\\r\\n    at buildEverything (D:\\\\E\\\\study\\\\vscode\\\\react-16.8.6\\\\scripts\\\\rollup\\\\build.js:614:11)\\r\\nerror Command failed with exit code 1.","number":15986,"user":{"login":"yellowjian"},"state":"closed","created_at":"2019-06-25T14:19:33Z"},{"id":460393150,"title":"Fragment will throw an error during unmount if it\u2019s content is edited outside react","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIf direct child node of fragment was replaced by other node not created by react \u2014 react will throw `Failed to execute \'removeChild\' on \'Node\': The node to be removed is not a child of this node.` when Fragment will be unmounted\\r\\n\\r\\n**Smallest reproduction case:**\\r\\nhttps://codesandbox.io/s/react-replace-element-fragment-error-0rkqw\\r\\nSecond and fourth buttons will produce error on second click.\\r\\nWhat\u2019s strange that if you\u2019ll delete the content in fragment in content editable div (button 5) \u2014\xa0it will not throw error.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nReact not throwing error. Maybe warning?\\r\\nWhy? because any browser extension in any browser can replace any node and this will lead to broken application.\\r\\nOtherwise documentation should be improved and state clearly that fragment is unsafe to use if there is a chance of third party DOM modification. (I understand why it is happening in the first place, but not agree that it should).\\r\\nAlso it would be great to include DOM path into original error if possible, because for example we create captured this error using sentry and it is unclear where it is happening and it\u2019s quite hard to improve the situation.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.3, no, I think it was broken all along","number":15985,"user":{"login":"wwwsevolod"},"state":"closed","created_at":"2019-06-25T12:25:40Z"},{"id":460386328,"title":"feat(docs): Add Table of Contents","body":"Included contents section for easy navigation.","number":15984,"user":{"login":"jamesgeorge007"},"state":"closed","created_at":"2019-06-25T12:10:23Z"},{"id":460382316,"title":"[Flare] Fix Press scroll cancellation handling","body":"This PR fixes a tricky bug around how deal with dispatching `Press` cancellations. Before this PR, we always cancelled an active press interaction if a `scroll` event occurred anywhere on the document. This led to cases internally where weren\'t handling valid presses when interactions occurred that caused parts of the page to scroll \u2013 unrelated to the press interaction. This PR introduces some validation to the `scroll` event, specifically:\\r\\n\\r\\n- if a `scroll` occurs on the `document`, then cancel the press interaction\\r\\n- if a `scroll` occurs on a parent element of the current pressed target, cancel the press interaction\\r\\n- if a `scroll` occurs on an element elsewhere on the page, but is unrelated to the current press target, then continue with the press interaction","number":15983,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-25T12:01:26Z"},{"id":460147296,"title":"Add check so script tags with uppercase letters are sanitized","body":"I\'ve added the additional checks and created a test case. I hope everything is in the right place and up to standard. ","number":15982,"user":{"login":"svensprk"},"state":"closed","created_at":"2019-06-25T00:04:07Z"},{"id":460126152,"title":"[Flare] Move all event responders to dom directory","body":"All the current event responders are implementations for the DOM renderer. As we plan to have other implementations for other renderers (RN etc), they should be in their own directories.","number":15981,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-24T22:36:01Z"},{"id":460076594,"title":"Do I can use flare in React ?","body":"Can I use FLARE 2D ANIMATION in react ? I did not find something about this.","number":15980,"user":{"login":"Maark007"},"state":"closed","created_at":"2019-06-24T20:19:25Z"},{"id":460076051,"title":"Old app with componentWillReceiveProps freezes browser, adding UNSAFE_ fixes it","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe app freezes the browser/tab for like 28 seconds until I changed maybe 20+ componentWillReceiveProps to UNSAFE_componentWillReceiveProps or used the codemod. The components with the method haven\'t been loaded yet, as It uses react-loadable, and is in a login component only. In chrome dev tools however, it stays a long time in a webpackerrormessage js file.\\r\\n\\r\\nJust found it weird, it runs on my iMac immediately, but previously not on my 2nd gen i5 with 12gb of ram laptop, until I changed this, it\'s a large codebase btw, but still some mighty performance impact for an error message. Just wanted a heads up, some folks out there who ignore eslint warnings \ud83d\ude2c until its time to clean up the app might just ignore this casually, i dunno.\\r\\n\\r\\nI only tested this on development, haven\'t tried doing a build with no sourcemaps to see if that is a problem too.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nTried doing some nested components with the lifecycle method in the sandbox, doesn\'t lag, so its probably with eslint-react?\\r\\n\\r\\n**What is the expected behavior?**\\r\\nShould have lagged with the aforementioned lifecycle method, but it probably doesnt since there\'s no eslint configured\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nThis is on react 16.5.0, eslint 5.6.1","number":15979,"user":{"login":"lukemikael"},"state":"closed","created_at":"2019-06-24T20:18:02Z"},{"id":460067586,"title":"Using \'scRipt\' in React.createElement\'s type parameter allows you to execute JavaScript code in the child parameter","body":"**Do you want to request a feature or report a bug?**\\r\\nReport a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIt\'s possible to execute JavaScript code written in the child parameter of the `React.createElement` function, if the type parameter consists of a string with mixed casing, like so:\\r\\n\\r\\n```javascript\\r\\nReact.createElement(\'scRipt\', null, \'alert(1)\');\\r\\n```\\r\\nhttps://codesandbox.io/s/sleepy-hodgkin-twxqe\\r\\n\\r\\n**What is the expected behavior?**\\r\\nIt should not execute the code, but behave exactly like if you typed in \'script\' in lowercase.\\r\\n\\r\\nI would argue that this is unexpected behavior. Judging from the docs ([\\"JSX Prevents Injection Attacks\\"](https://reactjs.org/docs/introducing-jsx.html#jsx-prevents-injection-attacks)) developers might get the impression, that it is generally safe to embed any user input using JSX. Additionally, if you try to execute JavaScript using script tags, it won\'t work. \\r\\n\\r\\nI _think_ developers might get the idea to give users the ability to write their own \\"safe\\" HTML code in comments and the like by parsing their input and converting it to React elements. JSX also allows you to use dynamic input as tag types.\\r\\n\\r\\nApart from the mentioned behavior, I\'m not aware of any other `type` / `children` combination that would result in JavaScript code execution without a controllable props parameter. So a scenario where a user can control both of these parameters is most likely the only one where this leads to issues.\\r\\n\\r\\nSo I think the code below is likely the culprit (line 423). Please correct me if I\'m wrong.\\r\\n\\r\\nhttps://github.com/facebook/react/blob/fce15f14d38d680f3bdee3a124e9e94e91520e16/packages/react-dom/src/client/ReactDOMComponent.js#L423-L430\\r\\n\\r\\nImo it would make sense to convert the `type` variable to lowercase before comparing it to the \'script\' string, so it works as anticipated, even if the casing of the input is user-controllable. Unfortunately I\'m not familiar enough with the inner workings of React to submit a pull request of which I\'m confident, that it doesn\'t break anything. This would be my naive solution for this issue:\\r\\n\\r\\n```javascript\\r\\nif (typeof type === \'string\' && type.toLowerCase() === \'script\') { /* ... */ }\\r\\n```\\r\\n\\r\\nI\'d love to hear your thoughts on this. Is this behavior actually unexpected and if so, should it be fixed?","number":15978,"user":{"login":"svensprk"},"state":"open","created_at":"2019-06-24T19:56:15Z"},{"id":459992088,"title":"Reduce duplication in detachFiber()","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":15977,"user":{"login":"dmarcey"},"state":"closed","created_at":"2019-06-24T16:44:36Z"},{"id":459946499,"title":"[Flare] Ensure Press event hook does not execute side-effects","body":"The `Press` event responder allow for certain props with side-effects to be passed. These props alter how the browser handles certain DOM operations. They are:\\r\\n\\r\\n- `preventDefault`\\r\\n- `preventContextMenu`\\r\\n- `stopPropagation`\\r\\n\\r\\nThese props are special cases for when escape hatches are needed and should be specific to event components, not to event hooks. Having them in event hooks could cause unexpected behaviour that won\'t be trivial to debug and find. This PR changes them all to be no-ops in the case of being used in an event hook. They also have DEV time warnings.","number":15976,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-24T15:07:19Z"},{"id":459944186,"title":"don\'t fire missing act() warnings for react-art","body":"react-art is a renderer that\'s usually embedded inside other renderer trees (like react-dom, etc) we fire a warning for being wrapped in the \'wrong\' renderer\'s act. For an embedded usecase like react-art, this would mean you\'d always see the warning. we could expose a new act() for react-art, but really we just want embedded renderers to not trigger the warning.   \\r\\n\\r\\n- the first commit just fixes test infra for fixtures/dom (forking toWarnDev into itself)\\r\\n\\r\\n- the second commit is mostly what we\'re interested in https://github.com/facebook/react/pull/15975/commits/88fe0b416a7be82ddf34c6cb9c3051e1d130c4cc. For \'secondary\' renderers like react-act, we don\'t want to fire missing act() warnings; the wrapping renderer will fire warnings anyway, and when it flushes, it flushes effects *across* renderers.\\r\\n\\r\\n- I could have used `isPrimaryRenderer` as the flag, but this is marked as false for react-test-renderer, and we *do* want the warning to fire for it. Hence a new flag.\\r\\n\\r\\n- I\'m open to a new name for `shouldWarnUnactedUpdates`. ","number":15975,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-06-24T15:03:06Z"},{"id":459934406,"title":"Add explicit support for ESLint 6.0.0","body":"Preemptively update tests wrt \'parser\' requiring an absolute path rather than a package name, even though the project is still using ESLint 4.\\r\\n\\r\\nTested locally by upgrading eslint (and all `eslint-*` dependencies) to their latest versions (using `yarn upgrade-interactive --latest`) and then running `yarn test`. Without the change to the tests, they expectedly failed due to the `parser` option not being an absolute path; with the change to the tests, they all pass.\\r\\n\\r\\nFixes #15971","number":15974,"user":{"login":"tbroyer"},"state":"closed","created_at":"2019-06-24T14:45:59Z"},{"id":459917018,"title":"Impossible to collect a stream of data using hooks","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nBug (well, maybe not, but it\'s definitely a shortcoming!)\\r\\n\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIt\'s impossible subscribe to a stream of data (e.g. observable) and collect the received values using the state and effect hooks\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/embed/romantic-hooks-h2jgt\\r\\n\\r\\nIn the example, the subject sends a number every second (from 1 to 10), and the code inside the useEffect hook should collect those values (so we should get a list with 10 numbers).\\r\\n\\r\\nWhat currently happens is:\\r\\n\\r\\n- when [] is passed as the second argument to useEffect (to avoid re-subscribing), only the last value will be saved to the component\'s state.\\r\\n- otherwise, we got into an infinite loop the component collects the data erratically.\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nA list with the numbers 1 - 10 after 10 seconds.\\r\\n","number":15973,"user":{"login":"ma7moudat"},"state":"closed","created_at":"2019-06-24T14:14:58Z"},{"id":459814832,"title":"followup to #15763, fix failing test in ReactDOMTracing-test","body":"It was me. I broke the build.\\r\\n\\r\\nI merged 15763 without testing a rebased version locally, which had a failing test. This PR fixes the test (by wrapping a section of the test with `act()`). \\r\\n\\r\\n","number":15972,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-06-24T10:31:32Z"},{"id":459798398,"title":"[eslint-plugin-react-hooks] Compatibility with ESLint 6.0.0","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nfeature\\r\\n\\r\\n**What is the current behavior?**\\r\\nUsing in my `package.json`:\\r\\n```\\r\\n    \\"eslint\\": \\"^6.0.0\\",\\r\\n    \\"eslint-plugin-react-hooks\\": \\"^1.6.0\\",\\r\\n```\\r\\nYarn emits:\\r\\n```\\r\\nwarning \\" > eslint-plugin-react-hooks@1.6.0\\" has incorrect peer dependency \\"eslint@^3.0.0 || ^4.0.0 || ^5.0.0\\".\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\nNo warning.\\r\\n\\r\\nAFAICT, there shouldn\'t be other change needed besides updating the peer dependency version in the `package.json`: https://eslint.org/docs/user-guide/migrating-to-6.0.0\\r\\nso it looks like I could just ignore the warning, but I\'d rather be sure the plugin is actually compatible with ESLint 6.0.0\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nn/a","number":15971,"user":{"login":"tbroyer"},"state":"closed","created_at":"2019-06-24T09:54:48Z"},{"id":459653784,"title":"16.8.6: Invariant Violation: Expected subtree parent to be a mounted class component","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nReporting a bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWe received a bug report from Rollbar (what we use to catch and report JS bugs).\\r\\n\\r\\n```\\r\\nInvariant Violation: Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.\\r\\n1 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 13 col 313 in r\\r\\n\'use strict\';var aa=require(\\"react\\"),n=require(\\"object-assign\\"),r=require(\\"scheduler\\");function b...\\r\\n2 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 14 col 166 in o\\r\\nfunction x(a){for(var b=arguments.length-1,c=\\"https://reactjs.org/docs/error-decoder.html?invaria...\\r\\n3 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 252 col 75 in Yr\\r\\nfunction Ji(a,b,c,d,e){var f=b.current;a:if(c){c=c._reactInternalFiber;b:{2===ed(c)&&1===c.tag?vo...\\r\\n4 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 253 col 85 in Kr\\r\\nof();pf(f,e);qf(f,d);return d}function Ki(a,b,c,d){var e=b.current,f=lf();e=mf(f,e);return Ji(a,b...\\r\\n5 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 261 col 426 in eo.legacy_renderSubtreeIntoContainer\\r\\nPi.prototype.render=function(a,b){var c=this._internalRoot,d=new Oi;b=void 0===b?null:b;null!==b&...\\r\\n6 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 264 col 342 in [anonymous]\\r\\nfunction Si(a,b,c,d,e){var f=c._reactRootContainer;if(f){if(\\"function\\"===typeof e){var g=e;e=func...\\r\\n7 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 251 col 66 in Ur\\r\\nfunction Hi(a,b){if(X&&!ri){ri=!0;try{return a(b)}finally{ri=!1}}return a(b)}function Ii(a,b,c){X...\\r\\n8 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 264 col 328 in ro\\r\\nfunction Si(a,b,c,d,e){var f=c._reactRootContainer;if(f){if(\\"function\\"===typeof e){var g=e;e=func...\\r\\n9 File \\"webpack:///./~/react-dom/cjs/react-dom.production.min.js\\" line 267 col 16 in Object.unstable_renderSubtreeIntoContainer\\r\\nx(\\"38\\"):void 0;return Si(a,b,c,!1,d)},unmountComponentAtNode:function(a){Qi(a)?void 0:x(\\"40\\");ret...\\r\\n10 File \\"webpack:///./~/ag-grid-react/lib/legacyReactComponent.js\\" line 66 col 1 in t.createReactComponentLegacy\\r\\nReactDOM.unstable_renderSubtreeIntoContainer(this.parentComponent, ReactComponent, th...\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nUnfortunately we do not know the user\'s actions beyond which page of our website they were viewing at the time of the error.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThere should be no bug.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: 16.8.6\\r\\nOS: MacOS 10.13.6\\r\\nBrowser: Chrome 74.0.3729","number":15970,"user":{"login":"MatthewHerbst"},"state":"closed","created_at":"2019-06-24T01:59:10Z"},{"id":459582607,"title":"default structure of class/function","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n*bug*\\r\\n\\r\\n**What is the current behavior?**\\r\\nI am getting function App() structure instead of class App extends React.Component { }. This is command i ran npx create-react-app react-poc. Is there any other parameter do we have to add in order to get class modules like structure.\\r\\n\\r\\nstructure of app.js\\r\\n````\\r\\nimport React from \'react\';\\r\\nimport logo from \'./logo.svg\';\\r\\nimport \'./App.css\';\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div className=\\"App\\">\\r\\n      <header className=\\"App-header\\">\\r\\n        <img src={logo} className=\\"App-logo\\" alt=\\"logo\\" />\\r\\n        <p>\\r\\n         I have edited\\r\\n        </p>\\r\\n        <a\\r\\n          className=\\"App-link\\"\\r\\n          href=\\"https://reactjs.org\\"\\r\\n          target=\\"_blank\\"\\r\\n          rel=\\"noopener noreferrer\\"\\r\\n        >\\r\\n          Learn React\\r\\n        </a>\\r\\n      </header>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n\\r\\n````\\r\\n**What is the expected behavior?**\\r\\nBy default it should be class when we install.\\r\\n\\r\\n**Question**\\r\\nHow to get the class structure instead of function App()\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n ````\\r\\n \\"dependencies\\": {\\r\\n    \\"react\\": \\"^16.8.6\\",\\r\\n    \\"react-dom\\": \\"^16.8.6\\",\\r\\n    \\"react-scripts\\": \\"3.0.1\\"\\r\\n  },\\r\\n````\\r\\n````\\r\\nD:\\\\react\\\\react-poc>npm -v\\r\\n5.6.0\\r\\n````","number":15968,"user":{"login":"indraraj26"},"state":"closed","created_at":"2019-06-23T14:33:47Z"},{"id":459550177,"title":"feat(chore): Minor refactor","body":"Replaced the `if-else` ladder with ternary operator thereby resulting in a more concise form.","number":15967,"user":{"login":"jamesgeorge007"},"state":"closed","created_at":"2019-06-23T08:27:24Z"},{"id":459550078,"title":"[Fresh] Retry failed roots on refresh","body":"This aligns the behavior for roots with error boundaries. When a root unmounts as a result of an error, if the Fresh runtime is running, it will record its last rendered element in a Map.\\r\\n\\r\\nThere is a new `scheduleRoot(root, element)` DevTools hook. Fresh runtime calls it on update for all failed roots with their last rendered elements. This offers us an opportunity to remount the tree.\\r\\n\\r\\nWe remove a root from the failed map if there is a further update on it that isn\'t caused by an error. In order to determine whether an update is caused by an error, we check `effectTag`. This is done before calling `onCommitFiberRoot` so that Fresh runtime itself doesn\'t depend on a particular tag constant.","number":15966,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-23T08:26:23Z"},{"id":459523279,"title":"Update readme","body":"# Added the logo and statement\\r\\nI added the react logo and statement from the website to make it look aesthetically pleasing","number":15965,"user":{"login":"saavor"},"state":"closed","created_at":"2019-06-23T00:34:11Z"},{"id":459517908,"title":"useState hook variable\'s value is always one step behind","body":"Here using React and Next.js. \\r\\n\\r\\nHere a summary of the code:\\r\\n\\r\\nI have this hook:\\r\\n```javascript\\r\\nimport { useState } from \'react\';\\r\\nimport BigCalendar from \'react-big-calendar\'\\r\\nimport moment from \'moment\';\\r\\nimport CreateEventForm from \'./CreateEventForm\';\\r\\n\\r\\nconst localizer = BigCalendar.momentLocalizer(moment);\\r\\n\\r\\nconst Calendar = props => {\\r\\n\\r\\n    const [newEvent, setNewEvent] = useState({\\r\\n        start: new Date(),\\r\\n        end: new Date(),\\r\\n    });\\r\\n\\r\\n    const onSelectHandler = info => {\\r\\n        // logging the new info\\r\\n        console.warn(\'New info: \', info);\\r\\n        // assigning the new info to the hooks variable\\r\\n        (setNewEvent(info));\\r\\n        // logging the hook variable\'s value \\r\\n        console.warn(\'Hook variable\\\\\'s value: \', newEvent);\\r\\n    }\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nThere\'s actually nothing else to be told, when the handler is fired by an event, the variable `info` comes with an object on new information. Inmediately I log the information to the console to see that it is actually the correct and new info, i set the info to the hook\'s variable and inmediately log to the console the value of the hook\'s variable and it doesn\'t match the new info i just tried to assign to it. It\'s actually logs the default values (the 2 dates).\\r\\nIf I do it again, it happens the same but the hooks variable this time doesn\'t log the default, but the new info of the first try, so basically it\'s coming one time late every time.   \\r\\n\\r\\nWhat could i have done to make this happen?\\r\\n\\r\\nThe event firing the handler is when i select a slot at the React Big Calendar\\r\\n```javascript\\r\\nconst myEvents = props.events.map(event => {\\r\\n        return {\\r\\n            ...event,\\r\\n            start: new Date(event.start),\\r\\n            end: new Date(event.end)\\r\\n        };\\r\\n    });\\r\\n\\r\\n            <BigCalendar\\r\\n                defaultView=\\"week\\"\\r\\n                localizer={localizer}\\r\\n                events={myEvents}\\r\\n                startAccessor=\\"start\\"\\r\\n                endAccessor=\\"end\\"\\r\\n                selectable={true}\\r\\n                onSelectSlot={onSelectHandler}\\r\\n            />\\r\\n```","number":15964,"user":{"login":"marcosdipaolo"},"state":"closed","created_at":"2019-06-22T22:53:16Z"},{"id":459446749,"title":"[scheduler] Put isPendingInput behind a flag","body":"https://github.com/facebook/react/pull/15959#issuecomment-504616476","number":15962,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-06-22T07:19:18Z"},{"id":459426717,"title":"useReducer - Unable to retrieve updated values","body":"```jsx\\r\\nimport React, { useEffect, useReducer } from \'react\';\\r\\n\\r\\nconst initialState = {\\r\\n  count: 0\\r\\n};\\r\\n\\r\\nfunction reducer(state: any, action: any) {\\r\\n  switch (action.type) {\\r\\n    case \'setCount\':\\r\\n      return {count: 999};\\r\\n    default:\\r\\n      return state;\\r\\n  }\\r\\n}\\r\\n\\r\\nconst About = function () {\\r\\n  const [state, dispatch] = useReducer(reducer, initialState);\\r\\n\\r\\n  function init() {\\r\\n    dispatch({ type: \'setCount\' })\\r\\n    getData();\\r\\n  }\\r\\n\\r\\n  function getData() {\\r\\n    // Why count is 0,   The result I expect is 999\\r\\n    http(\'/\', { count: state.count });\\r\\n  }\\r\\n\\r\\n  useEffect(() => {\\r\\n    init();\\r\\n  }, []);\\r\\n  \\r\\n  return null\\r\\n};\\r\\n\\r\\nexport default About;\\r\\n\\r\\n```","number":15961,"user":{"login":"six-666"},"state":"closed","created_at":"2019-06-22T03:18:53Z"},{"id":459418368,"title":"[Scheduler] requestPaint","body":"Signals to Scheduler that the browser needs to paint the screen. React will call it in the commit phase. Scheduler will yield at the end of the current frame, even if there is no pending input.\\r\\n\\r\\nWhen `isInputPending` is not available, this has no effect, because we yield at the end of every frame regardless.\\r\\n\\r\\nReact will call `requestPaint` in the commit phase as long as there\'s at least one effect. We could choose not to call it if none of the effects are DOM mutations, but this is so rare that it doesn\'t seem worthwhile to bother checking.","number":15960,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-06-22T01:25:39Z"},{"id":459418168,"title":"[Scheduler] Yield less if there\'s no pending input","body":"At the end of each frame, Scheduler yields control of the main thread so the browser can execute important tasks; most importantly, painting the screen and responding to user input. There\'s some overhead involved in regaining control of the main thread, so we\'d like to yield as infrequently as possible to keep the UI responsive.\\r\\n\\r\\nThe reason we yield on every frame is because there\'s no way for us to know whether we\'re blocking user input.\\r\\n\\r\\n[`isInputPending`](https://github.com/WICG/is-input-pending) is an experimental browser API that gives us this information. It tells us whether there\'s a pending user input, which also means it tells us if there\'s *not* a pending user input. We can use this signal to decide whether it\'s OK not to yield.\\r\\n\\r\\nThere\'s a max frame length after which we\'ll yield regardless, as a precaution against blocking non-input tasks that we don\'t know about.","number":15959,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-06-22T01:23:10Z"},{"id":459417881,"title":"video element not rendering react chromium ubuntu","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nYes.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nI have a problem with react not showing the video element. It shows it in the html document but it does not appear in the screen. If I use controls attribute the frame of the video will appear (the video player with controls) but the content will not be displayed (the video file). If I do not use the controls attribute it does not appears in the screen at all.\\r\\n\\r\\nI have tested the video file within a plain html website and it works perfectly.\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThe video should appear in the screen.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n  \\"dependencies\\": {\\r\\n    \\"react\\": \\"^16.8.6\\",\\r\\n    \\"react-dom\\": \\"^16.8.6\\",\\r\\n    \\"react-scripts\\": \\"3.0.1\\"\\r\\n  }\\r\\n\\r\\nI have used npx create-react-app and I\'m using ubuntu, chromium browser.","number":15958,"user":{"login":"amishPro"},"state":"closed","created_at":"2019-06-22T01:19:44Z"},{"id":459415332,"title":"[Fresh] Report refreshed families to the caller","body":"This is useful to implement logging during refresh. Provides extra assurance things work as intended, and gives insight into which things updated and/or reset state.","number":15957,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-22T00:53:34Z"},{"id":459412433,"title":"[Fresh] Use function expression for custom Hook signature argument","body":"Needed internally, see D15947985.\\r\\nWe can later change that back but for now I\'d like to not have to worry about this.","number":15956,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-22T00:25:47Z"},{"id":459379094,"title":"[Flare] Refinements to useEvent hook","body":"This PR makes some refinements to the `useEvent` hook API and also adds in a way to provide the responder a way of finding out if it is responding to an event hook (`context.isRespondingToHook()`).\\r\\n\\r\\n`useEvent` now takes an `EventComponent` rather than an `EventResponder`. This was an open question on the original PR and I wasn\'t sure what people would prefer to use when defining how hooks can be formed, but the general consensus is that it makes more sense to provide the event components instead of their raw event responders.\\r\\n\\r\\nAs a follow up, it would be great if someone could leverage the `isRespondingToHook` method to ensure `<Press>` side-effectful props (`preventDefault`, `stopPropagation`, `preventContextMenu`) become no-ops in the event responder when used with hooks \u2013 probably with a nice warning too.","number":15955,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-21T21:27:47Z"},{"id":459321310,"title":"shared `isTextInputElement.js` has untested behavior","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nIn the shared folder, there is a function that checks if an HTMLElement is a Text field. It\'s used for helping with onChange events picked up by the ChangeEventPlugin and the SelectEventPlugin. It was at one point part of the ChangeEvent code before being abstracted out in 2013.\\r\\n\\r\\nIf I comment out all but three type checks in this file, The tests all still pass.\\r\\n\\r\\n```\\r\\nconst supportedInputTypes: {[key: string]: true | void} = {\\r\\n  // color: true,\\r\\n  // date: true,\\r\\n  // datetime: true,\\r\\n  // \'datetime-local\': true,\\r\\n  // email: true,\\r\\n  // month: true,\\r\\n  number: true,\\r\\n  // password: true,\\r\\n  range: true,\\r\\n  // search: true,\\r\\n  // tel: true,\\r\\n  text: true,\\r\\n  // time: true,\\r\\n  // url: true,\\r\\n  week: undefined, // changed from true; same behavior as commenting out the line\\r\\n};\\r\\n```\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nTests should fail if any of the above branching logic switches from false to true or true to false.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI\'m branching off master at `commit 5368f7316c8ae489c6a271694166158428ee4a5e`\\r\\nThis behavior is code-specific so It should be platform agnostic.","number":15954,"user":{"login":"IanDCarroll"},"state":"closed","created_at":"2019-06-21T18:32:10Z"},{"id":459319535,"title":"[Flare] Add Hooks to event modules","body":"Initial implementation for the various Hooks that will go along with the event components in `react-events`. I\'ll push another commit with some tests later today.","number":15953,"user":{"login":"aweary"},"state":"closed","created_at":"2019-06-21T18:27:10Z"},{"id":459310561,"title":"[Flare] Guard against stateNode being null","body":"Ensure we guard against `stateNode` being null, as this can occur after an event component unmounts.","number":15952,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-21T18:01:43Z"},{"id":459147004,"title":"Portal and animations (and other side effects)","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nMaybe feature ?\\r\\n\\r\\n**What is the current behavior?**\\r\\n```jsx\\r\\n// the portal component\\r\\nclass Modal extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.el = document.createElement(\'div\');\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    modalRoot.appendChild(this.el);\\r\\n  }\\r\\n\\r\\n  componentWillUnmount() {\\r\\n    modalRoot.removeChild(this.el);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return ReactDOM.createPortal(\\r\\n      this.props.children,\\r\\n      this.el,\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nclass Child extends Component {\\r\\n  elRef = createRef();\\r\\n\\r\\n  componentDidMount() {\\r\\n    // some animations here\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return <div ref={this.elRef}></div>;\\r\\n  }\\r\\n}\\r\\n```\\r\\n`Modal`\'s componentDidMount is fired after Child\'s componentDidMount. When Child performing animations, everything is not in the DOM tree, whitch causes problems.\\r\\nSame issue with hooks. Same issue with other side effects related to Child\'s DOM.\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\nMaybe provide a way to perform side effects before component mount, and guranteed clean up? For example:\\r\\n```js\\r\\nfunction App() {\\r\\n  useSomething(() => {\\r\\n    // called before mount, parent fires before child\\r\\n    return () => {\\r\\n      // called after unmount, child fires before parent\\r\\n    }\\r\\n  }, []);\\r\\n}\\r\\n```\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":15951,"user":{"login":"intellild"},"state":"closed","created_at":"2019-06-21T11:16:23Z"},{"id":459137553,"title":"[Flare] Refine flow type annotations","body":"This PR cleans up the Flow type annotations by leveraging generics instead of importing from the host config, which led to bad Flow types in some places and also breakage of the RN sync (it required a temporary hack to make RN sync work again).\\r\\n\\r\\nFurthermore, given that `unstable_createEvent` is now back on the `React` object, rather than the renderer, we can enforce a consistent `EventResponder` structure that all renders use, which makes more sense going forward \u2013 as we initially thought that different renderers would use different event responder structures. This also sets us up nicely for using Flare in RN without too many changes.\\r\\n\\r\\nThis PR also ensures that `useEvent` defines an empty object props if not passed an object and makes event responder state always an object (if none is defined). This helps reduce the complexity of the responder API contract.","number":15950,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-21T10:50:20Z"},{"id":459112698,"title":"Effect does not run after each completed render","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nPossible bug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nEffect does not run after every completed render in contrast to https://reactjs.org/docs/hooks-reference.html#useeffect\\r\\n\\r\\n> By default, effects run after every completed render, but you can choose to fire it only when certain values have changed.\\r\\n\\r\\nReproduction Repo: https://codesandbox.io/s/render-without-effect-4ewx5\\r\\n\\r\\nSteps to reproduce: Enter something into the input field. Then click outside to loose focus and check the console, which will read something like:\\r\\n\\r\\n```\\r\\nrender \\"\\" false\\r\\n***EFFECT*** \\r\\nonChange \\r\\nrender a true\\r\\n***EFFECT*** \\r\\nonBlur \\r\\nrender a true\\r\\n```\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nI would expect the effect to run after each completed render, i.e. also after the last render of the example above. Not sure if there would be any real use case, but I just came across this behavior and it seems to be a bit inconsistent (at least with the docs). So, IMHO either the last render call should not happen because neither props nor state changed, or the effect should be called after the final render.\\r\\n\\r\\n(Note: If you click into the input field and then outside again, there will be no additional render)\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nReact: v16.8.6\\r\\nBrowser: Google Chrome Version 74.0.3729.169 (Official Build) (64-bit)\\r\\nOS: macOS Mojave\\r\\n\\r\\nI did not test this in previous versions of React\\r\\n\\r\\n","number":15949,"user":{"login":"jschlieber"},"state":"closed","created_at":"2019-06-21T09:49:29Z"},{"id":459100994,"title":"Problem with refreshing initial state when props change","body":"**My custom useReducer code**\\r\\n```javascript\\r\\nimport { useReducer } from \'react\'\\r\\n\\r\\ninterface ReturnType extends StateType {\\r\\n  clear: () => void\\r\\n  set: (input: File) => void\\r\\n}\\r\\ntype ValidatorType = (input: File) => { error: boolean; message: string }\\r\\ntype InitializerType = (input?: File, validator?: ValidatorType) => StateType\\r\\ntype ReducerType = (input?: File, validator?: ValidatorType) => ReturnType\\r\\ntype StateType = {\\r\\n  value?: File\\r\\n  error: boolean\\r\\n  message: string\\r\\n  disabled: boolean\\r\\n}\\r\\ntype ActionType = {\\r\\n  type: string\\r\\n  value?: File\\r\\n}\\r\\n\\r\\nconst DEFAULT_VALIDATOR: ValidatorType = input => {\\r\\n  if (typeof input !== \'object\') return { error: true, message: \'Invalid file\' }\\r\\n  if (!(\'size\' in input) || input.size > 500000) return { error: true, message: \'File too big (max 500kb)\' }\\r\\n  return { error: false, message: \'\' }\\r\\n}\\r\\nconst SET: string = \'set\'\\r\\nconst CLEAR: string = \'clear\'\\r\\n\\r\\nconst setInitialState: InitializerType = (input = undefined, validator = DEFAULT_VALIDATOR) => {\\r\\n  const { error, message } = input ? validator(input) : { error: false, message: \'\' }\\r\\n  return {\\r\\n    value: error ? undefined : input,\\r\\n    error,\\r\\n    message,\\r\\n    disabled: !!error || !input\\r\\n  }\\r\\n}\\r\\n\\r\\nconst useImageState: ReducerType = (initial = undefined, validator = DEFAULT_VALIDATOR) => {\\r\\n  const reducer = (state: StateType, action: ActionType): StateType => {\\r\\n    switch (action.type) {\\r\\n      case SET:\\r\\n        const { error, message } = action.value ? validator(action.value) : { error: false, message: \'\' }\\r\\n        return {\\r\\n          value: error ? undefined : action.value,\\r\\n          error,\\r\\n          message,\\r\\n          disabled: !!error || !action.value\\r\\n        }\\r\\n      case CLEAR:\\r\\n        return {\\r\\n          value: undefined,\\r\\n          error: false,\\r\\n          message: \'\',\\r\\n          disabled: true\\r\\n        }\\r\\n      default:\\r\\n        return state\\r\\n    }\\r\\n  }\\r\\n  const [state, dispatch] = useReducer(reducer, setInitialState(initial, validator))\\r\\n  const set = (input: File): void => dispatch({ type: SET, value: input })\\r\\n  const clear = (): void => dispatch({ type: CLEAR })\\r\\n  return { ...state, clear, set }\\r\\n}\\r\\n\\r\\nexport default useImageState\\r\\n```\\r\\n\\r\\n**Usage example**\\r\\n```javascript\\r\\nexport const SomeComponent = props => {\\r\\n  const image = useImageState(props.initialImage)\\r\\n  ...\\r\\n}\\r\\n```\\r\\n\\r\\n**What happens**\\r\\nWhen props change and initialImage is different, the custom useReducer is invoked twice:\\r\\n- first with `undefined` as initialImage and returns `state.value = undefined` as expected\\r\\n- second with `object` (proper File type) including all data needed but it still returns `state.value = undefined`. The `setInitialState` from the code above returns valid state with all the data but on this line => ` const [state, dispatch] = useReducer(reducer, setInitialState(initial, validator))` the state is still `{value:undefined, ...}`\\r\\n\\r\\n**Expected behaviour**\\r\\nI want the reducer to change its initial state properly when parent\'s props change\\r\\n\\r\\n**My temporary solution**\\r\\nIn the `SomeComponent` i introduced `useEffect` with code: \\r\\n```javascript\\r\\nuseEffect(() => {\\r\\n    if (props.initialImage) image.set(props.initialImage)\\r\\n  }, [props.initialImage])\\r\\n```\\r\\nand it changed the state but the question is: \\r\\nShould i do it like that or should `useReducer` change its state when the initial value changes ","number":15948,"user":{"login":"AWielguszewski"},"state":"closed","created_at":"2019-06-21T09:23:12Z"},{"id":459099166,"title":"[Fiber] Clear down dependencies during detachFiber","body":"We should `null` out the `dependencies` property on fiber objects during `detachFiber` so we don\'t retain as much memory.","number":15947,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-21T09:19:09Z"},{"id":459013413,"title":"Expire rendering the tail of SuspenseList after a timeout","body":"This is the first Suspense feature that isn\'t actually dependent on IO.\\r\\n\\r\\nThe thinking here is that it\'s normal for a SuspenseList to show loading states, and it\'ll be designed to handle it one at a time.\\r\\n\\r\\nHowever, sometimes there are lists with really big items that take a long time to CPU render. Since data can become available as we do that, it is likely that we have all the data and become CPU bound.\\r\\n\\r\\nIn that case, the list would naively just render until the end and then display all items at once. I think that\'s actually what you want for fast lists. However, for slow ones (like News Feed), you\'re better off showing a few rows at a time.\\r\\n\\r\\nIt\'s not necessarily one at a time because if you can do many in a short period of time and fit them all on the screen, then it\'s better to do them all at once than pop them in one at a time very quickly.\\r\\n\\r\\nTherefore, I use a heuristic of trying to render as many rows as I can in 500ms before giving up. I originally thought of making it configurable or having a special revealOrder mode for this but I have sense that this is not something people should have to think about too much and there are other possible heuristics we can add here later (such as if it will be below the fold or not). It seems like this would mostly just carry over to most cases.\\r\\n\\r\\nThis timer starts before the first row of the tail and we only check it after. This ensures that we always make a little progress each attempt. An alternative approach could be to start the time before doing the head of the list but we don\'t want that being slow prevent us from making further progress.\\r\\n\\r\\nCurrently, I disable this optimization at Never priority because there\'s nothing intermediate that becomes visible anyway.\\r\\n","number":15946,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-06-21T05:20:56Z"},{"id":459013314,"title":"how to find out where inline style come from","body":"**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n**What is the current behavior?**\\r\\n\\r\\nhow to find out where inline style come from\\r\\n\\r\\ninit a create react app project, or check out this demo repo `https://github.com/craigcosmo/my-app1.git`\\r\\n\\r\\ncreate a simple component \\r\\n```js\\r\\n// body component\\r\\nimport React from \'react\';\\r\\n\\r\\nconst css ={\\r\\n\\tbar :{\\r\\n\\t\\tbackgroundColor:\'red\',\\r\\n\\t}\\r\\n}\\r\\nfunction App() {\\r\\n\\treturn (\\r\\n\\t\\t<div style={css.bar}>\\r\\n\\t\\t\\tss\\r\\n\\t\\t</div>\\r\\n\\t);\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n\\r\\n```\\r\\nrun the app, inspect the style in dev tool. you see some thing like his\\r\\n\\r\\n<img width=\\"1394\\" alt=\\"Screen_Shot_2019-06-22_at_2_10_53_AM\\" src=\\"https://user-images.githubusercontent.com/538657/59946070-a8867c00-9493-11e9-9d75-c6f894ec203d.png\\">\\r\\n\\r\\n\\r\\nThere should be an indicator where that style come from, so we can debug it if it was written by some one else\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThere should  be an indicator show which file/component where the style come from\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nreact 16.8.6\\r\\nSystem:\\r\\n    OS: macOS 10.14.5\\r\\n    CPU: (12) x64 Intel(R) Xeon(R) CPU E5-1650 v2 @ 3.50GHz\\r\\n  Binaries:\\r\\n    Node: 10.15.3 - /usr/local/bin/node\\r\\n    Yarn: 1.17.0 - /usr/local/bin/yarn\\r\\n    npm: 6.4.1 - /usr/local/bin/npm\\r\\n  Browsers:\\r\\n    Chrome: 74.0.3729.169\\r\\n    Firefox: 67.0.2\\r\\n    Safari: 12.1.1\\r\\n","number":15945,"user":{"login":"craigcosmo"},"state":"closed","created_at":"2019-06-21T05:20:29Z"},{"id":458981714,"title":"Lazily initialize dependencies object","body":"Most fibers do not have events or context, so we save memory lazily initializing this container node.\\r\\n\\r\\nFollow-up from #15927","number":15944,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-06-21T02:48:06Z"},{"id":458960044,"title":"[Flare] Move createEvent back to React object","body":"Internally, we ran into issues with exporting `createEvent` on `ReactDOM`. Moving this back to `React` fixes the issue. This is because the `ReactDOM` module has side-effects that occur upon initialization of the module, which breaks in cases such as server-side rendering.\\r\\n\\r\\nLately, given the `useEvent` hook, it might make more sense for us to keep `createEvent` on the `React` object. In the RN integration PR, I found better ways to ensure Flow type safety whilst doing so, so it might be worth while looking at how we can incorporate a polymorphic `createEvent` on the `React` object, where the `responder` field might relate to different responders depending on the platform.\\r\\n\\r\\nThe event responders exported should always be the same shape between platforms anyway, the only thing that differs is the props they receive \u2013 so this should be safe to do.\\r\\n\\r\\n@sebmarkbage I\'d really like it if you could chime in on this one too :)","number":15943,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-21T01:15:21Z"},{"id":458917884,"title":"[Flare] focus state not updated when moving to another Focus target with node.focus()","body":"@trueadm working with `Focus` alongside `@reach/combobox` I encountered what looks like a bug related to programmatically calling `node.focus()` in an effect after a state update from `onFocusVisibleChange` (edit: and `onFocusChange`), where the other `Focus` target that was blurred due to the `focus()` call doesn\'t call register that it\'s been blurred.\\r\\n\\r\\nThat\'s a mouth-full, so here\'s a sample that repro\'s it for me:\\r\\n\\r\\n```jsx\\r\\n// Simple wrapper around <input> that styles the element on focus\\r\\nfunction Input() {\\r\\n  const [isFocused, setFocused] = React.useState(false);\\r\\n  const backgroundColor = isFocused ? \'red\' : \'white\';\\r\\n  const inputRef = React.useRef();\\r\\n  // This unconditionally steals focus after every update, which isn\'t very likely, but it\'s\\r\\n  // possible components like @reach/combobox will attempt to do this conditionally\\r\\n  React.useEffect(() => {\\r\\n    inputRef.current.focus();\\r\\n  })\\r\\n  return (\\r\\n    <Focus\\r\\n    onFocusVisibleChange={setFocused}>\\r\\n      <input ref={inputRef} style={{backgroundColor}} placeholder=\\"Input\\"/>\\r\\n    </Focus>\\r\\n  )\\r\\n}\\r\\n\\r\\n// Simple wrapper around <a> that styles the element on focus\\r\\nfunction Link() {\\r\\nconst [isFocused, setFocused] = React.useState(false);\\r\\n  const color = isFocused ? \'red\' : \'black\';\\r\\n  return (\\r\\n    <Focus onFocusVisibleChange={setFocused}>\\r\\n      <a href=\\"#\\" style={{color}}>Link!</a>\\r\\n    </Focus>\\r\\n  )\\r\\n}\\r\\n\\r\\nfunction Application() {\\r\\n  return (\\r\\n    <div>\\r\\n      <Input />\\r\\n      <Link />\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\n## How to Reproduce\\r\\n\\r\\nRunning this example with a build from `master` (deployed here http://react-events-focus-effect-bug.surge.sh/)\\r\\n\\r\\n1. Open the page and focus the `input` by tabbing to it if it\'s not already focused\\r\\n2. Attempt to focus the link by tabbing again\\r\\n\\r\\n## What Happens?\\r\\n\\r\\nThe link will register as focused (coloring it red) but that state gets stuck once the input is focused again.\\r\\n\\r\\n## What Should Happen?\\r\\n\\r\\nOnce the input gets focused again the `Focus` target in `Link` should call `onFocusVisibleChange` with `false` so the focus state gets reset.","number":15942,"user":{"login":"aweary"},"state":"closed","created_at":"2019-06-20T22:39:17Z"},{"id":458766862,"title":"[Fresh] Make global names more obscure","body":"Just a find-and-replace. The goal is to more surely avoid clashes.","number":15941,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-20T16:54:12Z"},{"id":458712244,"title":"[Fresh] Don\'t consider require-like calls to be likely HOCs","body":"I tried running Fresh transform on FB5 to verify it doesn\'t introduce semantic differences. There is a case where that happens due to inline requires.\\r\\n\\r\\nWe currently consider calls like `const Foo = bar()` to be likely component factory calls when `Foo` is used in JSX. E.g. it could be `const Foo = createFluxContainer()`. So we register those with Fresh runtime.\\r\\n\\r\\nHowever, in CommonJS those might be *imports*. `const Foo = require(\'Foo\')`. In that case registering them is a bad idea. Both because it\'s redundant (their own module will register them first anyway), and because this triggers inline requires early. We don\'t want to trigger inline requires early because that can introduce module cycles in our environment.\\r\\n\\r\\nAs a solution, I\'m making the heuristic stricter. The dynamic `import()` or function that start with `require` are no longer considered likely component factories, and their result won\'t be registered even if it\'s used in JSX. We\'ll also completely bail out for more complex expressions (e.g. ternaries). We will, however, explicitly whitelist template literals because they\'re used for things like Styled Components, e.g.\\r\\n\\r\\n```js\\r\\nconst Foo = styled.div`...`\\r\\n```\\r\\n\\r\\nSee snapshots.","number":15940,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-20T15:03:31Z"},{"id":458656793,"title":"[Fresh] Throw in prod and change annotation","body":"1. Babel transform now refuses to run in any environment other than `development`. This is to detect misconfiguration early.\\r\\n2. The runtime now throws at initialization if it\'s included in a production mode bundle. This should never happen and usually points at misconfiguration. I\'ll verify this doesn\'t happen in RN.\\r\\n3. Changes `@hot reset` annotation to `@refresh reset` to match overall naming.","number":15939,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-20T13:24:47Z"},{"id":458637931,"title":"[Flare] Fix keyboard keyup regression","body":"This PR addresses a keyboard bug that was a recent regression found in https://github.com/facebook/react/issues/15930. The problem was that there was a false assumption made that `click` occurred after `keyup`, it\'s actually the other way around. I\'ve also updated the unit test that tracks this logic and ensured it matched the browser behaviour correctly. @aweary This should work for you now, let me know if you have any other issues!","number":15938,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-20T12:48:12Z"},{"id":458617884,"title":"[act] reset scope depth on synchronous errors","body":"When the callback passed to `act()` throws an error, we weren\'t running onDone that would unset the scope depth (and check for interleaving). This PR fixes that miss, and expands the tests a bit for error propagation. \\r\\n","number":15937,"user":{"login":"threepointone"},"state":"closed","created_at":"2019-06-20T12:06:07Z"},{"id":458612524,"title":"[Flare] Fix Press retention state regression","body":"This PR fixes a regression where the retention region wasn\'t getting re-activated correctly. It was a recent regression that was a simple fix in the end.","number":15936,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-20T11:54:26Z"},{"id":458596854,"title":"fixed small error in errorcodes","body":"There is also an error in line 257. \\r\\n\\r\\n> \\"256\\": \\"Expected ReactFiberErrorDialog.showErrorDialog to _existbe_ a function.\\",\\r\\n\\r\\nWhat should it be? _to exist_ or _to be a function_? And when *_to be a function_* then it will be a duplicate with line 321.\\r\\n\\r\\n> \\"320\\": \\"Expected ReactFiberErrorDialog.showErrorDialog to be a function.\\",\\r\\n\\r\\nAdditionally Errorcode *223* is missing. After *222* follows *224*.\\r\\n\\r\\n>  \\"222\\": \\"View config not found for name %s\\",\\r\\n  \\"224\\": \\"Can\'t read from currently-mounting component. This error is likely caused by a bug in React. Please file an issue.\\",\\r\\n","number":15935,"user":{"login":"0xflotus"},"state":"closed","created_at":"2019-06-20T11:18:56Z"},{"id":458551456,"title":"Update README","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":15934,"user":{"login":"micherryng"},"state":"closed","created_at":"2019-06-20T09:44:14Z"},{"id":458341501,"title":"[bug] Get useState always initial","body":"```jsx\\r\\nimport React, { useState, useEffect } from \'react\';\\r\\n\\r\\nconst Demo = function () {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  function init() {\\r\\n    setCount(999);\\r\\n    query();\\r\\n  }\\r\\n\\r\\n  function query() {\\r\\n    console.log(count);   // Why 0 \uff1f Should be = 999\\r\\n  }\\r\\n\\r\\n  useEffect(() => {\\r\\n    init();\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <div></div>\\r\\n  )\\r\\n};\\r\\n\\r\\n\\r\\n```","number":15933,"user":{"login":"six-666"},"state":"closed","created_at":"2019-06-20T04:40:47Z"},{"id":458300651,"title":"Some suggestions for the Docs","body":"I think there should be some **links** with the likely knowledge,ex:\\r\\nhttps://reactjs.org/docs/state-and-lifecycle.html(about  State and Lifecycle ) can get a link to\\r\\nhttps://reactjs.org/docs/react-component.html (react:react-component)\\r\\nbecause they are all about Lifecycle, and i can find what i want when i read about them faster!\\r\\n","number":15932,"user":{"login":"mvslan"},"state":"closed","created_at":"2019-06-20T02:10:40Z"},{"id":458292604,"title":"[Flare] Press: fix stale deactivation region state","body":"The responder region calculation logic wasn\'t updating the deactivation region during the lifetime of an event instance, causing incorrect behaviour when the current press ends outside the press target and if the press target has moved since the last time the first-and-only time the deactivation region was measured.\\r\\n\\r\\nNote: we previously discussed adding a warning when the press target has a height or width of `0`, however, that\'s only a special case for a general \\"issue\\" (unrelated to the issue this patch address). If the children of a press target are positioned (absolutely or relatively) outside the press target, and the target (and its children) move during a press (e.g., a \\"squish\\" transform) then the \\"pressend\\" trigger could be occurring on an element outside the responder\'s subtree. One that happens, we fallback to checking if the x/y event coordinates overlap with the union of activation/deactivation press target regions. Those regions do not account for protruding children and the \\"press\\" event might be skipped even if it appears to fall within the press retention region.","number":15931,"user":{"login":"necolas"},"state":"closed","created_at":"2019-06-20T01:28:27Z"},{"id":458266334,"title":"[Flare] onPressEnd not being called on keyup for Enter key","body":"@trueadm @necolas \\r\\n\\r\\nUsing a recent build from `master` I noticed that `onPressEnd` on the `Press` component is not being called on `keyup` when pressing with `Enter`. Here\'s an example that reproduces the issue: http://react-press-event-keyup-bug.surge.sh/. Here\'s the source for this example:\\r\\n\\r\\n```jsx\\r\\nfunction Application() {\\r\\n  const [isPressed, setPressed] = React.useState(false);\\r\\n  const onPressStart = () => {\\r\\n    setPressed(true);\\r\\n  };\\r\\n  const onPressEnd = () => {\\r\\n    setPressed(false);\\r\\n  };\\r\\n  return (\\r\\n    <Press onPressStart={onPressStart} onPressEnd={onPressEnd}>\\r\\n      <button style={{ \\r\\n        margin: 48, fontSize: 28, color: isPressed ? \\"red\\" : \\"initial\\" }}>\\r\\n        Press Me\\r\\n      </button>\\r\\n    </Press>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n**Steps to Reproduce**\\r\\n1. Focus the button via Tab\\r\\n2. Press the button by holding down Enter\\r\\n3. Un-press the button by releasing Enter\\r\\n\\r\\n`onPressEnd` is never called so the pressed state persists. If you follow the same steps using the Space key or the mouse you\'ll see it works as expected. The [unit test for this](https://github.com/facebook/react/blob/f4e1ac8cafb75dfab129b95f0eb39591579f3d03/packages/react-events/src/__tests__/Press-test.internal.js#L336) is passing for me with this build which is kinda weird.\\r\\n","number":15930,"user":{"login":"aweary"},"state":"closed","created_at":"2019-06-19T23:18:33Z"},{"id":458182484,"title":"[Flare] Rename createEventComponent -> createEvent","body":"This simply renames the `ReactDOM.unstable_createEventComponent` to `ReactDOM.unstable_createEvent`. Which unifies it with the hook version of using events in the new event system.","number":15929,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-19T19:14:46Z"},{"id":458096833,"title":"[Fresh] Track mounted roots via DevTools Hook","body":"The previous Fresh runtime API forced you to pass a root handle. However, that presumes that the module runtime (such as Metro) somehow is aware of all roots on the page. This isn\'t the case.\\r\\n\\r\\nWe could have React keep track of mounted roots. However, that might not be necessary. Here\'s why.\\r\\n\\r\\nWe still need some way to let the module runtime schedule refreshes. Currently this is done via DevTools Global Hook injection. DevTools (or module runtime) can set up the Global Hook. The renderer injects `scheduleHotUpdate` in it. As a result, the module runtime can schedule refreshes.\\r\\n\\r\\n**Since we already rely on the DevTools Hook for communication, we might as well use the fact that this Hook gives us information about all roots.** Indeed, that\'s how DevTools itself works.\\r\\n\\r\\n## The Goal\\r\\n\\r\\nThis PR lets the module runtime do \\r\\n\\r\\n```js\\r\\nReactRefreshRuntime.injectIntoGlobalHook(window);\\r\\n```\\r\\n\\r\\nand then\\r\\n\\r\\n```js\\r\\nReactRefreshRuntime.performReactRefresh(update);\\r\\n```\\r\\n\\r\\nwithout worrying about how to track mounted roots.\\r\\n\\r\\n## Implementation\\r\\n\\r\\n#### Adding `injectIntoGlobalHook` to Refresh Runtime\\r\\n\\r\\n  - This either sets up a shimmed tiny version of the Global Hook (for web users without extension).\\r\\n  - Or, if the Global Hook is already set up (for web users with extension, or for RN which always sets it up), monkeypatches it.\\r\\n\\r\\nThe goal in both cases is to grab the scheduling functionality and to track roots in the Runtime. This lets the module system (e.g. Metro) simply call `ReactRefreshRuntime.performReactRefresh()` and not worry about how this connects to React.\\r\\n\\r\\nThe only constraint is that `ReactRefreshRuntime.injectIntoGlobalHook()` needs to run before the renderer code. The module system can guarantee it because it owns the execution order.\\r\\n\\r\\nI have added regression tests for tracking roots.\\r\\n\\r\\n#### Tweaking the API exposed to DevTools\\r\\n\\r\\nPreviously, we had `scheduleHotUpdate(root, update)` which included the resolution function. However, I realized this doesn\'t really work if you don\'t have a `root`. For example, if you hot update a component, but no roots are mounted yet, you still want its *next* render to use the updated version. So  you _need_ to inject the resolution function anyway.\\r\\n\\r\\nI changed the API to:\\r\\n\\r\\n* `setRefreshHandler(handler)` \u2014 This sets up the family resolution function. It is called on first edit even if there are no roots.\\r\\n* `scheduleRefresh(root, update)` \u2014 renamed from `scheduleHotReload`\\r\\n* `findHostInstancesForRefresh` \u2014 renamed from `findHostInstancesForHotReload`\\r\\n\\r\\n## Follow-ups\\r\\n\\r\\nThere\'s a few things I plan to change here later. One is to use host config for getting client rect. But this isn\'t critical to get in now, since I don\'t plan to implement this in the first Metro integration. The second one is to add a few convenience helpers to move more React-related logic out of the module runtime (e.g. Metro). I might push that a bit later but it doesn\'t block this PR.","number":15928,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-19T15:58:35Z"},{"id":458089958,"title":"[Flare] Add useEvent hook implementation","body":"This PR adds a new primitive hook to React called `useEvent`. For now it\'s behind the React Flare flag and is labelled `unstabled_useEvent` on the React object. This implementation might have bugs in, as it\'s not been hooked up and tested with the various event responder modules, like Press, Hover etc. This isn\'t intended to be a bug-free PR, more it\'s an initial implementation that should aim to get the wiring right between fibers and the hook.\\r\\n\\r\\nThe principal way of using this, is to leverage existing event components within a component. For example:\\r\\n\\r\\n```jsx\\r\\nimport React, {unstable_useEvent} from \'react\';\\r\\nimport Press from \'react-events/press\';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  unstable_useEvent(Press, {onPress: handlePressFromHook});\\r\\n\\r\\n  function handlePressFromHook() {\\r\\n    console.log(\'hook\');\\r\\n  } \\r\\n  function handlePressFromEventComponent() {\\r\\n    console.log(\'event component\');\\r\\n  } \\r\\n  \\r\\n  return (\\r\\n    <Press onPress={handlePressFromEventComponent}>\\r\\n      <div>Press me</div>\\r\\n    </Press>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nAny event components in the **same** branch of an event component (not above the event component), will fire for the same type of event component. If there are no event components used in the branch of the function component that has the hooks, then the hook props will never fire. So this won\'t work:\\r\\n\\r\\n```jsx\\r\\nfunction MyComponent() {\\r\\n  unstable_useEvent(Press, {onPress: handlePressFromHook});\\r\\n  \\r\\n  // You need to use a <Press> somewhere in this branch\\r\\n  return (\\r\\n    <div>Press me</div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nWhat is powerful about the hook form of event components, is that they can track events occurring in their tree without needing to worry about propagation rules. All events will propagate to the hook form of these events, which is different to the event component form, where events stop propagation to the same type of event components.\\r\\n\\r\\nEvent responders can opt out of support hooks, for example `FocusScope` will not support hook form right now, so the responder module has `allowEventHooks` set to `false`.\\r\\n\\r\\nThe hook forms thus allow for control of events on children, where their implementation is not fully known or controller by the parent component. The only exception to this, is if an event responder takes global ownership, then no other events components or hooks will fire \u2013 this is intentional.\\r\\n\\r\\nFurthermore, `displayName` is now no longer on event components and has instead been moved to the responders. This is to allow for hooks to have display names, via the responder.","number":15927,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-19T15:45:03Z"},{"id":457967021,"title":"[Flare] Add RN build step for ReactTypes","body":"When we build for React Native, we have a packaging task that copies `ReactTypes` to the shims directory. The issue is that, because event responders are renderer specific, they import from the `react-reconciler`. When this is used in RN, there is no `react-reconciler` package, so this results in a Flow type error. To address this, we modify the `import` line at build time and change it to the RN specific renderer so that this doesn\'t cause a Flow error.","number":15926,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-19T11:49:44Z"},{"id":457960679,"title":"ReactDOM.render ignores RGBA border color in test environment","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nIn test environment `ReactDOM.render` skips border declaration if RGBA color was used in it, see test sample below. In e.g. `backgroundColor` RGBA works as expected, also border is OK in browser.\\r\\n\\r\\nThe issue also affects Enzyme\'s `.html()` behavior since it rely on `outerHTML` of an element.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nSimple test was made in standard react-app created using create-react-app utility:\\r\\n\\r\\n```\\r\\nit(\'test border color\', () => {\\r\\n    const domNode = document.createElement(\'div\');\\r\\n    ReactDOM.render(<div style={{border: \'1px solid rgba(0, 0, 125, 1)\', backgroundColor: \'rgba(0, 0, 125, 1)\'}}>Test</div>, domNode);\\r\\n    expect(domNode.innerHTML).toEqual(\'<div style=\\"border: 1px solid rgb(0, 0, 125); background-color: rgb(0, 0, 125);\\">Test</div>\');\\r\\n});\\r\\n```\\r\\n\\r\\nTest fails because actual style attribute contains no border declaration:\\r\\n\\r\\n```\\r\\nDifference:\\r\\n\\r\\n- Expected\\r\\n+ Received\\r\\n\\r\\n- <div style=\\"border: 1px solid rgb(0, 0, 125); background-color: rgb(0, 0, 125);\\">Test</div>\\r\\n+ <div style=\\"background-color: rgb(0, 0, 125);\\">Test</div>\\r\\n```\\r\\n\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nTest above should pass.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nreact-dom@16.8.6, jsdom@11.12.0","number":15925,"user":{"login":"yuliya-ivaniukovich"},"state":"closed","created_at":"2019-06-19T11:35:05Z"},{"id":457939232,"title":"[react-hooks/exhaustive-deps] False positive for nested dependencies in useEffect hook","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThe following code\\r\\n\\r\\n```javascript\\r\\nconst callback = useCallback(() => {\\r\\n    console.log(\\"CALLBACK\\");\\r\\n}, []);\\r\\n\\r\\nconst wrapper = { callback };\\r\\n\\r\\nuseEffect(() => {\\r\\n    wrapper.callback();\\r\\n}, [wrapper.callback]);\\r\\n```\\r\\n\\r\\ngives the following `react-hooks/exhaustive-deps` warning\\r\\n\\r\\n> React Hook useEffect has a missing dependency: \'wrapper\'. Either include it or remove the dependency array\\r\\n\\r\\nIf the `useEffect` is replaced by the following\\r\\n\\r\\n```javascript\\r\\nuseEffect(() => {\\r\\n    const callbackReference = wrapper.callback;\\r\\n    callbackReference();\\r\\n}, [wrapper.callback]);\\r\\n```\\r\\n\\r\\nthere are no warnings.\\r\\n\\r\\n**What is the expected behavior?**\\r\\nThere should be no warnings in either case.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact: 16.8.4\\r\\neslint-plugin-react-hooks: 1.6.0\\r\\n","number":15924,"user":{"login":"johnloven"},"state":"closed","created_at":"2019-06-19T10:44:35Z"},{"id":457931166,"title":"Remote hard code like hasSymbol ? Symbol.for(\'react.element\') : 0xeac7","body":"**Before submitting a pull request,** please make sure the following is done:\\r\\n\\r\\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\\r\\n2. Run `yarn` in the repository root.\\r\\n3. If you\'ve fixed a bug or added code that should be tested, add tests!\\r\\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\\r\\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\\r\\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \\"Inspect\\".\\r\\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\\r\\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\\r\\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\\r\\n10. If you haven\'t already, complete the CLA.\\r\\n\\r\\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\\r\\n","number":15923,"user":{"login":"narutowyh"},"state":"closed","created_at":"2019-06-19T10:25:39Z"},{"id":457921366,"title":"Remove mention of Prepack","body":"We aren\'t shipping Prepack anytime soon. FB-only: see D15585102.\\r\\n","number":15922,"user":{"login":"cpojer"},"state":"closed","created_at":"2019-06-19T10:04:01Z"},{"id":457920346,"title":"Suspense unmounts children and fallback even they have the same type and key","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\n\\r\\nI think it is a bug.\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\nWhen a `Suspense` is given `fallback` and `children` with same type and key, suspense still unmount and remount them when its state changes between pending and resolved.\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\nhttps://codesandbox.io/s/sleepy-cannon-47291\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nIn console, it should be only 1 \\"system suspense mounted\\" message, suspense should update the `SystemContent` component instead of remount it.\\r\\n\\r\\nWhen use error boundary to \\"simulate\\" a suspense, we can make sure the `CustomContent` is only mounted once, we\'d like the native suspense to behave the same.\\r\\n\\r\\nAs a real world case, we rely on the content component to live across promise\'s life in order to \\"keep previous data visible when loading new data\\", when content is unmounted on pending, it loses a `useRef` stored previous data snapshot.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\n16.8.6","number":15921,"user":{"login":"otakustay"},"state":"closed","created_at":"2019-06-19T10:01:47Z"},{"id":457863905,"title":"Minified React error #168;","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nbug\\r\\n\\r\\n**What is the current behavior?**\\r\\nThere are a lot of error logs about \\"Minified React error #168; \\"\\r\\nI saw the link about [Minified React error #168; ](https://reactjs.org/docs/error-decoder.html/?invariant=168) , and it said \\r\\n> This error is likely caused by a bug in React. Please file an issue.\\r\\n\\r\\nso should i ignore them or react already fixed it so i should update the version?\\r\\n\\r\\nThanks for your time.\\r\\n\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n","number":15920,"user":{"login":"JiayiLi"},"state":"closed","created_at":"2019-06-19T08:01:35Z"},{"id":457859694,"title":"Uncaught Invariant Violation: Unable to find node on an unmounted component.","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\n\\r\\n| technologies |\\r\\n|-----|\\r\\n|react router dom|\\r\\n|material-ui |\\r\\n|hooks and functional components|\\r\\n|context API and providers |\\r\\n\\r\\nwhen i want to navigate between routes , i get this error :\\r\\n\\r\\n```\\r\\nat invariant (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:57:19)\\r\\n    at findCurrentFiberUsingSlowPath (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:4395:31)\\r\\n    at findCurrentHostFiber (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:4407:27)\\r\\n    at findHostInstanceWithWarning (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:21472:25)\\r\\n    at Object.findDOMNode (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:22024:18)\\r\\n    at ref (webpack-internal:///./node_modules/@material-ui/core/Slide/Slide.js:255:52)\\r\\n    at commitAttachRef (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:18104:11)\\r\\n    at commitAllLifeCycles (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:19480:11)\\r\\n    at HTMLUnknownElement.callCallback (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:147:18)\\r\\n    at Object.invokeGuardedCallbackDev (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:196:20)\\r\\n    at invokeGuardedCallback (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:250:35)\\r\\n    at commitRoot (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:19699:11)\\r\\n    at eval (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:21247:9)\\r\\n    at Object.unstable_runWithPriority (webpack-internal:///./node_modules/scheduler/cjs/scheduler.development.js:255:16)\\r\\n    at completeRoot (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:21246:17)\\r\\n    at performWorkOnRoot (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:21169:13)\\r\\n    at performWork (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:21074:11)\\r\\n    at performSyncWork (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:21048:7)\\r\\n    at interactiveUpdates$1 (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:21333:11)\\r\\n    at interactiveUpdates (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:2268:14)\\r\\n    at dispatchInteractiveEvent (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:5086:7)\\r\\n```\\r\\n\\r\\nafter this error , i get this error block ( but it is different , because some times i click on Menu component and some times i am in a Drawer ) .\\r\\n\\r\\n```\\r\\nThe above error occurred in the <Transition> component:\\r\\n    in Transition (created by Slide)\\r\\n    in EventListener (created by Slide)\\r\\n    in Slide (created by WithTheme(Slide))\\r\\n    in WithTheme(Slide) (created by Drawer)\\r\\n    in div (created by Drawer)\\r\\n    in Drawer (created by WithStyles(Drawer))\\r\\n    in WithStyles(Drawer) (at AppBar/index.js:524)\\r\\n    in div (at AppBar/index.js:457)\\r\\n    in Index (created by WithStyles(Index))\\r\\n    in WithStyles(Index) (at App.js:98)\\r\\n    in BalanceStateProvider (at App.js:96)\\r\\n    in LoginStateProvider (at App.js:95)\\r\\n    in DrawerStateProvider (at App.js:94)\\r\\n    in Suspense (at App.js:93)\\r\\n    in MuiThemeProviderOld (at App.js:92)\\r\\n    in Router (at App.js:91)\\r\\n    in App (at src/index.js:31)\\r\\n    in StateProvider (at src/index.js:30)\\r\\n    in Router (created by BrowserRouter)\\r\\n    in BrowserRouter (at src/index.js:29)\\r\\n```\\r\\n\\r\\nwhen i write the code in sandbox , everything works fine , but in my project , is not . \\r\\neven i dont know where i have to check for this error , because i have no `findDomNode` function . \\r\\n\\r\\n##### what i did for this \\r\\n\\r\\n- [x] remove all contexts\\r\\n- [x] remove material-ui provider\\r\\n- [x] remove Suspense and lazy \\r\\n\\r\\nbut nothing change ","number":15919,"user":{"login":"nimahkh"},"state":"closed","created_at":"2019-06-19T07:51:03Z"},{"id":457773236,"title":"Add forwards and backwards options to SuspenseList","body":"Builds on top of #15902\\r\\n\\r\\nI\'m not super happy with this implementation yet but it seems to work. I also need more tests.\\r\\n\\r\\nSo putting it out there as an early review.","number":15918,"user":{"login":"sebmarkbage"},"state":"closed","created_at":"2019-06-19T02:15:07Z"},{"id":457726285,"title":"[Flare] Relable Press preventDefault + stopPropagation props","body":"This PR does the follow:\\r\\n\\r\\n- Renames`disableContextMenu` to `disableNativeContextMenu` and no longer prevents the `onContextMenu` event from firing if the prop is `false`.\\r\\n- Renames `preventDefault` to `disableNativePropagation`\\r\\n- Renames `stopPropagation` to `disableNativePropagation`\\r\\n\\r\\nThe idea being, is that using a slightly different name from the native DOM methods makes it clear that these work in slightly different ways that fit this new event system\'s needs, rather than needs of the user writing imperative DOM event handling.","number":15917,"user":{"login":"trueadm"},"state":"closed","created_at":"2019-06-18T22:36:53Z"},{"id":457723497,"title":"[Flare] Press events include defaultPrevented","body":"Also changes the behaviour of \'disableContextMenu\' so that \'onContextMenu\' is still called.","number":15916,"user":{"login":"necolas"},"state":"closed","created_at":"2019-06-18T22:26:16Z"},{"id":457692772,"title":"bug* element.scrollIntoView()","body":"\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nBug\\r\\n\\r\\n**What is the current behavior?**\\r\\nI am attempting to do \\r\\n`formHandlerRef =  React.createRef()`\\r\\nthen attach it to an MDB Col as a ref\\r\\n\\r\\npass this down as props to another component\\r\\n`scrollToFormHandler = () => {\\r\\n   const formHandler = this.formHandlerRef.current;\\r\\n   formHandler.scrollIntoView({ behavior: \'smooth\', block: \'start\', inline: \'start\' });\\r\\n  };`\\r\\n\\r\\nand call the function from a child component.\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\nThe intended behavior is when the props function is fired off in the child component (after the formHandler component has been rendered and is on another part of the screen) to scroll into view which I have achieved with the following code.\\r\\n\\r\\n`scrollToFormHandler = () => {\\r\\n    // eslint-disable-next-line react/no-find-dom-node\\r\\n    const formHandler = ReactDOM.findDOMNode(this.formHandlerRef.current);\\r\\n    formHandler.scrollIntoView({ behavior: \'smooth\', block: \'start\', inline: \'start\' });\\r\\n  };`\\r\\n\\r\\nI have looked online and tried finding any other situations where this was a problem or something I may be missing but have found nothing yet so I am coming here. This may be a problem on my end but just wanted to bring it up in case.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n\\r\\nI am using `create-react-app`\\r\\n`    \\"prop-types\\": \\"^15.7.2\\",\\r\\n    \\"react\\": \\"^16.8.6\\",\\r\\n    \\"react-dom\\": \\"^16.8.6\\",\\r\\n    \\"react-router-dom\\": \\"^4.3.1\\",\\r\\n    \\"react-scripts\\": \\"^3.0.1\\"\\r\\n `\\r\\nThank you!","number":15915,"user":{"login":"ado-astpos"},"state":"closed","created_at":"2019-06-18T20:57:58Z"},{"id":457490955,"title":"pass an object as a prop ","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nrequest a feature\\r\\n**What is the current behavior?**\\r\\nyou cannot pass an object as a prop in react, at least i don\'t know how\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\n16.8.6 and chrome","number":15914,"user":{"login":"roggc"},"state":"closed","created_at":"2019-06-18T13:43:23Z"},{"id":457438719,"title":"the chrome version cause -- Invalid hook call. Hooks can only be called inside of the body of a function component.","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nno\\r\\n**What is the current behavior?**\\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\n\\r\\n**What is the expected behavior?**\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nreact@16.8.6,  chrome: Version  75.0.3770.90(Official Build)  (64 -bit),  win10\\r\\n\\r\\n\\r\\nI found that in the chrome: <b>Version  75.0.3770.90(Official Build)  (64 -bit)</b>, react hook app will throw error <b>when you open the dev tool</b> -- `Uncaught Invariant Violation: Invalid hook call. Hooks can only be called inside of the body of a function component.`\\r\\n\\r\\nhowever, <b>with chrome canary and other version chrome</b>, it work well !!\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/3963291/59680014-ec168700-9202-11e9-8b94-e77e2d706d33.png)\\r\\n","number":15913,"user":{"login":"wind4gis"},"state":"closed","created_at":"2019-06-18T12:00:10Z"},{"id":457396293,"title":"Insecure Randomness (Security Features, Structural)","body":"Hello Team,\\r\\n\\r\\nWe use **React 0.14.7** in one of our projects and we recently did a security analysis of our product for an important change. As part of the analysis ( particularly Fortify scan ), we came across an issue which is related to React framework itself. The reported issue is **Insecure Randomness** - _Standard pseudorandom number generators cannot withstand cryptographic attacks._ which has been raised because of the usage of **Math.random()** in the framework.\\r\\n\\r\\nPasting actual content from the Fortify report.\\r\\n\\r\\n### Abstract\\r\\nStandard pseudorandom number generators cannot withstand cryptographic attacks.\\r\\n### Explanation\\r\\nInsecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context. Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic.\\r\\nStatistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as\\r\\nbeing cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. Example: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\\r\\nfunction genReceiptURL (baseURL){\\r\\nvar randNum = Math.random();\\r\\nvar receiptURL = baseURL + randNum + \\".html\\";\\r\\nreturn receiptURL;\\r\\n}\\r\\nThis code uses the Math.random() function to generate \\"unique\\" identifiers for the receipt pages it generates. Since Math.random() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\\r\\n### Recommendation\\r\\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.) In JavaScript, the typical recommendation is to use the indow.crypto.random() function in the Mozilla API. However, this method does not work in many browsers, including more recent versions of Mozilla Firefox. There is currently no crossbrowser solution for a robust cryptographic PRNG. In the meantime, consider handling any PRNG functionality outside of JavaScript.\\r\\n\\r\\nAnd our security analysis team advised us to upgrade to the latest version ( 16.x ) of React. But even the latest version of the framework has few usages of Math.random() in it.\\r\\n\\r\\nWhat should we do now? Please advise if we can live with this issue reported by Fortify scan.\\r\\n\\r\\nP.S: The Fortify Engine version used for the scan is 18.20.1071.\\r\\nAnd adding one of the issues reported in Fortify scan for reference.\\r\\n### Issue Details\\r\\n**Kingdom**: Security Features\\r\\n**Scan Engine**: SCA (Structural)\\r\\n### Sink Details\\r\\n**Sink**: FunctionPointerCall\\r\\n**Enclosing Method**: createReactRootIndex()\\r\\n**File**: /scripts/react/react-0.14.7.js:14206\\r\\n**Taint Flags**:\\r\\n14203\\r\\n14204 var ServerReactRootIndex = {\\r\\n14205 createReactRootIndex: function () {\\r\\n14206 return Math.ceil(**Math.random()** * GLOBAL_MOUNT_POINT_MAX);\\r\\n14207 }\\r\\n14208 };\\r\\n14209\\r\\n\\r\\nThanks,\\r\\nJey\\r\\n","number":15912,"user":{"login":"JeyanthinathanR"},"state":"closed","created_at":"2019-06-18T10:43:50Z"},{"id":457257125,"title":"[Scheduler] Integrated timers","body":"## Based on #15910 \\r\\n\\r\\nAdds a `delay` option to `scheduleCallback`. When specified, the task is not scheduled until after the delay has elapsed.\\r\\n\\r\\nDelayed tasks are scheduled on a timer queue maintained by Scheduler, instead of directly with the browser. The main benefit is to reduce the number of native browser timers that Scheduler\'s `message` event handler has to contend with; so, after yielding to the browser at the end of the frame, Scheduler will more quickly regain control of the main thread. Because we\'re able to flush the timer queue without yielding to browser timer events, there\'s also less task switching overhead (though in the absence of `isInputPending`, this is mostly a theoretical win since we yield every frame regardless).\\r\\n\\r\\nIf the queue of non-delayed tasks is non-empty \u2014 that is, if there is pending CPU bound work \u2014 Scheduler is able to avoid a browser timer entirely by periodically checking its own timer queue while flushing tasks (inside the `message` event handler). Once the CPU-bound work is complete, if there are still pending delayed tasks, Scheduler will schedule a single browser timer that fires once the earliest delay has elapsed.","number":15911,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-06-18T04:35:20Z"},{"id":457256827,"title":"[Scheduler] Use continuation pattern for posting host callback","body":"As I prepare to implement integrated timers, I noticed some peculiarities in the Scheduler implementation that could afford to be cleaned up.\\r\\n\\r\\nThis is a refactor and shouldn\'t affect any observable behavior (except maybe accidental bugs); mostly it removes some concepts that existed in earlier iterations of Scheduler and are no longer needed.\\r\\n\\r\\nThe main change is to how the DOM implementation schedules an additional callback before yielding to the main thread. It used to follow the same code path for scheduling task; now it has its own branch directly inside the message event handler. The special case for error handling \u2014 where we call `postMessage` immediately without waiting for rAF \u2014 has similarly been localized inside the catch block of the message event handler.\\r\\n\\r\\nIt probably helps to read the commits one at a time.","number":15910,"user":{"login":"acdlite"},"state":"closed","created_at":"2019-06-18T04:33:40Z"},{"id":457204769,"title":"[Flare] add disableContextMenu to Press","body":"Provides a way to entirely disable the native context menu.","number":15909,"user":{"login":"necolas"},"state":"closed","created_at":"2019-06-18T00:25:51Z"},{"id":457049121,"title":"Race condition between click and new eventlistener","body":"\x3c!--\\r\\n  Note: if the issue is about documentation or the website, please file it at:\\r\\n  https://github.com/reactjs/reactjs.org/issues/new\\r\\n--\x3e\\r\\n\\r\\n**Do you want to request a *feature* or report a *bug*?**\\r\\nPossible bug\\r\\n\\r\\n**What is the current behavior?**\\r\\nClicking a button adds a new Card component to a list of Cards. Each rendered Card adds an event listener (with `React.useEffect()`) to the window so that it can detect when a user \\"clicks away\\" from the card. This event listener somehow captures the click which created the Card in the first place, falsely registering as a \\"click away\\" from the new Card. \\r\\n\\r\\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn\'t have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\\r\\nI\'ll put together a JSFiddle if I find some time...\\r\\n\\r\\n**What is the expected behavior?**\\r\\nBecause the eventlistener is added as the new Card is rendered, I expect the eventlistener to only capture future clicks.\\r\\n\\r\\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\\r\\nReact 16.8.4, Chrome, Windows\\r\\n","number":15908,"user":{"login":"blaisebrennan"},"state":"closed","created_at":"2019-06-17T17:18:50Z"},{"id":456969958,"title":"[Fresh] Fall back to Map/Set if Weak equivalents are not available","body":"I\'m running into this in an older RN environment. Modern ones look fine (including the today\'s RN open source). So this is a temporary solution until everything is modern internally.\\r\\n\\r\\nWe rely on `WeakMap` and `WeakSet` to avoid holding onto previous versions of any type after a hot reload edit. So this change makes us leak some memory in old environments. I think it\'s fine because it only affects really old environments (e.g. IE) and the cost is DEV-only (and only comes into play if you actually do a hot reload).\\r\\n\\r\\nThe Flow issues are the same we\'ve ran into before. It\'s a Flow bug but I don\'t know if it\'ll get fixed.","number":15907,"user":{"login":"gaearon"},"state":"closed","created_at":"2019-06-17T14:32:05Z"},{"id":456917928,"title":"Invariant Violation: Maximum update depth exceeded. with hooks","body":"Currently in React 16.8.6, we get this error when changing the state in a affected useEffect,\\r\\n```Invariant Violation: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.```\\r\\n\\r\\nNow it can of course happen also in useEffects and it could be nice to have this message updated mention something about the \\"dangerous\\" combination of useStates and useEffects.","number":15906,"user":{"login":"larspa"},"state":"closed","created_at":"2019-06-17T12:52:23Z"},{"id":456917923,"title":"Invariant Violation: Maximum update depth exceeded. with hooks","body":"Currently in React 16.8.6, we get this error when changing the state in a affected useEffect,\\r\\n```Invariant Violation: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.```\\r\\n\\r\\nNow it can of course happen also in useEffects and it could be nice to have this message updated mention something about the \\"dangerous\\" combination of useStates and useEffects.","number":15905,"user":{"login":"larspa"},"state":"closed","created_at":"2019-06-17T12:52:22Z"}]')},24:function(e,t,n){e.exports=n(37)},29:function(e,t,n){},37:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(12),s=n.n(a),i=(n(29),n(2)),d=n(3),c=n(6),l=n(4),h=n(7),u=n(5),p=n(22),m=n.n(p),b=function(e){function t(){var e;return Object(i.a)(this,t),(e=Object(c.a)(this,Object(l.a)(t).call(this))).updateFilterInAppState=m()((function(){e.props.updateFilter(e.state.value)}),250),e.onValueChange=function(t){e.setState({value:t.target.value},e.updateFilterInAppState)},e.state={value:""},e}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return o.a.createElement("input",{className:"filter-input",type:"text",value:this.state.value,onChange:this.onValueChange,placeholder:"Enter text to filter by"})}}]),t}(o.a.Component),f={updateFilter:function(e){return{type:"UPDATE_FILTER",payload:e}}},g=Object(u.b)(null,f)(b),w=n(8),y=function(e){function t(){return Object(i.a)(this,t),Object(c.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){var e=this.props.results.length;return e?o.a.createElement("div",null,o.a.createElement("div",{className:"count-message"},e," bug(s) found"),o.a.createElement("table",null,o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null,"Line"),o.a.createElement("th",null,"Bug Number"),o.a.createElement("th",null,"Refs"),o.a.createElement("th",null,"Title"),o.a.createElement("th",null,"User"),o.a.createElement("th",null,"State"),o.a.createElement("th",null,"Body"),o.a.createElement("th",null,"Created at"))),o.a.createElement("tbody",null,this.props.results.map((function(e,t){return o.a.createElement("tr",{key:e.id},o.a.createElement("td",null,t+1),o.a.createElement("td",null,e.number),o.a.createElement("td",null,e.refCount),o.a.createElement("td",null,e.title),o.a.createElement("td",null,e.user.login," (",e.user.issuesCount,")"),o.a.createElement("td",null,e.state),o.a.createElement("td",null,e.body),o.a.createElement("td",null,new Date(e.created_at).toLocaleDateString("en-us",{year:"numeric",month:"numeric",day:"numeric"})))}))))):o.a.createElement("div",{className:"big-message"},"No bugs found")}}]),t}(o.a.Component),v=function(e){function t(){return Object(i.a)(this,t),Object(c.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return o.a.createElement(y,{results:this.props.filteredResults})}}]),t}(o.a.Component),k=Object(u.b)((function(e){var t=e.filterValue.split(" ").map((function(e){return e.trim().toLowerCase()})).filter(Boolean),n=new Map,r=!0,o=!1,a=void 0;try{for(var s,i=e.results[Symbol.iterator]();!(r=(s=i.next()).done);r=!0){var d=s.value;n.set(d.user.id,(n.get(d.user.id)||0)+1)}}catch(l){o=!0,a=l}finally{try{r||null==i.return||i.return()}finally{if(o)throw a}}var c=e.results.map((function(t){var r=0,o=!0,a=!1,s=void 0;try{for(var i,d=e.results[Symbol.iterator]();!(o=(i=d.next()).done);o=!0){var c=i.value;c.id!==t.id&&((c.body.includes("#"+t.number)||c.title.includes("#"+t.number))&&r++)}}catch(l){a=!0,s=l}finally{try{o||null==d.return||d.return()}finally{if(a)throw s}}return Object(w.a)({},t,{refCount:r,user:Object(w.a)({},t.user,{issuesCount:n.get(t.user.id)})})}));return{filteredResults:t.length?c.filter((function(e){return t.every((function(t){return e.title.toLowerCase().includes(t)||e.body.toLowerCase().includes(t)||e.number.toString().includes(t)||e.refCount.toString().includes(t)||(e.user.login+" ("+e.user.issuesCount+")").toLowerCase().includes(t)||e.state.toLowerCase().includes(t)||new Date(e.created_at).toLocaleDateString("en-us",{year:"numeric",month:"numeric",day:"numeric"}).includes(t)}))})):c}}))(v),x=n(9),T=function(e){function t(){return Object(i.a)(this,t),Object(c.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return o.a.createElement(y,{results:this.props.filteredResults})}}]),t}(o.a.Component),j=Object(x.a)([function(e){return e.results}],(function(e){var t=new Map,n=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done);n=!0){var i=a.value;t.set(i.user.id,(t.get(i.user.id)||0)+1)}}catch(d){r=!0,o=d}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return e.map((function(n){var r=0,o=!0,a=!1,s=void 0;try{for(var i,c=e[Symbol.iterator]();!(o=(i=c.next()).done);o=!0){var l=i.value;l.id!==n.id&&((l.body.includes("#"+n.number)||l.title.includes("#"+n.number))&&r++)}}catch(d){a=!0,s=d}finally{try{o||null==c.return||c.return()}finally{if(a)throw s}}return Object(w.a)({},n,{refCount:r,user:Object(w.a)({},n.user,{issuesCount:t.get(n.user.id)})})}))})),R=Object(x.a)([function(e){return e.filterValue}],(function(e){return e.split(" ").map((function(e){return e.trim().toLowerCase()})).filter(Boolean)})),I=Object(x.a)([j,R],(function(e,t){return t.length?e.filter((function(e){return t.every((function(t){return e.title.toLowerCase().includes(t)||e.body.toLowerCase().includes(t)||e.number.toString().includes(t)||e.refCount.toString().includes(t)||(e.user.login+" ("+e.user.issuesCount+")").toLowerCase().includes(t)||e.state.toLowerCase().includes(t)||new Date(e.created_at).toLocaleDateString("en-us",{year:"numeric",month:"numeric",day:"numeric"}).includes(t)}))})):e})),S=Object(x.b)({filteredResults:I}),C=Object(u.b)(S)(T),_=function(e){function t(){return Object(i.a)(this,t),Object(c.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return o.a.createElement(y,{results:this.props.filteredResults})}}]),t}(o.a.Component),D=Object(x.a)([function(e){return e.results},function(e){return e}],(function(e){var t=new Map,n=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done);n=!0){var i=a.value;t.set(i.user.id,(t.get(i.user.id)||0)+1)}}catch(d){r=!0,o=d}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return e.map((function(n){var r=0,o=!0,a=!1,s=void 0;try{for(var i,c=e[Symbol.iterator]();!(o=(i=c.next()).done);o=!0){var l=i.value;l.id!==n.id&&((l.body.includes("#"+n.number)||l.title.includes("#"+n.number))&&r++)}}catch(d){a=!0,s=d}finally{try{o||null==c.return||c.return()}finally{if(a)throw s}}return Object(w.a)({},n,{refCount:r,user:Object(w.a)({},n.user,{issuesCount:t.get(n.user.id)})})}))})),P=Object(x.a)([function(e){return e.filterValue}],(function(e){return e.split(" ").map((function(e){return e.trim().toLowerCase()})).filter(Boolean)})),E=Object(x.a)([D,P],(function(e,t){return t.length?e.filter((function(e){return t.every((function(t){return e.title.toLowerCase().includes(t)||e.body.toLowerCase().includes(t)||e.number.toString().includes(t)||e.refCount.toString().includes(t)||(e.user.login+" ("+e.user.issuesCount+")").toLowerCase().includes(t)||e.state.toLowerCase().includes(t)||new Date(e.created_at).toLocaleDateString("en-us",{year:"numeric",month:"numeric",day:"numeric"}).includes(t)}))})):e})),W=Object(x.b)({filteredResults:E}),A=Object(u.b)(W)(_),F=function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(c.a)(this,Object(l.a)(t).call(this))).onChangeColorScheme=function(e){n.setState({activeScheme:e.target.value},(function(){return n.props.updateColorScheme(n.state.activeScheme)}))},n.state={activeScheme:e.activeColorScheme},n}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return o.a.createElement("span",null,o.a.createElement("input",{type:"radio",id:"green",value:"green",name:"color-scheme",checked:"green"===this.state.activeScheme,onChange:this.onChangeColorScheme}),o.a.createElement("label",{htmlFor:"green"},"Green"),o.a.createElement("input",{type:"radio",id:"red",value:"red",name:"color-scheme",checked:"red"===this.state.activeScheme,onChange:this.onChangeColorScheme}),o.a.createElement("label",{htmlFor:"red"},"Red"))}}]),t}(o.a.Component),M={updateColorScheme:function(e){return{type:"CHANGE_SCHEME",payload:e}}},O=Object(u.b)((function(e){return{activeColorScheme:e.activeColorScheme}}),M)(F),L=n(14),N=n(15),Z=function(e){function t(){var e;return Object(i.a)(this,t),(e=Object(c.a)(this,Object(l.a)(t).call(this))).makeComponentActive=function(t){return function(){e.setState({selectedComponentId:t})}},e.renderSelectedComponent=function(){switch(e.state.selectedComponentId){case"slow":return o.a.createElement(k,null);case"fast":return o.a.createElement(C,null);case"broken":return o.a.createElement(A,null);default:return null}},e.state={selectedComponentId:"fast"},e}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return o.a.createElement("div",null,o.a.createElement("div",{className:"filter-box"},o.a.createElement(g,null),o.a.createElement(O,null)),o.a.createElement("div",{className:"component-line"},o.a.createElement("span",null,o.a.createElement("span",{onClick:this.makeComponentActive("slow"),id:"slow",className:"component-box "+("slow"===this.state.selectedComponentId?"active "+this.props.activeColorScheme+"-color":"inactive ")},"Slow ",o.a.createElement(L.a,{icon:N.c})),o.a.createElement("span",{onClick:this.makeComponentActive("fast"),id:"fast",className:"component-box "+("fast"===this.state.selectedComponentId?"active "+this.props.activeColorScheme+"-color":"inactive ")},"Fast ",o.a.createElement(L.a,{icon:N.b})),o.a.createElement("span",{onClick:this.makeComponentActive("broken"),id:"broken",className:"component-box "+("broken"===this.state.selectedComponentId?"active "+this.props.activeColorScheme+"-color":"inactive ")},"Broken ",o.a.createElement(L.a,{icon:N.a})))),this.renderSelectedComponent())}}]),t}(o.a.Component),B=Object(u.b)((function(e){return{activeColorScheme:e.activeColorScheme}}),null)(Z);var q=function(){return o.a.createElement(B,null)};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var H=n(13),U={filterValue:"",results:n(23),activeColorScheme:"green"},z=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:U,t=arguments.length>1?arguments[1]:void 0;switch(null===t||void 0===t?void 0:t.type){case"UPDATE_FILTER":return Object(w.a)({},e,{filterValue:t.payload});case"CHANGE_SCHEME":return Object(w.a)({},e,{activeColorScheme:t.payload});default:return e}},G=Object(H.b)(z);s.a.render(o.a.createElement(u.a,{store:G},o.a.createElement(q,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[24,1,2]]]);
//# sourceMappingURL=main.c1d6c632.chunk.js.map